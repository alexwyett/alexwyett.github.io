(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var Fuse = require('fuse.js');
var $ = require('jquery');
var Mustache = require('mustache');

module.exports = {
  urlParam: function(name) {
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
    if (results==null) {
      return null;
    } else {
      return decodeURI(results[1]) || 0;
    }
  },
  siteSearch: function(param) {
    var options = {
        shouldSort: true,
        threshold: 0.3,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        minMatchCharLength: 2,
        includeScore: true,
        keys: [
          'title',
          'tags'
      ]
    };

    var f = new Fuse(typeof pages !== 'undefined' ? pages : [], options);
    var tpl = '{{#results.length}}<div class="inner">{{#results}}' + 
          '<div class="callout" data-closable>' +
              '<p>' +
                  '<a href="{{item.href}}">{{item.title}} &raquo;</a>' +
              '</p>' +
              '{{#item.tags.length}}<p class="tags">{{#item.tags}}<a href="/?s={{.}}">{{.}}</a>{{/item.tags}}</p>{{/item.tags.length}}' + 
              '<button class="close-button" aria-label="Dismiss alert" type="button" data-close>' + 
                '<span aria-hidden="true">&times;</span>' + 
              '</button>' + 
          '</div>' +
        '{{/results}}{{/results.length}}';

    var nr = function() {
      $('#results').html(
        '<div class="callout" data-closable>' + 
          '<p>No results found</p>' + 
          '<button class="close-button" aria-label="Dismiss alert" type="button" data-close>' + 
            '<span aria-hidden="true">&times;</span>' + 
          '</button>' + 
        '</div>'
      );
    };

    var search = function(val) {
      val = (typeof val === 'string') ? val : '';

      if (val.length <= 2) {
        $('#results').html('');
      } else {
        var r = f.search(val);
        if (r.length === 0) {
          nr();
        } else {
          $("#results").html(
            Mustache.render(
              tpl,
              { results: r }
            )
          ); 
        }
      }
    };

    return search(param);
  }
}
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/Utils.js","/")
},{"b55mWE":41,"buffer":40,"fuse.js":38,"jquery":43,"mustache":44}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var $ = require('jquery');
var Utils = require('./Utils');
var Foundation = require('foundation-sites/dist/js/npm');
$(document).foundation();

$(window).on('load', function() {
  $('input[type=search]').on('keyup', function() {
    Utils.siteSearch($(this).val());
  });

  if (Utils.urlParam('s') && Utils.urlParam('s').length > 0) {
    $('input[type=search]').val(Utils.urlParam('s'));
    Utils.siteSearch(Utils.urlParam('s'));
  }
});
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_c06cc763.js","/")
},{"./Utils":1,"b55mWE":41,"buffer":40,"foundation-sites/dist/js/npm":3,"jquery":43}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundation = require('../../js/foundation.core');

var _foundationUtil = require('../../js/foundation.util.core');

var _foundationUtil2 = require('../../js/foundation.util.box');

var _foundationUtil3 = require('../../js/foundation.util.imageLoader');

var _foundationUtil4 = require('../../js/foundation.util.keyboard');

var _foundationUtil5 = require('../../js/foundation.util.mediaQuery');

var _foundationUtil6 = require('../../js/foundation.util.motion');

var _foundationUtil7 = require('../../js/foundation.util.nest');

var _foundationUtil8 = require('../../js/foundation.util.timer');

var _foundationUtil9 = require('../../js/foundation.util.touch');

var _foundationUtil10 = require('../../js/foundation.util.triggers');

var _foundation2 = require('../../js/foundation.abide');

var _foundation3 = require('../../js/foundation.accordion');

var _foundation4 = require('../../js/foundation.accordionMenu');

var _foundation5 = require('../../js/foundation.drilldown');

var _foundation6 = require('../../js/foundation.dropdown');

var _foundation7 = require('../../js/foundation.dropdownMenu');

var _foundation8 = require('../../js/foundation.equalizer');

var _foundation9 = require('../../js/foundation.interchange');

var _foundation10 = require('../../js/foundation.magellan');

var _foundation11 = require('../../js/foundation.offcanvas');

var _foundation12 = require('../../js/foundation.orbit');

var _foundation13 = require('../../js/foundation.responsiveMenu');

var _foundation14 = require('../../js/foundation.responsiveToggle');

var _foundation15 = require('../../js/foundation.reveal');

var _foundation16 = require('../../js/foundation.slider');

var _foundation17 = require('../../js/foundation.smoothScroll');

var _foundation18 = require('../../js/foundation.sticky');

var _foundation19 = require('../../js/foundation.tabs');

var _foundation20 = require('../../js/foundation.toggler');

var _foundation21 = require('../../js/foundation.tooltip');

var _foundation22 = require('../../js/foundation.responsiveAccordionTabs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_foundation.Foundation.addToJquery(_jquery2.default);

// Add Foundation Utils to Foundation global namespace for backwards
// compatibility.

_foundation.Foundation.rtl = _foundationUtil.rtl;
_foundation.Foundation.GetYoDigits = _foundationUtil.GetYoDigits;
_foundation.Foundation.transitionend = _foundationUtil.transitionend;

_foundation.Foundation.Box = _foundationUtil2.Box;
_foundation.Foundation.onImagesLoaded = _foundationUtil3.onImagesLoaded;
_foundation.Foundation.Keyboard = _foundationUtil4.Keyboard;
_foundation.Foundation.MediaQuery = _foundationUtil5.MediaQuery;
_foundation.Foundation.Motion = _foundationUtil6.Motion;
_foundation.Foundation.Move = _foundationUtil6.Move;
_foundation.Foundation.Nest = _foundationUtil7.Nest;
_foundation.Foundation.Timer = _foundationUtil8.Timer;

// Touch and Triggers previously were almost purely sede effect driven,
// so n../../js// need to add it to Foundation, just init them.

_foundationUtil9.Touch.init(_jquery2.default);

_foundationUtil10.Triggers.init(_jquery2.default, _foundation.Foundation);

_foundation.Foundation.plugin(_foundation2.Abide, 'Abide');

_foundation.Foundation.plugin(_foundation3.Accordion, 'Accordion');

_foundation.Foundation.plugin(_foundation4.AccordionMenu, 'AccordionMenu');

_foundation.Foundation.plugin(_foundation5.Drilldown, 'Drilldown');

_foundation.Foundation.plugin(_foundation6.Dropdown, 'Dropdown');

_foundation.Foundation.plugin(_foundation7.DropdownMenu, 'DropdownMenu');

_foundation.Foundation.plugin(_foundation8.Equalizer, 'Equalizer');

_foundation.Foundation.plugin(_foundation9.Interchange, 'Interchange');

_foundation.Foundation.plugin(_foundation10.Magellan, 'Magellan');

_foundation.Foundation.plugin(_foundation11.OffCanvas, 'OffCanvas');

_foundation.Foundation.plugin(_foundation12.Orbit, 'Orbit');

_foundation.Foundation.plugin(_foundation13.ResponsiveMenu, 'ResponsiveMenu');

_foundation.Foundation.plugin(_foundation14.ResponsiveToggle, 'ResponsiveToggle');

_foundation.Foundation.plugin(_foundation15.Reveal, 'Reveal');

_foundation.Foundation.plugin(_foundation16.Slider, 'Slider');

_foundation.Foundation.plugin(_foundation17.SmoothScroll, 'SmoothScroll');

_foundation.Foundation.plugin(_foundation18.Sticky, 'Sticky');

_foundation.Foundation.plugin(_foundation19.Tabs, 'Tabs');

_foundation.Foundation.plugin(_foundation20.Toggler, 'Toggler');

_foundation.Foundation.plugin(_foundation21.Tooltip, 'Tooltip');

_foundation.Foundation.plugin(_foundation22.ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');

exports.default = _foundation.Foundation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS5qcyJdLCJuYW1lcyI6WyJGb3VuZGF0aW9uIiwiYWRkVG9KcXVlcnkiLCIkIiwicnRsIiwiR2V0WW9EaWdpdHMiLCJ0cmFuc2l0aW9uZW5kIiwiQm94Iiwib25JbWFnZXNMb2FkZWQiLCJLZXlib2FyZCIsIk1lZGlhUXVlcnkiLCJNb3Rpb24iLCJNb3ZlIiwiTmVzdCIsIlRpbWVyIiwiVG91Y2giLCJpbml0IiwiVHJpZ2dlcnMiLCJwbHVnaW4iLCJBYmlkZSIsIkFjY29yZGlvbiIsIkFjY29yZGlvbk1lbnUiLCJEcmlsbGRvd24iLCJEcm9wZG93biIsIkRyb3Bkb3duTWVudSIsIkVxdWFsaXplciIsIkludGVyY2hhbmdlIiwiTWFnZWxsYW4iLCJPZmZDYW52YXMiLCJPcmJpdCIsIlJlc3BvbnNpdmVNZW51IiwiUmVzcG9uc2l2ZVRvZ2dsZSIsIlJldmVhbCIsIlNsaWRlciIsIlNtb290aFNjcm9sbCIsIlN0aWNreSIsIlRhYnMiLCJUb2dnbGVyIiwiVG9vbHRpcCIsIlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUVBOztBQU1BOztBQUtBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQWNBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOztBQUdBOzs7O0FBaEdBQSx1QkFBV0MsV0FBWCxDQUF1QkMsZ0JBQXZCOztBQUVBO0FBQ0E7O0FBR0FGLHVCQUFXRyxHQUFYLEdBQWlCQSxtQkFBakI7QUFDQUgsdUJBQVdJLFdBQVgsR0FBeUJBLDJCQUF6QjtBQUNBSix1QkFBV0ssYUFBWCxHQUEyQkEsNkJBQTNCOztBQVVBTCx1QkFBV00sR0FBWCxHQUFpQkEsb0JBQWpCO0FBQ0FOLHVCQUFXTyxjQUFYLEdBQTRCQSwrQkFBNUI7QUFDQVAsdUJBQVdRLFFBQVgsR0FBc0JBLHlCQUF0QjtBQUNBUix1QkFBV1MsVUFBWCxHQUF3QkEsMkJBQXhCO0FBQ0FULHVCQUFXVSxNQUFYLEdBQW9CQSx1QkFBcEI7QUFDQVYsdUJBQVdXLElBQVgsR0FBa0JBLHFCQUFsQjtBQUNBWCx1QkFBV1ksSUFBWCxHQUFrQkEscUJBQWxCO0FBQ0FaLHVCQUFXYSxLQUFYLEdBQW1CQSxzQkFBbkI7O0FBRUE7QUFDQTs7QUFHQUMsdUJBQU1DLElBQU4sQ0FBV2IsZ0JBQVg7O0FBR0FjLDJCQUFTRCxJQUFULENBQWNiLGdCQUFkLEVBQWlCRixzQkFBakI7O0FBR0FBLHVCQUFXaUIsTUFBWCxDQUFrQkMsa0JBQWxCLEVBQXlCLE9BQXpCOztBQUdBbEIsdUJBQVdpQixNQUFYLENBQWtCRSxzQkFBbEIsRUFBNkIsV0FBN0I7O0FBR0FuQix1QkFBV2lCLE1BQVgsQ0FBa0JHLDBCQUFsQixFQUFpQyxlQUFqQzs7QUFHQXBCLHVCQUFXaUIsTUFBWCxDQUFrQkksc0JBQWxCLEVBQTZCLFdBQTdCOztBQUdBckIsdUJBQVdpQixNQUFYLENBQWtCSyxxQkFBbEIsRUFBNEIsVUFBNUI7O0FBR0F0Qix1QkFBV2lCLE1BQVgsQ0FBa0JNLHlCQUFsQixFQUFnQyxjQUFoQzs7QUFHQXZCLHVCQUFXaUIsTUFBWCxDQUFrQk8sc0JBQWxCLEVBQTZCLFdBQTdCOztBQUdBeEIsdUJBQVdpQixNQUFYLENBQWtCUSx3QkFBbEIsRUFBK0IsYUFBL0I7O0FBR0F6Qix1QkFBV2lCLE1BQVgsQ0FBa0JTLHNCQUFsQixFQUE0QixVQUE1Qjs7QUFHQTFCLHVCQUFXaUIsTUFBWCxDQUFrQlUsdUJBQWxCLEVBQTZCLFdBQTdCOztBQUdBM0IsdUJBQVdpQixNQUFYLENBQWtCVyxtQkFBbEIsRUFBeUIsT0FBekI7O0FBR0E1Qix1QkFBV2lCLE1BQVgsQ0FBa0JZLDRCQUFsQixFQUFrQyxnQkFBbEM7O0FBR0E3Qix1QkFBV2lCLE1BQVgsQ0FBa0JhLDhCQUFsQixFQUFvQyxrQkFBcEM7O0FBR0E5Qix1QkFBV2lCLE1BQVgsQ0FBa0JjLG9CQUFsQixFQUEwQixRQUExQjs7QUFHQS9CLHVCQUFXaUIsTUFBWCxDQUFrQmUsb0JBQWxCLEVBQTBCLFFBQTFCOztBQUdBaEMsdUJBQVdpQixNQUFYLENBQWtCZ0IsMEJBQWxCLEVBQWdDLGNBQWhDOztBQUdBakMsdUJBQVdpQixNQUFYLENBQWtCaUIsb0JBQWxCLEVBQTBCLFFBQTFCOztBQUdBbEMsdUJBQVdpQixNQUFYLENBQWtCa0Isa0JBQWxCLEVBQXdCLE1BQXhCOztBQUdBbkMsdUJBQVdpQixNQUFYLENBQWtCbUIscUJBQWxCLEVBQTJCLFNBQTNCOztBQUdBcEMsdUJBQVdpQixNQUFYLENBQWtCb0IscUJBQWxCLEVBQTJCLFNBQTNCOztBQUdBckMsdUJBQVdpQixNQUFYLENBQWtCcUIscUNBQWxCLEVBQTJDLHlCQUEzQzs7a0JBRWV0QyxzQiIsImZpbGUiOiJucG0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG5pbXBvcnQgeyBGb3VuZGF0aW9uIH0gZnJvbSAnLi4vLi4vanMvZm91bmRhdGlvbi5jb3JlJztcbkZvdW5kYXRpb24uYWRkVG9KcXVlcnkoJCk7XG5cbi8vIEFkZCBGb3VuZGF0aW9uIFV0aWxzIHRvIEZvdW5kYXRpb24gZ2xvYmFsIG5hbWVzcGFjZSBmb3IgYmFja3dhcmRzXG4vLyBjb21wYXRpYmlsaXR5LlxuXG5pbXBvcnQgeyBydGwsIEdldFlvRGlnaXRzLCB0cmFuc2l0aW9uZW5kIH0gZnJvbSAnLi4vLi4vanMvZm91bmRhdGlvbi51dGlsLmNvcmUnO1xuRm91bmRhdGlvbi5ydGwgPSBydGw7XG5Gb3VuZGF0aW9uLkdldFlvRGlnaXRzID0gR2V0WW9EaWdpdHM7XG5Gb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQgPSB0cmFuc2l0aW9uZW5kO1xuXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwuYm94J1xuaW1wb3J0IHsgb25JbWFnZXNMb2FkZWQgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXInO1xuaW1wb3J0IHsgS2V5Ym9hcmQgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQnO1xuaW1wb3J0IHsgTWVkaWFRdWVyeSB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5JztcbmltcG9ydCB7IE1vdGlvbiwgTW92ZSB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC5tb3Rpb24nO1xuaW1wb3J0IHsgTmVzdCB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC5uZXN0JztcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSAnLi4vLi4vanMvZm91bmRhdGlvbi51dGlsLnRpbWVyJztcblxuRm91bmRhdGlvbi5Cb3ggPSBCb3g7XG5Gb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkID0gb25JbWFnZXNMb2FkZWQ7XG5Gb3VuZGF0aW9uLktleWJvYXJkID0gS2V5Ym9hcmQ7XG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuRm91bmRhdGlvbi5Nb3Rpb24gPSBNb3Rpb247XG5Gb3VuZGF0aW9uLk1vdmUgPSBNb3ZlO1xuRm91bmRhdGlvbi5OZXN0ID0gTmVzdDtcbkZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcblxuLy8gVG91Y2ggYW5kIFRyaWdnZXJzIHByZXZpb3VzbHkgd2VyZSBhbG1vc3QgcHVyZWx5IHNlZGUgZWZmZWN0IGRyaXZlbixcbi8vIHNvIG4uLi8uLi9qcy8vIG5lZWQgdG8gYWRkIGl0IHRvIEZvdW5kYXRpb24sIGp1c3QgaW5pdCB0aGVtLlxuXG5pbXBvcnQgeyBUb3VjaCB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC50b3VjaCc7XG5Ub3VjaC5pbml0KCQpO1xuXG5pbXBvcnQgeyBUcmlnZ2VycyB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC50cmlnZ2Vycyc7XG5UcmlnZ2Vycy5pbml0KCQsIEZvdW5kYXRpb24pO1xuXG5pbXBvcnQgeyBBYmlkZSB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24uYWJpZGUnO1xuRm91bmRhdGlvbi5wbHVnaW4oQWJpZGUsICdBYmlkZScpO1xuXG5pbXBvcnQgeyBBY2NvcmRpb24gfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLmFjY29yZGlvbic7XG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb24sICdBY2NvcmRpb24nKTtcblxuaW1wb3J0IHsgQWNjb3JkaW9uTWVudSB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24uYWNjb3JkaW9uTWVudSc7XG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb25NZW51LCAnQWNjb3JkaW9uTWVudScpO1xuXG5pbXBvcnQgeyBEcmlsbGRvd24gfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLmRyaWxsZG93bic7XG5Gb3VuZGF0aW9uLnBsdWdpbihEcmlsbGRvd24sICdEcmlsbGRvd24nKTtcblxuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLmRyb3Bkb3duJztcbkZvdW5kYXRpb24ucGx1Z2luKERyb3Bkb3duLCAnRHJvcGRvd24nKTtcblxuaW1wb3J0IHsgRHJvcGRvd25NZW51IH0gZnJvbSAnLi4vLi4vanMvZm91bmRhdGlvbi5kcm9wZG93bk1lbnUnO1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd25NZW51LCAnRHJvcGRvd25NZW51Jyk7XG5cbmltcG9ydCB7IEVxdWFsaXplciB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24uZXF1YWxpemVyJztcbkZvdW5kYXRpb24ucGx1Z2luKEVxdWFsaXplciwgJ0VxdWFsaXplcicpO1xuXG5pbXBvcnQgeyBJbnRlcmNoYW5nZSB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24uaW50ZXJjaGFuZ2UnO1xuRm91bmRhdGlvbi5wbHVnaW4oSW50ZXJjaGFuZ2UsICdJbnRlcmNoYW5nZScpO1xuXG5pbXBvcnQgeyBNYWdlbGxhbiB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24ubWFnZWxsYW4nO1xuRm91bmRhdGlvbi5wbHVnaW4oTWFnZWxsYW4sICdNYWdlbGxhbicpO1xuXG5pbXBvcnQgeyBPZmZDYW52YXMgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLm9mZmNhbnZhcyc7XG5Gb3VuZGF0aW9uLnBsdWdpbihPZmZDYW52YXMsICdPZmZDYW52YXMnKTtcblxuaW1wb3J0IHsgT3JiaXQgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLm9yYml0JztcbkZvdW5kYXRpb24ucGx1Z2luKE9yYml0LCAnT3JiaXQnKTtcblxuaW1wb3J0IHsgUmVzcG9uc2l2ZU1lbnUgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnJlc3BvbnNpdmVNZW51JztcbkZvdW5kYXRpb24ucGx1Z2luKFJlc3BvbnNpdmVNZW51LCAnUmVzcG9uc2l2ZU1lbnUnKTtcblxuaW1wb3J0IHsgUmVzcG9uc2l2ZVRvZ2dsZSB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZSc7XG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlVG9nZ2xlLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG5pbXBvcnQgeyBSZXZlYWwgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnJldmVhbCc7XG5Gb3VuZGF0aW9uLnBsdWdpbihSZXZlYWwsICdSZXZlYWwnKTtcblxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSAnLi4vLi4vanMvZm91bmRhdGlvbi5zbGlkZXInO1xuRm91bmRhdGlvbi5wbHVnaW4oU2xpZGVyLCAnU2xpZGVyJyk7XG5cbmltcG9ydCB7IFNtb290aFNjcm9sbCB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24uc21vb3RoU2Nyb2xsJztcbkZvdW5kYXRpb24ucGx1Z2luKFNtb290aFNjcm9sbCwgJ1Ntb290aFNjcm9sbCcpO1xuXG5pbXBvcnQgeyBTdGlja3kgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnN0aWNreSc7XG5Gb3VuZGF0aW9uLnBsdWdpbihTdGlja3ksICdTdGlja3knKTtcblxuaW1wb3J0IHsgVGFicyB9IGZyb20gJy4uLy4uL2pzL2ZvdW5kYXRpb24udGFicyc7XG5Gb3VuZGF0aW9uLnBsdWdpbihUYWJzLCAnVGFicycpO1xuXG5pbXBvcnQgeyBUb2dnbGVyIH0gZnJvbSAnLi4vLi4vanMvZm91bmRhdGlvbi50b2dnbGVyJztcbkZvdW5kYXRpb24ucGx1Z2luKFRvZ2dsZXIsICdUb2dnbGVyJyk7XG5cbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnRvb2x0aXAnO1xuRm91bmRhdGlvbi5wbHVnaW4oVG9vbHRpcCwgJ1Rvb2x0aXAnKTtcblxuaW1wb3J0IHsgUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMgfSBmcm9tICcuLi8uLi9qcy9mb3VuZGF0aW9uLnJlc3BvbnNpdmVBY2NvcmRpb25UYWJzJztcbkZvdW5kYXRpb24ucGx1Z2luKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLCAnUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMnKTtcblxuZXhwb3J0IGRlZmF1bHQgRm91bmRhdGlvbjtcbiJdfQ==
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/dist/js/npm.js","/../../node_modules/foundation-sites/dist/js")
},{"../../js/foundation.abide":4,"../../js/foundation.accordion":5,"../../js/foundation.accordionMenu":6,"../../js/foundation.core":7,"../../js/foundation.drilldown":8,"../../js/foundation.dropdown":9,"../../js/foundation.dropdownMenu":10,"../../js/foundation.equalizer":11,"../../js/foundation.interchange":12,"../../js/foundation.magellan":13,"../../js/foundation.offcanvas":14,"../../js/foundation.orbit":15,"../../js/foundation.responsiveAccordionTabs":18,"../../js/foundation.responsiveMenu":19,"../../js/foundation.responsiveToggle":20,"../../js/foundation.reveal":21,"../../js/foundation.slider":22,"../../js/foundation.smoothScroll":23,"../../js/foundation.sticky":24,"../../js/foundation.tabs":25,"../../js/foundation.toggler":26,"../../js/foundation.tooltip":27,"../../js/foundation.util.box":28,"../../js/foundation.util.core":29,"../../js/foundation.util.imageLoader":30,"../../js/foundation.util.keyboard":31,"../../js/foundation.util.mediaQuery":32,"../../js/foundation.util.motion":33,"../../js/foundation.util.nest":34,"../../js/foundation.util.timer":35,"../../js/foundation.util.touch":36,"../../js/foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Abide = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Abide module.
 * @module foundation.abide
 */

var Abide = function (_Plugin) {
  _inherits(Abide, _Plugin);

  function Abide() {
    _classCallCheck(this, Abide);

    return _possibleConstructorReturn(this, (Abide.__proto__ || Object.getPrototypeOf(Abide)).apply(this, arguments));
  }

  _createClass(Abide, [{
    key: '_setup',

    /**
     * Creates a new instance of Abide.
     * @class
     * @name Abide
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this.$element = element;
      this.options = _jquery2.default.extend(true, {}, Abide.defaults, this.$element.data(), options);

      this.className = 'Abide'; // ie9 back compat
      this._init();
    }

    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      this.$inputs = this.$element.find('input, textarea, select');

      this._events();
    }

    /**
     * Initializes events for Abide.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this3 = this;

      this.$element.off('.abide').on('reset.zf.abide', function () {
        _this3.resetForm();
      }).on('submit.zf.abide', function () {
        return _this3.validateForm();
      });

      if (this.options.validateOn === 'fieldChange') {
        this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {
          _this3.validateInput((0, _jquery2.default)(e.target));
        });
      }

      if (this.options.liveValidate) {
        this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {
          _this3.validateInput((0, _jquery2.default)(e.target));
        });
      }

      if (this.options.validateOnBlur) {
        this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {
          _this3.validateInput((0, _jquery2.default)(e.target));
        });
      }
    }

    /**
     * Calls necessary functions to update Abide upon DOM change
     * @private
     */

  }, {
    key: '_reflow',
    value: function _reflow() {
      this._init();
    }

    /**
     * Checks whether or not a form element has the required attribute and if it's checked or not
     * @param {Object} element - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */

  }, {
    key: 'requiredCheck',
    value: function requiredCheck($el) {
      if (!$el.attr('required')) return true;

      var isGood = true;

      switch ($el[0].type) {
        case 'checkbox':
          isGood = $el[0].checked;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          var opt = $el.find('option:selected');
          if (!opt.length || !opt.val()) isGood = false;
          break;

        default:
          if (!$el.val() || !$el.val().length) isGood = false;
      }

      return isGood;
    }

    /**
     * Get:
     * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:
     *   1. The element's direct sibling('s).
     *   2. The element's parent's children.
     * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.
     *
     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
     *
     * @param {Object} $el - jQuery object to use as reference to find the form error selector.
     * @returns {Object} jQuery object with the selector.
     */

  }, {
    key: 'findFormError',
    value: function findFormError($el) {
      var id = $el[0].id;
      var $error = $el.siblings(this.options.formErrorSelector);

      if (!$error.length) {
        $error = $el.parent().find(this.options.formErrorSelector);
      }

      $error = $error.add(this.$element.find('[data-form-error-for="' + id + '"]'));

      return $error;
    }

    /**
     * Get the first element in this order:
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */

  }, {
    key: 'findLabel',
    value: function findLabel($el) {
      var id = $el[0].id;
      var $label = this.$element.find('label[for="' + id + '"]');

      if (!$label.length) {
        return $el.closest('label');
      }

      return $label;
    }

    /**
     * Get the set of labels associated with a set of radio els in this order
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */

  }, {
    key: 'findRadioLabels',
    value: function findRadioLabels($els) {
      var _this4 = this;

      var labels = $els.map(function (i, el) {
        var id = el.id;
        var $label = _this4.$element.find('label[for="' + id + '"]');

        if (!$label.length) {
          $label = (0, _jquery2.default)(el).closest('label');
        }
        return $label[0];
      });

      return (0, _jquery2.default)(labels);
    }

    /**
     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
     * @param {Object} $el - jQuery object to add the class to
     */

  }, {
    key: 'addErrorClasses',
    value: function addErrorClasses($el) {
      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.addClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.addClass(this.options.formErrorClass);
      }

      $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
    }

    /**
     * Remove CSS error classes etc from an entire radio button group
     * @param {String} groupName - A string that specifies the name of a radio button group
     *
     */

  }, {
    key: 'removeRadioErrorClasses',
    value: function removeRadioErrorClasses(groupName) {
      var $els = this.$element.find(':radio[name="' + groupName + '"]');
      var $labels = this.findRadioLabels($els);
      var $formErrors = this.findFormError($els);

      if ($labels.length) {
        $labels.removeClass(this.options.labelErrorClass);
      }

      if ($formErrors.length) {
        $formErrors.removeClass(this.options.formErrorClass);
      }

      $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Removes CSS error class as specified by the Abide settings from the label, input, and the form
     * @param {Object} $el - jQuery object to remove the class from
     */

  }, {
    key: 'removeErrorClasses',
    value: function removeErrorClasses($el) {
      // radios need to clear all of the els
      if ($el[0].type == 'radio') {
        return this.removeRadioErrorClasses($el.attr('name'));
      }

      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.removeClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.removeClass(this.options.formErrorClass);
      }

      $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.
     * Ignores inputs with data-abide-ignore, type="hidden" or disabled attributes set
     * @fires Abide#invalid
     * @fires Abide#valid
     * @param {Object} element - jQuery object to validate, should be an HTML input
     * @returns {Boolean} goodToGo - If the input is valid or not.
     */

  }, {
    key: 'validateInput',
    value: function validateInput($el) {
      var clearRequire = this.requiredCheck($el),
          validated = false,
          customValidator = true,
          validator = $el.attr('data-validator'),
          equalTo = true;

      // don't validate ignored inputs or hidden inputs or disabled inputs
      if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]') || $el.is('[disabled]')) {
        return true;
      }

      switch ($el[0].type) {
        case 'radio':
          validated = this.validateRadio($el.attr('name'));
          break;

        case 'checkbox':
          validated = clearRequire;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          validated = clearRequire;
          break;

        default:
          validated = this.validateText($el);
      }

      if (validator) {
        customValidator = this.matchValidation($el, validator, $el.attr('required'));
      }

      if ($el.attr('data-equalto')) {
        equalTo = this.options.validators.equalTo($el);
      }

      var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
      var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

      if (goodToGo) {
        // Re-validate inputs that depend on this one with equalto
        var dependentElements = this.$element.find('[data-equalto="' + $el.attr('id') + '"]');
        if (dependentElements.length) {
          var _this = this;
          dependentElements.each(function () {
            if ((0, _jquery2.default)(this).val()) {
              _this.validateInput((0, _jquery2.default)(this));
            }
          });
        }
      }

      this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

      /**
       * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
       * Trigger includes the DOM element of the input.
       * @event Abide#valid
       * @event Abide#invalid
       */
      $el.trigger(message, [$el]);

      return goodToGo;
    }

    /**
     * Goes through a form and if there are any invalid inputs, it will display the form error element
     * @returns {Boolean} noError - true if no errors were detected...
     * @fires Abide#formvalid
     * @fires Abide#forminvalid
     */

  }, {
    key: 'validateForm',
    value: function validateForm() {
      var acc = [];
      var _this = this;

      this.$inputs.each(function () {
        acc.push(_this.validateInput((0, _jquery2.default)(this)));
      });

      var noError = acc.indexOf(false) === -1;

      this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

      /**
       * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
       * Trigger includes the element of the form.
       * @event Abide#formvalid
       * @event Abide#forminvalid
       */
      this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

      return noError;
    }

    /**
     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
     * @param {Object} $el - jQuery object to validate, should be a text input HTML element
     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
     */

  }, {
    key: 'validateText',
    value: function validateText($el, pattern) {
      // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
      pattern = pattern || $el.attr('pattern') || $el.attr('type');
      var inputText = $el.val();
      var valid = false;

      if (inputText.length) {
        // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
        if (this.options.patterns.hasOwnProperty(pattern)) {
          valid = this.options.patterns[pattern].test(inputText);
        }
        // If the pattern name isn't also the type attribute of the field, then test it as a regexp
        else if (pattern !== $el.attr('type')) {
            valid = new RegExp(pattern).test(inputText);
          } else {
            valid = true;
          }
      }
      // An empty field is valid if it's not required
      else if (!$el.prop('required')) {
          valid = true;
        }

      return valid;
    }

    /**
     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
     * @param {String} groupName - A string that specifies the name of a radio button group
     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
     */

  }, {
    key: 'validateRadio',
    value: function validateRadio(groupName) {
      // If at least one radio in the group has the `required` attribute, the group is considered required
      // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
      var $group = this.$element.find(':radio[name="' + groupName + '"]');
      var valid = false,
          required = false;

      // For the group to be required, at least one radio needs to be required
      $group.each(function (i, e) {
        if ((0, _jquery2.default)(e).attr('required')) {
          required = true;
        }
      });
      if (!required) valid = true;

      if (!valid) {
        // For the group to be valid, at least one radio needs to be checked
        $group.each(function (i, e) {
          if ((0, _jquery2.default)(e).prop('checked')) {
            valid = true;
          }
        });
      };

      return valid;
    }

    /**
     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
     * @param {Object} $el - jQuery input element.
     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
     * @param {Boolean} required - self explanatory?
     * @returns {Boolean} - true if validations passed.
     */

  }, {
    key: 'matchValidation',
    value: function matchValidation($el, validators, required) {
      var _this5 = this;

      required = required ? true : false;

      var clear = validators.split(' ').map(function (v) {
        return _this5.options.validators[v]($el, required, $el.parent());
      });
      return clear.indexOf(false) === -1;
    }

    /**
     * Resets form inputs and styles
     * @fires Abide#formreset
     */

  }, {
    key: 'resetForm',
    value: function resetForm() {
      var $form = this.$element,
          opts = this.options;

      (0, _jquery2.default)('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);
      (0, _jquery2.default)('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);
      (0, _jquery2.default)(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);
      $form.find('[data-abide-error]').css('display', 'none');
      (0, _jquery2.default)(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
      (0, _jquery2.default)(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      (0, _jquery2.default)(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      /**
       * Fires when the form has been reset.
       * @event Abide#formreset
       */
      $form.trigger('formreset.zf.abide', [$form]);
    }

    /**
     * Destroys an instance of Abide.
     * Removes error styles and classes from elements, without resetting their values.
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      var _this = this;
      this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

      this.$inputs.off('.abide').each(function () {
        _this.removeErrorClasses((0, _jquery2.default)(this));
      });
    }
  }]);

  return Abide;
}(_foundation.Plugin);

/**
 * Default settings for plugin
 */


Abide.defaults = {
  /**
   * The default event to validate inputs. Checkboxes and radios validate immediately.
   * Remove or change this value for manual validation.
   * @option
   * @type {?string}
   * @default 'fieldChange'
   */
  validateOn: 'fieldChange',

  /**
   * Class to be applied to input labels on failed validation.
   * @option
   * @type {string}
   * @default 'is-invalid-label'
   */
  labelErrorClass: 'is-invalid-label',

  /**
   * Class to be applied to inputs on failed validation.
   * @option
   * @type {string}
   * @default 'is-invalid-input'
   */
  inputErrorClass: 'is-invalid-input',

  /**
   * Class selector to use to target Form Errors for show/hide.
   * @option
   * @type {string}
   * @default '.form-error'
   */
  formErrorSelector: '.form-error',

  /**
   * Class added to Form Errors on failed validation.
   * @option
   * @type {string}
   * @default 'is-visible'
   */
  formErrorClass: 'is-visible',

  /**
   * Set to true to validate text inputs on any value change.
   * @option
   * @type {boolean}
   * @default false
   */
  liveValidate: false,

  /**
   * Set to true to validate inputs on blur.
   * @option
   * @type {boolean}
   * @default false
   */
  validateOnBlur: false,

  patterns: {
    alpha: /^[a-zA-Z]+$/,
    alpha_numeric: /^[a-zA-Z0-9]+$/,
    integer: /^[-+]?\d+$/,
    number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

    // amex, visa, diners
    card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
    cvv: /^([0-9]){3,4}$/,

    // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
    email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

    url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
    // abc.de
    domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

    datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
    // YYYY-MM-DD
    date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
    // HH:MM:SS
    time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
    dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
    // MM/DD/YYYY
    month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
    // DD/MM/YYYY
    day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

    // #FFF or #FFFFFF
    color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,

    // Domain || URL
    website: {
      test: function test(text) {
        return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);
      }
    }
  },

  /**
   * Optional validation functions to be used. `equalTo` being the only default included function.
   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
   * el : The jQuery element to validate.
   * required : Boolean value of the required attribute be present or not.
   * parent : The direct parent of the input.
   * @option
   */
  validators: {
    equalTo: function equalTo(el, required, parent) {
      return (0, _jquery2.default)('#' + el.attr('data-equalto')).val() === el.val();
    }
  }
};

exports.Abide = Abide;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.abide.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"b55mWE":41,"buffer":40,"jquery":43}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordion = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Accordion module.
 * @module foundation.accordion
 * @requires foundation.util.keyboard
 */

var Accordion = function (_Plugin) {
  _inherits(Accordion, _Plugin);

  function Accordion() {
    _classCallCheck(this, Accordion);

    return _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).apply(this, arguments));
  }

  _createClass(Accordion, [{
    key: '_setup',

    /**
     * Creates a new instance of an accordion.
     * @class
     * @name Accordion
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Accordion.defaults, this.$element.data(), options);

      this.className = 'Accordion'; // ie9 back compat
      this._init();

      _foundationUtil.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      var _this3 = this;

      this.$element.attr('role', 'tablist');
      this.$tabs = this.$element.children('[data-accordion-item]');

      this.$tabs.each(function (idx, el) {
        var $el = (0, _jquery2.default)(el),
            $content = $el.children('[data-tab-content]'),
            id = $content[0].id || (0, _foundationUtil2.GetYoDigits)(6, 'accordion'),
            linkId = el.id || id + '-label';

        $el.find('a:first').attr({
          'aria-controls': id,
          'role': 'tab',
          'id': linkId,
          'aria-expanded': false,
          'aria-selected': false
        });

        $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
      });
      var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
      this.firstTimeInit = true;
      if ($initActive.length) {
        this.down($initActive, this.firstTimeInit);
        this.firstTimeInit = false;
      }

      this._checkDeepLink = function () {
        var anchor = window.location.hash;
        //need a hash and a relevant anchor in this tabset
        if (anchor.length) {
          var $link = _this3.$element.find('[href$="' + anchor + '"]'),
              $anchor = (0, _jquery2.default)(anchor);

          if ($link.length && $anchor) {
            if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {
              _this3.down($anchor, _this3.firstTimeInit);
              _this3.firstTimeInit = false;
            };

            //roll up a little to show the titles
            if (_this3.options.deepLinkSmudge) {
              var _this = _this3;
              (0, _jquery2.default)(window).load(function () {
                var offset = _this.$element.offset();
                (0, _jquery2.default)('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);
              });
            }

            /**
              * Fires when the zplugin has deeplinked at pageload
              * @event Accordion#deeplink
              */
            _this3.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);
          }
        }
      };

      //use browser to open a tab, if it exists in this tabset
      if (this.options.deepLink) {
        this._checkDeepLink();
      }

      this._events();
    }

    /**
     * Adds event handlers for items within the accordion.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;

      this.$tabs.each(function () {
        var $elem = (0, _jquery2.default)(this);
        var $tabContent = $elem.children('[data-tab-content]');
        if ($tabContent.length) {
          $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
            e.preventDefault();
            _this.toggle($tabContent);
          }).on('keydown.zf.accordion', function (e) {
            _foundationUtil.Keyboard.handleKey(e, 'Accordion', {
              toggle: function toggle() {
                _this.toggle($tabContent);
              },
              next: function next() {
                var $a = $elem.next().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              previous: function previous() {
                var $a = $elem.prev().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              handled: function handled() {
                e.preventDefault();
                e.stopPropagation();
              }
            });
          });
        }
      });
      if (this.options.deepLink) {
        (0, _jquery2.default)(window).on('popstate', this._checkDeepLink);
      }
    }

    /**
     * Toggles the selected content pane's open/close state.
     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
     * @function
     */

  }, {
    key: 'toggle',
    value: function toggle($target) {
      if ($target.closest('[data-accordion]').is('[disabled]')) {
        console.info('Cannot toggle an accordion that is disabled.');
        return;
      }
      if ($target.parent().hasClass('is-active')) {
        this.up($target);
      } else {
        this.down($target);
      }
      //either replace or update browser history
      if (this.options.deepLink) {
        var anchor = $target.prev('a').attr('href');

        if (this.options.updateHistory) {
          history.pushState({}, '', anchor);
        } else {
          history.replaceState({}, '', anchor);
        }
      }
    }

    /**
     * Opens the accordion tab defined by `$target`.
     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
     * @param {Boolean} firstTime - flag to determine if reflow should happen.
     * @fires Accordion#down
     * @function
     */

  }, {
    key: 'down',
    value: function down($target, firstTime) {
      var _this4 = this;

      /**
       * checking firstTime allows for initial render of the accordion
       * to render preset is-active panes.
       */
      if ($target.closest('[data-accordion]').is('[disabled]') && !firstTime) {
        console.info('Cannot call down on an accordion that is disabled.');
        return;
      }
      $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

      if (!this.options.multiExpand && !firstTime) {
        var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
        if ($currentActive.length) {
          this.up($currentActive.not($target));
        }
      }

      $target.slideDown(this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done opening.
         * @event Accordion#down
         */
        _this4.$element.trigger('down.zf.accordion', [$target]);
      });

      (0, _jquery2.default)('#' + $target.attr('aria-labelledby')).attr({
        'aria-expanded': true,
        'aria-selected': true
      });
    }

    /**
     * Closes the tab defined by `$target`.
     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
     * @fires Accordion#up
     * @function
     */

  }, {
    key: 'up',
    value: function up($target) {
      if ($target.closest('[data-accordion]').is('[disabled]')) {
        console.info('Cannot call up on an accordion that is disabled.');
        return;
      }

      var $aunts = $target.parent().siblings(),
          _this = this;

      if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
        return;
      }

      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */
        _this.$element.trigger('up.zf.accordion', [$target]);
      });

      $target.attr('aria-hidden', true).parent().removeClass('is-active');

      (0, _jquery2.default)('#' + $target.attr('aria-labelledby')).attr({
        'aria-expanded': false,
        'aria-selected': false
      });
    }

    /**
     * Destroys an instance of an accordion.
     * @fires Accordion#destroyed
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
      this.$element.find('a').off('.zf.accordion');
      if (this.options.deepLink) {
        (0, _jquery2.default)(window).off('popstate', this._checkDeepLink);
      }
    }
  }]);

  return Accordion;
}(_foundation.Plugin);

Accordion.defaults = {
  /**
   * Amount of time to animate the opening of an accordion pane.
   * @option
   * @type {number}
   * @default 250
   */
  slideSpeed: 250,
  /**
   * Allow the accordion to have multiple open panes.
   * @option
   * @type {boolean}
   * @default false
   */
  multiExpand: false,
  /**
   * Allow the accordion to close all panes.
   * @option
   * @type {boolean}
   * @default false
   */
  allowAllClosed: false,
  /**
   * Allows the window to scroll to content of pane specified by hash anchor
   * @option
   * @type {boolean}
   * @default false
   */
  deepLink: false,

  /**
   * Adjust the deep link scroll to make sure the top of the accordion panel is visible
   * @option
   * @type {boolean}
   * @default false
   */
  deepLinkSmudge: false,

  /**
   * Animation time (ms) for the deep link adjustment
   * @option
   * @type {number}
   * @default 300
   */
  deepLinkSmudgeDelay: 300,

  /**
   * Update the browser history with the open accordion
   * @option
   * @type {boolean}
   * @default false
   */
  updateHistory: false
};

exports.Accordion = Accordion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.accordion.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.keyboard":31,"b55mWE":41,"buffer":40,"jquery":43}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccordionMenu = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.nest');

var _foundationUtil3 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * AccordionMenu module.
 * @module foundation.accordionMenu
 * @requires foundation.util.keyboard
 * @requires foundation.util.nest
 */

var AccordionMenu = function (_Plugin) {
  _inherits(AccordionMenu, _Plugin);

  function AccordionMenu() {
    _classCallCheck(this, AccordionMenu);

    return _possibleConstructorReturn(this, (AccordionMenu.__proto__ || Object.getPrototypeOf(AccordionMenu)).apply(this, arguments));
  }

  _createClass(AccordionMenu, [{
    key: '_setup',

    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @name AccordionMenu
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, AccordionMenu.defaults, this.$element.data(), options);
      this.className = 'AccordionMenu'; // ie9 back compat

      this._init();

      _foundationUtil.Keyboard.register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }

    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil2.Nest.Feather(this.$element, 'accordion');

      var _this = this;

      this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
      this.$element.attr({
        'role': 'tree',
        'aria-multiselectable': this.options.multiOpen
      });

      this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
      this.$menuLinks.each(function () {
        var linkId = this.id || (0, _foundationUtil3.GetYoDigits)(6, 'acc-menu-link'),
            $elem = (0, _jquery2.default)(this),
            $sub = $elem.children('[data-submenu]'),
            subId = $sub[0].id || (0, _foundationUtil3.GetYoDigits)(6, 'acc-menu'),
            isActive = $sub.hasClass('is-active');

        if (_this.options.parentLink) {
          var $anchor = $elem.children('a');
          $anchor.clone().prependTo($sub).wrap('<li data-is-parent-link class="is-submenu-parent-item is-submenu-item is-accordion-submenu-item"></li>');
        }

        if (_this.options.submenuToggle) {
          $elem.addClass('has-submenu-toggle');
          $elem.children('a').after('<button id="' + linkId + '" class="submenu-toggle" aria-controls="' + subId + '" aria-expanded="' + isActive + '" title="' + _this.options.submenuToggleText + '"><span class="submenu-toggle-text">' + _this.options.submenuToggleText + '</span></button>');
        } else {
          $elem.attr({
            'aria-controls': subId,
            'aria-expanded': isActive,
            'id': linkId
          });
        }
        $sub.attr({
          'aria-labelledby': linkId,
          'aria-hidden': !isActive,
          'role': 'group',
          'id': subId
        });
      });
      this.$element.find('li').attr({
        'role': 'treeitem'
      });
      var initPanes = this.$element.find('.is-active');
      if (initPanes.length) {
        var _this = this;
        initPanes.each(function () {
          _this.down((0, _jquery2.default)(this));
        });
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the menu.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;

      this.$element.find('li').each(function () {
        var $submenu = (0, _jquery2.default)(this).children('[data-submenu]');

        if ($submenu.length) {
          if (_this.options.submenuToggle) {
            (0, _jquery2.default)(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
              _this.toggle($submenu);
            });
          } else {
            (0, _jquery2.default)(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
              e.preventDefault();
              _this.toggle($submenu);
            });
          }
        }
      }).on('keydown.zf.accordionmenu', function (e) {
        var $element = (0, _jquery2.default)(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement,
            $target = $element.children('[data-submenu]');

        $elements.each(function (i) {
          if ((0, _jquery2.default)(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

            if ((0, _jquery2.default)(this).children('[data-submenu]:visible').length) {
              // has open sub menu
              $nextElement = $element.find('li:first-child').find('a').first();
            }
            if ((0, _jquery2.default)(this).is(':first-child')) {
              // is first element of sub menu
              $prevElement = $element.parents('li').first().find('a').first();
            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
              // if previous element has open sub menu
              $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
            }
            if ((0, _jquery2.default)(this).is(':last-child')) {
              // is last element of sub menu
              $nextElement = $element.parents('li').first().next('li').find('a').first();
            }

            return;
          }
        });

        _foundationUtil.Keyboard.handleKey(e, 'AccordionMenu', {
          open: function open() {
            if ($target.is(':hidden')) {
              _this.down($target);
              $target.find('li').first().find('a').first().focus();
            }
          },
          close: function close() {
            if ($target.length && !$target.is(':hidden')) {
              // close active sub of this item
              _this.up($target);
            } else if ($element.parent('[data-submenu]').length) {
              // close currently open sub
              _this.up($element.parent('[data-submenu]'));
              $element.parents('li').first().find('a').first().focus();
            }
          },
          up: function up() {
            $prevElement.focus();
            return true;
          },
          down: function down() {
            $nextElement.focus();
            return true;
          },
          toggle: function toggle() {
            if (_this.options.submenuToggle) {
              return false;
            }
            if ($element.children('[data-submenu]').length) {
              _this.toggle($element.children('[data-submenu]'));
              return true;
            }
          },
          closeAll: function closeAll() {
            _this.hideAll();
          },
          handled: function handled(preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); //.attr('tabindex', 0);
    }

    /**
     * Closes all panes of the menu.
     * @function
     */

  }, {
    key: 'hideAll',
    value: function hideAll() {
      this.up(this.$element.find('[data-submenu]'));
    }

    /**
     * Opens all panes of the menu.
     * @function
     */

  }, {
    key: 'showAll',
    value: function showAll() {
      this.down(this.$element.find('[data-submenu]'));
    }

    /**
     * Toggles the open/close state of a submenu.
     * @function
     * @param {jQuery} $target - the submenu to toggle
     */

  }, {
    key: 'toggle',
    value: function toggle($target) {
      if (!$target.is(':animated')) {
        if (!$target.is(':hidden')) {
          this.up($target);
        } else {
          this.down($target);
        }
      }
    }

    /**
     * Opens the sub-menu defined by `$target`.
     * @param {jQuery} $target - Sub-menu to open.
     * @fires AccordionMenu#down
     */

  }, {
    key: 'down',
    value: function down($target) {
      var _this = this;

      if (!this.options.multiOpen) {
        this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
      }

      $target.addClass('is-active').attr({ 'aria-hidden': false });

      if (this.options.submenuToggle) {
        $target.prev('.submenu-toggle').attr({ 'aria-expanded': true });
      } else {
        $target.parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });
      }

      $target.slideDown(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done opening.
         * @event AccordionMenu#down
         */
        _this.$element.trigger('down.zf.accordionMenu', [$target]);
      });
    }

    /**
     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
     * @param {jQuery} $target - Sub-menu to close.
     * @fires AccordionMenu#up
     */

  }, {
    key: 'up',
    value: function up($target) {
      var _this = this;
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */
        _this.$element.trigger('up.zf.accordionMenu', [$target]);
      });

      var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

      if (this.options.submenuToggle) {
        $menus.prev('.submenu-toggle').attr('aria-expanded', false);
      } else {
        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
      }
    }

    /**
     * Destroys an instance of accordion menu.
     * @fires AccordionMenu#destroyed
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.find('[data-submenu]').slideDown(0).css('display', '');
      this.$element.find('a').off('click.zf.accordionMenu');
      this.$element.find('[data-is-parent-link]').detach();

      if (this.options.submenuToggle) {
        this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');
        this.$element.find('.submenu-toggle').remove();
      }

      _foundationUtil2.Nest.Burn(this.$element, 'accordion');
    }
  }]);

  return AccordionMenu;
}(_foundation.Plugin);

AccordionMenu.defaults = {
  /**
   * Adds the parent link to the submenu.
   * @option
   * @type {boolean}
   * @default false
   */
  parentLink: false,
  /**
   * Amount of time to animate the opening of a submenu in ms.
   * @option
   * @type {number}
   * @default 250
   */
  slideSpeed: 250,
  /**
   * Adds a separate submenu toggle button. This allows the parent item to have a link.
   * @option
   * @example true
   */
  submenuToggle: false,
  /**
   * The text used for the submenu toggle if enabled. This is used for screen readers only.
   * @option
   * @example true
   */
  submenuToggleText: 'Toggle menu',
  /**
   * Allow the menu to have multiple open panes.
   * @option
   * @type {boolean}
   * @default true
   */
  multiOpen: true
};

exports.AccordionMenu = AccordionMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.accordionMenu.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.keyboard":31,"./foundation.util.nest":34,"b55mWE":41,"buffer":40,"jquery":43}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Foundation = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

var _foundationUtil2 = require('./foundation.util.mediaQuery');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FOUNDATION_VERSION = '6.4.4-rc1';

// Global Foundation object
// This is attached to the window, or used as a module for AMD/Browserify
var Foundation = {
  version: FOUNDATION_VERSION,

  /**
   * Stores initialized plugins.
   */
  _plugins: {},

  /**
   * Stores generated unique ids for plugin instances
   */
  _uuids: [],

  /**
   * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
   * @param {Object} plugin - The constructor of the plugin.
   */
  plugin: function plugin(_plugin, name) {
    // Object key to use when adding to global Foundation object
    // Examples: Foundation.Reveal, Foundation.OffCanvas
    var className = name || functionName(_plugin);
    // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
    // Examples: data-reveal, data-off-canvas
    var attrName = hyphenate(className);

    // Add to the Foundation object and the plugins list (for reflowing)
    this._plugins[attrName] = this[className] = _plugin;
  },
  /**
   * @function
   * Populates the _uuids array with pointers to each individual plugin instance.
   * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
   * Also fires the initialization event for each plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @param {String} name - the name of the plugin, passed as a camelCased string.
   * @fires Plugin#init
   */
  registerPlugin: function registerPlugin(plugin, name) {
    var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
    plugin.uuid = (0, _foundationUtil.GetYoDigits)(6, pluginName);

    if (!plugin.$element.attr('data-' + pluginName)) {
      plugin.$element.attr('data-' + pluginName, plugin.uuid);
    }
    if (!plugin.$element.data('zfPlugin')) {
      plugin.$element.data('zfPlugin', plugin);
    }
    /**
     * Fires when the plugin has initialized.
     * @event Plugin#init
     */
    plugin.$element.trigger('init.zf.' + pluginName);

    this._uuids.push(plugin.uuid);

    return;
  },
  /**
   * @function
   * Removes the plugins uuid from the _uuids array.
   * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
   * Also fires the destroyed event for the plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @fires Plugin#destroyed
   */
  unregisterPlugin: function unregisterPlugin(plugin) {
    var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

    this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
    plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
    /**
     * Fires when the plugin has been destroyed.
     * @event Plugin#destroyed
     */
    .trigger('destroyed.zf.' + pluginName);
    for (var prop in plugin) {
      plugin[prop] = null; //clean up script to prep for garbage collection.
    }
    return;
  },

  /**
   * @function
   * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
   * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
   * @default If no argument is passed, reflow all currently active plugins.
   */
  reInit: function reInit(plugins) {
    var isJQ = plugins instanceof _jquery2.default;
    try {
      if (isJQ) {
        plugins.each(function () {
          (0, _jquery2.default)(this).data('zfPlugin')._init();
        });
      } else {
        var type = typeof plugins === 'undefined' ? 'undefined' : _typeof(plugins),
            _this = this,
            fns = {
          'object': function object(plgs) {
            plgs.forEach(function (p) {
              p = hyphenate(p);
              (0, _jquery2.default)('[data-' + p + ']').foundation('_init');
            });
          },
          'string': function string() {
            plugins = hyphenate(plugins);
            (0, _jquery2.default)('[data-' + plugins + ']').foundation('_init');
          },
          'undefined': function undefined() {
            this['object'](Object.keys(_this._plugins));
          }
        };
        fns[type](plugins);
      }
    } catch (err) {
      console.error(err);
    } finally {
      return plugins;
    }
  },

  /**
   * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
   * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
   * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
   */
  reflow: function reflow(elem, plugins) {

    // If plugins is undefined, just grab everything
    if (typeof plugins === 'undefined') {
      plugins = Object.keys(this._plugins);
    }
    // If plugins is a string, convert it to an array with one item
    else if (typeof plugins === 'string') {
        plugins = [plugins];
      }

    var _this = this;

    // Iterate through each plugin
    _jquery2.default.each(plugins, function (i, name) {
      // Get the current plugin
      var plugin = _this._plugins[name];

      // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
      var $elem = (0, _jquery2.default)(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

      // For each plugin found, initialize it
      $elem.each(function () {
        var $el = (0, _jquery2.default)(this),
            opts = {};
        // Don't double-dip on plugins
        if ($el.data('zfPlugin')) {
          console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
          return;
        }

        if ($el.attr('data-options')) {
          var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
            var opt = e.split(':').map(function (el) {
              return el.trim();
            });
            if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
          });
        }
        try {
          $el.data('zfPlugin', new plugin((0, _jquery2.default)(this), opts));
        } catch (er) {
          console.error(er);
        } finally {
          return;
        }
      });
    });
  },
  getFnName: functionName,

  addToJquery: function addToJquery($) {
    // TODO: consider not making this a jQuery function
    // TODO: need way to reflow vs. re-initialize
    /**
     * The Foundation jQuery method.
     * @param {String|Array} method - An action to perform on the current jQuery object.
     */
    var foundation = function foundation(method) {
      var type = typeof method === 'undefined' ? 'undefined' : _typeof(method),
          $noJS = $('.no-js');

      if ($noJS.length) {
        $noJS.removeClass('no-js');
      }

      if (type === 'undefined') {
        //needs to initialize the Foundation object, or an individual plugin.
        _foundationUtil2.MediaQuery._init();
        Foundation.reflow(this);
      } else if (type === 'string') {
        //an individual method to invoke on a plugin or group of plugins
        var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
        var plugClass = this.data('zfPlugin'); //determine the class of plugin

        if (plugClass !== undefined && plugClass[method] !== undefined) {
          //make sure both the class and method exist
          if (this.length === 1) {
            //if there's only one, call it directly.
            plugClass[method].apply(plugClass, args);
          } else {
            this.each(function (i, el) {
              //otherwise loop through the jQuery collection and invoke the method on each
              plugClass[method].apply($(el).data('zfPlugin'), args);
            });
          }
        } else {
          //error for no class or no method
          throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
        }
      } else {
        //error for invalid argument type
        throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
      }
      return this;
    };
    $.fn.foundation = foundation;
    return $;
  }
};

Foundation.util = {
  /**
   * Function for applying a debounce effect to a function call.
   * @function
   * @param {Function} func - Function to be called at end of timeout.
   * @param {Number} delay - Time in ms to delay the call of `func`.
   * @returns function
   */
  throttle: function throttle(func, delay) {
    var timer = null;

    return function () {
      var context = this,
          args = arguments;

      if (timer === null) {
        timer = setTimeout(function () {
          func.apply(context, args);
          timer = null;
        }, delay);
      }
    };
  }
};

window.Foundation = Foundation;

// Polyfill for requestAnimationFrame
(function () {
  if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
    return new Date().getTime();
  };

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }
  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;
    window.requestAnimationFrame = function (callback) {
      var now = Date.now();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function () {
        callback(lastTime = nextTime);
      }, nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }
  /**
   * Polyfill for performance.now, required by rAF
   */
  if (!window.performance || !window.performance.now) {
    window.performance = {
      start: Date.now(),
      now: function now() {
        return Date.now() - this.start;
      }
    };
  }
})();
if (!Function.prototype.bind) {
  Function.prototype.bind = function (oThis) {
    if (typeof this !== 'function') {
      // closest thing possible to the ECMAScript 5
      // internal IsCallable function
      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function fNOP() {},
        fBound = function fBound() {
      return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
    };

    if (this.prototype) {
      // native functions don't have a prototype
      fNOP.prototype = this.prototype;
    }
    fBound.prototype = new fNOP();

    return fBound;
  };
}
// Polyfill to get the name of a function in IE9
function functionName(fn) {
  if (Function.prototype.name === undefined) {
    var funcNameRegex = /function\s([^(]{1,})\(/;
    var results = funcNameRegex.exec(fn.toString());
    return results && results.length > 1 ? results[1].trim() : "";
  } else if (fn.prototype === undefined) {
    return fn.constructor.name;
  } else {
    return fn.prototype.constructor.name;
  }
}
function parseValue(str) {
  if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
  return str;
}
// Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580
function hyphenate(str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

exports.Foundation = Foundation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.core.js","/../../node_modules/foundation-sites/js")
},{"./foundation.util.core":29,"./foundation.util.mediaQuery":32,"b55mWE":41,"buffer":40,"jquery":43}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Drilldown = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.nest');

var _foundationUtil3 = require('./foundation.util.core');

var _foundationUtil4 = require('./foundation.util.box');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Drilldown module.
 * @module foundation.drilldown
 * @requires foundation.util.keyboard
 * @requires foundation.util.nest
 * @requires foundation.util.box
 */

var Drilldown = function (_Plugin) {
  _inherits(Drilldown, _Plugin);

  function Drilldown() {
    _classCallCheck(this, Drilldown);

    return _possibleConstructorReturn(this, (Drilldown.__proto__ || Object.getPrototypeOf(Drilldown)).apply(this, arguments));
  }

  _createClass(Drilldown, [{
    key: '_setup',

    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @name Drilldown
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Drilldown.defaults, this.$element.data(), options);
      this.className = 'Drilldown'; // ie9 back compat

      this._init();

      _foundationUtil.Keyboard.register('Drilldown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close',
        'TAB': 'down',
        'SHIFT_TAB': 'up'
      });
    }

    /**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil2.Nest.Feather(this.$element, 'drilldown');

      if (this.options.autoApplyClass) {
        this.$element.addClass('drilldown');
      }

      this.$element.attr({
        'role': 'tree',
        'aria-multiselectable': false
      });
      this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
      this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role', 'group');
      this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'treeitem').find('a');
      this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || (0, _foundationUtil3.GetYoDigits)(6, 'drilldown'));

      this._prepareMenu();
      this._registerEvents();

      this._keyboardEvents();
    }

    /**
     * prepares drilldown menu by setting attributes to links and elements
     * sets a min height to prevent content jumping
     * wraps the element if not already wrapped
     * @private
     * @function
     */

  }, {
    key: '_prepareMenu',
    value: function _prepareMenu() {
      var _this = this;
      // if(!this.options.holdOpen){
      //   this._menuLinkEvents();
      // }
      this.$submenuAnchors.each(function () {
        var $link = (0, _jquery2.default)(this);
        var $sub = $link.parent();
        if (_this.options.parentLink) {
          $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li data-is-parent-link class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menuitem"></li>');
        }
        $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
        $link.children('[data-submenu]').attr({
          'aria-hidden': true,
          'tabindex': 0,
          'role': 'group'
        });
        _this._events($link);
      });
      this.$submenus.each(function () {
        var $menu = (0, _jquery2.default)(this),
            $back = $menu.find('.js-drilldown-back');
        if (!$back.length) {
          switch (_this.options.backButtonPosition) {
            case "bottom":
              $menu.append(_this.options.backButton);
              break;
            case "top":
              $menu.prepend(_this.options.backButton);
              break;
            default:
              console.error("Unsupported backButtonPosition value '" + _this.options.backButtonPosition + "'");
          }
        }
        _this._back($menu);
      });

      this.$submenus.addClass('invisible');
      if (!this.options.autoHeight) {
        this.$submenus.addClass('drilldown-submenu-cover-previous');
      }

      // create a wrapper on element if it doesn't exist.
      if (!this.$element.parent().hasClass('is-drilldown')) {
        this.$wrapper = (0, _jquery2.default)(this.options.wrapper).addClass('is-drilldown');
        if (this.options.animateHeight) this.$wrapper.addClass('animate-height');
        this.$element.wrap(this.$wrapper);
      }
      // set wrapper
      this.$wrapper = this.$element.parent();
      this.$wrapper.css(this._getMaxDims());
    }
  }, {
    key: '_resize',
    value: function _resize() {
      this.$wrapper.css({ 'max-width': 'none', 'min-height': 'none' });
      // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths
      this.$wrapper.css(this._getMaxDims());
    }

    /**
     * Adds event handlers to elements in the menu.
     * @function
     * @private
     * @param {jQuery} $elem - the current menu item to add handlers to.
     */

  }, {
    key: '_events',
    value: function _events($elem) {
      var _this = this;

      $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        if ((0, _jquery2.default)(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
          e.stopImmediatePropagation();
          e.preventDefault();
        }

        // if(e.target !== e.currentTarget.firstElementChild){
        //   return false;
        // }
        _this._show($elem.parent('li'));

        if (_this.options.closeOnClick) {
          var $body = (0, _jquery2.default)('body');
          $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
            if (e.target === _this.$element[0] || _jquery2.default.contains(_this.$element[0], e.target)) {
              return;
            }
            e.preventDefault();
            _this._hideAll();
            $body.off('.zf.drilldown');
          });
        }
      });
    }

    /**
     * Adds event handlers to the menu element.
     * @function
     * @private
     */

  }, {
    key: '_registerEvents',
    value: function _registerEvents() {
      if (this.options.scrollTop) {
        this._bindHandler = this._scrollTop.bind(this);
        this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);
      }
      this.$element.on('mutateme.zf.trigger', this._resize.bind(this));
    }

    /**
     * Scroll to Top of Element or data-scroll-top-element
     * @function
     * @fires Drilldown#scrollme
     */

  }, {
    key: '_scrollTop',
    value: function _scrollTop() {
      var _this = this;
      var $scrollTopElement = _this.options.scrollTopElement != '' ? (0, _jquery2.default)(_this.options.scrollTopElement) : _this.$element,
          scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset, 10);
      (0, _jquery2.default)('html, body').stop(true).animate({ scrollTop: scrollPos }, _this.options.animationDuration, _this.options.animationEasing, function () {
        /**
          * Fires after the menu has scrolled
          * @event Drilldown#scrollme
          */
        if (this === (0, _jquery2.default)('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');
      });
    }

    /**
     * Adds keydown event listener to `li`'s in the menu.
     * @private
     */

  }, {
    key: '_keyboardEvents',
    value: function _keyboardEvents() {
      var _this = this;

      this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {
        var $element = (0, _jquery2.default)(this),
            $elements = $element.parent('li').parent('ul').children('li').children('a'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ((0, _jquery2.default)(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1));
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            return;
          }
        });

        _foundationUtil.Keyboard.handleKey(e, 'Drilldown', {
          next: function next() {
            if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one((0, _foundationUtil3.transitionend)($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          previous: function previous() {
            _this._hide($element.parent('li').parent('ul'));
            $element.parent('li').parent('ul').one((0, _foundationUtil3.transitionend)($element), function () {
              setTimeout(function () {
                $element.parent('li').parent('ul').parent('li').children('a').first().focus();
              }, 1);
            });
            return true;
          },
          up: function up() {
            $prevElement.focus();
            // Don't tap focus on first element in root ul
            return !$element.is(_this.$element.find('> li:first-child > a'));
          },
          down: function down() {
            $nextElement.focus();
            // Don't tap focus on last element in root ul
            return !$element.is(_this.$element.find('> li:last-child > a'));
          },
          close: function close() {
            // Don't close on element in root ul
            if (!$element.is(_this.$element.find('> li > a'))) {
              _this._hide($element.parent().parent());
              $element.parent().parent().siblings('a').focus();
            }
          },
          open: function open() {
            if (!$element.is(_this.$menuItems)) {
              // not menu item means back button
              _this._hide($element.parent('li').parent('ul'));
              $element.parent('li').parent('ul').one((0, _foundationUtil3.transitionend)($element), function () {
                setTimeout(function () {
                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                }, 1);
              });
              return true;
            } else if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one((0, _foundationUtil3.transitionend)($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          handled: function handled(preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); // end keyboardAccess
    }

    /**
     * Closes all open elements, and returns to root menu.
     * @function
     * @fires Drilldown#closed
     */

  }, {
    key: '_hideAll',
    value: function _hideAll() {
      var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
      if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });
      $elem.one((0, _foundationUtil3.transitionend)($elem), function (e) {
        $elem.removeClass('is-active is-closing');
      });
      /**
       * Fires when the menu is fully closed.
       * @event Drilldown#closed
       */
      this.$element.trigger('closed.zf.drilldown');
    }

    /**
     * Adds event listener for each `back` button, and closes open menus.
     * @function
     * @fires Drilldown#back
     * @param {jQuery} $elem - the current sub-menu to add `back` event.
     */

  }, {
    key: '_back',
    value: function _back($elem) {
      var _this = this;
      $elem.off('click.zf.drilldown');
      $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
        e.stopImmediatePropagation();
        // console.log('mouseup on back');
        _this._hide($elem);

        // If there is a parent submenu, call show
        var parentSubMenu = $elem.parent('li').parent('ul').parent('li');
        if (parentSubMenu.length) {
          _this._show(parentSubMenu);
        }
      });
    }

    /**
     * Adds event listener to menu items w/o submenus to close open menus on click.
     * @function
     * @private
     */

  }, {
    key: '_menuLinkEvents',
    value: function _menuLinkEvents() {
      var _this = this;
      this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        // e.stopImmediatePropagation();
        setTimeout(function () {
          _this._hideAll();
        }, 0);
      });
    }

    /**
     * Sets the CSS classes for submenu to show it.
     * @function
     * @private
     * @param {jQuery} $elem - the target submenu (`ul` tag)
     * @param {boolean} trigger - trigger drilldown event
     */

  }, {
    key: '_setShowSubMenuClasses',
    value: function _setShowSubMenuClasses($elem, trigger) {
      $elem.addClass('is-active').removeClass('invisible').attr('aria-hidden', false);
      $elem.parent('li').attr('aria-expanded', true);
      if (trigger === true) {
        this.$element.trigger('open.zf.drilldown', [$elem]);
      }
    }

    /**
     * Sets the CSS classes for submenu to hide it.
     * @function
     * @private
     * @param {jQuery} $elem - the target submenu (`ul` tag)
     * @param {boolean} trigger - trigger drilldown event
     */

  }, {
    key: '_setHideSubMenuClasses',
    value: function _setHideSubMenuClasses($elem, trigger) {
      $elem.removeClass('is-active').addClass('invisible').attr('aria-hidden', true);
      $elem.parent('li').attr('aria-expanded', false);
      if (trigger === true) {
        $elem.trigger('hide.zf.drilldown', [$elem]);
      }
    }

    /**
     * Opens a specific drilldown (sub)menu no matter which (sub)menu in it is currently visible.
     * Compared to _show() this lets you jump into any submenu without clicking through every submenu on the way to it.
     * @function
     * @fires Drilldown#open
     * @param {jQuery} $elem - the target (sub)menu (`ul` tag)
     * @param {boolean} autoFocus - if true the first link in the target (sub)menu gets auto focused
     */

  }, {
    key: '_showMenu',
    value: function _showMenu($elem, autoFocus) {

      var _this = this;

      // Reset drilldown
      var $expandedSubmenus = this.$element.find('li[aria-expanded="true"] > ul[data-submenu]');
      $expandedSubmenus.each(function (index) {
        _this._setHideSubMenuClasses((0, _jquery2.default)(this));
      });

      // If target menu is root, focus first link & exit
      if ($elem.is('[data-drilldown]')) {
        if (autoFocus === true) $elem.find('li[role="treeitem"] > a').first().focus();
        if (this.options.autoHeight) this.$wrapper.css('height', $elem.data('calcHeight'));
        return;
      }

      // Find all submenus on way to root incl. the element itself
      var $submenus = $elem.children().first().parentsUntil('[data-drilldown]', '[data-submenu]');

      // Open target menu and all submenus on its way to root
      $submenus.each(function (index) {

        // Update height of first child (target menu) if autoHeight option true
        if (index === 0 && _this.options.autoHeight) {
          _this.$wrapper.css('height', (0, _jquery2.default)(this).data('calcHeight'));
        }

        var isLastChild = index == $submenus.length - 1;

        // Add transitionsend listener to last child (root due to reverse order) to open target menu's first link
        // Last child makes sure the event gets always triggered even if going through several menus
        if (isLastChild === true) {
          (0, _jquery2.default)(this).one((0, _foundationUtil3.transitionend)((0, _jquery2.default)(this)), function () {
            if (autoFocus === true) {
              $elem.find('li[role="treeitem"] > a').first().focus();
            }
          });
        }

        _this._setShowSubMenuClasses((0, _jquery2.default)(this), isLastChild);
      });
    }

    /**
     * Opens a submenu.
     * @function
     * @fires Drilldown#open
     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
     */

  }, {
    key: '_show',
    value: function _show($elem) {
      if (this.options.autoHeight) this.$wrapper.css({ height: $elem.children('[data-submenu]').data('calcHeight') });
      $elem.attr('aria-expanded', true);
      $elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden', false);
      /**
       * Fires when the submenu has opened.
       * @event Drilldown#open
       */
      this.$element.trigger('open.zf.drilldown', [$elem]);
    }

    /**
     * Hides a submenu
     * @function
     * @fires Drilldown#hide
     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
     */

  }, {
    key: '_hide',
    value: function _hide($elem) {
      if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });
      var _this = this;
      $elem.parent('li').attr('aria-expanded', false);
      $elem.attr('aria-hidden', true);
      $elem.addClass('is-closing').one((0, _foundationUtil3.transitionend)($elem), function () {
        $elem.removeClass('is-active is-closing');
        $elem.blur().addClass('invisible');
      });
      /**
       * Fires when the submenu has closed.
       * @event Drilldown#hide
       */
      $elem.trigger('hide.zf.drilldown', [$elem]);
    }

    /**
     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
     * Prevents content jumping.
     * @function
     * @private
     */

  }, {
    key: '_getMaxDims',
    value: function _getMaxDims() {
      var maxHeight = 0,
          result = {},
          _this = this;
      this.$submenus.add(this.$element).each(function () {
        var numOfElems = (0, _jquery2.default)(this).children('li').length;
        var height = _foundationUtil4.Box.GetDimensions(this).height;
        maxHeight = height > maxHeight ? height : maxHeight;
        if (_this.options.autoHeight) {
          (0, _jquery2.default)(this).data('calcHeight', height);
          if (!(0, _jquery2.default)(this).hasClass('is-drilldown-submenu')) result['height'] = height;
        }
      });

      if (!this.options.autoHeight) result['min-height'] = maxHeight + 'px';

      result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';

      return result;
    }

    /**
     * Destroys the Drilldown Menu
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);
      this._hideAll();
      this.$element.off('mutateme.zf.trigger');
      _foundationUtil2.Nest.Burn(this.$element, 'drilldown');
      this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
      this.$submenuAnchors.each(function () {
        (0, _jquery2.default)(this).off('.zf.drilldown');
      });

      this.$element.find('[data-is-parent-link]').detach();
      this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');

      this.$element.find('a').each(function () {
        var $link = (0, _jquery2.default)(this);
        $link.removeAttr('tabindex');
        if ($link.data('savedHref')) {
          $link.attr('href', $link.data('savedHref')).removeData('savedHref');
        } else {
          return;
        }
      });
    }
  }]);

  return Drilldown;
}(_foundation.Plugin);

Drilldown.defaults = {
  /**
   * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are
   * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.
   * @option
   * @type {boolian}
   * @default true
   */
  autoApplyClass: true,
  /**
   * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @type {string}
   * @default '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>'
   */
  backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',
  /**
   * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.
   * @option
   * @type {string}
   * @default top
   */
  backButtonPosition: 'top',
  /**
   * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @type {string}
   * @default '<div></div>'
   */
  wrapper: '<div></div>',
  /**
   * Adds the parent link to the submenu.
   * @option
   * @type {boolean}
   * @default false
   */
  parentLink: false,
  /**
   * Allow the menu to return to root list on body click.
   * @option
   * @type {boolean}
   * @default false
   */
  closeOnClick: false,
  /**
   * Allow the menu to auto adjust height.
   * @option
   * @type {boolean}
   * @default false
   */
  autoHeight: false,
  /**
   * Animate the auto adjust height.
   * @option
   * @type {boolean}
   * @default false
   */
  animateHeight: false,
  /**
   * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button
   * @option
   * @type {boolean}
   * @default false
   */
  scrollTop: false,
  /**
   * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken
   * @option
   * @type {string}
   * @default ''
   */
  scrollTopElement: '',
  /**
   * ScrollTop offset
   * @option
   * @type {number}
   * @default 0
   */
  scrollTopOffset: 0,
  /**
   * Scroll animation duration
   * @option
   * @type {number}
   * @default 500
   */
  animationDuration: 500,
  /**
   * Scroll animation easing. Can be `'swing'` or `'linear'`.
   * @option
   * @type {string}
   * @see {@link https://api.jquery.com/animate|JQuery animate}
   * @default 'swing'
   */
  animationEasing: 'swing'
  // holdOpen: false
};

exports.Drilldown = Drilldown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.drilldown.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.box":28,"./foundation.util.core":29,"./foundation.util.keyboard":31,"./foundation.util.nest":34,"b55mWE":41,"buffer":40,"jquery":43}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dropdown = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.core');

var _foundation = require('./foundation.positionable');

var _foundationUtil3 = require('./foundation.util.triggers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Dropdown module.
 * @module foundation.dropdown
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.triggers
 */
var Dropdown = function (_Positionable) {
  _inherits(Dropdown, _Positionable);

  function Dropdown() {
    _classCallCheck(this, Dropdown);

    return _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));
  }

  _createClass(Dropdown, [{
    key: '_setup',

    /**
     * Creates a new instance of a dropdown.
     * @class
     * @name Dropdown
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Dropdown.defaults, this.$element.data(), options);
      this.className = 'Dropdown'; // ie9 back compat

      // Triggers init is idempotent, just need to make sure it is initialized
      _foundationUtil3.Triggers.init(_jquery2.default);

      this._init();

      _foundationUtil.Keyboard.register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      var $id = this.$element.attr('id');

      this.$anchors = (0, _jquery2.default)('[data-toggle="' + $id + '"]').length ? (0, _jquery2.default)('[data-toggle="' + $id + '"]') : (0, _jquery2.default)('[data-open="' + $id + '"]');
      this.$anchors.attr({
        'aria-controls': $id,
        'data-is-focus': false,
        'data-yeti-box': $id,
        'aria-haspopup': true,
        'aria-expanded': false
      });

      this._setCurrentAnchor(this.$anchors.first());

      if (this.options.parentClass) {
        this.$parent = this.$element.parents('.' + this.options.parentClass);
      } else {
        this.$parent = null;
      }

      this.$element.attr({
        'aria-hidden': 'true',
        'data-yeti-box': $id,
        'data-resize': $id,
        'aria-labelledby': this.$currentAnchor.id || (0, _foundationUtil2.GetYoDigits)(6, 'dd-anchor')
      });
      _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_init', this).call(this);
      this._events();
    }
  }, {
    key: '_getDefaultPosition',
    value: function _getDefaultPosition() {
      // handle legacy classnames
      var position = this.$element[0].className.match(/(top|left|right|bottom)/g);
      if (position) {
        return position[0];
      } else {
        return 'bottom';
      }
    }
  }, {
    key: '_getDefaultAlignment',
    value: function _getDefaultAlignment() {
      // handle legacy float approach
      var horizontalPosition = /float-(\S+)/.exec(this.$currentAnchor.className);
      if (horizontalPosition) {
        return horizontalPosition[1];
      }

      return _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_getDefaultAlignment', this).call(this);
    }

    /**
     * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.
     * Recursively calls itself if a collision is detected, with a new position class.
     * @function
     * @private
     */

  }, {
    key: '_setPosition',
    value: function _setPosition() {
      this.$element.removeClass('has-position-' + this.position + ' has-alignment-' + this.alignment);
      _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_setPosition', this).call(this, this.$currentAnchor, this.$element, this.$parent);
      this.$element.addClass('has-position-' + this.position + ' has-alignment-' + this.alignment);
    }

    /**
     * Make it a current anchor.
     * Current anchor as the reference for the position of Dropdown panes.
     * @param {HTML} el - DOM element of the anchor.
     * @function
     * @private
     */

  }, {
    key: '_setCurrentAnchor',
    value: function _setCurrentAnchor(el) {
      this.$currentAnchor = (0, _jquery2.default)(el);
    }

    /**
     * Adds event listeners to the element utilizing the triggers utility library.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;
      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': this._setPosition.bind(this)
      });

      this.$anchors.off('click.zf.trigger').on('click.zf.trigger', function () {
        _this._setCurrentAnchor(this);
      });

      if (this.options.hover) {
        this.$anchors.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
          _this._setCurrentAnchor(this);

          var bodyData = (0, _jquery2.default)('body').data();
          if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.open();
              _this.$anchors.data('hover', true);
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdown', function () {
          clearTimeout(_this.timeout);
          _this.timeout = setTimeout(function () {
            _this.close();
            _this.$anchors.data('hover', false);
          }, _this.options.hoverDelay);
        });
        if (this.options.hoverPane) {
          this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            clearTimeout(_this.timeout);
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();
              _this.$anchors.data('hover', false);
            }, _this.options.hoverDelay);
          });
        }
      }
      this.$anchors.add(this.$element).on('keydown.zf.dropdown', function (e) {

        var $target = (0, _jquery2.default)(this),
            visibleFocusableElements = _foundationUtil.Keyboard.findFocusable(_this.$element);

        _foundationUtil.Keyboard.handleKey(e, 'Dropdown', {
          open: function open() {
            if ($target.is(_this.$anchors)) {
              _this.open();
              _this.$element.attr('tabindex', -1).focus();
              e.preventDefault();
            }
          },
          close: function close() {
            _this.close();
            _this.$anchors.focus();
          }
        });
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */

  }, {
    key: '_addBodyHandler',
    value: function _addBodyHandler() {
      var $body = (0, _jquery2.default)(document.body).not(this.$element),
          _this = this;
      $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
        if (_this.$anchors.is(e.target) || _this.$anchors.find(e.target).length) {
          return;
        }
        if (_this.$element.is(e.target) || _this.$element.find(e.target).length) {
          return;
        }
        _this.close();
        $body.off('click.zf.dropdown');
      });
    }

    /**
     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
     * @function
     * @fires Dropdown#closeme
     * @fires Dropdown#show
     */

  }, {
    key: 'open',
    value: function open() {
      // var _this = this;
      /**
       * Fires to close other open dropdowns, typically when dropdown is opening
       * @event Dropdown#closeme
       */
      this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
      this.$anchors.addClass('hover').attr({ 'aria-expanded': true });
      // this.$element/*.show()*/;

      this.$element.addClass('is-opening');
      this._setPosition();
      this.$element.removeClass('is-opening').addClass('is-open').attr({ 'aria-hidden': false });

      if (this.options.autoFocus) {
        var $focusable = _foundationUtil.Keyboard.findFocusable(this.$element);
        if ($focusable.length) {
          $focusable.eq(0).focus();
        }
      }

      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }

      if (this.options.trapFocus) {
        _foundationUtil.Keyboard.trapFocus(this.$element);
      }

      /**
       * Fires once the dropdown is visible.
       * @event Dropdown#show
       */
      this.$element.trigger('show.zf.dropdown', [this.$element]);
    }

    /**
     * Closes the open dropdown pane.
     * @function
     * @fires Dropdown#hide
     */

  }, {
    key: 'close',
    value: function close() {
      if (!this.$element.hasClass('is-open')) {
        return false;
      }
      this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

      this.$anchors.removeClass('hover').attr('aria-expanded', false);

      /**
       * Fires once the dropdown is no longer visible.
       * @event Dropdown#hide
       */
      this.$element.trigger('hide.zf.dropdown', [this.$element]);

      if (this.options.trapFocus) {
        _foundationUtil.Keyboard.releaseFocus(this.$element);
      }
    }

    /**
     * Toggles the dropdown pane's visibility.
     * @function
     */

  }, {
    key: 'toggle',
    value: function toggle() {
      if (this.$element.hasClass('is-open')) {
        if (this.$anchors.data('hover')) return;
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys the dropdown.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.off('.zf.trigger').hide();
      this.$anchors.off('.zf.dropdown');
      (0, _jquery2.default)(document.body).off('click.zf.dropdown');
    }
  }]);

  return Dropdown;
}(_foundation.Positionable);

Dropdown.defaults = {
  /**
   * Class that designates bounding container of Dropdown (default: window)
   * @option
   * @type {?string}
   * @default null
   */
  parentClass: null,
  /**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @type {number}
   * @default 250
   */
  hoverDelay: 250,
  /**
   * Allow submenus to open on hover events
   * @option
   * @type {boolean}
   * @default false
   */
  hover: false,
  /**
   * Don't close dropdown when hovering over dropdown pane
   * @option
   * @type {boolean}
   * @default false
   */
  hoverPane: false,
  /**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @type {number}
   * @default 0
   */
  vOffset: 0,
  /**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @type {number}
   * @default 0
   */
  hOffset: 0,
  /**
   * DEPRECATED: Class applied to adjust open position.
   * @option
   * @type {string}
   * @default ''
   */
  positionClass: '',

  /**
   * Position of dropdown. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  position: 'auto',
  /**
   * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',
  /**
   * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.
   * @option
   * @type {boolean}
   * @default false
   */
  allowOverlap: false,
  /**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * @option
   * @type {boolean}
   * @default true
   */
  allowBottomOverlap: true,
  /**
   * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
   * @option
   * @type {boolean}
   * @default false
   */
  trapFocus: false,
  /**
   * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
   * @option
   * @type {boolean}
   * @default false
   */
  autoFocus: false,
  /**
   * Allows a click on the body to close the dropdown.
   * @option
   * @type {boolean}
   * @default false
   */
  closeOnClick: false
};

exports.Dropdown = Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.dropdown.js","/../../node_modules/foundation-sites/js")
},{"./foundation.positionable":17,"./foundation.util.core":29,"./foundation.util.keyboard":31,"./foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownMenu = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.nest');

var _foundationUtil3 = require('./foundation.util.box');

var _foundationUtil4 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * DropdownMenu module.
 * @module foundation.dropdown-menu
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.nest
 */

var DropdownMenu = function (_Plugin) {
  _inherits(DropdownMenu, _Plugin);

  function DropdownMenu() {
    _classCallCheck(this, DropdownMenu);

    return _possibleConstructorReturn(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).apply(this, arguments));
  }

  _createClass(DropdownMenu, [{
    key: '_setup',

    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @name DropdownMenu
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, DropdownMenu.defaults, this.$element.data(), options);
      this.className = 'DropdownMenu'; // ie9 back compat

      this._init();

      _foundationUtil.Keyboard.register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil2.Nest.Feather(this.$element, 'dropdown');

      var subs = this.$element.find('li.is-dropdown-submenu-parent');
      this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

      this.$menuItems = this.$element.find('[role="menuitem"]');
      this.$tabs = this.$element.children('[role="menuitem"]');
      this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

      if (this.options.alignment === 'auto') {
        if (this.$element.hasClass(this.options.rightClass) || (0, _foundationUtil4.rtl)() || this.$element.parents('.top-bar-right').is('*')) {
          this.options.alignment = 'right';
          subs.addClass('opens-left');
        } else {
          this.options.alignment = 'left';
          subs.addClass('opens-right');
        }
      } else {
        if (this.options.alignment === 'right') {
          subs.addClass('opens-left');
        } else {
          subs.addClass('opens-right');
        }
      }
      this.changed = false;
      this._events();
    }
  }, {
    key: '_isVertical',
    value: function _isVertical() {
      return this.$tabs.css('display') === 'block' || this.$element.css('flex-direction') === 'column';
    }
  }, {
    key: '_isRtl',
    value: function _isRtl() {
      return this.$element.hasClass('align-right') || (0, _foundationUtil4.rtl)() && !this.$element.hasClass('align-left');
    }

    /**
     * Adds event listeners to elements within the menu
     * @private
     * @function
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this,
          hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
          parClass = 'is-dropdown-submenu-parent';

      // used for onClick and in the keyboard handlers
      var handleClickFn = function handleClickFn(e) {
        var $elem = (0, _jquery2.default)(e.target).parentsUntil('ul', '.' + parClass),
            hasSub = $elem.hasClass(parClass),
            hasClicked = $elem.attr('data-is-click') === 'true',
            $sub = $elem.children('.is-dropdown-submenu');

        if (hasSub) {
          if (hasClicked) {
            if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
              return;
            } else {
              e.stopImmediatePropagation();
              e.preventDefault();
              _this._hide($elem);
            }
          } else {
            e.preventDefault();
            e.stopImmediatePropagation();
            _this._show($sub);
            $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);
          }
        }
      };

      if (this.options.clickOpen || hasTouch) {
        this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
      }

      // Handle Leaf element Clicks
      if (_this.options.closeOnClickInside) {
        this.$menuItems.on('click.zf.dropdownmenu', function (e) {
          var $elem = (0, _jquery2.default)(this),
              hasSub = $elem.hasClass(parClass);
          if (!hasSub) {
            _this._hide();
          }
        });
      }

      if (!this.options.disableHover) {
        this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
          var $elem = (0, _jquery2.default)(this),
              hasSub = $elem.hasClass(parClass);

          if (hasSub) {
            clearTimeout($elem.data('_delay'));
            $elem.data('_delay', setTimeout(function () {
              _this._show($elem.children('.is-dropdown-submenu'));
            }, _this.options.hoverDelay));
          }
        }).on('mouseleave.zf.dropdownmenu', function (e) {
          var $elem = (0, _jquery2.default)(this),
              hasSub = $elem.hasClass(parClass);
          if (hasSub && _this.options.autoclose) {
            if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
              return false;
            }

            clearTimeout($elem.data('_delay'));
            $elem.data('_delay', setTimeout(function () {
              _this._hide($elem);
            }, _this.options.closingTime));
          }
        });
      }
      this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
        var $element = (0, _jquery2.default)(e.target).parentsUntil('ul', '[role="menuitem"]'),
            isTab = _this.$tabs.index($element) > -1,
            $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ((0, _jquery2.default)(this).is($element)) {
            $prevElement = $elements.eq(i - 1);
            $nextElement = $elements.eq(i + 1);
            return;
          }
        });

        var nextSibling = function nextSibling() {
          $nextElement.children('a:first').focus();
          e.preventDefault();
        },
            prevSibling = function prevSibling() {
          $prevElement.children('a:first').focus();
          e.preventDefault();
        },
            openSub = function openSub() {
          var $sub = $element.children('ul.is-dropdown-submenu');
          if ($sub.length) {
            _this._show($sub);
            $element.find('li > a:first').focus();
            e.preventDefault();
          } else {
            return;
          }
        },
            closeSub = function closeSub() {
          //if ($element.is(':first-child')) {
          var close = $element.parent('ul').parent('li');
          close.children('a:first').focus();
          _this._hide(close);
          e.preventDefault();
          //}
        };
        var functions = {
          open: openSub,
          close: function close() {
            _this._hide(_this.$element);
            _this.$menuItems.eq(0).children('a').focus(); // focus to first element
            e.preventDefault();
          },
          handled: function handled() {
            e.stopImmediatePropagation();
          }
        };

        if (isTab) {
          if (_this._isVertical()) {
            // vertical menu
            if (_this._isRtl()) {
              // right aligned
              _jquery2.default.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: closeSub,
                previous: openSub
              });
            } else {
              // left aligned
              _jquery2.default.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: openSub,
                previous: closeSub
              });
            }
          } else {
            // horizontal menu
            if (_this._isRtl()) {
              // right aligned
              _jquery2.default.extend(functions, {
                next: prevSibling,
                previous: nextSibling,
                down: openSub,
                up: closeSub
              });
            } else {
              // left aligned
              _jquery2.default.extend(functions, {
                next: nextSibling,
                previous: prevSibling,
                down: openSub,
                up: closeSub
              });
            }
          }
        } else {
          // not tabs -> one sub
          if (_this._isRtl()) {
            // right aligned
            _jquery2.default.extend(functions, {
              next: closeSub,
              previous: openSub,
              down: nextSibling,
              up: prevSibling
            });
          } else {
            // left aligned
            _jquery2.default.extend(functions, {
              next: openSub,
              previous: closeSub,
              down: nextSibling,
              up: prevSibling
            });
          }
        }
        _foundationUtil.Keyboard.handleKey(e, 'DropdownMenu', functions);
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */

  }, {
    key: '_addBodyHandler',
    value: function _addBodyHandler() {
      var $body = (0, _jquery2.default)(document.body),
          _this = this;
      $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
        var $link = _this.$element.find(e.target);
        if ($link.length) {
          return;
        }

        _this._hide();
        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
      });
    }

    /**
     * Opens a dropdown pane, and checks for collisions first.
     * @param {jQuery} $sub - ul element that is a submenu to show
     * @function
     * @private
     * @fires DropdownMenu#show
     */

  }, {
    key: '_show',
    value: function _show($sub) {
      var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
        return (0, _jquery2.default)(el).find($sub).length > 0;
      }));
      var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
      this._hide($sibs, idx);
      $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');
      var clear = _foundationUtil3.Box.ImNotTouchingYou($sub, null, true);
      if (!clear) {
        var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
            $parentLi = $sub.parent('.is-dropdown-submenu-parent');
        $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);
        clear = _foundationUtil3.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
          $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');
        }
        this.changed = true;
      }
      $sub.css('visibility', '');
      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }
      /**
       * Fires when the new dropdown pane is visible.
       * @event DropdownMenu#show
       */
      this.$element.trigger('show.zf.dropdownmenu', [$sub]);
    }

    /**
     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
     * @function
     * @param {jQuery} $elem - element with a submenu to hide
     * @param {Number} idx - index of the $tabs collection to hide
     * @private
     */

  }, {
    key: '_hide',
    value: function _hide($elem, idx) {
      var $toClose;
      if ($elem && $elem.length) {
        $toClose = $elem;
      } else if (idx !== undefined) {
        $toClose = this.$tabs.not(function (i, el) {
          return i === idx;
        });
      } else {
        $toClose = this.$element;
      }
      var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

      if (somethingToClose) {
        $toClose.find('li.is-active').add($toClose).attr({
          'data-is-click': false
        }).removeClass('is-active');

        $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');

        if (this.changed || $toClose.find('opens-inner').length) {
          var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
          $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);
          this.changed = false;
        }
        /**
         * Fires when the open menus are closed.
         * @event DropdownMenu#hide
         */
        this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
      }
    }

    /**
     * Destroys the plugin.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
      (0, _jquery2.default)(document.body).off('.zf.dropdownmenu');
      _foundationUtil2.Nest.Burn(this.$element, 'dropdown');
    }
  }]);

  return DropdownMenu;
}(_foundation.Plugin);

/**
 * Default settings for plugin
 */


DropdownMenu.defaults = {
  /**
   * Disallows hover events from opening submenus
   * @option
   * @type {boolean}
   * @default false
   */
  disableHover: false,
  /**
   * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
   * @option
   * @type {boolean}
   * @default true
   */
  autoclose: true,
  /**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @type {number}
   * @default 50
   */
  hoverDelay: 50,
  /**
   * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
   * @option
   * @type {boolean}
   * @default false
   */
  clickOpen: false,
  /**
   * Amount of time to delay closing a submenu on a mouseleave event.
   * @option
   * @type {number}
   * @default 500
   */

  closingTime: 500,
  /**
   * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',
  /**
   * Allow clicks on the body to close any open submenus.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClick: true,
  /**
   * Allow clicks on leaf anchor links to close any open submenus.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClickInside: true,
  /**
   * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
   * @option
   * @type {string}
   * @default 'vertical'
   */
  verticalClass: 'vertical',
  /**
   * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
   * @option
   * @type {string}
   * @default 'align-right'
   */
  rightClass: 'align-right',
  /**
   * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
   * @option
   * @type {boolean}
   * @default true
   */
  forceFollow: true
};

exports.DropdownMenu = DropdownMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.dropdownMenu.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.box":28,"./foundation.util.core":29,"./foundation.util.keyboard":31,"./foundation.util.nest":34,"b55mWE":41,"buffer":40,"jquery":43}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Equalizer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.mediaQuery');

var _foundationUtil2 = require('./foundation.util.imageLoader');

var _foundationUtil3 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Equalizer module.
 * @module foundation.equalizer
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.imageLoader if equalizer contains images
 */

var Equalizer = function (_Plugin) {
  _inherits(Equalizer, _Plugin);

  function Equalizer() {
    _classCallCheck(this, Equalizer);

    return _possibleConstructorReturn(this, (Equalizer.__proto__ || Object.getPrototypeOf(Equalizer)).apply(this, arguments));
  }

  _createClass(Equalizer, [{
    key: '_setup',

    /**
     * Creates a new instance of Equalizer.
     * @class
     * @name Equalizer
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Equalizer.defaults, this.$element.data(), options);
      this.className = 'Equalizer'; // ie9 back compat

      this._init();
    }

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      var eqId = this.$element.attr('data-equalizer') || '';
      var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');

      _foundationUtil.MediaQuery._init();

      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
      this.$element.attr('data-resize', eqId || (0, _foundationUtil3.GetYoDigits)(6, 'eq'));
      this.$element.attr('data-mutate', eqId || (0, _foundationUtil3.GetYoDigits)(6, 'eq'));

      this.hasNested = this.$element.find('[data-equalizer]').length > 0;
      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
      this.isOn = false;
      this._bindHandler = {
        onResizeMeBound: this._onResizeMe.bind(this),
        onPostEqualizedBound: this._onPostEqualized.bind(this)
      };

      var imgs = this.$element.find('img');
      var tooSmall;
      if (this.options.equalizeOn) {
        tooSmall = this._checkMQ();
        (0, _jquery2.default)(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
      } else {
        this._events();
      }
      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
        if (imgs.length) {
          (0, _foundationUtil2.onImagesLoaded)(imgs, this._reflow.bind(this));
        } else {
          this._reflow();
        }
      }
    }

    /**
     * Removes event listeners if the breakpoint is too small.
     * @private
     */

  }, {
    key: '_pauseEvents',
    value: function _pauseEvents() {
      this.isOn = false;
      this.$element.off({
        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,
        'mutateme.zf.trigger': this._bindHandler.onResizeMeBound
      });
    }

    /**
     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
     * @private
     */

  }, {
    key: '_onResizeMe',
    value: function _onResizeMe(e) {
      this._reflow();
    }

    /**
     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
     * @private
     */

  }, {
    key: '_onPostEqualized',
    value: function _onPostEqualized(e) {
      if (e.target !== this.$element[0]) {
        this._reflow();
      }
    }

    /**
     * Initializes events for Equalizer.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;
      this._pauseEvents();
      if (this.hasNested) {
        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
      } else {
        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
        this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);
      }
      this.isOn = true;
    }

    /**
     * Checks the current breakpoint to the minimum required size.
     * @private
     */

  }, {
    key: '_checkMQ',
    value: function _checkMQ() {
      var tooSmall = !_foundationUtil.MediaQuery.is(this.options.equalizeOn);
      if (tooSmall) {
        if (this.isOn) {
          this._pauseEvents();
          this.$watched.css('height', 'auto');
        }
      } else {
        if (!this.isOn) {
          this._events();
        }
      }
      return tooSmall;
    }

    /**
     * A noop version for the plugin
     * @private
     */

  }, {
    key: '_killswitch',
    value: function _killswitch() {
      return;
    }

    /**
     * Calls necessary functions to update Equalizer upon DOM change
     * @private
     */

  }, {
    key: '_reflow',
    value: function _reflow() {
      if (!this.options.equalizeOnStack) {
        if (this._isStacked()) {
          this.$watched.css('height', 'auto');
          return false;
        }
      }
      if (this.options.equalizeByRow) {
        this.getHeightsByRow(this.applyHeightByRow.bind(this));
      } else {
        this.getHeights(this.applyHeight.bind(this));
      }
    }

    /**
     * Manually determines if the first 2 elements are *NOT* stacked.
     * @private
     */

  }, {
    key: '_isStacked',
    value: function _isStacked() {
      if (!this.$watched[0] || !this.$watched[1]) {
        return true;
      }
      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} heights - An array of heights of children within Equalizer container
     */

  }, {
    key: 'getHeights',
    value: function getHeights(cb) {
      var heights = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        heights.push(this.$watched[i].offsetHeight);
      }
      cb(heights);
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     */

  }, {
    key: 'getHeightsByRow',
    value: function getHeightsByRow(cb) {
      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
          groups = [],
          group = 0;
      //group by Row
      groups[group] = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        //maybe could use this.$watched[i].offsetTop
        var elOffsetTop = (0, _jquery2.default)(this.$watched[i]).offset().top;
        if (elOffsetTop != lastElTopOffset) {
          group++;
          groups[group] = [];
          lastElTopOffset = elOffsetTop;
        }
        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
      }

      for (var j = 0, ln = groups.length; j < ln; j++) {
        var heights = (0, _jquery2.default)(groups[j]).map(function () {
          return this[1];
        }).get();
        var max = Math.max.apply(null, heights);
        groups[j].push(max);
      }
      cb(groups);
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
     * @param {array} heights - An array of heights of children within Equalizer container
     * @fires Equalizer#preequalized
     * @fires Equalizer#postequalized
     */

  }, {
    key: 'applyHeight',
    value: function applyHeight(heights) {
      var max = Math.max.apply(null, heights);
      /**
       * Fires before the heights are applied
       * @event Equalizer#preequalized
       */
      this.$element.trigger('preequalized.zf.equalizer');

      this.$watched.css('height', max);

      /**
       * Fires when the heights have been applied
       * @event Equalizer#postequalized
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     * @fires Equalizer#preequalized
     * @fires Equalizer#preequalizedrow
     * @fires Equalizer#postequalizedrow
     * @fires Equalizer#postequalized
     */

  }, {
    key: 'applyHeightByRow',
    value: function applyHeightByRow(groups) {
      /**
       * Fires before the heights are applied
       */
      this.$element.trigger('preequalized.zf.equalizer');
      for (var i = 0, len = groups.length; i < len; i++) {
        var groupsILength = groups[i].length,
            max = groups[i][groupsILength - 1];
        if (groupsILength <= 2) {
          (0, _jquery2.default)(groups[i][0][0]).css({ 'height': 'auto' });
          continue;
        }
        /**
          * Fires before the heights per row are applied
          * @event Equalizer#preequalizedrow
          */
        this.$element.trigger('preequalizedrow.zf.equalizer');
        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
          (0, _jquery2.default)(groups[i][j][0]).css({ 'height': max });
        }
        /**
          * Fires when the heights per row have been applied
          * @event Equalizer#postequalizedrow
          */
        this.$element.trigger('postequalizedrow.zf.equalizer');
      }
      /**
       * Fires when the heights have been applied
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Destroys an instance of Equalizer.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this._pauseEvents();
      this.$watched.css('height', 'auto');
    }
  }]);

  return Equalizer;
}(_foundation.Plugin);

/**
 * Default settings for plugin
 */


Equalizer.defaults = {
  /**
   * Enable height equalization when stacked on smaller screens.
   * @option
   * @type {boolean}
   * @default false
   */
  equalizeOnStack: false,
  /**
   * Enable height equalization row by row.
   * @option
   * @type {boolean}
   * @default false
   */
  equalizeByRow: false,
  /**
   * String representing the minimum breakpoint size the plugin should equalize heights on.
   * @option
   * @type {string}
   * @default ''
   */
  equalizeOn: ''
};

exports.Equalizer = Equalizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.equalizer.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.imageLoader":30,"./foundation.util.mediaQuery":32,"b55mWE":41,"buffer":40,"jquery":43}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Interchange = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.mediaQuery');

var _foundation = require('./foundation.plugin');

var _foundationUtil2 = require('./foundation.util.core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Interchange module.
 * @module foundation.interchange
 * @requires foundation.util.mediaQuery
 */

var Interchange = function (_Plugin) {
  _inherits(Interchange, _Plugin);

  function Interchange() {
    _classCallCheck(this, Interchange);

    return _possibleConstructorReturn(this, (Interchange.__proto__ || Object.getPrototypeOf(Interchange)).apply(this, arguments));
  }

  _createClass(Interchange, [{
    key: '_setup',

    /**
     * Creates a new instance of Interchange.
     * @class
     * @name Interchange
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';
      this.className = 'Interchange'; // ie9 back compat

      this._init();
      this._events();
    }

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil.MediaQuery._init();

      var id = this.$element[0].id || (0, _foundationUtil2.GetYoDigits)(6, 'interchange');
      this.$element.attr({
        'data-resize': id,
        'id': id
      });

      this._addBreakpoints();
      this._generateRules();
      this._reflow();
    }

    /**
     * Initializes events for Interchange.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this3 = this;

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function () {
        return _this3._reflow();
      });
    }

    /**
     * Calls necessary functions to update Interchange upon DOM change
     * @function
     * @private
     */

  }, {
    key: '_reflow',
    value: function _reflow() {
      var match;

      // Iterate through each rule, but only save the last match
      for (var i in this.rules) {
        if (this.rules.hasOwnProperty(i)) {
          var rule = this.rules[i];
          if (window.matchMedia(rule.query).matches) {
            match = rule;
          }
        }
      }

      if (match) {
        this.replace(match.path);
      }
    }

    /**
     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
     * @function
     * @private
     */

  }, {
    key: '_addBreakpoints',
    value: function _addBreakpoints() {
      for (var i in _foundationUtil.MediaQuery.queries) {
        if (_foundationUtil.MediaQuery.queries.hasOwnProperty(i)) {
          var query = _foundationUtil.MediaQuery.queries[i];
          Interchange.SPECIAL_QUERIES[query.name] = query.value;
        }
      }
    }

    /**
     * Checks the Interchange element for the provided media query + content pairings
     * @function
     * @private
     * @param {Object} element - jQuery object that is an Interchange instance
     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
     */

  }, {
    key: '_generateRules',
    value: function _generateRules(element) {
      var rulesList = [];
      var rules;

      if (this.options.rules) {
        rules = this.options.rules;
      } else {
        rules = this.$element.data('interchange');
      }

      rules = typeof rules === 'string' ? rules.match(/\[.*?\]/g) : rules;

      for (var i in rules) {
        if (rules.hasOwnProperty(i)) {
          var rule = rules[i].slice(1, -1).split(', ');
          var path = rule.slice(0, -1).join('');
          var query = rule[rule.length - 1];

          if (Interchange.SPECIAL_QUERIES[query]) {
            query = Interchange.SPECIAL_QUERIES[query];
          }

          rulesList.push({
            path: path,
            query: query
          });
        }
      }

      this.rules = rulesList;
    }

    /**
     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
     * @function
     * @param {String} path - Path to the image or HTML partial.
     * @fires Interchange#replaced
     */

  }, {
    key: 'replace',
    value: function replace(path) {
      if (this.currentPath === path) return;

      var _this = this,
          trigger = 'replaced.zf.interchange';

      // Replacing images
      if (this.$element[0].nodeName === 'IMG') {
        this.$element.attr('src', path).on('load', function () {
          _this.currentPath = path;
        }).trigger(trigger);
      }
      // Replacing background images
      else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
          path = path.replace(/\(/g, '%28').replace(/\)/g, '%29');
          this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
        }
        // Replacing HTML
        else {
            _jquery2.default.get(path, function (response) {
              _this.$element.html(response).trigger(trigger);
              (0, _jquery2.default)(response).foundation();
              _this.currentPath = path;
            });
          }

      /**
       * Fires when content in an Interchange element is done being loaded.
       * @event Interchange#replaced
       */
      // this.$element.trigger('replaced.zf.interchange');
    }

    /**
     * Destroys an instance of interchange.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.off('resizeme.zf.trigger');
    }
  }]);

  return Interchange;
}(_foundation.Plugin);

/**
 * Default settings for plugin
 */


Interchange.defaults = {
  /**
   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
   * @option
   * @type {?array}
   * @default null
   */
  rules: null
};

Interchange.SPECIAL_QUERIES = {
  'landscape': 'screen and (orientation: landscape)',
  'portrait': 'screen and (orientation: portrait)',
  'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
};

exports.Interchange = Interchange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24uaW50ZXJjaGFuZ2UuanMiXSwibmFtZXMiOlsiSW50ZXJjaGFuZ2UiLCJlbGVtZW50Iiwib3B0aW9ucyIsIiRlbGVtZW50IiwiJCIsImV4dGVuZCIsImRlZmF1bHRzIiwicnVsZXMiLCJjdXJyZW50UGF0aCIsImNsYXNzTmFtZSIsIl9pbml0IiwiX2V2ZW50cyIsIk1lZGlhUXVlcnkiLCJpZCIsImF0dHIiLCJfYWRkQnJlYWtwb2ludHMiLCJfZ2VuZXJhdGVSdWxlcyIsIl9yZWZsb3ciLCJvZmYiLCJvbiIsIm1hdGNoIiwiaSIsImhhc093blByb3BlcnR5IiwicnVsZSIsIndpbmRvdyIsIm1hdGNoTWVkaWEiLCJxdWVyeSIsIm1hdGNoZXMiLCJyZXBsYWNlIiwicGF0aCIsInF1ZXJpZXMiLCJTUEVDSUFMX1FVRVJJRVMiLCJuYW1lIiwidmFsdWUiLCJydWxlc0xpc3QiLCJkYXRhIiwic2xpY2UiLCJzcGxpdCIsImpvaW4iLCJsZW5ndGgiLCJwdXNoIiwiX3RoaXMiLCJ0cmlnZ2VyIiwibm9kZU5hbWUiLCJjc3MiLCJnZXQiLCJyZXNwb25zZSIsImh0bWwiLCJmb3VuZGF0aW9uIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUdBOzs7Ozs7SUFNTUEsVzs7Ozs7Ozs7Ozs7O0FBQ0o7Ozs7Ozs7OzJCQVFPQyxPLEVBQVNDLE8sRUFBUztBQUN2QixXQUFLQyxRQUFMLEdBQWdCRixPQUFoQjtBQUNBLFdBQUtDLE9BQUwsR0FBZUUsaUJBQUVDLE1BQUYsQ0FBUyxFQUFULEVBQWFMLFlBQVlNLFFBQXpCLEVBQW1DSixPQUFuQyxDQUFmO0FBQ0EsV0FBS0ssS0FBTCxHQUFhLEVBQWI7QUFDQSxXQUFLQyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixhQUFqQixDQUx1QixDQUtTOztBQUVoQyxXQUFLQyxLQUFMO0FBQ0EsV0FBS0MsT0FBTDtBQUNEOztBQUVEOzs7Ozs7Ozs0QkFLUTtBQUNOQyxpQ0FBV0YsS0FBWDs7QUFFQSxVQUFJRyxLQUFLLEtBQUtWLFFBQUwsQ0FBYyxDQUFkLEVBQWlCVSxFQUFqQixJQUF1QixrQ0FBWSxDQUFaLEVBQWUsYUFBZixDQUFoQztBQUNBLFdBQUtWLFFBQUwsQ0FBY1csSUFBZCxDQUFtQjtBQUNqQix1QkFBZUQsRUFERTtBQUVqQixjQUFNQTtBQUZXLE9BQW5COztBQUtBLFdBQUtFLGVBQUw7QUFDQSxXQUFLQyxjQUFMO0FBQ0EsV0FBS0MsT0FBTDtBQUNEOztBQUVEOzs7Ozs7Ozs4QkFLVTtBQUFBOztBQUNSLFdBQUtkLFFBQUwsQ0FBY2UsR0FBZCxDQUFrQixxQkFBbEIsRUFBeUNDLEVBQXpDLENBQTRDLHFCQUE1QyxFQUFtRTtBQUFBLGVBQU0sT0FBS0YsT0FBTCxFQUFOO0FBQUEsT0FBbkU7QUFDRDs7QUFFRDs7Ozs7Ozs7OEJBS1U7QUFDUixVQUFJRyxLQUFKOztBQUVBO0FBQ0EsV0FBSyxJQUFJQyxDQUFULElBQWMsS0FBS2QsS0FBbkIsRUFBMEI7QUFDeEIsWUFBRyxLQUFLQSxLQUFMLENBQVdlLGNBQVgsQ0FBMEJELENBQTFCLENBQUgsRUFBaUM7QUFDL0IsY0FBSUUsT0FBTyxLQUFLaEIsS0FBTCxDQUFXYyxDQUFYLENBQVg7QUFDQSxjQUFJRyxPQUFPQyxVQUFQLENBQWtCRixLQUFLRyxLQUF2QixFQUE4QkMsT0FBbEMsRUFBMkM7QUFDekNQLG9CQUFRRyxJQUFSO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFVBQUlILEtBQUosRUFBVztBQUNULGFBQUtRLE9BQUwsQ0FBYVIsTUFBTVMsSUFBbkI7QUFDRDtBQUNGOztBQUVEOzs7Ozs7OztzQ0FLa0I7QUFDaEIsV0FBSyxJQUFJUixDQUFULElBQWNULDJCQUFXa0IsT0FBekIsRUFBa0M7QUFDaEMsWUFBSWxCLDJCQUFXa0IsT0FBWCxDQUFtQlIsY0FBbkIsQ0FBa0NELENBQWxDLENBQUosRUFBMEM7QUFDeEMsY0FBSUssUUFBUWQsMkJBQVdrQixPQUFYLENBQW1CVCxDQUFuQixDQUFaO0FBQ0FyQixzQkFBWStCLGVBQVosQ0FBNEJMLE1BQU1NLElBQWxDLElBQTBDTixNQUFNTyxLQUFoRDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRDs7Ozs7Ozs7OzttQ0FPZWhDLE8sRUFBUztBQUN0QixVQUFJaUMsWUFBWSxFQUFoQjtBQUNBLFVBQUkzQixLQUFKOztBQUVBLFVBQUksS0FBS0wsT0FBTCxDQUFhSyxLQUFqQixFQUF3QjtBQUN0QkEsZ0JBQVEsS0FBS0wsT0FBTCxDQUFhSyxLQUFyQjtBQUNELE9BRkQsTUFHSztBQUNIQSxnQkFBUSxLQUFLSixRQUFMLENBQWNnQyxJQUFkLENBQW1CLGFBQW5CLENBQVI7QUFDRDs7QUFFRDVCLGNBQVMsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsTUFBTWEsS0FBTixDQUFZLFVBQVosQ0FBNUIsR0FBc0RiLEtBQS9EOztBQUVBLFdBQUssSUFBSWMsQ0FBVCxJQUFjZCxLQUFkLEVBQXFCO0FBQ25CLFlBQUdBLE1BQU1lLGNBQU4sQ0FBcUJELENBQXJCLENBQUgsRUFBNEI7QUFDMUIsY0FBSUUsT0FBT2hCLE1BQU1jLENBQU4sRUFBU2UsS0FBVCxDQUFlLENBQWYsRUFBa0IsQ0FBQyxDQUFuQixFQUFzQkMsS0FBdEIsQ0FBNEIsSUFBNUIsQ0FBWDtBQUNBLGNBQUlSLE9BQU9OLEtBQUthLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFmLEVBQWtCRSxJQUFsQixDQUF1QixFQUF2QixDQUFYO0FBQ0EsY0FBSVosUUFBUUgsS0FBS0EsS0FBS2dCLE1BQUwsR0FBYyxDQUFuQixDQUFaOztBQUVBLGNBQUl2QyxZQUFZK0IsZUFBWixDQUE0QkwsS0FBNUIsQ0FBSixFQUF3QztBQUN0Q0Esb0JBQVExQixZQUFZK0IsZUFBWixDQUE0QkwsS0FBNUIsQ0FBUjtBQUNEOztBQUVEUSxvQkFBVU0sSUFBVixDQUFlO0FBQ2JYLGtCQUFNQSxJQURPO0FBRWJILG1CQUFPQTtBQUZNLFdBQWY7QUFJRDtBQUNGOztBQUVELFdBQUtuQixLQUFMLEdBQWEyQixTQUFiO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs0QkFNUUwsSSxFQUFNO0FBQ1osVUFBSSxLQUFLckIsV0FBTCxLQUFxQnFCLElBQXpCLEVBQStCOztBQUUvQixVQUFJWSxRQUFRLElBQVo7QUFBQSxVQUNJQyxVQUFVLHlCQURkOztBQUdBO0FBQ0EsVUFBSSxLQUFLdkMsUUFBTCxDQUFjLENBQWQsRUFBaUJ3QyxRQUFqQixLQUE4QixLQUFsQyxFQUF5QztBQUN2QyxhQUFLeEMsUUFBTCxDQUFjVyxJQUFkLENBQW1CLEtBQW5CLEVBQTBCZSxJQUExQixFQUFnQ1YsRUFBaEMsQ0FBbUMsTUFBbkMsRUFBMkMsWUFBVztBQUNwRHNCLGdCQUFNakMsV0FBTixHQUFvQnFCLElBQXBCO0FBQ0QsU0FGRCxFQUdDYSxPQUhELENBR1NBLE9BSFQ7QUFJRDtBQUNEO0FBTkEsV0FPSyxJQUFJYixLQUFLVCxLQUFMLENBQVcseUNBQVgsQ0FBSixFQUEyRDtBQUM5RFMsaUJBQU9BLEtBQUtELE9BQUwsQ0FBYSxLQUFiLEVBQW9CLEtBQXBCLEVBQTJCQSxPQUEzQixDQUFtQyxLQUFuQyxFQUEwQyxLQUExQyxDQUFQO0FBQ0EsZUFBS3pCLFFBQUwsQ0FBY3lDLEdBQWQsQ0FBa0IsRUFBRSxvQkFBb0IsU0FBT2YsSUFBUCxHQUFZLEdBQWxDLEVBQWxCLEVBQ0thLE9BREwsQ0FDYUEsT0FEYjtBQUVEO0FBQ0Q7QUFMSyxhQU1BO0FBQ0h0Qyw2QkFBRXlDLEdBQUYsQ0FBTWhCLElBQU4sRUFBWSxVQUFTaUIsUUFBVCxFQUFtQjtBQUM3Qkwsb0JBQU10QyxRQUFOLENBQWU0QyxJQUFmLENBQW9CRCxRQUFwQixFQUNNSixPQUROLENBQ2NBLE9BRGQ7QUFFQSxvQ0FBRUksUUFBRixFQUFZRSxVQUFaO0FBQ0FQLG9CQUFNakMsV0FBTixHQUFvQnFCLElBQXBCO0FBQ0QsYUFMRDtBQU1EOztBQUVEOzs7O0FBSUE7QUFDRDs7QUFFRDs7Ozs7OzsrQkFJVztBQUNULFdBQUsxQixRQUFMLENBQWNlLEdBQWQsQ0FBa0IscUJBQWxCO0FBQ0Q7Ozs7RUE3S3VCK0Isa0I7O0FBZ0wxQjs7Ozs7QUFHQWpELFlBQVlNLFFBQVosR0FBdUI7QUFDckI7Ozs7OztBQU1BQyxTQUFPO0FBUGMsQ0FBdkI7O0FBVUFQLFlBQVkrQixlQUFaLEdBQThCO0FBQzVCLGVBQWEscUNBRGU7QUFFNUIsY0FBWSxvQ0FGZ0I7QUFHNUIsWUFBVTtBQUhrQixDQUE5Qjs7UUFNUS9CLFcsR0FBQUEsVyIsImZpbGUiOiJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgTWVkaWFRdWVyeSB9IGZyb20gJy4vZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnknO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnLi9mb3VuZGF0aW9uLnBsdWdpbic7XG5pbXBvcnQgeyBHZXRZb0RpZ2l0cyB9IGZyb20gJy4vZm91bmRhdGlvbi51dGlsLmNvcmUnO1xuXG5cbi8qKlxuICogSW50ZXJjaGFuZ2UgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmludGVyY2hhbmdlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG5jbGFzcyBJbnRlcmNoYW5nZSBleHRlbmRzIFBsdWdpbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEludGVyY2hhbmdlLlxuICAgKiBAY2xhc3NcbiAgICogQG5hbWUgSW50ZXJjaGFuZ2VcbiAgICogQGZpcmVzIEludGVyY2hhbmdlI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSW50ZXJjaGFuZ2UuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRQYXRoID0gJyc7XG4gICAgdGhpcy5jbGFzc05hbWUgPSAnSW50ZXJjaGFuZ2UnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgSW50ZXJjaGFuZ2UgcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGludGVyY2hhbmdlIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgTWVkaWFRdWVyeS5faW5pdCgpO1xuXG4gICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBHZXRZb0RpZ2l0cyg2LCAnaW50ZXJjaGFuZ2UnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAnaWQnOiBpZFxuICAgIH0pO1xuXG4gICAgdGhpcy5fYWRkQnJlYWtwb2ludHMoKTtcbiAgICB0aGlzLl9nZW5lcmF0ZVJ1bGVzKCk7XG4gICAgdGhpcy5fcmVmbG93KCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBJbnRlcmNoYW5nZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJykub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCAoKSA9PiB0aGlzLl9yZWZsb3coKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB2YXIgbWF0Y2g7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlLCBidXQgb25seSBzYXZlIHRoZSBsYXN0IG1hdGNoXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZih0aGlzLnJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcbiAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKHJ1bGUucXVlcnkpLm1hdGNoZXMpIHtcbiAgICAgICAgICBtYXRjaCA9IHJ1bGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHRoaXMucmVwbGFjZShtYXRjaC5wYXRoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgRm91bmRhdGlvbiBicmVha3BvaW50cyBhbmQgYWRkcyB0aGVtIHRvIHRoZSBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVMgb2JqZWN0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCcmVha3BvaW50cygpIHtcbiAgICBmb3IgKHZhciBpIGluIE1lZGlhUXVlcnkucXVlcmllcykge1xuICAgICAgaWYgKE1lZGlhUXVlcnkucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcXVlcnkgPSBNZWRpYVF1ZXJ5LnF1ZXJpZXNbaV07XG4gICAgICAgIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeS5uYW1lXSA9IHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIEludGVyY2hhbmdlIGVsZW1lbnQgZm9yIHRoZSBwcm92aWRlZCBtZWRpYSBxdWVyeSArIGNvbnRlbnQgcGFpcmluZ3NcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0aGF0IGlzIGFuIEludGVyY2hhbmdlIGluc3RhbmNlXG4gICAqIEByZXR1cm5zIHtBcnJheX0gc2NlbmFyaW9zIC0gQXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGhhdmUgJ21xJyBhbmQgJ3BhdGgnIGtleXMgd2l0aCBjb3JyZXNwb25kaW5nIGtleXNcbiAgICovXG4gIF9nZW5lcmF0ZVJ1bGVzKGVsZW1lbnQpIHtcbiAgICB2YXIgcnVsZXNMaXN0ID0gW107XG4gICAgdmFyIHJ1bGVzO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5ydWxlcykge1xuICAgICAgcnVsZXMgPSB0aGlzLm9wdGlvbnMucnVsZXM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ2ludGVyY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgcnVsZXMgPSAgdHlwZW9mIHJ1bGVzID09PSAnc3RyaW5nJyA/IHJ1bGVzLm1hdGNoKC9cXFsuKj9cXF0vZykgOiBydWxlcztcblxuICAgIGZvciAodmFyIGkgaW4gcnVsZXMpIHtcbiAgICAgIGlmKHJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc2xpY2UoMSwgLTEpLnNwbGl0KCcsICcpO1xuICAgICAgICB2YXIgcGF0aCA9IHJ1bGUuc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuICAgICAgICB2YXIgcXVlcnkgPSBydWxlW3J1bGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV0pIHtcbiAgICAgICAgICBxdWVyeSA9IEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV07XG4gICAgICAgIH1cblxuICAgICAgICBydWxlc0xpc3QucHVzaCh7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGBzcmNgIHByb3BlcnR5IG9mIGFuIGltYWdlLCBvciBjaGFuZ2UgdGhlIEhUTUwgb2YgYSBjb250YWluZXIsIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIC0gUGF0aCB0byB0aGUgaW1hZ2Ugb3IgSFRNTCBwYXJ0aWFsLlxuICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICovXG4gIHJlcGxhY2UocGF0aCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoID09PSBwYXRoKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICB0cmlnZ2VyID0gJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJztcblxuICAgIC8vIFJlcGxhY2luZyBpbWFnZXNcbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gJ0lNRycpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignc3JjJywgcGF0aCkub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSlcbiAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgYmFja2dyb3VuZCBpbWFnZXNcbiAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSkpIHtcbiAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKC9nLCAnJTI4JykucmVwbGFjZSgvXFwpL2csICclMjknKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHsgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcrcGF0aCsnKScgfSlcbiAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICB9XG4gICAgLy8gUmVwbGFjaW5nIEhUTUxcbiAgICBlbHNlIHtcbiAgICAgICQuZ2V0KHBhdGgsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50Lmh0bWwocmVzcG9uc2UpXG4gICAgICAgICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgICAgICQocmVzcG9uc2UpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBjb250ZW50IGluIGFuIEludGVyY2hhbmdlIGVsZW1lbnQgaXMgZG9uZSBiZWluZyBsb2FkZWQuXG4gICAgICogQGV2ZW50IEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAgICovXG4gICAgLy8gdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdyZXBsYWNlZC56Zi5pbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIF9kZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJylcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5JbnRlcmNoYW5nZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFJ1bGVzIHRvIGJlIGFwcGxpZWQgdG8gSW50ZXJjaGFuZ2UgZWxlbWVudHMuIFNldCB3aXRoIHRoZSBgZGF0YS1pbnRlcmNoYW5nZWAgYXJyYXkgbm90YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUgez9hcnJheX1cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgcnVsZXM6IG51bGxcbn07XG5cbkludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFUyA9IHtcbiAgJ2xhbmRzY2FwZSc6ICdzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gICdwb3J0cmFpdCc6ICdzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpJyxcbiAgJ3JldGluYSc6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLzEpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAyZHBweCknXG59O1xuXG5leHBvcnQge0ludGVyY2hhbmdlfTtcbiJdfQ==
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.interchange.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.mediaQuery":32,"b55mWE":41,"buffer":40,"jquery":43}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Magellan = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

var _foundation2 = require('./foundation.smoothScroll');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Magellan module.
 * @module foundation.magellan
 * @requires foundation.smoothScroll
 */

var Magellan = function (_Plugin) {
  _inherits(Magellan, _Plugin);

  function Magellan() {
    _classCallCheck(this, Magellan);

    return _possibleConstructorReturn(this, (Magellan.__proto__ || Object.getPrototypeOf(Magellan)).apply(this, arguments));
  }

  _createClass(Magellan, [{
    key: '_setup',

    /**
     * Creates a new instance of Magellan.
     * @class
     * @name Magellan
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Magellan.defaults, this.$element.data(), options);
      this.className = 'Magellan'; // ie9 back compat

      this._init();
      this.calcPoints();
    }

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      var id = this.$element[0].id || (0, _foundationUtil.GetYoDigits)(6, 'magellan');
      var _this = this;
      this.$targets = (0, _jquery2.default)('[data-magellan-target]');
      this.$links = this.$element.find('a');
      this.$element.attr({
        'data-resize': id,
        'data-scroll': id,
        'id': id
      });
      this.$active = (0, _jquery2.default)();
      this.scrollPos = parseInt(window.pageYOffset, 10);

      this._events();
    }

    /**
     * Calculates an array of pixel values that are the demarcation lines between locations on the page.
     * Can be invoked if new elements are added or the size of a location changes.
     * @function
     */

  }, {
    key: 'calcPoints',
    value: function calcPoints() {
      var _this = this,
          body = document.body,
          html = document.documentElement;

      this.points = [];
      this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
      this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

      this.$targets.each(function () {
        var $tar = (0, _jquery2.default)(this),
            pt = Math.round($tar.offset().top - _this.options.threshold);
        $tar.targetPoint = pt;
        _this.points.push(pt);
      });
    }

    /**
     * Initializes events for Magellan.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this,
          $body = (0, _jquery2.default)('html, body'),
          opts = {
        duration: _this.options.animationDuration,
        easing: _this.options.animationEasing
      };
      (0, _jquery2.default)(window).one('load', function () {
        if (_this.options.deepLinking) {
          if (location.hash) {
            _this.scrollToLoc(location.hash);
          }
        }
        _this.calcPoints();
        _this._updateActive();
      });

      this.$element.on({
        'resizeme.zf.trigger': this.reflow.bind(this),
        'scrollme.zf.trigger': this._updateActive.bind(this)
      }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
        e.preventDefault();
        var arrival = this.getAttribute('href');
        _this.scrollToLoc(arrival);
      });

      this._deepLinkScroll = function (e) {
        if (_this.options.deepLinking) {
          _this.scrollToLoc(window.location.hash);
        }
      };

      (0, _jquery2.default)(window).on('popstate', this._deepLinkScroll);
    }

    /**
     * Function to scroll to a given location on the page.
     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
     * @function
     */

  }, {
    key: 'scrollToLoc',
    value: function scrollToLoc(loc) {
      this._inTransition = true;
      var _this = this;

      var options = {
        animationEasing: this.options.animationEasing,
        animationDuration: this.options.animationDuration,
        threshold: this.options.threshold,
        offset: this.options.offset
      };

      _foundation2.SmoothScroll.scrollToLoc(loc, options, function () {
        _this._inTransition = false;
        _this._updateActive();
      });
    }

    /**
     * Calls necessary functions to update Magellan upon DOM change
     * @function
     */

  }, {
    key: 'reflow',
    value: function reflow() {
      this.calcPoints();
      this._updateActive();
    }

    /**
     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
     * @private
     * @function
     * @fires Magellan#update
     */

  }, {
    key: '_updateActive',
    value: function _updateActive() /*evt, elem, scrollPos*/{
      if (this._inTransition) {
        return;
      }
      var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
          curIdx;

      if (winPos + this.winHeight === this.docHeight) {
        curIdx = this.points.length - 1;
      } else if (winPos < this.points[0]) {
        curIdx = undefined;
      } else {
        var isDown = this.scrollPos < winPos,
            _this = this,
            curVisible = this.points.filter(function (p, i) {
          return isDown ? p - _this.options.offset <= winPos : p - _this.options.offset - _this.options.threshold <= winPos;
        });
        curIdx = curVisible.length ? curVisible.length - 1 : 0;
      }

      this.$active.removeClass(this.options.activeClass);
      this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = "";
        if (curIdx != undefined) {
          hash = this.$active[0].getAttribute('href');
        }
        if (hash !== window.location.hash) {
          if (window.history.pushState) {
            window.history.pushState(null, null, hash);
          } else {
            window.location.hash = hash;
          }
        }
      }

      this.scrollPos = winPos;
      /**
       * Fires when magellan is finished updating to the new active element.
       * @event Magellan#update
       */
      this.$element.trigger('update.zf.magellan', [this.$active]);
    }

    /**
     * Destroys an instance of Magellan and resets the url of the window.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        window.location.hash.replace(hash, '');
      }
      (0, _jquery2.default)(window).off('popstate', this._deepLinkScroll);
    }
  }]);

  return Magellan;
}(_foundation.Plugin);

/**
 * Default settings for plugin
 */


Magellan.defaults = {
  /**
   * Amount of time, in ms, the animated scrolling should take between locations.
   * @option
   * @type {number}
   * @default 500
   */
  animationDuration: 500,
  /**
   * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
   * @option
   * @type {string}
   * @default 'linear'
   * @see {@link https://api.jquery.com/animate|Jquery animate}
   */
  animationEasing: 'linear',
  /**
   * Number of pixels to use as a marker for location changes.
   * @option
   * @type {number}
   * @default 50
   */
  threshold: 50,
  /**
   * Class applied to the active locations link on the magellan container.
   * @option
   * @type {string}
   * @default 'is-active'
   */
  activeClass: 'is-active',
  /**
   * Allows the script to manipulate the url of the current page, and if supported, alter the history.
   * @option
   * @type {boolean}
   * @default false
   */
  deepLinking: false,
  /**
   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
   * @option
   * @type {number}
   * @default 0
   */
  offset: 0
};

exports.Magellan = Magellan;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.magellan.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.smoothScroll":23,"./foundation.util.core":29,"b55mWE":41,"buffer":40,"jquery":43}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OffCanvas = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.mediaQuery');

var _foundationUtil3 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

var _foundationUtil4 = require('./foundation.util.triggers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * OffCanvas module.
 * @module foundation.offcanvas
 * @requires foundation.util.keyboard
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.triggers
 */

var OffCanvas = function (_Plugin) {
  _inherits(OffCanvas, _Plugin);

  function OffCanvas() {
    _classCallCheck(this, OffCanvas);

    return _possibleConstructorReturn(this, (OffCanvas.__proto__ || Object.getPrototypeOf(OffCanvas)).apply(this, arguments));
  }

  _createClass(OffCanvas, [{
    key: '_setup',

    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @name OffCanvas
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      var _this3 = this;

      this.className = 'OffCanvas'; // ie9 back compat
      this.$element = element;
      this.options = _jquery2.default.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.contentClasses = { base: [], reveal: [] };
      this.$lastTrigger = (0, _jquery2.default)();
      this.$triggers = (0, _jquery2.default)();
      this.position = 'left';
      this.$content = (0, _jquery2.default)();
      this.nested = !!this.options.nested;

      // Defines the CSS transition/position classes of the off-canvas content container.
      (0, _jquery2.default)(['push', 'overlap']).each(function (index, val) {
        _this3.contentClasses.base.push('has-transition-' + val);
      });
      (0, _jquery2.default)(['left', 'right', 'top', 'bottom']).each(function (index, val) {
        _this3.contentClasses.base.push('has-position-' + val);
        _this3.contentClasses.reveal.push('has-reveal-' + val);
      });

      // Triggers init is idempotent, just need to make sure it is initialized
      _foundationUtil4.Triggers.init(_jquery2.default);
      _foundationUtil2.MediaQuery._init();

      this._init();
      this._events();

      _foundationUtil.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      var id = this.$element.attr('id');

      this.$element.attr('aria-hidden', 'true');

      // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)
      if (this.options.contentId) {
        this.$content = (0, _jquery2.default)('#' + this.options.contentId);
      } else if (this.$element.siblings('[data-off-canvas-content]').length) {
        this.$content = this.$element.siblings('[data-off-canvas-content]').first();
      } else {
        this.$content = this.$element.closest('[data-off-canvas-content]').first();
      }

      if (!this.options.contentId) {
        // Assume that the off-canvas element is nested if it isn't a sibling of the content
        this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;
      } else if (this.options.contentId && this.options.nested === null) {
        // Warning if using content ID without setting the nested option
        // Once the element is nested it is required to work properly in this case
        console.warn('Remember to use the nested option if using the content ID option!');
      }

      if (this.nested === true) {
        // Force transition overlap if nested
        this.options.transition = 'overlap';
        // Remove appropriate classes if already assigned in markup
        this.$element.removeClass('is-transition-push');
      }

      this.$element.addClass('is-transition-' + this.options.transition + ' is-closed');

      // Find triggers that affect this element and add aria-expanded to them
      this.$triggers = (0, _jquery2.default)(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

      // Get position by checking for related CSS class
      this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\-(left|top|right|bottom)/)[1] : this.position;

      // Add an overlay over the content if necessary
      if (this.options.contentOverlay === true) {
        var overlay = document.createElement('div');
        var overlayPosition = (0, _jquery2.default)(this.$element).css("position") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';
        overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);
        this.$overlay = (0, _jquery2.default)(overlay);
        if (overlayPosition === 'is-overlay-fixed') {
          (0, _jquery2.default)(this.$overlay).insertAfter(this.$element);
        } else {
          this.$content.append(this.$overlay);
        }
      }

      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

      if (this.options.isRevealed === true) {
        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
        this._setMQChecker();
      }

      if (this.options.transitionTime) {
        this.$element.css('transition-duration', this.options.transitionTime);
      }

      // Initally remove all transition/position CSS classes from off-canvas content container.
      this._removeContentClasses();
    }

    /**
     * Adds event handlers to the off-canvas wrapper and the exit overlay.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      this.$element.off('.zf.trigger .zf.offcanvas').on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
      });

      if (this.options.closeOnClick === true) {
        var $target = this.options.contentOverlay ? this.$overlay : this.$content;
        $target.on({ 'click.zf.offcanvas': this.close.bind(this) });
      }
    }

    /**
     * Applies event listener for elements that will reveal at certain breakpoints.
     * @private
     */

  }, {
    key: '_setMQChecker',
    value: function _setMQChecker() {
      var _this = this;

      (0, _jquery2.default)(window).on('changed.zf.mediaquery', function () {
        if (_foundationUtil2.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        } else {
          _this.reveal(false);
        }
      }).one('load.zf.offcanvas', function () {
        if (_foundationUtil2.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        }
      });
    }

    /**
     * Removes the CSS transition/position classes of the off-canvas content container.
     * Removing the classes is important when another off-canvas gets opened that uses the same content container.
     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
     * @private
     */

  }, {
    key: '_removeContentClasses',
    value: function _removeContentClasses(hasReveal) {
      if (typeof hasReveal !== 'boolean') {
        this.$content.removeClass(this.contentClasses.base.join(' '));
      } else if (hasReveal === false) {
        this.$content.removeClass('has-reveal-' + this.position);
      }
    }

    /**
     * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.
     * Beforehand any transition/position class gets removed.
     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
     * @private
     */

  }, {
    key: '_addContentClasses',
    value: function _addContentClasses(hasReveal) {
      this._removeContentClasses(hasReveal);
      if (typeof hasReveal !== 'boolean') {
        this.$content.addClass('has-transition-' + this.options.transition + ' has-position-' + this.position);
      } else if (hasReveal === true) {
        this.$content.addClass('has-reveal-' + this.position);
      }
    }

    /**
     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
     * @param {Boolean} isRevealed - true if element should be revealed.
     * @function
     */

  }, {
    key: 'reveal',
    value: function reveal(isRevealed) {
      if (isRevealed) {
        this.close();
        this.isRevealed = true;
        this.$element.attr('aria-hidden', 'false');
        this.$element.off('open.zf.trigger toggle.zf.trigger');
        this.$element.removeClass('is-closed');
      } else {
        this.isRevealed = false;
        this.$element.attr('aria-hidden', 'true');
        this.$element.off('open.zf.trigger toggle.zf.trigger').on({
          'open.zf.trigger': this.open.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this)
        });
        this.$element.addClass('is-closed');
      }
      this._addContentClasses(isRevealed);
    }

    /**
     * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.
     * @private
     */

  }, {
    key: '_stopScrolling',
    value: function _stopScrolling(event) {
      return false;
    }

    // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios
    // Only really works for y, not sure how to extend to x or if we need to.

  }, {
    key: '_recordScrollable',
    value: function _recordScrollable(event) {
      var elem = this; // called from event handler context with this as elem

      // If the element is scrollable (content overflows), then...
      if (elem.scrollHeight !== elem.clientHeight) {
        // If we're at the top, scroll down one pixel to allow scrolling up
        if (elem.scrollTop === 0) {
          elem.scrollTop = 1;
        }
        // If we're at the bottom, scroll up one pixel to allow scrolling down
        if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {
          elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;
        }
      }
      elem.allowUp = elem.scrollTop > 0;
      elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;
      elem.lastY = event.originalEvent.pageY;
    }
  }, {
    key: '_stopScrollPropagation',
    value: function _stopScrollPropagation(event) {
      var elem = this; // called from event handler context with this as elem
      var up = event.pageY < elem.lastY;
      var down = !up;
      elem.lastY = event.pageY;

      if (up && elem.allowUp || down && elem.allowDown) {
        event.stopPropagation();
      } else {
        event.preventDefault();
      }
    }

    /**
     * Opens the off-canvas menu.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     * @fires OffCanvas#opened
     */

  }, {
    key: 'open',
    value: function open(event, trigger) {
      if (this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }
      var _this = this;

      if (trigger) {
        this.$lastTrigger = trigger;
      }

      if (this.options.forceTo === 'top') {
        window.scrollTo(0, 0);
      } else if (this.options.forceTo === 'bottom') {
        window.scrollTo(0, document.body.scrollHeight);
      }

      if (this.options.transitionTime && this.options.transition !== 'overlap') {
        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);
      } else {
        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');
      }

      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#opened
       */
      this.$element.addClass('is-open').removeClass('is-closed');

      this.$triggers.attr('aria-expanded', 'true');
      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

      this.$content.addClass('is-open-' + this.position);

      // If `contentScroll` is set to false, add class and disable scrolling on touch devices.
      if (this.options.contentScroll === false) {
        (0, _jquery2.default)('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);
        this.$element.on('touchstart', this._recordScrollable);
        this.$element.on('touchmove', this._stopScrollPropagation);
      }

      if (this.options.contentOverlay === true) {
        this.$overlay.addClass('is-visible');
      }

      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
        this.$overlay.addClass('is-closable');
      }

      if (this.options.autoFocus === true) {
        this.$element.one((0, _foundationUtil3.transitionend)(this.$element), function () {
          if (!_this.$element.hasClass('is-open')) {
            return; // exit if prematurely closed
          }
          var canvasFocus = _this.$element.find('[data-autofocus]');
          if (canvasFocus.length) {
            canvasFocus.eq(0).focus();
          } else {
            _this.$element.find('a, button').eq(0).focus();
          }
        });
      }

      if (this.options.trapFocus === true) {
        this.$content.attr('tabindex', '-1');
        _foundationUtil.Keyboard.trapFocus(this.$element);
      }

      this._addContentClasses();
    }

    /**
     * Closes the off-canvas menu.
     * @function
     * @param {Function} cb - optional cb to fire after closure.
     * @fires OffCanvas#closed
     */

  }, {
    key: 'close',
    value: function close(cb) {
      if (!this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }

      var _this = this;

      this.$element.removeClass('is-open');

      this.$element.attr('aria-hidden', 'true')
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */
      .trigger('closed.zf.offcanvas');

      this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom');

      // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.
      if (this.options.contentScroll === false) {
        (0, _jquery2.default)('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);
        this.$element.off('touchstart', this._recordScrollable);
        this.$element.off('touchmove', this._stopScrollPropagation);
      }

      if (this.options.contentOverlay === true) {
        this.$overlay.removeClass('is-visible');
      }

      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
        this.$overlay.removeClass('is-closable');
      }

      this.$triggers.attr('aria-expanded', 'false');

      if (this.options.trapFocus === true) {
        this.$content.removeAttr('tabindex');
        _foundationUtil.Keyboard.releaseFocus(this.$element);
      }

      // Listen to transitionEnd and add class when done.
      this.$element.one((0, _foundationUtil3.transitionend)(this.$element), function (e) {
        _this.$element.addClass('is-closed');
        _this._removeContentClasses();
      });
    }

    /**
     * Toggles the off-canvas menu open or closed.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     */

  }, {
    key: 'toggle',
    value: function toggle(event, trigger) {
      if (this.$element.hasClass('is-open')) {
        this.close(event, trigger);
      } else {
        this.open(event, trigger);
      }
    }

    /**
     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
     * @function
     * @private
     */

  }, {
    key: '_handleKeyboard',
    value: function _handleKeyboard(e) {
      var _this4 = this;

      _foundationUtil.Keyboard.handleKey(e, 'OffCanvas', {
        close: function close() {
          _this4.close();
          _this4.$lastTrigger.focus();
          return true;
        },
        handled: function handled() {
          e.stopPropagation();
          e.preventDefault();
        }
      });
    }

    /**
     * Destroys the offcanvas plugin.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.close();
      this.$element.off('.zf.trigger .zf.offcanvas');
      this.$overlay.off('.zf.offcanvas');
    }
  }]);

  return OffCanvas;
}(_foundation.Plugin);

OffCanvas.defaults = {
  /**
   * Allow the user to click outside of the menu to close it.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClick: true,

  /**
   * Adds an overlay on top of `[data-off-canvas-content]`.
   * @option
   * @type {boolean}
   * @default true
   */
  contentOverlay: true,

  /**
   * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.
   * @option
   * @type {?string}
   * @default null
   */
  contentId: null,

  /**
   * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.
   * @option
   * @type {boolean}
   * @default null
   */
  nested: null,

  /**
   * Enable/disable scrolling of the main content when an off canvas panel is open.
   * @option
   * @type {boolean}
   * @default true
   */
  contentScroll: true,

  /**
   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
   * @option
   * @type {number}
   * @default null
   */
  transitionTime: null,

  /**
   * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.
   * @option
   * @type {string}
   * @default push
   */
  transition: 'push',

  /**
   * Force the page to scroll to top or bottom on open.
   * @option
   * @type {?string}
   * @default null
   */
  forceTo: null,

  /**
   * Allow the offcanvas to remain open for certain breakpoints.
   * @option
   * @type {boolean}
   * @default false
   */
  isRevealed: false,

  /**
   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
   * @option
   * @type {?string}
   * @default null
   */
  revealOn: null,

  /**
   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
   * @option
   * @type {boolean}
   * @default true
   */
  autoFocus: true,

  /**
   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
   * @option
   * @type {string}
   * @default reveal-for-
   * @todo improve the regex testing for this.
   */
  revealClass: 'reveal-for-',

  /**
   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
   * @option
   * @type {boolean}
   * @default false
   */
  trapFocus: false
};

exports.OffCanvas = OffCanvas;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.offcanvas.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.keyboard":31,"./foundation.util.mediaQuery":32,"./foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Orbit = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.motion');

var _foundationUtil3 = require('./foundation.util.timer');

var _foundationUtil4 = require('./foundation.util.imageLoader');

var _foundationUtil5 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

var _foundationUtil6 = require('./foundation.util.touch');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Orbit module.
 * @module foundation.orbit
 * @requires foundation.util.keyboard
 * @requires foundation.util.motion
 * @requires foundation.util.timer
 * @requires foundation.util.imageLoader
 * @requires foundation.util.touch
 */

var Orbit = function (_Plugin) {
  _inherits(Orbit, _Plugin);

  function Orbit() {
    _classCallCheck(this, Orbit);

    return _possibleConstructorReturn(this, (Orbit.__proto__ || Object.getPrototypeOf(Orbit)).apply(this, arguments));
  }

  _createClass(Orbit, [{
    key: '_setup',

    /**
    * Creates a new instance of an orbit carousel.
    * @class
    * @name Orbit
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
    * @param {Object} options - Overrides to the default plugin settings.
    */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Orbit.defaults, this.$element.data(), options);
      this.className = 'Orbit'; // ie9 back compat

      _foundationUtil6.Touch.init(_jquery2.default); // Touch init is idempotent, we just need to make sure it's initialied.

      this._init();

      _foundationUtil.Keyboard.register('Orbit', {
        'ltr': {
          'ARROW_RIGHT': 'next',
          'ARROW_LEFT': 'previous'
        },
        'rtl': {
          'ARROW_LEFT': 'next',
          'ARROW_RIGHT': 'previous'
        }
      });
    }

    /**
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
    * @function
    * @private
    */

  }, {
    key: '_init',
    value: function _init() {
      // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide
      this._reset();

      this.$wrapper = this.$element.find('.' + this.options.containerClass);
      this.$slides = this.$element.find('.' + this.options.slideClass);

      var $images = this.$element.find('img'),
          initActive = this.$slides.filter('.is-active'),
          id = this.$element[0].id || (0, _foundationUtil5.GetYoDigits)(6, 'orbit');

      this.$element.attr({
        'data-resize': id,
        'id': id
      });

      if (!initActive.length) {
        this.$slides.eq(0).addClass('is-active');
      }

      if (!this.options.useMUI) {
        this.$slides.addClass('no-motionui');
      }

      if ($images.length) {
        (0, _foundationUtil4.onImagesLoaded)($images, this._prepareForOrbit.bind(this));
      } else {
        this._prepareForOrbit(); //hehe
      }

      if (this.options.bullets) {
        this._loadBullets();
      }

      this._events();

      if (this.options.autoPlay && this.$slides.length > 1) {
        this.geoSync();
      }

      if (this.options.accessible) {
        // allow wrapper to be focusable to enable arrow navigation
        this.$wrapper.attr('tabindex', 0);
      }
    }

    /**
    * Creates a jQuery collection of bullets, if they are being used.
    * @function
    * @private
    */

  }, {
    key: '_loadBullets',
    value: function _loadBullets() {
      this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');
    }

    /**
    * Sets a `timer` object on the orbit, and starts the counter for the next slide.
    * @function
    */

  }, {
    key: 'geoSync',
    value: function geoSync() {
      var _this = this;
      this.timer = new _foundationUtil3.Timer(this.$element, {
        duration: this.options.timerDelay,
        infinite: false
      }, function () {
        _this.changeSlide(true);
      });
      this.timer.start();
    }

    /**
    * Sets wrapper and slide heights for the orbit.
    * @function
    * @private
    */

  }, {
    key: '_prepareForOrbit',
    value: function _prepareForOrbit() {
      var _this = this;
      this._setWrapperHeight();
    }

    /**
    * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
    * @function
    * @private
    * @param {Function} cb - a callback function to fire when complete.
    */

  }, {
    key: '_setWrapperHeight',
    value: function _setWrapperHeight(cb) {
      //rewrite this to `for` loop
      var max = 0,
          temp,
          counter = 0,
          _this = this;

      this.$slides.each(function () {
        temp = this.getBoundingClientRect().height;
        (0, _jquery2.default)(this).attr('data-slide', counter);

        if (!/mui/g.test((0, _jquery2.default)(this)[0].className) && _this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {
          //if not the active slide, set css position and display property
          (0, _jquery2.default)(this).css({ 'position': 'relative', 'display': 'none' });
        }
        max = temp > max ? temp : max;
        counter++;
      });

      if (counter === this.$slides.length) {
        this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.
        if (cb) {
          cb(max);
        } //fire callback with max height dimension.
      }
    }

    /**
    * Sets the max-height of each slide.
    * @function
    * @private
    */

  }, {
    key: '_setSlideHeight',
    value: function _setSlideHeight(height) {
      this.$slides.each(function () {
        (0, _jquery2.default)(this).css('max-height', height);
      });
    }

    /**
    * Adds event listeners to basically everything within the element.
    * @function
    * @private
    */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;

      //***************************************
      //**Now using custom event - thanks to:**
      //**      Yohai Ararat of Toronto      **
      //***************************************
      //
      this.$element.off('.resizeme.zf.trigger').on({
        'resizeme.zf.trigger': this._prepareForOrbit.bind(this)
      });
      if (this.$slides.length > 1) {

        if (this.options.swipe) {
          this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(true);
          }).on('swiperight.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(false);
          });
        }
        //***************************************

        if (this.options.autoPlay) {
          this.$slides.on('click.zf.orbit', function () {
            _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);
            _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
          });

          if (this.options.pauseOnHover) {
            this.$element.on('mouseenter.zf.orbit', function () {
              _this.timer.pause();
            }).on('mouseleave.zf.orbit', function () {
              if (!_this.$element.data('clickedOn')) {
                _this.timer.start();
              }
            });
          }
        }

        if (this.options.navButtons) {
          var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);
          $controls.attr('tabindex', 0)
          //also need to handle enter/return and spacebar key presses
          .on('click.zf.orbit touchend.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide((0, _jquery2.default)(this).hasClass(_this.options.nextClass));
          });
        }

        if (this.options.bullets) {
          this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
            if (/is-active/g.test(this.className)) {
              return false;
            } //if this is active, kick out of function.
            var idx = (0, _jquery2.default)(this).data('slide'),
                ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                $slide = _this.$slides.eq(idx);

            _this.changeSlide(ltr, $slide, idx);
          });
        }

        if (this.options.accessible) {
          this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
            // handle keyboard event with keyboard util
            _foundationUtil.Keyboard.handleKey(e, 'Orbit', {
              next: function next() {
                _this.changeSlide(true);
              },
              previous: function previous() {
                _this.changeSlide(false);
              },
              handled: function handled() {
                // if bullet is focused, make sure focus moves
                if ((0, _jquery2.default)(e.target).is(_this.$bullets)) {
                  _this.$bullets.filter('.is-active').focus();
                }
              }
            });
          });
        }
      }
    }

    /**
     * Resets Orbit so it can be reinitialized
     */

  }, {
    key: '_reset',
    value: function _reset() {
      // Don't do anything if there are no slides (first run)
      if (typeof this.$slides == 'undefined') {
        return;
      }

      if (this.$slides.length > 1) {
        // Remove old events
        this.$element.off('.zf.orbit').find('*').off('.zf.orbit');

        // Restart timer if autoPlay is enabled
        if (this.options.autoPlay) {
          this.timer.restart();
        }

        // Reset all sliddes
        this.$slides.each(function (el) {
          (0, _jquery2.default)(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();
        });

        // Show the first slide
        this.$slides.first().addClass('is-active').show();

        // Triggers when the slide has finished animating
        this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]);

        // Select first bullet if bullets are present
        if (this.options.bullets) {
          this._updateBullets(0);
        }
      }
    }

    /**
    * Changes the current slide to a new one.
    * @function
    * @param {Boolean} isLTR - flag if the slide should move left to right.
    * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
    * @param {Number} idx - the index of the new slide in its collection, if one chosen.
    * @fires Orbit#slidechange
    */

  }, {
    key: 'changeSlide',
    value: function changeSlide(isLTR, chosenSlide, idx) {
      if (!this.$slides) {
        return;
      } // Don't freak out if we're in the middle of cleanup
      var $curSlide = this.$slides.filter('.is-active').eq(0);

      if (/mui/g.test($curSlide[0].className)) {
        return false;
      } //if the slide is currently animating, kick out of the function

      var $firstSlide = this.$slides.first(),
          $lastSlide = this.$slides.last(),
          dirIn = isLTR ? 'Right' : 'Left',
          dirOut = isLTR ? 'Left' : 'Right',
          _this = this,
          $newSlide;

      if (!chosenSlide) {
        //most of the time, this will be auto played or clicked from the navButtons.
        $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
        this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right
        this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left
      } else {
        $newSlide = chosenSlide;
      }

      if ($newSlide.length) {
        /**
        * Triggers before the next slide starts animating in and only if a next slide has been found.
        * @event Orbit#beforeslidechange
        */
        this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

        if (this.options.bullets) {
          idx = idx || this.$slides.index($newSlide); //grab index to update bullets
          this._updateBullets(idx);
        }

        if (this.options.useMUI && !this.$element.is(':hidden')) {
          _foundationUtil2.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {
            $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');
          });

          _foundationUtil2.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {
            $curSlide.removeAttr('aria-live');
            if (_this.options.autoPlay && !_this.timer.isPaused) {
              _this.timer.restart();
            }
            //do stuff?
          });
        } else {
          $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
          $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();
          if (this.options.autoPlay && !this.timer.isPaused) {
            this.timer.restart();
          }
        }
        /**
        * Triggers when the slide has finished animating in.
        * @event Orbit#slidechange
        */
        this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
      }
    }

    /**
    * Updates the active state of the bullets, if displayed.
    * @function
    * @private
    * @param {Number} idx - the index of the current slide.
    */

  }, {
    key: '_updateBullets',
    value: function _updateBullets(idx) {
      var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),
          span = $oldBullet.find('span:last').detach(),
          $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
    }

    /**
    * Destroys the carousel and hides the element.
    * @function
    */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
    }
  }]);

  return Orbit;
}(_foundation.Plugin);

Orbit.defaults = {
  /**
  * Tells the JS to look for and loadBullets.
  * @option
   * @type {boolean}
  * @default true
  */
  bullets: true,
  /**
  * Tells the JS to apply event listeners to nav buttons
  * @option
   * @type {boolean}
  * @default true
  */
  navButtons: true,
  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-in-right'
  */
  animInFromRight: 'slide-in-right',
  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-out-right'
  */
  animOutToRight: 'slide-out-right',
  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-in-left'
  *
  */
  animInFromLeft: 'slide-in-left',
  /**
  * motion-ui animation class to apply
  * @option
   * @type {string}
  * @default 'slide-out-left'
  */
  animOutToLeft: 'slide-out-left',
  /**
  * Allows Orbit to automatically animate on page load.
  * @option
   * @type {boolean}
  * @default true
  */
  autoPlay: true,
  /**
  * Amount of time, in ms, between slide transitions
  * @option
   * @type {number}
  * @default 5000
  */
  timerDelay: 5000,
  /**
  * Allows Orbit to infinitely loop through the slides
  * @option
   * @type {boolean}
  * @default true
  */
  infiniteWrap: true,
  /**
  * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
  * @option
   * @type {boolean}
  * @default true
  */
  swipe: true,
  /**
  * Allows the timing function to pause animation on hover.
  * @option
   * @type {boolean}
  * @default true
  */
  pauseOnHover: true,
  /**
  * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
  * @option
   * @type {boolean}
  * @default true
  */
  accessible: true,
  /**
  * Class applied to the container of Orbit
  * @option
   * @type {string}
  * @default 'orbit-container'
  */
  containerClass: 'orbit-container',
  /**
  * Class applied to individual slides.
  * @option
   * @type {string}
  * @default 'orbit-slide'
  */
  slideClass: 'orbit-slide',
  /**
  * Class applied to the bullet container. You're welcome.
  * @option
   * @type {string}
  * @default 'orbit-bullets'
  */
  boxOfBullets: 'orbit-bullets',
  /**
  * Class applied to the `next` navigation button.
  * @option
   * @type {string}
  * @default 'orbit-next'
  */
  nextClass: 'orbit-next',
  /**
  * Class applied to the `previous` navigation button.
  * @option
   * @type {string}
  * @default 'orbit-previous'
  */
  prevClass: 'orbit-previous',
  /**
  * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
  * @option
   * @type {boolean}
  * @default true
  */
  useMUI: true
};

exports.Orbit = Orbit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.orbit.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.imageLoader":30,"./foundation.util.keyboard":31,"./foundation.util.motion":33,"./foundation.util.timer":35,"./foundation.util.touch":36,"b55mWE":41,"buffer":40,"jquery":43}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Plugin = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Abstract class for providing lifecycle hooks. Expect plugins to define AT LEAST
// {function} _setup (replaces previous constructor),
// {function} _destroy (replaces previous destroy)
var Plugin = function () {
  function Plugin(element, options) {
    _classCallCheck(this, Plugin);

    this._setup(element, options);
    var pluginName = getPluginName(this);
    this.uuid = (0, _foundationUtil.GetYoDigits)(6, pluginName);

    if (!this.$element.attr('data-' + pluginName)) {
      this.$element.attr('data-' + pluginName, this.uuid);
    }
    if (!this.$element.data('zfPlugin')) {
      this.$element.data('zfPlugin', this);
    }
    /**
     * Fires when the plugin has initialized.
     * @event Plugin#init
     */
    this.$element.trigger('init.zf.' + pluginName);
  }

  _createClass(Plugin, [{
    key: 'destroy',
    value: function destroy() {
      this._destroy();
      var pluginName = getPluginName(this);
      this.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger('destroyed.zf.' + pluginName);
      for (var prop in this) {
        this[prop] = null; //clean up script to prep for garbage collection.
      }
    }
  }]);

  return Plugin;
}();

// Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580


function hyphenate(str) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

function getPluginName(obj) {
  if (typeof obj.constructor.name !== 'undefined') {
    return hyphenate(obj.constructor.name);
  } else {
    return hyphenate(obj.className);
  }
}

exports.Plugin = Plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24ucGx1Z2luLmpzIl0sIm5hbWVzIjpbIlBsdWdpbiIsImVsZW1lbnQiLCJvcHRpb25zIiwiX3NldHVwIiwicGx1Z2luTmFtZSIsImdldFBsdWdpbk5hbWUiLCJ1dWlkIiwiJGVsZW1lbnQiLCJhdHRyIiwiZGF0YSIsInRyaWdnZXIiLCJfZGVzdHJveSIsInJlbW92ZUF0dHIiLCJyZW1vdmVEYXRhIiwicHJvcCIsImh5cGhlbmF0ZSIsInN0ciIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIm9iaiIsImNvbnN0cnVjdG9yIiwibmFtZSIsImNsYXNzTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDQTtJQUNNQSxNO0FBRUosa0JBQVlDLE9BQVosRUFBcUJDLE9BQXJCLEVBQThCO0FBQUE7O0FBQzVCLFNBQUtDLE1BQUwsQ0FBWUYsT0FBWixFQUFxQkMsT0FBckI7QUFDQSxRQUFJRSxhQUFhQyxjQUFjLElBQWQsQ0FBakI7QUFDQSxTQUFLQyxJQUFMLEdBQVksaUNBQVksQ0FBWixFQUFlRixVQUFmLENBQVo7O0FBRUEsUUFBRyxDQUFDLEtBQUtHLFFBQUwsQ0FBY0MsSUFBZCxXQUEyQkosVUFBM0IsQ0FBSixFQUE2QztBQUFFLFdBQUtHLFFBQUwsQ0FBY0MsSUFBZCxXQUEyQkosVUFBM0IsRUFBeUMsS0FBS0UsSUFBOUM7QUFBc0Q7QUFDckcsUUFBRyxDQUFDLEtBQUtDLFFBQUwsQ0FBY0UsSUFBZCxDQUFtQixVQUFuQixDQUFKLEVBQW1DO0FBQUUsV0FBS0YsUUFBTCxDQUFjRSxJQUFkLENBQW1CLFVBQW5CLEVBQStCLElBQS9CO0FBQXVDO0FBQzVFOzs7O0FBSUEsU0FBS0YsUUFBTCxDQUFjRyxPQUFkLGNBQWlDTixVQUFqQztBQUNEOzs7OzhCQUVTO0FBQ1IsV0FBS08sUUFBTDtBQUNBLFVBQUlQLGFBQWFDLGNBQWMsSUFBZCxDQUFqQjtBQUNBLFdBQUtFLFFBQUwsQ0FBY0ssVUFBZCxXQUFpQ1IsVUFBakMsRUFBK0NTLFVBQS9DLENBQTBELFVBQTFEO0FBQ0k7Ozs7QUFESixPQUtLSCxPQUxMLG1CQUs2Qk4sVUFMN0I7QUFNQSxXQUFJLElBQUlVLElBQVIsSUFBZ0IsSUFBaEIsRUFBcUI7QUFDbkIsYUFBS0EsSUFBTCxJQUFhLElBQWIsQ0FEbUIsQ0FDRDtBQUNuQjtBQUNGOzs7Ozs7QUFHSDtBQUNBOzs7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxHQUFuQixFQUF3QjtBQUN0QixTQUFPQSxJQUFJQyxPQUFKLENBQVksaUJBQVosRUFBK0IsT0FBL0IsRUFBd0NDLFdBQXhDLEVBQVA7QUFDRDs7QUFFRCxTQUFTYixhQUFULENBQXVCYyxHQUF2QixFQUE0QjtBQUMxQixNQUFHLE9BQU9BLElBQUlDLFdBQUosQ0FBZ0JDLElBQXZCLEtBQWlDLFdBQXBDLEVBQWlEO0FBQy9DLFdBQU9OLFVBQVVJLElBQUlDLFdBQUosQ0FBZ0JDLElBQTFCLENBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPTixVQUFVSSxJQUFJRyxTQUFkLENBQVA7QUFDRDtBQUNGOztRQUVPdEIsTSxHQUFBQSxNIiwiZmlsZSI6ImZvdW5kYXRpb24ucGx1Z2luLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgR2V0WW9EaWdpdHMgfSBmcm9tICcuL2ZvdW5kYXRpb24udXRpbC5jb3JlJztcblxuLy8gQWJzdHJhY3QgY2xhc3MgZm9yIHByb3ZpZGluZyBsaWZlY3ljbGUgaG9va3MuIEV4cGVjdCBwbHVnaW5zIHRvIGRlZmluZSBBVCBMRUFTVFxuLy8ge2Z1bmN0aW9ufSBfc2V0dXAgKHJlcGxhY2VzIHByZXZpb3VzIGNvbnN0cnVjdG9yKSxcbi8vIHtmdW5jdGlvbn0gX2Rlc3Ryb3kgKHJlcGxhY2VzIHByZXZpb3VzIGRlc3Ryb3kpXG5jbGFzcyBQbHVnaW4ge1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLl9zZXR1cChlbGVtZW50LCBvcHRpb25zKTtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGdldFBsdWdpbk5hbWUodGhpcyk7XG4gICAgdGhpcy51dWlkID0gR2V0WW9EaWdpdHMoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZighdGhpcy4kZWxlbWVudC5hdHRyKGBkYXRhLSR7cGx1Z2luTmFtZX1gKSl7IHRoaXMuJGVsZW1lbnQuYXR0cihgZGF0YS0ke3BsdWdpbk5hbWV9YCwgdGhpcy51dWlkKTsgfVxuICAgIGlmKCF0aGlzLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykpeyB0aGlzLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJywgdGhpcyk7IH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihgaW5pdC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX2Rlc3Ryb3koKTtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGdldFBsdWdpbk5hbWUodGhpcyk7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKGBkYXRhLSR7cGx1Z2luTmFtZX1gKS5yZW1vdmVEYXRhKCd6ZlBsdWdpbicpXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICAgKiBAZXZlbnQgUGx1Z2luI2Rlc3Ryb3llZFxuICAgICAgICAgKi9cbiAgICAgICAgLnRyaWdnZXIoYGRlc3Ryb3llZC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gICAgZm9yKHZhciBwcm9wIGluIHRoaXMpe1xuICAgICAgdGhpc1twcm9wXSA9IG51bGw7Ly9jbGVhbiB1cCBzY3JpcHQgdG8gcHJlcCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgIH1cbiAgfVxufVxuXG4vLyBDb252ZXJ0IFBhc2NhbENhc2UgdG8ga2ViYWItY2FzZVxuLy8gVGhhbmsgeW91OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84OTU1NTgwXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gZ2V0UGx1Z2luTmFtZShvYmopIHtcbiAgaWYodHlwZW9mKG9iai5jb25zdHJ1Y3Rvci5uYW1lKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKG9iai5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKG9iai5jbGFzc05hbWUpO1xuICB9XG59XG5cbmV4cG9ydCB7UGx1Z2lufTtcbiJdfQ==
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.plugin.js","/../../node_modules/foundation-sites/js")
},{"./foundation.util.core":29,"b55mWE":41,"buffer":40,"jquery":43}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Positionable = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _foundationUtil = require('./foundation.util.box');

var _foundation = require('./foundation.plugin');

var _foundationUtil2 = require('./foundation.util.core');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var POSITIONS = ['left', 'right', 'top', 'bottom'];
var VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];
var HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];

var ALIGNMENTS = {
  'left': VERTICAL_ALIGNMENTS,
  'right': VERTICAL_ALIGNMENTS,
  'top': HORIZONTAL_ALIGNMENTS,
  'bottom': HORIZONTAL_ALIGNMENTS
};

function nextItem(item, array) {
  var currentIdx = array.indexOf(item);
  if (currentIdx === array.length - 1) {
    return array[0];
  } else {
    return array[currentIdx + 1];
  }
}

var Positionable = function (_Plugin) {
  _inherits(Positionable, _Plugin);

  function Positionable() {
    _classCallCheck(this, Positionable);

    return _possibleConstructorReturn(this, (Positionable.__proto__ || Object.getPrototypeOf(Positionable)).apply(this, arguments));
  }

  _createClass(Positionable, [{
    key: '_init',

    /**
     * Abstract class encapsulating the tether-like explicit positioning logic
     * including repositioning based on overlap.
     * Expects classes to define defaults for vOffset, hOffset, position,
     * alignment, allowOverlap, and allowBottomOverlap. They can do this by
     * extending the defaults, or (for now recommended due to the way docs are
     * generated) by explicitly declaring them.
     *
     **/

    value: function _init() {
      this.triedPositions = {};
      this.position = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;
      this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;
      this.originalPosition = this.position;
      this.originalAlignment = this.alignment;
    }
  }, {
    key: '_getDefaultPosition',
    value: function _getDefaultPosition() {
      return 'bottom';
    }
  }, {
    key: '_getDefaultAlignment',
    value: function _getDefaultAlignment() {
      switch (this.position) {
        case 'bottom':
        case 'top':
          return (0, _foundationUtil2.rtl)() ? 'right' : 'left';
        case 'left':
        case 'right':
          return 'bottom';
      }
    }

    /**
     * Adjusts the positionable possible positions by iterating through alignments
     * and positions.
     * @function
     * @private
     */

  }, {
    key: '_reposition',
    value: function _reposition() {
      if (this._alignmentsExhausted(this.position)) {
        this.position = nextItem(this.position, POSITIONS);
        this.alignment = ALIGNMENTS[this.position][0];
      } else {
        this._realign();
      }
    }

    /**
     * Adjusts the dropdown pane possible positions by iterating through alignments
     * on the current position.
     * @function
     * @private
     */

  }, {
    key: '_realign',
    value: function _realign() {
      this._addTriedPosition(this.position, this.alignment);
      this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position]);
    }
  }, {
    key: '_addTriedPosition',
    value: function _addTriedPosition(position, alignment) {
      this.triedPositions[position] = this.triedPositions[position] || [];
      this.triedPositions[position].push(alignment);
    }
  }, {
    key: '_positionsExhausted',
    value: function _positionsExhausted() {
      var isExhausted = true;
      for (var i = 0; i < POSITIONS.length; i++) {
        isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);
      }
      return isExhausted;
    }
  }, {
    key: '_alignmentsExhausted',
    value: function _alignmentsExhausted(position) {
      return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;
    }

    // When we're trying to center, we don't want to apply offset that's going to
    // take us just off center, so wrap around to return 0 for the appropriate
    // offset in those alignments.  TODO: Figure out if we want to make this
    // configurable behavior... it feels more intuitive, especially for tooltips, but
    // it's possible someone might actually want to start from center and then nudge
    // slightly off.

  }, {
    key: '_getVOffset',
    value: function _getVOffset() {
      return this.options.vOffset;
    }
  }, {
    key: '_getHOffset',
    value: function _getHOffset() {
      return this.options.hOffset;
    }
  }, {
    key: '_setPosition',
    value: function _setPosition($anchor, $element, $parent) {
      if ($anchor.attr('aria-expanded') === 'false') {
        return false;
      }
      var $eleDims = _foundationUtil.Box.GetDimensions($element),
          $anchorDims = _foundationUtil.Box.GetDimensions($anchor);

      if (!this.options.allowOverlap) {
        // restore original position & alignment before checking overlap
        this.position = this.originalPosition;
        this.alignment = this.originalAlignment;
      }

      $element.offset(_foundationUtil.Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));

      if (!this.options.allowOverlap) {
        var overlaps = {};
        var minOverlap = 100000000;
        // default coordinates to how we start, in case we can't figure out better
        var minCoordinates = { position: this.position, alignment: this.alignment };
        while (!this._positionsExhausted()) {
          var overlap = _foundationUtil.Box.OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);
          if (overlap === 0) {
            return;
          }

          if (overlap < minOverlap) {
            minOverlap = overlap;
            minCoordinates = { position: this.position, alignment: this.alignment };
          }

          this._reposition();

          $element.offset(_foundationUtil.Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
        }
        // If we get through the entire loop, there was no non-overlapping
        // position available. Pick the version with least overlap.
        this.position = minCoordinates.position;
        this.alignment = minCoordinates.alignment;
        $element.offset(_foundationUtil.Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
      }
    }
  }]);

  return Positionable;
}(_foundation.Plugin);

Positionable.defaults = {
  /**
   * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  position: 'auto',
  /**
   * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',
  /**
   * Allow overlap of container/window. If false, dropdown positionable first
   * try to position as defined by data-position and data-alignment, but
   * reposition if it would cause an overflow.
   * @option
   * @type {boolean}
   * @default false
   */
  allowOverlap: false,
  /**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * @option
   * @type {boolean}
   * @default true
   */
  allowBottomOverlap: true,
  /**
   * Number of pixels the positionable should be separated vertically from anchor
   * @option
   * @type {number}
   * @default 0
   */
  vOffset: 0,
  /**
   * Number of pixels the positionable should be separated horizontally from anchor
   * @option
   * @type {number}
   * @default 0
   */
  hOffset: 0
};

exports.Positionable = Positionable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.positionable.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.box":28,"./foundation.util.core":29,"b55mWE":41,"buffer":40}],18:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResponsiveAccordionTabs = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.mediaQuery');

var _foundationUtil2 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

var _foundation2 = require('./foundation.accordion');

var _foundation3 = require('./foundation.tabs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// The plugin matches the plugin classes with these plugin instances.
var MenuPlugins = {
  tabs: {
    cssClass: 'tabs',
    plugin: _foundation3.Tabs
  },
  accordion: {
    cssClass: 'accordion',
    plugin: _foundation2.Accordion
  }
};

/**
 * ResponsiveAccordionTabs module.
 * @module foundation.responsiveAccordionTabs
 * @requires foundation.util.motion
 * @requires foundation.accordion
 * @requires foundation.tabs
 */

var ResponsiveAccordionTabs = function (_Plugin) {
  _inherits(ResponsiveAccordionTabs, _Plugin);

  function ResponsiveAccordionTabs() {
    _classCallCheck(this, ResponsiveAccordionTabs);

    return _possibleConstructorReturn(this, (ResponsiveAccordionTabs.__proto__ || Object.getPrototypeOf(ResponsiveAccordionTabs)).apply(this, arguments));
  }

  _createClass(ResponsiveAccordionTabs, [{
    key: '_setup',

    /**
     * Creates a new instance of a responsive accordion tabs.
     * @class
     * @name ResponsiveAccordionTabs
     * @fires ResponsiveAccordionTabs#init
     * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = (0, _jquery2.default)(element);
      this.options = _jquery2.default.extend({}, this.$element.data(), options);
      this.rules = this.$element.data('responsive-accordion-tabs');
      this.currentMq = null;
      this.currentPlugin = null;
      this.className = 'ResponsiveAccordionTabs'; // ie9 back compat
      if (!this.$element.attr('id')) {
        this.$element.attr('id', (0, _foundationUtil2.GetYoDigits)(6, 'responsiveaccordiontabs'));
      };

      this._init();
      this._events();
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil.MediaQuery._init();

      // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
      if (typeof this.rules === 'string') {
        var rulesTree = {};

        // Parse rules from "classes" pulled from data attribute
        var rules = this.rules.split(' ');

        // Iterate through every rule found
        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i].split('-');
          var ruleSize = rule.length > 1 ? rule[0] : 'small';
          var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      this._getAllOptions();

      if (!_jquery2.default.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      }
    }
  }, {
    key: '_getAllOptions',
    value: function _getAllOptions() {
      //get all defaults and options
      var _this = this;
      _this.allOptions = {};
      for (var key in MenuPlugins) {
        if (MenuPlugins.hasOwnProperty(key)) {
          var obj = MenuPlugins[key];
          try {
            var dummyPlugin = (0, _jquery2.default)('<ul></ul>');
            var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);
            for (var keyKey in tmpPlugin.options) {
              if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {
                var objObj = tmpPlugin.options[keyKey];
                _this.allOptions[keyKey] = objObj;
              }
            }
            tmpPlugin.destroy();
          } catch (e) {}
        }
      }
    }

    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;

      (0, _jquery2.default)(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      });
    }

    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */

  }, {
    key: '_checkMediaQueries',
    value: function _checkMediaQueries() {
      var matchedMq,
          _this = this;
      // Iterate through each rule and find the last matching rule
      _jquery2.default.each(this.rules, function (key) {
        if (_foundationUtil.MediaQuery.atLeast(key)) {
          matchedMq = key;
        }
      });

      // No match? No dice
      if (!matchedMq) return;

      // Plugin already initialized? We good
      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

      // Remove existing plugin-specific CSS classes
      _jquery2.default.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      });

      // Add the CSS class for the new plugin
      this.$element.addClass(this.rules[matchedMq].cssClass);

      // Create an instance of the new plugin
      if (this.currentPlugin) {
        //don't know why but on nested elements data zfPlugin get's lost
        if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
        this.currentPlugin.destroy();
      }
      this._handleMarkup(this.rules[matchedMq].cssClass);
      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
      this.storezfData = this.currentPlugin.$element.data('zfPlugin');
    }
  }, {
    key: '_handleMarkup',
    value: function _handleMarkup(toSet) {
      var _this = this,
          fromString = 'accordion';
      var $panels = (0, _jquery2.default)('[data-tabs-content=' + this.$element.attr('id') + ']');
      if ($panels.length) fromString = 'tabs';
      if (fromString === toSet) {
        return;
      };

      var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';
      var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';

      this.$element.removeAttr('role');
      var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
      var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');

      if (fromString === 'tabs') {
        $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
        $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');
      } else {
        $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');
      };

      $panels.css({ display: '', visibility: '' });
      $liHeads.css({ display: '', visibility: '' });
      if (toSet === 'accordion') {
        $panels.each(function (key, value) {
          (0, _jquery2.default)(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });
          (0, _jquery2.default)('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').detach();
          $liHeads.addClass('accordion-item').attr('data-accordion-item', '');
          $liHeadsA.addClass('accordion-title');
        });
      } else if (toSet === 'tabs') {
        var $tabsContent = (0, _jquery2.default)('[data-tabs-content=' + _this.$element.attr('id') + ']');
        var $placeholder = (0, _jquery2.default)('#tabs-placeholder-' + _this.$element.attr('id'));
        if ($placeholder.length) {
          $tabsContent = (0, _jquery2.default)('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
          $placeholder.remove();
        } else {
          $tabsContent = (0, _jquery2.default)('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
        };
        $panels.each(function (key, value) {
          var tempValue = (0, _jquery2.default)(value).appendTo($tabsContent).addClass(tabsPanel);
          var hash = $liHeadsA.get(key).hash.slice(1);
          var id = (0, _jquery2.default)(value).attr('id') || (0, _foundationUtil2.GetYoDigits)(6, 'accordion');
          if (hash !== id) {
            if (hash !== '') {
              (0, _jquery2.default)(value).attr('id', hash);
            } else {
              hash = id;
              (0, _jquery2.default)(value).attr('id', hash);
              (0, _jquery2.default)($liHeadsA.get(key)).attr('href', (0, _jquery2.default)($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
            };
          };
          var isActive = (0, _jquery2.default)($liHeads.get(key)).hasClass('is-active');
          if (isActive) {
            tempValue.addClass('is-active');
          };
        });
        $liHeads.addClass(tabsTitle);
      };
    }

    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      if (this.currentPlugin) this.currentPlugin.destroy();
      (0, _jquery2.default)(window).off('.zf.ResponsiveAccordionTabs');
    }
  }]);

  return ResponsiveAccordionTabs;
}(_foundation.Plugin);

ResponsiveAccordionTabs.defaults = {};

exports.ResponsiveAccordionTabs = ResponsiveAccordionTabs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.responsiveAccordionTabs.js","/../../node_modules/foundation-sites/js")
},{"./foundation.accordion":5,"./foundation.plugin":16,"./foundation.tabs":25,"./foundation.util.core":29,"./foundation.util.mediaQuery":32,"b55mWE":41,"buffer":40,"jquery":43}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResponsiveMenu = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.mediaQuery');

var _foundationUtil2 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

var _foundation2 = require('./foundation.dropdownMenu');

var _foundation3 = require('./foundation.drilldown');

var _foundation4 = require('./foundation.accordionMenu');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MenuPlugins = {
  dropdown: {
    cssClass: 'dropdown',
    plugin: _foundation2.DropdownMenu
  },
  drilldown: {
    cssClass: 'drilldown',
    plugin: _foundation3.Drilldown
  },
  accordion: {
    cssClass: 'accordion-menu',
    plugin: _foundation4.AccordionMenu
  }
};

// import "foundation.util.triggers.js";


/**
 * ResponsiveMenu module.
 * @module foundation.responsiveMenu
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 */

var ResponsiveMenu = function (_Plugin) {
  _inherits(ResponsiveMenu, _Plugin);

  function ResponsiveMenu() {
    _classCallCheck(this, ResponsiveMenu);

    return _possibleConstructorReturn(this, (ResponsiveMenu.__proto__ || Object.getPrototypeOf(ResponsiveMenu)).apply(this, arguments));
  }

  _createClass(ResponsiveMenu, [{
    key: '_setup',

    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @name ResponsiveMenu
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = (0, _jquery2.default)(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;
      this.className = 'ResponsiveMenu'; // ie9 back compat

      this._init();
      this._events();
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {

      _foundationUtil.MediaQuery._init();
      // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
      if (typeof this.rules === 'string') {
        var rulesTree = {};

        // Parse rules from "classes" pulled from data attribute
        var rules = this.rules.split(' ');

        // Iterate through every rule found
        for (var i = 0; i < rules.length; i++) {
          var rule = rules[i].split('-');
          var ruleSize = rule.length > 1 ? rule[0] : 'small';
          var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      if (!_jquery2.default.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      }
      // Add data-mutate since children may need it.
      this.$element.attr('data-mutate', this.$element.attr('data-mutate') || (0, _foundationUtil2.GetYoDigits)(6, 'responsive-menu'));
    }

    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;

      (0, _jquery2.default)(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      });
      // $(window).on('resize.zf.ResponsiveMenu', function() {
      //   _this._checkMediaQueries();
      // });
    }

    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */

  }, {
    key: '_checkMediaQueries',
    value: function _checkMediaQueries() {
      var matchedMq,
          _this = this;
      // Iterate through each rule and find the last matching rule
      _jquery2.default.each(this.rules, function (key) {
        if (_foundationUtil.MediaQuery.atLeast(key)) {
          matchedMq = key;
        }
      });

      // No match? No dice
      if (!matchedMq) return;

      // Plugin already initialized? We good
      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

      // Remove existing plugin-specific CSS classes
      _jquery2.default.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      });

      // Add the CSS class for the new plugin
      this.$element.addClass(this.rules[matchedMq].cssClass);

      // Create an instance of the new plugin
      if (this.currentPlugin) this.currentPlugin.destroy();
      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
    }

    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.currentPlugin.destroy();
      (0, _jquery2.default)(window).off('.zf.ResponsiveMenu');
    }
  }]);

  return ResponsiveMenu;
}(_foundation.Plugin);

ResponsiveMenu.defaults = {};

exports.ResponsiveMenu = ResponsiveMenu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.responsiveMenu.js","/../../node_modules/foundation-sites/js")
},{"./foundation.accordionMenu":6,"./foundation.drilldown":8,"./foundation.dropdownMenu":10,"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.mediaQuery":32,"b55mWE":41,"buffer":40,"jquery":43}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResponsiveToggle = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.mediaQuery');

var _foundationUtil2 = require('./foundation.util.motion');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ResponsiveToggle module.
 * @module foundation.responsiveToggle
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.motion
 */

var ResponsiveToggle = function (_Plugin) {
  _inherits(ResponsiveToggle, _Plugin);

  function ResponsiveToggle() {
    _classCallCheck(this, ResponsiveToggle);

    return _possibleConstructorReturn(this, (ResponsiveToggle.__proto__ || Object.getPrototypeOf(ResponsiveToggle)).apply(this, arguments));
  }

  _createClass(ResponsiveToggle, [{
    key: '_setup',

    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @name ResponsiveToggle
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = (0, _jquery2.default)(element);
      this.options = _jquery2.default.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);
      this.className = 'ResponsiveToggle'; // ie9 back compat

      this._init();
      this._events();
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil.MediaQuery._init();
      var targetID = this.$element.data('responsive-toggle');
      if (!targetID) {
        console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
      }

      this.$targetMenu = (0, _jquery2.default)('#' + targetID);
      this.$toggler = this.$element.find('[data-toggle]').filter(function () {
        var target = (0, _jquery2.default)(this).data('toggle');
        return target === targetID || target === "";
      });
      this.options = _jquery2.default.extend({}, this.options, this.$targetMenu.data());

      // If they were set, parse the animation classes
      if (this.options.animate) {
        var input = this.options.animate.split(' ');

        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      }

      this._update();
    }

    /**
     * Adds necessary event handlers for the tab bar to work.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;

      this._updateMqHandler = this._update.bind(this);

      (0, _jquery2.default)(window).on('changed.zf.mediaquery', this._updateMqHandler);

      this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
    }

    /**
     * Checks the current media query to determine if the tab bar should be visible or hidden.
     * @function
     * @private
     */

  }, {
    key: '_update',
    value: function _update() {
      // Mobile
      if (!_foundationUtil.MediaQuery.atLeast(this.options.hideFor)) {
        this.$element.show();
        this.$targetMenu.hide();
      }

      // Desktop
      else {
          this.$element.hide();
          this.$targetMenu.show();
        }
    }

    /**
     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
     * @function
     * @fires ResponsiveToggle#toggled
     */

  }, {
    key: 'toggleMenu',
    value: function toggleMenu() {
      var _this3 = this;

      if (!_foundationUtil.MediaQuery.atLeast(this.options.hideFor)) {
        /**
         * Fires when the element attached to the tab bar toggles.
         * @event ResponsiveToggle#toggled
         */
        if (this.options.animate) {
          if (this.$targetMenu.is(':hidden')) {
            _foundationUtil2.Motion.animateIn(this.$targetMenu, this.animationIn, function () {
              _this3.$element.trigger('toggled.zf.responsiveToggle');
              _this3.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');
            });
          } else {
            _foundationUtil2.Motion.animateOut(this.$targetMenu, this.animationOut, function () {
              _this3.$element.trigger('toggled.zf.responsiveToggle');
            });
          }
        } else {
          this.$targetMenu.toggle(0);
          this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');
          this.$element.trigger('toggled.zf.responsiveToggle');
        }
      }
    }
  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.off('.zf.responsiveToggle');
      this.$toggler.off('.zf.responsiveToggle');

      (0, _jquery2.default)(window).off('changed.zf.mediaquery', this._updateMqHandler);
    }
  }]);

  return ResponsiveToggle;
}(_foundation.Plugin);

ResponsiveToggle.defaults = {
  /**
   * The breakpoint after which the menu is always shown, and the tab bar is hidden.
   * @option
   * @type {string}
   * @default 'medium'
   */
  hideFor: 'medium',

  /**
   * To decide if the toggle should be animated or not.
   * @option
   * @type {boolean}
   * @default false
   */
  animate: false
};

exports.ResponsiveToggle = ResponsiveToggle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.responsiveToggle.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.mediaQuery":32,"./foundation.util.motion":33,"b55mWE":41,"buffer":40,"jquery":43}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reveal = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.mediaQuery');

var _foundationUtil3 = require('./foundation.util.motion');

var _foundation = require('./foundation.plugin');

var _foundationUtil4 = require('./foundation.util.triggers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Reveal module.
 * @module foundation.reveal
 * @requires foundation.util.keyboard
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.motion if using animations
 */

var Reveal = function (_Plugin) {
  _inherits(Reveal, _Plugin);

  function Reveal() {
    _classCallCheck(this, Reveal);

    return _possibleConstructorReturn(this, (Reveal.__proto__ || Object.getPrototypeOf(Reveal)).apply(this, arguments));
  }

  _createClass(Reveal, [{
    key: '_setup',

    /**
     * Creates a new instance of Reveal.
     * @class
     * @name Reveal
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Reveal.defaults, this.$element.data(), options);
      this.className = 'Reveal'; // ie9 back compat
      this._init();

      // Triggers init is idempotent, just need to make sure it is initialized
      _foundationUtil4.Triggers.init(_jquery2.default);

      _foundationUtil.Keyboard.register('Reveal', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil2.MediaQuery._init();
      this.id = this.$element.attr('id');
      this.isActive = false;
      this.cached = { mq: _foundationUtil2.MediaQuery.current };

      this.$anchor = (0, _jquery2.default)('[data-open="' + this.id + '"]').length ? (0, _jquery2.default)('[data-open="' + this.id + '"]') : (0, _jquery2.default)('[data-toggle="' + this.id + '"]');
      this.$anchor.attr({
        'aria-controls': this.id,
        'aria-haspopup': true,
        'tabindex': 0
      });

      if (this.options.fullScreen || this.$element.hasClass('full')) {
        this.options.fullScreen = true;
        this.options.overlay = false;
      }
      if (this.options.overlay && !this.$overlay) {
        this.$overlay = this._makeOverlay(this.id);
      }

      this.$element.attr({
        'role': 'dialog',
        'aria-hidden': true,
        'data-yeti-box': this.id,
        'data-resize': this.id
      });

      if (this.$overlay) {
        this.$element.detach().appendTo(this.$overlay);
      } else {
        this.$element.detach().appendTo((0, _jquery2.default)(this.options.appendTo));
        this.$element.addClass('without-overlay');
      }
      this._events();
      if (this.options.deepLink && window.location.hash === '#' + this.id) {
        (0, _jquery2.default)(window).one('load.zf.reveal', this.open.bind(this));
      }
    }

    /**
     * Creates an overlay div to display behind the modal.
     * @private
     */

  }, {
    key: '_makeOverlay',
    value: function _makeOverlay() {
      var additionalOverlayClasses = '';

      if (this.options.additionalOverlayClasses) {
        additionalOverlayClasses = ' ' + this.options.additionalOverlayClasses;
      }

      return (0, _jquery2.default)('<div></div>').addClass('reveal-overlay' + additionalOverlayClasses).appendTo(this.options.appendTo);
    }

    /**
     * Updates position of modal
     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
     * @private
     */

  }, {
    key: '_updatePosition',
    value: function _updatePosition() {
      var width = this.$element.outerWidth();
      var outerWidth = (0, _jquery2.default)(window).width();
      var height = this.$element.outerHeight();
      var outerHeight = (0, _jquery2.default)(window).height();
      var left,
          top = null;
      if (this.options.hOffset === 'auto') {
        left = parseInt((outerWidth - width) / 2, 10);
      } else {
        left = parseInt(this.options.hOffset, 10);
      }
      if (this.options.vOffset === 'auto') {
        if (height > outerHeight) {
          top = parseInt(Math.min(100, outerHeight / 10), 10);
        } else {
          top = parseInt((outerHeight - height) / 4, 10);
        }
      } else if (this.options.vOffset !== null) {
        top = parseInt(this.options.vOffset, 10);
      }

      if (top !== null) {
        this.$element.css({ top: top + 'px' });
      }

      // only worry about left if we don't have an overlay or we have a horizontal offset,
      // otherwise we're perfectly in the middle
      if (!this.$overlay || this.options.hOffset !== 'auto') {
        this.$element.css({ left: left + 'px' });
        this.$element.css({ margin: '0px' });
      }
    }

    /**
     * Adds event handlers for the modal.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this3 = this;

      var _this = this;

      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': function closeZfTrigger(event, $element) {
          if (event.target === _this.$element[0] || (0, _jquery2.default)(event.target).parents('[data-closable]')[0] === $element) {
            // only close reveal when it's explicitly called
            return _this3.close.apply(_this3);
          }
        },
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': function resizemeZfTrigger() {
          _this._updatePosition();
        }
      });

      if (this.options.closeOnClick && this.options.overlay) {
        this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || _jquery2.default.contains(_this.$element[0], e.target) || !_jquery2.default.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }
      if (this.options.deepLink) {
        (0, _jquery2.default)(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));
      }
    }

    /**
     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
     * @private
     */

  }, {
    key: '_handleState',
    value: function _handleState(e) {
      if (window.location.hash === '#' + this.id && !this.isActive) {
        this.open();
      } else {
        this.close();
      }
    }

    /**
    * Disables the scroll when Reveal is shown to prevent the background from shifting
    */

  }, {
    key: '_disableScroll',
    value: function _disableScroll() {
      if ((0, _jquery2.default)(document).height() > (0, _jquery2.default)(window).height()) {
        var scrollTop = (0, _jquery2.default)(window).scrollTop();
        (0, _jquery2.default)("html").css("top", -scrollTop);
      }
    }

    /**
    * Reenables the scroll when Reveal closes
    */

  }, {
    key: '_enableScroll',
    value: function _enableScroll() {
      if ((0, _jquery2.default)(document).height() > (0, _jquery2.default)(window).height()) {
        var scrollTop = parseInt((0, _jquery2.default)("html").css("top"));
        (0, _jquery2.default)("html").css("top", "");
        (0, _jquery2.default)(window).scrollTop(-scrollTop);
      }
    }

    /**
     * Opens the modal controlled by `this.$anchor`, and closes all others by default.
     * @function
     * @fires Reveal#closeme
     * @fires Reveal#open
     */

  }, {
    key: 'open',
    value: function open() {
      var _this4 = this;

      // either update or replace browser history
      if (this.options.deepLink) {
        var hash = '#' + this.id;

        if (window.history.pushState) {
          if (this.options.updateHistory) {
            window.history.pushState({}, '', hash);
          } else {
            window.history.replaceState({}, '', hash);
          }
        } else {
          window.location.hash = hash;
        }
      }

      this.isActive = true;

      // Make elements invisible, but remove display: none so we can get size and positioning
      this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
      if (this.options.overlay) {
        this.$overlay.css({ 'visibility': 'hidden' }).show();
      }

      this._updatePosition();

      this.$element.hide().css({ 'visibility': '' });

      if (this.$overlay) {
        this.$overlay.css({ 'visibility': '' }).hide();
        if (this.$element.hasClass('fast')) {
          this.$overlay.addClass('fast');
        } else if (this.$element.hasClass('slow')) {
          this.$overlay.addClass('slow');
        }
      }

      if (!this.options.multipleOpened) {
        /**
         * Fires immediately before the modal opens.
         * Closes any other modals that are currently open
         * @event Reveal#closeme
         */
        this.$element.trigger('closeme.zf.reveal', this.id);
      }

      this._disableScroll();

      var _this = this;

      function addRevealOpenClasses() {

        (0, _jquery2.default)('html').addClass('is-reveal-open');
      }

      // Motion UI method of reveal
      if (this.options.animationIn) {
        var afterAnimation = function afterAnimation() {
          _this.$element.attr({
            'aria-hidden': false,
            'tabindex': -1
          }).focus();
          addRevealOpenClasses();
          _foundationUtil.Keyboard.trapFocus(_this.$element);
        };

        if (this.options.overlay) {
          _foundationUtil3.Motion.animateIn(this.$overlay, 'fade-in');
        }
        _foundationUtil3.Motion.animateIn(this.$element, this.options.animationIn, function () {
          if (_this4.$element) {
            // protect against object having been removed
            _this4.focusableElements = _foundationUtil.Keyboard.findFocusable(_this4.$element);
            afterAnimation();
          }
        });
      }
      // jQuery method of reveal
      else {
          if (this.options.overlay) {
            this.$overlay.show(0);
          }
          this.$element.show(this.options.showDelay);
        }

      // handle accessibility
      this.$element.attr({
        'aria-hidden': false,
        'tabindex': -1
      }).focus();
      _foundationUtil.Keyboard.trapFocus(this.$element);

      addRevealOpenClasses();

      this._extraHandlers();

      /**
       * Fires when the modal has successfully opened.
       * @event Reveal#open
       */
      this.$element.trigger('open.zf.reveal');
    }

    /**
     * Adds extra event handlers for the body and window if necessary.
     * @private
     */

  }, {
    key: '_extraHandlers',
    value: function _extraHandlers() {
      var _this = this;
      if (!this.$element) {
        return;
      } // If we're in the middle of cleanup, don't freak out
      this.focusableElements = _foundationUtil.Keyboard.findFocusable(this.$element);

      if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
        (0, _jquery2.default)('body').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || _jquery2.default.contains(_this.$element[0], e.target) || !_jquery2.default.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }

      if (this.options.closeOnEsc) {
        (0, _jquery2.default)(window).on('keydown.zf.reveal', function (e) {
          _foundationUtil.Keyboard.handleKey(e, 'Reveal', {
            close: function close() {
              if (_this.options.closeOnEsc) {
                _this.close();
              }
            }
          });
        });
      }
    }

    /**
     * Closes the modal.
     * @function
     * @fires Reveal#closed
     */

  }, {
    key: 'close',
    value: function close() {
      if (!this.isActive || !this.$element.is(':visible')) {
        return false;
      }
      var _this = this;

      // Motion UI method of hiding
      if (this.options.animationOut) {
        if (this.options.overlay) {
          _foundationUtil3.Motion.animateOut(this.$overlay, 'fade-out');
        }

        _foundationUtil3.Motion.animateOut(this.$element, this.options.animationOut, finishUp);
      }
      // jQuery method of hiding
      else {
          this.$element.hide(this.options.hideDelay);

          if (this.options.overlay) {
            this.$overlay.hide(0, finishUp);
          } else {
            finishUp();
          }
        }

      // Conditionals to remove extra event listeners added on open
      if (this.options.closeOnEsc) {
        (0, _jquery2.default)(window).off('keydown.zf.reveal');
      }

      if (!this.options.overlay && this.options.closeOnClick) {
        (0, _jquery2.default)('body').off('click.zf.reveal');
      }

      this.$element.off('keydown.zf.reveal');

      function finishUp() {

        if ((0, _jquery2.default)('.reveal:visible').length === 0) {
          (0, _jquery2.default)('html').removeClass('is-reveal-open');
        }

        _foundationUtil.Keyboard.releaseFocus(_this.$element);

        _this.$element.attr('aria-hidden', true);

        _this._enableScroll();

        /**
        * Fires when the modal is done closing.
        * @event Reveal#closed
        */
        _this.$element.trigger('closed.zf.reveal');
      }

      /**
      * Resets the modal content
      * This prevents a running video to keep going in the background
      */
      if (this.options.resetOnClose) {
        this.$element.html(this.$element.html());
      }

      this.isActive = false;
      if (_this.options.deepLink) {
        if (window.history.replaceState) {
          window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));
        } else {
          window.location.hash = '';
        }
      }

      this.$anchor.focus();
    }

    /**
     * Toggles the open/closed state of a modal.
     * @function
     */

  }, {
    key: 'toggle',
    value: function toggle() {
      if (this.isActive) {
        this.close();
      } else {
        this.open();
      }
    }
  }, {
    key: '_destroy',


    /**
     * Destroys an instance of a modal.
     * @function
     */
    value: function _destroy() {
      if (this.options.overlay) {
        this.$element.appendTo((0, _jquery2.default)(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()
        this.$overlay.hide().off().remove();
      }
      this.$element.hide().off();
      this.$anchor.off('.zf');
      (0, _jquery2.default)(window).off('.zf.reveal:' + this.id);
    }
  }]);

  return Reveal;
}(_foundation.Plugin);

Reveal.defaults = {
  /**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @type {string}
   * @default ''
   */
  animationIn: '',
  /**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @type {string}
   * @default ''
   */
  animationOut: '',
  /**
   * Time, in ms, to delay the opening of a modal after a click if no animation used.
   * @option
   * @type {number}
   * @default 0
   */
  showDelay: 0,
  /**
   * Time, in ms, to delay the closing of a modal after a click if no animation used.
   * @option
   * @type {number}
   * @default 0
   */
  hideDelay: 0,
  /**
   * Allows a click on the body/overlay to close the modal.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnClick: true,
  /**
   * Allows the modal to close if the user presses the `ESCAPE` key.
   * @option
   * @type {boolean}
   * @default true
   */
  closeOnEsc: true,
  /**
   * If true, allows multiple modals to be displayed at once.
   * @option
   * @type {boolean}
   * @default false
   */
  multipleOpened: false,
  /**
   * Distance, in pixels, the modal should push down from the top of the screen.
   * @option
   * @type {number|string}
   * @default auto
   */
  vOffset: 'auto',
  /**
   * Distance, in pixels, the modal should push in from the side of the screen.
   * @option
   * @type {number|string}
   * @default auto
   */
  hOffset: 'auto',
  /**
   * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
   * @option
   * @type {boolean}
   * @default false
   */
  fullScreen: false,
  /**
   * Percentage of screen height the modal should push up from the bottom of the view.
   * @option
   * @type {number}
   * @default 10
   */
  btmOffsetPct: 10,
  /**
   * Allows the modal to generate an overlay div, which will cover the view when modal opens.
   * @option
   * @type {boolean}
   * @default true
   */
  overlay: true,
  /**
   * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
   * @option
   * @type {boolean}
   * @default false
   */
  resetOnClose: false,
  /**
   * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
   * @option
   * @type {boolean}
   * @default false
   */
  deepLink: false,
  /**
   * Update the browser history with the open modal
   * @option
   * @default false
   */
  updateHistory: false,
  /**
  * Allows the modal to append to custom div.
  * @option
  * @type {string}
  * @default "body"
  */
  appendTo: "body",
  /**
   * Allows adding additional class names to the reveal overlay.
   * @option
   * @type {string}
   * @default ''
   */
  additionalOverlayClasses: ''
};

exports.Reveal = Reveal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.reveal.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.keyboard":31,"./foundation.util.mediaQuery":32,"./foundation.util.motion":33,"./foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],22:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.motion');

var _foundationUtil3 = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

var _foundationUtil4 = require('./foundation.util.touch');

var _foundationUtil5 = require('./foundation.util.triggers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Slider module.
 * @module foundation.slider
 * @requires foundation.util.motion
 * @requires foundation.util.triggers
 * @requires foundation.util.keyboard
 * @requires foundation.util.touch
 */

var Slider = function (_Plugin) {
  _inherits(Slider, _Plugin);

  function Slider() {
    _classCallCheck(this, Slider);

    return _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).apply(this, arguments));
  }

  _createClass(Slider, [{
    key: '_setup',

    /**
     * Creates a new instance of a slider control.
     * @class
     * @name Slider
     * @param {jQuery} element - jQuery object to make into a slider control.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Slider.defaults, this.$element.data(), options);
      this.className = 'Slider'; // ie9 back compat

      // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.
      _foundationUtil4.Touch.init(_jquery2.default);
      _foundationUtil5.Triggers.init(_jquery2.default);

      this._init();

      _foundationUtil.Keyboard.register('Slider', {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease',
          'SHIFT_ARROW_RIGHT': 'increase_fast',
          'SHIFT_ARROW_UP': 'increase_fast',
          'SHIFT_ARROW_DOWN': 'decrease_fast',
          'SHIFT_ARROW_LEFT': 'decrease_fast',
          'HOME': 'min',
          'END': 'max'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease',
          'SHIFT_ARROW_LEFT': 'increase_fast',
          'SHIFT_ARROW_RIGHT': 'decrease_fast'
        }
      });
    }

    /**
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      this.inputs = this.$element.find('input');
      this.handles = this.$element.find('[data-slider-handle]');

      this.$handle = this.handles.eq(0);
      this.$input = this.inputs.length ? this.inputs.eq(0) : (0, _jquery2.default)('#' + this.$handle.attr('aria-controls'));
      this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

      var isDbl = false,
          _this = this;
      if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
        this.options.disabled = true;
        this.$element.addClass(this.options.disabledClass);
      }
      if (!this.inputs.length) {
        this.inputs = (0, _jquery2.default)().add(this.$input);
        this.options.binding = true;
      }

      this._setInitAttr(0);

      if (this.handles[1]) {
        this.options.doubleSided = true;
        this.$handle2 = this.handles.eq(1);
        this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : (0, _jquery2.default)('#' + this.$handle2.attr('aria-controls'));

        if (!this.inputs[1]) {
          this.inputs = this.inputs.add(this.$input2);
        }
        isDbl = true;

        // this.$handle.triggerHandler('click.zf.slider');
        this._setInitAttr(1);
      }

      // Set handle positions
      this.setHandles();

      this._events();
    }
  }, {
    key: 'setHandles',
    value: function setHandles() {
      var _this3 = this;

      if (this.handles[1]) {
        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {
          _this3._setHandlePos(_this3.$handle2, _this3.inputs.eq(1).val(), true);
        });
      } else {
        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);
      }
    }
  }, {
    key: '_reflow',
    value: function _reflow() {
      this.setHandles();
    }
    /**
    * @function
    * @private
    * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)
    */

  }, {
    key: '_pctOfBar',
    value: function _pctOfBar(value) {
      var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);

      switch (this.options.positionValueFunction) {
        case "pow":
          pctOfBar = this._logTransform(pctOfBar);
          break;
        case "log":
          pctOfBar = this._powTransform(pctOfBar);
          break;
      }

      return pctOfBar.toFixed(2);
    }

    /**
    * @function
    * @private
    * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value
    */

  }, {
    key: '_value',
    value: function _value(pctOfBar) {
      switch (this.options.positionValueFunction) {
        case "pow":
          pctOfBar = this._powTransform(pctOfBar);
          break;
        case "log":
          pctOfBar = this._logTransform(pctOfBar);
          break;
      }
      var value = (this.options.end - this.options.start) * pctOfBar + parseFloat(this.options.start);

      return value;
    }

    /**
    * @function
    * @private
    * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function
    */

  }, {
    key: '_logTransform',
    value: function _logTransform(value) {
      return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);
    }

    /**
    * @function
    * @private
    * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function
    */

  }, {
    key: '_powTransform',
    value: function _powTransform(value) {
      return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);
    }

    /**
     * Sets the position of the selected handle and fill bar.
     * @function
     * @private
     * @param {jQuery} $hndl - the selected handle to move.
     * @param {Number} location - floating point between the start and end values of the slider bar.
     * @param {Function} cb - callback function to fire on completion.
     * @fires Slider#moved
     * @fires Slider#changed
     */

  }, {
    key: '_setHandlePos',
    value: function _setHandlePos($hndl, location, noInvert, cb) {
      // don't move if the slider has been disabled since its initialization
      if (this.$element.hasClass(this.options.disabledClass)) {
        return;
      }
      //might need to alter that slightly for bars that will have odd number selections.
      location = parseFloat(location); //on input change events, convert string to number...grumble.

      // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
      if (location < this.options.start) {
        location = this.options.start;
      } else if (location > this.options.end) {
        location = this.options.end;
      }

      var isDbl = this.options.doubleSided;

      //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
      //for click and drag events, it's weird due to the scale(-1, 1) css property
      if (this.options.vertical && !noInvert) {
        location = this.options.end - location;
      }

      if (isDbl) {
        //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
        if (this.handles.index($hndl) === 0) {
          var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
          location = location >= h2Val ? h2Val - this.options.step : location;
        } else {
          var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
          location = location <= h1Val ? h1Val + this.options.step : location;
        }
      }

      var _this = this,
          vert = this.options.vertical,
          hOrW = vert ? 'height' : 'width',
          lOrT = vert ? 'top' : 'left',
          handleDim = $hndl[0].getBoundingClientRect()[hOrW],
          elemDim = this.$element[0].getBoundingClientRect()[hOrW],

      //percentage of bar min/max value based on click or drag point
      pctOfBar = this._pctOfBar(location),

      //number of actual pixels to shift the handle, based on the percentage obtained above
      pxToMove = (elemDim - handleDim) * pctOfBar,

      //percentage of bar to shift the handle
      movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);
      //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
      location = parseFloat(location.toFixed(this.options.decimal));
      // declare empty object for css adjustments, only used with 2 handled-sliders
      var css = {};

      this._setValues($hndl, location);

      // TODO update to calculate based on values set to respective inputs??
      if (isDbl) {
        var isLeftHndl = this.handles.index($hndl) === 0,

        //empty variable, will be used for min-height/width for fill bar
        dim,

        //percentage w/h of the handle compared to the slider bar
        handlePct = ~~(percent(handleDim, elemDim) * 100);
        //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
        if (isLeftHndl) {
          //left or top percentage value to apply to the fill bar.
          css[lOrT] = movement + '%';
          //calculate the new min-height/width for the fill bar.
          dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;
          //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
          //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
          if (cb && typeof cb === 'function') {
            cb();
          } //this is only needed for the initialization of 2 handled sliders
        } else {
          //just caching the value of the left/bottom handle's left/top property
          var handlePos = parseFloat(this.$handle[0].style[lOrT]);
          //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
          //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
          dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
        }
        // assign the min-height/width to our css object
        css['min-' + hOrW] = dim + '%';
      }

      this.$element.one('finished.zf.animate', function () {
        /**
         * Fires when the handle is done moving.
         * @event Slider#moved
         */
        _this.$element.trigger('moved.zf.slider', [$hndl]);
      });

      //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
      var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;

      (0, _foundationUtil2.Move)(moveTime, $hndl, function () {
        // adjusting the left/top property of the handle, based on the percentage calculated above
        // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,
        // fall back to next best guess.
        if (isNaN(movement)) {
          $hndl.css(lOrT, pctOfBar * 100 + '%');
        } else {
          $hndl.css(lOrT, movement + '%');
        }

        if (!_this.options.doubleSided) {
          //if single-handled, a simple method to expand the fill bar
          _this.$fill.css(hOrW, pctOfBar * 100 + '%');
        } else {
          //otherwise, use the css object we created above
          _this.$fill.css(css);
        }
      });

      /**
       * Fires when the value has not been change for a given time.
       * @event Slider#changed
       */
      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function () {
        _this.$element.trigger('changed.zf.slider', [$hndl]);
      }, _this.options.changedDelay);
    }

    /**
     * Sets the initial attribute for the slider element.
     * @function
     * @private
     * @param {Number} idx - index of the current handle/input to use.
     */

  }, {
    key: '_setInitAttr',
    value: function _setInitAttr(idx) {
      var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;
      var id = this.inputs.eq(idx).attr('id') || (0, _foundationUtil3.GetYoDigits)(6, 'slider');
      this.inputs.eq(idx).attr({
        'id': id,
        'max': this.options.end,
        'min': this.options.start,
        'step': this.options.step
      });
      this.inputs.eq(idx).val(initVal);
      this.handles.eq(idx).attr({
        'role': 'slider',
        'aria-controls': id,
        'aria-valuemax': this.options.end,
        'aria-valuemin': this.options.start,
        'aria-valuenow': initVal,
        'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
        'tabindex': 0
      });
    }

    /**
     * Sets the input and `aria-valuenow` values for the slider element.
     * @function
     * @private
     * @param {jQuery} $handle - the currently selected handle.
     * @param {Number} val - floating point of the new value.
     */

  }, {
    key: '_setValues',
    value: function _setValues($handle, val) {
      var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
      this.inputs.eq(idx).val(val);
      $handle.attr('aria-valuenow', val);
    }

    /**
     * Handles events on the slider element.
     * Calculates the new location of the current handle.
     * If there are two handles and the bar was clicked, it determines which handle to move.
     * @function
     * @private
     * @param {Object} e - the `event` object passed from the listener.
     * @param {jQuery} $handle - the current handle to calculate for, if selected.
     * @param {Number} val - floating point number for the new value of the slider.
     * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
     */

  }, {
    key: '_handleEvent',
    value: function _handleEvent(e, $handle, val) {
      var value, hasVal;
      if (!val) {
        //click or drag events
        e.preventDefault();
        var _this = this,
            vertical = this.options.vertical,
            param = vertical ? 'height' : 'width',
            direction = vertical ? 'top' : 'left',
            eventOffset = vertical ? e.pageY : e.pageX,
            halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
            barDim = this.$element[0].getBoundingClientRect()[param],
            windowScroll = vertical ? (0, _jquery2.default)(window).scrollTop() : (0, _jquery2.default)(window).scrollLeft();

        var elemOffset = this.$element.offset()[direction];

        // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
        // best way to guess this is simulated is if clientY == pageY
        if (e.clientY === e.pageY) {
          eventOffset = eventOffset + windowScroll;
        }
        var eventFromBar = eventOffset - elemOffset;
        var barXY;
        if (eventFromBar < 0) {
          barXY = 0;
        } else if (eventFromBar > barDim) {
          barXY = barDim;
        } else {
          barXY = eventFromBar;
        }
        var offsetPct = percent(barXY, barDim);

        value = this._value(offsetPct);

        // turn everything around for RTL, yay math!
        if ((0, _foundationUtil3.rtl)() && !this.options.vertical) {
          value = this.options.end - value;
        }

        value = _this._adjustValue(null, value);
        //boolean flag for the setHandlePos fn, specifically for vertical sliders
        hasVal = false;

        if (!$handle) {
          //figure out which handle it is, pass it to the next function.
          var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
              secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
          $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
        }
      } else {
        //change event on input
        value = this._adjustValue(null, val);
        hasVal = true;
      }

      this._setHandlePos($handle, value, hasVal);
    }

    /**
     * Adjustes value for handle in regard to step value. returns adjusted value
     * @function
     * @private
     * @param {jQuery} $handle - the selected handle.
     * @param {Number} value - value to adjust. used if $handle is falsy
     */

  }, {
    key: '_adjustValue',
    value: function _adjustValue($handle, value) {
      var val,
          step = this.options.step,
          div = parseFloat(step / 2),
          left,
          prev_val,
          next_val;
      if (!!$handle) {
        val = parseFloat($handle.attr('aria-valuenow'));
      } else {
        val = value;
      }
      left = val % step;
      prev_val = val - left;
      next_val = prev_val + step;
      if (left === 0) {
        return val;
      }
      val = val >= prev_val + div ? next_val : prev_val;
      return val;
    }

    /**
     * Adds event listeners to the slider elements.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      this._eventsForHandle(this.$handle);
      if (this.handles[1]) {
        this._eventsForHandle(this.$handle2);
      }
    }

    /**
     * Adds event listeners a particular handle
     * @function
     * @private
     * @param {jQuery} $handle - the current handle to apply listeners to.
     */

  }, {
    key: '_eventsForHandle',
    value: function _eventsForHandle($handle) {
      var _this = this,
          curHandle,
          timer;

      this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
        var idx = _this.inputs.index((0, _jquery2.default)(this));
        _this._handleEvent(e, _this.handles.eq(idx), (0, _jquery2.default)(this).val());
      });

      if (this.options.clickSelect) {
        this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
          if (_this.$element.data('dragging')) {
            return false;
          }

          if (!(0, _jquery2.default)(e.target).is('[data-slider-handle]')) {
            if (_this.options.doubleSided) {
              _this._handleEvent(e);
            } else {
              _this._handleEvent(e, _this.$handle);
            }
          }
        });
      }

      if (this.options.draggable) {
        this.handles.addTouch();

        var $body = (0, _jquery2.default)('body');
        $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
          $handle.addClass('is-dragging');
          _this.$fill.addClass('is-dragging'); //
          _this.$element.data('dragging', true);

          curHandle = (0, _jquery2.default)(e.currentTarget);

          $body.on('mousemove.zf.slider', function (e) {
            e.preventDefault();
            _this._handleEvent(e, curHandle);
          }).on('mouseup.zf.slider', function (e) {
            _this._handleEvent(e, curHandle);

            $handle.removeClass('is-dragging');
            _this.$fill.removeClass('is-dragging');
            _this.$element.data('dragging', false);

            $body.off('mousemove.zf.slider mouseup.zf.slider');
          });
        })
        // prevent events triggered by touch
        .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
          e.preventDefault();
        });
      }

      $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
        var _$handle = (0, _jquery2.default)(this),
            idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
            oldValue = parseFloat(_this.inputs.eq(idx).val()),
            newValue;

        // handle keyboard event with keyboard util
        _foundationUtil.Keyboard.handleKey(e, 'Slider', {
          decrease: function decrease() {
            newValue = oldValue - _this.options.step;
          },
          increase: function increase() {
            newValue = oldValue + _this.options.step;
          },
          decrease_fast: function decrease_fast() {
            newValue = oldValue - _this.options.step * 10;
          },
          increase_fast: function increase_fast() {
            newValue = oldValue + _this.options.step * 10;
          },
          min: function min() {
            newValue = _this.options.start;
          },
          max: function max() {
            newValue = _this.options.end;
          },
          handled: function handled() {
            // only set handle pos when event was handled specially
            e.preventDefault();
            _this._setHandlePos(_$handle, newValue, true);
          }
        });
        /*if (newValue) { // if pressed key has special function, update value
          e.preventDefault();
          _this._setHandlePos(_$handle, newValue);
        }*/
      });
    }

    /**
     * Destroys the slider plugin.
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.handles.off('.zf.slider');
      this.inputs.off('.zf.slider');
      this.$element.off('.zf.slider');

      clearTimeout(this.timeout);
    }
  }]);

  return Slider;
}(_foundation.Plugin);

Slider.defaults = {
  /**
   * Minimum value for the slider scale.
   * @option
   * @type {number}
   * @default 0
   */
  start: 0,
  /**
   * Maximum value for the slider scale.
   * @option
   * @type {number}
   * @default 100
   */
  end: 100,
  /**
   * Minimum value change per change event.
   * @option
   * @type {number}
   * @default 1
   */
  step: 1,
  /**
   * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
   * @option
   * @type {number}
   * @default 0
   */
  initialStart: 0,
  /**
   * Value at which the right handle/second input should be set to on initialization.
   * @option
   * @type {number}
   * @default 100
   */
  initialEnd: 100,
  /**
   * Allows the input to be located outside the container and visible. Set to by the JS
   * @option
   * @type {boolean}
   * @default false
   */
  binding: false,
  /**
   * Allows the user to click/tap on the slider bar to select a value.
   * @option
   * @type {boolean}
   * @default true
   */
  clickSelect: true,
  /**
   * Set to true and use the `vertical` class to change alignment to vertical.
   * @option
   * @type {boolean}
   * @default false
   */
  vertical: false,
  /**
   * Allows the user to drag the slider handle(s) to select a value.
   * @option
   * @type {boolean}
   * @default true
   */
  draggable: true,
  /**
   * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
   * @option
   * @type {boolean}
   * @default false
   */
  disabled: false,
  /**
   * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
   * @option
   * @type {boolean}
   * @default false
   */
  doubleSided: false,
  /**
   * Potential future feature.
   */
  // steps: 100,
  /**
   * Number of decimal places the plugin should go to for floating point precision.
   * @option
   * @type {number}
   * @default 2
   */
  decimal: 2,
  /**
   * Time delay for dragged elements.
   */
  // dragDelay: 0,
  /**
   * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
   * @option
   * @type {number}
   * @default 200
   */
  moveTime: 200, //update this if changing the transition time in the sass
  /**
   * Class applied to disabled sliders.
   * @option
   * @type {string}
   * @default 'disabled'
   */
  disabledClass: 'disabled',
  /**
   * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
   * @option
   * @type {boolean}
   * @default false
   */
  invertVertical: false,
  /**
   * Milliseconds before the `changed.zf-slider` event is triggered after value change.
   * @option
   * @type {number}
   * @default 500
   */
  changedDelay: 500,
  /**
  * Basevalue for non-linear sliders
  * @option
  * @type {number}
  * @default 5
  */
  nonLinearBase: 5,
  /**
  * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.
  * @option
  * @type {string}
  * @default 'linear'
  */
  positionValueFunction: 'linear'
};

function percent(frac, num) {
  return frac / num;
}
function absPosition($handle, dir, clickPos, param) {
  return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
}
function baseLog(base, value) {
  return Math.log(value) / Math.log(base);
}

exports.Slider = Slider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.slider.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.keyboard":31,"./foundation.util.motion":33,"./foundation.util.touch":36,"./foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],23:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SmoothScroll = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * SmoothScroll module.
 * @module foundation.smooth-scroll
 */
var SmoothScroll = function (_Plugin) {
    _inherits(SmoothScroll, _Plugin);

    function SmoothScroll() {
        _classCallCheck(this, SmoothScroll);

        return _possibleConstructorReturn(this, (SmoothScroll.__proto__ || Object.getPrototypeOf(SmoothScroll)).apply(this, arguments));
    }

    _createClass(SmoothScroll, [{
        key: '_setup',

        /**
         * Creates a new instance of SmoothScroll.
         * @class
         * @name SmoothScroll
         * @fires SmoothScroll#init
         * @param {Object} element - jQuery object to add the trigger to.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
            this.$element = element;
            this.options = _jquery2.default.extend({}, SmoothScroll.defaults, this.$element.data(), options);
            this.className = 'SmoothScroll'; // ie9 back compat

            this._init();
        }

        /**
         * Initialize the SmoothScroll plugin
         * @private
         */

    }, {
        key: '_init',
        value: function _init() {
            var id = this.$element[0].id || (0, _foundationUtil.GetYoDigits)(6, 'smooth-scroll');
            var _this = this;
            this.$element.attr({
                'id': id
            });

            this._events();
        }

        /**
         * Initializes events for SmoothScroll.
         * @private
         */

    }, {
        key: '_events',
        value: function _events() {
            var _this = this;

            // click handler function.
            var handleLinkClick = function handleLinkClick(e) {
                // exit function if the event source isn't coming from an anchor with href attribute starts with '#'
                if (!(0, _jquery2.default)(this).is('a[href^="#"]')) {
                    return false;
                }

                var arrival = this.getAttribute('href');

                _this._inTransition = true;

                SmoothScroll.scrollToLoc(arrival, _this.options, function () {
                    _this._inTransition = false;
                });

                e.preventDefault();
            };

            this.$element.on('click.zf.smoothScroll', handleLinkClick);
            this.$element.on('click.zf.smoothScroll', 'a[href^="#"]', handleLinkClick);
        }

        /**
         * Function to scroll to a given location on the page.
         * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'
         * @param {Object} options - The options to use.
         * @param {Function} callback - The callback function.
         * @static
         * @function
         */

    }], [{
        key: 'scrollToLoc',
        value: function scrollToLoc(loc) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SmoothScroll.defaults;
            var callback = arguments[2];

            // Do nothing if target does not exist to prevent errors
            if (!(0, _jquery2.default)(loc).length) {
                return false;
            }

            var scrollPos = Math.round((0, _jquery2.default)(loc).offset().top - options.threshold / 2 - options.offset);

            (0, _jquery2.default)('html, body').stop(true).animate({ scrollTop: scrollPos }, options.animationDuration, options.animationEasing, function () {
                if (callback && typeof callback == "function") {
                    callback();
                }
            });
        }
    }]);

    return SmoothScroll;
}(_foundation.Plugin);

/**
 * Default settings for plugin.
 */


SmoothScroll.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @type {number}
     * @default 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
     * @option
     * @type {string}
     * @default 'linear'
     * @see {@link https://api.jquery.com/animate|Jquery animate}
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @type {number}
     * @default 50
     */
    threshold: 50,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @type {number}
     * @default 0
     */
    offset: 0
};

exports.SmoothScroll = SmoothScroll;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.smoothScroll.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"b55mWE":41,"buffer":40,"jquery":43}],24:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sticky = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

var _foundationUtil2 = require('./foundation.util.mediaQuery');

var _foundation = require('./foundation.plugin');

var _foundationUtil3 = require('./foundation.util.triggers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Sticky module.
 * @module foundation.sticky
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 */

var Sticky = function (_Plugin) {
  _inherits(Sticky, _Plugin);

  function Sticky() {
    _classCallCheck(this, Sticky);

    return _possibleConstructorReturn(this, (Sticky.__proto__ || Object.getPrototypeOf(Sticky)).apply(this, arguments));
  }

  _createClass(Sticky, [{
    key: '_setup',

    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @name Sticky
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Sticky.defaults, this.$element.data(), options);
      this.className = 'Sticky'; // ie9 back compat

      // Triggers init is idempotent, just need to make sure it is initialized
      _foundationUtil3.Triggers.init(_jquery2.default);

      this._init();
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil2.MediaQuery._init();

      var $parent = this.$element.parent('[data-sticky-container]'),
          id = this.$element[0].id || (0, _foundationUtil.GetYoDigits)(6, 'sticky'),
          _this = this;

      if ($parent.length) {
        this.$container = $parent;
      } else {
        this.wasWrapped = true;
        this.$element.wrap(this.options.container);
        this.$container = this.$element.parent();
      }
      this.$container.addClass(this.options.containerClass);

      this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id, 'data-mutate': id });
      if (this.options.anchor !== '') {
        (0, _jquery2.default)('#' + _this.options.anchor).attr({ 'data-mutate': id });
      }

      this.scrollCount = this.options.checkEvery;
      this.isStuck = false;
      (0, _jquery2.default)(window).one('load.zf.sticky', function () {
        //We calculate the container height to have correct values for anchor points offset calculation.
        _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
        _this.$container.css('height', _this.containerHeight);
        _this.elemHeight = _this.containerHeight;
        if (_this.options.anchor !== '') {
          _this.$anchor = (0, _jquery2.default)('#' + _this.options.anchor);
        } else {
          _this._parsePoints();
        }

        _this._setSizes(function () {
          var scroll = window.pageYOffset;
          _this._calc(false, scroll);
          //Unstick the element will ensure that proper classes are set.
          if (!_this.isStuck) {
            _this._removeSticky(scroll >= _this.topPoint ? false : true);
          }
        });
        _this._events(id.split('-').reverse().join('-'));
      });
    }

    /**
     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
     * @function
     * @private
     */

  }, {
    key: '_parsePoints',
    value: function _parsePoints() {
      var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
          btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
          pts = [top, btm],
          breaks = {};
      for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
        var pt;
        if (typeof pts[i] === 'number') {
          pt = pts[i];
        } else {
          var place = pts[i].split(':'),
              anchor = (0, _jquery2.default)('#' + place[0]);

          pt = anchor.offset().top;
          if (place[1] && place[1].toLowerCase() === 'bottom') {
            pt += anchor[0].getBoundingClientRect().height;
          }
        }
        breaks[i] = pt;
      }

      this.points = breaks;
      return;
    }

    /**
     * Adds event handlers for the scrolling element.
     * @private
     * @param {String} id - pseudo-random id for unique scroll event listener.
     */

  }, {
    key: '_events',
    value: function _events(id) {
      var _this = this,
          scrollListener = this.scrollListener = 'scroll.zf.' + id;
      if (this.isOn) {
        return;
      }
      if (this.canStick) {
        this.isOn = true;
        (0, _jquery2.default)(window).off(scrollListener).on(scrollListener, function (e) {
          if (_this.scrollCount === 0) {
            _this.scrollCount = _this.options.checkEvery;
            _this._setSizes(function () {
              _this._calc(false, window.pageYOffset);
            });
          } else {
            _this.scrollCount--;
            _this._calc(false, window.pageYOffset);
          }
        });
      }

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
        _this._eventsHandler(id);
      });

      this.$element.on('mutateme.zf.trigger', function (e, el) {
        _this._eventsHandler(id);
      });

      if (this.$anchor) {
        this.$anchor.on('mutateme.zf.trigger', function (e, el) {
          _this._eventsHandler(id);
        });
      }
    }

    /**
     * Handler for events.
     * @private
     * @param {String} id - pseudo-random id for unique scroll event listener.
     */

  }, {
    key: '_eventsHandler',
    value: function _eventsHandler(id) {
      var _this = this,
          scrollListener = this.scrollListener = 'scroll.zf.' + id;

      _this._setSizes(function () {
        _this._calc(false);
        if (_this.canStick) {
          if (!_this.isOn) {
            _this._events(id);
          }
        } else if (_this.isOn) {
          _this._pauseListeners(scrollListener);
        }
      });
    }

    /**
     * Removes event handlers for scroll and change events on anchor.
     * @fires Sticky#pause
     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
     */

  }, {
    key: '_pauseListeners',
    value: function _pauseListeners(scrollListener) {
      this.isOn = false;
      (0, _jquery2.default)(window).off(scrollListener);

      /**
       * Fires when the plugin is paused due to resize event shrinking the view.
       * @event Sticky#pause
       * @private
       */
      this.$element.trigger('pause.zf.sticky');
    }

    /**
     * Called on every `scroll` event and on `_init`
     * fires functions based on booleans and cached values
     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
     */

  }, {
    key: '_calc',
    value: function _calc(checkSizes, scroll) {
      if (checkSizes) {
        this._setSizes();
      }

      if (!this.canStick) {
        if (this.isStuck) {
          this._removeSticky(true);
        }
        return false;
      }

      if (!scroll) {
        scroll = window.pageYOffset;
      }

      if (scroll >= this.topPoint) {
        if (scroll <= this.bottomPoint) {
          if (!this.isStuck) {
            this._setSticky();
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(false);
          }
        }
      } else {
        if (this.isStuck) {
          this._removeSticky(true);
        }
      }
    }

    /**
     * Causes the $element to become stuck.
     * Adds `position: fixed;`, and helper classes.
     * @fires Sticky#stuckto
     * @function
     * @private
     */

  }, {
    key: '_setSticky',
    value: function _setSticky() {
      var _this = this,
          stickTo = this.options.stickTo,
          mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
          notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
          css = {};

      css[mrgn] = this.options[mrgn] + 'em';
      css[stickTo] = 0;
      css[notStuckTo] = 'auto';
      this.isStuck = true;
      this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)
      /**
       * Fires when the $element has become `position: fixed;`
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
       * @event Sticky#stuckto
       */
      .trigger('sticky.zf.stuckto:' + stickTo);
      this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
        _this._setSizes();
      });
    }

    /**
     * Causes the $element to become unstuck.
     * Removes `position: fixed;`, and helper classes.
     * Adds other helper classes.
     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
     * @fires Sticky#unstuckfrom
     * @private
     */

  }, {
    key: '_removeSticky',
    value: function _removeSticky(isTop) {
      var stickTo = this.options.stickTo,
          stickToTop = stickTo === 'top',
          css = {},
          anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
          mrgn = stickToTop ? 'marginTop' : 'marginBottom',
          notStuckTo = stickToTop ? 'bottom' : 'top',
          topOrBottom = isTop ? 'top' : 'bottom';

      css[mrgn] = 0;

      css['bottom'] = 'auto';
      if (isTop) {
        css['top'] = 0;
      } else {
        css['top'] = anchorPt;
      }

      this.isStuck = false;
      this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)
      /**
       * Fires when the $element has become anchored.
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
       * @event Sticky#unstuckfrom
       */
      .trigger('sticky.zf.unstuckfrom:' + topOrBottom);
    }

    /**
     * Sets the $element and $container sizes for plugin.
     * Calls `_setBreakPoints`.
     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
     * @private
     */

  }, {
    key: '_setSizes',
    value: function _setSizes(cb) {
      this.canStick = _foundationUtil2.MediaQuery.is(this.options.stickyOn);
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        }
      }
      var _this = this,
          newElemWidth = this.$container[0].getBoundingClientRect().width,
          comp = window.getComputedStyle(this.$container[0]),
          pdngl = parseInt(comp['padding-left'], 10),
          pdngr = parseInt(comp['padding-right'], 10);

      if (this.$anchor && this.$anchor.length) {
        this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
      } else {
        this._parsePoints();
      }

      this.$element.css({
        'max-width': newElemWidth - pdngl - pdngr + 'px'
      });

      var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
      if (this.$element.css("display") == "none") {
        newContainerHeight = 0;
      }
      this.containerHeight = newContainerHeight;
      this.$container.css({
        height: newContainerHeight
      });
      this.elemHeight = newContainerHeight;

      if (!this.isStuck) {
        if (this.$element.hasClass('is-at-bottom')) {
          var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
          this.$element.css('top', anchorPt);
        }
      }

      this._setBreakPoints(newContainerHeight, function () {
        if (cb && typeof cb === 'function') {
          cb();
        }
      });
    }

    /**
     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
     * @param {Function} cb - optional callback function to be called on completion.
     * @private
     */

  }, {
    key: '_setBreakPoints',
    value: function _setBreakPoints(elemHeight, cb) {
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        } else {
          return false;
        }
      }
      var mTop = emCalc(this.options.marginTop),
          mBtm = emCalc(this.options.marginBottom),
          topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
          bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

      // topPoint = this.$anchor.offset().top || this.points[0],
      // bottomPoint = topPoint + this.anchorHeight || this.points[1],
      winHeight = window.innerHeight;

      if (this.options.stickTo === 'top') {
        topPoint -= mTop;
        bottomPoint -= elemHeight + mTop;
      } else if (this.options.stickTo === 'bottom') {
        topPoint -= winHeight - (elemHeight + mBtm);
        bottomPoint -= winHeight - mBtm;
      } else {
        //this would be the stickTo: both option... tricky
      }

      this.topPoint = topPoint;
      this.bottomPoint = bottomPoint;

      if (cb && typeof cb === 'function') {
        cb();
      }
    }

    /**
     * Destroys the current sticky element.
     * Resets the element to the top position first.
     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this._removeSticky(true);

      this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({
        height: '',
        top: '',
        bottom: '',
        'max-width': ''
      }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');
      if (this.$anchor && this.$anchor.length) {
        this.$anchor.off('change.zf.sticky');
      }
      (0, _jquery2.default)(window).off(this.scrollListener);

      if (this.wasWrapped) {
        this.$element.unwrap();
      } else {
        this.$container.removeClass(this.options.containerClass).css({
          height: ''
        });
      }
    }
  }]);

  return Sticky;
}(_foundation.Plugin);

Sticky.defaults = {
  /**
   * Customizable container template. Add your own classes for styling and sizing.
   * @option
   * @type {string}
   * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
   */
  container: '<div data-sticky-container></div>',
  /**
   * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
   * @option
   * @type {string}
   * @default 'top'
   */
  stickTo: 'top',
  /**
   * If anchored to a single element, the id of that element.
   * @option
   * @type {string}
   * @default ''
   */
  anchor: '',
  /**
   * If using more than one element as anchor points, the id of the top anchor.
   * @option
   * @type {string}
   * @default ''
   */
  topAnchor: '',
  /**
   * If using more than one element as anchor points, the id of the bottom anchor.
   * @option
   * @type {string}
   * @default ''
   */
  btmAnchor: '',
  /**
   * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
   * @option
   * @type {number}
   * @default 1
   */
  marginTop: 1,
  /**
   * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
   * @option
   * @type {number}
   * @default 1
   */
  marginBottom: 1,
  /**
   * Breakpoint string that is the minimum screen size an element should become sticky.
   * @option
   * @type {string}
   * @default 'medium'
   */
  stickyOn: 'medium',
  /**
   * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
   * @option
   * @type {string}
   * @default 'sticky'
   */
  stickyClass: 'sticky',
  /**
   * Class applied to sticky container. Foundation defaults to `sticky-container`.
   * @option
   * @type {string}
   * @default 'sticky-container'
   */
  containerClass: 'sticky-container',
  /**
   * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
   * @option
   * @type {number}
   * @default -1
   */
  checkEvery: -1
};

/**
 * Helper function to calculate em values
 * @param Number {em} - number of em's to calculate into pixels
 */
function emCalc(em) {
  return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
}

exports.Sticky = Sticky;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.sticky.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.core":29,"./foundation.util.mediaQuery":32,"./foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],25:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.keyboard');

var _foundationUtil2 = require('./foundation.util.imageLoader');

var _foundation = require('./foundation.plugin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Tabs module.
 * @module foundation.tabs
 * @requires foundation.util.keyboard
 * @requires foundation.util.imageLoader if tabs contain images
 */

var Tabs = function (_Plugin) {
  _inherits(Tabs, _Plugin);

  function Tabs() {
    _classCallCheck(this, Tabs);

    return _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));
  }

  _createClass(Tabs, [{
    key: '_setup',

    /**
     * Creates a new instance of tabs.
     * @class
     * @name Tabs
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Tabs.defaults, this.$element.data(), options);
      this.className = 'Tabs'; // ie9 back compat

      this._init();
      _foundationUtil.Keyboard.register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous'
        // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'
      });
    }

    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      var _this3 = this;

      var _this = this;

      this.$element.attr({ 'role': 'tablist' });
      this.$tabTitles = this.$element.find('.' + this.options.linkClass);
      this.$tabContent = (0, _jquery2.default)('[data-tabs-content="' + this.$element[0].id + '"]');

      this.$tabTitles.each(function () {
        var $elem = (0, _jquery2.default)(this),
            $link = $elem.find('a'),
            isActive = $elem.hasClass('' + _this.options.linkActiveClass),
            hash = $link.attr('data-tabs-target') || $link[0].hash.slice(1),
            linkId = $link[0].id ? $link[0].id : hash + '-label',
            $tabContent = (0, _jquery2.default)('#' + hash);

        $elem.attr({ 'role': 'presentation' });

        $link.attr({
          'role': 'tab',
          'aria-controls': hash,
          'aria-selected': isActive,
          'id': linkId,
          'tabindex': isActive ? '0' : '-1'
        });

        $tabContent.attr({
          'role': 'tabpanel',
          'aria-labelledby': linkId
        });

        if (!isActive) {
          $tabContent.attr('aria-hidden', 'true');
        }

        if (isActive && _this.options.autoFocus) {
          (0, _jquery2.default)(window).load(function () {
            (0, _jquery2.default)('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, function () {
              $link.focus();
            });
          });
        }
      });
      if (this.options.matchHeight) {
        var $images = this.$tabContent.find('img');

        if ($images.length) {
          (0, _foundationUtil2.onImagesLoaded)($images, this._setHeight.bind(this));
        } else {
          this._setHeight();
        }
      }

      //current context-bound function to open tabs on page load or history popstate
      this._checkDeepLink = function () {
        var anchor = window.location.hash;
        //need a hash and a relevant anchor in this tabset
        if (anchor.length) {
          var $link = _this3.$element.find('[href$="' + anchor + '"]');
          if ($link.length) {
            _this3.selectTab((0, _jquery2.default)(anchor), true);

            //roll up a little to show the titles
            if (_this3.options.deepLinkSmudge) {
              var offset = _this3.$element.offset();
              (0, _jquery2.default)('html, body').animate({ scrollTop: offset.top }, _this3.options.deepLinkSmudgeDelay);
            }

            /**
              * Fires when the zplugin has deeplinked at pageload
              * @event Tabs#deeplink
              */
            _this3.$element.trigger('deeplink.zf.tabs', [$link, (0, _jquery2.default)(anchor)]);
          }
        }
      };

      //use browser to open a tab, if it exists in this tabset
      if (this.options.deepLink) {
        this._checkDeepLink();
      }

      this._events();
    }

    /**
     * Adds event handlers for items within the tabs.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      this._addKeyHandler();
      this._addClickHandler();
      this._setHeightMqHandler = null;

      if (this.options.matchHeight) {
        this._setHeightMqHandler = this._setHeight.bind(this);

        (0, _jquery2.default)(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
      }

      if (this.options.deepLink) {
        (0, _jquery2.default)(window).on('popstate', this._checkDeepLink);
      }
    }

    /**
     * Adds click handlers for items within the tabs.
     * @private
     */

  }, {
    key: '_addClickHandler',
    value: function _addClickHandler() {
      var _this = this;

      this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {
        e.preventDefault();
        e.stopPropagation();
        _this._handleTabChange((0, _jquery2.default)(this));
      });
    }

    /**
     * Adds keyboard event handlers for items within the tabs.
     * @private
     */

  }, {
    key: '_addKeyHandler',
    value: function _addKeyHandler() {
      var _this = this;

      this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
        if (e.which === 9) return;

        var $element = (0, _jquery2.default)(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ((0, _jquery2.default)(this).is($element)) {
            if (_this.options.wrapOnKeys) {
              $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
              $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
            } else {
              $prevElement = $elements.eq(Math.max(0, i - 1));
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            }
            return;
          }
        });

        // handle keyboard event with keyboard util
        _foundationUtil.Keyboard.handleKey(e, 'Tabs', {
          open: function open() {
            $element.find('[role="tab"]').focus();
            _this._handleTabChange($element);
          },
          previous: function previous() {
            $prevElement.find('[role="tab"]').focus();
            _this._handleTabChange($prevElement);
          },
          next: function next() {
            $nextElement.find('[role="tab"]').focus();
            _this._handleTabChange($nextElement);
          },
          handled: function handled() {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      });
    }

    /**
     * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.
     * @param {jQuery} $target - Tab to open.
     * @param {boolean} historyHandled - browser has already handled a history update
     * @fires Tabs#change
     * @function
     */

  }, {
    key: '_handleTabChange',
    value: function _handleTabChange($target, historyHandled) {

      /**
       * Check for active class on target. Collapse if exists.
       */
      if ($target.hasClass('' + this.options.linkActiveClass)) {
        if (this.options.activeCollapse) {
          this._collapseTab($target);

          /**
           * Fires when the zplugin has successfully collapsed tabs.
           * @event Tabs#collapse
           */
          this.$element.trigger('collapse.zf.tabs', [$target]);
        }
        return;
      }

      var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),
          $tabLink = $target.find('[role="tab"]'),
          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),
          $targetContent = this.$tabContent.find('#' + hash);

      //close old tab
      this._collapseTab($oldTab);

      //open new tab
      this._openTab($target);

      //either replace or update browser history
      if (this.options.deepLink && !historyHandled) {
        var anchor = $target.find('a').attr('href');

        if (this.options.updateHistory) {
          history.pushState({}, '', anchor);
        } else {
          history.replaceState({}, '', anchor);
        }
      }

      /**
       * Fires when the plugin has successfully changed tabs.
       * @event Tabs#change
       */
      this.$element.trigger('change.zf.tabs', [$target, $targetContent]);

      //fire to children a mutation event
      $targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");
    }

    /**
     * Opens the tab `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to Open.
     * @function
     */

  }, {
    key: '_openTab',
    value: function _openTab($target) {
      var $tabLink = $target.find('[role="tab"]'),
          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),
          $targetContent = this.$tabContent.find('#' + hash);

      $target.addClass('' + this.options.linkActiveClass);

      $tabLink.attr({
        'aria-selected': 'true',
        'tabindex': '0'
      });

      $targetContent.addClass('' + this.options.panelActiveClass).removeAttr('aria-hidden');
    }

    /**
     * Collapses `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to Open.
     * @function
     */

  }, {
    key: '_collapseTab',
    value: function _collapseTab($target) {
      var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role="tab"]').attr({
        'aria-selected': 'false',
        'tabindex': -1
      });

      (0, _jquery2.default)('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'true' });
    }

    /**
     * Public method for selecting a content pane to display.
     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
     * @param {boolean} historyHandled - browser has already handled a history update
     * @function
     */

  }, {
    key: 'selectTab',
    value: function selectTab(elem, historyHandled) {
      var idStr;

      if ((typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) === 'object') {
        idStr = elem[0].id;
      } else {
        idStr = elem;
      }

      if (idStr.indexOf('#') < 0) {
        idStr = '#' + idStr;
      }

      var $target = this.$tabTitles.find('[href$="' + idStr + '"]').parent('.' + this.options.linkClass);

      this._handleTabChange($target, historyHandled);
    }
  }, {
    key: '_setHeight',

    /**
     * Sets the height of each panel to the height of the tallest panel.
     * If enabled in options, gets called on media query change.
     * If loading content via external source, can be called directly or with _reflow.
     * If enabled with `data-match-height="true"`, tabs sets to equal height
     * @function
     * @private
     */
    value: function _setHeight() {
      var max = 0,
          _this = this; // Lock down the `this` value for the root tabs object

      this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {

        var panel = (0, _jquery2.default)(this),
            isActive = panel.hasClass('' + _this.options.panelActiveClass); // get the options from the parent instead of trying to get them from the child

        if (!isActive) {
          panel.css({ 'visibility': 'hidden', 'display': 'block' });
        }

        var temp = this.getBoundingClientRect().height;

        if (!isActive) {
          panel.css({
            'visibility': '',
            'display': ''
          });
        }

        max = temp > max ? temp : max;
      }).css('height', max + 'px');
    }

    /**
     * Destroys an instance of an tabs.
     * @fires Tabs#destroyed
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();

      if (this.options.matchHeight) {
        if (this._setHeightMqHandler != null) {
          (0, _jquery2.default)(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
        }
      }

      if (this.options.deepLink) {
        (0, _jquery2.default)(window).off('popstate', this._checkDeepLink);
      }
    }
  }]);

  return Tabs;
}(_foundation.Plugin);

Tabs.defaults = {
  /**
   * Allows the window to scroll to content of pane specified by hash anchor
   * @option
   * @type {boolean}
   * @default false
   */
  deepLink: false,

  /**
   * Adjust the deep link scroll to make sure the top of the tab panel is visible
   * @option
   * @type {boolean}
   * @default false
   */
  deepLinkSmudge: false,

  /**
   * Animation time (ms) for the deep link adjustment
   * @option
   * @type {number}
   * @default 300
   */
  deepLinkSmudgeDelay: 300,

  /**
   * Update the browser history with the open tab
   * @option
   * @type {boolean}
   * @default false
   */
  updateHistory: false,

  /**
   * Allows the window to scroll to content of active pane on load if set to true.
   * Not recommended if more than one tab panel per page.
   * @option
   * @type {boolean}
   * @default false
   */
  autoFocus: false,

  /**
   * Allows keyboard input to 'wrap' around the tab links.
   * @option
   * @type {boolean}
   * @default true
   */
  wrapOnKeys: true,

  /**
   * Allows the tab content panes to match heights if set to true.
   * @option
   * @type {boolean}
   * @default false
   */
  matchHeight: false,

  /**
   * Allows active tabs to collapse when clicked.
   * @option
   * @type {boolean}
   * @default false
   */
  activeCollapse: false,

  /**
   * Class applied to `li`'s in tab link list.
   * @option
   * @type {string}
   * @default 'tabs-title'
   */
  linkClass: 'tabs-title',

  /**
   * Class applied to the active `li` in tab link list.
   * @option
   * @type {string}
   * @default 'is-active'
   */
  linkActiveClass: 'is-active',

  /**
   * Class applied to the content containers.
   * @option
   * @type {string}
   * @default 'tabs-panel'
   */
  panelClass: 'tabs-panel',

  /**
   * Class applied to the active content container.
   * @option
   * @type {string}
   * @default 'is-active'
   */
  panelActiveClass: 'is-active'
};

exports.Tabs = Tabs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.tabs.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.imageLoader":30,"./foundation.util.keyboard":31,"b55mWE":41,"buffer":40,"jquery":43}],26:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toggler = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.motion');

var _foundation = require('./foundation.plugin');

var _foundationUtil2 = require('./foundation.util.triggers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Toggler module.
 * @module foundation.toggler
 * @requires foundation.util.motion
 * @requires foundation.util.triggers
 */

var Toggler = function (_Plugin) {
  _inherits(Toggler, _Plugin);

  function Toggler() {
    _classCallCheck(this, Toggler);

    return _possibleConstructorReturn(this, (Toggler.__proto__ || Object.getPrototypeOf(Toggler)).apply(this, arguments));
  }

  _createClass(Toggler, [{
    key: '_setup',

    /**
     * Creates a new instance of Toggler.
     * @class
     * @name Toggler
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';
      this.className = 'Toggler'; // ie9 back compat

      // Triggers init is idempotent, just need to make sure it is initialized
      _foundationUtil2.Triggers.init(_jquery2.default);

      this._init();
      this._events();
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      var input;
      // Parse animation classes if they were set
      if (this.options.animate) {
        input = this.options.animate.split(' ');

        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      }
      // Otherwise, parse toggle class
      else {
          input = this.$element.data('toggler');
          // Allow for a . at the beginning of the string
          this.className = input[0] === '.' ? input.slice(1) : input;
        }

      // Add ARIA attributes to triggers
      var id = this.$element[0].id;
      (0, _jquery2.default)('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
      // If the target is hidden, add aria-hidden
      this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
    }

    /**
     * Initializes events for the toggle trigger.
     * @function
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
    }

    /**
     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
     * @function
     * @fires Toggler#on
     * @fires Toggler#off
     */

  }, {
    key: 'toggle',
    value: function toggle() {
      this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
    }
  }, {
    key: '_toggleClass',
    value: function _toggleClass() {
      this.$element.toggleClass(this.className);

      var isOn = this.$element.hasClass(this.className);
      if (isOn) {
        /**
         * Fires if the target element has the class after a toggle.
         * @event Toggler#on
         */
        this.$element.trigger('on.zf.toggler');
      } else {
        /**
         * Fires if the target element does not have the class after a toggle.
         * @event Toggler#off
         */
        this.$element.trigger('off.zf.toggler');
      }

      this._updateARIA(isOn);
      this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');
    }
  }, {
    key: '_toggleAnimate',
    value: function _toggleAnimate() {
      var _this = this;

      if (this.$element.is(':hidden')) {
        _foundationUtil.Motion.animateIn(this.$element, this.animationIn, function () {
          _this._updateARIA(true);
          this.trigger('on.zf.toggler');
          this.find('[data-mutate]').trigger('mutateme.zf.trigger');
        });
      } else {
        _foundationUtil.Motion.animateOut(this.$element, this.animationOut, function () {
          _this._updateARIA(false);
          this.trigger('off.zf.toggler');
          this.find('[data-mutate]').trigger('mutateme.zf.trigger');
        });
      }
    }
  }, {
    key: '_updateARIA',
    value: function _updateARIA(isOn) {
      this.$element.attr('aria-expanded', isOn ? true : false);
    }

    /**
     * Destroys the instance of Toggler on the element.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.off('.zf.toggler');
    }
  }]);

  return Toggler;
}(_foundation.Plugin);

Toggler.defaults = {
  /**
   * Tells the plugin if the element should animated when toggled.
   * @option
   * @type {boolean}
   * @default false
   */
  animate: false
};

exports.Toggler = Toggler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.toggler.js","/../../node_modules/foundation-sites/js")
},{"./foundation.plugin":16,"./foundation.util.motion":33,"./foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],27:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

var _foundationUtil2 = require('./foundation.util.mediaQuery');

var _foundationUtil3 = require('./foundation.util.triggers');

var _foundation = require('./foundation.positionable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Tooltip module.
 * @module foundation.tooltip
 * @requires foundation.util.box
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.triggers
 */

var Tooltip = function (_Positionable) {
  _inherits(Tooltip, _Positionable);

  function Tooltip() {
    _classCallCheck(this, Tooltip);

    return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));
  }

  _createClass(Tooltip, [{
    key: '_setup',

    /**
     * Creates a new instance of a Tooltip.
     * @class
     * @name Tooltip
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */
    value: function _setup(element, options) {
      this.$element = element;
      this.options = _jquery2.default.extend({}, Tooltip.defaults, this.$element.data(), options);
      this.className = 'Tooltip'; // ie9 back compat

      this.isActive = false;
      this.isClick = false;

      // Triggers init is idempotent, just need to make sure it is initialized
      _foundationUtil3.Triggers.init(_jquery2.default);

      this._init();
    }

    /**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */

  }, {
    key: '_init',
    value: function _init() {
      _foundationUtil2.MediaQuery._init();
      var elemId = this.$element.attr('aria-describedby') || (0, _foundationUtil.GetYoDigits)(6, 'tooltip');

      this.options.tipText = this.options.tipText || this.$element.attr('title');
      this.template = this.options.template ? (0, _jquery2.default)(this.options.template) : this._buildTemplate(elemId);

      if (this.options.allowHtml) {
        this.template.appendTo(document.body).html(this.options.tipText).hide();
      } else {
        this.template.appendTo(document.body).text(this.options.tipText).hide();
      }

      this.$element.attr({
        'title': '',
        'aria-describedby': elemId,
        'data-yeti-box': elemId,
        'data-toggle': elemId,
        'data-resize': elemId
      }).addClass(this.options.triggerClass);

      _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_init', this).call(this);
      this._events();
    }
  }, {
    key: '_getDefaultPosition',
    value: function _getDefaultPosition() {
      // handle legacy classnames
      var position = this.$element[0].className.match(/\b(top|left|right|bottom)\b/g);
      return position ? position[0] : 'top';
    }
  }, {
    key: '_getDefaultAlignment',
    value: function _getDefaultAlignment() {
      return 'center';
    }
  }, {
    key: '_getHOffset',
    value: function _getHOffset() {
      if (this.position === 'left' || this.position === 'right') {
        return this.options.hOffset + this.options.tooltipWidth;
      } else {
        return this.options.hOffset;
      }
    }
  }, {
    key: '_getVOffset',
    value: function _getVOffset() {
      if (this.position === 'top' || this.position === 'bottom') {
        return this.options.vOffset + this.options.tooltipHeight;
      } else {
        return this.options.vOffset;
      }
    }

    /**
     * builds the tooltip element, adds attributes, and returns the template.
     * @private
     */

  }, {
    key: '_buildTemplate',
    value: function _buildTemplate(id) {
      var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();
      var $template = (0, _jquery2.default)('<div></div>').addClass(templateClasses).attr({
        'role': 'tooltip',
        'aria-hidden': true,
        'data-is-active': false,
        'data-is-focus': false,
        'id': id
      });
      return $template;
    }

    /**
     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
     * if the tooltip is larger than the screen width, default to full width - any user selected margin
     * @private
     */

  }, {
    key: '_setPosition',
    value: function _setPosition() {
      _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_setPosition', this).call(this, this.$element, this.template);
    }

    /**
     * reveals the tooltip, and fires an event to close any other open tooltips on the page
     * @fires Tooltip#closeme
     * @fires Tooltip#show
     * @function
     */

  }, {
    key: 'show',
    value: function show() {
      if (this.options.showOn !== 'all' && !_foundationUtil2.MediaQuery.is(this.options.showOn)) {
        // console.error('The screen is too small to display this tooltip');
        return false;
      }

      var _this = this;
      this.template.css('visibility', 'hidden').show();
      this._setPosition();
      this.template.removeClass('top bottom left right').addClass(this.position);
      this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-' + this.alignment);

      /**
       * Fires to close all other open tooltips on the page
       * @event Closeme#tooltip
       */
      this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));

      this.template.attr({
        'data-is-active': true,
        'aria-hidden': false
      });
      _this.isActive = true;
      // console.log(this.template);
      this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {
        //maybe do stuff?
      });
      /**
       * Fires when the tooltip is shown
       * @event Tooltip#show
       */
      this.$element.trigger('show.zf.tooltip');
    }

    /**
     * Hides the current tooltip, and resets the positioning class if it was changed due to collision
     * @fires Tooltip#hide
     * @function
     */

  }, {
    key: 'hide',
    value: function hide() {
      // console.log('hiding', this.$element.data('yeti-box'));
      var _this = this;
      this.template.stop().attr({
        'aria-hidden': true,
        'data-is-active': false
      }).fadeOut(this.options.fadeOutDuration, function () {
        _this.isActive = false;
        _this.isClick = false;
      });
      /**
       * fires when the tooltip is hidden
       * @event Tooltip#hide
       */
      this.$element.trigger('hide.zf.tooltip');
    }

    /**
     * adds event listeners for the tooltip and its anchor
     * TODO combine some of the listeners like focus and mouseenter, etc.
     * @private
     */

  }, {
    key: '_events',
    value: function _events() {
      var _this = this;
      var $template = this.template;
      var isFocus = false;

      if (!this.options.disableHover) {

        this.$element.on('mouseenter.zf.tooltip', function (e) {
          if (!_this.isActive) {
            _this.timeout = setTimeout(function () {
              _this.show();
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.tooltip', function (e) {
          clearTimeout(_this.timeout);
          if (!isFocus || _this.isClick && !_this.options.clickOpen) {
            _this.hide();
          }
        });
      }

      if (this.options.clickOpen) {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          if (_this.isClick) {
            //_this.hide();
            // _this.isClick = false;
          } else {
            _this.isClick = true;
            if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
              _this.show();
            }
          }
        });
      } else {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          _this.isClick = true;
        });
      }

      if (!this.options.disableForTouch) {
        this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
          _this.isActive ? _this.hide() : _this.show();
        });
      }

      this.$element.on({
        // 'toggle.zf.trigger': this.toggle.bind(this),
        // 'close.zf.trigger': this.hide.bind(this)
        'close.zf.trigger': this.hide.bind(this)
      });

      this.$element.on('focus.zf.tooltip', function (e) {
        isFocus = true;
        if (_this.isClick) {
          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
          // a real focus, otherwise on hover and come back we get bad behavior
          if (!_this.options.clickOpen) {
            isFocus = false;
          }
          return false;
        } else {
          _this.show();
        }
      }).on('focusout.zf.tooltip', function (e) {
        isFocus = false;
        _this.isClick = false;
        _this.hide();
      }).on('resizeme.zf.trigger', function () {
        if (_this.isActive) {
          _this._setPosition();
        }
      });
    }

    /**
     * adds a toggle method, in addition to the static show() & hide() functions
     * @function
     */

  }, {
    key: 'toggle',
    value: function toggle() {
      if (this.isActive) {
        this.hide();
      } else {
        this.show();
      }
    }

    /**
     * Destroys an instance of tooltip, removes template element from the view.
     * @function
     */

  }, {
    key: '_destroy',
    value: function _destroy() {
      this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');

      this.template.remove();
    }
  }]);

  return Tooltip;
}(_foundation.Positionable);

Tooltip.defaults = {
  disableForTouch: false,
  /**
   * Time, in ms, before a tooltip should open on hover.
   * @option
   * @type {number}
   * @default 200
   */
  hoverDelay: 200,
  /**
   * Time, in ms, a tooltip should take to fade into view.
   * @option
   * @type {number}
   * @default 150
   */
  fadeInDuration: 150,
  /**
   * Time, in ms, a tooltip should take to fade out of view.
   * @option
   * @type {number}
   * @default 150
   */
  fadeOutDuration: 150,
  /**
   * Disables hover events from opening the tooltip if set to true
   * @option
   * @type {boolean}
   * @default false
   */
  disableHover: false,
  /**
   * Optional addtional classes to apply to the tooltip template on init.
   * @option
   * @type {string}
   * @default ''
   */
  templateClasses: '',
  /**
   * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
   * @option
   * @type {string}
   * @default 'tooltip'
   */
  tooltipClass: 'tooltip',
  /**
   * Class applied to the tooltip anchor element.
   * @option
   * @type {string}
   * @default 'has-tip'
   */
  triggerClass: 'has-tip',
  /**
   * Minimum breakpoint size at which to open the tooltip.
   * @option
   * @type {string}
   * @default 'small'
   */
  showOn: 'small',
  /**
   * Custom template to be used to generate markup for tooltip.
   * @option
   * @type {string}
   * @default ''
   */
  template: '',
  /**
   * Text displayed in the tooltip template on open.
   * @option
   * @type {string}
   * @default ''
   */
  tipText: '',
  touchCloseText: 'Tap to close.',
  /**
   * Allows the tooltip to remain open if triggered with a click or touch event.
   * @option
   * @type {boolean}
   * @default true
   */
  clickOpen: true,
  /**
   * DEPRECATED Additional positioning classes, set by the JS
   * @option
   * @type {string}
   * @default ''
   */
  positionClass: '',
  /**
   * Position of tooltip. Can be left, right, bottom, top, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  position: 'auto',
  /**
   * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.
   * @option
   * @type {string}
   * @default 'auto'
   */
  alignment: 'auto',
  /**
   * Allow overlap of container/window. If false, tooltip will first try to
   * position as defined by data-position and data-alignment, but reposition if
   * it would cause an overflow.  @option
   * @type {boolean}
   * @default false
   */
  allowOverlap: false,
  /**
   * Allow overlap of only the bottom of the container. This is the most common
   * behavior for dropdowns, allowing the dropdown to extend the bottom of the
   * screen but not otherwise influence or break out of the container.
   * Less common for tooltips.
   * @option
   * @type {boolean}
   * @default false
   */
  allowBottomOverlap: false,
  /**
   * Distance, in pixels, the template should push away from the anchor on the Y axis.
   * @option
   * @type {number}
   * @default 0
   */
  vOffset: 0,
  /**
   * Distance, in pixels, the template should push away from the anchor on the X axis
   * @option
   * @type {number}
   * @default 0
   */
  hOffset: 0,
  /**
   * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip
   * @option
   * @type {number}
   * @default 14
   */
  tooltipHeight: 14,
  /**
   * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip
   * @option
   * @type {number}
   * @default 12
   */
  tooltipWidth: 12,
  /**
  * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,
  * allowing HTML may open yourself up to XSS attacks.
  * @option
  * @type {boolean}
  * @default false
  */
  allowHtml: false
};

/**
 * TODO utilize resize event trigger
 */

exports.Tooltip = Tooltip;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.tooltip.js","/../../node_modules/foundation-sites/js")
},{"./foundation.positionable":17,"./foundation.util.core":29,"./foundation.util.mediaQuery":32,"./foundation.util.triggers":37,"b55mWE":41,"buffer":40,"jquery":43}],28:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Box = undefined;

var _foundationUtil = require("./foundation.util.core");

var Box = {
  ImNotTouchingYou: ImNotTouchingYou,
  OverlapArea: OverlapArea,
  GetDimensions: GetDimensions,
  GetOffsets: GetOffsets,
  GetExplicitOffsets: GetExplicitOffsets

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
};function ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {
  return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;
};

function OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {
  var eleDims = GetDimensions(element),
      topOver,
      bottomOver,
      leftOver,
      rightOver;
  if (parent) {
    var parDims = GetDimensions(parent);

    bottomOver = parDims.height + parDims.offset.top - (eleDims.offset.top + eleDims.height);
    topOver = eleDims.offset.top - parDims.offset.top;
    leftOver = eleDims.offset.left - parDims.offset.left;
    rightOver = parDims.width + parDims.offset.left - (eleDims.offset.left + eleDims.width);
  } else {
    bottomOver = eleDims.windowDims.height + eleDims.windowDims.offset.top - (eleDims.offset.top + eleDims.height);
    topOver = eleDims.offset.top - eleDims.windowDims.offset.top;
    leftOver = eleDims.offset.left - eleDims.windowDims.offset.left;
    rightOver = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);
  }

  bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);
  topOver = Math.min(topOver, 0);
  leftOver = Math.min(leftOver, 0);
  rightOver = Math.min(rightOver, 0);

  if (lrOnly) {
    return leftOver + rightOver;
  }
  if (tbOnly) {
    return topOver + bottomOver;
  }

  // use sum of squares b/c we care about overlap area.
  return Math.sqrt(topOver * topOver + bottomOver * bottomOver + leftOver * leftOver + rightOver * rightOver);
}

/**
 * Uses native methods to return an object of dimension values.
 * @function
 * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
 * @returns {Object} - nested object of integer pixel values
 * TODO - if element is window, return only those values.
 */
function GetDimensions(elem) {
  elem = elem.length ? elem[0] : elem;

  if (elem === window || elem === document) {
    throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
  }

  var rect = elem.getBoundingClientRect(),
      parRect = elem.parentNode.getBoundingClientRect(),
      winRect = document.body.getBoundingClientRect(),
      winY = window.pageYOffset,
      winX = window.pageXOffset;

  return {
    width: rect.width,
    height: rect.height,
    offset: {
      top: rect.top + winY,
      left: rect.left + winX
    },
    parentDims: {
      width: parRect.width,
      height: parRect.height,
      offset: {
        top: parRect.top + winY,
        left: parRect.left + winX
      }
    },
    windowDims: {
      width: winRect.width,
      height: winRect.height,
      offset: {
        top: winY,
        left: winX
      }
    }
  };
}

/**
 * Returns an object of top and left integer pixel values for dynamically rendered elements,
 * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where
 * you don't know alignment, but generally from
 * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.
 * @function
 * @param {jQuery} element - jQuery object for the element being positioned.
 * @param {jQuery} anchor - jQuery object for the element's anchor point.
 * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
 * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
 * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
 * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
 * TODO alter/rewrite to work with `em` values as well/instead of pixels
 */
function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
  console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5");
  switch (position) {
    case 'top':
      return (0, _foundationUtil.rtl)() ? GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);
    case 'bottom':
      return (0, _foundationUtil.rtl)() ? GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);
    case 'center top':
      return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);
    case 'center bottom':
      return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);
    case 'center left':
      return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);
    case 'center right':
      return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);
    case 'left bottom':
      return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);
    case 'right bottom':
      return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);
    // Backwards compatibility... this along with the reveal and reveal full
    // classes are the only ones that didn't reference anchor
    case 'center':
      return {
        left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2 + hOffset,
        top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - ($eleDims.height / 2 + vOffset)
      };
    case 'reveal':
      return {
        left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,
        top: $eleDims.windowDims.offset.top + vOffset
      };
    case 'reveal full':
      return {
        left: $eleDims.windowDims.offset.left,
        top: $eleDims.windowDims.offset.top
      };
      break;
    default:
      return {
        left: (0, _foundationUtil.rtl)() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset : $anchorDims.offset.left + hOffset,
        top: $anchorDims.offset.top + $anchorDims.height + vOffset
      };

  }
}

function GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {
  var $eleDims = GetDimensions(element),
      $anchorDims = anchor ? GetDimensions(anchor) : null;

  var topVal, leftVal;

  // set position related attribute

  switch (position) {
    case 'top':
      topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);
      break;
    case 'bottom':
      topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;
      break;
    case 'left':
      leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);
      break;
    case 'right':
      leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;
      break;
  }

  // set alignment related attribute
  switch (position) {
    case 'top':
    case 'bottom':
      switch (alignment) {
        case 'left':
          leftVal = $anchorDims.offset.left + hOffset;
          break;
        case 'right':
          leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;
          break;
        case 'center':
          leftVal = isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2 + hOffset;
          break;
      }
      break;
    case 'right':
    case 'left':
      switch (alignment) {
        case 'bottom':
          topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;
          break;
        case 'top':
          topVal = $anchorDims.offset.top + vOffset;
          break;
        case 'center':
          topVal = $anchorDims.offset.top + vOffset + $anchorDims.height / 2 - $eleDims.height / 2;
          break;
      }
      break;
  }
  return { top: topVal, left: leftVal };
}

exports.Box = Box;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.box.js","/../../node_modules/foundation-sites/js")
},{"./foundation.util.core":29,"b55mWE":41,"buffer":40}],29:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transitionend = exports.GetYoDigits = exports.rtl = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Core Foundation Utilities, utilized in a number of places.

/**
 * Returns a boolean for RTL support
 */
function rtl() {
  return (0, _jquery2.default)('html').attr('dir') === 'rtl';
}

/**
 * returns a random base-36 uid with namespacing
 * @function
 * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
 * @param {String} namespace - name of plugin to be incorporated in uid, optional.
 * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
 * @returns {String} - unique id
 */
function GetYoDigits(length, namespace) {
  length = length || 6;
  return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
}

function transitionend($elem) {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  };
  var elem = document.createElement('div'),
      end;

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      end = transitions[t];
    }
  }
  if (end) {
    return end;
  } else {
    end = setTimeout(function () {
      $elem.triggerHandler('transitionend', [$elem]);
    }, 1);
    return 'transitionend';
  }
}

exports.rtl = rtl;
exports.GetYoDigits = GetYoDigits;
exports.transitionend = transitionend;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24udXRpbC5jb3JlLmpzIl0sIm5hbWVzIjpbInJ0bCIsImF0dHIiLCJHZXRZb0RpZ2l0cyIsImxlbmd0aCIsIm5hbWVzcGFjZSIsIk1hdGgiLCJyb3VuZCIsInBvdyIsInJhbmRvbSIsInRvU3RyaW5nIiwic2xpY2UiLCJ0cmFuc2l0aW9uZW5kIiwiJGVsZW0iLCJ0cmFuc2l0aW9ucyIsImVsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlbmQiLCJ0Iiwic3R5bGUiLCJzZXRUaW1lb3V0IiwidHJpZ2dlckhhbmRsZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUE7Ozs7OztBQUVBOztBQUVFOzs7QUFHRixTQUFTQSxHQUFULEdBQWU7QUFDYixTQUFPLHNCQUFFLE1BQUYsRUFBVUMsSUFBVixDQUFlLEtBQWYsTUFBMEIsS0FBakM7QUFDRDs7QUFFRDs7Ozs7Ozs7QUFRQSxTQUFTQyxXQUFULENBQXFCQyxNQUFyQixFQUE2QkMsU0FBN0IsRUFBdUM7QUFDckNELFdBQVNBLFVBQVUsQ0FBbkI7QUFDQSxTQUFPRSxLQUFLQyxLQUFMLENBQVlELEtBQUtFLEdBQUwsQ0FBUyxFQUFULEVBQWFKLFNBQVMsQ0FBdEIsSUFBMkJFLEtBQUtHLE1BQUwsS0FBZ0JILEtBQUtFLEdBQUwsQ0FBUyxFQUFULEVBQWFKLE1BQWIsQ0FBdkQsRUFBOEVNLFFBQTlFLENBQXVGLEVBQXZGLEVBQTJGQyxLQUEzRixDQUFpRyxDQUFqRyxLQUF1R04sa0JBQWdCQSxTQUFoQixHQUE4QixFQUFySSxDQUFQO0FBQ0Q7O0FBRUQsU0FBU08sYUFBVCxDQUF1QkMsS0FBdkIsRUFBNkI7QUFDM0IsTUFBSUMsY0FBYztBQUNoQixrQkFBYyxlQURFO0FBRWhCLHdCQUFvQixxQkFGSjtBQUdoQixxQkFBaUIsZUFIRDtBQUloQixtQkFBZTtBQUpDLEdBQWxCO0FBTUEsTUFBSUMsT0FBT0MsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFYO0FBQUEsTUFDSUMsR0FESjs7QUFHQSxPQUFLLElBQUlDLENBQVQsSUFBY0wsV0FBZCxFQUEwQjtBQUN4QixRQUFJLE9BQU9DLEtBQUtLLEtBQUwsQ0FBV0QsQ0FBWCxDQUFQLEtBQXlCLFdBQTdCLEVBQXlDO0FBQ3ZDRCxZQUFNSixZQUFZSyxDQUFaLENBQU47QUFDRDtBQUNGO0FBQ0QsTUFBR0QsR0FBSCxFQUFPO0FBQ0wsV0FBT0EsR0FBUDtBQUNELEdBRkQsTUFFSztBQUNIQSxVQUFNRyxXQUFXLFlBQVU7QUFDekJSLFlBQU1TLGNBQU4sQ0FBcUIsZUFBckIsRUFBc0MsQ0FBQ1QsS0FBRCxDQUF0QztBQUNELEtBRkssRUFFSCxDQUZHLENBQU47QUFHQSxXQUFPLGVBQVA7QUFDRDtBQUNGOztRQUVPWixHLEdBQUFBLEc7UUFBS0UsVyxHQUFBQSxXO1FBQWFTLGEsR0FBQUEsYSIsImZpbGUiOiJmb3VuZGF0aW9uLnV0aWwuY29yZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG4vLyBDb3JlIEZvdW5kYXRpb24gVXRpbGl0aWVzLCB1dGlsaXplZCBpbiBhIG51bWJlciBvZiBwbGFjZXMuXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBib29sZWFuIGZvciBSVEwgc3VwcG9ydFxuICAgKi9cbmZ1bmN0aW9uIHJ0bCgpIHtcbiAgcmV0dXJuICQoJ2h0bWwnKS5hdHRyKCdkaXInKSA9PT0gJ3J0bCc7XG59XG5cbi8qKlxuICogcmV0dXJucyBhIHJhbmRvbSBiYXNlLTM2IHVpZCB3aXRoIG5hbWVzcGFjaW5nXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggLSBudW1iZXIgb2YgcmFuZG9tIGJhc2UtMzYgZGlnaXRzIGRlc2lyZWQuIEluY3JlYXNlIGZvciBtb3JlIHJhbmRvbSBzdHJpbmdzLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIG5hbWUgb2YgcGx1Z2luIHRvIGJlIGluY29ycG9yYXRlZCBpbiB1aWQsIG9wdGlvbmFsLlxuICogQGRlZmF1bHQge1N0cmluZ30gJycgLSBpZiBubyBwbHVnaW4gbmFtZSBpcyBwcm92aWRlZCwgbm90aGluZyBpcyBhcHBlbmRlZCB0byB0aGUgdWlkLlxuICogQHJldHVybnMge1N0cmluZ30gLSB1bmlxdWUgaWRcbiAqL1xuZnVuY3Rpb24gR2V0WW9EaWdpdHMobGVuZ3RoLCBuYW1lc3BhY2Upe1xuICBsZW5ndGggPSBsZW5ndGggfHwgNjtcbiAgcmV0dXJuIE1hdGgucm91bmQoKE1hdGgucG93KDM2LCBsZW5ndGggKyAxKSAtIE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygzNiwgbGVuZ3RoKSkpLnRvU3RyaW5nKDM2KS5zbGljZSgxKSArIChuYW1lc3BhY2UgPyBgLSR7bmFtZXNwYWNlfWAgOiAnJyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25lbmQoJGVsZW0pe1xuICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgJ3RyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJ09UcmFuc2l0aW9uJzogJ290cmFuc2l0aW9uZW5kJ1xuICB9O1xuICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgZW5kO1xuXG4gIGZvciAodmFyIHQgaW4gdHJhbnNpdGlvbnMpe1xuICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgZW5kID0gdHJhbnNpdGlvbnNbdF07XG4gICAgfVxuICB9XG4gIGlmKGVuZCl7XG4gICAgcmV0dXJuIGVuZDtcbiAgfWVsc2V7XG4gICAgZW5kID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgJGVsZW0udHJpZ2dlckhhbmRsZXIoJ3RyYW5zaXRpb25lbmQnLCBbJGVsZW1dKTtcbiAgICB9LCAxKTtcbiAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuICB9XG59XG5cbmV4cG9ydCB7cnRsLCBHZXRZb0RpZ2l0cywgdHJhbnNpdGlvbmVuZH07XG4iXX0=
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.core.js","/../../node_modules/foundation-sites/js")
},{"b55mWE":41,"buffer":40,"jquery":43}],30:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onImagesLoaded = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runs a callback function when images are fully loaded.
 * @param {Object} images - Image(s) to check if loaded.
 * @param {Func} callback - Function to execute when image is fully loaded.
 */
function onImagesLoaded(images, callback) {
  var self = this,
      unloaded = images.length;

  if (unloaded === 0) {
    callback();
  }

  images.each(function () {
    // Check if image is loaded
    if (this.complete && this.naturalWidth !== undefined) {
      singleImageLoaded();
    } else {
      // If the above check failed, simulate loading on detached element.
      var image = new Image();
      // Still count image as loaded if it finalizes with an error.
      var events = "load.zf.images error.zf.images";
      (0, _jquery2.default)(image).one(events, function me(event) {
        // Unbind the event listeners. We're using 'one' but only one of the two events will have fired.
        (0, _jquery2.default)(this).off(events, me);
        singleImageLoaded();
      });
      image.src = (0, _jquery2.default)(this).attr('src');
    }
  });

  function singleImageLoaded() {
    unloaded--;
    if (unloaded === 0) {
      callback();
    }
  }
}

exports.onImagesLoaded = onImagesLoaded;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24udXRpbC5pbWFnZUxvYWRlci5qcyJdLCJuYW1lcyI6WyJvbkltYWdlc0xvYWRlZCIsImltYWdlcyIsImNhbGxiYWNrIiwic2VsZiIsInVubG9hZGVkIiwibGVuZ3RoIiwiZWFjaCIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwidW5kZWZpbmVkIiwic2luZ2xlSW1hZ2VMb2FkZWQiLCJpbWFnZSIsIkltYWdlIiwiZXZlbnRzIiwib25lIiwibWUiLCJldmVudCIsIm9mZiIsInNyYyIsImF0dHIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUE7Ozs7OztBQUVBOzs7OztBQUtBLFNBQVNBLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDQyxRQUFoQyxFQUF5QztBQUN2QyxNQUFJQyxPQUFPLElBQVg7QUFBQSxNQUNJQyxXQUFXSCxPQUFPSSxNQUR0Qjs7QUFHQSxNQUFJRCxhQUFhLENBQWpCLEVBQW9CO0FBQ2xCRjtBQUNEOztBQUVERCxTQUFPSyxJQUFQLENBQVksWUFBVTtBQUNwQjtBQUNBLFFBQUksS0FBS0MsUUFBTCxJQUFpQixLQUFLQyxZQUFMLEtBQXNCQyxTQUEzQyxFQUFzRDtBQUNwREM7QUFDRCxLQUZELE1BR0s7QUFDSDtBQUNBLFVBQUlDLFFBQVEsSUFBSUMsS0FBSixFQUFaO0FBQ0E7QUFDQSxVQUFJQyxTQUFTLGdDQUFiO0FBQ0EsNEJBQUVGLEtBQUYsRUFBU0csR0FBVCxDQUFhRCxNQUFiLEVBQXFCLFNBQVNFLEVBQVQsQ0FBWUMsS0FBWixFQUFrQjtBQUNyQztBQUNBLDhCQUFFLElBQUYsRUFBUUMsR0FBUixDQUFZSixNQUFaLEVBQW9CRSxFQUFwQjtBQUNBTDtBQUNELE9BSkQ7QUFLQUMsWUFBTU8sR0FBTixHQUFZLHNCQUFFLElBQUYsRUFBUUMsSUFBUixDQUFhLEtBQWIsQ0FBWjtBQUNEO0FBQ0YsR0FqQkQ7O0FBbUJBLFdBQVNULGlCQUFULEdBQTZCO0FBQzNCTjtBQUNBLFFBQUlBLGFBQWEsQ0FBakIsRUFBb0I7QUFDbEJGO0FBQ0Q7QUFDRjtBQUNGOztRQUVRRixjLEdBQUFBLGMiLCJmaWxlIjoiZm91bmRhdGlvbi51dGlsLmltYWdlTG9hZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlcyAtIEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5mdW5jdGlvbiBvbkltYWdlc0xvYWRlZChpbWFnZXMsIGNhbGxiYWNrKXtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgdW5sb2FkZWQgPSBpbWFnZXMubGVuZ3RoO1xuXG4gIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBpbWFnZXMuZWFjaChmdW5jdGlvbigpe1xuICAgIC8vIENoZWNrIGlmIGltYWdlIGlzIGxvYWRlZFxuICAgIGlmICh0aGlzLmNvbXBsZXRlICYmIHRoaXMubmF0dXJhbFdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIGFib3ZlIGNoZWNrIGZhaWxlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxuICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAvLyBTdGlsbCBjb3VudCBpbWFnZSBhcyBsb2FkZWQgaWYgaXQgZmluYWxpemVzIHdpdGggYW4gZXJyb3IuXG4gICAgICB2YXIgZXZlbnRzID0gXCJsb2FkLnpmLmltYWdlcyBlcnJvci56Zi5pbWFnZXNcIjtcbiAgICAgICQoaW1hZ2UpLm9uZShldmVudHMsIGZ1bmN0aW9uIG1lKGV2ZW50KXtcbiAgICAgICAgLy8gVW5iaW5kIHRoZSBldmVudCBsaXN0ZW5lcnMuIFdlJ3JlIHVzaW5nICdvbmUnIGJ1dCBvbmx5IG9uZSBvZiB0aGUgdHdvIGV2ZW50cyB3aWxsIGhhdmUgZmlyZWQuXG4gICAgICAgICQodGhpcykub2ZmKGV2ZW50cywgbWUpO1xuICAgICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgICAgfSk7XG4gICAgICBpbWFnZS5zcmMgPSAkKHRoaXMpLmF0dHIoJ3NyYycpO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IG9uSW1hZ2VzTG9hZGVkIH07XG4iXX0=
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.imageLoader.js","/../../node_modules/foundation-sites/js")
},{"b55mWE":41,"buffer":40,"jquery":43}],31:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyboard = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyCodes = {
  9: 'TAB',
  13: 'ENTER',
  27: 'ESCAPE',
  32: 'SPACE',
  35: 'END',
  36: 'HOME',
  37: 'ARROW_LEFT',
  38: 'ARROW_UP',
  39: 'ARROW_RIGHT',
  40: 'ARROW_DOWN'
};

var commands = {};

// Functions pulled out to be referenceable from internals
function findFocusable($element) {
  if (!$element) {
    return false;
  }
  return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
    if (!(0, _jquery2.default)(this).is(':visible') || (0, _jquery2.default)(this).attr('tabindex') < 0) {
      return false;
    } //only have visible elements and those that have a tabindex greater or equal 0
    return true;
  });
}

function parseKey(event) {
  var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();

  // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
  key = key.replace(/\W+/, '');

  if (event.shiftKey) key = 'SHIFT_' + key;
  if (event.ctrlKey) key = 'CTRL_' + key;
  if (event.altKey) key = 'ALT_' + key;

  // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
  key = key.replace(/_$/, '');

  return key;
}

var Keyboard = {
  keys: getKeyCodes(keyCodes),

  /**
   * Parses the (keyboard) event and returns a String that represents its key
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   * @param {Event} event - the event generated by the event handler
   * @return String key - String that represents the key pressed
   */
  parseKey: parseKey,

  /**
   * Handles the given (keyboard) event
   * @param {Event} event - the event generated by the event handler
   * @param {String} component - Foundation component's name, e.g. Slider or Reveal
   * @param {Objects} functions - collection of functions that are to be executed
   */
  handleKey: function handleKey(event, component, functions) {
    var commandList = commands[component],
        keyCode = this.parseKey(event),
        cmds,
        command,
        fn;

    if (!commandList) return console.warn('Component not defined!');

    if (typeof commandList.ltr === 'undefined') {
      // this component does not differentiate between ltr and rtl
      cmds = commandList; // use plain list
    } else {
      // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
      if ((0, _foundationUtil.rtl)()) cmds = _jquery2.default.extend({}, commandList.ltr, commandList.rtl);else cmds = _jquery2.default.extend({}, commandList.rtl, commandList.ltr);
    }
    command = cmds[keyCode];

    fn = functions[command];
    if (fn && typeof fn === 'function') {
      // execute function  if exists
      var returnValue = fn.apply();
      if (functions.handled || typeof functions.handled === 'function') {
        // execute function when event was handled
        functions.handled(returnValue);
      }
    } else {
      if (functions.unhandled || typeof functions.unhandled === 'function') {
        // execute function when event was not handled
        functions.unhandled();
      }
    }
  },


  /**
   * Finds all focusable elements within the given `$element`
   * @param {jQuery} $element - jQuery object to search within
   * @return {jQuery} $focusable - all focusable elements within `$element`
   */

  findFocusable: findFocusable,

  /**
   * Returns the component name name
   * @param {Object} component - Foundation component, e.g. Slider or Reveal
   * @return String componentName
   */

  register: function register(componentName, cmds) {
    commands[componentName] = cmds;
  },


  // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?
  //
  /**
   * Traps the focus in the given element.
   * @param  {jQuery} $element  jQuery object to trap the foucs into.
   */
  trapFocus: function trapFocus($element) {
    var $focusable = findFocusable($element),
        $firstFocusable = $focusable.eq(0),
        $lastFocusable = $focusable.eq(-1);

    $element.on('keydown.zf.trapfocus', function (event) {
      if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {
        event.preventDefault();
        $firstFocusable.focus();
      } else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {
        event.preventDefault();
        $lastFocusable.focus();
      }
    });
  },

  /**
   * Releases the trapped focus from the given element.
   * @param  {jQuery} $element  jQuery object to release the focus for.
   */
  releaseFocus: function releaseFocus($element) {
    $element.off('keydown.zf.trapfocus');
  }
};

/*
 * Constants for easier comparing.
 * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
 */
function getKeyCodes(kcs) {
  var k = {};
  for (var kc in kcs) {
    k[kcs[kc]] = kcs[kc];
  }return k;
}

exports.Keyboard = Keyboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.keyboard.js","/../../node_modules/foundation-sites/js")
},{"./foundation.util.core":29,"b55mWE":41,"buffer":40,"jquery":43}],32:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaQuery = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Default set of media queries
var defaultQueries = {
  'default': 'only screen',
  landscape: 'only screen and (orientation: landscape)',
  portrait: 'only screen and (orientation: portrait)',
  retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
};

// matchMedia() polyfill - Test a CSS media type/query in JS.
// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
var matchMedia = window.matchMedia || function () {
  'use strict';

  // For browsers that support matchMedium api such as IE 9 and webkit

  var styleMedia = window.styleMedia || window.media;

  // For those that don't support matchMedium
  if (!styleMedia) {
    var style = document.createElement('style'),
        script = document.getElementsByTagName('script')[0],
        info = null;

    style.type = 'text/css';
    style.id = 'matchmediajs-test';

    script && script.parentNode && script.parentNode.insertBefore(style, script);

    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
    info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

    styleMedia = {
      matchMedium: function matchMedium(media) {
        var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
        if (style.styleSheet) {
          style.styleSheet.cssText = text;
        } else {
          style.textContent = text;
        }

        // Test if media query is true or false
        return info.width === '1px';
      }
    };
  }

  return function (media) {
    return {
      matches: styleMedia.matchMedium(media || 'all'),
      media: media || 'all'
    };
  };
}();

var MediaQuery = {
  queries: [],

  current: '',

  /**
   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
   * @function
   * @private
   */
  _init: function _init() {
    var self = this;
    var $meta = (0, _jquery2.default)('meta.foundation-mq');
    if (!$meta.length) {
      (0, _jquery2.default)('<meta class="foundation-mq">').appendTo(document.head);
    }

    var extractedStyles = (0, _jquery2.default)('.foundation-mq').css('font-family');
    var namedQueries;

    namedQueries = parseStyleToObject(extractedStyles);

    for (var key in namedQueries) {
      if (namedQueries.hasOwnProperty(key)) {
        self.queries.push({
          name: key,
          value: 'only screen and (min-width: ' + namedQueries[key] + ')'
        });
      }
    }

    this.current = this._getCurrentSize();

    this._watcher();
  },


  /**
   * Checks if the screen is at least as wide as a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
   */
  atLeast: function atLeast(size) {
    var query = this.get(size);

    if (query) {
      return matchMedia(query).matches;
    }

    return false;
  },


  /**
   * Checks if the screen matches to a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
   */
  is: function is(size) {
    size = size.trim().split(' ');
    if (size.length > 1 && size[1] === 'only') {
      if (size[0] === this._getCurrentSize()) return true;
    } else {
      return this.atLeast(size[0]);
    }
    return false;
  },


  /**
   * Gets the media query of a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to get.
   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
   */
  get: function get(size) {
    for (var i in this.queries) {
      if (this.queries.hasOwnProperty(i)) {
        var query = this.queries[i];
        if (size === query.name) return query.value;
      }
    }

    return null;
  },


  /**
   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
   * @function
   * @private
   * @returns {String} Name of the current breakpoint.
   */
  _getCurrentSize: function _getCurrentSize() {
    var matched;

    for (var i = 0; i < this.queries.length; i++) {
      var query = this.queries[i];

      if (matchMedia(query.value).matches) {
        matched = query;
      }
    }

    if ((typeof matched === 'undefined' ? 'undefined' : _typeof(matched)) === 'object') {
      return matched.name;
    } else {
      return matched;
    }
  },


  /**
   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
   * @function
   * @private
   */
  _watcher: function _watcher() {
    var _this = this;

    (0, _jquery2.default)(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {
      var newSize = _this._getCurrentSize(),
          currentSize = _this.current;

      if (newSize !== currentSize) {
        // Change the current media query
        _this.current = newSize;

        // Broadcast the media query change on the window
        (0, _jquery2.default)(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
      }
    });
  }
};

// Thank you: https://github.com/sindresorhus/query-string
function parseStyleToObject(str) {
  var styleObject = {};

  if (typeof str !== 'string') {
    return styleObject;
  }

  str = str.trim().slice(1, -1); // browsers re-quote string style values

  if (!str) {
    return styleObject;
  }

  styleObject = str.split('&').reduce(function (ret, param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = parts[0];
    var val = parts[1];
    key = decodeURIComponent(key);

    // missing `=` should be `null`:
    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    val = val === undefined ? null : decodeURIComponent(val);

    if (!ret.hasOwnProperty(key)) {
      ret[key] = val;
    } else if (Array.isArray(ret[key])) {
      ret[key].push(val);
    } else {
      ret[key] = [ret[key], val];
    }
    return ret;
  }, {});

  return styleObject;
}

exports.MediaQuery = MediaQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.mediaQuery.js","/../../node_modules/foundation-sites/js")
},{"b55mWE":41,"buffer":40,"jquery":43}],33:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Motion = exports.Move = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Motion module.
 * @module foundation.motion
 */

var initClasses = ['mui-enter', 'mui-leave'];
var activeClasses = ['mui-enter-active', 'mui-leave-active'];

var Motion = {
  animateIn: function animateIn(element, animation, cb) {
    animate(true, element, animation, cb);
  },

  animateOut: function animateOut(element, animation, cb) {
    animate(false, element, animation, cb);
  }
};

function Move(duration, elem, fn) {
  var anim,
      prog,
      start = null;
  // console.log('called');

  if (duration === 0) {
    fn.apply(elem);
    elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
    return;
  }

  function move(ts) {
    if (!start) start = ts;
    // console.log(start, ts);
    prog = ts - start;
    fn.apply(elem);

    if (prog < duration) {
      anim = window.requestAnimationFrame(move, elem);
    } else {
      window.cancelAnimationFrame(anim);
      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
    }
  }
  anim = window.requestAnimationFrame(move);
}

/**
 * Animates an element in or out using a CSS transition class.
 * @function
 * @private
 * @param {Boolean} isIn - Defines if the animation is in or out.
 * @param {Object} element - jQuery or HTML object to animate.
 * @param {String} animation - CSS class to use.
 * @param {Function} cb - Callback to run when animation is finished.
 */
function animate(isIn, element, animation, cb) {
  element = (0, _jquery2.default)(element).eq(0);

  if (!element.length) return;

  var initClass = isIn ? initClasses[0] : initClasses[1];
  var activeClass = isIn ? activeClasses[0] : activeClasses[1];

  // Set up the animation
  reset();

  element.addClass(animation).css('transition', 'none');

  requestAnimationFrame(function () {
    element.addClass(initClass);
    if (isIn) element.show();
  });

  // Start the animation
  requestAnimationFrame(function () {
    element[0].offsetWidth;
    element.css('transition', '').addClass(activeClass);
  });

  // Clean up the animation when it finishes
  element.one((0, _foundationUtil.transitionend)(element), finish);

  // Hides the element (for out animations), resets the element, and runs a callback
  function finish() {
    if (!isIn) element.hide();
    reset();
    if (cb) cb.apply(element);
  }

  // Resets transitions and removes motion-specific classes
  function reset() {
    element[0].style.transitionDuration = 0;
    element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
  }
}

exports.Move = Move;
exports.Motion = Motion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24udXRpbC5tb3Rpb24uanMiXSwibmFtZXMiOlsiaW5pdENsYXNzZXMiLCJhY3RpdmVDbGFzc2VzIiwiTW90aW9uIiwiYW5pbWF0ZUluIiwiZWxlbWVudCIsImFuaW1hdGlvbiIsImNiIiwiYW5pbWF0ZSIsImFuaW1hdGVPdXQiLCJNb3ZlIiwiZHVyYXRpb24iLCJlbGVtIiwiZm4iLCJhbmltIiwicHJvZyIsInN0YXJ0IiwiYXBwbHkiLCJ0cmlnZ2VyIiwidHJpZ2dlckhhbmRsZXIiLCJtb3ZlIiwidHMiLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlzSW4iLCJlcSIsImxlbmd0aCIsImluaXRDbGFzcyIsImFjdGl2ZUNsYXNzIiwicmVzZXQiLCJhZGRDbGFzcyIsImNzcyIsInNob3ciLCJvZmZzZXRXaWR0aCIsIm9uZSIsImZpbmlzaCIsImhpZGUiLCJzdHlsZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInJlbW92ZUNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7QUFLQSxJQUFNQSxjQUFnQixDQUFDLFdBQUQsRUFBYyxXQUFkLENBQXRCO0FBQ0EsSUFBTUMsZ0JBQWdCLENBQUMsa0JBQUQsRUFBcUIsa0JBQXJCLENBQXRCOztBQUVBLElBQU1DLFNBQVM7QUFDYkMsYUFBVyxtQkFBU0MsT0FBVCxFQUFrQkMsU0FBbEIsRUFBNkJDLEVBQTdCLEVBQWlDO0FBQzFDQyxZQUFRLElBQVIsRUFBY0gsT0FBZCxFQUF1QkMsU0FBdkIsRUFBa0NDLEVBQWxDO0FBQ0QsR0FIWTs7QUFLYkUsY0FBWSxvQkFBU0osT0FBVCxFQUFrQkMsU0FBbEIsRUFBNkJDLEVBQTdCLEVBQWlDO0FBQzNDQyxZQUFRLEtBQVIsRUFBZUgsT0FBZixFQUF3QkMsU0FBeEIsRUFBbUNDLEVBQW5DO0FBQ0Q7QUFQWSxDQUFmOztBQVVBLFNBQVNHLElBQVQsQ0FBY0MsUUFBZCxFQUF3QkMsSUFBeEIsRUFBOEJDLEVBQTlCLEVBQWlDO0FBQy9CLE1BQUlDLElBQUo7QUFBQSxNQUFVQyxJQUFWO0FBQUEsTUFBZ0JDLFFBQVEsSUFBeEI7QUFDQTs7QUFFQSxNQUFJTCxhQUFhLENBQWpCLEVBQW9CO0FBQ2xCRSxPQUFHSSxLQUFILENBQVNMLElBQVQ7QUFDQUEsU0FBS00sT0FBTCxDQUFhLHFCQUFiLEVBQW9DLENBQUNOLElBQUQsQ0FBcEMsRUFBNENPLGNBQTVDLENBQTJELHFCQUEzRCxFQUFrRixDQUFDUCxJQUFELENBQWxGO0FBQ0E7QUFDRDs7QUFFRCxXQUFTUSxJQUFULENBQWNDLEVBQWQsRUFBaUI7QUFDZixRQUFHLENBQUNMLEtBQUosRUFBV0EsUUFBUUssRUFBUjtBQUNYO0FBQ0FOLFdBQU9NLEtBQUtMLEtBQVo7QUFDQUgsT0FBR0ksS0FBSCxDQUFTTCxJQUFUOztBQUVBLFFBQUdHLE9BQU9KLFFBQVYsRUFBbUI7QUFBRUcsYUFBT1EsT0FBT0MscUJBQVAsQ0FBNkJILElBQTdCLEVBQW1DUixJQUFuQyxDQUFQO0FBQWtELEtBQXZFLE1BQ0k7QUFDRlUsYUFBT0Usb0JBQVAsQ0FBNEJWLElBQTVCO0FBQ0FGLFdBQUtNLE9BQUwsQ0FBYSxxQkFBYixFQUFvQyxDQUFDTixJQUFELENBQXBDLEVBQTRDTyxjQUE1QyxDQUEyRCxxQkFBM0QsRUFBa0YsQ0FBQ1AsSUFBRCxDQUFsRjtBQUNEO0FBQ0Y7QUFDREUsU0FBT1EsT0FBT0MscUJBQVAsQ0FBNkJILElBQTdCLENBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7O0FBU0EsU0FBU1osT0FBVCxDQUFpQmlCLElBQWpCLEVBQXVCcEIsT0FBdkIsRUFBZ0NDLFNBQWhDLEVBQTJDQyxFQUEzQyxFQUErQztBQUM3Q0YsWUFBVSxzQkFBRUEsT0FBRixFQUFXcUIsRUFBWCxDQUFjLENBQWQsQ0FBVjs7QUFFQSxNQUFJLENBQUNyQixRQUFRc0IsTUFBYixFQUFxQjs7QUFFckIsTUFBSUMsWUFBWUgsT0FBT3hCLFlBQVksQ0FBWixDQUFQLEdBQXdCQSxZQUFZLENBQVosQ0FBeEM7QUFDQSxNQUFJNEIsY0FBY0osT0FBT3ZCLGNBQWMsQ0FBZCxDQUFQLEdBQTBCQSxjQUFjLENBQWQsQ0FBNUM7O0FBRUE7QUFDQTRCOztBQUVBekIsVUFDRzBCLFFBREgsQ0FDWXpCLFNBRFosRUFFRzBCLEdBRkgsQ0FFTyxZQUZQLEVBRXFCLE1BRnJCOztBQUlBVCx3QkFBc0IsWUFBTTtBQUMxQmxCLFlBQVEwQixRQUFSLENBQWlCSCxTQUFqQjtBQUNBLFFBQUlILElBQUosRUFBVXBCLFFBQVE0QixJQUFSO0FBQ1gsR0FIRDs7QUFLQTtBQUNBVix3QkFBc0IsWUFBTTtBQUMxQmxCLFlBQVEsQ0FBUixFQUFXNkIsV0FBWDtBQUNBN0IsWUFDRzJCLEdBREgsQ0FDTyxZQURQLEVBQ3FCLEVBRHJCLEVBRUdELFFBRkgsQ0FFWUYsV0FGWjtBQUdELEdBTEQ7O0FBT0E7QUFDQXhCLFVBQVE4QixHQUFSLENBQVksbUNBQWM5QixPQUFkLENBQVosRUFBb0MrQixNQUFwQzs7QUFFQTtBQUNBLFdBQVNBLE1BQVQsR0FBa0I7QUFDaEIsUUFBSSxDQUFDWCxJQUFMLEVBQVdwQixRQUFRZ0MsSUFBUjtBQUNYUDtBQUNBLFFBQUl2QixFQUFKLEVBQVFBLEdBQUdVLEtBQUgsQ0FBU1osT0FBVDtBQUNUOztBQUVEO0FBQ0EsV0FBU3lCLEtBQVQsR0FBaUI7QUFDZnpCLFlBQVEsQ0FBUixFQUFXaUMsS0FBWCxDQUFpQkMsa0JBQWpCLEdBQXNDLENBQXRDO0FBQ0FsQyxZQUFRbUMsV0FBUixDQUF1QlosU0FBdkIsU0FBb0NDLFdBQXBDLFNBQW1EdkIsU0FBbkQ7QUFDRDtBQUNGOztRQUVPSSxJLEdBQUFBLEk7UUFBTVAsTSxHQUFBQSxNIiwiZmlsZSI6ImZvdW5kYXRpb24udXRpbC5tb3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyB0cmFuc2l0aW9uZW5kIH0gZnJvbSAnLi9mb3VuZGF0aW9uLnV0aWwuY29yZSc7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICBmbi5hcHBseShlbGVtKTtcbiAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gdHM7XG4gICAgLy8gY29uc29sZS5sb2coc3RhcnQsIHRzKTtcbiAgICBwcm9nID0gdHMgLSBzdGFydDtcbiAgICBmbi5hcHBseShlbGVtKTtcblxuICAgIGlmKHByb2cgPCBkdXJhdGlvbil7IGFuaW0gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmUsIGVsZW0pOyB9XG4gICAgZWxzZXtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltKTtcbiAgICAgIGVsZW0udHJpZ2dlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSkudHJpZ2dlckhhbmRsZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pO1xuICAgIH1cbiAgfVxuICBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlKTtcbn1cblxuLyoqXG4gKiBBbmltYXRlcyBhbiBlbGVtZW50IGluIG9yIG91dCB1c2luZyBhIENTUyB0cmFuc2l0aW9uIGNsYXNzLlxuICogQGZ1bmN0aW9uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCb29sZWFufSBpc0luIC0gRGVmaW5lcyBpZiB0aGUgYW5pbWF0aW9uIGlzIGluIG9yIG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9yIEhUTUwgb2JqZWN0IHRvIGFuaW1hdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gYW5pbWF0aW9uIC0gQ1NTIGNsYXNzIHRvIHVzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQ2FsbGJhY2sgdG8gcnVuIHdoZW4gYW5pbWF0aW9uIGlzIGZpbmlzaGVkLlxuICovXG5mdW5jdGlvbiBhbmltYXRlKGlzSW4sIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgZWxlbWVudCA9ICQoZWxlbWVudCkuZXEoMCk7XG5cbiAgaWYgKCFlbGVtZW50Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIHZhciBpbml0Q2xhc3MgPSBpc0luID8gaW5pdENsYXNzZXNbMF0gOiBpbml0Q2xhc3Nlc1sxXTtcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNJbiA/IGFjdGl2ZUNsYXNzZXNbMF0gOiBhY3RpdmVDbGFzc2VzWzFdO1xuXG4gIC8vIFNldCB1cCB0aGUgYW5pbWF0aW9uXG4gIHJlc2V0KCk7XG5cbiAgZWxlbWVudFxuICAgIC5hZGRDbGFzcyhhbmltYXRpb24pXG4gICAgLmNzcygndHJhbnNpdGlvbicsICdub25lJyk7XG5cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBlbGVtZW50LmFkZENsYXNzKGluaXRDbGFzcyk7XG4gICAgaWYgKGlzSW4pIGVsZW1lbnQuc2hvdygpO1xuICB9KTtcblxuICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICBlbGVtZW50XG4gICAgICAuY3NzKCd0cmFuc2l0aW9uJywgJycpXG4gICAgICAuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICB9KTtcblxuICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgZWxlbWVudC5vbmUodHJhbnNpdGlvbmVuZChlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhgJHtpbml0Q2xhc3N9ICR7YWN0aXZlQ2xhc3N9ICR7YW5pbWF0aW9ufWApO1xuICB9XG59XG5cbmV4cG9ydCB7TW92ZSwgTW90aW9ufTtcblxuIl19
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.motion.js","/../../node_modules/foundation-sites/js")
},{"./foundation.util.core":29,"b55mWE":41,"buffer":40,"jquery":43}],34:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Nest = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Nest = {
  Feather: function Feather(menu) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';

    menu.attr('role', 'menubar');

    var items = menu.find('li').attr({ 'role': 'menuitem' }),
        subMenuClass = 'is-' + type + '-submenu',
        subItemClass = subMenuClass + '-item',
        hasSubClass = 'is-' + type + '-submenu-parent',
        applyAria = type !== 'accordion'; // Accordions handle their own ARIA attriutes.

    items.each(function () {
      var $item = (0, _jquery2.default)(this),
          $sub = $item.children('ul');

      if ($sub.length) {
        $item.addClass(hasSubClass);
        $sub.addClass('submenu ' + subMenuClass).attr({ 'data-submenu': '' });
        if (applyAria) {
          $item.attr({
            'aria-haspopup': true,
            'aria-label': $item.children('a:first').text()
          });
          // Note:  Drilldowns behave differently in how they hide, and so need
          // additional attributes.  We should look if this possibly over-generalized
          // utility (Nest) is appropriate when we rework menus in 6.4
          if (type === 'drilldown') {
            $item.attr({ 'aria-expanded': false });
          }
        }
        $sub.addClass('submenu ' + subMenuClass).attr({
          'data-submenu': '',
          'role': 'menu'
        });
        if (type === 'drilldown') {
          $sub.attr({ 'aria-hidden': true });
        }
      }

      if ($item.parent('[data-submenu]').length) {
        $item.addClass('is-submenu-item ' + subItemClass);
      }
    });

    return;
  },
  Burn: function Burn(menu, type) {
    var //items = menu.find('li'),
    subMenuClass = 'is-' + type + '-submenu',
        subItemClass = subMenuClass + '-item',
        hasSubClass = 'is-' + type + '-submenu-parent';

    menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');
  }
};

exports.Nest = Nest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24udXRpbC5uZXN0LmpzIl0sIm5hbWVzIjpbIk5lc3QiLCJGZWF0aGVyIiwibWVudSIsInR5cGUiLCJhdHRyIiwiaXRlbXMiLCJmaW5kIiwic3ViTWVudUNsYXNzIiwic3ViSXRlbUNsYXNzIiwiaGFzU3ViQ2xhc3MiLCJhcHBseUFyaWEiLCJlYWNoIiwiJGl0ZW0iLCIkc3ViIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJhZGRDbGFzcyIsInRleHQiLCJwYXJlbnQiLCJCdXJuIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVBdHRyIiwiY3NzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUVBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPO0FBQ1hDLFNBRFcsbUJBQ0hDLElBREcsRUFDZ0I7QUFBQSxRQUFiQyxJQUFhLHVFQUFOLElBQU07O0FBQ3pCRCxTQUFLRSxJQUFMLENBQVUsTUFBVixFQUFrQixTQUFsQjs7QUFFQSxRQUFJQyxRQUFRSCxLQUFLSSxJQUFMLENBQVUsSUFBVixFQUFnQkYsSUFBaEIsQ0FBcUIsRUFBQyxRQUFRLFVBQVQsRUFBckIsQ0FBWjtBQUFBLFFBQ0lHLHVCQUFxQkosSUFBckIsYUFESjtBQUFBLFFBRUlLLGVBQWtCRCxZQUFsQixVQUZKO0FBQUEsUUFHSUUsc0JBQW9CTixJQUFwQixvQkFISjtBQUFBLFFBSUlPLFlBQWFQLFNBQVMsV0FKMUIsQ0FIeUIsQ0FPZTs7QUFFeENFLFVBQU1NLElBQU4sQ0FBVyxZQUFXO0FBQ3BCLFVBQUlDLFFBQVEsc0JBQUUsSUFBRixDQUFaO0FBQUEsVUFDSUMsT0FBT0QsTUFBTUUsUUFBTixDQUFlLElBQWYsQ0FEWDs7QUFHQSxVQUFJRCxLQUFLRSxNQUFULEVBQWlCO0FBQ2ZILGNBQU1JLFFBQU4sQ0FBZVAsV0FBZjtBQUNBSSxhQUFLRyxRQUFMLGNBQXlCVCxZQUF6QixFQUF5Q0gsSUFBekMsQ0FBOEMsRUFBQyxnQkFBZ0IsRUFBakIsRUFBOUM7QUFDQSxZQUFHTSxTQUFILEVBQWM7QUFDWkUsZ0JBQU1SLElBQU4sQ0FBVztBQUNULDZCQUFpQixJQURSO0FBRVQsMEJBQWNRLE1BQU1FLFFBQU4sQ0FBZSxTQUFmLEVBQTBCRyxJQUExQjtBQUZMLFdBQVg7QUFJQTtBQUNBO0FBQ0E7QUFDQSxjQUFHZCxTQUFTLFdBQVosRUFBeUI7QUFDdkJTLGtCQUFNUixJQUFOLENBQVcsRUFBQyxpQkFBaUIsS0FBbEIsRUFBWDtBQUNEO0FBQ0Y7QUFDRFMsYUFDR0csUUFESCxjQUN1QlQsWUFEdkIsRUFFR0gsSUFGSCxDQUVRO0FBQ0osMEJBQWdCLEVBRFo7QUFFSixrQkFBUTtBQUZKLFNBRlI7QUFNQSxZQUFHRCxTQUFTLFdBQVosRUFBeUI7QUFDdkJVLGVBQUtULElBQUwsQ0FBVSxFQUFDLGVBQWUsSUFBaEIsRUFBVjtBQUNEO0FBQ0Y7O0FBRUQsVUFBSVEsTUFBTU0sTUFBTixDQUFhLGdCQUFiLEVBQStCSCxNQUFuQyxFQUEyQztBQUN6Q0gsY0FBTUksUUFBTixzQkFBa0NSLFlBQWxDO0FBQ0Q7QUFDRixLQWpDRDs7QUFtQ0E7QUFDRCxHQTlDVTtBQWdEWFcsTUFoRFcsZ0JBZ0ROakIsSUFoRE0sRUFnREFDLElBaERBLEVBZ0RNO0FBQ2YsUUFBSTtBQUNBSSwyQkFBcUJKLElBQXJCLGFBREo7QUFBQSxRQUVJSyxlQUFrQkQsWUFBbEIsVUFGSjtBQUFBLFFBR0lFLHNCQUFvQk4sSUFBcEIsb0JBSEo7O0FBS0FELFNBQ0dJLElBREgsQ0FDUSx3QkFEUixFQUVHYyxXQUZILENBRWtCYixZQUZsQixTQUVrQ0MsWUFGbEMsU0FFa0RDLFdBRmxELHlDQUdHWSxVQUhILENBR2MsY0FIZCxFQUc4QkMsR0FIOUIsQ0FHa0MsU0FIbEMsRUFHNkMsRUFIN0M7QUFLRDtBQTNEVSxDQUFiOztRQThEUXRCLEksR0FBQUEsSSIsImZpbGUiOiJmb3VuZGF0aW9uLnV0aWwubmVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuY29uc3QgTmVzdCA9IHtcbiAgRmVhdGhlcihtZW51LCB0eXBlID0gJ3pmJykge1xuICAgIG1lbnUuYXR0cigncm9sZScsICdtZW51YmFyJyk7XG5cbiAgICB2YXIgaXRlbXMgPSBtZW51LmZpbmQoJ2xpJykuYXR0cih7J3JvbGUnOiAnbWVudWl0ZW0nfSksXG4gICAgICAgIHN1Yk1lbnVDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnVgLFxuICAgICAgICBzdWJJdGVtQ2xhc3MgPSBgJHtzdWJNZW51Q2xhc3N9LWl0ZW1gLFxuICAgICAgICBoYXNTdWJDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnUtcGFyZW50YCxcbiAgICAgICAgYXBwbHlBcmlhID0gKHR5cGUgIT09ICdhY2NvcmRpb24nKTsgLy8gQWNjb3JkaW9ucyBoYW5kbGUgdGhlaXIgb3duIEFSSUEgYXR0cml1dGVzLlxuXG4gICAgaXRlbXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkaXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgJHN1YiA9ICRpdGVtLmNoaWxkcmVuKCd1bCcpO1xuXG4gICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgJGl0ZW0uYWRkQ2xhc3MoaGFzU3ViQ2xhc3MpO1xuICAgICAgICAkc3ViLmFkZENsYXNzKGBzdWJtZW51ICR7c3ViTWVudUNsYXNzfWApLmF0dHIoeydkYXRhLXN1Ym1lbnUnOiAnJ30pO1xuICAgICAgICBpZihhcHBseUFyaWEpIHtcbiAgICAgICAgICAkaXRlbS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWxhYmVsJzogJGl0ZW0uY2hpbGRyZW4oJ2E6Zmlyc3QnKS50ZXh0KClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBOb3RlOiAgRHJpbGxkb3ducyBiZWhhdmUgZGlmZmVyZW50bHkgaW4gaG93IHRoZXkgaGlkZSwgYW5kIHNvIG5lZWRcbiAgICAgICAgICAvLyBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMuICBXZSBzaG91bGQgbG9vayBpZiB0aGlzIHBvc3NpYmx5IG92ZXItZ2VuZXJhbGl6ZWRcbiAgICAgICAgICAvLyB1dGlsaXR5IChOZXN0KSBpcyBhcHByb3ByaWF0ZSB3aGVuIHdlIHJld29yayBtZW51cyBpbiA2LjRcbiAgICAgICAgICBpZih0eXBlID09PSAnZHJpbGxkb3duJykge1xuICAgICAgICAgICAgJGl0ZW0uYXR0cih7J2FyaWEtZXhwYW5kZWQnOiBmYWxzZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAkc3ViXG4gICAgICAgICAgLmFkZENsYXNzKGBzdWJtZW51ICR7c3ViTWVudUNsYXNzfWApXG4gICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgJ2RhdGEtc3VibWVudSc6ICcnLFxuICAgICAgICAgICAgJ3JvbGUnOiAnbWVudSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgaWYodHlwZSA9PT0gJ2RyaWxsZG93bicpIHtcbiAgICAgICAgICAkc3ViLmF0dHIoeydhcmlhLWhpZGRlbic6IHRydWV9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhgaXMtc3VibWVudS1pdGVtICR7c3ViSXRlbUNsYXNzfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIEJ1cm4obWVudSwgdHlwZSkge1xuICAgIHZhciAvL2l0ZW1zID0gbWVudS5maW5kKCdsaScpLFxuICAgICAgICBzdWJNZW51Q2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51YCxcbiAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICBtZW51XG4gICAgICAuZmluZCgnPmxpLCAubWVudSwgLm1lbnUgPiBsaScpXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3ViTWVudUNsYXNzfSAke3N1Ykl0ZW1DbGFzc30gJHtoYXNTdWJDbGFzc30gaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlYClcbiAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgfVxufVxuXG5leHBvcnQge05lc3R9O1xuIl19
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.nest.js","/../../node_modules/foundation-sites/js")
},{"b55mWE":41,"buffer":40,"jquery":43}],35:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timer = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Timer(elem, options, cb) {
  var _this = this,
      duration = options.duration,
      //options is an object for easily adding features later.
  nameSpace = Object.keys(elem.data())[0] || 'timer',
      remain = -1,
      start,
      timer;

  this.isPaused = false;

  this.restart = function () {
    remain = -1;
    clearTimeout(timer);
    this.start();
  };

  this.start = function () {
    this.isPaused = false;
    // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
    clearTimeout(timer);
    remain = remain <= 0 ? duration : remain;
    elem.data('paused', false);
    start = Date.now();
    timer = setTimeout(function () {
      if (options.infinite) {
        _this.restart(); //rerun the timer.
      }
      if (cb && typeof cb === 'function') {
        cb();
      }
    }, remain);
    elem.trigger('timerstart.zf.' + nameSpace);
  };

  this.pause = function () {
    this.isPaused = true;
    //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
    clearTimeout(timer);
    elem.data('paused', true);
    var end = Date.now();
    remain = remain - (end - start);
    elem.trigger('timerpaused.zf.' + nameSpace);
  };
}

exports.Timer = Timer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24udXRpbC50aW1lci5qcyJdLCJuYW1lcyI6WyJUaW1lciIsImVsZW0iLCJvcHRpb25zIiwiY2IiLCJfdGhpcyIsImR1cmF0aW9uIiwibmFtZVNwYWNlIiwiT2JqZWN0Iiwia2V5cyIsImRhdGEiLCJyZW1haW4iLCJzdGFydCIsInRpbWVyIiwiaXNQYXVzZWQiLCJyZXN0YXJ0IiwiY2xlYXJUaW1lb3V0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJpbmZpbml0ZSIsInRyaWdnZXIiLCJwYXVzZSIsImVuZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQTs7Ozs7O0FBRUEsU0FBU0EsS0FBVCxDQUFlQyxJQUFmLEVBQXFCQyxPQUFyQixFQUE4QkMsRUFBOUIsRUFBa0M7QUFDaEMsTUFBSUMsUUFBUSxJQUFaO0FBQUEsTUFDSUMsV0FBV0gsUUFBUUcsUUFEdkI7QUFBQSxNQUNnQztBQUM1QkMsY0FBWUMsT0FBT0MsSUFBUCxDQUFZUCxLQUFLUSxJQUFMLEVBQVosRUFBeUIsQ0FBekIsS0FBK0IsT0FGL0M7QUFBQSxNQUdJQyxTQUFTLENBQUMsQ0FIZDtBQUFBLE1BSUlDLEtBSko7QUFBQSxNQUtJQyxLQUxKOztBQU9BLE9BQUtDLFFBQUwsR0FBZ0IsS0FBaEI7O0FBRUEsT0FBS0MsT0FBTCxHQUFlLFlBQVc7QUFDeEJKLGFBQVMsQ0FBQyxDQUFWO0FBQ0FLLGlCQUFhSCxLQUFiO0FBQ0EsU0FBS0QsS0FBTDtBQUNELEdBSkQ7O0FBTUEsT0FBS0EsS0FBTCxHQUFhLFlBQVc7QUFDdEIsU0FBS0UsUUFBTCxHQUFnQixLQUFoQjtBQUNBO0FBQ0FFLGlCQUFhSCxLQUFiO0FBQ0FGLGFBQVNBLFVBQVUsQ0FBVixHQUFjTCxRQUFkLEdBQXlCSyxNQUFsQztBQUNBVCxTQUFLUSxJQUFMLENBQVUsUUFBVixFQUFvQixLQUFwQjtBQUNBRSxZQUFRSyxLQUFLQyxHQUFMLEVBQVI7QUFDQUwsWUFBUU0sV0FBVyxZQUFVO0FBQzNCLFVBQUdoQixRQUFRaUIsUUFBWCxFQUFvQjtBQUNsQmYsY0FBTVUsT0FBTixHQURrQixDQUNGO0FBQ2pCO0FBQ0QsVUFBSVgsTUFBTSxPQUFPQSxFQUFQLEtBQWMsVUFBeEIsRUFBb0M7QUFBRUE7QUFBTztBQUM5QyxLQUxPLEVBS0xPLE1BTEssQ0FBUjtBQU1BVCxTQUFLbUIsT0FBTCxvQkFBOEJkLFNBQTlCO0FBQ0QsR0FkRDs7QUFnQkEsT0FBS2UsS0FBTCxHQUFhLFlBQVc7QUFDdEIsU0FBS1IsUUFBTCxHQUFnQixJQUFoQjtBQUNBO0FBQ0FFLGlCQUFhSCxLQUFiO0FBQ0FYLFNBQUtRLElBQUwsQ0FBVSxRQUFWLEVBQW9CLElBQXBCO0FBQ0EsUUFBSWEsTUFBTU4sS0FBS0MsR0FBTCxFQUFWO0FBQ0FQLGFBQVNBLFVBQVVZLE1BQU1YLEtBQWhCLENBQVQ7QUFDQVYsU0FBS21CLE9BQUwscUJBQStCZCxTQUEvQjtBQUNELEdBUkQ7QUFTRDs7UUFFT04sSyxHQUFBQSxLIiwiZmlsZSI6ImZvdW5kYXRpb24udXRpbC50aW1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuZnVuY3Rpb24gVGltZXIoZWxlbSwgb3B0aW9ucywgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgIGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbiwvL29wdGlvbnMgaXMgYW4gb2JqZWN0IGZvciBlYXNpbHkgYWRkaW5nIGZlYXR1cmVzIGxhdGVyLlxuICAgICAgbmFtZVNwYWNlID0gT2JqZWN0LmtleXMoZWxlbS5kYXRhKCkpWzBdIHx8ICd0aW1lcicsXG4gICAgICByZW1haW4gPSAtMSxcbiAgICAgIHN0YXJ0LFxuICAgICAgdGltZXI7XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuXG4gIHRoaXMucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIHJlbWFpbiA9IC0xO1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9XG5cbiAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAvLyBpZighZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiA8PSAwID8gZHVyYXRpb24gOiByZW1haW47XG4gICAgZWxlbS5kYXRhKCdwYXVzZWQnLCBmYWxzZSk7XG4gICAgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgaWYob3B0aW9ucy5pbmZpbml0ZSl7XG4gICAgICAgIF90aGlzLnJlc3RhcnQoKTsvL3JlcnVuIHRoZSB0aW1lci5cbiAgICAgIH1cbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgIH0sIHJlbWFpbik7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnN0YXJ0LnpmLiR7bmFtZVNwYWNlfWApO1xuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgIC8vaWYoZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgdHJ1ZSk7XG4gICAgdmFyIGVuZCA9IERhdGUubm93KCk7XG4gICAgcmVtYWluID0gcmVtYWluIC0gKGVuZCAtIHN0YXJ0KTtcbiAgICBlbGVtLnRyaWdnZXIoYHRpbWVycGF1c2VkLnpmLiR7bmFtZVNwYWNlfWApO1xuICB9XG59XG5cbmV4cG9ydCB7VGltZXJ9O1xuIl19
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.timer.js","/../../node_modules/foundation-sites/js")
},{"b55mWE":41,"buffer":40,"jquery":43}],36:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Touch = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Touch = {};

var startPosX,
    startPosY,
    startTime,
    elapsedTime,
    isMoving = false;

function onTouchEnd() {
  //  alert(this);
  this.removeEventListener('touchmove', onTouchMove);
  this.removeEventListener('touchend', onTouchEnd);
  isMoving = false;
}

function onTouchMove(e) {
  if (_jquery2.default.spotSwipe.preventDefault) {
    e.preventDefault();
  }
  if (isMoving) {
    var x = e.touches[0].pageX;
    var y = e.touches[0].pageY;
    var dx = startPosX - x;
    var dy = startPosY - y;
    var dir;
    elapsedTime = new Date().getTime() - startTime;
    if (Math.abs(dx) >= _jquery2.default.spotSwipe.moveThreshold && elapsedTime <= _jquery2.default.spotSwipe.timeThreshold) {
      dir = dx > 0 ? 'left' : 'right';
    }
    // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
    //   dir = dy > 0 ? 'down' : 'up';
    // }
    if (dir) {
      e.preventDefault();
      onTouchEnd.call(this);
      (0, _jquery2.default)(this).trigger('swipe', dir).trigger('swipe' + dir);
    }
  }
}

function onTouchStart(e) {
  if (e.touches.length == 1) {
    startPosX = e.touches[0].pageX;
    startPosY = e.touches[0].pageY;
    isMoving = true;
    startTime = new Date().getTime();
    this.addEventListener('touchmove', onTouchMove, false);
    this.addEventListener('touchend', onTouchEnd, false);
  }
}

function init() {
  this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
}

function teardown() {
  this.removeEventListener('touchstart', onTouchStart);
}

var SpotSwipe = function () {
  function SpotSwipe($) {
    _classCallCheck(this, SpotSwipe);

    this.version = '1.0.0';
    this.enabled = 'ontouchstart' in document.documentElement;
    this.preventDefault = false;
    this.moveThreshold = 75;
    this.timeThreshold = 200;
    this.$ = $;
    this._init();
  }

  _createClass(SpotSwipe, [{
    key: '_init',
    value: function _init() {
      var $ = this.$;
      $.event.special.swipe = { setup: init };

      $.each(['left', 'up', 'down', 'right'], function () {
        $.event.special['swipe' + this] = { setup: function setup() {
            $(this).on('swipe', $.noop);
          } };
      });
    }
  }]);

  return SpotSwipe;
}();

/****************************************************
 * As far as I can tell, both setupSpotSwipe and    *
 * setupTouchHandler should be idempotent,          *
 * because they directly replace functions &        *
 * values, and do not add event handlers directly.  *
 ****************************************************/

Touch.setupSpotSwipe = function ($) {
  $.spotSwipe = new SpotSwipe($);
};

/****************************************************
 * Method for adding pseudo drag events to elements *
 ***************************************************/
Touch.setupTouchHandler = function ($) {
  $.fn.addTouch = function () {
    this.each(function (i, el) {
      $(el).bind('touchstart touchmove touchend touchcancel', function (event) {
        //we pass the original event object because the jQuery event
        //object is normalized to w3c specs and does not provide the TouchList
        handleTouch(event);
      });
    });

    var handleTouch = function handleTouch(event) {
      var touches = event.changedTouches,
          first = touches[0],
          eventTypes = {
        touchstart: 'mousedown',
        touchmove: 'mousemove',
        touchend: 'mouseup'
      },
          type = eventTypes[event.type],
          simulatedEvent;

      if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
        simulatedEvent = new window.MouseEvent(type, {
          'bubbles': true,
          'cancelable': true,
          'screenX': first.screenX,
          'screenY': first.screenY,
          'clientX': first.clientX,
          'clientY': first.clientY
        });
      } else {
        simulatedEvent = document.createEvent('MouseEvent');
        simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
      }
      first.target.dispatchEvent(simulatedEvent);
    };
  };
};

Touch.init = function ($) {
  if (typeof $.spotSwipe === 'undefined') {
    Touch.setupSpotSwipe($);
    Touch.setupTouchHandler($);
  }
};

exports.Touch = Touch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyJdLCJuYW1lcyI6WyJUb3VjaCIsInN0YXJ0UG9zWCIsInN0YXJ0UG9zWSIsInN0YXJ0VGltZSIsImVsYXBzZWRUaW1lIiwiaXNNb3ZpbmciLCJvblRvdWNoRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uVG91Y2hNb3ZlIiwiZSIsIiQiLCJzcG90U3dpcGUiLCJwcmV2ZW50RGVmYXVsdCIsIngiLCJ0b3VjaGVzIiwicGFnZVgiLCJ5IiwicGFnZVkiLCJkeCIsImR5IiwiZGlyIiwiRGF0ZSIsImdldFRpbWUiLCJNYXRoIiwiYWJzIiwibW92ZVRocmVzaG9sZCIsInRpbWVUaHJlc2hvbGQiLCJjYWxsIiwidHJpZ2dlciIsIm9uVG91Y2hTdGFydCIsImxlbmd0aCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0IiwidGVhcmRvd24iLCJTcG90U3dpcGUiLCJ2ZXJzaW9uIiwiZW5hYmxlZCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiX2luaXQiLCJldmVudCIsInNwZWNpYWwiLCJzd2lwZSIsInNldHVwIiwiZWFjaCIsIm9uIiwibm9vcCIsInNldHVwU3BvdFN3aXBlIiwic2V0dXBUb3VjaEhhbmRsZXIiLCJmbiIsImFkZFRvdWNoIiwiaSIsImVsIiwiYmluZCIsImhhbmRsZVRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJmaXJzdCIsImV2ZW50VHlwZXMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJ0eXBlIiwic2ltdWxhdGVkRXZlbnQiLCJ3aW5kb3ciLCJNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJ0YXJnZXQiLCJkaXNwYXRjaEV2ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O3FqQkFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7QUFFQSxJQUFJQSxRQUFRLEVBQVo7O0FBRUEsSUFBSUMsU0FBSjtBQUFBLElBQ0lDLFNBREo7QUFBQSxJQUVJQyxTQUZKO0FBQUEsSUFHSUMsV0FISjtBQUFBLElBSUlDLFdBQVcsS0FKZjs7QUFNQSxTQUFTQyxVQUFULEdBQXNCO0FBQ3BCO0FBQ0EsT0FBS0MsbUJBQUwsQ0FBeUIsV0FBekIsRUFBc0NDLFdBQXRDO0FBQ0EsT0FBS0QsbUJBQUwsQ0FBeUIsVUFBekIsRUFBcUNELFVBQXJDO0FBQ0FELGFBQVcsS0FBWDtBQUNEOztBQUVELFNBQVNHLFdBQVQsQ0FBcUJDLENBQXJCLEVBQXdCO0FBQ3RCLE1BQUlDLGlCQUFFQyxTQUFGLENBQVlDLGNBQWhCLEVBQWdDO0FBQUVILE1BQUVHLGNBQUY7QUFBcUI7QUFDdkQsTUFBR1AsUUFBSCxFQUFhO0FBQ1gsUUFBSVEsSUFBSUosRUFBRUssT0FBRixDQUFVLENBQVYsRUFBYUMsS0FBckI7QUFDQSxRQUFJQyxJQUFJUCxFQUFFSyxPQUFGLENBQVUsQ0FBVixFQUFhRyxLQUFyQjtBQUNBLFFBQUlDLEtBQUtqQixZQUFZWSxDQUFyQjtBQUNBLFFBQUlNLEtBQUtqQixZQUFZYyxDQUFyQjtBQUNBLFFBQUlJLEdBQUo7QUFDQWhCLGtCQUFjLElBQUlpQixJQUFKLEdBQVdDLE9BQVgsS0FBdUJuQixTQUFyQztBQUNBLFFBQUdvQixLQUFLQyxHQUFMLENBQVNOLEVBQVQsS0FBZ0JSLGlCQUFFQyxTQUFGLENBQVljLGFBQTVCLElBQTZDckIsZUFBZU0saUJBQUVDLFNBQUYsQ0FBWWUsYUFBM0UsRUFBMEY7QUFDeEZOLFlBQU1GLEtBQUssQ0FBTCxHQUFTLE1BQVQsR0FBa0IsT0FBeEI7QUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQUdFLEdBQUgsRUFBUTtBQUNOWCxRQUFFRyxjQUFGO0FBQ0FOLGlCQUFXcUIsSUFBWCxDQUFnQixJQUFoQjtBQUNBLDRCQUFFLElBQUYsRUFBUUMsT0FBUixDQUFnQixPQUFoQixFQUF5QlIsR0FBekIsRUFBOEJRLE9BQTlCLFdBQThDUixHQUE5QztBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTUyxZQUFULENBQXNCcEIsQ0FBdEIsRUFBeUI7QUFDdkIsTUFBSUEsRUFBRUssT0FBRixDQUFVZ0IsTUFBVixJQUFvQixDQUF4QixFQUEyQjtBQUN6QjdCLGdCQUFZUSxFQUFFSyxPQUFGLENBQVUsQ0FBVixFQUFhQyxLQUF6QjtBQUNBYixnQkFBWU8sRUFBRUssT0FBRixDQUFVLENBQVYsRUFBYUcsS0FBekI7QUFDQVosZUFBVyxJQUFYO0FBQ0FGLGdCQUFZLElBQUlrQixJQUFKLEdBQVdDLE9BQVgsRUFBWjtBQUNBLFNBQUtTLGdCQUFMLENBQXNCLFdBQXRCLEVBQW1DdkIsV0FBbkMsRUFBZ0QsS0FBaEQ7QUFDQSxTQUFLdUIsZ0JBQUwsQ0FBc0IsVUFBdEIsRUFBa0N6QixVQUFsQyxFQUE4QyxLQUE5QztBQUNEO0FBQ0Y7O0FBRUQsU0FBUzBCLElBQVQsR0FBZ0I7QUFDZCxPQUFLRCxnQkFBTCxJQUF5QixLQUFLQSxnQkFBTCxDQUFzQixZQUF0QixFQUFvQ0YsWUFBcEMsRUFBa0QsS0FBbEQsQ0FBekI7QUFDRDs7QUFFRCxTQUFTSSxRQUFULEdBQW9CO0FBQ2xCLE9BQUsxQixtQkFBTCxDQUF5QixZQUF6QixFQUF1Q3NCLFlBQXZDO0FBQ0Q7O0lBRUtLLFM7QUFDSixxQkFBWXhCLENBQVosRUFBZTtBQUFBOztBQUNiLFNBQUt5QixPQUFMLEdBQWUsT0FBZjtBQUNBLFNBQUtDLE9BQUwsR0FBZSxrQkFBa0JDLFNBQVNDLGVBQTFDO0FBQ0EsU0FBSzFCLGNBQUwsR0FBc0IsS0FBdEI7QUFDQSxTQUFLYSxhQUFMLEdBQXFCLEVBQXJCO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixHQUFyQjtBQUNBLFNBQUtoQixDQUFMLEdBQVNBLENBQVQ7QUFDQSxTQUFLNkIsS0FBTDtBQUNEOzs7OzRCQUVPO0FBQ04sVUFBSTdCLElBQUksS0FBS0EsQ0FBYjtBQUNBQSxRQUFFOEIsS0FBRixDQUFRQyxPQUFSLENBQWdCQyxLQUFoQixHQUF3QixFQUFFQyxPQUFPWCxJQUFULEVBQXhCOztBQUVBdEIsUUFBRWtDLElBQUYsQ0FBTyxDQUFDLE1BQUQsRUFBUyxJQUFULEVBQWUsTUFBZixFQUF1QixPQUF2QixDQUFQLEVBQXdDLFlBQVk7QUFDbERsQyxVQUFFOEIsS0FBRixDQUFRQyxPQUFSLFdBQXdCLElBQXhCLElBQWtDLEVBQUVFLE9BQU8saUJBQVU7QUFDbkRqQyxjQUFFLElBQUYsRUFBUW1DLEVBQVIsQ0FBVyxPQUFYLEVBQW9CbkMsRUFBRW9DLElBQXRCO0FBQ0QsV0FGaUMsRUFBbEM7QUFHRCxPQUpEO0FBS0Q7Ozs7OztBQUdIOzs7Ozs7O0FBT0E5QyxNQUFNK0MsY0FBTixHQUF1QixVQUFTckMsQ0FBVCxFQUFZO0FBQ2pDQSxJQUFFQyxTQUFGLEdBQWMsSUFBSXVCLFNBQUosQ0FBY3hCLENBQWQsQ0FBZDtBQUNELENBRkQ7O0FBSUE7OztBQUdBVixNQUFNZ0QsaUJBQU4sR0FBMEIsVUFBU3RDLENBQVQsRUFBWTtBQUNwQ0EsSUFBRXVDLEVBQUYsQ0FBS0MsUUFBTCxHQUFnQixZQUFVO0FBQ3hCLFNBQUtOLElBQUwsQ0FBVSxVQUFTTyxDQUFULEVBQVdDLEVBQVgsRUFBYztBQUN0QjFDLFFBQUUwQyxFQUFGLEVBQU1DLElBQU4sQ0FBVywyQ0FBWCxFQUF3RCxVQUFTYixLQUFULEVBQWlCO0FBQ3ZFO0FBQ0E7QUFDQWMsb0JBQVlkLEtBQVo7QUFDRCxPQUpEO0FBS0QsS0FORDs7QUFRQSxRQUFJYyxjQUFjLFNBQWRBLFdBQWMsQ0FBU2QsS0FBVCxFQUFlO0FBQy9CLFVBQUkxQixVQUFVMEIsTUFBTWUsY0FBcEI7QUFBQSxVQUNJQyxRQUFRMUMsUUFBUSxDQUFSLENBRFo7QUFBQSxVQUVJMkMsYUFBYTtBQUNYQyxvQkFBWSxXQUREO0FBRVhDLG1CQUFXLFdBRkE7QUFHWEMsa0JBQVU7QUFIQyxPQUZqQjtBQUFBLFVBT0lDLE9BQU9KLFdBQVdqQixNQUFNcUIsSUFBakIsQ0FQWDtBQUFBLFVBUUlDLGNBUko7O0FBV0EsVUFBRyxnQkFBZ0JDLE1BQWhCLElBQTBCLE9BQU9BLE9BQU9DLFVBQWQsS0FBNkIsVUFBMUQsRUFBc0U7QUFDcEVGLHlCQUFpQixJQUFJQyxPQUFPQyxVQUFYLENBQXNCSCxJQUF0QixFQUE0QjtBQUMzQyxxQkFBVyxJQURnQztBQUUzQyx3QkFBYyxJQUY2QjtBQUczQyxxQkFBV0wsTUFBTVMsT0FIMEI7QUFJM0MscUJBQVdULE1BQU1VLE9BSjBCO0FBSzNDLHFCQUFXVixNQUFNVyxPQUwwQjtBQU0zQyxxQkFBV1gsTUFBTVk7QUFOMEIsU0FBNUIsQ0FBakI7QUFRRCxPQVRELE1BU087QUFDTE4seUJBQWlCekIsU0FBU2dDLFdBQVQsQ0FBcUIsWUFBckIsQ0FBakI7QUFDQVAsdUJBQWVRLGNBQWYsQ0FBOEJULElBQTlCLEVBQW9DLElBQXBDLEVBQTBDLElBQTFDLEVBQWdERSxNQUFoRCxFQUF3RCxDQUF4RCxFQUEyRFAsTUFBTVMsT0FBakUsRUFBMEVULE1BQU1VLE9BQWhGLEVBQXlGVixNQUFNVyxPQUEvRixFQUF3R1gsTUFBTVksT0FBOUcsRUFBdUgsS0FBdkgsRUFBOEgsS0FBOUgsRUFBcUksS0FBckksRUFBNEksS0FBNUksRUFBbUosQ0FBbkosQ0FBb0osUUFBcEosRUFBOEosSUFBOUo7QUFDRDtBQUNEWixZQUFNZSxNQUFOLENBQWFDLGFBQWIsQ0FBMkJWLGNBQTNCO0FBQ0QsS0ExQkQ7QUEyQkQsR0FwQ0Q7QUFxQ0QsQ0F0Q0Q7O0FBd0NBOUQsTUFBTWdDLElBQU4sR0FBYSxVQUFTdEIsQ0FBVCxFQUFZO0FBQ3ZCLE1BQUcsT0FBT0EsRUFBRUMsU0FBVCxLQUF3QixXQUEzQixFQUF3QztBQUN0Q1gsVUFBTStDLGNBQU4sQ0FBcUJyQyxDQUFyQjtBQUNBVixVQUFNZ0QsaUJBQU4sQ0FBd0J0QyxDQUF4QjtBQUNEO0FBQ0YsQ0FMRDs7UUFPUVYsSyxHQUFBQSxLIiwiZmlsZSI6ImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipXb3JrIGluc3BpcmVkIGJ5IG11bHRpcGxlIGpxdWVyeSBzd2lwZSBwbHVnaW5zKipcbi8vKipEb25lIGJ5IFlvaGFpIEFyYXJhdCAqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxudmFyIFRvdWNoID0ge307XG5cbnZhciBzdGFydFBvc1gsXG4gICAgc3RhcnRQb3NZLFxuICAgIHN0YXJ0VGltZSxcbiAgICBlbGFwc2VkVGltZSxcbiAgICBpc01vdmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAvLyAgYWxlcnQodGhpcyk7XG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUpO1xuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCk7XG4gIGlzTW92aW5nID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcbiAgaWYgKCQuc3BvdFN3aXBlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICBpZihpc01vdmluZykge1xuICAgIHZhciB4ID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgIHZhciB5ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIHZhciBkeCA9IHN0YXJ0UG9zWCAtIHg7XG4gICAgdmFyIGR5ID0gc3RhcnRQb3NZIC0geTtcbiAgICB2YXIgZGlyO1xuICAgIGVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XG4gICAgaWYoTWF0aC5hYnMoZHgpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gICAgLy8gZWxzZSBpZihNYXRoLmFicyhkeSkgPj0gJC5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSAkLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgIC8vIH1cbiAgICBpZihkaXIpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG9uVG91Y2hFbmQuY2FsbCh0aGlzKTtcbiAgICAgICQodGhpcykudHJpZ2dlcignc3dpcGUnLCBkaXIpLnRyaWdnZXIoYHN3aXBlJHtkaXJ9YCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gIGlmIChlLnRvdWNoZXMubGVuZ3RoID09IDEpIHtcbiAgICBzdGFydFBvc1ggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIGlzTW92aW5nID0gdHJ1ZTtcbiAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgJiYgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHRlYXJkb3duKCkge1xuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xufVxuXG5jbGFzcyBTcG90U3dpcGUge1xuICBjb25zdHJ1Y3RvcigkKSB7XG4gICAgdGhpcy52ZXJzaW9uID0gJzEuMC4wJztcbiAgICB0aGlzLmVuYWJsZWQgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIHRoaXMubW92ZVRocmVzaG9sZCA9IDc1O1xuICAgIHRoaXMudGltZVRocmVzaG9sZCA9IDIwMDtcbiAgICB0aGlzLiQgPSAkO1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIF9pbml0KCkge1xuICAgIHZhciAkID0gdGhpcy4kO1xuICAgICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsgc2V0dXA6IGluaXQgfTtcblxuICAgICQuZWFjaChbJ2xlZnQnLCAndXAnLCAnZG93bicsICdyaWdodCddLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkLmV2ZW50LnNwZWNpYWxbYHN3aXBlJHt0aGlzfWBdID0geyBzZXR1cDogZnVuY3Rpb24oKXtcbiAgICAgICAgJCh0aGlzKS5vbignc3dpcGUnLCAkLm5vb3ApO1xuICAgICAgfSB9O1xuICAgIH0pO1xuICB9XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBBcyBmYXIgYXMgSSBjYW4gdGVsbCwgYm90aCBzZXR1cFNwb3RTd2lwZSBhbmQgICAgKlxuICogc2V0dXBUb3VjaEhhbmRsZXIgc2hvdWxkIGJlIGlkZW1wb3RlbnQsICAgICAgICAgICpcbiAqIGJlY2F1c2UgdGhleSBkaXJlY3RseSByZXBsYWNlIGZ1bmN0aW9ucyAmICAgICAgICAqXG4gKiB2YWx1ZXMsIGFuZCBkbyBub3QgYWRkIGV2ZW50IGhhbmRsZXJzIGRpcmVjdGx5LiAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblRvdWNoLnNldHVwU3BvdFN3aXBlID0gZnVuY3Rpb24oJCkge1xuICAkLnNwb3RTd2lwZSA9IG5ldyBTcG90U3dpcGUoJCk7XG59O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogTWV0aG9kIGZvciBhZGRpbmcgcHNldWRvIGRyYWcgZXZlbnRzIHRvIGVsZW1lbnRzICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5Ub3VjaC5zZXR1cFRvdWNoSGFuZGxlciA9IGZ1bmN0aW9uKCQpIHtcbiAgJC5mbi5hZGRUb3VjaCA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksZWwpe1xuICAgICAgJChlbCkuYmluZCgndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnLCBmdW5jdGlvbihldmVudCkgIHtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbihldmVudCl7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGZpcnN0ID0gdG91Y2hlc1swXSxcbiAgICAgICAgICBldmVudFR5cGVzID0ge1xuICAgICAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgICAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgdG91Y2hlbmQ6ICdtb3VzZXVwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnRcbiAgICAgICAgO1xuXG4gICAgICBpZignTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAvKmxlZnQqLywgbnVsbCk7XG4gICAgICB9XG4gICAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgfTtcbiAgfTtcbn07XG5cblRvdWNoLmluaXQgPSBmdW5jdGlvbigkKSB7XG4gIGlmKHR5cGVvZigkLnNwb3RTd2lwZSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgVG91Y2guc2V0dXBTcG90U3dpcGUoJCk7XG4gICAgVG91Y2guc2V0dXBUb3VjaEhhbmRsZXIoJCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7VG91Y2h9O1xuIl19
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.touch.js","/../../node_modules/foundation-sites/js")
},{"b55mWE":41,"buffer":40,"jquery":43}],37:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Triggers = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _foundationUtil = require('./foundation.util.motion');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MutationObserver = function () {
  var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
  for (var i = 0; i < prefixes.length; i++) {
    if (prefixes[i] + 'MutationObserver' in window) {
      return window[prefixes[i] + 'MutationObserver'];
    }
  }
  return false;
}();

var triggers = function triggers(el, type) {
  el.data(type).split(' ').forEach(function (id) {
    (0, _jquery2.default)('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
  });
};

var Triggers = {
  Listeners: {
    Basic: {},
    Global: {}
  },
  Initializers: {}
};

Triggers.Listeners.Basic = {
  openListener: function openListener() {
    triggers((0, _jquery2.default)(this), 'open');
  },
  closeListener: function closeListener() {
    var id = (0, _jquery2.default)(this).data('close');
    if (id) {
      triggers((0, _jquery2.default)(this), 'close');
    } else {
      (0, _jquery2.default)(this).trigger('close.zf.trigger');
    }
  },
  toggleListener: function toggleListener() {
    var id = (0, _jquery2.default)(this).data('toggle');
    if (id) {
      triggers((0, _jquery2.default)(this), 'toggle');
    } else {
      (0, _jquery2.default)(this).trigger('toggle.zf.trigger');
    }
  },
  closeableListener: function closeableListener(e) {
    e.stopPropagation();
    var animation = (0, _jquery2.default)(this).data('closable');

    if (animation !== '') {
      _foundationUtil.Motion.animateOut((0, _jquery2.default)(this), animation, function () {
        (0, _jquery2.default)(this).trigger('closed.zf');
      });
    } else {
      (0, _jquery2.default)(this).fadeOut().trigger('closed.zf');
    }
  },
  toggleFocusListener: function toggleFocusListener() {
    var id = (0, _jquery2.default)(this).data('toggle-focus');
    (0, _jquery2.default)('#' + id).triggerHandler('toggle.zf.trigger', [(0, _jquery2.default)(this)]);
  }
};

// Elements with [data-open] will reveal a plugin that supports it when clicked.
Triggers.Initializers.addOpenListener = function ($elem) {
  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
  $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
};

// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
Triggers.Initializers.addCloseListener = function ($elem) {
  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
  $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
};

// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
Triggers.Initializers.addToggleListener = function ($elem) {
  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
  $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
};

// Elements with [data-closable] will respond to close.zf.trigger events.
Triggers.Initializers.addCloseableListener = function ($elem) {
  $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
  $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
};

// Elements with [data-toggle-focus] will respond to coming in and out of focus
Triggers.Initializers.addToggleFocusListener = function ($elem) {
  $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
  $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
};

// More Global/complex listeners and triggers
Triggers.Listeners.Global = {
  resizeListener: function resizeListener($nodes) {
    if (!MutationObserver) {
      //fallback for IE 9
      $nodes.each(function () {
        (0, _jquery2.default)(this).triggerHandler('resizeme.zf.trigger');
      });
    }
    //trigger all listening elements and signal a resize event
    $nodes.attr('data-events', "resize");
  },
  scrollListener: function scrollListener($nodes) {
    if (!MutationObserver) {
      //fallback for IE 9
      $nodes.each(function () {
        (0, _jquery2.default)(this).triggerHandler('scrollme.zf.trigger');
      });
    }
    //trigger all listening elements and signal a scroll event
    $nodes.attr('data-events', "scroll");
  },
  closeMeListener: function closeMeListener(e, pluginId) {
    var plugin = e.namespace.split('.')[0];
    var plugins = (0, _jquery2.default)('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

    plugins.each(function () {
      var _this = (0, _jquery2.default)(this);
      _this.triggerHandler('close.zf.trigger', [_this]);
    });
  }

  // Global, parses whole document.
};Triggers.Initializers.addClosemeListener = function (pluginName) {
  var yetiBoxes = (0, _jquery2.default)('[data-yeti-box]'),
      plugNames = ['dropdown', 'tooltip', 'reveal'];

  if (pluginName) {
    if (typeof pluginName === 'string') {
      plugNames.push(pluginName);
    } else if ((typeof pluginName === 'undefined' ? 'undefined' : _typeof(pluginName)) === 'object' && typeof pluginName[0] === 'string') {
      plugNames.concat(pluginName);
    } else {
      console.error('Plugin names must be strings');
    }
  }
  if (yetiBoxes.length) {
    var listeners = plugNames.map(function (name) {
      return 'closeme.zf.' + name;
    }).join(' ');

    (0, _jquery2.default)(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
  }
};

function debounceGlobalListener(debounce, trigger, listener) {
  var timer = void 0,
      args = Array.prototype.slice.call(arguments, 3);
  (0, _jquery2.default)(window).off(trigger).on(trigger, function (e) {
    if (timer) {
      clearTimeout(timer);
    }
    timer = setTimeout(function () {
      listener.apply(null, args);
    }, debounce || 10); //default time to emit scroll event
  });
}

Triggers.Initializers.addResizeListener = function (debounce) {
  var $nodes = (0, _jquery2.default)('[data-resize]');
  if ($nodes.length) {
    debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
  }
};

Triggers.Initializers.addScrollListener = function (debounce) {
  var $nodes = (0, _jquery2.default)('[data-scroll]');
  if ($nodes.length) {
    debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
  }
};

Triggers.Initializers.addMutationEventsListener = function ($elem) {
  if (!MutationObserver) {
    return false;
  }
  var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

  //element callback
  var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
    var $target = (0, _jquery2.default)(mutationRecordsList[0].target);

    //trigger the event handler for the element depending on type
    switch (mutationRecordsList[0].type) {
      case "attributes":
        if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
        }
        if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
          $target.triggerHandler('resizeme.zf.trigger', [$target]);
        }
        if (mutationRecordsList[0].attributeName === "style") {
          $target.closest("[data-mutate]").attr("data-events", "mutate");
          $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
        }
        break;

      case "childList":
        $target.closest("[data-mutate]").attr("data-events", "mutate");
        $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
        break;

      default:
        return false;
      //nothing
    }
  };

  if ($nodes.length) {
    //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
    for (var i = 0; i <= $nodes.length - 1; i++) {
      var elementObserver = new MutationObserver(listeningElementsMutation);
      elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
    }
  }
};

Triggers.Initializers.addSimpleListeners = function () {
  var $document = (0, _jquery2.default)(document);

  Triggers.Initializers.addOpenListener($document);
  Triggers.Initializers.addCloseListener($document);
  Triggers.Initializers.addToggleListener($document);
  Triggers.Initializers.addCloseableListener($document);
  Triggers.Initializers.addToggleFocusListener($document);
};

Triggers.Initializers.addGlobalListeners = function () {
  var $document = (0, _jquery2.default)(document);
  Triggers.Initializers.addMutationEventsListener($document);
  Triggers.Initializers.addResizeListener();
  Triggers.Initializers.addScrollListener();
  Triggers.Initializers.addClosemeListener();
};

Triggers.init = function ($, Foundation) {
  if (typeof $.triggersInitialized === 'undefined') {
    var $document = $(document);

    if (document.readyState === "complete") {
      Triggers.Initializers.addSimpleListeners();
      Triggers.Initializers.addGlobalListeners();
    } else {
      $(window).on('load', function () {
        Triggers.Initializers.addSimpleListeners();
        Triggers.Initializers.addGlobalListeners();
      });
    }

    $.triggersInitialized = true;
  }

  if (Foundation) {
    Foundation.Triggers = Triggers;
    // Legacy included to be backwards compatible for now.
    Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
  }
};

exports.Triggers = Triggers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/foundation-sites/js/foundation.util.triggers.js","/../../node_modules/foundation-sites/js")
},{"./foundation.util.motion":33,"b55mWE":41,"buffer":40,"jquery":43}],38:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * Fuse.js v3.2.0 - Lightweight fuzzy-search (http://fusejs.io)
 * 
 * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)
 * All Rights Reserved. Apache Software License 2.0
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Fuse", [], factory);
	else if(typeof exports === 'object')
		exports["Fuse"] = factory();
	else
		root["Fuse"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var bitapRegexSearch = __webpack_require__(5);
var bitapSearch = __webpack_require__(7);
var patternAlphabet = __webpack_require__(4);

var Bitap = function () {
  function Bitap(pattern, _ref) {
    var _ref$location = _ref.location,
        location = _ref$location === undefined ? 0 : _ref$location,
        _ref$distance = _ref.distance,
        distance = _ref$distance === undefined ? 100 : _ref$distance,
        _ref$threshold = _ref.threshold,
        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,
        _ref$maxPatternLength = _ref.maxPatternLength,
        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,
        _ref$isCaseSensitive = _ref.isCaseSensitive,
        isCaseSensitive = _ref$isCaseSensitive === undefined ? false : _ref$isCaseSensitive,
        _ref$tokenSeparator = _ref.tokenSeparator,
        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,
        _ref$findAllMatches = _ref.findAllMatches,
        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,
        _ref$minMatchCharLeng = _ref.minMatchCharLength,
        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;

    _classCallCheck(this, Bitap);

    this.options = {
      location: location,
      distance: distance,
      threshold: threshold,
      maxPatternLength: maxPatternLength,
      isCaseSensitive: isCaseSensitive,
      tokenSeparator: tokenSeparator,
      findAllMatches: findAllMatches,
      minMatchCharLength: minMatchCharLength
    };

    this.pattern = this.options.isCaseSensitive ? pattern : pattern.toLowerCase();

    if (this.pattern.length <= maxPatternLength) {
      this.patternAlphabet = patternAlphabet(this.pattern);
    }
  }

  _createClass(Bitap, [{
    key: 'search',
    value: function search(text) {
      if (!this.options.isCaseSensitive) {
        text = text.toLowerCase();
      }

      // Exact match
      if (this.pattern === text) {
        return {
          isMatch: true,
          score: 0,
          matchedIndices: [[0, text.length - 1]]
        };
      }

      // When pattern length is greater than the machine word length, just do a a regex comparison
      var _options = this.options,
          maxPatternLength = _options.maxPatternLength,
          tokenSeparator = _options.tokenSeparator;

      if (this.pattern.length > maxPatternLength) {
        return bitapRegexSearch(text, this.pattern, tokenSeparator);
      }

      // Otherwise, use Bitap algorithm
      var _options2 = this.options,
          location = _options2.location,
          distance = _options2.distance,
          threshold = _options2.threshold,
          findAllMatches = _options2.findAllMatches,
          minMatchCharLength = _options2.minMatchCharLength;

      return bitapSearch(text, this.pattern, this.patternAlphabet, {
        location: location,
        distance: distance,
        threshold: threshold,
        findAllMatches: findAllMatches,
        minMatchCharLength: minMatchCharLength
      });
    }
  }]);

  return Bitap;
}();

// let x = new Bitap("od mn war", {})
// let result = x.search("Old Man's War")
// console.log(result)

module.exports = Bitap;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArray = __webpack_require__(0);

var deepValue = function deepValue(obj, path, list) {
  if (!path) {
    // If there's no path left, we've gotten to the object we care about.
    list.push(obj);
  } else {
    var dotIndex = path.indexOf('.');
    var firstSegment = path;
    var remaining = null;

    if (dotIndex !== -1) {
      firstSegment = path.slice(0, dotIndex);
      remaining = path.slice(dotIndex + 1);
    }

    var value = obj[firstSegment];

    if (value !== null && value !== undefined) {
      if (!remaining && (typeof value === 'string' || typeof value === 'number')) {
        list.push(value.toString());
      } else if (isArray(value)) {
        // Search each item in the array.
        for (var i = 0, len = value.length; i < len; i += 1) {
          deepValue(value[i], remaining, list);
        }
      } else if (remaining) {
        // An object. Recurse further.
        deepValue(value, remaining, list);
      }
    }
  }

  return list;
};

module.exports = function (obj, path) {
  return deepValue(obj, path, []);
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var matchedIndices = [];
  var start = -1;
  var end = -1;
  var i = 0;

  for (var len = matchmask.length; i < len; i += 1) {
    var match = matchmask[i];
    if (match && start === -1) {
      start = i;
    } else if (!match && start !== -1) {
      end = i - 1;
      if (end - start + 1 >= minMatchCharLength) {
        matchedIndices.push([start, end]);
      }
      start = -1;
    }
  }

  // (i-1 - start) + 1 => i - start
  if (matchmask[i - 1] && i - start >= minMatchCharLength) {
    matchedIndices.push([start, i - 1]);
  }

  return matchedIndices;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (pattern) {
  var mask = {};
  var len = pattern.length;

  for (var i = 0; i < len; i += 1) {
    mask[pattern.charAt(i)] = 0;
  }

  for (var _i = 0; _i < len; _i += 1) {
    mask[pattern.charAt(_i)] |= 1 << len - _i - 1;
  }

  return mask;
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var SPECIAL_CHARS_REGEX = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;

module.exports = function (text, pattern) {
  var tokenSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : / +/g;

  var regex = new RegExp(pattern.replace(SPECIAL_CHARS_REGEX, '\\$&').replace(tokenSeparator, '|'));
  var matches = text.match(regex);
  var isMatch = !!matches;
  var matchedIndices = [];

  if (isMatch) {
    for (var i = 0, matchesLen = matches.length; i < matchesLen; i += 1) {
      var match = matches[i];
      matchedIndices.push([text.indexOf(match), match.length - 1]);
    }
  }

  return {
    // TODO: revisit this score
    score: isMatch ? 0.5 : 1,
    isMatch: isMatch,
    matchedIndices: matchedIndices
  };
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (pattern, _ref) {
  var _ref$errors = _ref.errors,
      errors = _ref$errors === undefined ? 0 : _ref$errors,
      _ref$currentLocation = _ref.currentLocation,
      currentLocation = _ref$currentLocation === undefined ? 0 : _ref$currentLocation,
      _ref$expectedLocation = _ref.expectedLocation,
      expectedLocation = _ref$expectedLocation === undefined ? 0 : _ref$expectedLocation,
      _ref$distance = _ref.distance,
      distance = _ref$distance === undefined ? 100 : _ref$distance;

  var accuracy = errors / pattern.length;
  var proximity = Math.abs(expectedLocation - currentLocation);

  if (!distance) {
    // Dodge divide by zero error.
    return proximity ? 1.0 : accuracy;
  }

  return accuracy + proximity / distance;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bitapScore = __webpack_require__(6);
var matchedIndices = __webpack_require__(3);

module.exports = function (text, pattern, patternAlphabet, _ref) {
  var _ref$location = _ref.location,
      location = _ref$location === undefined ? 0 : _ref$location,
      _ref$distance = _ref.distance,
      distance = _ref$distance === undefined ? 100 : _ref$distance,
      _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,
      _ref$findAllMatches = _ref.findAllMatches,
      findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,
      _ref$minMatchCharLeng = _ref.minMatchCharLength,
      minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng;

  var expectedLocation = location;
  // Set starting location at beginning text and initialize the alphabet.
  var textLen = text.length;
  // Highest score beyond which we give up.
  var currentThreshold = threshold;
  // Is there a nearby exact match? (speedup)
  var bestLocation = text.indexOf(pattern, expectedLocation);

  var patternLen = pattern.length;

  // a mask of the matches
  var matchMask = [];
  for (var i = 0; i < textLen; i += 1) {
    matchMask[i] = 0;
  }

  if (bestLocation !== -1) {
    var score = bitapScore(pattern, {
      errors: 0,
      currentLocation: bestLocation,
      expectedLocation: expectedLocation,
      distance: distance
    });
    currentThreshold = Math.min(score, currentThreshold);

    // What about in the other direction? (speed up)
    bestLocation = text.lastIndexOf(pattern, expectedLocation + patternLen);

    if (bestLocation !== -1) {
      var _score = bitapScore(pattern, {
        errors: 0,
        currentLocation: bestLocation,
        expectedLocation: expectedLocation,
        distance: distance
      });
      currentThreshold = Math.min(_score, currentThreshold);
    }
  }

  // Reset the best location
  bestLocation = -1;

  var lastBitArr = [];
  var finalScore = 1;
  var binMax = patternLen + textLen;

  var mask = 1 << patternLen - 1;

  for (var _i = 0; _i < patternLen; _i += 1) {
    // Scan for the best match; each iteration allows for one more error.
    // Run a binary search to determine how far from the match location we can stray
    // at this error level.
    var binMin = 0;
    var binMid = binMax;

    while (binMin < binMid) {
      var _score3 = bitapScore(pattern, {
        errors: _i,
        currentLocation: expectedLocation + binMid,
        expectedLocation: expectedLocation,
        distance: distance
      });

      if (_score3 <= currentThreshold) {
        binMin = binMid;
      } else {
        binMax = binMid;
      }

      binMid = Math.floor((binMax - binMin) / 2 + binMin);
    }

    // Use the result from this iteration as the maximum for the next.
    binMax = binMid;

    var start = Math.max(1, expectedLocation - binMid + 1);
    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;

    // Initialize the bit array
    var bitArr = Array(finish + 2);

    bitArr[finish + 1] = (1 << _i) - 1;

    for (var j = finish; j >= start; j -= 1) {
      var currentLocation = j - 1;
      var charMatch = patternAlphabet[text.charAt(currentLocation)];

      if (charMatch) {
        matchMask[currentLocation] = 1;
      }

      // First pass: exact match
      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;

      // Subsequent passes: fuzzy match
      if (_i !== 0) {
        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
      }

      if (bitArr[j] & mask) {
        finalScore = bitapScore(pattern, {
          errors: _i,
          currentLocation: currentLocation,
          expectedLocation: expectedLocation,
          distance: distance
        });

        // This match will almost certainly be better than any existing match.
        // But check anyway.
        if (finalScore <= currentThreshold) {
          // Indeed it is
          currentThreshold = finalScore;
          bestLocation = currentLocation;

          // Already passed `loc`, downhill from here on in.
          if (bestLocation <= expectedLocation) {
            break;
          }

          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.
          start = Math.max(1, 2 * expectedLocation - bestLocation);
        }
      }
    }

    // No hope for a (better) match at greater error levels.
    var _score2 = bitapScore(pattern, {
      errors: _i + 1,
      currentLocation: expectedLocation,
      expectedLocation: expectedLocation,
      distance: distance
    });

    if (_score2 > currentThreshold) {
      break;
    }

    lastBitArr = bitArr;
  }

  // Count exact matches (those with a score of 0) to be "almost" exact
  return {
    isMatch: bestLocation >= 0,
    score: finalScore === 0 ? 0.001 : finalScore,
    matchedIndices: matchedIndices(matchMask, minMatchCharLength)
  };
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bitap = __webpack_require__(1);
var deepValue = __webpack_require__(2);
var isArray = __webpack_require__(0);

var Fuse = function () {
  function Fuse(list, _ref) {
    var _ref$location = _ref.location,
        location = _ref$location === undefined ? 0 : _ref$location,
        _ref$distance = _ref.distance,
        distance = _ref$distance === undefined ? 100 : _ref$distance,
        _ref$threshold = _ref.threshold,
        threshold = _ref$threshold === undefined ? 0.6 : _ref$threshold,
        _ref$maxPatternLength = _ref.maxPatternLength,
        maxPatternLength = _ref$maxPatternLength === undefined ? 32 : _ref$maxPatternLength,
        _ref$caseSensitive = _ref.caseSensitive,
        caseSensitive = _ref$caseSensitive === undefined ? false : _ref$caseSensitive,
        _ref$tokenSeparator = _ref.tokenSeparator,
        tokenSeparator = _ref$tokenSeparator === undefined ? / +/g : _ref$tokenSeparator,
        _ref$findAllMatches = _ref.findAllMatches,
        findAllMatches = _ref$findAllMatches === undefined ? false : _ref$findAllMatches,
        _ref$minMatchCharLeng = _ref.minMatchCharLength,
        minMatchCharLength = _ref$minMatchCharLeng === undefined ? 1 : _ref$minMatchCharLeng,
        _ref$id = _ref.id,
        id = _ref$id === undefined ? null : _ref$id,
        _ref$keys = _ref.keys,
        keys = _ref$keys === undefined ? [] : _ref$keys,
        _ref$shouldSort = _ref.shouldSort,
        shouldSort = _ref$shouldSort === undefined ? true : _ref$shouldSort,
        _ref$getFn = _ref.getFn,
        getFn = _ref$getFn === undefined ? deepValue : _ref$getFn,
        _ref$sortFn = _ref.sortFn,
        sortFn = _ref$sortFn === undefined ? function (a, b) {
      return a.score - b.score;
    } : _ref$sortFn,
        _ref$tokenize = _ref.tokenize,
        tokenize = _ref$tokenize === undefined ? false : _ref$tokenize,
        _ref$matchAllTokens = _ref.matchAllTokens,
        matchAllTokens = _ref$matchAllTokens === undefined ? false : _ref$matchAllTokens,
        _ref$includeMatches = _ref.includeMatches,
        includeMatches = _ref$includeMatches === undefined ? false : _ref$includeMatches,
        _ref$includeScore = _ref.includeScore,
        includeScore = _ref$includeScore === undefined ? false : _ref$includeScore,
        _ref$verbose = _ref.verbose,
        verbose = _ref$verbose === undefined ? false : _ref$verbose;

    _classCallCheck(this, Fuse);

    this.options = {
      location: location,
      distance: distance,
      threshold: threshold,
      maxPatternLength: maxPatternLength,
      isCaseSensitive: caseSensitive,
      tokenSeparator: tokenSeparator,
      findAllMatches: findAllMatches,
      minMatchCharLength: minMatchCharLength,
      id: id,
      keys: keys,
      includeMatches: includeMatches,
      includeScore: includeScore,
      shouldSort: shouldSort,
      getFn: getFn,
      sortFn: sortFn,
      verbose: verbose,
      tokenize: tokenize,
      matchAllTokens: matchAllTokens
    };

    this.setCollection(list);
  }

  _createClass(Fuse, [{
    key: 'setCollection',
    value: function setCollection(list) {
      this.list = list;
      return list;
    }
  }, {
    key: 'search',
    value: function search(pattern) {
      this._log('---------\nSearch pattern: "' + pattern + '"');

      var _prepareSearchers2 = this._prepareSearchers(pattern),
          tokenSearchers = _prepareSearchers2.tokenSearchers,
          fullSearcher = _prepareSearchers2.fullSearcher;

      var _search2 = this._search(tokenSearchers, fullSearcher),
          weights = _search2.weights,
          results = _search2.results;

      this._computeScore(weights, results);

      if (this.options.shouldSort) {
        this._sort(results);
      }

      return this._format(results);
    }
  }, {
    key: '_prepareSearchers',
    value: function _prepareSearchers() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var tokenSearchers = [];

      if (this.options.tokenize) {
        // Tokenize on the separator
        var tokens = pattern.split(this.options.tokenSeparator);
        for (var i = 0, len = tokens.length; i < len; i += 1) {
          tokenSearchers.push(new Bitap(tokens[i], this.options));
        }
      }

      var fullSearcher = new Bitap(pattern, this.options);

      return { tokenSearchers: tokenSearchers, fullSearcher: fullSearcher };
    }
  }, {
    key: '_search',
    value: function _search() {
      var tokenSearchers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var fullSearcher = arguments[1];

      var list = this.list;
      var resultMap = {};
      var results = [];

      // Check the first item in the list, if it's a string, then we assume
      // that every item in the list is also a string, and thus it's a flattened array.
      if (typeof list[0] === 'string') {
        // Iterate over every item
        for (var i = 0, len = list.length; i < len; i += 1) {
          this._analyze({
            key: '',
            value: list[i],
            record: i,
            index: i
          }, {
            resultMap: resultMap,
            results: results,
            tokenSearchers: tokenSearchers,
            fullSearcher: fullSearcher
          });
        }

        return { weights: null, results: results };
      }

      // Otherwise, the first item is an Object (hopefully), and thus the searching
      // is done on the values of the keys of each item.
      var weights = {};
      for (var _i = 0, _len = list.length; _i < _len; _i += 1) {
        var item = list[_i];
        // Iterate over every key
        for (var j = 0, keysLen = this.options.keys.length; j < keysLen; j += 1) {
          var key = this.options.keys[j];
          if (typeof key !== 'string') {
            weights[key.name] = {
              weight: 1 - key.weight || 1
            };
            if (key.weight <= 0 || key.weight > 1) {
              throw new Error('Key weight has to be > 0 and <= 1');
            }
            key = key.name;
          } else {
            weights[key] = {
              weight: 1
            };
          }

          this._analyze({
            key: key,
            value: this.options.getFn(item, key),
            record: item,
            index: _i
          }, {
            resultMap: resultMap,
            results: results,
            tokenSearchers: tokenSearchers,
            fullSearcher: fullSearcher
          });
        }
      }

      return { weights: weights, results: results };
    }
  }, {
    key: '_analyze',
    value: function _analyze(_ref2, _ref3) {
      var key = _ref2.key,
          _ref2$arrayIndex = _ref2.arrayIndex,
          arrayIndex = _ref2$arrayIndex === undefined ? -1 : _ref2$arrayIndex,
          value = _ref2.value,
          record = _ref2.record,
          index = _ref2.index;
      var _ref3$tokenSearchers = _ref3.tokenSearchers,
          tokenSearchers = _ref3$tokenSearchers === undefined ? [] : _ref3$tokenSearchers,
          _ref3$fullSearcher = _ref3.fullSearcher,
          fullSearcher = _ref3$fullSearcher === undefined ? [] : _ref3$fullSearcher,
          _ref3$resultMap = _ref3.resultMap,
          resultMap = _ref3$resultMap === undefined ? {} : _ref3$resultMap,
          _ref3$results = _ref3.results,
          results = _ref3$results === undefined ? [] : _ref3$results;

      // Check if the texvaluet can be searched
      if (value === undefined || value === null) {
        return;
      }

      var exists = false;
      var averageScore = -1;
      var numTextMatches = 0;

      if (typeof value === 'string') {
        this._log('\nKey: ' + (key === '' ? '-' : key));

        var mainSearchResult = fullSearcher.search(value);
        this._log('Full text: "' + value + '", score: ' + mainSearchResult.score);

        if (this.options.tokenize) {
          var words = value.split(this.options.tokenSeparator);
          var scores = [];

          for (var i = 0; i < tokenSearchers.length; i += 1) {
            var tokenSearcher = tokenSearchers[i];

            this._log('\nPattern: "' + tokenSearcher.pattern + '"');

            // let tokenScores = []
            var hasMatchInText = false;

            for (var j = 0; j < words.length; j += 1) {
              var word = words[j];
              var tokenSearchResult = tokenSearcher.search(word);
              var obj = {};
              if (tokenSearchResult.isMatch) {
                obj[word] = tokenSearchResult.score;
                exists = true;
                hasMatchInText = true;
                scores.push(tokenSearchResult.score);
              } else {
                obj[word] = 1;
                if (!this.options.matchAllTokens) {
                  scores.push(1);
                }
              }
              this._log('Token: "' + word + '", score: ' + obj[word]);
              // tokenScores.push(obj)
            }

            if (hasMatchInText) {
              numTextMatches += 1;
            }
          }

          averageScore = scores[0];
          var scoresLen = scores.length;
          for (var _i2 = 1; _i2 < scoresLen; _i2 += 1) {
            averageScore += scores[_i2];
          }
          averageScore = averageScore / scoresLen;

          this._log('Token score average:', averageScore);
        }

        var finalScore = mainSearchResult.score;
        if (averageScore > -1) {
          finalScore = (finalScore + averageScore) / 2;
        }

        this._log('Score average:', finalScore);

        var checkTextMatches = this.options.tokenize && this.options.matchAllTokens ? numTextMatches >= tokenSearchers.length : true;

        this._log('\nCheck Matches: ' + checkTextMatches);

        // If a match is found, add the item to <rawResults>, including its score
        if ((exists || mainSearchResult.isMatch) && checkTextMatches) {
          // Check if the item already exists in our results
          var existingResult = resultMap[index];
          if (existingResult) {
            // Use the lowest score
            // existingResult.score, bitapResult.score
            existingResult.output.push({
              key: key,
              arrayIndex: arrayIndex,
              value: value,
              score: finalScore,
              matchedIndices: mainSearchResult.matchedIndices
            });
          } else {
            // Add it to the raw result list
            resultMap[index] = {
              item: record,
              output: [{
                key: key,
                arrayIndex: arrayIndex,
                value: value,
                score: finalScore,
                matchedIndices: mainSearchResult.matchedIndices
              }]
            };

            results.push(resultMap[index]);
          }
        }
      } else if (isArray(value)) {
        for (var _i3 = 0, len = value.length; _i3 < len; _i3 += 1) {
          this._analyze({
            key: key,
            arrayIndex: _i3,
            value: value[_i3],
            record: record,
            index: index
          }, {
            resultMap: resultMap,
            results: results,
            tokenSearchers: tokenSearchers,
            fullSearcher: fullSearcher
          });
        }
      }
    }
  }, {
    key: '_computeScore',
    value: function _computeScore(weights, results) {
      this._log('\n\nComputing score:\n');

      for (var i = 0, len = results.length; i < len; i += 1) {
        var output = results[i].output;
        var scoreLen = output.length;

        var totalScore = 0;
        var bestScore = 1;

        for (var j = 0; j < scoreLen; j += 1) {
          var weight = weights ? weights[output[j].key].weight : 1;
          var score = weight === 1 ? output[j].score : output[j].score || 0.001;
          var nScore = score * weight;

          if (weight !== 1) {
            bestScore = Math.min(bestScore, nScore);
          } else {
            output[j].nScore = nScore;
            totalScore += nScore;
          }
        }

        results[i].score = bestScore === 1 ? totalScore / scoreLen : bestScore;

        this._log(results[i]);
      }
    }
  }, {
    key: '_sort',
    value: function _sort(results) {
      this._log('\n\nSorting....');
      results.sort(this.options.sortFn);
    }
  }, {
    key: '_format',
    value: function _format(results) {
      var finalOutput = [];

      this._log('\n\nOutput:\n\n', JSON.stringify(results));

      var transformers = [];

      if (this.options.includeMatches) {
        transformers.push(function (result, data) {
          var output = result.output;
          data.matches = [];

          for (var i = 0, len = output.length; i < len; i += 1) {
            var item = output[i];

            if (item.matchedIndices.length === 0) {
              continue;
            }

            var obj = {
              indices: item.matchedIndices,
              value: item.value
            };
            if (item.key) {
              obj.key = item.key;
            }
            if (item.hasOwnProperty('arrayIndex') && item.arrayIndex > -1) {
              obj.arrayIndex = item.arrayIndex;
            }
            data.matches.push(obj);
          }
        });
      }

      if (this.options.includeScore) {
        transformers.push(function (result, data) {
          data.score = result.score;
        });
      }

      for (var i = 0, len = results.length; i < len; i += 1) {
        var result = results[i];

        if (this.options.id) {
          result.item = this.options.getFn(result.item, this.options.id)[0];
        }

        if (!transformers.length) {
          finalOutput.push(result.item);
          continue;
        }

        var data = {
          item: result.item
        };

        for (var j = 0, _len2 = transformers.length; j < _len2; j += 1) {
          transformers[j](result, data);
        }

        finalOutput.push(data);
      }

      return finalOutput;
    }
  }, {
    key: '_log',
    value: function _log() {
      if (this.options.verbose) {
        var _console;

        (_console = console).log.apply(_console, arguments);
      }
    }
  }]);

  return Fuse;
}();

module.exports = Fuse;

/***/ })
/******/ ]);
});
//# sourceMappingURL=fuse.js.map
}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/fuse.js/dist/fuse.js","/../../node_modules/fuse.js/dist")
},{"b55mWE":41,"buffer":40}],39:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js","/../../node_modules/gulp-browserify/node_modules/base64-js/lib")
},{"b55mWE":41,"buffer":40}],40:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/buffer/index.js","/../../node_modules/gulp-browserify/node_modules/buffer")
},{"b55mWE":41,"base64-js":39,"buffer":40,"ieee754":42}],41:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/process/browser.js","/../../node_modules/gulp-browserify/node_modules/process")
},{"b55mWE":41,"buffer":40}],42:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/ieee754/index.js","/../../node_modules/ieee754")
},{"b55mWE":41,"buffer":40}],43:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/jquery/dist/jquery.js","/../../node_modules/jquery/dist")
},{"b55mWE":41,"buffer":40}],44:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

/*global define: false Mustache: true*/

(function defineMustache (global, factory) {
  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {
    factory(exports); // CommonJS
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], factory); // AMD
  } else {
    global.Mustache = {};
    factory(global.Mustache); // script, wsh, asp
  }
}(this, function mustacheFactory (mustache) {

  var objectToString = Object.prototype.toString;
  var isArray = Array.isArray || function isArrayPolyfill (object) {
    return objectToString.call(object) === '[object Array]';
  };

  function isFunction (object) {
    return typeof object === 'function';
  }

  /**
   * More correct typeof string handling array
   * which normally returns typeof 'object'
   */
  function typeStr (obj) {
    return isArray(obj) ? 'array' : typeof obj;
  }

  function escapeRegExp (string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
  }

  /**
   * Null safe way of checking whether or not an object,
   * including its prototype, has a given property
   */
  function hasProperty (obj, propName) {
    return obj != null && typeof obj === 'object' && (propName in obj);
  }

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  var regExpTest = RegExp.prototype.test;
  function testRegExp (re, string) {
    return regExpTest.call(re, string);
  }

  var nonSpaceRe = /\S/;
  function isWhitespace (string) {
    return !testRegExp(nonSpaceRe, string);
  }

  var entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };

  function escapeHtml (string) {
    return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap (s) {
      return entityMap[s];
    });
  }

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var equalsRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   */
  function parseTemplate (template, tags) {
    if (!template)
      return [];

    var sections = [];     // Stack to hold section tokens
    var tokens = [];       // Buffer to hold the tokens
    var spaces = [];       // Indices of whitespace tokens on the current line
    var hasTag = false;    // Is there a {{tag}} on the current line?
    var nonSpace = false;  // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace () {
      if (hasTag && !nonSpace) {
        while (spaces.length)
          delete tokens[spaces.pop()];
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var openingTagRe, closingTagRe, closingCurlyRe;
    function compileTags (tagsToCompile) {
      if (typeof tagsToCompile === 'string')
        tagsToCompile = tagsToCompile.split(spaceRe, 2);

      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
        throw new Error('Invalid tags: ' + tagsToCompile);

      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
      closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
    }

    compileTags(tags || mustache.tags);

    var scanner = new Scanner(template);

    var start, type, value, chr, token, openSection;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(openingTagRe);

      if (value) {
        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push([ 'text', chr, start, start + 1 ]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr === '\n')
            stripSpace();
        }
      }

      // Match the opening tag.
      if (!scanner.scan(openingTagRe))
        break;

      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(equalsRe);
        scanner.scan(equalsRe);
        scanner.scanUntil(closingTagRe);
      } else if (type === '{') {
        value = scanner.scanUntil(closingCurlyRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(closingTagRe);
        type = '&';
      } else {
        value = scanner.scanUntil(closingTagRe);
      }

      // Match the closing tag.
      if (!scanner.scan(closingTagRe))
        throw new Error('Unclosed tag at ' + scanner.pos);

      token = [ type, value, start, scanner.pos ];
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        openSection = sections.pop();

        if (!openSection)
          throw new Error('Unopened section "' + value + '" at ' + start);

        if (openSection[1] !== value)
          throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        compileTags(value);
      }
    }

    // Make sure there are no open sections when we're done.
    openSection = sections.pop();

    if (openSection)
      throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

    return nestTokens(squashTokens(tokens));
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens (tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          squashedTokens.push(token);
          lastToken = token;
        }
      }
    }

    return squashedTokens;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens (tokens) {
    var nestedTokens = [];
    var collector = nestedTokens;
    var sections = [];

    var token, section;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      switch (token[0]) {
        case '#':
        case '^':
          collector.push(token);
          sections.push(token);
          collector = token[4] = [];
          break;
        case '/':
          section = sections.pop();
          section[5] = token[2];
          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
          break;
        default:
          collector.push(token);
      }
    }

    return nestedTokens;
  }

  /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */
  function Scanner (string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function eos () {
    return this.tail === '';
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function scan (re) {
    var match = this.tail.match(re);

    if (!match || match.index !== 0)
      return '';

    var string = match[0];

    this.tail = this.tail.substring(string.length);
    this.pos += string.length;

    return string;
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function scanUntil (re) {
    var index = this.tail.search(re), match;

    switch (index) {
      case -1:
        match = this.tail;
        this.tail = '';
        break;
      case 0:
        match = '';
        break;
      default:
        match = this.tail.substring(0, index);
        this.tail = this.tail.substring(index);
    }

    this.pos += match.length;

    return match;
  };

  /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */
  function Context (view, parentContext) {
    this.view = view;
    this.cache = { '.': this.view };
    this.parent = parentContext;
  }

  /**
   * Creates a new context using the given view with this context
   * as the parent.
   */
  Context.prototype.push = function push (view) {
    return new Context(view, this);
  };

  /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */
  Context.prototype.lookup = function lookup (name) {
    var cache = this.cache;

    var value;
    if (cache.hasOwnProperty(name)) {
      value = cache[name];
    } else {
      var context = this, names, index, lookupHit = false;

      while (context) {
        if (name.indexOf('.') > 0) {
          value = context.view;
          names = name.split('.');
          index = 0;

          /**
           * Using the dot notion path in `name`, we descend through the
           * nested objects.
           *
           * To be certain that the lookup has been successful, we have to
           * check if the last object in the path actually has the property
           * we are looking for. We store the result in `lookupHit`.
           *
           * This is specially necessary for when the value has been set to
           * `undefined` and we want to avoid looking up parent contexts.
           **/
          while (value != null && index < names.length) {
            if (index === names.length - 1)
              lookupHit = hasProperty(value, names[index]);

            value = value[names[index++]];
          }
        } else {
          value = context.view[name];
          lookupHit = hasProperty(context.view, name);
        }

        if (lookupHit)
          break;

        context = context.parent;
      }

      cache[name] = value;
    }

    if (isFunction(value))
      value = value.call(this.view);

    return value;
  };

  /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */
  function Writer () {
    this.cache = {};
  }

  /**
   * Clears all cached templates in this writer.
   */
  Writer.prototype.clearCache = function clearCache () {
    this.cache = {};
  };

  /**
   * Parses and caches the given `template` and returns the array of tokens
   * that is generated from the parse.
   */
  Writer.prototype.parse = function parse (template, tags) {
    var cache = this.cache;
    var tokens = cache[template];

    if (tokens == null)
      tokens = cache[template] = parseTemplate(template, tags);

    return tokens;
  };

  /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   */
  Writer.prototype.render = function render (template, view, partials) {
    var tokens = this.parse(template);
    var context = (view instanceof Context) ? view : new Context(view);
    return this.renderTokens(tokens, context, partials, template);
  };

  /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */
  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {
    var buffer = '';

    var token, symbol, value;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      value = undefined;
      token = tokens[i];
      symbol = token[0];

      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);
      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);
      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);
      else if (symbol === '&') value = this.unescapedValue(token, context);
      else if (symbol === 'name') value = this.escapedValue(token, context);
      else if (symbol === 'text') value = this.rawValue(token);

      if (value !== undefined)
        buffer += value;
    }

    return buffer;
  };

  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {
    var self = this;
    var buffer = '';
    var value = context.lookup(token[1]);

    // This function is used to render an arbitrary template
    // in the current context by higher-order sections.
    function subRender (template) {
      return self.render(template, context, partials);
    }

    if (!value) return;

    if (isArray(value)) {
      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
      }
    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
    } else if (isFunction(value)) {
      if (typeof originalTemplate !== 'string')
        throw new Error('Cannot use higher-order sections without the original template');

      // Extract the portion of the original template that the section contains.
      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

      if (value != null)
        buffer += value;
    } else {
      buffer += this.renderTokens(token[4], context, partials, originalTemplate);
    }
    return buffer;
  };

  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {
    var value = context.lookup(token[1]);

    // Use JavaScript's definition of falsy. Include empty arrays.
    // See https://github.com/janl/mustache.js/issues/186
    if (!value || (isArray(value) && value.length === 0))
      return this.renderTokens(token[4], context, partials, originalTemplate);
  };

  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {
    if (!partials) return;

    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
    if (value != null)
      return this.renderTokens(this.parse(value), context, partials, value);
  };

  Writer.prototype.unescapedValue = function unescapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return value;
  };

  Writer.prototype.escapedValue = function escapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return mustache.escape(value);
  };

  Writer.prototype.rawValue = function rawValue (token) {
    return token[1];
  };

  mustache.name = 'mustache.js';
  mustache.version = '2.3.0';
  mustache.tags = [ '{{', '}}' ];

  // All high-level mustache.* functions use this writer.
  var defaultWriter = new Writer();

  /**
   * Clears all cached templates in the default writer.
   */
  mustache.clearCache = function clearCache () {
    return defaultWriter.clearCache();
  };

  /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */
  mustache.parse = function parse (template, tags) {
    return defaultWriter.parse(template, tags);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  mustache.render = function render (template, view, partials) {
    if (typeof template !== 'string') {
      throw new TypeError('Invalid template! Template should be a "string" ' +
                          'but "' + typeStr(template) + '" was given as the first ' +
                          'argument for mustache#render(template, view, partials)');
    }

    return defaultWriter.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.,
  /*eslint-disable */ // eslint wants camel cased function name
  mustache.to_html = function to_html (template, view, partials, send) {
    /*eslint-enable*/

    var result = mustache.render(template, view, partials);

    if (isFunction(send)) {
      send(result);
    } else {
      return result;
    }
  };

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  mustache.escape = escapeHtml;

  // Export these mainly for testing, but also for advanced usage.
  mustache.Scanner = Scanner;
  mustache.Context = Context;
  mustache.Writer = Writer;

  return mustache;
}));

}).call(this,require("b55mWE"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/mustache/mustache.js","/../../node_modules/mustache")
},{"b55mWE":41,"buffer":40}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vYXNzZXRzL2pzL1V0aWxzLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL2Fzc2V0cy9qcy9mYWtlX2MwNmNjNzYzLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2Rpc3QvanMvbnBtLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uYWJpZGUuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5hY2NvcmRpb24uanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5hY2NvcmRpb25NZW51LmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uY29yZS5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmRyaWxsZG93bi5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmRyb3Bkb3duLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uZHJvcGRvd25NZW51LmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uZXF1YWxpemVyLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uaW50ZXJjaGFuZ2UuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5tYWdlbGxhbi5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLm9mZmNhbnZhcy5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLm9yYml0LmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24ucGx1Z2luLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24ucG9zaXRpb25hYmxlLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24ucmVzcG9uc2l2ZUFjY29yZGlvblRhYnMuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5yZXNwb25zaXZlTWVudS5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5yZXZlYWwuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5zbGlkZXIuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5zbW9vdGhTY3JvbGwuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5zdGlja3kuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi50YWJzLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udG9nZ2xlci5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnRvb2x0aXAuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLmJveC5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnV0aWwuY29yZS5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXIuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLmtleWJvYXJkLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5LmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udXRpbC5tb3Rpb24uanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLm5lc3QuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLnRpbWVyLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2Z1c2UuanMvZGlzdC9mdXNlLmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9saWIvYjY0LmpzIiwiL2hvbWUvYWxleC9Qcm9qZWN0cy9hbGV4d3lldHQuZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvZ3VscC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCIvaG9tZS9hbGV4L1Byb2plY3RzL2FsZXh3eWV0dC5naXRodWIuaW8vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIi9ob21lL2FsZXgvUHJvamVjdHMvYWxleHd5ZXR0LmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvbXVzdGFjaGUvbXVzdGFjaGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeldBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeGRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDblpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNubkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNWxCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3b0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0eUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdGtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbGdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcitCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2bENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzluVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbnZhciBGdXNlID0gcmVxdWlyZSgnZnVzZS5qcycpO1xudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBNdXN0YWNoZSA9IHJlcXVpcmUoJ211c3RhY2hlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1cmxQYXJhbTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciByZXN1bHRzID0gbmV3IFJlZ0V4cCgnW1xcPyZdJyArIG5hbWUgKyAnPShbXiYjXSopJykuZXhlYyh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgaWYgKHJlc3VsdHM9PW51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJKHJlc3VsdHNbMV0pIHx8IDA7XG4gICAgfVxuICB9LFxuICBzaXRlU2VhcmNoOiBmdW5jdGlvbihwYXJhbSkge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzaG91bGRTb3J0OiB0cnVlLFxuICAgICAgICB0aHJlc2hvbGQ6IDAuMyxcbiAgICAgICAgbG9jYXRpb246IDAsXG4gICAgICAgIGRpc3RhbmNlOiAxMDAsXG4gICAgICAgIG1heFBhdHRlcm5MZW5ndGg6IDMyLFxuICAgICAgICBtaW5NYXRjaENoYXJMZW5ndGg6IDIsXG4gICAgICAgIGluY2x1ZGVTY29yZTogdHJ1ZSxcbiAgICAgICAga2V5czogW1xuICAgICAgICAgICd0aXRsZScsXG4gICAgICAgICAgJ3RhZ3MnXG4gICAgICBdXG4gICAgfTtcblxuICAgIHZhciBmID0gbmV3IEZ1c2UodHlwZW9mIHBhZ2VzICE9PSAndW5kZWZpbmVkJyA/IHBhZ2VzIDogW10sIG9wdGlvbnMpO1xuICAgIHZhciB0cGwgPSAne3sjcmVzdWx0cy5sZW5ndGh9fTxkaXYgY2xhc3M9XCJpbm5lclwiPnt7I3Jlc3VsdHN9fScgKyBcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cImNhbGxvdXRcIiBkYXRhLWNsb3NhYmxlPicgK1xuICAgICAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cInt7aXRlbS5ocmVmfX1cIj57e2l0ZW0udGl0bGV9fSAmcmFxdW87PC9hPicgK1xuICAgICAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICAgICAne3sjaXRlbS50YWdzLmxlbmd0aH19PHAgY2xhc3M9XCJ0YWdzXCI+e3sjaXRlbS50YWdzfX08YSBocmVmPVwiLz9zPXt7Ln19XCI+e3sufX08L2E+e3svaXRlbS50YWdzfX08L3A+e3svaXRlbS50YWdzLmxlbmd0aH19JyArIFxuICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImNsb3NlLWJ1dHRvblwiIGFyaWEtbGFiZWw9XCJEaXNtaXNzIGFsZXJ0XCIgdHlwZT1cImJ1dHRvblwiIGRhdGEtY2xvc2U+JyArIFxuICAgICAgICAgICAgICAgICc8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPicgKyBcbiAgICAgICAgICAgICAgJzwvYnV0dG9uPicgKyBcbiAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICd7ey9yZXN1bHRzfX17ey9yZXN1bHRzLmxlbmd0aH19JztcblxuICAgIHZhciBuciA9IGZ1bmN0aW9uKCkge1xuICAgICAgJCgnI3Jlc3VsdHMnKS5odG1sKFxuICAgICAgICAnPGRpdiBjbGFzcz1cImNhbGxvdXRcIiBkYXRhLWNsb3NhYmxlPicgKyBcbiAgICAgICAgICAnPHA+Tm8gcmVzdWx0cyBmb3VuZDwvcD4nICsgXG4gICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJjbG9zZS1idXR0b25cIiBhcmlhLWxhYmVsPVwiRGlzbWlzcyBhbGVydFwiIHR5cGU9XCJidXR0b25cIiBkYXRhLWNsb3NlPicgKyBcbiAgICAgICAgICAgICc8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPicgKyBcbiAgICAgICAgICAnPC9idXR0b24+JyArIFxuICAgICAgICAnPC9kaXY+J1xuICAgICAgKTtcbiAgICB9O1xuXG4gICAgdmFyIHNlYXJjaCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgdmFsID0gKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSA/IHZhbCA6ICcnO1xuXG4gICAgICBpZiAodmFsLmxlbmd0aCA8PSAyKSB7XG4gICAgICAgICQoJyNyZXN1bHRzJykuaHRtbCgnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgciA9IGYuc2VhcmNoKHZhbCk7XG4gICAgICAgIGlmIChyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIG5yKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJChcIiNyZXN1bHRzXCIpLmh0bWwoXG4gICAgICAgICAgICBNdXN0YWNoZS5yZW5kZXIoXG4gICAgICAgICAgICAgIHRwbCxcbiAgICAgICAgICAgICAgeyByZXN1bHRzOiByIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApOyBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc2VhcmNoKHBhcmFtKTtcbiAgfVxufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9VdGlscy5qc1wiLFwiL1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJyk7XG52YXIgRm91bmRhdGlvbiA9IHJlcXVpcmUoJ2ZvdW5kYXRpb24tc2l0ZXMvZGlzdC9qcy9ucG0nKTtcbiQoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcblxuJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICQoJ2lucHV0W3R5cGU9c2VhcmNoXScpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xuICAgIFV0aWxzLnNpdGVTZWFyY2goJCh0aGlzKS52YWwoKSk7XG4gIH0pO1xuXG4gIGlmIChVdGlscy51cmxQYXJhbSgncycpICYmIFV0aWxzLnVybFBhcmFtKCdzJykubGVuZ3RoID4gMCkge1xuICAgICQoJ2lucHV0W3R5cGU9c2VhcmNoXScpLnZhbChVdGlscy51cmxQYXJhbSgncycpKTtcbiAgICBVdGlscy5zaXRlU2VhcmNoKFV0aWxzLnVybFBhcmFtKCdzJykpO1xuICB9XG59KTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvZmFrZV9jMDZjYzc2My5qc1wiLFwiL1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi5jb3JlJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMiA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC5ib3gnKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDMgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXInKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDQgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQnKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDUgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsNiA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC5tb3Rpb24nKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDcgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwubmVzdCcpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsOCA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC50aW1lcicpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsOSA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24udXRpbC50b3VjaCcpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMTAgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMnKTtcblxudmFyIF9mb3VuZGF0aW9uMiA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24uYWJpZGUnKTtcblxudmFyIF9mb3VuZGF0aW9uMyA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24uYWNjb3JkaW9uJyk7XG5cbnZhciBfZm91bmRhdGlvbjQgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLmFjY29yZGlvbk1lbnUnKTtcblxudmFyIF9mb3VuZGF0aW9uNSA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24uZHJpbGxkb3duJyk7XG5cbnZhciBfZm91bmRhdGlvbjYgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLmRyb3Bkb3duJyk7XG5cbnZhciBfZm91bmRhdGlvbjcgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLmRyb3Bkb3duTWVudScpO1xuXG52YXIgX2ZvdW5kYXRpb244ID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi5lcXVhbGl6ZXInKTtcblxudmFyIF9mb3VuZGF0aW9uOSA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24uaW50ZXJjaGFuZ2UnKTtcblxudmFyIF9mb3VuZGF0aW9uMTAgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLm1hZ2VsbGFuJyk7XG5cbnZhciBfZm91bmRhdGlvbjExID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi5vZmZjYW52YXMnKTtcblxudmFyIF9mb3VuZGF0aW9uMTIgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLm9yYml0Jyk7XG5cbnZhciBfZm91bmRhdGlvbjEzID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi5yZXNwb25zaXZlTWVudScpO1xuXG52YXIgX2ZvdW5kYXRpb24xNCA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG52YXIgX2ZvdW5kYXRpb24xNSA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24ucmV2ZWFsJyk7XG5cbnZhciBfZm91bmRhdGlvbjE2ID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi5zbGlkZXInKTtcblxudmFyIF9mb3VuZGF0aW9uMTcgPSByZXF1aXJlKCcuLi8uLi9qcy9mb3VuZGF0aW9uLnNtb290aFNjcm9sbCcpO1xuXG52YXIgX2ZvdW5kYXRpb24xOCA9IHJlcXVpcmUoJy4uLy4uL2pzL2ZvdW5kYXRpb24uc3RpY2t5Jyk7XG5cbnZhciBfZm91bmRhdGlvbjE5ID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi50YWJzJyk7XG5cbnZhciBfZm91bmRhdGlvbjIwID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi50b2dnbGVyJyk7XG5cbnZhciBfZm91bmRhdGlvbjIxID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi50b29sdGlwJyk7XG5cbnZhciBfZm91bmRhdGlvbjIyID0gcmVxdWlyZSgnLi4vLi4vanMvZm91bmRhdGlvbi5yZXNwb25zaXZlQWNjb3JkaW9uVGFicycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLmFkZFRvSnF1ZXJ5KF9qcXVlcnkyLmRlZmF1bHQpO1xuXG4vLyBBZGQgRm91bmRhdGlvbiBVdGlscyB0byBGb3VuZGF0aW9uIGdsb2JhbCBuYW1lc3BhY2UgZm9yIGJhY2t3YXJkc1xuLy8gY29tcGF0aWJpbGl0eS5cblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5ydGwgPSBfZm91bmRhdGlvblV0aWwucnRsO1xuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyA9IF9mb3VuZGF0aW9uVXRpbC5HZXRZb0RpZ2l0cztcbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCA9IF9mb3VuZGF0aW9uVXRpbC50cmFuc2l0aW9uZW5kO1xuXG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLkJveCA9IF9mb3VuZGF0aW9uVXRpbDIuQm94O1xuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCA9IF9mb3VuZGF0aW9uVXRpbDMub25JbWFnZXNMb2FkZWQ7XG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLktleWJvYXJkID0gX2ZvdW5kYXRpb25VdGlsNC5LZXlib2FyZDtcbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24uTWVkaWFRdWVyeSA9IF9mb3VuZGF0aW9uVXRpbDUuTWVkaWFRdWVyeTtcbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24uTW90aW9uID0gX2ZvdW5kYXRpb25VdGlsNi5Nb3Rpb247XG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLk1vdmUgPSBfZm91bmRhdGlvblV0aWw2Lk1vdmU7XG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLk5lc3QgPSBfZm91bmRhdGlvblV0aWw3Lk5lc3Q7XG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLlRpbWVyID0gX2ZvdW5kYXRpb25VdGlsOC5UaW1lcjtcblxuLy8gVG91Y2ggYW5kIFRyaWdnZXJzIHByZXZpb3VzbHkgd2VyZSBhbG1vc3QgcHVyZWx5IHNlZGUgZWZmZWN0IGRyaXZlbixcbi8vIHNvIG4uLi8uLi9qcy8vIG5lZWQgdG8gYWRkIGl0IHRvIEZvdW5kYXRpb24sIGp1c3QgaW5pdCB0aGVtLlxuXG5fZm91bmRhdGlvblV0aWw5LlRvdWNoLmluaXQoX2pxdWVyeTIuZGVmYXVsdCk7XG5cbl9mb3VuZGF0aW9uVXRpbDEwLlRyaWdnZXJzLmluaXQoX2pxdWVyeTIuZGVmYXVsdCwgX2ZvdW5kYXRpb24uRm91bmRhdGlvbik7XG5cbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24ucGx1Z2luKF9mb3VuZGF0aW9uMi5BYmlkZSwgJ0FiaWRlJyk7XG5cbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24ucGx1Z2luKF9mb3VuZGF0aW9uMy5BY2NvcmRpb24sICdBY2NvcmRpb24nKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb240LkFjY29yZGlvbk1lbnUsICdBY2NvcmRpb25NZW51Jyk7XG5cbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24ucGx1Z2luKF9mb3VuZGF0aW9uNS5EcmlsbGRvd24sICdEcmlsbGRvd24nKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb242LkRyb3Bkb3duLCAnRHJvcGRvd24nKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb243LkRyb3Bkb3duTWVudSwgJ0Ryb3Bkb3duTWVudScpO1xuXG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLnBsdWdpbihfZm91bmRhdGlvbjguRXF1YWxpemVyLCAnRXF1YWxpemVyJyk7XG5cbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24ucGx1Z2luKF9mb3VuZGF0aW9uOS5JbnRlcmNoYW5nZSwgJ0ludGVyY2hhbmdlJyk7XG5cbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24ucGx1Z2luKF9mb3VuZGF0aW9uMTAuTWFnZWxsYW4sICdNYWdlbGxhbicpO1xuXG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLnBsdWdpbihfZm91bmRhdGlvbjExLk9mZkNhbnZhcywgJ09mZkNhbnZhcycpO1xuXG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLnBsdWdpbihfZm91bmRhdGlvbjEyLk9yYml0LCAnT3JiaXQnKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb24xMy5SZXNwb25zaXZlTWVudSwgJ1Jlc3BvbnNpdmVNZW51Jyk7XG5cbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24ucGx1Z2luKF9mb3VuZGF0aW9uMTQuUmVzcG9uc2l2ZVRvZ2dsZSwgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb24xNS5SZXZlYWwsICdSZXZlYWwnKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb24xNi5TbGlkZXIsICdTbGlkZXInKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb24xNy5TbW9vdGhTY3JvbGwsICdTbW9vdGhTY3JvbGwnKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb24xOC5TdGlja3ksICdTdGlja3knKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb24xOS5UYWJzLCAnVGFicycpO1xuXG5fZm91bmRhdGlvbi5Gb3VuZGF0aW9uLnBsdWdpbihfZm91bmRhdGlvbjIwLlRvZ2dsZXIsICdUb2dnbGVyJyk7XG5cbl9mb3VuZGF0aW9uLkZvdW5kYXRpb24ucGx1Z2luKF9mb3VuZGF0aW9uMjEuVG9vbHRpcCwgJ1Rvb2x0aXAnKTtcblxuX2ZvdW5kYXRpb24uRm91bmRhdGlvbi5wbHVnaW4oX2ZvdW5kYXRpb24yMi5SZXNwb25zaXZlQWNjb3JkaW9uVGFicywgJ1Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9mb3VuZGF0aW9uLkZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV3YlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpHYjNWdVpHRjBhVzl1SWl3aVlXUmtWRzlLY1hWbGNua2lMQ0lrSWl3aWNuUnNJaXdpUjJWMFdXOUVhV2RwZEhNaUxDSjBjbUZ1YzJsMGFXOXVaVzVrSWl3aVFtOTRJaXdpYjI1SmJXRm5aWE5NYjJGa1pXUWlMQ0pMWlhsaWIyRnlaQ0lzSWsxbFpHbGhVWFZsY25raUxDSk5iM1JwYjI0aUxDSk5iM1psSWl3aVRtVnpkQ0lzSWxScGJXVnlJaXdpVkc5MVkyZ2lMQ0pwYm1sMElpd2lWSEpwWjJkbGNuTWlMQ0p3YkhWbmFXNGlMQ0pCWW1sa1pTSXNJa0ZqWTI5eVpHbHZiaUlzSWtGalkyOXlaR2x2YmsxbGJuVWlMQ0pFY21sc2JHUnZkMjRpTENKRWNtOXdaRzkzYmlJc0lrUnliM0JrYjNkdVRXVnVkU0lzSWtWeGRXRnNhWHBsY2lJc0lrbHVkR1Z5WTJoaGJtZGxJaXdpVFdGblpXeHNZVzRpTENKUFptWkRZVzUyWVhNaUxDSlBjbUpwZENJc0lsSmxjM0J2Ym5OcGRtVk5aVzUxSWl3aVVtVnpjRzl1YzJsMlpWUnZaMmRzWlNJc0lsSmxkbVZoYkNJc0lsTnNhV1JsY2lJc0lsTnRiMjkwYUZOamNtOXNiQ0lzSWxOMGFXTnJlU0lzSWxSaFluTWlMQ0pVYjJkbmJHVnlJaXdpVkc5dmJIUnBjQ0lzSWxKbGMzQnZibk5wZG1WQlkyTnZjbVJwYjI1VVlXSnpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3UVVGQlFUczdPenRCUVVWQk96dEJRVTFCT3p0QlFVdEJPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenRCUVdOQk96dEJRVWRCT3p0QlFVZEJPenRCUVVkQk96dEJRVWRCT3p0QlFVZEJPenRCUVVkQk96dEJRVWRCT3p0QlFVZEJPenRCUVVkQk96dEJRVWRCT3p0QlFVZEJPenRCUVVkQk96dEJRVWRCT3p0QlFVZEJPenRCUVVkQk96dEJRVWRCT3p0QlFVZEJPenRCUVVkQk96dEJRVWRCT3p0QlFVZEJPenRCUVVkQk96dEJRVWRCT3pzN08wRkJhRWRCUVN4MVFrRkJWME1zVjBGQldDeERRVUYxUWtNc1owSkJRWFpDT3p0QlFVVkJPMEZCUTBFN08wRkJSMEZHTEhWQ1FVRlhSeXhIUVVGWUxFZEJRV2xDUVN4dFFrRkJha0k3UVVGRFFVZ3NkVUpCUVZkSkxGZEJRVmdzUjBGQmVVSkJMREpDUVVGNlFqdEJRVU5CU2l4MVFrRkJWMHNzWVVGQldDeEhRVUV5UWtFc05rSkJRVE5DT3p0QlFWVkJUQ3gxUWtGQlYwMHNSMEZCV0N4SFFVRnBRa0VzYjBKQlFXcENPMEZCUTBGT0xIVkNRVUZYVHl4alFVRllMRWRCUVRSQ1FTd3JRa0ZCTlVJN1FVRkRRVkFzZFVKQlFWZFJMRkZCUVZnc1IwRkJjMEpCTEhsQ1FVRjBRanRCUVVOQlVpeDFRa0ZCVjFNc1ZVRkJXQ3hIUVVGM1FrRXNNa0pCUVhoQ08wRkJRMEZVTEhWQ1FVRlhWU3hOUVVGWUxFZEJRVzlDUVN4MVFrRkJjRUk3UVVGRFFWWXNkVUpCUVZkWExFbEJRVmdzUjBGQmEwSkJMSEZDUVVGc1FqdEJRVU5CV0N4MVFrRkJWMWtzU1VGQldDeEhRVUZyUWtFc2NVSkJRV3hDTzBGQlEwRmFMSFZDUVVGWFlTeExRVUZZTEVkQlFXMUNRU3h6UWtGQmJrSTdPMEZCUlVFN1FVRkRRVHM3UVVGSFFVTXNkVUpCUVUxRExFbEJRVTRzUTBGQlYySXNaMEpCUVZnN08wRkJSMEZqTERKQ1FVRlRSQ3hKUVVGVUxFTkJRV05pTEdkQ1FVRmtMRVZCUVdsQ1JpeHpRa0ZCYWtJN08wRkJSMEZCTEhWQ1FVRlhhVUlzVFVGQldDeERRVUZyUWtNc2EwSkJRV3hDTEVWQlFYbENMRTlCUVhwQ096dEJRVWRCYkVJc2RVSkJRVmRwUWl4TlFVRllMRU5CUVd0Q1JTeHpRa0ZCYkVJc1JVRkJOa0lzVjBGQk4wSTdPMEZCUjBGdVFpeDFRa0ZCVjJsQ0xFMUJRVmdzUTBGQmEwSkhMREJDUVVGc1FpeEZRVUZwUXl4bFFVRnFRenM3UVVGSFFYQkNMSFZDUVVGWGFVSXNUVUZCV0N4RFFVRnJRa2tzYzBKQlFXeENMRVZCUVRaQ0xGZEJRVGRDT3p0QlFVZEJja0lzZFVKQlFWZHBRaXhOUVVGWUxFTkJRV3RDU3l4eFFrRkJiRUlzUlVGQk5FSXNWVUZCTlVJN08wRkJSMEYwUWl4MVFrRkJWMmxDTEUxQlFWZ3NRMEZCYTBKTkxIbENRVUZzUWl4RlFVRm5ReXhqUVVGb1F6czdRVUZIUVhaQ0xIVkNRVUZYYVVJc1RVRkJXQ3hEUVVGclFrOHNjMEpCUVd4Q0xFVkJRVFpDTEZkQlFUZENPenRCUVVkQmVFSXNkVUpCUVZkcFFpeE5RVUZZTEVOQlFXdENVU3gzUWtGQmJFSXNSVUZCSzBJc1lVRkJMMEk3TzBGQlIwRjZRaXgxUWtGQlYybENMRTFCUVZnc1EwRkJhMEpUTEhOQ1FVRnNRaXhGUVVFMFFpeFZRVUUxUWpzN1FVRkhRVEZDTEhWQ1FVRlhhVUlzVFVGQldDeERRVUZyUWxVc2RVSkJRV3hDTEVWQlFUWkNMRmRCUVRkQ096dEJRVWRCTTBJc2RVSkJRVmRwUWl4TlFVRllMRU5CUVd0Q1Z5eHRRa0ZCYkVJc1JVRkJlVUlzVDBGQmVrSTdPMEZCUjBFMVFpeDFRa0ZCVjJsQ0xFMUJRVmdzUTBGQmEwSlpMRFJDUVVGc1FpeEZRVUZyUXl4blFrRkJiRU03TzBGQlIwRTNRaXgxUWtGQlYybENMRTFCUVZnc1EwRkJhMEpoTERoQ1FVRnNRaXhGUVVGdlF5eHJRa0ZCY0VNN08wRkJSMEU1UWl4MVFrRkJWMmxDTEUxQlFWZ3NRMEZCYTBKakxHOUNRVUZzUWl4RlFVRXdRaXhSUVVFeFFqczdRVUZIUVM5Q0xIVkNRVUZYYVVJc1RVRkJXQ3hEUVVGclFtVXNiMEpCUVd4Q0xFVkJRVEJDTEZGQlFURkNPenRCUVVkQmFFTXNkVUpCUVZkcFFpeE5RVUZZTEVOQlFXdENaMElzTUVKQlFXeENMRVZCUVdkRExHTkJRV2hET3p0QlFVZEJha01zZFVKQlFWZHBRaXhOUVVGWUxFTkJRV3RDYVVJc2IwSkJRV3hDTEVWQlFUQkNMRkZCUVRGQ096dEJRVWRCYkVNc2RVSkJRVmRwUWl4TlFVRllMRU5CUVd0Q2EwSXNhMEpCUVd4Q0xFVkJRWGRDTEUxQlFYaENPenRCUVVkQmJrTXNkVUpCUVZkcFFpeE5RVUZZTEVOQlFXdENiVUlzY1VKQlFXeENMRVZCUVRKQ0xGTkJRVE5DT3p0QlFVZEJjRU1zZFVKQlFWZHBRaXhOUVVGWUxFTkJRV3RDYjBJc2NVSkJRV3hDTEVWQlFUSkNMRk5CUVROQ096dEJRVWRCY2tNc2RVSkJRVmRwUWl4TlFVRllMRU5CUVd0Q2NVSXNjVU5CUVd4Q0xFVkJRVEpETEhsQ1FVRXpRenM3YTBKQlJXVjBReXh6UWlJc0ltWnBiR1VpT2lKdWNHMHVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnSkNCbWNtOXRJQ2RxY1hWbGNua25PMXh1WEc1cGJYQnZjblFnZXlCR2IzVnVaR0YwYVc5dUlIMGdabkp2YlNBbkxpNHZMaTR2YW5NdlptOTFibVJoZEdsdmJpNWpiM0psSnp0Y2JrWnZkVzVrWVhScGIyNHVZV1JrVkc5S2NYVmxjbmtvSkNrN1hHNWNiaTh2SUVGa1pDQkdiM1Z1WkdGMGFXOXVJRlYwYVd4eklIUnZJRVp2ZFc1a1lYUnBiMjRnWjJ4dlltRnNJRzVoYldWemNHRmpaU0JtYjNJZ1ltRmphM2RoY21SelhHNHZMeUJqYjIxd1lYUnBZbWxzYVhSNUxseHVYRzVwYlhCdmNuUWdleUJ5ZEd3c0lFZGxkRmx2UkdsbmFYUnpMQ0IwY21GdWMybDBhVzl1Wlc1a0lIMGdabkp2YlNBbkxpNHZMaTR2YW5NdlptOTFibVJoZEdsdmJpNTFkR2xzTG1OdmNtVW5PMXh1Um05MWJtUmhkR2x2Ymk1eWRHd2dQU0J5ZEd3N1hHNUdiM1Z1WkdGMGFXOXVMa2RsZEZsdlJHbG5hWFJ6SUQwZ1IyVjBXVzlFYVdkcGRITTdYRzVHYjNWdVpHRjBhVzl1TG5SeVlXNXphWFJwYjI1bGJtUWdQU0IwY21GdWMybDBhVzl1Wlc1a08xeHVYRzVwYlhCdmNuUWdleUJDYjNnZ2ZTQm1jbTl0SUNjdUxpOHVMaTlxY3k5bWIzVnVaR0YwYVc5dUxuVjBhV3d1WW05NEoxeHVhVzF3YjNKMElIc2diMjVKYldGblpYTk1iMkZrWldRZ2ZTQm1jbTl0SUNjdUxpOHVMaTlxY3k5bWIzVnVaR0YwYVc5dUxuVjBhV3d1YVcxaFoyVk1iMkZrWlhJbk8xeHVhVzF3YjNKMElIc2dTMlY1WW05aGNtUWdmU0JtY205dElDY3VMaTh1TGk5cWN5OW1iM1Z1WkdGMGFXOXVMblYwYVd3dWEyVjVZbTloY21Rbk8xeHVhVzF3YjNKMElIc2dUV1ZrYVdGUmRXVnllU0I5SUdaeWIyMGdKeTR1THk0dUwycHpMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNXRaV1JwWVZGMVpYSjVKenRjYm1sdGNHOXlkQ0I3SUUxdmRHbHZiaXdnVFc5MlpTQjlJR1p5YjIwZ0p5NHVMeTR1TDJwekwyWnZkVzVrWVhScGIyNHVkWFJwYkM1dGIzUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1RtVnpkQ0I5SUdaeWIyMGdKeTR1THk0dUwycHpMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNXVaWE4wSnp0Y2JtbHRjRzl5ZENCN0lGUnBiV1Z5SUgwZ1puSnZiU0FuTGk0dkxpNHZhbk12Wm05MWJtUmhkR2x2Ymk1MWRHbHNMblJwYldWeUp6dGNibHh1Um05MWJtUmhkR2x2Ymk1Q2IzZ2dQU0JDYjNnN1hHNUdiM1Z1WkdGMGFXOXVMbTl1U1cxaFoyVnpURzloWkdWa0lEMGdiMjVKYldGblpYTk1iMkZrWldRN1hHNUdiM1Z1WkdGMGFXOXVMa3RsZVdKdllYSmtJRDBnUzJWNVltOWhjbVE3WEc1R2IzVnVaR0YwYVc5dUxrMWxaR2xoVVhWbGNua2dQU0JOWldScFlWRjFaWEo1TzF4dVJtOTFibVJoZEdsdmJpNU5iM1JwYjI0Z1BTQk5iM1JwYjI0N1hHNUdiM1Z1WkdGMGFXOXVMazF2ZG1VZ1BTQk5iM1psTzF4dVJtOTFibVJoZEdsdmJpNU9aWE4wSUQwZ1RtVnpkRHRjYmtadmRXNWtZWFJwYjI0dVZHbHRaWElnUFNCVWFXMWxjanRjYmx4dUx5OGdWRzkxWTJnZ1lXNWtJRlJ5YVdkblpYSnpJSEJ5WlhacGIzVnpiSGtnZDJWeVpTQmhiRzF2YzNRZ2NIVnlaV3g1SUhObFpHVWdaV1ptWldOMElHUnlhWFpsYml4Y2JpOHZJSE52SUc0dUxpOHVMaTlxY3k4dklHNWxaV1FnZEc4Z1lXUmtJR2wwSUhSdklFWnZkVzVrWVhScGIyNHNJR3AxYzNRZ2FXNXBkQ0IwYUdWdExseHVYRzVwYlhCdmNuUWdleUJVYjNWamFDQjlJR1p5YjIwZ0p5NHVMeTR1TDJwekwyWnZkVzVrWVhScGIyNHVkWFJwYkM1MGIzVmphQ2M3WEc1VWIzVmphQzVwYm1sMEtDUXBPMXh1WEc1cGJYQnZjblFnZXlCVWNtbG5aMlZ5Y3lCOUlHWnliMjBnSnk0dUx5NHVMMnB6TDJadmRXNWtZWFJwYjI0dWRYUnBiQzUwY21sbloyVnljeWM3WEc1VWNtbG5aMlZ5Y3k1cGJtbDBLQ1FzSUVadmRXNWtZWFJwYjI0cE8xeHVYRzVwYlhCdmNuUWdleUJCWW1sa1pTQjlJR1p5YjIwZ0p5NHVMeTR1TDJwekwyWnZkVzVrWVhScGIyNHVZV0pwWkdVbk8xeHVSbTkxYm1SaGRHbHZiaTV3YkhWbmFXNG9RV0pwWkdVc0lDZEJZbWxrWlNjcE8xeHVYRzVwYlhCdmNuUWdleUJCWTJOdmNtUnBiMjRnZlNCbWNtOXRJQ2N1TGk4dUxpOXFjeTltYjNWdVpHRjBhVzl1TG1GalkyOXlaR2x2YmljN1hHNUdiM1Z1WkdGMGFXOXVMbkJzZFdkcGJpaEJZMk52Y21ScGIyNHNJQ2RCWTJOdmNtUnBiMjRuS1R0Y2JseHVhVzF3YjNKMElIc2dRV05qYjNKa2FXOXVUV1Z1ZFNCOUlHWnliMjBnSnk0dUx5NHVMMnB6TDJadmRXNWtZWFJwYjI0dVlXTmpiM0prYVc5dVRXVnVkU2M3WEc1R2IzVnVaR0YwYVc5dUxuQnNkV2RwYmloQlkyTnZjbVJwYjI1TlpXNTFMQ0FuUVdOamIzSmthVzl1VFdWdWRTY3BPMXh1WEc1cGJYQnZjblFnZXlCRWNtbHNiR1J2ZDI0Z2ZTQm1jbTl0SUNjdUxpOHVMaTlxY3k5bWIzVnVaR0YwYVc5dUxtUnlhV3hzWkc5M2JpYzdYRzVHYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWhFY21sc2JHUnZkMjRzSUNkRWNtbHNiR1J2ZDI0bktUdGNibHh1YVcxd2IzSjBJSHNnUkhKdmNHUnZkMjRnZlNCbWNtOXRJQ2N1TGk4dUxpOXFjeTltYjNWdVpHRjBhVzl1TG1SeWIzQmtiM2R1Snp0Y2JrWnZkVzVrWVhScGIyNHVjR3gxWjJsdUtFUnliM0JrYjNkdUxDQW5SSEp2Y0dSdmQyNG5LVHRjYmx4dWFXMXdiM0owSUhzZ1JISnZjR1J2ZDI1TlpXNTFJSDBnWm5KdmJTQW5MaTR2TGk0dmFuTXZabTkxYm1SaGRHbHZiaTVrY205d1pHOTNiazFsYm5Vbk8xeHVSbTkxYm1SaGRHbHZiaTV3YkhWbmFXNG9SSEp2Y0dSdmQyNU5aVzUxTENBblJISnZjR1J2ZDI1TlpXNTFKeWs3WEc1Y2JtbHRjRzl5ZENCN0lFVnhkV0ZzYVhwbGNpQjlJR1p5YjIwZ0p5NHVMeTR1TDJwekwyWnZkVzVrWVhScGIyNHVaWEYxWVd4cGVtVnlKenRjYmtadmRXNWtZWFJwYjI0dWNHeDFaMmx1S0VWeGRXRnNhWHBsY2l3Z0owVnhkV0ZzYVhwbGNpY3BPMXh1WEc1cGJYQnZjblFnZXlCSmJuUmxjbU5vWVc1blpTQjlJR1p5YjIwZ0p5NHVMeTR1TDJwekwyWnZkVzVrWVhScGIyNHVhVzUwWlhKamFHRnVaMlVuTzF4dVJtOTFibVJoZEdsdmJpNXdiSFZuYVc0b1NXNTBaWEpqYUdGdVoyVXNJQ2RKYm5SbGNtTm9ZVzVuWlNjcE8xeHVYRzVwYlhCdmNuUWdleUJOWVdkbGJHeGhiaUI5SUdaeWIyMGdKeTR1THk0dUwycHpMMlp2ZFc1a1lYUnBiMjR1YldGblpXeHNZVzRuTzF4dVJtOTFibVJoZEdsdmJpNXdiSFZuYVc0b1RXRm5aV3hzWVc0c0lDZE5ZV2RsYkd4aGJpY3BPMXh1WEc1cGJYQnZjblFnZXlCUFptWkRZVzUyWVhNZ2ZTQm1jbTl0SUNjdUxpOHVMaTlxY3k5bWIzVnVaR0YwYVc5dUxtOW1abU5oYm5aaGN5YzdYRzVHYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWhQWm1aRFlXNTJZWE1zSUNkUFptWkRZVzUyWVhNbktUdGNibHh1YVcxd2IzSjBJSHNnVDNKaWFYUWdmU0JtY205dElDY3VMaTh1TGk5cWN5OW1iM1Z1WkdGMGFXOXVMbTl5WW1sMEp6dGNia1p2ZFc1a1lYUnBiMjR1Y0d4MVoybHVLRTl5WW1sMExDQW5UM0ppYVhRbktUdGNibHh1YVcxd2IzSjBJSHNnVW1WemNHOXVjMmwyWlUxbGJuVWdmU0JtY205dElDY3VMaTh1TGk5cWN5OW1iM1Z1WkdGMGFXOXVMbkpsYzNCdmJuTnBkbVZOWlc1MUp6dGNia1p2ZFc1a1lYUnBiMjR1Y0d4MVoybHVLRkpsYzNCdmJuTnBkbVZOWlc1MUxDQW5VbVZ6Y0c5dWMybDJaVTFsYm5VbktUdGNibHh1YVcxd2IzSjBJSHNnVW1WemNHOXVjMmwyWlZSdloyZHNaU0I5SUdaeWIyMGdKeTR1THk0dUwycHpMMlp2ZFc1a1lYUnBiMjR1Y21WemNHOXVjMmwyWlZSdloyZHNaU2M3WEc1R2IzVnVaR0YwYVc5dUxuQnNkV2RwYmloU1pYTndiMjV6YVhabFZHOW5aMnhsTENBblVtVnpjRzl1YzJsMlpWUnZaMmRzWlNjcE8xeHVYRzVwYlhCdmNuUWdleUJTWlhabFlXd2dmU0JtY205dElDY3VMaTh1TGk5cWN5OW1iM1Z1WkdGMGFXOXVMbkpsZG1WaGJDYzdYRzVHYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWhTWlhabFlXd3NJQ2RTWlhabFlXd25LVHRjYmx4dWFXMXdiM0owSUhzZ1UyeHBaR1Z5SUgwZ1puSnZiU0FuTGk0dkxpNHZhbk12Wm05MWJtUmhkR2x2Ymk1emJHbGtaWEluTzF4dVJtOTFibVJoZEdsdmJpNXdiSFZuYVc0b1UyeHBaR1Z5TENBblUyeHBaR1Z5SnlrN1hHNWNibWx0Y0c5eWRDQjdJRk50YjI5MGFGTmpjbTlzYkNCOUlHWnliMjBnSnk0dUx5NHVMMnB6TDJadmRXNWtZWFJwYjI0dWMyMXZiM1JvVTJOeWIyeHNKenRjYmtadmRXNWtZWFJwYjI0dWNHeDFaMmx1S0ZOdGIyOTBhRk5qY205c2JDd2dKMU50YjI5MGFGTmpjbTlzYkNjcE8xeHVYRzVwYlhCdmNuUWdleUJUZEdsamEza2dmU0JtY205dElDY3VMaTh1TGk5cWN5OW1iM1Z1WkdGMGFXOXVMbk4wYVdOcmVTYzdYRzVHYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWhUZEdsamEza3NJQ2RUZEdsamEza25LVHRjYmx4dWFXMXdiM0owSUhzZ1ZHRmljeUI5SUdaeWIyMGdKeTR1THk0dUwycHpMMlp2ZFc1a1lYUnBiMjR1ZEdGaWN5YzdYRzVHYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWhVWVdKekxDQW5WR0ZpY3ljcE8xeHVYRzVwYlhCdmNuUWdleUJVYjJkbmJHVnlJSDBnWm5KdmJTQW5MaTR2TGk0dmFuTXZabTkxYm1SaGRHbHZiaTUwYjJkbmJHVnlKenRjYmtadmRXNWtZWFJwYjI0dWNHeDFaMmx1S0ZSdloyZHNaWElzSUNkVWIyZG5iR1Z5SnlrN1hHNWNibWx0Y0c5eWRDQjdJRlJ2YjJ4MGFYQWdmU0JtY205dElDY3VMaTh1TGk5cWN5OW1iM1Z1WkdGMGFXOXVMblJ2YjJ4MGFYQW5PMXh1Um05MWJtUmhkR2x2Ymk1d2JIVm5hVzRvVkc5dmJIUnBjQ3dnSjFSdmIyeDBhWEFuS1R0Y2JseHVhVzF3YjNKMElIc2dVbVZ6Y0c5dWMybDJaVUZqWTI5eVpHbHZibFJoWW5NZ2ZTQm1jbTl0SUNjdUxpOHVMaTlxY3k5bWIzVnVaR0YwYVc5dUxuSmxjM0J2Ym5OcGRtVkJZMk52Y21ScGIyNVVZV0p6Snp0Y2JrWnZkVzVrWVhScGIyNHVjR3gxWjJsdUtGSmxjM0J2Ym5OcGRtVkJZMk52Y21ScGIyNVVZV0p6TENBblVtVnpjRzl1YzJsMlpVRmpZMjl5WkdsdmJsUmhZbk1uS1R0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JtOTFibVJoZEdsdmJqdGNiaUpkZlE9PVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9kaXN0L2pzL25wbS5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2Rpc3QvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFiaWRlID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBBYmlkZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uYWJpZGVcbiAqL1xuXG52YXIgQWJpZGUgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoQWJpZGUsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIEFiaWRlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBYmlkZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEFiaWRlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWJpZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBYmlkZSwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBBYmlkZS5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBBYmlkZVxuICAgICAqIEBmaXJlcyBBYmlkZSNpbml0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX2pxdWVyeTIuZGVmYXVsdC5leHRlbmQodHJ1ZSwge30sIEFiaWRlLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0FiaWRlJzsgLy8gaWU5IGJhY2sgY29tcGF0XG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIEFiaWRlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBBYmlkZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB0aGlzLiRpbnB1dHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0Jyk7XG5cbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgQWJpZGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy5hYmlkZScpLm9uKCdyZXNldC56Zi5hYmlkZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnJlc2V0Rm9ybSgpO1xuICAgICAgfSkub24oJ3N1Ym1pdC56Zi5hYmlkZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy52YWxpZGF0ZUZvcm0oKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZhbGlkYXRlT24gPT09ICdmaWVsZENoYW5nZScpIHtcbiAgICAgICAgdGhpcy4kaW5wdXRzLm9mZignY2hhbmdlLnpmLmFiaWRlJykub24oJ2NoYW5nZS56Zi5hYmlkZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMzLnZhbGlkYXRlSW5wdXQoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxpdmVWYWxpZGF0ZSkge1xuICAgICAgICB0aGlzLiRpbnB1dHMub2ZmKCdpbnB1dC56Zi5hYmlkZScpLm9uKCdpbnB1dC56Zi5hYmlkZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMzLnZhbGlkYXRlSW5wdXQoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZhbGlkYXRlT25CbHVyKSB7XG4gICAgICAgIHRoaXMuJGlucHV0cy5vZmYoJ2JsdXIuemYuYWJpZGUnKS5vbignYmx1ci56Zi5hYmlkZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMzLnZhbGlkYXRlSW5wdXQoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEFiaWRlIHVwb24gRE9NIGNoYW5nZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZWZsb3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVmbG93KCkge1xuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCBhIGZvcm0gZWxlbWVudCBoYXMgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgaWYgaXQncyBjaGVja2VkIG9yIG5vdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXF1aXJlZENoZWNrJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWlyZWRDaGVjaygkZWwpIHtcbiAgICAgIGlmICghJGVsLmF0dHIoJ3JlcXVpcmVkJykpIHJldHVybiB0cnVlO1xuXG4gICAgICB2YXIgaXNHb29kID0gdHJ1ZTtcblxuICAgICAgc3dpdGNoICgkZWxbMF0udHlwZSkge1xuICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgaXNHb29kID0gJGVsWzBdLmNoZWNrZWQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgY2FzZSAnc2VsZWN0LW9uZSc6XG4gICAgICAgIGNhc2UgJ3NlbGVjdC1tdWx0aXBsZSc6XG4gICAgICAgICAgdmFyIG9wdCA9ICRlbC5maW5kKCdvcHRpb246c2VsZWN0ZWQnKTtcbiAgICAgICAgICBpZiAoIW9wdC5sZW5ndGggfHwgIW9wdC52YWwoKSkgaXNHb29kID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoISRlbC52YWwoKSB8fCAhJGVsLnZhbCgpLmxlbmd0aCkgaXNHb29kID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0dvb2Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0OlxuICAgICAqIC0gQmFzZWQgb24gJGVsLCB0aGUgZmlyc3QgZWxlbWVudChzKSBjb3JyZXNwb25kaW5nIHRvIGBmb3JtRXJyb3JTZWxlY3RvcmAgaW4gdGhpcyBvcmRlcjpcbiAgICAgKiAgIDEuIFRoZSBlbGVtZW50J3MgZGlyZWN0IHNpYmxpbmcoJ3MpLlxuICAgICAqICAgMi4gVGhlIGVsZW1lbnQncyBwYXJlbnQncyBjaGlsZHJlbi5cbiAgICAgKiAtIEVsZW1lbnQocykgd2l0aCB0aGUgYXR0cmlidXRlIGBbZGF0YS1mb3JtLWVycm9yLWZvcl1gIHNldCB3aXRoIHRoZSBlbGVtZW50J3MgaWQuXG4gICAgICpcbiAgICAgKiBUaGlzIGFsbG93cyBmb3IgbXVsdGlwbGUgZm9ybSBlcnJvcnMgcGVyIGlucHV0LCB0aG91Z2ggaWYgbm9uZSBhcmUgZm91bmQsIG5vIGZvcm0gZXJyb3JzIHdpbGwgYmUgc2hvd24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byB1c2UgYXMgcmVmZXJlbmNlIHRvIGZpbmQgdGhlIGZvcm0gZXJyb3Igc2VsZWN0b3IuXG4gICAgICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdCB3aXRoIHRoZSBzZWxlY3Rvci5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmluZEZvcm1FcnJvcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRGb3JtRXJyb3IoJGVsKSB7XG4gICAgICB2YXIgaWQgPSAkZWxbMF0uaWQ7XG4gICAgICB2YXIgJGVycm9yID0gJGVsLnNpYmxpbmdzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG5cbiAgICAgIGlmICghJGVycm9yLmxlbmd0aCkge1xuICAgICAgICAkZXJyb3IgPSAkZWwucGFyZW50KCkuZmluZCh0aGlzLm9wdGlvbnMuZm9ybUVycm9yU2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICAkZXJyb3IgPSAkZXJyb3IuYWRkKHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZm9ybS1lcnJvci1mb3I9XCInICsgaWQgKyAnXCJdJykpO1xuXG4gICAgICByZXR1cm4gJGVycm9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGlzIG9yZGVyOlxuICAgICAqIDIuIFRoZSA8bGFiZWw+IHdpdGggdGhlIGF0dHJpYnV0ZSBgW2Zvcj1cInNvbWVJbnB1dElkXCJdYFxuICAgICAqIDMuIFRoZSBgLmNsb3Nlc3QoKWAgPGxhYmVsPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gY2hlY2sgZm9yIHJlcXVpcmVkIGF0dHJpYnV0ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmluZExhYmVsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZExhYmVsKCRlbCkge1xuICAgICAgdmFyIGlkID0gJGVsWzBdLmlkO1xuICAgICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGFiZWxbZm9yPVwiJyArIGlkICsgJ1wiXScpO1xuXG4gICAgICBpZiAoISRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuICRlbC5jbG9zZXN0KCdsYWJlbCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJGxhYmVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2V0IG9mIGxhYmVscyBhc3NvY2lhdGVkIHdpdGggYSBzZXQgb2YgcmFkaW8gZWxzIGluIHRoaXMgb3JkZXJcbiAgICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICAgKiAzLiBUaGUgYC5jbG9zZXN0KClgIDxsYWJlbD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IGF0dHJpYnV0ZSBpcyBjaGVja2VkIG9yIGVtcHR5XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbmRSYWRpb0xhYmVscycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRSYWRpb0xhYmVscygkZWxzKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIGxhYmVscyA9ICRlbHMubWFwKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICB2YXIgaWQgPSBlbC5pZDtcbiAgICAgICAgdmFyICRsYWJlbCA9IF90aGlzNC4kZWxlbWVudC5maW5kKCdsYWJlbFtmb3I9XCInICsgaWQgKyAnXCJdJyk7XG5cbiAgICAgICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgICAgJGxhYmVsID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGVsKS5jbG9zZXN0KCdsYWJlbCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkbGFiZWxbMF07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShsYWJlbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIENTUyBlcnJvciBjbGFzcyBhcyBzcGVjaWZpZWQgYnkgdGhlIEFiaWRlIHNldHRpbmdzIHRvIHRoZSBsYWJlbCwgaW5wdXQsIGFuZCB0aGUgZm9ybVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgY2xhc3MgdG9cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkRXJyb3JDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgICAgdmFyICRsYWJlbCA9IHRoaXMuZmluZExhYmVsKCRlbCk7XG4gICAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgICBpZiAoJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICgkZm9ybUVycm9yLmxlbmd0aCkge1xuICAgICAgICAkZm9ybUVycm9yLmFkZENsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgICRlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5hdHRyKCdkYXRhLWludmFsaWQnLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIENTUyBlcnJvciBjbGFzc2VzIGV0YyBmcm9tIGFuIGVudGlyZSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZ3JvdXBOYW1lIC0gQSBzdHJpbmcgdGhhdCBzcGVjaWZpZXMgdGhlIG5hbWUgb2YgYSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICAgKlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVSYWRpb0Vycm9yQ2xhc3NlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzKGdyb3VwTmFtZSkge1xuICAgICAgdmFyICRlbHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJzpyYWRpb1tuYW1lPVwiJyArIGdyb3VwTmFtZSArICdcIl0nKTtcbiAgICAgIHZhciAkbGFiZWxzID0gdGhpcy5maW5kUmFkaW9MYWJlbHMoJGVscyk7XG4gICAgICB2YXIgJGZvcm1FcnJvcnMgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVscyk7XG5cbiAgICAgIGlmICgkbGFiZWxzLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWxzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGZvcm1FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICRmb3JtRXJyb3JzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgICRlbHMucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBDU1MgZXJyb3IgY2xhc3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBBYmlkZSBzZXR0aW5ncyBmcm9tIHRoZSBsYWJlbCwgaW5wdXQsIGFuZCB0aGUgZm9ybVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHJlbW92ZSB0aGUgY2xhc3MgZnJvbVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVFcnJvckNsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFcnJvckNsYXNzZXMoJGVsKSB7XG4gICAgICAvLyByYWRpb3MgbmVlZCB0byBjbGVhciBhbGwgb2YgdGhlIGVsc1xuICAgICAgaWYgKCRlbFswXS50eXBlID09ICdyYWRpbycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMoJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciAkbGFiZWwgPSB0aGlzLmZpbmRMYWJlbCgkZWwpO1xuICAgICAgdmFyICRmb3JtRXJyb3IgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVsKTtcblxuICAgICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICAgJGxhYmVsLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICAgJGZvcm1FcnJvci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICAkZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR29lcyB0aHJvdWdoIGEgZm9ybSB0byBmaW5kIGlucHV0cyBhbmQgcHJvY2VlZHMgdG8gdmFsaWRhdGUgdGhlbSBpbiB3YXlzIHNwZWNpZmljIHRvIHRoZWlyIHR5cGUuXG4gICAgICogSWdub3JlcyBpbnB1dHMgd2l0aCBkYXRhLWFiaWRlLWlnbm9yZSwgdHlwZT1cImhpZGRlblwiIG9yIGRpc2FibGVkIGF0dHJpYnV0ZXMgc2V0XG4gICAgICogQGZpcmVzIEFiaWRlI2ludmFsaWRcbiAgICAgKiBAZmlyZXMgQWJpZGUjdmFsaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhbiBIVE1MIGlucHV0XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IGdvb2RUb0dvIC0gSWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndmFsaWRhdGVJbnB1dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXQoJGVsKSB7XG4gICAgICB2YXIgY2xlYXJSZXF1aXJlID0gdGhpcy5yZXF1aXJlZENoZWNrKCRlbCksXG4gICAgICAgICAgdmFsaWRhdGVkID0gZmFsc2UsXG4gICAgICAgICAgY3VzdG9tVmFsaWRhdG9yID0gdHJ1ZSxcbiAgICAgICAgICB2YWxpZGF0b3IgPSAkZWwuYXR0cignZGF0YS12YWxpZGF0b3InKSxcbiAgICAgICAgICBlcXVhbFRvID0gdHJ1ZTtcblxuICAgICAgLy8gZG9uJ3QgdmFsaWRhdGUgaWdub3JlZCBpbnB1dHMgb3IgaGlkZGVuIGlucHV0cyBvciBkaXNhYmxlZCBpbnB1dHNcbiAgICAgIGlmICgkZWwuaXMoJ1tkYXRhLWFiaWRlLWlnbm9yZV0nKSB8fCAkZWwuaXMoJ1t0eXBlPVwiaGlkZGVuXCJdJykgfHwgJGVsLmlzKCdbZGlzYWJsZWRdJykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICAgIHZhbGlkYXRlZCA9IHRoaXMudmFsaWRhdGVSYWRpbygkZWwuYXR0cignbmFtZScpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICAgIHZhbGlkYXRlZCA9IGNsZWFyUmVxdWlyZTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbGlkYXRlZCA9IHRoaXMudmFsaWRhdGVUZXh0KCRlbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgICAgY3VzdG9tVmFsaWRhdG9yID0gdGhpcy5tYXRjaFZhbGlkYXRpb24oJGVsLCB2YWxpZGF0b3IsICRlbC5hdHRyKCdyZXF1aXJlZCcpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKSkge1xuICAgICAgICBlcXVhbFRvID0gdGhpcy5vcHRpb25zLnZhbGlkYXRvcnMuZXF1YWxUbygkZWwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ29vZFRvR28gPSBbY2xlYXJSZXF1aXJlLCB2YWxpZGF0ZWQsIGN1c3RvbVZhbGlkYXRvciwgZXF1YWxUb10uaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAoZ29vZFRvR28gPyAndmFsaWQnIDogJ2ludmFsaWQnKSArICcuemYuYWJpZGUnO1xuXG4gICAgICBpZiAoZ29vZFRvR28pIHtcbiAgICAgICAgLy8gUmUtdmFsaWRhdGUgaW5wdXRzIHRoYXQgZGVwZW5kIG9uIHRoaXMgb25lIHdpdGggZXF1YWx0b1xuICAgICAgICB2YXIgZGVwZW5kZW50RWxlbWVudHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsdG89XCInICsgJGVsLmF0dHIoJ2lkJykgKyAnXCJdJyk7XG4gICAgICAgIGlmIChkZXBlbmRlbnRFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgIGRlcGVuZGVudEVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS52YWwoKSkge1xuICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0ZUlucHV0KCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpc1tnb29kVG9HbyA/ICdyZW1vdmVFcnJvckNsYXNzZXMnIDogJ2FkZEVycm9yQ2xhc3NlcyddKCRlbCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgaW5wdXQgaXMgZG9uZSBjaGVja2luZyBmb3IgdmFsaWRhdGlvbi4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYHZhbGlkLnpmLmFiaWRlYCBvciBgaW52YWxpZC56Zi5hYmlkZWBcbiAgICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIERPTSBlbGVtZW50IG9mIHRoZSBpbnB1dC5cbiAgICAgICAqIEBldmVudCBBYmlkZSN2YWxpZFxuICAgICAgICogQGV2ZW50IEFiaWRlI2ludmFsaWRcbiAgICAgICAqL1xuICAgICAgJGVsLnRyaWdnZXIobWVzc2FnZSwgWyRlbF0pO1xuXG4gICAgICByZXR1cm4gZ29vZFRvR287XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR29lcyB0aHJvdWdoIGEgZm9ybSBhbmQgaWYgdGhlcmUgYXJlIGFueSBpbnZhbGlkIGlucHV0cywgaXQgd2lsbCBkaXNwbGF5IHRoZSBmb3JtIGVycm9yIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gbm9FcnJvciAtIHRydWUgaWYgbm8gZXJyb3JzIHdlcmUgZGV0ZWN0ZWQuLi5cbiAgICAgKiBAZmlyZXMgQWJpZGUjZm9ybXZhbGlkXG4gICAgICogQGZpcmVzIEFiaWRlI2Zvcm1pbnZhbGlkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3ZhbGlkYXRlRm9ybScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybSgpIHtcbiAgICAgIHZhciBhY2MgPSBbXTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGlucHV0cy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWNjLnB1c2goX3RoaXMudmFsaWRhdGVJbnB1dCgoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykpKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbm9FcnJvciA9IGFjYy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtYWJpZGUtZXJyb3JdJykuY3NzKCdkaXNwbGF5Jywgbm9FcnJvciA/ICdub25lJyA6ICdibG9jaycpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaXMgZmluaXNoZWQgdmFsaWRhdGluZy4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYGZvcm12YWxpZC56Zi5hYmlkZWAgb3IgYGZvcm1pbnZhbGlkLnpmLmFiaWRlYC5cbiAgICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIGVsZW1lbnQgb2YgdGhlIGZvcm0uXG4gICAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybXZhbGlkXG4gICAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybWludmFsaWRcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKChub0Vycm9yID8gJ2Zvcm12YWxpZCcgOiAnZm9ybWludmFsaWQnKSArICcuemYuYWJpZGUnLCBbdGhpcy4kZWxlbWVudF0pO1xuXG4gICAgICByZXR1cm4gbm9FcnJvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3IgYSBub3QgYSB0ZXh0IGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHRoZSBwYXR0ZXJuIHNwZWNpZmllZCBpbiB0aGUgYXR0cmlidXRlLiBJZiBubyBtYXRjaGluZyBwYXR0ZXJuIGlzIGZvdW5kLCByZXR1cm5zIHRydWUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhIHRleHQgaW5wdXQgSFRNTCBlbGVtZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdHRlcm4gLSBzdHJpbmcgdmFsdWUgb2Ygb25lIG9mIHRoZSBSZWdFeCBwYXR0ZXJucyBpbiBBYmlkZS5vcHRpb25zLnBhdHRlcm5zXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCB0aGUgaW5wdXQgdmFsdWUgbWF0Y2hlcyB0aGUgcGF0dGVybiBzcGVjaWZpZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndmFsaWRhdGVUZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVUZXh0KCRlbCwgcGF0dGVybikge1xuICAgICAgLy8gQSBwYXR0ZXJuIGNhbiBiZSBwYXNzZWQgdG8gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBiZSBpbmZlcmVkIGZyb20gdGhlIGlucHV0J3MgXCJwYXR0ZXJuXCIgYXR0cmlidXRlLCBvciBpdCdzIFwidHlwZVwiIGF0dHJpYnV0ZVxuICAgICAgcGF0dGVybiA9IHBhdHRlcm4gfHwgJGVsLmF0dHIoJ3BhdHRlcm4nKSB8fCAkZWwuYXR0cigndHlwZScpO1xuICAgICAgdmFyIGlucHV0VGV4dCA9ICRlbC52YWwoKTtcbiAgICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoaW5wdXRUZXh0Lmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGUgcGF0dGVybiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaXMgaW4gQWJpZGUncyBsaXN0IG9mIHBhdHRlcm5zLCB0aGVuIHRlc3QgdGhhdCByZWdleHBcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXR0ZXJucy5oYXNPd25Qcm9wZXJ0eShwYXR0ZXJuKSkge1xuICAgICAgICAgIHZhbGlkID0gdGhpcy5vcHRpb25zLnBhdHRlcm5zW3BhdHRlcm5dLnRlc3QoaW5wdXRUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgcGF0dGVybiBuYW1lIGlzbid0IGFsc28gdGhlIHR5cGUgYXR0cmlidXRlIG9mIHRoZSBmaWVsZCwgdGhlbiB0ZXN0IGl0IGFzIGEgcmVnZXhwXG4gICAgICAgIGVsc2UgaWYgKHBhdHRlcm4gIT09ICRlbC5hdHRyKCd0eXBlJykpIHtcbiAgICAgICAgICAgIHZhbGlkID0gbmV3IFJlZ0V4cChwYXR0ZXJuKS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBbiBlbXB0eSBmaWVsZCBpcyB2YWxpZCBpZiBpdCdzIG5vdCByZXF1aXJlZFxuICAgICAgZWxzZSBpZiAoISRlbC5wcm9wKCdyZXF1aXJlZCcpKSB7XG4gICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3IgYSBub3QgYSByYWRpbyBpbnB1dCBpcyB2YWxpZCBiYXNlZCBvbiB3aGV0aGVyIG9yIG5vdCBpdCBpcyByZXF1aXJlZCBhbmQgc2VsZWN0ZWQuIEFsdGhvdWdoIHRoZSBmdW5jdGlvbiB0YXJnZXRzIGEgc2luZ2xlIGA8aW5wdXQ+YCwgaXQgdmFsaWRhdGVzIGJ5IGNoZWNraW5nIHRoZSBgcmVxdWlyZWRgIGFuZCBgY2hlY2tlZGAgcHJvcGVydGllcyBvZiBhbGwgcmFkaW8gYnV0dG9ucyBpbiBpdHMgZ3JvdXAuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdCBsZWFzdCBvbmUgcmFkaW8gaW5wdXQgaGFzIGJlZW4gc2VsZWN0ZWQgKGlmIGl0J3MgcmVxdWlyZWQpXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3ZhbGlkYXRlUmFkaW8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZVJhZGlvKGdyb3VwTmFtZSkge1xuICAgICAgLy8gSWYgYXQgbGVhc3Qgb25lIHJhZGlvIGluIHRoZSBncm91cCBoYXMgdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLCB0aGUgZ3JvdXAgaXMgY29uc2lkZXJlZCByZXF1aXJlZFxuICAgICAgLy8gUGVyIFczQyBzcGVjLCBhbGwgcmFkaW8gYnV0dG9ucyBpbiBhIGdyb3VwIHNob3VsZCBoYXZlIGByZXF1aXJlZGAsIGJ1dCB3ZSdyZSBiZWluZyBuaWNlXG4gICAgICB2YXIgJGdyb3VwID0gdGhpcy4kZWxlbWVudC5maW5kKCc6cmFkaW9bbmFtZT1cIicgKyBncm91cE5hbWUgKyAnXCJdJyk7XG4gICAgICB2YXIgdmFsaWQgPSBmYWxzZSxcbiAgICAgICAgICByZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgICAvLyBGb3IgdGhlIGdyb3VwIHRvIGJlIHJlcXVpcmVkLCBhdCBsZWFzdCBvbmUgcmFkaW8gbmVlZHMgdG8gYmUgcmVxdWlyZWRcbiAgICAgICRncm91cC5lYWNoKGZ1bmN0aW9uIChpLCBlKSB7XG4gICAgICAgIGlmICgoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZSkuYXR0cigncmVxdWlyZWQnKSkge1xuICAgICAgICAgIHJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIXJlcXVpcmVkKSB2YWxpZCA9IHRydWU7XG5cbiAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgLy8gRm9yIHRoZSBncm91cCB0byBiZSB2YWxpZCwgYXQgbGVhc3Qgb25lIHJhZGlvIG5lZWRzIHRvIGJlIGNoZWNrZWRcbiAgICAgICAgJGdyb3VwLmVhY2goZnVuY3Rpb24gKGksIGUpIHtcbiAgICAgICAgICBpZiAoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGUpLnByb3AoJ2NoZWNrZWQnKSkge1xuICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIHNlbGVjdGVkIGlucHV0IHBhc3NlcyBhIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9uLiBNdWx0aXBsZSB2YWxpZGF0aW9ucyBjYW4gYmUgdXNlZCwgaWYgcGFzc2VkIHRvIHRoZSBlbGVtZW50IHdpdGggYGRhdGEtdmFsaWRhdG9yPVwiZm9vIGJhciBiYXpcImAgaW4gYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdGVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgaW5wdXQgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsaWRhdG9ycyAtIGEgc3RyaW5nIG9mIGZ1bmN0aW9uIG5hbWVzIG1hdGNoaW5nIGZ1bmN0aW9ucyBpbiB0aGUgQWJpZGUub3B0aW9ucy52YWxpZGF0b3JzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlcXVpcmVkIC0gc2VsZiBleHBsYW5hdG9yeT9cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHZhbGlkYXRpb25zIHBhc3NlZC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWF0Y2hWYWxpZGF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9ycywgcmVxdWlyZWQpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICByZXF1aXJlZCA9IHJlcXVpcmVkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICB2YXIgY2xlYXIgPSB2YWxpZGF0b3JzLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBfdGhpczUub3B0aW9ucy52YWxpZGF0b3JzW3ZdKCRlbCwgcmVxdWlyZWQsICRlbC5wYXJlbnQoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjbGVhci5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIGZvcm0gaW5wdXRzIGFuZCBzdHlsZXNcbiAgICAgKiBAZmlyZXMgQWJpZGUjZm9ybXJlc2V0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0Rm9ybScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcbiAgICAgIHZhciAkZm9ybSA9IHRoaXMuJGVsZW1lbnQsXG4gICAgICAgICAgb3B0cyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcuJyArIG9wdHMubGFiZWxFcnJvckNsYXNzLCAkZm9ybSkubm90KCdzbWFsbCcpLnJlbW92ZUNsYXNzKG9wdHMubGFiZWxFcnJvckNsYXNzKTtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnLicgKyBvcHRzLmlucHV0RXJyb3JDbGFzcywgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmlucHV0RXJyb3JDbGFzcyk7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkob3B0cy5mb3JtRXJyb3JTZWxlY3RvciArICcuJyArIG9wdHMuZm9ybUVycm9yQ2xhc3MpLnJlbW92ZUNsYXNzKG9wdHMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICAgJGZvcm0uZmluZCgnW2RhdGEtYWJpZGUtZXJyb3JdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnOmlucHV0JywgJGZvcm0pLm5vdCgnOmJ1dHRvbiwgOnN1Ym1pdCwgOnJlc2V0LCA6aGlkZGVuLCA6cmFkaW8sIDpjaGVja2JveCwgW2RhdGEtYWJpZGUtaWdub3JlXScpLnZhbCgnJykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJzppbnB1dDpyYWRpbycsICRmb3JtKS5ub3QoJ1tkYXRhLWFiaWRlLWlnbm9yZV0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCc6aW5wdXQ6Y2hlY2tib3gnLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBoYXMgYmVlbiByZXNldC5cbiAgICAgICAqIEBldmVudCBBYmlkZSNmb3JtcmVzZXRcbiAgICAgICAqL1xuICAgICAgJGZvcm0udHJpZ2dlcignZm9ybXJlc2V0LnpmLmFiaWRlJywgWyRmb3JtXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAgICogUmVtb3ZlcyBlcnJvciBzdHlsZXMgYW5kIGNsYXNzZXMgZnJvbSBlbGVtZW50cywgd2l0aG91dCByZXNldHRpbmcgdGhlaXIgdmFsdWVzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuYWJpZGUnKS5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICB0aGlzLiRpbnB1dHMub2ZmKCcuYWJpZGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlRXJyb3JDbGFzc2VzKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQWJpZGU7XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5BYmlkZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGV2ZW50IHRvIHZhbGlkYXRlIGlucHV0cy4gQ2hlY2tib3hlcyBhbmQgcmFkaW9zIHZhbGlkYXRlIGltbWVkaWF0ZWx5LlxuICAgKiBSZW1vdmUgb3IgY2hhbmdlIHRoaXMgdmFsdWUgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnZmllbGRDaGFuZ2UnXG4gICAqL1xuICB2YWxpZGF0ZU9uOiAnZmllbGRDaGFuZ2UnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIGlucHV0IGxhYmVscyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtaW52YWxpZC1sYWJlbCdcbiAgICovXG4gIGxhYmVsRXJyb3JDbGFzczogJ2lzLWludmFsaWQtbGFiZWwnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIGlucHV0cyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtaW52YWxpZC1pbnB1dCdcbiAgICovXG4gIGlucHV0RXJyb3JDbGFzczogJ2lzLWludmFsaWQtaW5wdXQnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBzZWxlY3RvciB0byB1c2UgdG8gdGFyZ2V0IEZvcm0gRXJyb3JzIGZvciBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJy5mb3JtLWVycm9yJ1xuICAgKi9cbiAgZm9ybUVycm9yU2VsZWN0b3I6ICcuZm9ybS1lcnJvcicsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFkZGVkIHRvIEZvcm0gRXJyb3JzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdpcy12aXNpYmxlJ1xuICAgKi9cbiAgZm9ybUVycm9yQ2xhc3M6ICdpcy12aXNpYmxlJyxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgdG8gdmFsaWRhdGUgdGV4dCBpbnB1dHMgb24gYW55IHZhbHVlIGNoYW5nZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGxpdmVWYWxpZGF0ZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIHRvIHZhbGlkYXRlIGlucHV0cyBvbiBibHVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmFsaWRhdGVPbkJsdXI6IGZhbHNlLFxuXG4gIHBhdHRlcm5zOiB7XG4gICAgYWxwaGE6IC9eW2EtekEtWl0rJC8sXG4gICAgYWxwaGFfbnVtZXJpYzogL15bYS16QS1aMC05XSskLyxcbiAgICBpbnRlZ2VyOiAvXlstK10/XFxkKyQvLFxuICAgIG51bWJlcjogL15bLStdP1xcZCooPzpbXFwuXFwsXVxcZCspPyQvLFxuXG4gICAgLy8gYW1leCwgdmlzYSwgZGluZXJzXG4gICAgY2FyZDogL14oPzo0WzAtOV17MTJ9KD86WzAtOV17M30pP3w1WzEtNV1bMC05XXsxNH18KD86MjIyWzEtOV18MlszLTZdWzAtOV17Mn18MjdbMC0xXVswLTldfDI3MjApWzAtOV17MTJ9fDYoPzowMTF8NVswLTldWzAtOV0pWzAtOV17MTJ9fDNbNDddWzAtOV17MTN9fDMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfXwoPzoyMTMxfDE4MDB8MzVcXGR7M30pXFxkezExfSkkLyxcbiAgICBjdnY6IC9eKFswLTldKXszLDR9JC8sXG5cbiAgICAvLyBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9zdGF0ZXMtb2YtdGhlLXR5cGUtYXR0cmlidXRlLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3NcbiAgICBlbWFpbDogL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrJC8sXG5cbiAgICB1cmw6IC9eKGh0dHBzP3xmdHB8ZmlsZXxzc2gpOlxcL1xcLygoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6KSpAKT8oKChcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSkpfCgoKFthLXpBLVpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8pKDpcXGQqKT8pKFxcLygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkrKFxcLygoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSopKik/KT8oXFw/KCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxbXFx1RTAwMC1cXHVGOEZGXXxcXC98XFw/KSopPyhcXCMoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFxcL3xcXD8pKik/JC8sXG4gICAgLy8gYWJjLmRlXG4gICAgZG9tYWluOiAvXihbYS16QS1aMC05XShbYS16QS1aMC05XFwtXXswLDYxfVthLXpBLVowLTldKT9cXC4pK1thLXpBLVpdezIsOH0kLyxcblxuICAgIGRhdGV0aW1lOiAvXihbMC0yXVswLTldezN9KVxcLShbMC0xXVswLTldKVxcLShbMC0zXVswLTldKVQoWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSkoWnwoW1xcLVxcK10oWzAtMV1bMC05XSlcXDowMCkpJC8sXG4gICAgLy8gWVlZWS1NTS1ERFxuICAgIGRhdGU6IC8oPzoxOXwyMClbMC05XXsyfS0oPzooPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18MVswLTldfDJbMC05XSl8KD86KD8hMDIpKD86MFsxLTldfDFbMC0yXSktKD86MzApKXwoPzooPzowWzEzNTc4XXwxWzAyXSktMzEpKSQvLFxuICAgIC8vIEhIOk1NOlNTXG4gICAgdGltZTogL14oMFswLTldfDFbMC05XXwyWzAtM10pKDpbMC01XVswLTldKXsyfSQvLFxuICAgIGRhdGVJU086IC9eXFxkezR9W1xcL1xcLV1cXGR7MSwyfVtcXC9cXC1dXFxkezEsMn0kLyxcbiAgICAvLyBNTS9ERC9ZWVlZXG4gICAgbW9udGhfZGF5X3llYXI6IC9eKDBbMS05XXwxWzAxMl0pWy0gXFwvLl0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlbLSBcXC8uXVxcZHs0fSQvLFxuICAgIC8vIEREL01NL1lZWVlcbiAgICBkYXlfbW9udGhfeWVhcjogL14oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlbLSBcXC8uXSgwWzEtOV18MVswMTJdKVstIFxcLy5dXFxkezR9JC8sXG5cbiAgICAvLyAjRkZGIG9yICNGRkZGRkZcbiAgICBjb2xvcjogL14jPyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSkkLyxcblxuICAgIC8vIERvbWFpbiB8fCBVUkxcbiAgICB3ZWJzaXRlOiB7XG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHRleHQpIHtcbiAgICAgICAgcmV0dXJuIEFiaWRlLmRlZmF1bHRzLnBhdHRlcm5zWydkb21haW4nXS50ZXN0KHRleHQpIHx8IEFiaWRlLmRlZmF1bHRzLnBhdHRlcm5zWyd1cmwnXS50ZXN0KHRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogT3B0aW9uYWwgdmFsaWRhdGlvbiBmdW5jdGlvbnMgdG8gYmUgdXNlZC4gYGVxdWFsVG9gIGJlaW5nIHRoZSBvbmx5IGRlZmF1bHQgaW5jbHVkZWQgZnVuY3Rpb24uXG4gICAqIEZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIG9ubHkgYSBib29sZWFuIGlmIHRoZSBpbnB1dCBpcyB2YWxpZCBvciBub3QuIEZ1bmN0aW9ucyBhcmUgZ2l2ZW4gdGhlIGZvbGxvd2luZyBhcmd1bWVudHM6XG4gICAqIGVsIDogVGhlIGpRdWVyeSBlbGVtZW50IHRvIHZhbGlkYXRlLlxuICAgKiByZXF1aXJlZCA6IEJvb2xlYW4gdmFsdWUgb2YgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZSBiZSBwcmVzZW50IG9yIG5vdC5cbiAgICogcGFyZW50IDogVGhlIGRpcmVjdCBwYXJlbnQgb2YgdGhlIGlucHV0LlxuICAgKiBAb3B0aW9uXG4gICAqL1xuICB2YWxpZGF0b3JzOiB7XG4gICAgZXF1YWxUbzogZnVuY3Rpb24gZXF1YWxUbyhlbCwgcmVxdWlyZWQsIHBhcmVudCkge1xuICAgICAgcmV0dXJuICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnIycgKyBlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKSkudmFsKCkgPT09IGVsLnZhbCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5BYmlkZSA9IEFiaWRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dVlXSnBaR1V1YW5NaVhTd2libUZ0WlhNaU9sc2lRV0pwWkdVaUxDSmxiR1Z0Wlc1MElpd2liM0IwYVc5dWN5SXNJaVJsYkdWdFpXNTBJaXdpSkNJc0ltVjRkR1Z1WkNJc0ltUmxabUYxYkhSeklpd2laR0YwWVNJc0ltTnNZWE56VG1GdFpTSXNJbDlwYm1sMElpd2lKR2x1Y0hWMGN5SXNJbVpwYm1RaUxDSmZaWFpsYm5Seklpd2liMlptSWl3aWIyNGlMQ0p5WlhObGRFWnZjbTBpTENKMllXeHBaR0YwWlVadmNtMGlMQ0oyWVd4cFpHRjBaVTl1SWl3aVpTSXNJblpoYkdsa1lYUmxTVzV3ZFhRaUxDSjBZWEpuWlhRaUxDSnNhWFpsVm1Gc2FXUmhkR1VpTENKMllXeHBaR0YwWlU5dVFteDFjaUlzSWlSbGJDSXNJbUYwZEhJaUxDSnBjMGR2YjJRaUxDSjBlWEJsSWl3aVkyaGxZMnRsWkNJc0ltOXdkQ0lzSW14bGJtZDBhQ0lzSW5aaGJDSXNJbWxrSWl3aUpHVnljbTl5SWl3aWMybGliR2x1WjNNaUxDSm1iM0p0UlhKeWIzSlRaV3hsWTNSdmNpSXNJbkJoY21WdWRDSXNJbUZrWkNJc0lpUnNZV0psYkNJc0ltTnNiM05sYzNRaUxDSWtaV3h6SWl3aWJHRmlaV3h6SWl3aWJXRndJaXdpYVNJc0ltVnNJaXdpWm1sdVpFeGhZbVZzSWl3aUpHWnZjbTFGY25KdmNpSXNJbVpwYm1SR2IzSnRSWEp5YjNJaUxDSmhaR1JEYkdGemN5SXNJbXhoWW1Wc1JYSnliM0pEYkdGemN5SXNJbVp2Y20xRmNuSnZja05zWVhOeklpd2lhVzV3ZFhSRmNuSnZja05zWVhOeklpd2laM0p2ZFhCT1lXMWxJaXdpSkd4aFltVnNjeUlzSW1acGJtUlNZV1JwYjB4aFltVnNjeUlzSWlSbWIzSnRSWEp5YjNKeklpd2ljbVZ0YjNabFEyeGhjM01pTENKeVpXMXZkbVZCZEhSeUlpd2ljbVZ0YjNabFVtRmthVzlGY25KdmNrTnNZWE56WlhNaUxDSmpiR1ZoY2xKbGNYVnBjbVVpTENKeVpYRjFhWEpsWkVOb1pXTnJJaXdpZG1Gc2FXUmhkR1ZrSWl3aVkzVnpkRzl0Vm1Gc2FXUmhkRzl5SWl3aWRtRnNhV1JoZEc5eUlpd2laWEYxWVd4VWJ5SXNJbWx6SWl3aWRtRnNhV1JoZEdWU1lXUnBieUlzSW5aaGJHbGtZWFJsVkdWNGRDSXNJbTFoZEdOb1ZtRnNhV1JoZEdsdmJpSXNJblpoYkdsa1lYUnZjbk1pTENKbmIyOWtWRzlIYnlJc0ltbHVaR1Y0VDJZaUxDSnRaWE56WVdkbElpd2laR1Z3Wlc1a1pXNTBSV3hsYldWdWRITWlMQ0pmZEdocGN5SXNJbVZoWTJnaUxDSjBjbWxuWjJWeUlpd2lZV05qSWl3aWNIVnphQ0lzSW01dlJYSnliM0lpTENKamMzTWlMQ0p3WVhSMFpYSnVJaXdpYVc1d2RYUlVaWGgwSWl3aWRtRnNhV1FpTENKd1lYUjBaWEp1Y3lJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aWRHVnpkQ0lzSWxKbFowVjRjQ0lzSW5CeWIzQWlMQ0lrWjNKdmRYQWlMQ0p5WlhGMWFYSmxaQ0lzSW1Oc1pXRnlJaXdpYzNCc2FYUWlMQ0oySWl3aUpHWnZjbTBpTENKdmNIUnpJaXdpYm05MElpd2ljbVZ0YjNabFJYSnliM0pEYkdGemMyVnpJaXdpVUd4MVoybHVJaXdpWVd4d2FHRWlMQ0poYkhCb1lWOXVkVzFsY21saklpd2lhVzUwWldkbGNpSXNJbTUxYldKbGNpSXNJbU5oY21RaUxDSmpkbllpTENKbGJXRnBiQ0lzSW5WeWJDSXNJbVJ2YldGcGJpSXNJbVJoZEdWMGFXMWxJaXdpWkdGMFpTSXNJblJwYldVaUxDSmtZWFJsU1ZOUElpd2liVzl1ZEdoZlpHRjVYM2xsWVhJaUxDSmtZWGxmYlc5dWRHaGZlV1ZoY2lJc0ltTnZiRzl5SWl3aWQyVmljMmwwWlNJc0luUmxlSFFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPenM3UVVGRlFUczdPenRCUVVOQk96czdPenM3T3pzN08wRkJSVUU3T3pzN08wbEJTMDFCTEVzN096czdPenM3T3pzN096dEJRVU5LT3pzN096czdPenN5UWtGUlQwTXNUeXhGUVVGMVFqdEJRVUZCTEZWQlFXUkRMRTlCUVdNc2RVVkJRVW9zUlVGQlNUczdRVUZETlVJc1YwRkJTME1zVVVGQlRDeEhRVUZuUWtZc1QwRkJhRUk3UVVGRFFTeFhRVUZMUXl4UFFVRk1MRWRCUVdkQ1JTeHBRa0ZCUlVNc1RVRkJSaXhEUVVGVExFbEJRVlFzUlVGQlpTeEZRVUZtTEVWQlFXMUNUQ3hOUVVGTlRTeFJRVUY2UWl4RlFVRnRReXhMUVVGTFNDeFJRVUZNTEVOQlFXTkpMRWxCUVdRc1JVRkJia01zUlVGQmVVUk1MRTlCUVhwRUxFTkJRV2hDT3p0QlFVVkJMRmRCUVV0TkxGTkJRVXdzUjBGQmFVSXNUMEZCYWtJc1EwRktORUlzUTBGSlJqdEJRVU14UWl4WFFVRkxReXhMUVVGTU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN05FSkJTVkU3UVVGRFRpeFhRVUZMUXl4UFFVRk1MRWRCUVdVc1MwRkJTMUFzVVVGQlRDeERRVUZqVVN4SlFVRmtMRU5CUVcxQ0xIbENRVUZ1UWl4RFFVRm1PenRCUVVWQkxGZEJRVXRETEU5QlFVdzdRVUZEUkRzN1FVRkZSRHM3T3pzN096czRRa0ZKVlR0QlFVRkJPenRCUVVOU0xGZEJRVXRVTEZGQlFVd3NRMEZCWTFVc1IwRkJaQ3hEUVVGclFpeFJRVUZzUWl4RlFVTkhReXhGUVVSSUxFTkJRMDBzWjBKQlJFNHNSVUZEZDBJc1dVRkJUVHRCUVVNeFFpeGxRVUZMUXl4VFFVRk1PMEZCUTBRc1QwRklTQ3hGUVVsSFJDeEZRVXBJTEVOQlNVMHNhVUpCU2s0c1JVRkplVUlzV1VGQlRUdEJRVU16UWl4bFFVRlBMRTlCUVV0RkxGbEJRVXdzUlVGQlVEdEJRVU5FTEU5QlRrZzdPMEZCVVVFc1ZVRkJTU3hMUVVGTFpDeFBRVUZNTEVOQlFXRmxMRlZCUVdJc1MwRkJORUlzWVVGQmFFTXNSVUZCSzBNN1FVRkROME1zWVVGQlMxQXNUMEZCVEN4RFFVTkhSeXhIUVVSSUxFTkJRMDhzYVVKQlJGQXNSVUZGUjBNc1JVRkdTQ3hEUVVWTkxHbENRVVpPTEVWQlJYbENMRlZCUVVOSkxFTkJRVVFzUlVGQlR6dEJRVU0xUWl4cFFrRkJTME1zWVVGQlRDeERRVUZ0UWl4elFrRkJSVVFzUlVGQlJVVXNUVUZCU2l4RFFVRnVRanRCUVVORUxGTkJTa2c3UVVGTFJEczdRVUZGUkN4VlFVRkpMRXRCUVV0c1FpeFBRVUZNTEVOQlFXRnRRaXhaUVVGcVFpeEZRVUVyUWp0QlFVTTNRaXhoUVVGTFdDeFBRVUZNTEVOQlEwZEhMRWRCUkVnc1EwRkRUeXhuUWtGRVVDeEZRVVZIUXl4RlFVWklMRU5CUlUwc1owSkJSazRzUlVGRmQwSXNWVUZCUTBrc1EwRkJSQ3hGUVVGUE8wRkJRek5DTEdsQ1FVRkxReXhoUVVGTUxFTkJRVzFDTEhOQ1FVRkZSQ3hGUVVGRlJTeE5RVUZLTEVOQlFXNUNPMEZCUTBRc1UwRktTRHRCUVV0RU96dEJRVVZFTEZWQlFVa3NTMEZCUzJ4Q0xFOUJRVXdzUTBGQllXOUNMR05CUVdwQ0xFVkJRV2xETzBGQlF5OUNMR0ZCUVV0YUxFOUJRVXdzUTBGRFIwY3NSMEZFU0N4RFFVTlBMR1ZCUkZBc1JVRkZSME1zUlVGR1NDeERRVVZOTEdWQlJrNHNSVUZGZFVJc1ZVRkJRMGtzUTBGQlJDeEZRVUZQTzBGQlF6RkNMR2xDUVVGTFF5eGhRVUZNTEVOQlFXMUNMSE5DUVVGRlJDeEZRVUZGUlN4TlFVRktMRU5CUVc1Q08wRkJRMFFzVTBGS1NEdEJRVXRFTzBGQlEwWTdPMEZCUlVRN096czdPenM3T0VKQlNWVTdRVUZEVWl4WFFVRkxXQ3hMUVVGTU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN08ydERRVXRqWXl4SExFVkJRVXM3UVVGRGFrSXNWVUZCU1N4RFFVRkRRU3hKUVVGSlF5eEpRVUZLTEVOQlFWTXNWVUZCVkN4RFFVRk1MRVZCUVRKQ0xFOUJRVThzU1VGQlVEczdRVUZGTTBJc1ZVRkJTVU1zVTBGQlV5eEpRVUZpT3p0QlFVVkJMR05CUVZGR0xFbEJRVWtzUTBGQlNpeEZRVUZQUnl4SlFVRm1PMEZCUTBVc1lVRkJTeXhWUVVGTU8wRkJRMFZFTEcxQ1FVRlRSaXhKUVVGSkxFTkJRVW9zUlVGQlQwa3NUMEZCYUVJN1FVRkRRVHM3UVVGRlJpeGhRVUZMTEZGQlFVdzdRVUZEUVN4aFFVRkxMRmxCUVV3N1FVRkRRU3hoUVVGTExHbENRVUZNTzBGQlEwVXNZMEZCU1VNc1RVRkJUVXdzU1VGQlNWb3NTVUZCU2l4RFFVRlRMR2xDUVVGVUxFTkJRVlk3UVVGRFFTeGpRVUZKTEVOQlFVTnBRaXhKUVVGSlF5eE5RVUZNTEVsQlFXVXNRMEZCUTBRc1NVRkJTVVVzUjBGQlNpeEZRVUZ3UWl4RlFVRXJRa3dzVTBGQlV5eExRVUZVTzBGQlF5OUNPenRCUVVWR08wRkJRMFVzWTBGQlJ5eERRVUZEUml4SlFVRkpUeXhIUVVGS0xFVkJRVVFzU1VGQll5eERRVUZEVUN4SlFVRkpUeXhIUVVGS0xFZEJRVlZFTEUxQlFUVkNMRVZCUVc5RFNpeFRRVUZUTEV0QlFWUTdRVUZpZUVNN08wRkJaMEpCTEdGQlFVOUJMRTFCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdPenM3TzJ0RFFWbGpSaXhITEVWQlFVczdRVUZEYWtJc1ZVRkJTVkVzUzBGQlMxSXNTVUZCU1N4RFFVRktMRVZCUVU5UkxFVkJRV2hDTzBGQlEwRXNWVUZCU1VNc1UwRkJVMVFzU1VGQlNWVXNVVUZCU2l4RFFVRmhMRXRCUVVzdlFpeFBRVUZNTEVOQlFXRm5ReXhwUWtGQk1VSXNRMEZCWWpzN1FVRkZRU3hWUVVGSkxFTkJRVU5HTEU5QlFVOUlMRTFCUVZvc1JVRkJiMEk3UVVGRGJFSkhMR2xDUVVGVFZDeEpRVUZKV1N4TlFVRktMRWRCUVdGNFFpeEpRVUZpTEVOQlFXdENMRXRCUVV0VUxFOUJRVXdzUTBGQllXZERMR2xDUVVFdlFpeERRVUZVTzBGQlEwUTdPMEZCUlVSR0xHVkJRVk5CTEU5QlFVOUpMRWRCUVZBc1EwRkJWeXhMUVVGTGFrTXNVVUZCVEN4RFFVRmpVU3hKUVVGa0xEUkNRVUUwUTI5Q0xFVkJRVFZETEZGQlFWZ3NRMEZCVkRzN1FVRkZRU3hoUVVGUFF5eE5RVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096aENRVkZWVkN4SExFVkJRVXM3UVVGRFlpeFZRVUZKVVN4TFFVRkxVaXhKUVVGSkxFTkJRVW9zUlVGQlQxRXNSVUZCYUVJN1FVRkRRU3hWUVVGSlRTeFRRVUZUTEV0QlFVdHNReXhSUVVGTUxFTkJRV05STEVsQlFXUXNhVUpCUVdsRGIwSXNSVUZCYWtNc1VVRkJZanM3UVVGRlFTeFZRVUZKTEVOQlFVTk5MRTlCUVU5U0xFMUJRVm9zUlVGQmIwSTdRVUZEYkVJc1pVRkJUMDRzU1VGQlNXVXNUMEZCU2l4RFFVRlpMRTlCUVZvc1EwRkJVRHRCUVVORU96dEJRVVZFTEdGQlFVOUVMRTFCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdiME5CVVdkQ1JTeEpMRVZCUVUwN1FVRkJRVHM3UVVGRGNFSXNWVUZCU1VNc1UwRkJVMFFzUzBGQlMwVXNSMEZCVEN4RFFVRlRMRlZCUVVORExFTkJRVVFzUlVGQlNVTXNSVUZCU2l4RlFVRlhPMEZCUXk5Q0xGbEJRVWxhTEV0QlFVdFpMRWRCUVVkYUxFVkJRVm83UVVGRFFTeFpRVUZKVFN4VFFVRlRMRTlCUVV0c1F5eFJRVUZNTEVOQlFXTlJMRWxCUVdRc2FVSkJRV2xEYjBJc1JVRkJha01zVVVGQllqczdRVUZGUVN4WlFVRkpMRU5CUVVOTkxFOUJRVTlTTEUxQlFWb3NSVUZCYjBJN1FVRkRiRUpSTEcxQ1FVRlRMSE5DUVVGRlRTeEZRVUZHTEVWQlFVMU1MRTlCUVU0c1EwRkJZeXhQUVVGa0xFTkJRVlE3UVVGRFJEdEJRVU5FTEdWQlFVOUVMRTlCUVU4c1EwRkJVQ3hEUVVGUU8wRkJRMFFzVDBGU1dTeERRVUZpT3p0QlFWVkJMR0ZCUVU4c2MwSkJRVVZITEUxQlFVWXNRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3TzI5RFFVbG5RbXBDTEVjc1JVRkJTenRCUVVOdVFpeFZRVUZKWXl4VFFVRlRMRXRCUVV0UExGTkJRVXdzUTBGQlpYSkNMRWRCUVdZc1EwRkJZanRCUVVOQkxGVkJRVWx6UWl4aFFVRmhMRXRCUVV0RExHRkJRVXdzUTBGQmJVSjJRaXhIUVVGdVFpeERRVUZxUWpzN1FVRkZRU3hWUVVGSll5eFBRVUZQVWl4TlFVRllMRVZCUVcxQ08wRkJRMnBDVVN4bFFVRlBWU3hSUVVGUUxFTkJRV2RDTEV0QlFVczNReXhQUVVGTUxFTkJRV0U0UXl4bFFVRTNRanRCUVVORU96dEJRVVZFTEZWQlFVbElMRmRCUVZkb1FpeE5RVUZtTEVWQlFYVkNPMEZCUTNKQ1owSXNiVUpCUVZkRkxGRkJRVmdzUTBGQmIwSXNTMEZCU3pkRExFOUJRVXdzUTBGQllTdERMR05CUVdwRE8wRkJRMFE3TzBGQlJVUXhRaXhWUVVGSmQwSXNVVUZCU2l4RFFVRmhMRXRCUVVzM1F5eFBRVUZNTEVOQlFXRm5SQ3hsUVVFeFFpeEZRVUV5UXpGQ0xFbEJRVE5ETEVOQlFXZEVMR05CUVdoRUxFVkJRV2RGTEVWQlFXaEZPMEZCUTBRN08wRkJSVVE3T3pzN096czdPelJEUVUxM1FqSkNMRk1zUlVGQlZ6dEJRVU5xUXl4VlFVRkpXaXhQUVVGUExFdEJRVXR3UXl4UlFVRk1MRU5CUVdOUkxFbEJRV1FzYlVKQlFXMURkME1zVTBGQmJrTXNVVUZCV0R0QlFVTkJMRlZCUVVsRExGVkJRVlVzUzBGQlMwTXNaVUZCVEN4RFFVRnhRbVFzU1VGQmNrSXNRMEZCWkR0QlFVTkJMRlZCUVVsbExHTkJRV01zUzBGQlMxSXNZVUZCVEN4RFFVRnRRbEFzU1VGQmJrSXNRMEZCYkVJN08wRkJSVUVzVlVGQlNXRXNVVUZCVVhaQ0xFMUJRVm9zUlVGQmIwSTdRVUZEYkVKMVFpeG5Ra0ZCVVVjc1YwRkJVaXhEUVVGdlFpeExRVUZMY2tRc1QwRkJUQ3hEUVVGaE9FTXNaVUZCYWtNN1FVRkRSRHM3UVVGRlJDeFZRVUZKVFN4WlFVRlpla0lzVFVGQmFFSXNSVUZCZDBJN1FVRkRkRUo1UWl4dlFrRkJXVU1zVjBGQldpeERRVUYzUWl4TFFVRkxja1FzVDBGQlRDeERRVUZoSzBNc1kwRkJja003UVVGRFJEczdRVUZGUkZZc1YwRkJTMmRDTEZkQlFVd3NRMEZCYVVJc1MwRkJTM0pFTEU5QlFVd3NRMEZCWVdkRUxHVkJRVGxDTEVWQlFTdERUU3hWUVVFdlF5eERRVUV3UkN4alFVRXhSRHRCUVVWRU96dEJRVVZFT3pzN096czdPM1ZEUVVsdFFtcERMRWNzUlVGQlN6dEJRVU4wUWp0QlFVTkJMRlZCUVVkQkxFbEJRVWtzUTBGQlNpeEZRVUZQUnl4SlFVRlFMRWxCUVdVc1QwRkJiRUlzUlVGQk1rSTdRVUZEZWtJc1pVRkJUeXhMUVVGTEswSXNkVUpCUVV3c1EwRkJOa0pzUXl4SlFVRkpReXhKUVVGS0xFTkJRVk1zVFVGQlZDeERRVUUzUWl4RFFVRlFPMEZCUTBRN08wRkJSVVFzVlVGQlNXRXNVMEZCVXl4TFFVRkxUeXhUUVVGTUxFTkJRV1Z5UWl4SFFVRm1MRU5CUVdJN1FVRkRRU3hWUVVGSmMwSXNZVUZCWVN4TFFVRkxReXhoUVVGTUxFTkJRVzFDZGtJc1IwRkJia0lzUTBGQmFrSTdPMEZCUlVFc1ZVRkJTV01zVDBGQlQxSXNUVUZCV0N4RlFVRnRRanRCUVVOcVFsRXNaVUZCVDJ0Q0xGZEJRVkFzUTBGQmJVSXNTMEZCUzNKRUxFOUJRVXdzUTBGQllUaERMR1ZCUVdoRE8wRkJRMFE3TzBGQlJVUXNWVUZCU1Vnc1YwRkJWMmhDTEUxQlFXWXNSVUZCZFVJN1FVRkRja0puUWl4dFFrRkJWMVVzVjBGQldDeERRVUYxUWl4TFFVRkxja1FzVDBGQlRDeERRVUZoSzBNc1kwRkJjRU03UVVGRFJEczdRVUZGUkRGQ0xGVkJRVWxuUXl4WFFVRktMRU5CUVdkQ0xFdEJRVXR5UkN4UFFVRk1MRU5CUVdGblJDeGxRVUUzUWl4RlFVRTRRMDBzVlVGQk9VTXNRMEZCZVVRc1kwRkJla1E3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzN2EwTkJVV05xUXl4SExFVkJRVXM3UVVGRGFrSXNWVUZCU1cxRExHVkJRV1VzUzBGQlMwTXNZVUZCVEN4RFFVRnRRbkJETEVkQlFXNUNMRU5CUVc1Q08wRkJRVUVzVlVGRFNYRkRMRmxCUVZrc1MwRkVhRUk3UVVGQlFTeFZRVVZKUXl4clFrRkJhMElzU1VGR2RFSTdRVUZCUVN4VlFVZEpReXhaUVVGWmRrTXNTVUZCU1VNc1NVRkJTaXhEUVVGVExHZENRVUZVTEVOQlNHaENPMEZCUVVFc1ZVRkpTWFZETEZWQlFWVXNTVUZLWkRzN1FVRk5RVHRCUVVOQkxGVkJRVWw0UXl4SlFVRkplVU1zUlVGQlNpeERRVUZQTEhGQ1FVRlFMRXRCUVdsRGVrTXNTVUZCU1hsRExFVkJRVW9zUTBGQlR5eHBRa0ZCVUN4RFFVRnFReXhKUVVFNFJIcERMRWxCUVVsNVF5eEZRVUZLTEVOQlFVOHNXVUZCVUN4RFFVRnNSU3hGUVVGM1JqdEJRVU4wUml4bFFVRlBMRWxCUVZBN1FVRkRSRHM3UVVGRlJDeGpRVUZSZWtNc1NVRkJTU3hEUVVGS0xFVkJRVTlITEVsQlFXWTdRVUZEUlN4aFFVRkxMRTlCUVV3N1FVRkRSV3RETEhOQ1FVRlpMRXRCUVV0TExHRkJRVXdzUTBGQmJVSXhReXhKUVVGSlF5eEpRVUZLTEVOQlFWTXNUVUZCVkN4RFFVRnVRaXhEUVVGYU8wRkJRMEU3TzBGQlJVWXNZVUZCU3l4VlFVRk1PMEZCUTBWdlF5eHpRa0ZCV1VZc1dVRkJXanRCUVVOQk96dEJRVVZHTEdGQlFVc3NVVUZCVER0QlFVTkJMR0ZCUVVzc1dVRkJURHRCUVVOQkxHRkJRVXNzYVVKQlFVdzdRVUZEUlVVc2MwSkJRVmxHTEZsQlFWbzdRVUZEUVRzN1FVRkZSanRCUVVORlJTeHpRa0ZCV1N4TFFVRkxUU3haUVVGTUxFTkJRV3RDTTBNc1IwRkJiRUlzUTBGQldqdEJRV2hDU2pzN1FVRnRRa0VzVlVGQlNYVkRMRk5CUVVvc1JVRkJaVHRCUVVOaVJDd3dRa0ZCYTBJc1MwRkJTMDBzWlVGQlRDeERRVUZ4UWpWRExFZEJRWEpDTEVWQlFUQkNkVU1zVTBGQk1VSXNSVUZCY1VOMlF5eEpRVUZKUXl4SlFVRktMRU5CUVZNc1ZVRkJWQ3hEUVVGeVF5eERRVUZzUWp0QlFVTkVPenRCUVVWRUxGVkJRVWxFTEVsQlFVbERMRWxCUVVvc1EwRkJVeXhqUVVGVUxFTkJRVW9zUlVGQk9FSTdRVUZETlVKMVF5eHJRa0ZCVlN4TFFVRkxOMFFzVDBGQlRDeERRVUZoYTBVc1ZVRkJZaXhEUVVGM1Frd3NUMEZCZUVJc1EwRkJaME40UXl4SFFVRm9ReXhEUVVGV08wRkJRMFE3TzBGQlIwUXNWVUZCU1RoRExGZEJRVmNzUTBGQlExZ3NXVUZCUkN4RlFVRmxSU3hUUVVGbUxFVkJRVEJDUXl4bFFVRXhRaXhGUVVFeVEwVXNUMEZCTTBNc1JVRkJiMFJQTEU5QlFYQkVMRU5CUVRSRUxFdEJRVFZFTEUxQlFYVkZMRU5CUVVNc1EwRkJka1k3UVVGRFFTeFZRVUZKUXl4VlFVRlZMRU5CUVVOR0xGZEJRVmNzVDBGQldDeEhRVUZ4UWl4VFFVRjBRaXhKUVVGdFF5eFhRVUZxUkRzN1FVRkZRU3hWUVVGSlFTeFJRVUZLTEVWQlFXTTdRVUZEV2p0QlFVTkJMRmxCUVUxSExHOUNRVUZ2UWl4TFFVRkxja1VzVVVGQlRDeERRVUZqVVN4SlFVRmtMSEZDUVVGeFExa3NTVUZCU1VNc1NVRkJTaXhEUVVGVExFbEJRVlFzUTBGQmNrTXNVVUZCTVVJN1FVRkRRU3haUVVGSlowUXNhMEpCUVd0Q00wTXNUVUZCZEVJc1JVRkJPRUk3UVVGRE5VSXNZMEZCU1RSRExGRkJRVkVzU1VGQldqdEJRVU5CUkN3MFFrRkJhMEpGTEVsQlFXeENMRU5CUVhWQ0xGbEJRVmM3UVVGRGFFTXNaMEpCUVVrc2MwSkJRVVVzU1VGQlJpeEZRVUZSTlVNc1IwRkJVaXhGUVVGS0xFVkJRVzFDTzBGQlEycENNa01zYjBKQlFVMTBSQ3hoUVVGT0xFTkJRVzlDTEhOQ1FVRkZMRWxCUVVZc1EwRkJjRUk3UVVGRFJEdEJRVU5HTEZkQlNrUTdRVUZMUkR0QlFVTkdPenRCUVVWRUxGZEJRVXRyUkN4WFFVRlhMRzlDUVVGWUxFZEJRV3RETEdsQ1FVRjJReXhGUVVFd1JEbERMRWRCUVRGRU96dEJRVVZCT3pzN096czdRVUZOUVVFc1ZVRkJTVzlFTEU5QlFVb3NRMEZCV1Vvc1QwRkJXaXhGUVVGeFFpeERRVUZEYUVRc1IwRkJSQ3hEUVVGeVFqczdRVUZGUVN4aFFVRlBPRU1zVVVGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdiVU5CVFdVN1FVRkRZaXhWUVVGSlR5eE5RVUZOTEVWQlFWWTdRVUZEUVN4VlFVRkpTQ3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWMEZCU3k5RUxFOUJRVXdzUTBGQllXZEZMRWxCUVdJc1EwRkJhMElzV1VGQlZ6dEJRVU16UWtVc1dVRkJTVU1zU1VGQlNpeERRVUZUU2l4TlFVRk5kRVFzWVVGQlRpeERRVUZ2UWl4elFrRkJSU3hKUVVGR0xFTkJRWEJDTEVOQlFWUTdRVUZEUkN4UFFVWkVPenRCUVVsQkxGVkJRVWt5UkN4VlFVRlZSaXhKUVVGSlRpeFBRVUZLTEVOQlFWa3NTMEZCV2l4TlFVRjFRaXhEUVVGRExFTkJRWFJET3p0QlFVVkJMRmRCUVV0dVJTeFJRVUZNTEVOQlFXTlJMRWxCUVdRc1EwRkJiVUlzYjBKQlFXNUNMRVZCUVhsRGIwVXNSMEZCZWtNc1EwRkJOa01zVTBGQk4wTXNSVUZCZVVSRUxGVkJRVlVzVFVGQlZpeEhRVUZ0UWl4UFFVRTFSVHM3UVVGRlFUczdPenM3TzBGQlRVRXNWMEZCU3pORkxGRkJRVXdzUTBGQlkzZEZMRTlCUVdRc1EwRkJjMElzUTBGQlEwY3NWVUZCVlN4WFFVRldMRWRCUVhkQ0xHRkJRWHBDTEVsQlFUQkRMRmRCUVdoRkxFVkJRVFpGTEVOQlFVTXNTMEZCU3pORkxGRkJRVTRzUTBGQk4wVTdPMEZCUlVFc1lVRkJUekpGTEU5QlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPMmxEUVUxaGRrUXNSeXhGUVVGTGVVUXNUeXhGUVVGVE8wRkJRM3BDTzBGQlEwRkJMR2RDUVVGWFFTeFhRVUZYZWtRc1NVRkJTVU1zU1VGQlNpeERRVUZUTEZOQlFWUXNRMEZCV0N4SlFVRnJRMFFzU1VGQlNVTXNTVUZCU2l4RFFVRlRMRTFCUVZRc1EwRkJOME03UVVGRFFTeFZRVUZKZVVRc1dVRkJXVEZFTEVsQlFVbFBMRWRCUVVvc1JVRkJhRUk3UVVGRFFTeFZRVUZKYjBRc1VVRkJVU3hMUVVGYU96dEJRVVZCTEZWQlFVbEVMRlZCUVZWd1JDeE5RVUZrTEVWQlFYTkNPMEZCUTNCQ08wRkJRMEVzV1VGQlNTeExRVUZMTTBJc1QwRkJUQ3hEUVVGaGFVWXNVVUZCWWl4RFFVRnpRa01zWTBGQmRFSXNRMEZCY1VOS0xFOUJRWEpETEVOQlFVb3NSVUZCYlVRN1FVRkRha1JGTEd0Q1FVRlJMRXRCUVV0b1JpeFBRVUZNTEVOQlFXRnBSaXhSUVVGaUxFTkJRWE5DU0N4UFFVRjBRaXhGUVVFclFrc3NTVUZCTDBJc1EwRkJiME5LTEZOQlFYQkRMRU5CUVZJN1FVRkRSRHRCUVVORU8wRkJTRUVzWVVGSlN5eEpRVUZKUkN4WlFVRlpla1FzU1VGQlNVTXNTVUZCU2l4RFFVRlRMRTFCUVZRc1EwRkJhRUlzUlVGQmEwTTdRVUZEY2tNd1JDeHZRa0ZCVVN4SlFVRkpTU3hOUVVGS0xFTkJRVmRPTEU5QlFWZ3NSVUZCYjBKTExFbEJRWEJDTEVOQlFYbENTaXhUUVVGNlFpeERRVUZTTzBGQlEwUXNWMEZHU1N4TlFVZEJPMEZCUTBoRExHOUNRVUZSTEVsQlFWSTdRVUZEUkR0QlFVTkdPMEZCUTBRN1FVRmlRU3hYUVdOTExFbEJRVWtzUTBGQlF6TkVMRWxCUVVsblJTeEpRVUZLTEVOQlFWTXNWVUZCVkN4RFFVRk1MRVZCUVRKQ08wRkJRemxDVEN4clFrRkJVU3hKUVVGU08wRkJRMFE3TzBGQlJVUXNZVUZCVDBFc1MwRkJVRHRCUVVOQk96dEJRVVZHT3pzN096czdPenRyUTBGTFl5OUNMRk1zUlVGQlZ6dEJRVU4yUWp0QlFVTkJPMEZCUTBFc1ZVRkJTWEZETEZOQlFWTXNTMEZCUzNKR0xGRkJRVXdzUTBGQlkxRXNTVUZCWkN4dFFrRkJiVU4zUXl4VFFVRnVReXhSUVVGaU8wRkJRMEVzVlVGQlNTdENMRkZCUVZFc1MwRkJXanRCUVVGQkxGVkJRVzFDVHl4WFFVRlhMRXRCUVRsQ096dEJRVVZCTzBGQlEwRkVMR0ZCUVU5a0xFbEJRVkFzUTBGQldTeFZRVUZEYUVNc1EwRkJSQ3hGUVVGSmVFSXNRMEZCU2l4RlFVRlZPMEZCUTNCQ0xGbEJRVWtzYzBKQlFVVkJMRU5CUVVZc1JVRkJTMDBzU1VGQlRDeERRVUZWTEZWQlFWWXNRMEZCU2l4RlFVRXlRanRCUVVONlFtbEZMSEZDUVVGWExFbEJRVmc3UVVGRFJEdEJRVU5HTEU5QlNrUTdRVUZMUVN4VlFVRkhMRU5CUVVOQkxGRkJRVW9zUlVGQlkxQXNVVUZCVFN4SlFVRk9PenRCUVVWa0xGVkJRVWtzUTBGQlEwRXNTMEZCVEN4RlFVRlpPMEZCUTFZN1FVRkRRVTBzWlVGQlQyUXNTVUZCVUN4RFFVRlpMRlZCUVVOb1F5eERRVUZFTEVWQlFVbDRRaXhEUVVGS0xFVkJRVlU3UVVGRGNFSXNZMEZCU1N4elFrRkJSVUVzUTBGQlJpeEZRVUZMY1VVc1NVRkJUQ3hEUVVGVkxGTkJRVllzUTBGQlNpeEZRVUV3UWp0QlFVTjRRa3dzYjBKQlFWRXNTVUZCVWp0QlFVTkVPMEZCUTBZc1UwRktSRHRCUVV0RU96dEJRVVZFTEdGQlFVOUJMRXRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096dHZRMEZQWjBJelJDeEhMRVZCUVVzMlF5eFZMRVZCUVZseFFpeFJMRVZCUVZVN1FVRkJRVHM3UVVGRGVrTkJMR2xDUVVGWFFTeFhRVUZYTEVsQlFWZ3NSMEZCYTBJc1MwRkJOMEk3TzBGQlJVRXNWVUZCU1VNc1VVRkJVWFJDTEZkQlFWZDFRaXhMUVVGWUxFTkJRV2xDTEVkQlFXcENMRVZCUVhOQ2JFUXNSMEZCZEVJc1EwRkJNRUlzVlVGQlEyMUVMRU5CUVVRc1JVRkJUenRCUVVNelF5eGxRVUZQTEU5QlFVc3hSaXhQUVVGTUxFTkJRV0ZyUlN4VlFVRmlMRU5CUVhkQ2QwSXNRMEZCZUVJc1JVRkJNa0p5UlN4SFFVRXpRaXhGUVVGblEydEZMRkZCUVdoRExFVkJRVEJEYkVVc1NVRkJTVmtzVFVGQlNpeEZRVUV4UXl4RFFVRlFPMEZCUTBRc1QwRkdWeXhEUVVGYU8wRkJSMEVzWVVGQlQzVkVMRTFCUVUxd1FpeFBRVUZPTEVOQlFXTXNTMEZCWkN4TlFVRjVRaXhEUVVGRExFTkJRV3BETzBGQlEwUTdPMEZCUlVRN096czdPenM3WjBOQlNWazdRVUZEVml4VlFVRkpkVUlzVVVGQlVTeExRVUZMTVVZc1VVRkJha0k3UVVGQlFTeFZRVU5KTWtZc1QwRkJUeXhMUVVGTE5VWXNUMEZFYUVJN08wRkJSMEVzYTBOQlFVMDBSaXhMUVVGTE9VTXNaVUZCV0N4RlFVRTRRalpETEV0QlFUbENMRVZCUVhGRFJTeEhRVUZ5UXl4RFFVRjVReXhQUVVGNlF5eEZRVUZyUkhoRExGZEJRV3hFTEVOQlFUaEVkVU1zUzBGQlN6bERMR1ZCUVc1Rk8wRkJRMEVzYTBOQlFVMDRReXhMUVVGTE5VTXNaVUZCV0N4RlFVRTRRakpETEV0QlFUbENMRVZCUVhGRFJTeEhRVUZ5UXl4RFFVRjVReXhQUVVGNlF5eEZRVUZyUkhoRExGZEJRV3hFTEVOQlFUaEVkVU1zUzBGQlN6VkRMR1ZCUVc1Rk8wRkJRMEVzTkVKQlFVczBReXhMUVVGTE5VUXNhVUpCUVZZc1UwRkJLMEkwUkN4TFFVRkxOME1zWTBGQmNFTXNSVUZCYzBSTkxGZEJRWFJFTEVOQlFXdEZkVU1zUzBGQlN6ZERMR05CUVhaRk8wRkJRMEUwUXl4WlFVRk5iRVlzU1VGQlRpeERRVUZYTEc5Q1FVRllMRVZCUVdsRGIwVXNSMEZCYWtNc1EwRkJjVU1zVTBGQmNrTXNSVUZCWjBRc1RVRkJhRVE3UVVGRFFTdzBRa0ZCUlN4UlFVRkdMRVZCUVZsakxFdEJRVm9zUlVGQmJVSkZMRWRCUVc1Q0xFTkJRWFZDTERKRlFVRjJRaXhGUVVGdlIycEZMRWRCUVhCSExFTkJRWGRITEVWQlFYaEhMRVZCUVRSSE1FSXNWVUZCTlVjc1EwRkJkVWdzWTBGQmRrZzdRVUZEUVN3MFFrRkJSU3hqUVVGR0xFVkJRV3RDY1VNc1MwRkJiRUlzUlVGQmVVSkZMRWRCUVhwQ0xFTkJRVFpDTEhGQ1FVRTNRaXhGUVVGdlJGSXNTVUZCY0VRc1EwRkJlVVFzVTBGQmVrUXNSVUZCYlVVc1MwRkJia1VzUlVGQk1FVXZRaXhWUVVFeFJTeERRVUZ4Uml4alFVRnlSanRCUVVOQkxEUkNRVUZGTEdsQ1FVRkdMRVZCUVhGQ2NVTXNTMEZCY2tJc1JVRkJORUpGTEVkQlFUVkNMRU5CUVdkRExIRkNRVUZvUXl4RlFVRjFSRklzU1VGQmRrUXNRMEZCTkVRc1UwRkJOVVFzUlVGQmMwVXNTMEZCZEVVc1JVRkJOa1V2UWl4VlFVRTNSU3hEUVVGM1JpeGpRVUY0Ump0QlFVTkJPenM3TzBGQlNVRnhReXhaUVVGTmJFSXNUMEZCVGl4RFFVRmpMRzlDUVVGa0xFVkJRVzlETEVOQlFVTnJRaXhMUVVGRUxFTkJRWEJETzBGQlEwUTdPMEZCUlVRN096czdPenM3SzBKQlNWYzdRVUZEVkN4VlFVRkpjRUlzVVVGQlVTeEpRVUZhTzBGQlEwRXNWMEZCUzNSRkxGRkJRVXdzUTBGRFIxVXNSMEZFU0N4RFFVTlBMRkZCUkZBc1JVRkZSMFlzU1VGR1NDeERRVVZSTEc5Q1FVWlNMRVZCUjB0dlJTeEhRVWhNTEVOQlIxTXNVMEZJVkN4RlFVZHZRaXhOUVVod1FqczdRVUZMUVN4WFFVRkxja1VzVDBGQlRDeERRVU5IUnl4SFFVUklMRU5CUTA4c1VVRkVVQ3hGUVVWSE5rUXNTVUZHU0N4RFFVVlJMRmxCUVZjN1FVRkRaa1FzWTBGQlRYVkNMR3RDUVVGT0xFTkJRWGxDTEhOQ1FVRkZMRWxCUVVZc1EwRkJla0k3UVVGRFJDeFBRVXBJTzBGQlMwUTdPenM3UlVFeFkybENReXhyUWpzN1FVRTJZM0JDT3pzN096dEJRVWRCYWtjc1RVRkJUVTBzVVVGQlRpeEhRVUZwUWp0QlFVTm1PenM3T3pzN08wRkJUMEZYTEdOQlFWa3NZVUZTUnpzN1FVRlZaanM3T3pzN08wRkJUVUVyUWl4dFFrRkJhVUlzYTBKQmFFSkdPenRCUVd0Q1pqczdPenM3TzBGQlRVRkZMRzFDUVVGcFFpeHJRa0Y0UWtZN08wRkJNRUptT3pzN096czdRVUZOUVdoQ0xIRkNRVUZ0UWl4aFFXaERTanM3UVVGclEyWTdPenM3T3p0QlFVMUJaU3hyUWtGQlowSXNXVUY0UTBRN08wRkJNRU5tT3pzN096czdRVUZOUVRWQ0xHZENRVUZqTEV0QmFFUkRPenRCUVd0RVpqczdPenM3TzBGQlRVRkRMR3RDUVVGblFpeExRWGhFUkRzN1FVRXdSR1kyUkN4WlFVRlZPMEZCUTFKbExGZEJRVkVzWVVGRVFUdEJRVVZTUXl4dFFrRkJaMElzWjBKQlJsSTdRVUZIVWtNc1lVRkJWU3haUVVoR08wRkJTVkpETEZsQlFWTXNNRUpCU2tRN08wRkJUVkk3UVVGRFFVTXNWVUZCVHl3NFRVRlFRenRCUVZGU1F5eFRRVUZOTEdkQ1FWSkZPenRCUVZWU08wRkJRMEZETEZkQlFWRXNkVWxCV0VFN08wRkJZVkpETEZOQlFVMHNiM1JEUVdKRk8wRkJZMUk3UVVGRFFVTXNXVUZCVXl4clJVRm1SRHM3UVVGcFFsSkRMR05CUVZjc2IwaEJha0pJTzBGQmEwSlNPMEZCUTBGRExGVkJRVThzWjBsQmJrSkRPMEZCYjBKU08wRkJRMEZETEZWQlFVOHNNRU5CY2tKRE8wRkJjMEpTUXl4aFFVRlZMRzFEUVhSQ1JqdEJRWFZDVWp0QlFVTkJReXh2UWtGQmFVSXNPRVJCZUVKVU8wRkJlVUpTTzBGQlEwRkRMRzlDUVVGcFFpdzRSRUV4UWxRN08wRkJORUpTTzBGQlEwRkRMRmRCUVZFc2NVTkJOMEpCT3p0QlFTdENVanRCUVVOQlF5eGhRVUZUTzBGQlExQTNRaXhaUVVGTkxHTkJRVU00UWl4SlFVRkVMRVZCUVZVN1FVRkRaQ3hsUVVGUGJrZ3NUVUZCVFUwc1VVRkJUaXhEUVVGbE5rVXNVVUZCWml4RFFVRjNRaXhSUVVGNFFpeEZRVUZyUTBVc1NVRkJiRU1zUTBGQmRVTTRRaXhKUVVGMlF5eExRVUZuUkc1SUxFMUJRVTFOTEZGQlFVNHNRMEZCWlRaRkxGRkJRV1lzUTBGQmQwSXNTMEZCZUVJc1JVRkJLMEpGTEVsQlFTOUNMRU5CUVc5RE9FSXNTVUZCY0VNc1EwRkJka1E3UVVGRFJEdEJRVWhOTzBGQmFFTkVMRWRCTVVSTE96dEJRV2xIWmpzN096czdPenM3UVVGUlFTOURMR05CUVZrN1FVRkRWa3dzWVVGQlV5eHBRa0ZCVlhCQ0xFVkJRVllzUlVGQll6aERMRkZCUVdRc1JVRkJkMEowUkN4TlFVRjRRaXhGUVVGblF6dEJRVU4yUXl4aFFVRlBMRFJDUVVGTlVTeEhRVUZIYmtJc1NVRkJTQ3hEUVVGUkxHTkJRVklzUTBGQlRpeEZRVUZwUTAwc1IwRkJha01zVDBGQk1rTmhMRWRCUVVkaUxFZEJRVWdzUlVGQmJFUTdRVUZEUkR0QlFVaFRPMEZCZWtkSExFTkJRV3BDT3p0UlFXZElVVGxDTEVzc1IwRkJRVUVzU3lJc0ltWnBiR1VpT2lKbWIzVnVaR0YwYVc5dUxtRmlhV1JsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXBiWEJ2Y25RZ0pDQm1jbTl0SUNkcWNYVmxjbmtuTzF4dWFXMXdiM0owSUhzZ1VHeDFaMmx1SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuQnNkV2RwYmljN1hHNWNiaThxS2x4dUlDb2dRV0pwWkdVZ2JXOWtkV3hsTGx4dUlDb2dRRzF2WkhWc1pTQm1iM1Z1WkdGMGFXOXVMbUZpYVdSbFhHNGdLaTljYmx4dVkyeGhjM01nUVdKcFpHVWdaWGgwWlc1a2N5QlFiSFZuYVc0Z2UxeHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUc1bGR5QnBibk4wWVc1alpTQnZaaUJCWW1sa1pTNWNiaUFnSUNvZ1FHTnNZWE56WEc0Z0lDQXFJRUJ1WVcxbElFRmlhV1JsWEc0Z0lDQXFJRUJtYVhKbGN5QkJZbWxrWlNOcGJtbDBYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbGJHVnRaVzUwSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCaFpHUWdkR2hsSUhSeWFXZG5aWElnZEc4dVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnVDNabGNuSnBaR1Z6SUhSdklIUm9aU0JrWldaaGRXeDBJSEJzZFdkcGJpQnpaWFIwYVc1bmN5NWNiaUFnSUNvdlhHNGdJRjl6WlhSMWNDaGxiR1Z0Wlc1MExDQnZjSFJwYjI1eklEMGdlMzBwSUh0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MElEMGdaV3hsYldWdWREdGNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTWdJRDBnSkM1bGVIUmxibVFvZEhKMVpTd2dlMzBzSUVGaWFXUmxMbVJsWm1GMWJIUnpMQ0IwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvS1N3Z2IzQjBhVzl1Y3lrN1hHNWNiaUFnSUNCMGFHbHpMbU5zWVhOelRtRnRaU0E5SUNkQlltbGtaU2M3SUM4dklHbGxPU0JpWVdOcklHTnZiWEJoZEZ4dUlDQWdJSFJvYVhNdVgybHVhWFFvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxjeUIwYUdVZ1FXSnBaR1VnY0d4MVoybHVJR0Z1WkNCallXeHNjeUJtZFc1amRHbHZibk1nZEc4Z1oyVjBJRUZpYVdSbElHWjFibU4wYVc5dWFXNW5JRzl1SUd4dllXUXVYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZhVzVwZENncElIdGNiaUFnSUNCMGFHbHpMaVJwYm5CMWRITWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvSjJsdWNIVjBMQ0IwWlhoMFlYSmxZU3dnYzJWc1pXTjBKeWs3WEc1Y2JpQWdJQ0IwYUdsekxsOWxkbVZ1ZEhNb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm1sMGFXRnNhWHBsY3lCbGRtVnVkSE1nWm05eUlFRmlhV1JsTGx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJWMlpXNTBjeWdwSUh0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1aaWduTG1GaWFXUmxKeWxjYmlBZ0lDQWdJQzV2YmlnbmNtVnpaWFF1ZW1ZdVlXSnBaR1VuTENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ6WlhSR2IzSnRLQ2s3WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnTG05dUtDZHpkV0p0YVhRdWVtWXVZV0pwWkdVbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblpoYkdsa1lYUmxSbTl5YlNncE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxuWmhiR2xrWVhSbFQyNGdQVDA5SUNkbWFXVnNaRU5vWVc1blpTY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdUpHbHVjSFYwYzF4dUlDQWdJQ0FnSUNBdWIyWm1LQ2RqYUdGdVoyVXVlbVl1WVdKcFpHVW5LVnh1SUNBZ0lDQWdJQ0F1YjI0b0oyTm9ZVzVuWlM1NlppNWhZbWxrWlNjc0lDaGxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1MllXeHBaR0YwWlVsdWNIVjBLQ1FvWlM1MFlYSm5aWFFwS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1c2FYWmxWbUZzYVdSaGRHVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdUpHbHVjSFYwYzF4dUlDQWdJQ0FnSUNBdWIyWm1LQ2RwYm5CMWRDNTZaaTVoWW1sa1pTY3BYRzRnSUNBZ0lDQWdJQzV2YmlnbmFXNXdkWFF1ZW1ZdVlXSnBaR1VuTENBb1pTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUmhkR1ZKYm5CMWRDZ2tLR1V1ZEdGeVoyVjBLU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11ZG1Gc2FXUmhkR1ZQYmtKc2RYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdUpHbHVjSFYwYzF4dUlDQWdJQ0FnSUNBdWIyWm1LQ2RpYkhWeUxucG1MbUZpYVdSbEp5bGNiaUFnSUNBZ0lDQWdMbTl1S0NkaWJIVnlMbnBtTG1GaWFXUmxKeXdnS0dVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMblpoYkdsa1lYUmxTVzV3ZFhRb0pDaGxMblJoY21kbGRDa3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EyRnNiSE1nYm1WalpYTnpZWEo1SUdaMWJtTjBhVzl1Y3lCMGJ5QjFjR1JoZEdVZ1FXSnBaR1VnZFhCdmJpQkVUMDBnWTJoaGJtZGxYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZjbVZtYkc5M0tDa2dlMXh1SUNBZ0lIUm9hWE11WDJsdWFYUW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGFHVmphM01nZDJobGRHaGxjaUJ2Y2lCdWIzUWdZU0JtYjNKdElHVnNaVzFsYm5RZ2FHRnpJSFJvWlNCeVpYRjFhWEpsWkNCaGRIUnlhV0oxZEdVZ1lXNWtJR2xtSUdsMEozTWdZMmhsWTJ0bFpDQnZjaUJ1YjNSY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1ZzWlcxbGJuUWdMU0JxVVhWbGNua2diMkpxWldOMElIUnZJR05vWldOcklHWnZjaUJ5WlhGMWFYSmxaQ0JoZEhSeWFXSjFkR1ZjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJRUp2YjJ4bFlXNGdkbUZzZFdVZ1pHVndaVzVrY3lCdmJpQjNhR1YwYUdWeUlHOXlJRzV2ZENCaGRIUnlhV0oxZEdVZ2FYTWdZMmhsWTJ0bFpDQnZjaUJsYlhCMGVWeHVJQ0FnS2k5Y2JpQWdjbVZ4ZFdseVpXUkRhR1ZqYXlna1pXd3BJSHRjYmlBZ0lDQnBaaUFvSVNSbGJDNWhkSFJ5S0NkeVpYRjFhWEpsWkNjcEtTQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJSFpoY2lCcGMwZHZiMlFnUFNCMGNuVmxPMXh1WEc0Z0lDQWdjM2RwZEdOb0lDZ2taV3hiTUYwdWRIbHdaU2tnZTF4dUlDQWdJQ0FnWTJGelpTQW5ZMmhsWTJ0aWIzZ25PbHh1SUNBZ0lDQWdJQ0JwYzBkdmIyUWdQU0FrWld4Yk1GMHVZMmhsWTJ0bFpEdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBZ0lHTmhjMlVnSjNObGJHVmpkQ2M2WEc0Z0lDQWdJQ0JqWVhObElDZHpaV3hsWTNRdGIyNWxKenBjYmlBZ0lDQWdJR05oYzJVZ0ozTmxiR1ZqZEMxdGRXeDBhWEJzWlNjNlhHNGdJQ0FnSUNBZ0lIWmhjaUJ2Y0hRZ1BTQWtaV3d1Wm1sdVpDZ25iM0IwYVc5dU9uTmxiR1ZqZEdWa0p5azdYRzRnSUNBZ0lDQWdJR2xtSUNnaGIzQjBMbXhsYm1kMGFDQjhmQ0FoYjNCMExuWmhiQ2dwS1NCcGMwZHZiMlFnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJR2xtS0NFa1pXd3VkbUZzS0NrZ2ZId2dJU1JsYkM1MllXd29LUzVzWlc1bmRHZ3BJR2x6UjI5dlpDQTlJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJwYzBkdmIyUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWME9seHVJQ0FnS2lBdElFSmhjMlZrSUc5dUlDUmxiQ3dnZEdobElHWnBjbk4wSUdWc1pXMWxiblFvY3lrZ1kyOXljbVZ6Y0c5dVpHbHVaeUIwYnlCZ1ptOXliVVZ5Y205eVUyVnNaV04wYjNKZ0lHbHVJSFJvYVhNZ2IzSmtaWEk2WEc0Z0lDQXFJQ0FnTVM0Z1ZHaGxJR1ZzWlcxbGJuUW5jeUJrYVhKbFkzUWdjMmxpYkdsdVp5Z25jeWt1WEc0Z0lDQXFJQ0FnTWk0Z1ZHaGxJR1ZzWlcxbGJuUW5jeUJ3WVhKbGJuUW5jeUJqYUdsc1pISmxiaTVjYmlBZ0lDb2dMU0JGYkdWdFpXNTBLSE1wSUhkcGRHZ2dkR2hsSUdGMGRISnBZblYwWlNCZ1cyUmhkR0V0Wm05eWJTMWxjbkp2Y2kxbWIzSmRZQ0J6WlhRZ2QybDBhQ0IwYUdVZ1pXeGxiV1Z1ZENkeklHbGtMbHh1SUNBZ0tseHVJQ0FnS2lCVWFHbHpJR0ZzYkc5M2N5Qm1iM0lnYlhWc2RHbHdiR1VnWm05eWJTQmxjbkp2Y25NZ2NHVnlJR2x1Y0hWMExDQjBhRzkxWjJnZ2FXWWdibTl1WlNCaGNtVWdabTkxYm1Rc0lHNXZJR1p2Y20wZ1pYSnliM0p6SUhkcGJHd2dZbVVnYzJodmQyNHVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0FrWld3Z0xTQnFVWFZsY25rZ2IySnFaV04wSUhSdklIVnpaU0JoY3lCeVpXWmxjbVZ1WTJVZ2RHOGdabWx1WkNCMGFHVWdabTl5YlNCbGNuSnZjaUJ6Wld4bFkzUnZjaTVjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMGdhbEYxWlhKNUlHOWlhbVZqZENCM2FYUm9JSFJvWlNCelpXeGxZM1J2Y2k1Y2JpQWdJQ292WEc0Z0lHWnBibVJHYjNKdFJYSnliM0lvSkdWc0tTQjdYRzRnSUNBZ2RtRnlJR2xrSUQwZ0pHVnNXekJkTG1sa08xeHVJQ0FnSUhaaGNpQWtaWEp5YjNJZ1BTQWtaV3d1YzJsaWJHbHVaM01vZEdocGN5NXZjSFJwYjI1ekxtWnZjbTFGY25KdmNsTmxiR1ZqZEc5eUtUdGNibHh1SUNBZ0lHbG1JQ2doSkdWeWNtOXlMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdKR1Z5Y205eUlEMGdKR1ZzTG5CaGNtVnVkQ2dwTG1acGJtUW9kR2hwY3k1dmNIUnBiMjV6TG1admNtMUZjbkp2Y2xObGJHVmpkRzl5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0FrWlhKeWIzSWdQU0FrWlhKeWIzSXVZV1JrS0hSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNoZ1cyUmhkR0V0Wm05eWJTMWxjbkp2Y2kxbWIzSTlYQ0lrZTJsa2ZWd2lYV0FwS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUFrWlhKeWIzSTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElIUm9aU0JtYVhKemRDQmxiR1Z0Wlc1MElHbHVJSFJvYVhNZ2IzSmtaWEk2WEc0Z0lDQXFJREl1SUZSb1pTQThiR0ZpWld3K0lIZHBkR2dnZEdobElHRjBkSEpwWW5WMFpTQmdXMlp2Y2oxY0luTnZiV1ZKYm5CMWRFbGtYQ0pkWUZ4dUlDQWdLaUF6TGlCVWFHVWdZQzVqYkc5elpYTjBLQ2xnSUR4c1lXSmxiRDVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUNSbGJDQXRJR3BSZFdWeWVTQnZZbXBsWTNRZ2RHOGdZMmhsWTJzZ1ptOXlJSEpsY1hWcGNtVmtJR0YwZEhKcFluVjBaVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRbTl2YkdWaGJuMGdRbTl2YkdWaGJpQjJZV3gxWlNCa1pYQmxibVJ6SUc5dUlIZG9aWFJvWlhJZ2IzSWdibTkwSUdGMGRISnBZblYwWlNCcGN5QmphR1ZqYTJWa0lHOXlJR1Z0Y0hSNVhHNGdJQ0FxTDF4dUlDQm1hVzVrVEdGaVpXd29KR1ZzS1NCN1hHNGdJQ0FnZG1GeUlHbGtJRDBnSkdWc1d6QmRMbWxrTzF4dUlDQWdJSFpoY2lBa2JHRmlaV3dnUFNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb1lHeGhZbVZzVzJadmNqMWNJaVI3YVdSOVhDSmRZQ2s3WEc1Y2JpQWdJQ0JwWmlBb0lTUnNZV0psYkM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFrWld3dVkyeHZjMlZ6ZENnbmJHRmlaV3duS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdKR3hoWW1Wc08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWRsZENCMGFHVWdjMlYwSUc5bUlHeGhZbVZzY3lCaGMzTnZZMmxoZEdWa0lIZHBkR2dnWVNCelpYUWdiMllnY21Ga2FXOGdaV3h6SUdsdUlIUm9hWE1nYjNKa1pYSmNiaUFnSUNvZ01pNGdWR2hsSUR4c1lXSmxiRDRnZDJsMGFDQjBhR1VnWVhSMGNtbGlkWFJsSUdCYlptOXlQVndpYzI5dFpVbHVjSFYwU1dSY0lsMWdYRzRnSUNBcUlETXVJRlJvWlNCZ0xtTnNiM05sYzNRb0tXQWdQR3hoWW1Wc1BseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdKR1ZzSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCamFHVmpheUJtYjNJZ2NtVnhkV2x5WldRZ1lYUjBjbWxpZFhSbFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlNCQ2IyOXNaV0Z1SUhaaGJIVmxJR1JsY0dWdVpITWdiMjRnZDJobGRHaGxjaUJ2Y2lCdWIzUWdZWFIwY21saWRYUmxJR2x6SUdOb1pXTnJaV1FnYjNJZ1pXMXdkSGxjYmlBZ0lDb3ZYRzRnSUdacGJtUlNZV1JwYjB4aFltVnNjeWdrWld4ektTQjdYRzRnSUNBZ2RtRnlJR3hoWW1Wc2N5QTlJQ1JsYkhNdWJXRndLQ2hwTENCbGJDa2dQVDRnZTF4dUlDQWdJQ0FnZG1GeUlHbGtJRDBnWld3dWFXUTdYRzRnSUNBZ0lDQjJZWElnSkd4aFltVnNJRDBnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0dCc1lXSmxiRnRtYjNJOVhDSWtlMmxrZlZ3aVhXQXBPMXh1WEc0Z0lDQWdJQ0JwWmlBb0lTUnNZV0psYkM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0pHeGhZbVZzSUQwZ0pDaGxiQ2t1WTJ4dmMyVnpkQ2duYkdGaVpXd25LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQWtiR0ZpWld4Yk1GMDdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnlaWFIxY200Z0pDaHNZV0psYkhNcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ2RHaGxJRU5UVXlCbGNuSnZjaUJqYkdGemN5QmhjeUJ6Y0dWamFXWnBaV1FnWW5rZ2RHaGxJRUZpYVdSbElITmxkSFJwYm1keklIUnZJSFJvWlNCc1lXSmxiQ3dnYVc1d2RYUXNJR0Z1WkNCMGFHVWdabTl5YlZ4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdKR1ZzSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCaFpHUWdkR2hsSUdOc1lYTnpJSFJ2WEc0Z0lDQXFMMXh1SUNCaFpHUkZjbkp2Y2tOc1lYTnpaWE1vSkdWc0tTQjdYRzRnSUNBZ2RtRnlJQ1JzWVdKbGJDQTlJSFJvYVhNdVptbHVaRXhoWW1Wc0tDUmxiQ2s3WEc0Z0lDQWdkbUZ5SUNSbWIzSnRSWEp5YjNJZ1BTQjBhR2x6TG1acGJtUkdiM0p0UlhKeWIzSW9KR1ZzS1R0Y2JseHVJQ0FnSUdsbUlDZ2tiR0ZpWld3dWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBa2JHRmlaV3d1WVdSa1EyeGhjM01vZEdocGN5NXZjSFJwYjI1ekxteGhZbVZzUlhKeWIzSkRiR0Z6Y3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tDUm1iM0p0UlhKeWIzSXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWtabTl5YlVWeWNtOXlMbUZrWkVOc1lYTnpLSFJvYVhNdWIzQjBhVzl1Y3k1bWIzSnRSWEp5YjNKRGJHRnpjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdKR1ZzTG1Ga1pFTnNZWE56S0hSb2FYTXViM0IwYVc5dWN5NXBibkIxZEVWeWNtOXlRMnhoYzNNcExtRjBkSElvSjJSaGRHRXRhVzUyWVd4cFpDY3NJQ2NuS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaVzF2ZG1VZ1ExTlRJR1Z5Y205eUlHTnNZWE56WlhNZ1pYUmpJR1p5YjIwZ1lXNGdaVzUwYVhKbElISmhaR2x2SUdKMWRIUnZiaUJuY205MWNGeHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWjNKdmRYQk9ZVzFsSUMwZ1FTQnpkSEpwYm1jZ2RHaGhkQ0J6Y0dWamFXWnBaWE1nZEdobElHNWhiV1VnYjJZZ1lTQnlZV1JwYnlCaWRYUjBiMjRnWjNKdmRYQmNiaUFnSUNwY2JpQWdJQ292WEc1Y2JpQWdjbVZ0YjNabFVtRmthVzlGY25KdmNrTnNZWE56WlhNb1ozSnZkWEJPWVcxbEtTQjdYRzRnSUNBZ2RtRnlJQ1JsYkhNZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1acGJtUW9ZRHB5WVdScGIxdHVZVzFsUFZ3aUpIdG5jbTkxY0U1aGJXVjlYQ0pkWUNrN1hHNGdJQ0FnZG1GeUlDUnNZV0psYkhNZ1BTQjBhR2x6TG1acGJtUlNZV1JwYjB4aFltVnNjeWdrWld4ektUdGNiaUFnSUNCMllYSWdKR1p2Y20xRmNuSnZjbk1nUFNCMGFHbHpMbVpwYm1SR2IzSnRSWEp5YjNJb0pHVnNjeWs3WEc1Y2JpQWdJQ0JwWmlBb0pHeGhZbVZzY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNSc1lXSmxiSE11Y21WdGIzWmxRMnhoYzNNb2RHaHBjeTV2Y0hScGIyNXpMbXhoWW1Wc1JYSnliM0pEYkdGemN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLQ1JtYjNKdFJYSnliM0p6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSkdadmNtMUZjbkp2Y25NdWNtVnRiM1psUTJ4aGMzTW9kR2hwY3k1dmNIUnBiMjV6TG1admNtMUZjbkp2Y2tOc1lYTnpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQWtaV3h6TG5KbGJXOTJaVU5zWVhOektIUm9hWE11YjNCMGFXOXVjeTVwYm5CMWRFVnljbTl5UTJ4aGMzTXBMbkpsYlc5MlpVRjBkSElvSjJSaGRHRXRhVzUyWVd4cFpDY3BPMXh1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnRiM1psY3lCRFUxTWdaWEp5YjNJZ1kyeGhjM01nWVhNZ2MzQmxZMmxtYVdWa0lHSjVJSFJvWlNCQlltbGtaU0J6WlhSMGFXNW5jeUJtY205dElIUm9aU0JzWVdKbGJDd2dhVzV3ZFhRc0lHRnVaQ0IwYUdVZ1ptOXliVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ0pHVnNJQzBnYWxGMVpYSjVJRzlpYW1WamRDQjBieUJ5WlcxdmRtVWdkR2hsSUdOc1lYTnpJR1p5YjIxY2JpQWdJQ292WEc0Z0lISmxiVzkyWlVWeWNtOXlRMnhoYzNObGN5Z2taV3dwSUh0Y2JpQWdJQ0F2THlCeVlXUnBiM01nYm1WbFpDQjBieUJqYkdWaGNpQmhiR3dnYjJZZ2RHaGxJR1ZzYzF4dUlDQWdJR2xtS0NSbGJGc3dYUzUwZVhCbElEMDlJQ2R5WVdScGJ5Y3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGJXOTJaVkpoWkdsdlJYSnliM0pEYkdGemMyVnpLQ1JsYkM1aGRIUnlLQ2R1WVcxbEp5a3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUFrYkdGaVpXd2dQU0IwYUdsekxtWnBibVJNWVdKbGJDZ2taV3dwTzF4dUlDQWdJSFpoY2lBa1ptOXliVVZ5Y205eUlEMGdkR2hwY3k1bWFXNWtSbTl5YlVWeWNtOXlLQ1JsYkNrN1hHNWNiaUFnSUNCcFppQW9KR3hoWW1Wc0xteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0pHeGhZbVZzTG5KbGJXOTJaVU5zWVhOektIUm9hWE11YjNCMGFXOXVjeTVzWVdKbGJFVnljbTl5UTJ4aGMzTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2drWm05eWJVVnljbTl5TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSkdadmNtMUZjbkp2Y2k1eVpXMXZkbVZEYkdGemN5aDBhR2x6TG05d2RHbHZibk11Wm05eWJVVnljbTl5UTJ4aGMzTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDUmxiQzV5WlcxdmRtVkRiR0Z6Y3loMGFHbHpMbTl3ZEdsdmJuTXVhVzV3ZFhSRmNuSnZja05zWVhOektTNXlaVzF2ZG1WQmRIUnlLQ2RrWVhSaExXbHVkbUZzYVdRbktUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIYjJWeklIUm9jbTkxWjJnZ1lTQm1iM0p0SUhSdklHWnBibVFnYVc1d2RYUnpJR0Z1WkNCd2NtOWpaV1ZrY3lCMGJ5QjJZV3hwWkdGMFpTQjBhR1Z0SUdsdUlIZGhlWE1nYzNCbFkybG1hV01nZEc4Z2RHaGxhWElnZEhsd1pTNWNiaUFnSUNvZ1NXZHViM0psY3lCcGJuQjFkSE1nZDJsMGFDQmtZWFJoTFdGaWFXUmxMV2xuYm05eVpTd2dkSGx3WlQxY0ltaHBaR1JsYmx3aUlHOXlJR1JwYzJGaWJHVmtJR0YwZEhKcFluVjBaWE1nYzJWMFhHNGdJQ0FxSUVCbWFYSmxjeUJCWW1sa1pTTnBiblpoYkdsa1hHNGdJQ0FxSUVCbWFYSmxjeUJCWW1sa1pTTjJZV3hwWkZ4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdaV3hsYldWdWRDQXRJR3BSZFdWeWVTQnZZbXBsWTNRZ2RHOGdkbUZzYVdSaGRHVXNJSE5vYjNWc1pDQmlaU0JoYmlCSVZFMU1JR2x1Y0hWMFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlNCbmIyOWtWRzlIYnlBdElFbG1JSFJvWlNCcGJuQjFkQ0JwY3lCMllXeHBaQ0J2Y2lCdWIzUXVYRzRnSUNBcUwxeHVJQ0IyWVd4cFpHRjBaVWx1Y0hWMEtDUmxiQ2tnZTF4dUlDQWdJSFpoY2lCamJHVmhjbEpsY1hWcGNtVWdQU0IwYUdsekxuSmxjWFZwY21Wa1EyaGxZMnNvSkdWc0tTeGNiaUFnSUNBZ0lDQWdkbUZzYVdSaGRHVmtJRDBnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR04xYzNSdmJWWmhiR2xrWVhSdmNpQTlJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSdmNpQTlJQ1JsYkM1aGRIUnlLQ2RrWVhSaExYWmhiR2xrWVhSdmNpY3BMRnh1SUNBZ0lDQWdJQ0JsY1hWaGJGUnZJRDBnZEhKMVpUdGNibHh1SUNBZ0lDOHZJR1J2YmlkMElIWmhiR2xrWVhSbElHbG5ibTl5WldRZ2FXNXdkWFJ6SUc5eUlHaHBaR1JsYmlCcGJuQjFkSE1nYjNJZ1pHbHpZV0pzWldRZ2FXNXdkWFJ6WEc0Z0lDQWdhV1lnS0NSbGJDNXBjeWduVzJSaGRHRXRZV0pwWkdVdGFXZHViM0psWFNjcElIeDhJQ1JsYkM1cGN5Z25XM1I1Y0dVOVhDSm9hV1JrWlc1Y0lsMG5LU0I4ZkNBa1pXd3VhWE1vSjF0a2FYTmhZbXhsWkYwbktTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM2RwZEdOb0lDZ2taV3hiTUYwdWRIbHdaU2tnZTF4dUlDQWdJQ0FnWTJGelpTQW5jbUZrYVc4bk9seHVJQ0FnSUNBZ0lDQjJZV3hwWkdGMFpXUWdQU0IwYUdsekxuWmhiR2xrWVhSbFVtRmthVzhvSkdWc0xtRjBkSElvSjI1aGJXVW5LU2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0JqWVhObElDZGphR1ZqYTJKdmVDYzZYRzRnSUNBZ0lDQWdJSFpoYkdsa1lYUmxaQ0E5SUdOc1pXRnlVbVZ4ZFdseVpUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBZ0lHTmhjMlVnSjNObGJHVmpkQ2M2WEc0Z0lDQWdJQ0JqWVhObElDZHpaV3hsWTNRdGIyNWxKenBjYmlBZ0lDQWdJR05oYzJVZ0ozTmxiR1ZqZEMxdGRXeDBhWEJzWlNjNlhHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSbFpDQTlJR05zWldGeVVtVnhkV2x5WlR0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUhaaGJHbGtZWFJsWkNBOUlIUm9hWE11ZG1Gc2FXUmhkR1ZVWlhoMEtDUmxiQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0haaGJHbGtZWFJ2Y2lrZ2UxeHVJQ0FnSUNBZ1kzVnpkRzl0Vm1Gc2FXUmhkRzl5SUQwZ2RHaHBjeTV0WVhSamFGWmhiR2xrWVhScGIyNG9KR1ZzTENCMllXeHBaR0YwYjNJc0lDUmxiQzVoZEhSeUtDZHlaWEYxYVhKbFpDY3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSkdWc0xtRjBkSElvSjJSaGRHRXRaWEYxWVd4MGJ5Y3BLU0I3WEc0Z0lDQWdJQ0JsY1hWaGJGUnZJRDBnZEdocGN5NXZjSFJwYjI1ekxuWmhiR2xrWVhSdmNuTXVaWEYxWVd4VWJ5Z2taV3dwTzF4dUlDQWdJSDFjYmx4dVhHNGdJQ0FnZG1GeUlHZHZiMlJVYjBkdklEMGdXMk5zWldGeVVtVnhkV2x5WlN3Z2RtRnNhV1JoZEdWa0xDQmpkWE4wYjIxV1lXeHBaR0YwYjNJc0lHVnhkV0ZzVkc5ZExtbHVaR1Y0VDJZb1ptRnNjMlVwSUQwOVBTQXRNVHRjYmlBZ0lDQjJZWElnYldWemMyRm5aU0E5SUNobmIyOWtWRzlIYnlBL0lDZDJZV3hwWkNjZ09pQW5hVzUyWVd4cFpDY3BJQ3NnSnk1NlppNWhZbWxrWlNjN1hHNWNiaUFnSUNCcFppQW9aMjl2WkZSdlIyOHBJSHRjYmlBZ0lDQWdJQzh2SUZKbExYWmhiR2xrWVhSbElHbHVjSFYwY3lCMGFHRjBJR1JsY0dWdVpDQnZiaUIwYUdseklHOXVaU0IzYVhSb0lHVnhkV0ZzZEc5Y2JpQWdJQ0FnSUdOdmJuTjBJR1JsY0dWdVpHVnVkRVZzWlcxbGJuUnpJRDBnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0dCYlpHRjBZUzFsY1hWaGJIUnZQVndpSkhza1pXd3VZWFIwY2lnbmFXUW5LWDFjSWwxZ0tUdGNiaUFnSUNBZ0lHbG1JQ2hrWlhCbGJtUmxiblJGYkdWdFpXNTBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnWkdWd1pXNWtaVzUwUld4bGJXVnVkSE11WldGamFDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9KQ2gwYUdsektTNTJZV3dvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVkbUZzYVdSaGRHVkpibkIxZENna0tIUm9hWE1wS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhOYloyOXZaRlJ2UjI4Z1B5QW5jbVZ0YjNabFJYSnliM0pEYkdGemMyVnpKeUE2SUNkaFpHUkZjbkp2Y2tOc1lYTnpaWE1uWFNna1pXd3BPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdhVzV3ZFhRZ2FYTWdaRzl1WlNCamFHVmphMmx1WnlCbWIzSWdkbUZzYVdSaGRHbHZiaTRnUlhabGJuUWdkSEpwWjJkbGNpQnBjeUJsYVhSb1pYSWdZSFpoYkdsa0xucG1MbUZpYVdSbFlDQnZjaUJnYVc1MllXeHBaQzU2Wmk1aFltbGtaV0JjYmlBZ0lDQWdLaUJVY21sbloyVnlJR2x1WTJ4MVpHVnpJSFJvWlNCRVQwMGdaV3hsYldWdWRDQnZaaUIwYUdVZ2FXNXdkWFF1WEc0Z0lDQWdJQ29nUUdWMlpXNTBJRUZpYVdSbEkzWmhiR2xrWEc0Z0lDQWdJQ29nUUdWMlpXNTBJRUZpYVdSbEkybHVkbUZzYVdSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0FrWld3dWRISnBaMmRsY2lodFpYTnpZV2RsTENCYkpHVnNYU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdaMjl2WkZSdlIyODdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjI5bGN5QjBhSEp2ZFdkb0lHRWdabTl5YlNCaGJtUWdhV1lnZEdobGNtVWdZWEpsSUdGdWVTQnBiblpoYkdsa0lHbHVjSFYwY3l3Z2FYUWdkMmxzYkNCa2FYTndiR0Y1SUhSb1pTQm1iM0p0SUdWeWNtOXlJR1ZzWlcxbGJuUmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OUlHNXZSWEp5YjNJZ0xTQjBjblZsSUdsbUlHNXZJR1Z5Y205eWN5QjNaWEpsSUdSbGRHVmpkR1ZrTGk0dVhHNGdJQ0FxSUVCbWFYSmxjeUJCWW1sa1pTTm1iM0p0ZG1Gc2FXUmNiaUFnSUNvZ1FHWnBjbVZ6SUVGaWFXUmxJMlp2Y20xcGJuWmhiR2xrWEc0Z0lDQXFMMXh1SUNCMllXeHBaR0YwWlVadmNtMG9LU0I3WEc0Z0lDQWdkbUZ5SUdGall5QTlJRnRkTzF4dUlDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQjBhR2x6TGlScGJuQjFkSE11WldGamFDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJR0ZqWXk1d2RYTm9LRjkwYUdsekxuWmhiR2xrWVhSbFNXNXdkWFFvSkNoMGFHbHpLU2twTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZG1GeUlHNXZSWEp5YjNJZ1BTQmhZMk11YVc1a1pYaFBaaWhtWVd4elpTa2dQVDA5SUMweE8xeHVYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzVtYVc1a0tDZGJaR0YwWVMxaFltbGtaUzFsY25KdmNsMG5LUzVqYzNNb0oyUnBjM0JzWVhrbkxDQW9ibTlGY25KdmNpQS9JQ2R1YjI1bEp5QTZJQ2RpYkc5amF5Y3BLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVacGNtVnpJSGRvWlc0Z2RHaGxJR1p2Y20wZ2FYTWdabWx1YVhOb1pXUWdkbUZzYVdSaGRHbHVaeTRnUlhabGJuUWdkSEpwWjJkbGNpQnBjeUJsYVhSb1pYSWdZR1p2Y20xMllXeHBaQzU2Wmk1aFltbGtaV0FnYjNJZ1lHWnZjbTFwYm5aaGJHbGtMbnBtTG1GaWFXUmxZQzVjYmlBZ0lDQWdLaUJVY21sbloyVnlJR2x1WTJ4MVpHVnpJSFJvWlNCbGJHVnRaVzUwSUc5bUlIUm9aU0JtYjNKdExseHVJQ0FnSUNBcUlFQmxkbVZ1ZENCQlltbGtaU05tYjNKdGRtRnNhV1JjYmlBZ0lDQWdLaUJBWlhabGJuUWdRV0pwWkdValptOXliV2x1ZG1Gc2FXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9LRzV2UlhKeWIzSWdQeUFuWm05eWJYWmhiR2xrSnlBNklDZG1iM0p0YVc1MllXeHBaQ2NwSUNzZ0p5NTZaaTVoWW1sa1pTY3NJRnQwYUdsekxpUmxiR1Z0Wlc1MFhTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtOUZjbkp2Y2p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaWFJsY20xcGJtVnpJSGRvWlhSb1pYSWdiM0lnWVNCdWIzUWdZU0IwWlhoMElHbHVjSFYwSUdseklIWmhiR2xrSUdKaGMyVmtJRzl1SUhSb1pTQndZWFIwWlhKdUlITndaV05wWm1sbFpDQnBiaUIwYUdVZ1lYUjBjbWxpZFhSbExpQkpaaUJ1YnlCdFlYUmphR2x1WnlCd1lYUjBaWEp1SUdseklHWnZkVzVrTENCeVpYUjFjbTV6SUhSeWRXVXVYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNBa1pXd2dMU0JxVVhWbGNua2diMkpxWldOMElIUnZJSFpoYkdsa1lYUmxMQ0J6YUc5MWJHUWdZbVVnWVNCMFpYaDBJR2x1Y0hWMElFaFVUVXdnWld4bGJXVnVkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2NHRjBkR1Z5YmlBdElITjBjbWx1WnlCMllXeDFaU0J2WmlCdmJtVWdiMllnZEdobElGSmxaMFY0SUhCaGRIUmxjbTV6SUdsdUlFRmlhV1JsTG05d2RHbHZibk11Y0dGMGRHVnlibk5jYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlJRUp2YjJ4bFlXNGdkbUZzZFdVZ1pHVndaVzVrY3lCdmJpQjNhR1YwYUdWeUlHOXlJRzV2ZENCMGFHVWdhVzV3ZFhRZ2RtRnNkV1VnYldGMFkyaGxjeUIwYUdVZ2NHRjBkR1Z5YmlCemNHVmphV1pwWldSY2JpQWdJQ292WEc0Z0lIWmhiR2xrWVhSbFZHVjRkQ2drWld3c0lIQmhkSFJsY200cElIdGNiaUFnSUNBdkx5QkJJSEJoZEhSbGNtNGdZMkZ1SUdKbElIQmhjM05sWkNCMGJ5QjBhR2x6SUdaMWJtTjBhVzl1TENCdmNpQnBkQ0IzYVd4c0lHSmxJR2x1Wm1WeVpXUWdabkp2YlNCMGFHVWdhVzV3ZFhRbmN5QmNJbkJoZEhSbGNtNWNJaUJoZEhSeWFXSjFkR1VzSUc5eUlHbDBKM01nWENKMGVYQmxYQ0lnWVhSMGNtbGlkWFJsWEc0Z0lDQWdjR0YwZEdWeWJpQTlJQ2h3WVhSMFpYSnVJSHg4SUNSbGJDNWhkSFJ5S0Nkd1lYUjBaWEp1SnlrZ2ZId2dKR1ZzTG1GMGRISW9KM1I1Y0dVbktTazdYRzRnSUNBZ2RtRnlJR2x1Y0hWMFZHVjRkQ0E5SUNSbGJDNTJZV3dvS1R0Y2JpQWdJQ0IyWVhJZ2RtRnNhV1FnUFNCbVlXeHpaVHRjYmx4dUlDQWdJR2xtSUNocGJuQjFkRlJsZUhRdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBdkx5QkpaaUIwYUdVZ2NHRjBkR1Z5YmlCaGRIUnlhV0oxZEdVZ2IyNGdkR2hsSUdWc1pXMWxiblFnYVhNZ2FXNGdRV0pwWkdVbmN5QnNhWE4wSUc5bUlIQmhkSFJsY201ekxDQjBhR1Z1SUhSbGMzUWdkR2hoZENCeVpXZGxlSEJjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVjR0YwZEdWeWJuTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NHRjBkR1Z5YmlrcElIdGNiaUFnSUNBZ0lDQWdkbUZzYVdRZ1BTQjBhR2x6TG05d2RHbHZibk11Y0dGMGRHVnlibk5iY0dGMGRHVnlibDB1ZEdWemRDaHBibkIxZEZSbGVIUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJSEJoZEhSbGNtNGdibUZ0WlNCcGMyNG5kQ0JoYkhOdklIUm9aU0IwZVhCbElHRjBkSEpwWW5WMFpTQnZaaUIwYUdVZ1ptbGxiR1FzSUhSb1pXNGdkR1Z6ZENCcGRDQmhjeUJoSUhKbFoyVjRjRnh1SUNBZ0lDQWdaV3h6WlNCcFppQW9jR0YwZEdWeWJpQWhQVDBnSkdWc0xtRjBkSElvSjNSNWNHVW5LU2tnZTF4dUlDQWdJQ0FnSUNCMllXeHBaQ0E5SUc1bGR5QlNaV2RGZUhBb2NHRjBkR1Z5YmlrdWRHVnpkQ2hwYm5CMWRGUmxlSFFwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFpoYkdsa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdMeThnUVc0Z1pXMXdkSGtnWm1sbGJHUWdhWE1nZG1Gc2FXUWdhV1lnYVhRbmN5QnViM1FnY21WeGRXbHlaV1JjYmlBZ0lDQmxiSE5sSUdsbUlDZ2hKR1ZzTG5CeWIzQW9KM0psY1hWcGNtVmtKeWtwSUh0Y2JpQWdJQ0FnSUhaaGJHbGtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZG1Gc2FXUTdYRzRnSUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbGRHVnliV2x1WlhNZ2QyaGxkR2hsY2lCdmNpQmhJRzV2ZENCaElISmhaR2x2SUdsdWNIVjBJR2x6SUhaaGJHbGtJR0poYzJWa0lHOXVJSGRvWlhSb1pYSWdiM0lnYm05MElHbDBJR2x6SUhKbGNYVnBjbVZrSUdGdVpDQnpaV3hsWTNSbFpDNGdRV3gwYUc5MVoyZ2dkR2hsSUdaMWJtTjBhVzl1SUhSaGNtZGxkSE1nWVNCemFXNW5iR1VnWUR4cGJuQjFkRDVnTENCcGRDQjJZV3hwWkdGMFpYTWdZbmtnWTJobFkydHBibWNnZEdobElHQnlaWEYxYVhKbFpHQWdZVzVrSUdCamFHVmphMlZrWUNCd2NtOXdaWEowYVdWeklHOW1JR0ZzYkNCeVlXUnBieUJpZFhSMGIyNXpJR2x1SUdsMGN5Qm5jbTkxY0M1Y2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR2R5YjNWd1RtRnRaU0F0SUVFZ2MzUnlhVzVuSUhSb1lYUWdjM0JsWTJsbWFXVnpJSFJvWlNCdVlXMWxJRzltSUdFZ2NtRmthVzhnWW5WMGRHOXVJR2R5YjNWd1hHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlNCQ2IyOXNaV0Z1SUhaaGJIVmxJR1JsY0dWdVpITWdiMjRnZDJobGRHaGxjaUJ2Y2lCdWIzUWdZWFFnYkdWaGMzUWdiMjVsSUhKaFpHbHZJR2x1Y0hWMElHaGhjeUJpWldWdUlITmxiR1ZqZEdWa0lDaHBaaUJwZENkeklISmxjWFZwY21Wa0tWeHVJQ0FnS2k5Y2JpQWdkbUZzYVdSaGRHVlNZV1JwYnlobmNtOTFjRTVoYldVcElIdGNiaUFnSUNBdkx5QkpaaUJoZENCc1pXRnpkQ0J2Ym1VZ2NtRmthVzhnYVc0Z2RHaGxJR2R5YjNWd0lHaGhjeUIwYUdVZ1lISmxjWFZwY21Wa1lDQmhkSFJ5YVdKMWRHVXNJSFJvWlNCbmNtOTFjQ0JwY3lCamIyNXphV1JsY21Wa0lISmxjWFZwY21Wa1hHNGdJQ0FnTHk4Z1VHVnlJRmN6UXlCemNHVmpMQ0JoYkd3Z2NtRmthVzhnWW5WMGRHOXVjeUJwYmlCaElHZHliM1Z3SUhOb2IzVnNaQ0JvWVhabElHQnlaWEYxYVhKbFpHQXNJR0oxZENCM1pTZHlaU0JpWldsdVp5QnVhV05sWEc0Z0lDQWdkbUZ5SUNSbmNtOTFjQ0E5SUhSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNoZ09uSmhaR2x2VzI1aGJXVTlYQ0lrZTJkeWIzVndUbUZ0WlgxY0lsMWdLVHRjYmlBZ0lDQjJZWElnZG1Gc2FXUWdQU0JtWVd4elpTd2djbVZ4ZFdseVpXUWdQU0JtWVd4elpUdGNibHh1SUNBZ0lDOHZJRVp2Y2lCMGFHVWdaM0p2ZFhBZ2RHOGdZbVVnY21WeGRXbHlaV1FzSUdGMElHeGxZWE4wSUc5dVpTQnlZV1JwYnlCdVpXVmtjeUIwYnlCaVpTQnlaWEYxYVhKbFpGeHVJQ0FnSUNSbmNtOTFjQzVsWVdOb0tDaHBMQ0JsS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvSkNobEtTNWhkSFJ5S0NkeVpYRjFhWEpsWkNjcEtTQjdYRzRnSUNBZ0lDQWdJSEpsY1hWcGNtVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCcFppZ2hjbVZ4ZFdseVpXUXBJSFpoYkdsa1BYUnlkV1U3WEc1Y2JpQWdJQ0JwWmlBb0lYWmhiR2xrS1NCN1hHNGdJQ0FnSUNBdkx5QkdiM0lnZEdobElHZHliM1Z3SUhSdklHSmxJSFpoYkdsa0xDQmhkQ0JzWldGemRDQnZibVVnY21Ga2FXOGdibVZsWkhNZ2RHOGdZbVVnWTJobFkydGxaRnh1SUNBZ0lDQWdKR2R5YjNWd0xtVmhZMmdvS0drc0lHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ1FvWlNrdWNISnZjQ2duWTJobFkydGxaQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZzYVdRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhaaGJHbGtPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbGRHVnliV2x1WlhNZ2FXWWdZU0J6Wld4bFkzUmxaQ0JwYm5CMWRDQndZWE56WlhNZ1lTQmpkWE4wYjIwZ2RtRnNhV1JoZEdsdmJpQm1kVzVqZEdsdmJpNGdUWFZzZEdsd2JHVWdkbUZzYVdSaGRHbHZibk1nWTJGdUlHSmxJSFZ6WldRc0lHbG1JSEJoYzNObFpDQjBieUIwYUdVZ1pXeGxiV1Z1ZENCM2FYUm9JR0JrWVhSaExYWmhiR2xrWVhSdmNqMWNJbVp2YnlCaVlYSWdZbUY2WENKZ0lHbHVJR0VnYzNCaFkyVWdjMlZ3WVhKaGRHVmtJR3hwYzNSbFpDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUNSbGJDQXRJR3BSZFdWeWVTQnBibkIxZENCbGJHVnRaVzUwTGx4dUlDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdkbUZzYVdSaGRHOXljeUF0SUdFZ2MzUnlhVzVuSUc5bUlHWjFibU4wYVc5dUlHNWhiV1Z6SUcxaGRHTm9hVzVuSUdaMWJtTjBhVzl1Y3lCcGJpQjBhR1VnUVdKcFpHVXViM0IwYVc5dWN5NTJZV3hwWkdGMGIzSnpJRzlpYW1WamRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZlNCeVpYRjFhWEpsWkNBdElITmxiR1lnWlhod2JHRnVZWFJ2Y25rL1hHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlNBdElIUnlkV1VnYVdZZ2RtRnNhV1JoZEdsdmJuTWdjR0Z6YzJWa0xseHVJQ0FnS2k5Y2JpQWdiV0YwWTJoV1lXeHBaR0YwYVc5dUtDUmxiQ3dnZG1Gc2FXUmhkRzl5Y3l3Z2NtVnhkV2x5WldRcElIdGNiaUFnSUNCeVpYRjFhWEpsWkNBOUlISmxjWFZwY21Wa0lEOGdkSEoxWlNBNklHWmhiSE5sTzF4dVhHNGdJQ0FnZG1GeUlHTnNaV0Z5SUQwZ2RtRnNhV1JoZEc5eWN5NXpjR3hwZENnbklDY3BMbTFoY0Nnb2Rpa2dQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIzQjBhVzl1Y3k1MllXeHBaR0YwYjNKelczWmRLQ1JsYkN3Z2NtVnhkV2x5WldRc0lDUmxiQzV3WVhKbGJuUW9LU2s3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdjbVYwZFhKdUlHTnNaV0Z5TG1sdVpHVjRUMllvWm1Gc2MyVXBJRDA5UFNBdE1UdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhObGRITWdabTl5YlNCcGJuQjFkSE1nWVc1a0lITjBlV3hsYzF4dUlDQWdLaUJBWm1seVpYTWdRV0pwWkdValptOXliWEpsYzJWMFhHNGdJQ0FxTDF4dUlDQnlaWE5sZEVadmNtMG9LU0I3WEc0Z0lDQWdkbUZ5SUNSbWIzSnRJRDBnZEdocGN5NGtaV3hsYldWdWRDeGNiaUFnSUNBZ0lDQWdiM0IwY3lBOUlIUm9hWE11YjNCMGFXOXVjenRjYmx4dUlDQWdJQ1FvWUM0a2UyOXdkSE11YkdGaVpXeEZjbkp2Y2tOc1lYTnpmV0FzSUNSbWIzSnRLUzV1YjNRb0ozTnRZV3hzSnlrdWNtVnRiM1psUTJ4aGMzTW9iM0IwY3k1c1lXSmxiRVZ5Y205eVEyeGhjM01wTzF4dUlDQWdJQ1FvWUM0a2UyOXdkSE11YVc1d2RYUkZjbkp2Y2tOc1lYTnpmV0FzSUNSbWIzSnRLUzV1YjNRb0ozTnRZV3hzSnlrdWNtVnRiM1psUTJ4aGMzTW9iM0IwY3k1cGJuQjFkRVZ5Y205eVEyeGhjM01wTzF4dUlDQWdJQ1FvWUNSN2IzQjBjeTVtYjNKdFJYSnliM0pUWld4bFkzUnZjbjB1Skh0dmNIUnpMbVp2Y20xRmNuSnZja05zWVhOemZXQXBMbkpsYlc5MlpVTnNZWE56S0c5d2RITXVabTl5YlVWeWNtOXlRMnhoYzNNcE8xeHVJQ0FnSUNSbWIzSnRMbVpwYm1Rb0oxdGtZWFJoTFdGaWFXUmxMV1Z5Y205eVhTY3BMbU56Y3lnblpHbHpjR3hoZVNjc0lDZHViMjVsSnlrN1hHNGdJQ0FnSkNnbk9tbHVjSFYwSnl3Z0pHWnZjbTBwTG01dmRDZ25PbUoxZEhSdmJpd2dPbk4xWW0xcGRDd2dPbkpsYzJWMExDQTZhR2xrWkdWdUxDQTZjbUZrYVc4c0lEcGphR1ZqYTJKdmVDd2dXMlJoZEdFdFlXSnBaR1V0YVdkdWIzSmxYU2NwTG5aaGJDZ25KeWt1Y21WdGIzWmxRWFIwY2lnblpHRjBZUzFwYm5aaGJHbGtKeWs3WEc0Z0lDQWdKQ2duT21sdWNIVjBPbkpoWkdsdkp5d2dKR1p2Y20wcExtNXZkQ2duVzJSaGRHRXRZV0pwWkdVdGFXZHViM0psWFNjcExuQnliM0FvSjJOb1pXTnJaV1FuTEdaaGJITmxLUzV5WlcxdmRtVkJkSFJ5S0Nka1lYUmhMV2x1ZG1Gc2FXUW5LVHRjYmlBZ0lDQWtLQ2M2YVc1d2RYUTZZMmhsWTJ0aWIzZ25MQ0FrWm05eWJTa3VibTkwS0NkYlpHRjBZUzFoWW1sa1pTMXBaMjV2Y21WZEp5a3VjSEp2Y0NnblkyaGxZMnRsWkNjc1ptRnNjMlVwTG5KbGJXOTJaVUYwZEhJb0oyUmhkR0V0YVc1MllXeHBaQ2NwTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVacGNtVnpJSGRvWlc0Z2RHaGxJR1p2Y20wZ2FHRnpJR0psWlc0Z2NtVnpaWFF1WEc0Z0lDQWdJQ29nUUdWMlpXNTBJRUZpYVdSbEkyWnZjbTF5WlhObGRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUNSbWIzSnRMblJ5YVdkblpYSW9KMlp2Y20xeVpYTmxkQzU2Wmk1aFltbGtaU2NzSUZza1ptOXliVjBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxjM1J5YjNseklHRnVJR2x1YzNSaGJtTmxJRzltSUVGaWFXUmxMbHh1SUNBZ0tpQlNaVzF2ZG1WeklHVnljbTl5SUhOMGVXeGxjeUJoYm1RZ1kyeGhjM05sY3lCbWNtOXRJR1ZzWlcxbGJuUnpMQ0IzYVhSb2IzVjBJSEpsYzJWMGRHbHVaeUIwYUdWcGNpQjJZV3gxWlhNdVhHNGdJQ0FxTDF4dUlDQmZaR1Z6ZEhKdmVTZ3BJSHRjYmlBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUmNiaUFnSUNBZ0lDNXZabVlvSnk1aFltbGtaU2NwWEc0Z0lDQWdJQ0F1Wm1sdVpDZ25XMlJoZEdFdFlXSnBaR1V0WlhKeWIzSmRKeWxjYmlBZ0lDQWdJQ0FnTG1OemN5Z25aR2x6Y0d4aGVTY3NJQ2R1YjI1bEp5azdYRzVjYmlBZ0lDQjBhR2x6TGlScGJuQjFkSE5jYmlBZ0lDQWdJQzV2Wm1Zb0p5NWhZbWxrWlNjcFhHNGdJQ0FnSUNBdVpXRmphQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11Y21WdGIzWmxSWEp5YjNKRGJHRnpjMlZ6S0NRb2RHaHBjeWtwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkVaV1poZFd4MElITmxkSFJwYm1keklHWnZjaUJ3YkhWbmFXNWNiaUFxTDF4dVFXSnBaR1V1WkdWbVlYVnNkSE1nUFNCN1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ1pHVm1ZWFZzZENCbGRtVnVkQ0IwYnlCMllXeHBaR0YwWlNCcGJuQjFkSE11SUVOb1pXTnJZbTk0WlhNZ1lXNWtJSEpoWkdsdmN5QjJZV3hwWkdGMFpTQnBiVzFsWkdsaGRHVnNlUzVjYmlBZ0lDb2dVbVZ0YjNabElHOXlJR05vWVc1blpTQjBhR2x6SUhaaGJIVmxJR1p2Y2lCdFlXNTFZV3dnZG1Gc2FXUmhkR2x2Ymk1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN1AzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSjJacFpXeGtRMmhoYm1kbEoxeHVJQ0FnS2k5Y2JpQWdkbUZzYVdSaGRHVlBiam9nSjJacFpXeGtRMmhoYm1kbEp5eGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyeGhjM01nZEc4Z1ltVWdZWEJ3YkdsbFpDQjBieUJwYm5CMWRDQnNZV0psYkhNZ2IyNGdabUZwYkdWa0lIWmhiR2xrWVhScGIyNHVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ0oybHpMV2x1ZG1Gc2FXUXRiR0ZpWld3blhHNGdJQ0FxTDF4dUlDQnNZV0psYkVWeWNtOXlRMnhoYzNNNklDZHBjeTFwYm5aaGJHbGtMV3hoWW1Wc0p5eGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyeGhjM01nZEc4Z1ltVWdZWEJ3YkdsbFpDQjBieUJwYm5CMWRITWdiMjRnWm1GcGJHVmtJSFpoYkdsa1lYUnBiMjR1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdKMmx6TFdsdWRtRnNhV1F0YVc1d2RYUW5YRzRnSUNBcUwxeHVJQ0JwYm5CMWRFVnljbTl5UTJ4aGMzTTZJQ2RwY3kxcGJuWmhiR2xrTFdsdWNIVjBKeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMnhoYzNNZ2MyVnNaV04wYjNJZ2RHOGdkWE5sSUhSdklIUmhjbWRsZENCR2IzSnRJRVZ5Y205eWN5Qm1iM0lnYzJodmR5OW9hV1JsTGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQXFJRUJrWldaaGRXeDBJQ2N1Wm05eWJTMWxjbkp2Y2lkY2JpQWdJQ292WEc0Z0lHWnZjbTFGY25KdmNsTmxiR1ZqZEc5eU9pQW5MbVp2Y20wdFpYSnliM0luTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYkdGemN5QmhaR1JsWkNCMGJ5QkdiM0p0SUVWeWNtOXljeUJ2YmlCbVlXbHNaV1FnZG1Gc2FXUmhkR2x2Ymk1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0FuYVhNdGRtbHphV0pzWlNkY2JpQWdJQ292WEc0Z0lHWnZjbTFGY25KdmNrTnNZWE56T2lBbmFYTXRkbWx6YVdKc1pTY3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkQ0IwYnlCMGNuVmxJSFJ2SUhaaGJHbGtZWFJsSUhSbGVIUWdhVzV3ZFhSeklHOXVJR0Z1ZVNCMllXeDFaU0JqYUdGdVoyVXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCc2FYWmxWbUZzYVdSaGRHVTZJR1poYkhObExGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUWdkRzhnZEhKMVpTQjBieUIyWVd4cFpHRjBaU0JwYm5CMWRITWdiMjRnWW14MWNpNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDb3ZYRzRnSUhaaGJHbGtZWFJsVDI1Q2JIVnlPaUJtWVd4elpTeGNibHh1SUNCd1lYUjBaWEp1Y3pvZ2UxeHVJQ0FnSUdGc2NHaGhJRG9nTDE1YllTMTZRUzFhWFNza0x5eGNiaUFnSUNCaGJIQm9ZVjl1ZFcxbGNtbGpJRG9nTDE1YllTMTZRUzFhTUMwNVhTc2tMeXhjYmlBZ0lDQnBiblJsWjJWeUlEb2dMMTViTFN0ZFAxeGNaQ3NrTHl4Y2JpQWdJQ0J1ZFcxaVpYSWdPaUF2WGxzdEsxMC9YRnhrS2lnL09sdGNYQzVjWEN4ZFhGeGtLeWsvSkM4c1hHNWNiaUFnSUNBdkx5QmhiV1Y0TENCMmFYTmhMQ0JrYVc1bGNuTmNiaUFnSUNCallYSmtJRG9nTDE0b1B6bzBXekF0T1YxN01USjlLRDg2V3pBdE9WMTdNMzBwUDN3MVd6RXROVjFiTUMwNVhYc3hOSDE4S0Q4Nk1qSXlXekV0T1YxOE1sc3pMVFpkV3pBdE9WMTdNbjE4TWpkYk1DMHhYVnN3TFRsZGZESTNNakFwV3pBdE9WMTdNVEo5ZkRZb1B6b3dNVEY4TlZzd0xUbGRXekF0T1YwcFd6QXRPVjE3TVRKOWZETmJORGRkV3pBdE9WMTdNVE45ZkRNb1B6b3dXekF0TlYxOFd6WTRYVnN3TFRsZEtWc3dMVGxkZXpFeGZYd29Qem95TVRNeGZERTRNREI4TXpWY1hHUjdNMzBwWEZ4a2V6RXhmU2trTHl4Y2JpQWdJQ0JqZG5ZZ09pQXZYaWhiTUMwNVhTbDdNeXcwZlNRdkxGeHVYRzRnSUNBZ0x5OGdhSFIwY0RvdkwzZDNkeTUzYUdGMGQyY3ViM0puTDNOd1pXTnpMM2RsWWkxaGNIQnpMMk4xY25KbGJuUXRkMjl5YXk5dGRXeDBhWEJoWjJVdmMzUmhkR1Z6TFc5bUxYUm9aUzEwZVhCbExXRjBkSEpwWW5WMFpTNW9kRzFzSTNaaGJHbGtMV1V0YldGcGJDMWhaR1J5WlhOelhHNGdJQ0FnWlcxaGFXd2dPaUF2WGx0aExYcEJMVm93TFRrdUlTTWtKU1luS2l0Y1hDODlQMTVmWUh0OGZYNHRYU3RBVzJFdGVrRXRXakF0T1Ywb1B6cGJZUzE2UVMxYU1DMDVMVjE3TUN3Mk1YMWJZUzE2UVMxYU1DMDVYU2svS0Q4NlhGd3VXMkV0ZWtFdFdqQXRPVjBvUHpwYllTMTZRUzFhTUMwNUxWMTdNQ3cyTVgxYllTMTZRUzFhTUMwNVhTay9LU3NrTHl4Y2JseHVJQ0FnSUhWeWJDQTZJQzllS0doMGRIQnpQM3htZEhCOFptbHNaWHh6YzJncE9seGNMMXhjTHlnb0tDaGJZUzE2UVMxYVhYeGNYR1I4TFh4Y1hDNThYM3grZkZ0Y1hIVXdNRUV3TFZ4Y2RVUTNSa1pjWEhWR09UQXdMVnhjZFVaRVEwWmNYSFZHUkVZd0xWeGNkVVpHUlVaZEtYd29KVnRjWEdSaExXWmRleko5S1h4YklWeGNKQ1luWEZ3b1hGd3BYRndxWEZ3ckxEczlYWHc2S1NwQUtUOG9LQ2hjWEdSOFd6RXRPVjFjWEdSOE1WeGNaRnhjWkh3eVd6QXRORjFjWEdSOE1qVmJNQzAxWFNsY1hDNG9YRnhrZkZzeExUbGRYRnhrZkRGY1hHUmNYR1I4TWxzd0xUUmRYRnhrZkRJMVd6QXROVjBwWEZ3dUtGeGNaSHhiTVMwNVhWeGNaSHd4WEZ4a1hGeGtmREpiTUMwMFhWeGNaSHd5TlZzd0xUVmRLVnhjTGloY1hHUjhXekV0T1YxY1hHUjhNVnhjWkZ4Y1pId3lXekF0TkYxY1hHUjhNalZiTUMwMVhTa3BmQ2dvS0Z0aExYcEJMVnBkZkZ4Y1pIeGJYRngxTURCQk1DMWNYSFZFTjBaR1hGeDFSamt3TUMxY1hIVkdSRU5HWEZ4MVJrUkdNQzFjWEhWR1JrVkdYU2w4S0NoYllTMTZRUzFhWFh4Y1hHUjhXMXhjZFRBd1FUQXRYRngxUkRkR1JseGNkVVk1TURBdFhGeDFSa1JEUmx4Y2RVWkVSakF0WEZ4MVJrWkZSbDBwS0Z0aExYcEJMVnBkZkZ4Y1pId3RmRnhjTG54ZmZINThXMXhjZFRBd1FUQXRYRngxUkRkR1JseGNkVVk1TURBdFhGeDFSa1JEUmx4Y2RVWkVSakF0WEZ4MVJrWkZSbDBwS2loYllTMTZRUzFhWFh4Y1hHUjhXMXhjZFRBd1FUQXRYRngxUkRkR1JseGNkVVk1TURBdFhGeDFSa1JEUmx4Y2RVWkVSakF0WEZ4MVJrWkZSbDBwS1NsY1hDNHBLeWdvVzJFdGVrRXRXbDE4VzF4Y2RUQXdRVEF0WEZ4MVJEZEdSbHhjZFVZNU1EQXRYRngxUmtSRFJseGNkVVpFUmpBdFhGeDFSa1pGUmwwcGZDZ29XMkV0ZWtFdFdsMThXMXhjZFRBd1FUQXRYRngxUkRkR1JseGNkVVk1TURBdFhGeDFSa1JEUmx4Y2RVWkVSakF0WEZ4MVJrWkZSbDBwS0Z0aExYcEJMVnBkZkZ4Y1pId3RmRnhjTG54ZmZINThXMXhjZFRBd1FUQXRYRngxUkRkR1JseGNkVVk1TURBdFhGeDFSa1JEUmx4Y2RVWkVSakF0WEZ4MVJrWkZSbDBwS2loYllTMTZRUzFhWFh4YlhGeDFNREJCTUMxY1hIVkVOMFpHWEZ4MVJqa3dNQzFjWEhWR1JFTkdYRngxUmtSR01DMWNYSFZHUmtWR1hTa3BLVnhjTGo4cEtEcGNYR1FxS1Q4cEtGeGNMeWdvS0Z0aExYcEJMVnBkZkZ4Y1pId3RmRnhjTG54ZmZINThXMXhjZFRBd1FUQXRYRngxUkRkR1JseGNkVVk1TURBdFhGeDFSa1JEUmx4Y2RVWkVSakF0WEZ4MVJrWkZSbDBwZkNnbFcxeGNaR0V0WmwxN01uMHBmRnNoWEZ3a0ppZGNYQ2hjWENsY1hDcGNYQ3NzT3oxZGZEcDhRQ2tyS0Z4Y0x5Z29XMkV0ZWtFdFdsMThYRnhrZkMxOFhGd3VmRjk4Zm54YlhGeDFNREJCTUMxY1hIVkVOMFpHWEZ4MVJqa3dNQzFjWEhWR1JFTkdYRngxUmtSR01DMWNYSFZHUmtWR1hTbDhLQ1ZiWEZ4a1lTMW1YWHN5ZlNsOFd5RmNYQ1FtSjF4Y0tGeGNLVnhjS2x4Y0t5dzdQVjE4T254QUtTb3BLaWsvS1Q4b1hGdy9LQ2dvVzJFdGVrRXRXbDE4WEZ4a2ZDMThYRnd1ZkY5OGZueGJYRngxTURCQk1DMWNYSFZFTjBaR1hGeDFSamt3TUMxY1hIVkdSRU5HWEZ4MVJrUkdNQzFjWEhWR1JrVkdYU2w4S0NWYlhGeGtZUzFtWFhzeWZTbDhXeUZjWENRbUoxeGNLRnhjS1Z4Y0tseGNLeXc3UFYxOE9ueEFLWHhiWEZ4MVJUQXdNQzFjWEhWR09FWkdYWHhjWEM5OFhGdy9LU29wUHloY1hDTW9LQ2hiWVMxNlFTMWFYWHhjWEdSOExYeGNYQzU4WDN4K2ZGdGNYSFV3TUVFd0xWeGNkVVEzUmtaY1hIVkdPVEF3TFZ4Y2RVWkVRMFpjWEhWR1JFWXdMVnhjZFVaR1JVWmRLWHdvSlZ0Y1hHUmhMV1pkZXpKOUtYeGJJVnhjSkNZblhGd29YRndwWEZ3cVhGd3JMRHM5WFh3NmZFQXBmRnhjTDN4Y1hEOHBLaWsvSkM4c1hHNGdJQ0FnTHk4Z1lXSmpMbVJsWEc0Z0lDQWdaRzl0WVdsdUlEb2dMMTRvVzJFdGVrRXRXakF0T1Ywb1cyRXRla0V0V2pBdE9WeGNMVjE3TUN3Mk1YMWJZUzE2UVMxYU1DMDVYU2svWEZ3dUtTdGJZUzE2UVMxYVhYc3lMRGg5SkM4c1hHNWNiaUFnSUNCa1lYUmxkR2x0WlNBNklDOWVLRnN3TFRKZFd6QXRPVjE3TTMwcFhGd3RLRnN3TFRGZFd6QXRPVjBwWEZ3dEtGc3dMVE5kV3pBdE9WMHBWQ2hiTUMwMVhWc3dMVGxkS1Z4Y09paGJNQzAxWFZzd0xUbGRLVnhjT2loYk1DMDFYVnN3TFRsZEtTaGFmQ2hiWEZ3dFhGd3JYU2hiTUMweFhWc3dMVGxkS1Z4Y09qQXdLU2trTHl4Y2JpQWdJQ0F2THlCWldWbFpMVTFOTFVSRVhHNGdJQ0FnWkdGMFpTQTZJQzhvUHpveE9Yd3lNQ2xiTUMwNVhYc3lmUzBvUHpvb1B6b3dXekV0T1YxOE1Wc3dMVEpkS1Mwb1B6b3dXekV0T1YxOE1Wc3dMVGxkZkRKYk1DMDVYU2w4S0Q4NktEOGhNRElwS0Q4Nk1Gc3hMVGxkZkRGYk1DMHlYU2t0S0Q4Nk16QXBLWHdvUHpvb1B6b3dXekV6TlRjNFhYd3hXekF5WFNrdE16RXBLU1F2TEZ4dUlDQWdJQzh2SUVoSU9rMU5PbE5UWEc0Z0lDQWdkR2x0WlNBNklDOWVLREJiTUMwNVhYd3hXekF0T1YxOE1sc3dMVE5kS1NnNld6QXROVjFiTUMwNVhTbDdNbjBrTHl4Y2JpQWdJQ0JrWVhSbFNWTlBJRG9nTDE1Y1hHUjdOSDFiWEZ3dlhGd3RYVnhjWkhzeExESjlXMXhjTDF4Y0xWMWNYR1I3TVN3eWZTUXZMRnh1SUNBZ0lDOHZJRTFOTDBSRUwxbFpXVmxjYmlBZ0lDQnRiMjUwYUY5a1lYbGZlV1ZoY2lBNklDOWVLREJiTVMwNVhYd3hXekF4TWwwcFd5MGdYRnd2TGwwb01Gc3hMVGxkZkZzeE1sMWJNQzA1WFh3eld6QXhYU2xiTFNCY1hDOHVYVnhjWkhzMGZTUXZMRnh1SUNBZ0lDOHZJRVJFTDAxTkwxbFpXVmxjYmlBZ0lDQmtZWGxmYlc5dWRHaGZlV1ZoY2lBNklDOWVLREJiTVMwNVhYeGJNVEpkV3pBdE9WMThNMXN3TVYwcFd5MGdYRnd2TGwwb01Gc3hMVGxkZkRGYk1ERXlYU2xiTFNCY1hDOHVYVnhjWkhzMGZTUXZMRnh1WEc0Z0lDQWdMeThnSTBaR1JpQnZjaUFqUmtaR1JrWkdYRzRnSUNBZ1kyOXNiM0lnT2lBdlhpTS9LRnRoTFdaQkxVWXdMVGxkZXpaOWZGdGhMV1pCTFVZd0xUbGRlek45S1NRdkxGeHVYRzRnSUNBZ0x5OGdSRzl0WVdsdUlIeDhJRlZTVEZ4dUlDQWdJSGRsWW5OcGRHVTZJSHRjYmlBZ0lDQWdJSFJsYzNRNklDaDBaWGgwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkJZbWxrWlM1a1pXWmhkV3gwY3k1d1lYUjBaWEp1YzFzblpHOXRZV2x1SjEwdWRHVnpkQ2gwWlhoMEtTQjhmQ0JCWW1sa1pTNWtaV1poZFd4MGN5NXdZWFIwWlhKdWMxc25kWEpzSjEwdWRHVnpkQ2gwWlhoMEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRTl3ZEdsdmJtRnNJSFpoYkdsa1lYUnBiMjRnWm5WdVkzUnBiMjV6SUhSdklHSmxJSFZ6WldRdUlHQmxjWFZoYkZSdllDQmlaV2x1WnlCMGFHVWdiMjVzZVNCa1pXWmhkV3gwSUdsdVkyeDFaR1ZrSUdaMWJtTjBhVzl1TGx4dUlDQWdLaUJHZFc1amRHbHZibk1nYzJodmRXeGtJSEpsZEhWeWJpQnZibXg1SUdFZ1ltOXZiR1ZoYmlCcFppQjBhR1VnYVc1d2RYUWdhWE1nZG1Gc2FXUWdiM0lnYm05MExpQkdkVzVqZEdsdmJuTWdZWEpsSUdkcGRtVnVJSFJvWlNCbWIyeHNiM2RwYm1jZ1lYSm5kVzFsYm5Sek9seHVJQ0FnS2lCbGJDQTZJRlJvWlNCcVVYVmxjbmtnWld4bGJXVnVkQ0IwYnlCMllXeHBaR0YwWlM1Y2JpQWdJQ29nY21WeGRXbHlaV1FnT2lCQ2IyOXNaV0Z1SUhaaGJIVmxJRzltSUhSb1pTQnlaWEYxYVhKbFpDQmhkSFJ5YVdKMWRHVWdZbVVnY0hKbGMyVnVkQ0J2Y2lCdWIzUXVYRzRnSUNBcUlIQmhjbVZ1ZENBNklGUm9aU0JrYVhKbFkzUWdjR0Z5Wlc1MElHOW1JSFJvWlNCcGJuQjFkQzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2k5Y2JpQWdkbUZzYVdSaGRHOXljem9nZTF4dUlDQWdJR1Z4ZFdGc1ZHODZJR1oxYm1OMGFXOXVJQ2hsYkN3Z2NtVnhkV2x5WldRc0lIQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNRb1lDTWtlMlZzTG1GMGRISW9KMlJoZEdFdFpYRjFZV3gwYnljcGZXQXBMblpoYkNncElEMDlQU0JsYkM1MllXd29LVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJSHRCWW1sa1pYMDdYRzRpWFgwPVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmFiaWRlLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFjY29yZGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmtleWJvYXJkJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBBY2NvcmRpb24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICovXG5cbnZhciBBY2NvcmRpb24gPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoQWNjb3JkaW9uLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBBY2NvcmRpb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY29yZGlvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEFjY29yZGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFjY29yZGlvbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFjY29yZGlvbiwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgQWNjb3JkaW9uXG4gICAgICogQGZpcmVzIEFjY29yZGlvbiNpbml0XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhIHBsYWluIG9iamVjdCB3aXRoIHNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKHt9LCBBY2NvcmRpb24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnQWNjb3JkaW9uJzsgLy8gaWU5IGJhY2sgY29tcGF0XG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5yZWdpc3RlcignQWNjb3JkaW9uJywge1xuICAgICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfVVAnOiAncHJldmlvdXMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICAgIHRoaXMuJHRhYnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1hY2NvcmRpb24taXRlbV0nKTtcblxuICAgICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uIChpZHgsIGVsKSB7XG4gICAgICAgIHZhciAkZWwgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZWwpLFxuICAgICAgICAgICAgJGNvbnRlbnQgPSAkZWwuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpLFxuICAgICAgICAgICAgaWQgPSAkY29udGVudFswXS5pZCB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsMi5HZXRZb0RpZ2l0cykoNiwgJ2FjY29yZGlvbicpLFxuICAgICAgICAgICAgbGlua0lkID0gZWwuaWQgfHwgaWQgKyAnLWxhYmVsJztcblxuICAgICAgICAkZWwuZmluZCgnYTpmaXJzdCcpLmF0dHIoe1xuICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgICAnaWQnOiBsaW5rSWQsXG4gICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgICRjb250ZW50LmF0dHIoeyAncm9sZSc6ICd0YWJwYW5lbCcsICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWQsICdhcmlhLWhpZGRlbic6IHRydWUsICdpZCc6IGlkIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgJGluaXRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY3RpdmUnKS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgICB0aGlzLmZpcnN0VGltZUluaXQgPSB0cnVlO1xuICAgICAgaWYgKCRpbml0QWN0aXZlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRvd24oJGluaXRBY3RpdmUsIHRoaXMuZmlyc3RUaW1lSW5pdCk7XG4gICAgICAgIHRoaXMuZmlyc3RUaW1lSW5pdCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jaGVja0RlZXBMaW5rID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYW5jaG9yID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgICAgIC8vbmVlZCBhIGhhc2ggYW5kIGEgcmVsZXZhbnQgYW5jaG9yIGluIHRoaXMgdGFic2V0XG4gICAgICAgIGlmIChhbmNob3IubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyICRsaW5rID0gX3RoaXMzLiRlbGVtZW50LmZpbmQoJ1tocmVmJD1cIicgKyBhbmNob3IgKyAnXCJdJyksXG4gICAgICAgICAgICAgICRhbmNob3IgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoYW5jaG9yKTtcblxuICAgICAgICAgIGlmICgkbGluay5sZW5ndGggJiYgJGFuY2hvcikge1xuICAgICAgICAgICAgaWYgKCEkbGluay5wYXJlbnQoJ1tkYXRhLWFjY29yZGlvbi1pdGVtXScpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICBfdGhpczMuZG93bigkYW5jaG9yLCBfdGhpczMuZmlyc3RUaW1lSW5pdCk7XG4gICAgICAgICAgICAgIF90aGlzMy5maXJzdFRpbWVJbml0ID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL3JvbGwgdXAgYSBsaXR0bGUgdG8gc2hvdyB0aGUgdGl0bGVzXG4gICAgICAgICAgICBpZiAoX3RoaXMzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3RoaXMzO1xuICAgICAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gX3RoaXMuJGVsZW1lbnQub2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogb2Zmc2V0LnRvcCB9LCBfdGhpcy5vcHRpb25zLmRlZXBMaW5rU211ZGdlRGVsYXkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgenBsdWdpbiBoYXMgZGVlcGxpbmtlZCBhdCBwYWdlbG9hZFxuICAgICAgICAgICAgICAqIEBldmVudCBBY2NvcmRpb24jZGVlcGxpbmtcbiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIF90aGlzMy4kZWxlbWVudC50cmlnZ2VyKCdkZWVwbGluay56Zi5hY2NvcmRpb24nLCBbJGxpbmssICRhbmNob3JdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vdXNlIGJyb3dzZXIgdG8gb3BlbiBhIHRhYiwgaWYgaXQgZXhpc3RzIGluIHRoaXMgdGFic2V0XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrRGVlcExpbmsoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBhY2NvcmRpb24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLiR0YWJzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW0gPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyk7XG4gICAgICAgIHZhciAkdGFiQ29udGVudCA9ICRlbGVtLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgICAgaWYgKCR0YWJDb250ZW50Lmxlbmd0aCkge1xuICAgICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb24ga2V5ZG93bi56Zi5hY2NvcmRpb24nKS5vbignY2xpY2suemYuYWNjb3JkaW9uJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgICAgfSkub24oJ2tleWRvd24uemYuYWNjb3JkaW9uJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0FjY29yZGlvbicsIHtcbiAgICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCR0YWJDb250ZW50KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5uZXh0KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiBwcmV2aW91cygpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5wcmV2KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIGhhbmRsZWQoKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgc2VsZWN0ZWQgY29udGVudCBwYW5lJ3Mgb3Blbi9jbG9zZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIGpRdWVyeSBvYmplY3Qgb2YgdGhlIHBhbmUgdG8gdG9nZ2xlIChgLmFjY29yZGlvbi1jb250ZW50YCkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgkdGFyZ2V0KSB7XG4gICAgICBpZiAoJHRhcmdldC5jbG9zZXN0KCdbZGF0YS1hY2NvcmRpb25dJykuaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgICAgICBjb25zb2xlLmluZm8oJ0Nhbm5vdCB0b2dnbGUgYW4gYWNjb3JkaW9uIHRoYXQgaXMgZGlzYWJsZWQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICgkdGFyZ2V0LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgfVxuICAgICAgLy9laXRoZXIgcmVwbGFjZSBvciB1cGRhdGUgYnJvd3NlciBoaXN0b3J5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIHZhciBhbmNob3IgPSAkdGFyZ2V0LnByZXYoJ2EnKS5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGRhdGVIaXN0b3J5KSB7XG4gICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBhbmNob3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHBhbmUgdG8gb3BlbiAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmlyc3RUaW1lIC0gZmxhZyB0byBkZXRlcm1pbmUgaWYgcmVmbG93IHNob3VsZCBoYXBwZW4uXG4gICAgICogQGZpcmVzIEFjY29yZGlvbiNkb3duXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rvd24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkb3duKCR0YXJnZXQsIGZpcnN0VGltZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIC8qKlxuICAgICAgICogY2hlY2tpbmcgZmlyc3RUaW1lIGFsbG93cyBmb3IgaW5pdGlhbCByZW5kZXIgb2YgdGhlIGFjY29yZGlvblxuICAgICAgICogdG8gcmVuZGVyIHByZXNldCBpcy1hY3RpdmUgcGFuZXMuXG4gICAgICAgKi9cbiAgICAgIGlmICgkdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWFjY29yZGlvbl0nKS5pcygnW2Rpc2FibGVkXScpICYmICFmaXJzdFRpbWUpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdDYW5ub3QgY2FsbCBkb3duIG9uIGFuIGFjY29yZGlvbiB0aGF0IGlzIGRpc2FibGVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpLnBhcmVudCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuYWRkQmFjaygpLnBhcmVudCgpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgICB2YXIgJGN1cnJlbnRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgICAgICBpZiAoJGN1cnJlbnRBY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy51cCgkY3VycmVudEFjdGl2ZS5ub3QoJHRhcmdldCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQuc2xpZGVEb3duKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBvcGVuaW5nLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2Rvd25cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzNC4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcblxuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArICR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5JykpLmF0dHIoe1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IHRydWUsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBBY2NvcmRpb24gdGFiIHRvIGNsb3NlIChgLmFjY29yZGlvbi1jb250ZW50YCkuXG4gICAgICogQGZpcmVzIEFjY29yZGlvbiN1cFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwKCR0YXJnZXQpIHtcbiAgICAgIGlmICgkdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWFjY29yZGlvbl0nKS5pcygnW2Rpc2FibGVkXScpKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnQ2Fubm90IGNhbGwgdXAgb24gYW4gYWNjb3JkaW9uIHRoYXQgaXMgZGlzYWJsZWQuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyICRhdW50cyA9ICR0YXJnZXQucGFyZW50KCkuc2libGluZ3MoKSxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFsbG93QWxsQ2xvc2VkICYmICEkYXVudHMuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpIHx8ICEkdGFyZ2V0LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIGNvbGxhcHNpbmcgdXAuXG4gICAgICAgICAqIEBldmVudCBBY2NvcmRpb24jdXBcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcblxuICAgICAgJHRhcmdldC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArICR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5JykpLmF0dHIoe1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAgICogQGZpcmVzIEFjY29yZGlvbiNkZXN0cm95ZWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuc3RvcCh0cnVlKS5zbGlkZVVwKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnYScpLm9mZignLnpmLmFjY29yZGlvbicpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFjY29yZGlvbjtcbn0oX2ZvdW5kYXRpb24uUGx1Z2luKTtcblxuQWNjb3JkaW9uLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gYW5pbWF0ZSB0aGUgb3BlbmluZyBvZiBhbiBhY2NvcmRpb24gcGFuZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyNTBcbiAgICovXG4gIHNsaWRlU3BlZWQ6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlFeHBhbmQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBjbG9zZSBhbGwgcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBwYW5lIHNwZWNpZmllZCBieSBoYXNoIGFuY2hvclxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBZGp1c3QgdGhlIGRlZXAgbGluayBzY3JvbGwgdG8gbWFrZSBzdXJlIHRoZSB0b3Agb2YgdGhlIGFjY29yZGlvbiBwYW5lbCBpcyB2aXNpYmxlXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWVwTGlua1NtdWRnZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbiB0aW1lIChtcykgZm9yIHRoZSBkZWVwIGxpbmsgYWRqdXN0bWVudFxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDMwMFxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2VEZWxheTogMzAwLFxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGJyb3dzZXIgaGlzdG9yeSB3aXRoIHRoZSBvcGVuIGFjY29yZGlvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdXBkYXRlSGlzdG9yeTogZmFsc2Vcbn07XG5cbmV4cG9ydHMuQWNjb3JkaW9uID0gQWNjb3JkaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dVlXTmpiM0prYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSWtGalkyOXlaR2x2YmlJc0ltVnNaVzFsYm5RaUxDSnZjSFJwYjI1eklpd2lKR1ZzWlcxbGJuUWlMQ0lrSWl3aVpYaDBaVzVrSWl3aVpHVm1ZWFZzZEhNaUxDSmtZWFJoSWl3aVkyeGhjM05PWVcxbElpd2lYMmx1YVhRaUxDSkxaWGxpYjJGeVpDSXNJbkpsWjJsemRHVnlJaXdpWVhSMGNpSXNJaVIwWVdKeklpd2lZMmhwYkdSeVpXNGlMQ0psWVdOb0lpd2lhV1I0SWl3aVpXd2lMQ0lrWld3aUxDSWtZMjl1ZEdWdWRDSXNJbWxrSWl3aWJHbHVhMGxrSWl3aVptbHVaQ0lzSWlScGJtbDBRV04wYVhabElpd2labWx5YzNSVWFXMWxTVzVwZENJc0lteGxibWQwYUNJc0ltUnZkMjRpTENKZlkyaGxZMnRFWldWd1RHbHVheUlzSW1GdVkyaHZjaUlzSW5kcGJtUnZkeUlzSW14dlkyRjBhVzl1SWl3aWFHRnphQ0lzSWlSc2FXNXJJaXdpSkdGdVkyaHZjaUlzSW5CaGNtVnVkQ0lzSW1oaGMwTnNZWE56SWl3aVpHVmxjRXhwYm10VGJYVmtaMlVpTENKZmRHaHBjeUlzSW14dllXUWlMQ0p2Wm1aelpYUWlMQ0poYm1sdFlYUmxJaXdpYzJOeWIyeHNWRzl3SWl3aWRHOXdJaXdpWkdWbGNFeHBibXRUYlhWa1oyVkVaV3hoZVNJc0luUnlhV2RuWlhJaUxDSmtaV1Z3VEdsdWF5SXNJbDlsZG1WdWRITWlMQ0lrWld4bGJTSXNJaVIwWVdKRGIyNTBaVzUwSWl3aWIyWm1JaXdpYjI0aUxDSmxJaXdpY0hKbGRtVnVkRVJsWm1GMWJIUWlMQ0owYjJkbmJHVWlMQ0pvWVc1a2JHVkxaWGtpTENKdVpYaDBJaXdpSkdFaUxDSm1iMk4xY3lJc0ltMTFiSFJwUlhod1lXNWtJaXdpY0hKbGRtbHZkWE1pTENKd2NtVjJJaXdpYUdGdVpHeGxaQ0lzSW5OMGIzQlFjbTl3WVdkaGRHbHZiaUlzSWlSMFlYSm5aWFFpTENKamJHOXpaWE4wSWl3aWFYTWlMQ0pqYjI1emIyeGxJaXdpYVc1bWJ5SXNJblZ3SWl3aWRYQmtZWFJsU0dsemRHOXllU0lzSW1ocGMzUnZjbmtpTENKd2RYTm9VM1JoZEdVaUxDSnlaWEJzWVdObFUzUmhkR1VpTENKbWFYSnpkRlJwYldVaUxDSmhaR1JDWVdOcklpd2lZV1JrUTJ4aGMzTWlMQ0lrWTNWeWNtVnVkRUZqZEdsMlpTSXNJbTV2ZENJc0luTnNhV1JsUkc5M2JpSXNJbk5zYVdSbFUzQmxaV1FpTENJa1lYVnVkSE1pTENKemFXSnNhVzVuY3lJc0ltRnNiRzkzUVd4c1EyeHZjMlZrSWl3aWMyeHBaR1ZWY0NJc0luSmxiVzkyWlVOc1lYTnpJaXdpYzNSdmNDSXNJbU56Y3lJc0lsQnNkV2RwYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3p0QlFVVkJPenM3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPenM3UVVGRlFUczdPenM3TzBsQlRVMUJMRk03T3pzN096czdPenM3T3p0QlFVTktPenM3T3pzN096c3lRa0ZSVDBNc1R5eEZRVUZUUXl4UExFVkJRVk03UVVGRGRrSXNWMEZCUzBNc1VVRkJUQ3hIUVVGblFrWXNUMEZCYUVJN1FVRkRRU3hYUVVGTFF5eFBRVUZNTEVkQlFXVkZMR2xDUVVGRlF5eE5RVUZHTEVOQlFWTXNSVUZCVkN4RlFVRmhUQ3hWUVVGVlRTeFJRVUYyUWl4RlFVRnBReXhMUVVGTFNDeFJRVUZNTEVOQlFXTkpMRWxCUVdRc1JVRkJha01zUlVGQmRVUk1MRTlCUVhaRUxFTkJRV1k3TzBGQlJVRXNWMEZCUzAwc1UwRkJUQ3hIUVVGcFFpeFhRVUZxUWl4RFFVcDFRaXhEUVVsUE8wRkJRemxDTEZkQlFVdERMRXRCUVV3N08wRkJSVUZETEN0Q1FVRlRReXhSUVVGVUxFTkJRV3RDTEZkQlFXeENMRVZCUVN0Q08wRkJRemRDTEdsQ1FVRlRMRkZCUkc5Q08wRkJSVGRDTEdsQ1FVRlRMRkZCUm05Q08wRkJSemRDTEhOQ1FVRmpMRTFCU0dVN1FVRkpOMElzYjBKQlFWazdRVUZLYVVJc1QwRkJMMEk3UVVGTlJEczdRVUZGUkRzN096czdPenMwUWtGSlVUdEJRVUZCT3p0QlFVTk9MRmRCUVV0U0xGRkJRVXdzUTBGQlkxTXNTVUZCWkN4RFFVRnRRaXhOUVVGdVFpeEZRVUV5UWl4VFFVRXpRanRCUVVOQkxGZEJRVXRETEV0QlFVd3NSMEZCWVN4TFFVRkxWaXhSUVVGTUxFTkJRV05YTEZGQlFXUXNRMEZCZFVJc2RVSkJRWFpDTEVOQlFXSTdPMEZCUlVFc1YwRkJTMFFzUzBGQlRDeERRVUZYUlN4SlFVRllMRU5CUVdkQ0xGVkJRVk5ETEVkQlFWUXNSVUZCWTBNc1JVRkJaQ3hGUVVGclFqdEJRVU5vUXl4WlFVRkpReXhOUVVGTkxITkNRVUZGUkN4RlFVRkdMRU5CUVZZN1FVRkJRU3haUVVOSlJTeFhRVUZYUkN4SlFVRkpTaXhSUVVGS0xFTkJRV0VzYjBKQlFXSXNRMEZFWmp0QlFVRkJMRmxCUlVsTkxFdEJRVXRFTEZOQlFWTXNRMEZCVkN4RlFVRlpReXhGUVVGYUxFbEJRV3RDTEd0RFFVRlpMRU5CUVZvc1JVRkJaU3hYUVVGbUxFTkJSak5DTzBGQlFVRXNXVUZIU1VNc1UwRkJVMG9zUjBGQlIwY3NSVUZCU0N4SlFVRlpRU3hGUVVGYUxGZEJTR0k3TzBGQlMwRkdMRmxCUVVsSkxFbEJRVW9zUTBGQlV5eFRRVUZVTEVWQlFXOUNWaXhKUVVGd1FpeERRVUY1UWp0QlFVTjJRaXd5UWtGQmFVSlJMRVZCUkUwN1FVRkZka0lzYTBKQlFWRXNTMEZHWlR0QlFVZDJRaXhuUWtGQlRVTXNUVUZJYVVJN1FVRkpka0lzTWtKQlFXbENMRXRCU2swN1FVRkxka0lzTWtKQlFXbENPMEZCVEUwc1UwRkJla0k3TzBGQlVVRkdMR2xDUVVGVFVDeEpRVUZVTEVOQlFXTXNSVUZCUXl4UlFVRlJMRlZCUVZRc1JVRkJjVUlzYlVKQlFXMUNVeXhOUVVGNFF5eEZRVUZuUkN4bFFVRmxMRWxCUVM5RUxFVkJRWEZGTEUxQlFVMUVMRVZCUVRORkxFVkJRV1E3UVVGRFJDeFBRV1pFTzBGQlowSkJMRlZCUVVsSExHTkJRV01zUzBGQlMzQkNMRkZCUVV3c1EwRkJZMjFDTEVsQlFXUXNRMEZCYlVJc1dVRkJia0lzUlVGQmFVTlNMRkZCUVdwRExFTkJRVEJETEc5Q1FVRXhReXhEUVVGc1FqdEJRVU5CTEZkQlFVdFZMR0ZCUVV3c1IwRkJjVUlzU1VGQmNrSTdRVUZEUVN4VlFVRkhSQ3haUVVGWlJTeE5RVUZtTEVWQlFYTkNPMEZCUTNCQ0xHRkJRVXRETEVsQlFVd3NRMEZCVlVnc1YwRkJWaXhGUVVGMVFpeExRVUZMUXl4aFFVRTFRanRCUVVOQkxHRkJRVXRCTEdGQlFVd3NSMEZCY1VJc1MwRkJja0k3UVVGRFJEczdRVUZGUkN4WFFVRkxSeXhqUVVGTUxFZEJRWE5DTEZsQlFVMDdRVUZETVVJc1dVRkJTVU1zVTBGQlUwTXNUMEZCVDBNc1VVRkJVQ3hEUVVGblFrTXNTVUZCTjBJN1FVRkRRVHRCUVVOQkxGbEJRVWRJTEU5QlFVOUlMRTFCUVZZc1JVRkJhMEk3UVVGRGFFSXNZMEZCU1U4c1VVRkJVU3hQUVVGTE4wSXNVVUZCVEN4RFFVRmpiVUlzU1VGQlpDeERRVUZ0UWl4aFFVRlhUU3hOUVVGWUxFZEJRV3RDTEVsQlFYSkRMRU5CUVZvN1FVRkJRU3hqUVVOQlN5eFZRVUZWTEhOQ1FVRkZUQ3hOUVVGR0xFTkJSRlk3TzBGQlIwRXNZMEZCU1Vrc1RVRkJUVkFzVFVGQlRpeEpRVUZuUWxFc1QwRkJjRUlzUlVGQk5rSTdRVUZETTBJc1owSkJRVWtzUTBGQlEwUXNUVUZCVFVVc1RVRkJUaXhEUVVGaExIVkNRVUZpTEVWQlFYTkRReXhSUVVGMFF5eERRVUVyUXl4WFFVRXZReXhEUVVGTUxFVkJRV3RGTzBGQlEyaEZMSEZDUVVGTFZDeEpRVUZNTEVOQlFWVlBMRTlCUVZZc1JVRkJiVUlzVDBGQlMxUXNZVUZCZUVJN1FVRkRRU3h4UWtGQlMwRXNZVUZCVEN4SFFVRnhRaXhMUVVGeVFqdEJRVU5FT3p0QlFVVkVPMEZCUTBFc1owSkJRVWtzVDBGQlMzUkNMRTlCUVV3c1EwRkJZV3RETEdOQlFXcENMRVZCUVdsRE8wRkJReTlDTEd0Q1FVRkpReXhSUVVGUkxFMUJRVm83UVVGRFFTeHZRMEZCUlZJc1RVRkJSaXhGUVVGVlV5eEpRVUZXTEVOQlFXVXNXVUZCVnp0QlFVTjRRaXh2UWtGQlNVTXNVMEZCVTBZc1RVRkJUV3hETEZGQlFVNHNRMEZCWlc5RExFMUJRV1lzUlVGQllqdEJRVU5CTEhORFFVRkZMRmxCUVVZc1JVRkJaMEpETEU5QlFXaENMRU5CUVhkQ0xFVkJRVVZETEZkQlFWZEdMRTlCUVU5SExFZEJRWEJDTEVWQlFYaENMRVZCUVcxRVRDeE5RVUZOYmtNc1QwRkJUaXhEUVVGamVVTXNiVUpCUVdwRk8wRkJRMFFzWlVGSVJEdEJRVWxFT3p0QlFVVkVPenM3TzBGQlNVRXNiVUpCUVV0NFF5eFJRVUZNTEVOQlFXTjVReXhQUVVGa0xFTkJRWE5DTEhWQ1FVRjBRaXhGUVVFclF5eERRVUZEV2l4TFFVRkVMRVZCUVZGRExFOUJRVklzUTBGQkwwTTdRVUZEUkR0QlFVTkdPMEZCUTBZc1QwRTNRa1E3TzBGQkswSkJPMEZCUTBFc1ZVRkJTU3hMUVVGTEwwSXNUMEZCVEN4RFFVRmhNa01zVVVGQmFrSXNSVUZCTWtJN1FVRkRla0lzWVVGQlMyeENMR05CUVV3N1FVRkRSRHM3UVVGRlJDeFhRVUZMYlVJc1QwRkJURHRCUVVORU96dEJRVVZFT3pzN096czdPemhDUVVsVk8wRkJRMUlzVlVGQlNWUXNVVUZCVVN4SlFVRmFPenRCUVVWQkxGZEJRVXQ0UWl4TFFVRk1MRU5CUVZkRkxFbEJRVmdzUTBGQlowSXNXVUZCVnp0QlFVTjZRaXhaUVVGSlowTXNVVUZCVVN4elFrRkJSU3hKUVVGR0xFTkJRVm83UVVGRFFTeFpRVUZKUXl4alFVRmpSQ3hOUVVGTmFrTXNVVUZCVGl4RFFVRmxMRzlDUVVGbUxFTkJRV3hDTzBGQlEwRXNXVUZCU1d0RExGbEJRVmwyUWl4TlFVRm9RaXhGUVVGM1FqdEJRVU4wUW5OQ0xHZENRVUZOYWtNc1VVRkJUaXhEUVVGbExFZEJRV1lzUlVGQmIwSnRReXhIUVVGd1FpeERRVUYzUWl4NVEwRkJlRUlzUlVGRFVVTXNSVUZFVWl4RFFVTlhMRzlDUVVSWUxFVkJRMmxETEZWQlFWTkRMRU5CUVZRc1JVRkJXVHRCUVVNelEwRXNZMEZCUlVNc1kwRkJSanRCUVVOQlppeHJRa0ZCVFdkQ0xFMUJRVTRzUTBGQllVd3NWMEZCWWp0QlFVTkVMRmRCU2tRc1JVRkpSMFVzUlVGS1NDeERRVWxOTEhOQ1FVcE9MRVZCU1RoQ0xGVkJRVk5ETEVOQlFWUXNSVUZCVnp0QlFVTjJRM3BETEhGRFFVRlRORU1zVTBGQlZDeERRVUZ0UWtnc1EwRkJia0lzUlVGQmMwSXNWMEZCZEVJc1JVRkJiVU03UVVGRGFrTkZMSE5DUVVGUkxHdENRVUZYTzBGQlEycENhRUlzYzBKQlFVMW5RaXhOUVVGT0xFTkJRV0ZNTEZkQlFXSTdRVUZEUkN4bFFVaG5RenRCUVVscVEwOHNiMEpCUVUwc1owSkJRVmM3UVVGRFppeHZRa0ZCU1VNc1MwRkJTMVFzVFVGQlRWRXNTVUZCVGl4SFFVRmhha01zU1VGQllpeERRVUZyUWl4SFFVRnNRaXhGUVVGMVFtMURMRXRCUVhaQ0xFVkJRVlE3UVVGRFFTeHZRa0ZCU1N4RFFVRkRjRUlzVFVGQlRXNURMRTlCUVU0c1EwRkJZM2RFTEZkQlFXNUNMRVZCUVdkRE8wRkJRemxDUml4eFFrRkJSMW9zVDBGQlNDeERRVUZYTEc5Q1FVRllPMEZCUTBRN1FVRkRSaXhsUVZSblF6dEJRVlZxUTJVc2QwSkJRVlVzYjBKQlFWYzdRVUZEYmtJc2IwSkJRVWxJTEV0QlFVdFVMRTFCUVUxaExFbEJRVTRzUjBGQllYUkRMRWxCUVdJc1EwRkJhMElzUjBGQmJFSXNSVUZCZFVKdFF5eExRVUYyUWl4RlFVRlVPMEZCUTBFc2IwSkJRVWtzUTBGQlEzQkNMRTFCUVUxdVF5eFBRVUZPTEVOQlFXTjNSQ3hYUVVGdVFpeEZRVUZuUXp0QlFVTTVRa1lzY1VKQlFVZGFMRTlCUVVnc1EwRkJWeXh2UWtGQldEdEJRVU5FTzBGQlEwWXNaVUZtWjBNN1FVRm5RbXBEYVVJc2RVSkJRVk1zYlVKQlFWYzdRVUZEYkVKV0xHdENRVUZGUXl4alFVRkdPMEZCUTBGRUxHdENRVUZGVnl4bFFVRkdPMEZCUTBRN1FVRnVRbWRETEdGQlFXNURPMEZCY1VKRUxGZEJNVUpFTzBGQk1rSkVPMEZCUTBZc1QwRm9RMFE3UVVGcFEwRXNWVUZCUnl4TFFVRkxOVVFzVDBGQlRDeERRVUZoTWtNc1VVRkJhRUlzUlVGQk1FSTdRVUZEZUVJc09FSkJRVVZvUWl4TlFVRkdMRVZCUVZWeFFpeEZRVUZXTEVOQlFXRXNWVUZCWWl4RlFVRjVRaXhMUVVGTGRrSXNZMEZCT1VJN1FVRkRSRHRCUVVOR096dEJRVVZFT3pzN096czdPenN5UWtGTFQyOURMRThzUlVGQlV6dEJRVU5rTEZWQlFVbEJMRkZCUVZGRExFOUJRVklzUTBGQlowSXNhMEpCUVdoQ0xFVkJRVzlEUXl4RlFVRndReXhEUVVGMVF5eFpRVUYyUXl4RFFVRktMRVZCUVRCRU8wRkJRM2hFUXl4blFrRkJVVU1zU1VGQlVpeERRVUZoTERoRFFVRmlPMEZCUTBFN1FVRkRSRHRCUVVORUxGVkJRVWRLTEZGQlFWRTNRaXhOUVVGU0xFZEJRV2xDUXl4UlFVRnFRaXhEUVVFd1FpeFhRVUV4UWl4RFFVRklMRVZCUVRKRE8wRkJRM3BETEdGQlFVdHBReXhGUVVGTUxFTkJRVkZNTEU5QlFWSTdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRUQ3hoUVVGTGNrTXNTVUZCVEN4RFFVRlZjVU1zVDBGQlZqdEJRVU5FTzBGQlEwUTdRVUZEUVN4VlFVRkpMRXRCUVVzM1JDeFBRVUZNTEVOQlFXRXlReXhSUVVGcVFpeEZRVUV5UWp0QlFVTjZRaXhaUVVGSmFrSXNVMEZCVTIxRExGRkJRVkZJTEVsQlFWSXNRMEZCWVN4SFFVRmlMRVZCUVd0Q2FFUXNTVUZCYkVJc1EwRkJkVUlzVFVGQmRrSXNRMEZCWWpzN1FVRkZRU3haUVVGSkxFdEJRVXRXTEU5QlFVd3NRMEZCWVcxRkxHRkJRV3BDTEVWQlFXZERPMEZCUXpsQ1F5eHJRa0ZCVVVNc1UwRkJVaXhEUVVGclFpeEZRVUZzUWl4RlFVRnpRaXhGUVVGMFFpeEZRVUV3UWpORExFMUJRVEZDTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3d1F5eHJRa0ZCVVVVc1dVRkJVaXhEUVVGeFFpeEZRVUZ5UWl4RlFVRjVRaXhGUVVGNlFpeEZRVUUyUWpWRExFMUJRVGRDTzBGQlEwUTdRVUZEUmp0QlFVTkdPenRCUVVWRU96czdPenM3T3pzN08zbENRVTlMYlVNc1R5eEZRVUZUVlN4VExFVkJRVmM3UVVGQlFUczdRVUZEZGtJN096czdRVUZKUVN4VlFVRkpWaXhSUVVGUlF5eFBRVUZTTEVOQlFXZENMR3RDUVVGb1FpeEZRVUZ2UTBNc1JVRkJjRU1zUTBGQmRVTXNXVUZCZGtNc1MwRkJkMFFzUTBGQlExRXNVMEZCTjBRc1JVRkJlVVU3UVVGRGRrVlFMR2RDUVVGUlF5eEpRVUZTTEVOQlFXRXNiMFJCUVdJN1FVRkRRVHRCUVVORU8wRkJRMFJLTEdOQlEwZHVSQ3hKUVVSSUxFTkJRMUVzWVVGRVVpeEZRVU4xUWl4TFFVUjJRaXhGUVVWSGMwSXNUVUZHU0N4RFFVVlZMRzlDUVVaV0xFVkJSMGQzUXl4UFFVaElMRWRCU1VkNFF5eE5RVXBJTEVkQlNWbDVReXhSUVVwYUxFTkJTWEZDTEZkQlNuSkNPenRCUVUxQkxGVkJRVWtzUTBGQlF5eExRVUZMZWtVc1QwRkJUQ3hEUVVGaGQwUXNWMEZCWkN4SlFVRTJRaXhEUVVGRFpTeFRRVUZzUXl4RlFVRTJRenRCUVVNelF5eFpRVUZKUnl4cFFrRkJhVUlzUzBGQlMzcEZMRkZCUVV3c1EwRkJZMWNzVVVGQlpDeERRVUYxUWl4WlFVRjJRaXhGUVVGeFEwRXNVVUZCY2tNc1EwRkJPRU1zYjBKQlFUbERMRU5CUVhKQ08wRkJRMEVzV1VGQlNUaEVMR1ZCUVdWdVJDeE5RVUZ1UWl4RlFVRXlRanRCUVVONlFpeGxRVUZMTWtNc1JVRkJUQ3hEUVVGUlVTeGxRVUZsUXl4SFFVRm1MRU5CUVcxQ1pDeFBRVUZ1UWl4RFFVRlNPMEZCUTBRN1FVRkRSanM3UVVGRlJFRXNZMEZCVVdVc1UwRkJVaXhEUVVGclFpeExRVUZMTlVVc1QwRkJUQ3hEUVVGaE5rVXNWVUZCTDBJc1JVRkJNa01zV1VGQlRUdEJRVU12UXpzN096dEJRVWxCTEdWQlFVczFSU3hSUVVGTUxFTkJRV041UXl4UFFVRmtMRU5CUVhOQ0xHMUNRVUYwUWl4RlFVRXlReXhEUVVGRGJVSXNUMEZCUkN4RFFVRXpRenRCUVVORUxFOUJUa1E3TzBGQlVVRXNhME5CUVUxQkxGRkJRVkZ1UkN4SlFVRlNMRU5CUVdFc2FVSkJRV0lzUTBGQlRpeEZRVUY1UTBFc1NVRkJla01zUTBGQk9FTTdRVUZETlVNc2VVSkJRV2xDTEVsQlJESkNPMEZCUlRWRExIbENRVUZwUWp0QlFVWXlRaXhQUVVFNVF6dEJRVWxFT3p0QlFVVkVPenM3T3pzN096czdkVUpCVFVkdFJDeFBMRVZCUVZNN1FVRkRWaXhWUVVGSlFTeFJRVUZSUXl4UFFVRlNMRU5CUVdkQ0xHdENRVUZvUWl4RlFVRnZRME1zUlVGQmNFTXNRMEZCZFVNc1dVRkJka01zUTBGQlNpeEZRVUV3UkR0QlFVTjRSRU1zWjBKQlFWRkRMRWxCUVZJc1EwRkJZU3hyUkVGQllqdEJRVU5CTzBGQlEwUTdPMEZCUlVRc1ZVRkJTV0VzVTBGQlUycENMRkZCUVZFM1FpeE5RVUZTTEVkQlFXbENLME1zVVVGQmFrSXNSVUZCWWp0QlFVRkJMRlZCUTBrMVF5eFJRVUZSTEVsQlJGbzdPMEZCUjBFc1ZVRkJTU3hEUVVGRExFdEJRVXR1UXl4UFFVRk1MRU5CUVdGblJpeGpRVUZrTEVsQlFXZERMRU5CUVVOR0xFOUJRVTgzUXl4UlFVRlFMRU5CUVdkQ0xGZEJRV2hDTEVOQlFXeERMRWxCUVcxRkxFTkJRVU0wUWl4UlFVRlJOMElzVFVGQlVpeEhRVUZwUWtNc1VVRkJha0lzUTBGQk1FSXNWMEZCTVVJc1EwRkJka1VzUlVGQkswYzdRVUZETjBjN1FVRkRSRHM3UVVGRlJEUkNMR05CUVZGdlFpeFBRVUZTTEVOQlFXZENPVU1zVFVGQlRXNURMRTlCUVU0c1EwRkJZelpGTEZWQlFUbENMRVZCUVRCRExGbEJRVms3UVVGRGNFUTdPenM3UVVGSlFURkRMR05CUVUxc1F5eFJRVUZPTEVOQlFXVjVReXhQUVVGbUxFTkJRWFZDTEdsQ1FVRjJRaXhGUVVFd1F5eERRVUZEYlVJc1QwRkJSQ3hEUVVFeFF6dEJRVU5FTEU5QlRrUTdPMEZCVVVGQkxHTkJRVkZ1UkN4SlFVRlNMRU5CUVdFc1lVRkJZaXhGUVVFMFFpeEpRVUUxUWl4RlFVTlJjMElzVFVGRVVpeEhRVU5wUW10RUxGZEJSR3BDTEVOQlF6WkNMRmRCUkRkQ096dEJRVWRCTEd0RFFVRk5ja0lzVVVGQlVXNUVMRWxCUVZJc1EwRkJZU3hwUWtGQllpeERRVUZPTEVWQlFYbERRU3hKUVVGNlF5eERRVUU0UXp0QlFVTTNReXg1UWtGQmFVSXNTMEZFTkVJN1FVRkZOME1zZVVKQlFXbENPMEZCUmpSQ0xFOUJRVGxETzBGQlNVUTdPMEZCUlVRN096czdPenM3T3l0Q1FVdFhPMEZCUTFRc1YwRkJTMVFzVVVGQlRDeERRVUZqYlVJc1NVRkJaQ3hEUVVGdFFpeHZRa0ZCYmtJc1JVRkJlVU1yUkN4SlFVRjZReXhEUVVFNFF5eEpRVUU1UXl4RlFVRnZSRVlzVDBGQmNFUXNRMEZCTkVRc1EwRkJOVVFzUlVGQkswUkhMRWRCUVM5RUxFTkJRVzFGTEZOQlFXNUZMRVZCUVRoRkxFVkJRVGxGTzBGQlEwRXNWMEZCUzI1R0xGRkJRVXdzUTBGQlkyMUNMRWxCUVdRc1EwRkJiVUlzUjBGQmJrSXNSVUZCZDBJeVFpeEhRVUY0UWl4RFFVRTBRaXhsUVVFMVFqdEJRVU5CTEZWQlFVY3NTMEZCU3k5RExFOUJRVXdzUTBGQllUSkRMRkZCUVdoQ0xFVkJRVEJDTzBGQlEzaENMRGhDUVVGRmFFSXNUVUZCUml4RlFVRlZiMElzUjBGQlZpeERRVUZqTEZWQlFXUXNSVUZCTUVJc1MwRkJTM1JDTEdOQlFTOUNPMEZCUTBRN1FVRkZSanM3T3p0RlFXcFJjVUkwUkN4clFqczdRVUZ2VVhoQ2RrWXNWVUZCVlUwc1VVRkJWaXhIUVVGeFFqdEJRVU51UWpzN096czdPMEZCVFVGNVJTeGpRVUZaTEVkQlVFODdRVUZSYmtJN096czdPenRCUVUxQmNrSXNaVUZCWVN4TFFXUk5PMEZCWlc1Q096czdPenM3UVVGTlFYZENMR3RDUVVGblFpeExRWEpDUnp0QlFYTkNia0k3T3pzN096dEJRVTFCY2tNc1dVRkJWU3hMUVRWQ1V6czdRVUU0UW01Q096czdPenM3UVVGTlFWUXNhMEpCUVdkQ0xFdEJjRU5IT3p0QlFYTkRia0k3T3pzN096dEJRVTFCVHl4MVFrRkJjVUlzUjBFMVEwWTdPMEZCT0VOdVFqczdPenM3TzBGQlRVRXdRaXhwUWtGQlpUdEJRWEJFU1N4RFFVRnlRanM3VVVGMVJGRnlSU3hUTEVkQlFVRkJMRk1pTENKbWFXeGxJam9pWm05MWJtUmhkR2x2Ymk1aFkyTnZjbVJwYjI0dWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNibWx0Y0c5eWRDQWtJR1p5YjIwZ0oycHhkV1Z5ZVNjN1hHNXBiWEJ2Y25RZ2V5QkxaWGxpYjJGeVpDQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtdGxlV0p2WVhKa0p6dGNibWx0Y0c5eWRDQjdJRWRsZEZsdlJHbG5hWFJ6SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1WTI5eVpTYzdYRzVwYlhCdmNuUWdleUJRYkhWbmFXNGdmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1Y0d4MVoybHVKenRjYmx4dUx5b3FYRzRnS2lCQlkyTnZjbVJwYjI0Z2JXOWtkV3hsTGx4dUlDb2dRRzF2WkhWc1pTQm1iM1Z1WkdGMGFXOXVMbUZqWTI5eVpHbHZibHh1SUNvZ1FISmxjWFZwY21WeklHWnZkVzVrWVhScGIyNHVkWFJwYkM1clpYbGliMkZ5WkZ4dUlDb3ZYRzVjYm1Oc1lYTnpJRUZqWTI5eVpHbHZiaUJsZUhSbGJtUnpJRkJzZFdkcGJpQjdYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJR2x1YzNSaGJtTmxJRzltSUdGdUlHRmpZMjl5WkdsdmJpNWNiaUFnSUNvZ1FHTnNZWE56WEc0Z0lDQXFJRUJ1WVcxbElFRmpZMjl5WkdsdmJseHVJQ0FnS2lCQVptbHlaWE1nUVdOamIzSmthVzl1STJsdWFYUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0cVVYVmxjbmw5SUdWc1pXMWxiblFnTFNCcVVYVmxjbmtnYjJKcVpXTjBJSFJ2SUcxaGEyVWdhVzUwYnlCaGJpQmhZMk52Y21ScGIyNHVYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmNIUnBiMjV6SUMwZ1lTQndiR0ZwYmlCdlltcGxZM1FnZDJsMGFDQnpaWFIwYVc1bmN5QjBieUJ2ZG1WeWNtbGtaU0IwYUdVZ1pHVm1ZWFZzZENCdmNIUnBiMjV6TGx4dUlDQWdLaTljYmlBZ1gzTmxkSFZ3S0dWc1pXMWxiblFzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MElEMGdaV3hsYldWdWREdGNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTWdQU0FrTG1WNGRHVnVaQ2g3ZlN3Z1FXTmpiM0prYVc5dUxtUmxabUYxYkhSekxDQjBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9LU3dnYjNCMGFXOXVjeWs3WEc1Y2JpQWdJQ0IwYUdsekxtTnNZWE56VG1GdFpTQTlJQ2RCWTJOdmNtUnBiMjRuT3lBdkx5QnBaVGtnWW1GamF5QmpiMjF3WVhSY2JpQWdJQ0IwYUdsekxsOXBibWwwS0NrN1hHNWNiaUFnSUNCTFpYbGliMkZ5WkM1eVpXZHBjM1JsY2lnblFXTmpiM0prYVc5dUp5d2dlMXh1SUNBZ0lDQWdKMFZPVkVWU0p6b2dKM1J2WjJkc1pTY3NYRzRnSUNBZ0lDQW5VMUJCUTBVbk9pQW5kRzluWjJ4bEp5eGNiaUFnSUNBZ0lDZEJVbEpQVjE5RVQxZE9Kem9nSjI1bGVIUW5MRnh1SUNBZ0lDQWdKMEZTVWs5WFgxVlFKem9nSjNCeVpYWnBiM1Z6SjF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCaFkyTnZjbVJwYjI0Z1lua2dZVzVwYldGMGFXNW5JSFJvWlNCd2NtVnpaWFFnWVdOMGFYWmxJSEJoYm1Vb2N5a3VYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZhVzVwZENncElIdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb0ozSnZiR1VuTENBbmRHRmliR2x6ZENjcE8xeHVJQ0FnSUhSb2FYTXVKSFJoWW5NZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1Ob2FXeGtjbVZ1S0NkYlpHRjBZUzFoWTJOdmNtUnBiMjR0YVhSbGJWMG5LVHRjYmx4dUlDQWdJSFJvYVhNdUpIUmhZbk11WldGamFDaG1kVzVqZEdsdmJpaHBaSGdzSUdWc0tTQjdYRzRnSUNBZ0lDQjJZWElnSkdWc0lEMGdKQ2hsYkNrc1hHNGdJQ0FnSUNBZ0lDQWdKR052Ym5SbGJuUWdQU0FrWld3dVkyaHBiR1J5Wlc0b0oxdGtZWFJoTFhSaFlpMWpiMjUwWlc1MFhTY3BMRnh1SUNBZ0lDQWdJQ0FnSUdsa0lEMGdKR052Ym5SbGJuUmJNRjB1YVdRZ2ZId2dSMlYwV1c5RWFXZHBkSE1vTml3Z0oyRmpZMjl5WkdsdmJpY3BMRnh1SUNBZ0lDQWdJQ0FnSUd4cGJtdEpaQ0E5SUdWc0xtbGtJSHg4SUdBa2UybGtmUzFzWVdKbGJHQTdYRzVjYmlBZ0lDQWdJQ1JsYkM1bWFXNWtLQ2RoT21acGNuTjBKeWt1WVhSMGNpaDdYRzRnSUNBZ0lDQWdJQ2RoY21saExXTnZiblJ5YjJ4ekp6b2dhV1FzWEc0Z0lDQWdJQ0FnSUNkeWIyeGxKem9nSjNSaFlpY3NYRzRnSUNBZ0lDQWdJQ2RwWkNjNklHeHBibXRKWkN4Y2JpQWdJQ0FnSUNBZ0oyRnlhV0V0Wlhod1lXNWtaV1FuT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSjJGeWFXRXRjMlZzWldOMFpXUW5PaUJtWVd4elpWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ1JqYjI1MFpXNTBMbUYwZEhJb2V5ZHliMnhsSnpvZ0ozUmhZbkJoYm1Wc0p5d2dKMkZ5YVdFdGJHRmlaV3hzWldSaWVTYzZJR3hwYm10SlpDd2dKMkZ5YVdFdGFHbGtaR1Z1SnpvZ2RISjFaU3dnSjJsa0p6b2dhV1I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0IyWVhJZ0pHbHVhWFJCWTNScGRtVWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvSnk1cGN5MWhZM1JwZG1VbktTNWphR2xzWkhKbGJpZ25XMlJoZEdFdGRHRmlMV052Ym5SbGJuUmRKeWs3WEc0Z0lDQWdkR2hwY3k1bWFYSnpkRlJwYldWSmJtbDBJRDBnZEhKMVpUdGNiaUFnSUNCcFppZ2thVzVwZEVGamRHbDJaUzVzWlc1bmRHZ3BlMXh1SUNBZ0lDQWdkR2hwY3k1a2IzZHVLQ1JwYm1sMFFXTjBhWFpsTENCMGFHbHpMbVpwY25OMFZHbHRaVWx1YVhRcE8xeHVJQ0FnSUNBZ2RHaHBjeTVtYVhKemRGUnBiV1ZKYm1sMElEMGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZZMmhsWTJ0RVpXVndUR2x1YXlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhaaGNpQmhibU5vYjNJZ1BTQjNhVzVrYjNjdWJHOWpZWFJwYjI0dWFHRnphRHRjYmlBZ0lDQWdJQzh2Ym1WbFpDQmhJR2hoYzJnZ1lXNWtJR0VnY21Wc1pYWmhiblFnWVc1amFHOXlJR2x1SUhSb2FYTWdkR0ZpYzJWMFhHNGdJQ0FnSUNCcFppaGhibU5vYjNJdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUFrYkdsdWF5QTlJSFJvYVhNdUpHVnNaVzFsYm5RdVptbHVaQ2duVzJoeVpXWWtQVndpSnl0aGJtTm9iM0lySjF3aVhTY3BMRnh1SUNBZ0lDQWdJQ0FrWVc1amFHOXlJRDBnSkNoaGJtTm9iM0lwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2drYkdsdWF5NXNaVzVuZEdnZ0ppWWdKR0Z1WTJodmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hKR3hwYm1zdWNHRnlaVzUwS0NkYlpHRjBZUzFoWTJOdmNtUnBiMjR0YVhSbGJWMG5LUzVvWVhORGJHRnpjeWduYVhNdFlXTjBhWFpsSnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaRzkzYmlna1lXNWphRzl5TENCMGFHbHpMbVpwY25OMFZHbHRaVWx1YVhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1hWEp6ZEZScGJXVkpibWwwSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dmNtOXNiQ0IxY0NCaElHeHBkSFJzWlNCMGJ5QnphRzkzSUhSb1pTQjBhWFJzWlhOY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtUmxaWEJNYVc1clUyMTFaR2RsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pDaDNhVzVrYjNjcExteHZZV1FvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnZabVp6WlhRZ1BTQmZkR2hwY3k0a1pXeGxiV1Z1ZEM1dlptWnpaWFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbmFIUnRiQ3dnWW05a2VTY3BMbUZ1YVcxaGRHVW9leUJ6WTNKdmJHeFViM0E2SUc5bVpuTmxkQzUwYjNBZ2ZTd2dYM1JvYVhNdWIzQjBhVzl1Y3k1a1pXVndUR2x1YTFOdGRXUm5aVVJsYkdGNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tpQkdhWEpsY3lCM2FHVnVJSFJvWlNCNmNHeDFaMmx1SUdoaGN5QmtaV1Z3YkdsdWEyVmtJR0YwSUhCaFoyVnNiMkZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXFJRUJsZG1WdWRDQkJZMk52Y21ScGIyNGpaR1ZsY0d4cGJtdGNiaUFnSUNBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1MGNtbG5aMlZ5S0Nka1pXVndiR2x1YXk1NlppNWhZMk52Y21ScGIyNG5MQ0JiSkd4cGJtc3NJQ1JoYm1Ob2IzSmRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2ZFhObElHSnliM2R6WlhJZ2RHOGdiM0JsYmlCaElIUmhZaXdnYVdZZ2FYUWdaWGhwYzNSeklHbHVJSFJvYVhNZ2RHRmljMlYwWEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWtaV1Z3VEdsdWF5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlkyaGxZMnRFWldWd1RHbHVheWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdVgyVjJaVzUwY3lncE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ1pYWmxiblFnYUdGdVpHeGxjbk1nWm05eUlHbDBaVzF6SUhkcGRHaHBiaUIwYUdVZ1lXTmpiM0prYVc5dUxseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gyVjJaVzUwY3lncElIdGNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnZEdocGN5NGtkR0ZpY3k1bFlXTm9LR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlDUmxiR1Z0SUQwZ0pDaDBhR2x6S1R0Y2JpQWdJQ0FnSUhaaGNpQWtkR0ZpUTI5dWRHVnVkQ0E5SUNSbGJHVnRMbU5vYVd4a2NtVnVLQ2RiWkdGMFlTMTBZV0l0WTI5dWRHVnVkRjBuS1R0Y2JpQWdJQ0FnSUdsbUlDZ2tkR0ZpUTI5dWRHVnVkQzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSkdWc1pXMHVZMmhwYkdSeVpXNG9KMkVuS1M1dlptWW9KMk5zYVdOckxucG1MbUZqWTI5eVpHbHZiaUJyWlhsa2IzZHVMbnBtTG1GalkyOXlaR2x2YmljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWIyNG9KMk5zYVdOckxucG1MbUZqWTI5eVpHbHZiaWNzSUdaMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11ZEc5bloyeGxLQ1IwWVdKRGIyNTBaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZTa3ViMjRvSjJ0bGVXUnZkMjR1ZW1ZdVlXTmpiM0prYVc5dUp5d2dablZ1WTNScGIyNG9aU2w3WEc0Z0lDQWdJQ0FnSUNBZ1MyVjVZbTloY21RdWFHRnVaR3hsUzJWNUtHVXNJQ2RCWTJOdmNtUnBiMjRuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjJkbmJHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NTBiMmRuYkdVb0pIUmhZa052Ym5SbGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGVIUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ0pHRWdQU0FrWld4bGJTNXVaWGgwS0NrdVptbHVaQ2duWVNjcExtWnZZM1Z6S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYM1JvYVhNdWIzQjBhVzl1Y3k1dGRXeDBhVVY0Y0dGdVpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JoTG5SeWFXZG5aWElvSjJOc2FXTnJMbnBtTG1GalkyOXlaR2x2YmljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbVYyYVc5MWN6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lBa1lTQTlJQ1JsYkdWdExuQnlaWFlvS1M1bWFXNWtLQ2RoSnlrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmZkR2hwY3k1dmNIUnBiMjV6TG0xMWJIUnBSWGh3WVc1a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR0V1ZEhKcFoyZGxjaWduWTJ4cFkyc3VlbVl1WVdOamIzSmthVzl1SnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWldRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVXVjM1J2Y0ZCeWIzQmhaMkYwYVc5dUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0FnSUdsbUtIUm9hWE11YjNCMGFXOXVjeTVrWldWd1RHbHVheWtnZTF4dUlDQWdJQ0FnSkNoM2FXNWtiM2NwTG05dUtDZHdiM0J6ZEdGMFpTY3NJSFJvYVhNdVgyTm9aV05yUkdWbGNFeHBibXNwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWIyZG5iR1Z6SUhSb1pTQnpaV3hsWTNSbFpDQmpiMjUwWlc1MElIQmhibVVuY3lCdmNHVnVMMk5zYjNObElITjBZWFJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMnBSZFdWeWVYMGdKSFJoY21kbGRDQXRJR3BSZFdWeWVTQnZZbXBsWTNRZ2IyWWdkR2hsSUhCaGJtVWdkRzhnZEc5bloyeGxJQ2hnTG1GalkyOXlaR2x2YmkxamIyNTBaVzUwWUNrdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaTljYmlBZ2RHOW5aMnhsS0NSMFlYSm5aWFFwSUh0Y2JpQWdJQ0JwWmlBb0pIUmhjbWRsZEM1amJHOXpaWE4wS0NkYlpHRjBZUzFoWTJOdmNtUnBiMjVkSnlrdWFYTW9KMXRrYVhOaFlteGxaRjBuS1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2REWVc1dWIzUWdkRzluWjJ4bElHRnVJR0ZqWTI5eVpHbHZiaUIwYUdGMElHbHpJR1JwYzJGaWJHVmtMaWNwTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCcFppZ2tkR0Z5WjJWMExuQmhjbVZ1ZENncExtaGhjME5zWVhOektDZHBjeTFoWTNScGRtVW5LU2tnZTF4dUlDQWdJQ0FnZEdocGN5NTFjQ2drZEdGeVoyVjBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVrYjNkdUtDUjBZWEpuWlhRcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2TDJWcGRHaGxjaUJ5WlhCc1lXTmxJRzl5SUhWd1pHRjBaU0JpY205M2MyVnlJR2hwYzNSdmNubGNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1SbFpYQk1hVzVyS1NCN1hHNGdJQ0FnSUNCMllYSWdZVzVqYUc5eUlEMGdKSFJoY21kbGRDNXdjbVYyS0NkaEp5a3VZWFIwY2lnbmFISmxaaWNwTzF4dVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG5Wd1pHRjBaVWhwYzNSdmNua3BJSHRjYmlBZ0lDQWdJQ0FnYUdsemRHOXllUzV3ZFhOb1UzUmhkR1VvZTMwc0lDY25MQ0JoYm1Ob2IzSXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdhR2x6ZEc5eWVTNXlaWEJzWVdObFUzUmhkR1VvZTMwc0lDY25MQ0JoYm1Ob2IzSXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJQY0dWdWN5QjBhR1VnWVdOamIzSmthVzl1SUhSaFlpQmtaV1pwYm1Wa0lHSjVJR0FrZEdGeVoyVjBZQzVjYmlBZ0lDb2dRSEJoY21GdElIdHFVWFZsY25sOUlDUjBZWEpuWlhRZ0xTQkJZMk52Y21ScGIyNGdjR0Z1WlNCMGJ5QnZjR1Z1SUNoZ0xtRmpZMjl5WkdsdmJpMWpiMjUwWlc1MFlDa3VYRzRnSUNBcUlFQndZWEpoYlNCN1FtOXZiR1ZoYm4wZ1ptbHljM1JVYVcxbElDMGdabXhoWnlCMGJ5QmtaWFJsY20xcGJtVWdhV1lnY21WbWJHOTNJSE5vYjNWc1pDQm9ZWEJ3Wlc0dVhHNGdJQ0FxSUVCbWFYSmxjeUJCWTJOdmNtUnBiMjRqWkc5M2JseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ292WEc0Z0lHUnZkMjRvSkhSaGNtZGxkQ3dnWm1seWMzUlVhVzFsS1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1kyaGxZMnRwYm1jZ1ptbHljM1JVYVcxbElHRnNiRzkzY3lCbWIzSWdhVzVwZEdsaGJDQnlaVzVrWlhJZ2IyWWdkR2hsSUdGalkyOXlaR2x2Ymx4dUlDQWdJQ0FxSUhSdklISmxibVJsY2lCd2NtVnpaWFFnYVhNdFlXTjBhWFpsSUhCaGJtVnpMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHbG1JQ2drZEdGeVoyVjBMbU5zYjNObGMzUW9KMXRrWVhSaExXRmpZMjl5WkdsdmJsMG5LUzVwY3lnblcyUnBjMkZpYkdWa1hTY3BJQ1ltSUNGbWFYSnpkRlJwYldVcElDQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjBOaGJtNXZkQ0JqWVd4c0lHUnZkMjRnYjI0Z1lXNGdZV05qYjNKa2FXOXVJSFJvWVhRZ2FYTWdaR2x6WVdKc1pXUXVKeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUNSMFlYSm5aWFJjYmlBZ0lDQWdJQzVoZEhSeUtDZGhjbWxoTFdocFpHUmxiaWNzSUdaaGJITmxLVnh1SUNBZ0lDQWdMbkJoY21WdWRDZ25XMlJoZEdFdGRHRmlMV052Ym5SbGJuUmRKeWxjYmlBZ0lDQWdJQzVoWkdSQ1lXTnJLQ2xjYmlBZ0lDQWdJQzV3WVhKbGJuUW9LUzVoWkdSRGJHRnpjeWduYVhNdFlXTjBhWFpsSnlrN1hHNWNiaUFnSUNCcFppQW9JWFJvYVhNdWIzQjBhVzl1Y3k1dGRXeDBhVVY0Y0dGdVpDQW1KaUFoWm1seWMzUlVhVzFsS1NCN1hHNGdJQ0FnSUNCMllYSWdKR04xY25KbGJuUkJZM1JwZG1VZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1Ob2FXeGtjbVZ1S0NjdWFYTXRZV04wYVhabEp5a3VZMmhwYkdSeVpXNG9KMXRrWVhSaExYUmhZaTFqYjI1MFpXNTBYU2NwTzF4dUlDQWdJQ0FnYVdZZ0tDUmpkWEp5Wlc1MFFXTjBhWFpsTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ3S0NSamRYSnlaVzUwUVdOMGFYWmxMbTV2ZENna2RHRnlaMlYwS1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnSkhSaGNtZGxkQzV6Ykdsa1pVUnZkMjRvZEdocGN5NXZjSFJwYjI1ekxuTnNhV1JsVTNCbFpXUXNJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdkR0ZpSUdseklHUnZibVVnYjNCbGJtbHVaeTVjYmlBZ0lDQWdJQ0FxSUVCbGRtVnVkQ0JCWTJOdmNtUnBiMjRqWkc5M2JseHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjJSdmQyNHVlbVl1WVdOamIzSmthVzl1Snl3Z1d5UjBZWEpuWlhSZEtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDUW9ZQ01rZXlSMFlYSm5aWFF1WVhSMGNpZ25ZWEpwWVMxc1lXSmxiR3hsWkdKNUp5bDlZQ2t1WVhSMGNpaDdYRzRnSUNBZ0lDQW5ZWEpwWVMxbGVIQmhibVJsWkNjNklIUnlkV1VzWEc0Z0lDQWdJQ0FuWVhKcFlTMXpaV3hsWTNSbFpDYzZJSFJ5ZFdWY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiRzl6WlhNZ2RHaGxJSFJoWWlCa1pXWnBibVZrSUdKNUlHQWtkR0Z5WjJWMFlDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0cVVYVmxjbmw5SUNSMFlYSm5aWFFnTFNCQlkyTnZjbVJwYjI0Z2RHRmlJSFJ2SUdOc2IzTmxJQ2hnTG1GalkyOXlaR2x2YmkxamIyNTBaVzUwWUNrdVhHNGdJQ0FxSUVCbWFYSmxjeUJCWTJOdmNtUnBiMjRqZFhCY2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFMMXh1SUNCMWNDZ2tkR0Z5WjJWMEtTQjdYRzRnSUNBZ2FXWWdLQ1IwWVhKblpYUXVZMnh2YzJWemRDZ25XMlJoZEdFdFlXTmpiM0prYVc5dVhTY3BMbWx6S0NkYlpHbHpZV0pzWldSZEp5a3BJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblEyRnVibTkwSUdOaGJHd2dkWEFnYjI0Z1lXNGdZV05qYjNKa2FXOXVJSFJvWVhRZ2FYTWdaR2x6WVdKc1pXUXVKeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJQ1JoZFc1MGN5QTlJQ1IwWVhKblpYUXVjR0Z5Wlc1MEtDa3VjMmxpYkdsdVozTW9LU3hjYmlBZ0lDQWdJQ0FnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2FXWW9LQ0YwYUdsekxtOXdkR2x2Ym5NdVlXeHNiM2RCYkd4RGJHOXpaV1FnSmlZZ0lTUmhkVzUwY3k1b1lYTkRiR0Z6Y3lnbmFYTXRZV04wYVhabEp5a3BJSHg4SUNFa2RHRnlaMlYwTG5CaGNtVnVkQ2dwTG1oaGMwTnNZWE56S0NkcGN5MWhZM1JwZG1VbktTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUNSMFlYSm5aWFF1YzJ4cFpHVlZjQ2hmZEdocGN5NXZjSFJwYjI1ekxuTnNhV1JsVTNCbFpXUXNJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDb2dSbWx5WlhNZ2QyaGxiaUIwYUdVZ2RHRmlJR2x6SUdSdmJtVWdZMjlzYkdGd2MybHVaeUIxY0M1Y2JpQWdJQ0FnSUNBcUlFQmxkbVZ1ZENCQlkyTnZjbVJwYjI0amRYQmNiaUFnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdYM1JvYVhNdUpHVnNaVzFsYm5RdWRISnBaMmRsY2lnbmRYQXVlbVl1WVdOamIzSmthVzl1Snl3Z1d5UjBZWEpuWlhSZEtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDUjBZWEpuWlhRdVlYUjBjaWduWVhKcFlTMW9hV1JrWlc0bkxDQjBjblZsS1Z4dUlDQWdJQ0FnSUNBZ0lDQXVjR0Z5Wlc1MEtDa3VjbVZ0YjNabFEyeGhjM01vSjJsekxXRmpkR2wyWlNjcE8xeHVYRzRnSUNBZ0pDaGdJeVI3SkhSaGNtZGxkQzVoZEhSeUtDZGhjbWxoTFd4aFltVnNiR1ZrWW5rbktYMWdLUzVoZEhSeUtIdGNiaUFnSUNBZ0oyRnlhV0V0Wlhod1lXNWtaV1FuT2lCbVlXeHpaU3hjYmlBZ0lDQWdKMkZ5YVdFdGMyVnNaV04wWldRbk9pQm1ZV3h6WlZ4dUlDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVnpkSEp2ZVhNZ1lXNGdhVzV6ZEdGdVkyVWdiMllnWVc0Z1lXTmpiM0prYVc5dUxseHVJQ0FnS2lCQVptbHlaWE1nUVdOamIzSmthVzl1STJSbGMzUnliM2xsWkZ4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb3ZYRzRnSUY5a1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNnblcyUmhkR0V0ZEdGaUxXTnZiblJsYm5SZEp5a3VjM1J2Y0NoMGNuVmxLUzV6Ykdsa1pWVndLREFwTG1OemN5Z25aR2x6Y0d4aGVTY3NJQ2NuS1R0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvSjJFbktTNXZabVlvSnk1NlppNWhZMk52Y21ScGIyNG5LVHRjYmlBZ0lDQnBaaWgwYUdsekxtOXdkR2x2Ym5NdVpHVmxjRXhwYm1zcElIdGNiaUFnSUNBZ0lDUW9kMmx1Wkc5M0tTNXZabVlvSjNCdmNITjBZWFJsSnl3Z2RHaHBjeTVmWTJobFkydEVaV1Z3VEdsdWF5azdYRzRnSUNBZ2ZWeHVYRzRnSUgxY2JuMWNibHh1UVdOamIzSmthVzl1TG1SbFptRjFiSFJ6SUQwZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nUVcxdmRXNTBJRzltSUhScGJXVWdkRzhnWVc1cGJXRjBaU0IwYUdVZ2IzQmxibWx1WnlCdlppQmhiaUJoWTJOdmNtUnBiMjRnY0dGdVpTNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBeU5UQmNiaUFnSUNvdlhHNGdJSE5zYVdSbFUzQmxaV1E2SURJMU1DeGNiaUFnTHlvcVhHNGdJQ0FxSUVGc2JHOTNJSFJvWlNCaFkyTnZjbVJwYjI0Z2RHOGdhR0YyWlNCdGRXeDBhWEJzWlNCdmNHVnVJSEJoYm1WekxseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCbVlXeHpaVnh1SUNBZ0tpOWNiaUFnYlhWc2RHbEZlSEJoYm1RNklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNjZ2RHaGxJR0ZqWTI5eVpHbHZiaUIwYnlCamJHOXpaU0JoYkd3Z2NHRnVaWE11WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQmhiR3h2ZDBGc2JFTnNiM05sWkRvZ1ptRnNjMlVzWEc0Z0lDOHFLbHh1SUNBZ0tpQkJiR3h2ZDNNZ2RHaGxJSGRwYm1SdmR5QjBieUJ6WTNKdmJHd2dkRzhnWTI5dWRHVnVkQ0J2WmlCd1lXNWxJSE53WldOcFptbGxaQ0JpZVNCb1lYTm9JR0Z1WTJodmNseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCbVlXeHpaVnh1SUNBZ0tpOWNiaUFnWkdWbGNFeHBibXM2SUdaaGJITmxMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR3AxYzNRZ2RHaGxJR1JsWlhBZ2JHbHVheUJ6WTNKdmJHd2dkRzhnYldGclpTQnpkWEpsSUhSb1pTQjBiM0FnYjJZZ2RHaGxJR0ZqWTI5eVpHbHZiaUJ3WVc1bGJDQnBjeUIyYVhOcFlteGxYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCa1pXVndUR2x1YTFOdGRXUm5aVG9nWm1Gc2MyVXNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRnVhVzFoZEdsdmJpQjBhVzFsSUNodGN5a2dabTl5SUhSb1pTQmtaV1Z3SUd4cGJtc2dZV1JxZFhOMGJXVnVkRnh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYRzRnSUNBcUlFQmtaV1poZFd4MElETXdNRnh1SUNBZ0tpOWNiaUFnWkdWbGNFeHBibXRUYlhWa1oyVkVaV3hoZVRvZ016QXdMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdVZ2RHaGxJR0p5YjNkelpYSWdhR2x6ZEc5eWVTQjNhWFJvSUhSb1pTQnZjR1Z1SUdGalkyOXlaR2x2Ymx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnS2k5Y2JpQWdkWEJrWVhSbFNHbHpkRzl5ZVRvZ1ptRnNjMlZjYm4wN1hHNWNibVY0Y0c5eWRDQjdRV05qYjNKa2FXOXVmVHRjYmlKZGZRPT1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5hY2NvcmRpb24uanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWNjb3JkaW9uTWVudSA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmtleWJvYXJkJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubmVzdCcpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMyA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmNvcmUnKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogQWNjb3JkaW9uTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uYWNjb3JkaW9uTWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxudmFyIEFjY29yZGlvbk1lbnUgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoQWNjb3JkaW9uTWVudSwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gQWNjb3JkaW9uTWVudSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3JkaW9uTWVudSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEFjY29yZGlvbk1lbnUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihBY2NvcmRpb25NZW51KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQWNjb3JkaW9uTWVudSwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24gbWVudS5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBBY2NvcmRpb25NZW51XG4gICAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjaW5pdFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgQWNjb3JkaW9uTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnQWNjb3JkaW9uTWVudSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5yZWdpc3RlcignQWNjb3JkaW9uTWVudScsIHtcbiAgICAgICAgJ0VOVEVSJzogJ3RvZ2dsZScsXG4gICAgICAgICdTUEFDRSc6ICd0b2dnbGUnLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAnb3BlbicsXG4gICAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdjbG9zZScsXG4gICAgICAgICdFU0NBUEUnOiAnY2xvc2VBbGwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIG1lbnUgYnkgaGlkaW5nIGFsbCBuZXN0ZWQgbWVudXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9mb3VuZGF0aW9uVXRpbDIuTmVzdC5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLm5vdCgnLmlzLWFjdGl2ZScpLnNsaWRlVXAoMCk7IC8vLmZpbmQoJ2EnKS5jc3MoJ3BhZGRpbmctbGVmdCcsICcxcmVtJyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAncm9sZSc6ICd0cmVlJyxcbiAgICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogdGhpcy5vcHRpb25zLm11bHRpT3BlblxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJG1lbnVMaW5rcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgdGhpcy4kbWVudUxpbmtzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlua0lkID0gdGhpcy5pZCB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsMy5HZXRZb0RpZ2l0cykoNiwgJ2FjYy1tZW51LWxpbmsnKSxcbiAgICAgICAgICAgICRlbGVtID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLFxuICAgICAgICAgICAgJHN1YiA9ICRlbGVtLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLFxuICAgICAgICAgICAgc3ViSWQgPSAkc3ViWzBdLmlkIHx8ICgwLCBfZm91bmRhdGlvblV0aWwzLkdldFlvRGlnaXRzKSg2LCAnYWNjLW1lbnUnKSxcbiAgICAgICAgICAgIGlzQWN0aXZlID0gJHN1Yi5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucGFyZW50TGluaykge1xuICAgICAgICAgIHZhciAkYW5jaG9yID0gJGVsZW0uY2hpbGRyZW4oJ2EnKTtcbiAgICAgICAgICAkYW5jaG9yLmNsb25lKCkucHJlcGVuZFRvKCRzdWIpLndyYXAoJzxsaSBkYXRhLWlzLXBhcmVudC1saW5rIGNsYXNzPVwiaXMtc3VibWVudS1wYXJlbnQtaXRlbSBpcy1zdWJtZW51LWl0ZW0gaXMtYWNjb3JkaW9uLXN1Ym1lbnUtaXRlbVwiPjwvbGk+Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgJGVsZW0uYWRkQ2xhc3MoJ2hhcy1zdWJtZW51LXRvZ2dsZScpO1xuICAgICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykuYWZ0ZXIoJzxidXR0b24gaWQ9XCInICsgbGlua0lkICsgJ1wiIGNsYXNzPVwic3VibWVudS10b2dnbGVcIiBhcmlhLWNvbnRyb2xzPVwiJyArIHN1YklkICsgJ1wiIGFyaWEtZXhwYW5kZWQ9XCInICsgaXNBY3RpdmUgKyAnXCIgdGl0bGU9XCInICsgX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlVGV4dCArICdcIj48c3BhbiBjbGFzcz1cInN1Ym1lbnUtdG9nZ2xlLXRleHRcIj4nICsgX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlVGV4dCArICc8L3NwYW4+PC9idXR0b24+Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW0uYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1jb250cm9scyc6IHN1YklkLFxuICAgICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBpc0FjdGl2ZSxcbiAgICAgICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgICRzdWIuYXR0cih7XG4gICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZCxcbiAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICAgJ3JvbGUnOiAnZ3JvdXAnLFxuICAgICAgICAgICdpZCc6IHN1YklkXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpJykuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RyZWVpdGVtJ1xuICAgICAgfSk7XG4gICAgICB2YXIgaW5pdFBhbmVzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJyk7XG4gICAgICBpZiAoaW5pdFBhbmVzLmxlbmd0aCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpbml0UGFuZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuZG93bigoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgbWVudS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRzdWJtZW51ID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICAgIGlmICgkc3VibWVudS5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuY2hpbGRyZW4oJy5zdWJtZW51LXRvZ2dsZScpLm9mZignY2xpY2suemYuYWNjb3JkaW9uTWVudScpLm9uKCdjbGljay56Zi5hY2NvcmRpb25NZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCRzdWJtZW51KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCRzdWJtZW51KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkub24oJ2tleWRvd24uemYuYWNjb3JkaW9ubWVudScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSxcbiAgICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCxcbiAgICAgICAgICAgICR0YXJnZXQgPSAkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIGlmICgoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaSAtIDEpKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1pbihpICsgMSwgJGVsZW1lbnRzLmxlbmd0aCAtIDEpKS5maW5kKCdhJykuZmlyc3QoKTtcblxuICAgICAgICAgICAgaWYgKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudC5maW5kKCdsaTpmaXJzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5pcygnOmZpcnN0LWNoaWxkJykpIHtcbiAgICAgICAgICAgICAgLy8gaXMgZmlyc3QgZWxlbWVudCBvZiBzdWIgbWVudVxuICAgICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdOnZpc2libGUnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gaWYgcHJldmlvdXMgZWxlbWVudCBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkcHJldkVsZW1lbnQucGFyZW50cygnbGknKS5maW5kKCdsaTpsYXN0LWNoaWxkJykuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmlzKCc6bGFzdC1jaGlsZCcpKSB7XG4gICAgICAgICAgICAgIC8vIGlzIGxhc3QgZWxlbWVudCBvZiBzdWIgbWVudVxuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkubmV4dCgnbGknKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLmhhbmRsZUtleShlLCAnQWNjb3JkaW9uTWVudScsIHtcbiAgICAgICAgICBvcGVuOiBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgICAgICAgaWYgKCR0YXJnZXQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgICAgICBfdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICAgICAgICAkdGFyZ2V0LmZpbmQoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgICAgaWYgKCR0YXJnZXQubGVuZ3RoICYmICEkdGFyZ2V0LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgLy8gY2xvc2UgYWN0aXZlIHN1YiBvZiB0aGlzIGl0ZW1cbiAgICAgICAgICAgICAgX3RoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gY2xvc2UgY3VycmVudGx5IG9wZW4gc3ViXG4gICAgICAgICAgICAgIF90aGlzLnVwKCRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3VibWVudV0nKSk7XG4gICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXA6IGZ1bmN0aW9uIHVwKCkge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRvd246IGZ1bmN0aW9uIGRvd24oKSB7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbG9zZUFsbDogZnVuY3Rpb24gY2xvc2VBbGwoKSB7XG4gICAgICAgICAgICBfdGhpcy5oaWRlQWxsKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbiBoYW5kbGVkKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7IC8vLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIGFsbCBwYW5lcyBvZiB0aGUgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaGlkZUFsbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVBbGwoKSB7XG4gICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc3VibWVudV0nKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYWxsIHBhbmVzIG9mIHRoZSBtZW51LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaG93QWxsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0FsbCgpIHtcbiAgICAgIHRoaXMuZG93bih0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gdGhlIHN1Ym1lbnUgdG8gdG9nZ2xlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgkdGFyZ2V0KSB7XG4gICAgICBpZiAoISR0YXJnZXQuaXMoJzphbmltYXRlZCcpKSB7XG4gICAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgdGhpcy51cCgkdGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBvcGVuLlxuICAgICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rvd25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZG93bicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRvd24oJHRhcmdldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICAgIHRoaXMudXAodGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykubm90KCR0YXJnZXQucGFyZW50c1VudGlsKHRoaXMuJGVsZW1lbnQpLmFkZCgkdGFyZ2V0KSkpO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogZmFsc2UgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VibWVudVRvZ2dsZSkge1xuICAgICAgICAkdGFyZ2V0LnByZXYoJy5zdWJtZW51LXRvZ2dsZScpLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6IHRydWUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkdGFyZ2V0LnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoeyAnYXJpYS1leHBhbmRlZCc6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQuc2xpZGVEb3duKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgICAqIEBldmVudCBBY2NvcmRpb25NZW51I2Rvd25cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLiBBbGwgc3ViLW1lbnVzIGluc2lkZSB0aGUgdGFyZ2V0IHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBjbG9zZS5cbiAgICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSN1cFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwKCR0YXJnZXQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtZW51IGlzIGRvbmUgY29sbGFwc2luZyB1cC5cbiAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjdXBcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwLnpmLmFjY29yZGlvbk1lbnUnLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciAkbWVudXMgPSAkdGFyZ2V0LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVVcCgwKS5hZGRCYWNrKCkuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICRtZW51cy5wcmV2KCcuc3VibWVudS10b2dnbGUnKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG1lbnVzLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYWNjb3JkaW9uIG1lbnUuXG4gICAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZGVzdHJveWVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVEb3duKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnYScpLm9mZignY2xpY2suemYuYWNjb3JkaW9uTWVudScpO1xuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1pcy1wYXJlbnQtbGlua10nKS5kZXRhY2goKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnLmhhcy1zdWJtZW51LXRvZ2dsZScpLnJlbW92ZUNsYXNzKCdoYXMtc3VibWVudS10b2dnbGUnKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCcuc3VibWVudS10b2dnbGUnKS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgX2ZvdW5kYXRpb25VdGlsMi5OZXN0LkJ1cm4odGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBY2NvcmRpb25NZW51O1xufShfZm91bmRhdGlvbi5QbHVnaW4pO1xuXG5BY2NvcmRpb25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWRkcyB0aGUgcGFyZW50IGxpbmsgdG8gdGhlIHN1Ym1lbnUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBwYXJlbnRMaW5rOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYSBzdWJtZW51IGluIG1zLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWRkcyBhIHNlcGFyYXRlIHN1Ym1lbnUgdG9nZ2xlIGJ1dHRvbi4gVGhpcyBhbGxvd3MgdGhlIHBhcmVudCBpdGVtIHRvIGhhdmUgYSBsaW5rLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHN1Ym1lbnVUb2dnbGU6IGZhbHNlLFxuICAvKipcbiAgICogVGhlIHRleHQgdXNlZCBmb3IgdGhlIHN1Ym1lbnUgdG9nZ2xlIGlmIGVuYWJsZWQuIFRoaXMgaXMgdXNlZCBmb3Igc2NyZWVuIHJlYWRlcnMgb25seS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBzdWJtZW51VG9nZ2xlVGV4dDogJ1RvZ2dsZSBtZW51JyxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBtZW51IHRvIGhhdmUgbXVsdGlwbGUgb3BlbiBwYW5lcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgbXVsdGlPcGVuOiB0cnVlXG59O1xuXG5leHBvcnRzLkFjY29yZGlvbk1lbnUgPSBBY2NvcmRpb25NZW51O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dVlXTmpiM0prYVc5dVRXVnVkUzVxY3lKZExDSnVZVzFsY3lJNld5SkJZMk52Y21ScGIyNU5aVzUxSWl3aVpXeGxiV1Z1ZENJc0ltOXdkR2x2Ym5NaUxDSWtaV3hsYldWdWRDSXNJaVFpTENKbGVIUmxibVFpTENKa1pXWmhkV3gwY3lJc0ltUmhkR0VpTENKamJHRnpjMDVoYldVaUxDSmZhVzVwZENJc0lrdGxlV0p2WVhKa0lpd2ljbVZuYVhOMFpYSWlMQ0pPWlhOMElpd2lSbVZoZEdobGNpSXNJbDkwYUdseklpd2labWx1WkNJc0ltNXZkQ0lzSW5Oc2FXUmxWWEFpTENKaGRIUnlJaXdpYlhWc2RHbFBjR1Z1SWl3aUpHMWxiblZNYVc1cmN5SXNJbVZoWTJnaUxDSnNhVzVyU1dRaUxDSnBaQ0lzSWlSbGJHVnRJaXdpSkhOMVlpSXNJbU5vYVd4a2NtVnVJaXdpYzNWaVNXUWlMQ0pwYzBGamRHbDJaU0lzSW1oaGMwTnNZWE56SWl3aWNHRnlaVzUwVEdsdWF5SXNJaVJoYm1Ob2IzSWlMQ0pqYkc5dVpTSXNJbkJ5WlhCbGJtUlVieUlzSW5keVlYQWlMQ0p6ZFdKdFpXNTFWRzluWjJ4bElpd2lZV1JrUTJ4aGMzTWlMQ0poWm5SbGNpSXNJbk4xWW0xbGJuVlViMmRuYkdWVVpYaDBJaXdpYVc1cGRGQmhibVZ6SWl3aWJHVnVaM1JvSWl3aVpHOTNiaUlzSWw5bGRtVnVkSE1pTENJa2MzVmliV1Z1ZFNJc0ltOW1aaUlzSW05dUlpd2laU0lzSW5SdloyZHNaU0lzSW5CeVpYWmxiblJFWldaaGRXeDBJaXdpSkdWc1pXMWxiblJ6SWl3aWNHRnlaVzUwSWl3aUpIQnlaWFpGYkdWdFpXNTBJaXdpSkc1bGVIUkZiR1Z0Wlc1MElpd2lKSFJoY21kbGRDSXNJbWtpTENKcGN5SXNJbVZ4SWl3aVRXRjBhQ0lzSW0xaGVDSXNJbVpwY25OMElpd2liV2x1SWl3aWNHRnlaVzUwY3lJc0ltNWxlSFFpTENKb1lXNWtiR1ZMWlhraUxDSnZjR1Z1SWl3aVptOWpkWE1pTENKamJHOXpaU0lzSW5Wd0lpd2lZMnh2YzJWQmJHd2lMQ0pvYVdSbFFXeHNJaXdpYUdGdVpHeGxaQ0lzSW5OMGIzQkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZiaUlzSW5CaGNtVnVkSE5WYm5ScGJDSXNJbUZrWkNJc0luQnlaWFlpTENKemJHbGtaVVJ2ZDI0aUxDSnpiR2xrWlZOd1pXVmtJaXdpZEhKcFoyZGxjaUlzSWlSdFpXNTFjeUlzSW1Ga1pFSmhZMnNpTENKamMzTWlMQ0prWlhSaFkyZ2lMQ0p5WlcxdmRtVkRiR0Z6Y3lJc0luSmxiVzkyWlNJc0lrSjFjbTRpTENKUWJIVm5hVzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPenM3UVVGSFFUczdPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenRCUVVOQk96czdPenM3T3pzN08wRkJSVUU3T3pzN096czdTVUZQVFVFc1lUczdPenM3T3pzN096czdPMEZCUTBvN096czdPenM3T3pKQ1FWRlBReXhQTEVWQlFWTkRMRThzUlVGQlV6dEJRVU4yUWl4WFFVRkxReXhSUVVGTUxFZEJRV2RDUml4UFFVRm9RanRCUVVOQkxGZEJRVXRETEU5QlFVd3NSMEZCWlVVc2FVSkJRVVZETEUxQlFVWXNRMEZCVXl4RlFVRlVMRVZCUVdGTUxHTkJRV05OTEZGQlFUTkNMRVZCUVhGRExFdEJRVXRJTEZGQlFVd3NRMEZCWTBrc1NVRkJaQ3hGUVVGeVF5eEZRVUV5UkV3c1QwRkJNMFFzUTBGQlpqdEJRVU5CTEZkQlFVdE5MRk5CUVV3c1IwRkJhVUlzWlVGQmFrSXNRMEZJZFVJc1EwRkhWenM3UVVGRmJFTXNWMEZCUzBNc1MwRkJURHM3UVVGRlFVTXNLMEpCUVZORExGRkJRVlFzUTBGQmEwSXNaVUZCYkVJc1JVRkJiVU03UVVGRGFrTXNhVUpCUVZNc1VVRkVkMEk3UVVGRmFrTXNhVUpCUVZNc1VVRkdkMEk3UVVGSGFrTXNkVUpCUVdVc1RVRklhMEk3UVVGSmFrTXNiMEpCUVZrc1NVRktjVUk3UVVGTGFrTXNjMEpCUVdNc1RVRk1iVUk3UVVGTmFrTXNjMEpCUVdNc1QwRk9iVUk3UVVGUGFrTXNhMEpCUVZVN1FVRlFkVUlzVDBGQmJrTTdRVUZUUkRzN1FVRkpSRHM3T3pzN096czBRa0ZKVVR0QlFVTk9ReXcwUWtGQlMwTXNUMEZCVEN4RFFVRmhMRXRCUVV0V0xGRkJRV3hDTEVWQlFUUkNMRmRCUVRWQ096dEJRVVZCTEZWQlFVbFhMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFhRVUZMV0N4UlFVRk1MRU5CUVdOWkxFbEJRV1FzUTBGQmJVSXNaMEpCUVc1Q0xFVkJRWEZEUXl4SFFVRnlReXhEUVVGNVF5eFpRVUY2UXl4RlFVRjFSRU1zVDBGQmRrUXNRMEZCSzBRc1EwRkJMMFFzUlVGTVRTeERRVXMwUkR0QlFVTnNSU3hYUVVGTFpDeFJRVUZNTEVOQlFXTmxMRWxCUVdRc1EwRkJiVUk3UVVGRGFrSXNaMEpCUVZFc1RVRkVVenRCUVVWcVFpeG5RMEZCZDBJc1MwRkJTMmhDTEU5QlFVd3NRMEZCWVdsQ08wRkJSbkJDTEU5QlFXNUNPenRCUVV0QkxGZEJRVXRETEZWQlFVd3NSMEZCYTBJc1MwRkJTMnBDTEZGQlFVd3NRMEZCWTFrc1NVRkJaQ3hEUVVGdFFpdzRRa0ZCYmtJc1EwRkJiRUk3UVVGRFFTeFhRVUZMU3l4VlFVRk1MRU5CUVdkQ1F5eEpRVUZvUWl4RFFVRnhRaXhaUVVGVk8wRkJRemRDTEZsQlFVbERMRk5CUVZNc1MwRkJTME1zUlVGQlRDeEpRVUZYTEd0RFFVRlpMRU5CUVZvc1JVRkJaU3hsUVVGbUxFTkJRWGhDTzBGQlFVRXNXVUZEU1VNc1VVRkJVU3h6UWtGQlJTeEpRVUZHTEVOQlJGbzdRVUZCUVN4WlFVVkpReXhQUVVGUFJDeE5RVUZOUlN4UlFVRk9MRU5CUVdVc1owSkJRV1lzUTBGR1dEdEJRVUZCTEZsQlIwbERMRkZCUVZGR0xFdEJRVXNzUTBGQlRDeEZRVUZSUml4RlFVRlNMRWxCUVdNc2EwTkJRVmtzUTBGQldpeEZRVUZsTEZWQlFXWXNRMEZJTVVJN1FVRkJRU3haUVVsSlN5eFhRVUZYU0N4TFFVRkxTU3hSUVVGTUxFTkJRV01zVjBGQlpDeERRVXBtT3p0QlFVMUJMRmxCUVVkbUxFMUJRVTFhTEU5QlFVNHNRMEZCWXpSQ0xGVkJRV3BDTEVWQlFUWkNPMEZCUXpOQ0xHTkJRVWxETEZWQlFWVlFMRTFCUVUxRkxGRkJRVTRzUTBGQlpTeEhRVUZtTEVOQlFXUTdRVUZEUVVzc2EwSkJRVkZETEV0QlFWSXNSMEZCWjBKRExGTkJRV2hDTEVOQlFUQkNVaXhKUVVFeFFpeEZRVUZuUTFNc1NVRkJhRU1zUTBGQmNVTXNkMGRCUVhKRE8wRkJRMFE3TzBGQlJVUXNXVUZCUjNCQ0xFMUJRVTFhTEU5QlFVNHNRMEZCWTJsRExHRkJRV3BDTEVWQlFXZERPMEZCUXpsQ1dDeG5Ra0ZCVFZrc1VVRkJUaXhEUVVGbExHOUNRVUZtTzBGQlEwRmFMR2RDUVVGTlJTeFJRVUZPTEVOQlFXVXNSMEZCWml4RlFVRnZRbGNzUzBGQmNFSXNRMEZCTUVJc2FVSkJRV2xDWml4TlFVRnFRaXhIUVVFd1Fpd3dRMEZCTVVJc1IwRkJkVVZMTEV0QlFYWkZMRWRCUVN0RkxHMUNRVUV2UlN4SFFVRnhSME1zVVVGQmNrY3NSMEZCWjBnc1YwRkJhRWdzUjBGQk9FaGtMRTFCUVUxYUxFOUJRVTRzUTBGQlkyOURMR2xDUVVFMVNTeEhRVUZuU3l4elEwRkJhRXNzUjBGQmVVMTRRaXhOUVVGTldpeFBRVUZPTEVOQlFXTnZReXhwUWtGQmRrNHNSMEZCTWs4c2EwSkJRWEpSTzBGQlEwUXNVMEZJUkN4TlFVZFBPMEZCUTB4a0xHZENRVUZOVGl4SlFVRk9MRU5CUVZjN1FVRkRWQ3cyUWtGQmFVSlRMRXRCUkZJN1FVRkZWQ3cyUWtGQmFVSkRMRkZCUmxJN1FVRkhWQ3hyUWtGQlRVNDdRVUZJUnl4WFFVRllPMEZCUzBRN1FVRkRSRWNzWVVGQlMxQXNTVUZCVEN4RFFVRlZPMEZCUTFJc05rSkJRVzFDU1N4TlFVUllPMEZCUlZJc2VVSkJRV1VzUTBGQlEwMHNVVUZHVWp0QlFVZFNMR3RDUVVGUkxFOUJTRUU3UVVGSlVpeG5Ra0ZCVFVRN1FVRktSU3hUUVVGV08wRkJUVVFzVDBFMVFrUTdRVUUyUWtFc1YwRkJTM2hDTEZGQlFVd3NRMEZCWTFrc1NVRkJaQ3hEUVVGdFFpeEpRVUZ1UWl4RlFVRjVRa2NzU1VGQmVrSXNRMEZCT0VJN1FVRkROVUlzWjBKQlFWRTdRVUZFYjBJc1QwRkJPVUk3UVVGSFFTeFZRVUZKY1VJc1dVRkJXU3hMUVVGTGNFTXNVVUZCVEN4RFFVRmpXU3hKUVVGa0xFTkJRVzFDTEZsQlFXNUNMRU5CUVdoQ08wRkJRMEVzVlVGQlIzZENMRlZCUVZWRExFMUJRV0lzUlVGQmIwSTdRVUZEYkVJc1dVRkJTVEZDTEZGQlFWRXNTVUZCV2p0QlFVTkJlVUlzYTBKQlFWVnNRaXhKUVVGV0xFTkJRV1VzV1VGQlZUdEJRVU4yUWxBc1owSkJRVTB5UWl4SlFVRk9MRU5CUVZjc2MwSkJRVVVzU1VGQlJpeERRVUZZTzBGQlEwUXNVMEZHUkR0QlFVZEVPMEZCUTBRc1YwRkJTME1zVDBGQlREdEJRVU5FT3p0QlFVVkVPenM3T3pzN096aENRVWxWTzBGQlExSXNWVUZCU1RWQ0xGRkJRVkVzU1VGQldqczdRVUZGUVN4WFFVRkxXQ3hSUVVGTUxFTkJRV05aTEVsQlFXUXNRMEZCYlVJc1NVRkJia0lzUlVGQmVVSk5MRWxCUVhwQ0xFTkJRVGhDTEZsQlFWYzdRVUZEZGtNc1dVRkJTWE5DTEZkQlFWY3NjMEpCUVVVc1NVRkJSaXhGUVVGUmFrSXNVVUZCVWl4RFFVRnBRaXhuUWtGQmFrSXNRMEZCWmpzN1FVRkZRU3haUVVGSmFVSXNVMEZCVTBnc1RVRkJZaXhGUVVGeFFqdEJRVU51UWl4alFVRkhNVUlzVFVGQlRWb3NUMEZCVGl4RFFVRmphVU1zWVVGQmFrSXNSVUZCWjBNN1FVRkRPVUlzYTBOQlFVVXNTVUZCUml4RlFVRlJWQ3hSUVVGU0xFTkJRV2xDTEdsQ1FVRnFRaXhGUVVGdlEydENMRWRCUVhCRExFTkJRWGRETEhkQ1FVRjRReXhGUVVGclJVTXNSVUZCYkVVc1EwRkJjVVVzZDBKQlFYSkZMRVZCUVN0R0xGVkJRVk5ETEVOQlFWUXNSVUZCV1R0QlFVTjZSMmhETEc5Q1FVRk5hVU1zVFVGQlRpeERRVUZoU2l4UlFVRmlPMEZCUTBRc1lVRkdSRHRCUVVkRUxGZEJTa1FzVFVGSlR6dEJRVU5JTEd0RFFVRkZMRWxCUVVZc1JVRkJVV3BDTEZGQlFWSXNRMEZCYVVJc1IwRkJha0lzUlVGQmMwSnJRaXhIUVVGMFFpeERRVUV3UWl4M1FrRkJNVUlzUlVGQmIwUkRMRVZCUVhCRUxFTkJRWFZFTEhkQ1FVRjJSQ3hGUVVGcFJpeFZRVUZUUXl4RFFVRlVMRVZCUVZrN1FVRkRNMFpCTEdkQ1FVRkZSU3hqUVVGR08wRkJRMEZzUXl4dlFrRkJUV2xETEUxQlFVNHNRMEZCWVVvc1VVRkJZanRCUVVORUxHRkJTRVE3UVVGSlNEdEJRVU5HTzBGQlEwWXNUMEZtUkN4RlFXVkhSU3hGUVdaSUxFTkJaVTBzTUVKQlprNHNSVUZsYTBNc1ZVRkJVME1zUTBGQlZDeEZRVUZYTzBGQlF6TkRMRmxCUVVrelF5eFhRVUZYTEhOQ1FVRkZMRWxCUVVZc1EwRkJaanRCUVVGQkxGbEJRMGs0UXl4WlFVRlpPVU1zVTBGQlV5dERMRTFCUVZRc1EwRkJaMElzU1VGQmFFSXNSVUZCYzBKNFFpeFJRVUYwUWl4RFFVRXJRaXhKUVVFdlFpeERRVVJvUWp0QlFVRkJMRmxCUlVsNVFpeFpRVVpLTzBGQlFVRXNXVUZIU1VNc1dVRklTanRCUVVGQkxGbEJTVWxETEZWQlFWVnNSQ3hUUVVGVGRVSXNVVUZCVkN4RFFVRnJRaXhuUWtGQmJFSXNRMEZLWkRzN1FVRk5RWFZDTEd0Q1FVRlZOVUlzU1VGQlZpeERRVUZsTEZWQlFWTnBReXhEUVVGVUxFVkJRVms3UVVGRGVrSXNZMEZCU1N4elFrRkJSU3hKUVVGR0xFVkJRVkZETEVWQlFWSXNRMEZCVjNCRUxGRkJRVmdzUTBGQlNpeEZRVUV3UWp0QlFVTjRRbWRFTERKQ1FVRmxSaXhWUVVGVlR5eEZRVUZXTEVOQlFXRkRMRXRCUVV0RExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWbEtMRWxCUVVVc1EwRkJaQ3hEUVVGaUxFVkJRU3RDZGtNc1NVRkJMMElzUTBGQmIwTXNSMEZCY0VNc1JVRkJlVU0wUXl4TFFVRjZReXhGUVVGbU8wRkJRMEZRTERKQ1FVRmxTQ3hWUVVGVlR5eEZRVUZXTEVOQlFXRkRMRXRCUVV0SExFZEJRVXdzUTBGQlUwNHNTVUZCUlN4RFFVRllMRVZCUVdOTUxGVkJRVlZVTEUxQlFWWXNSMEZCYVVJc1EwRkJMMElzUTBGQllpeEZRVUZuUkhwQ0xFbEJRV2hFTEVOQlFYRkVMRWRCUVhKRUxFVkJRVEJFTkVNc1MwRkJNVVFzUlVGQlpqczdRVUZGUVN4blFrRkJTU3h6UWtGQlJTeEpRVUZHTEVWQlFWRnFReXhSUVVGU0xFTkJRV2xDTEhkQ1FVRnFRaXhGUVVFeVEyTXNUVUZCTDBNc1JVRkJkVVE3UVVGQlJUdEJRVU4yUkZrc05rSkJRV1ZxUkN4VFFVRlRXU3hKUVVGVUxFTkJRV01zWjBKQlFXUXNSVUZCWjBOQkxFbEJRV2hETEVOQlFYRkRMRWRCUVhKRExFVkJRVEJETkVNc1MwRkJNVU1zUlVGQlpqdEJRVU5FTzBGQlEwUXNaMEpCUVVrc2MwSkJRVVVzU1VGQlJpeEZRVUZSU2l4RlFVRlNMRU5CUVZjc1kwRkJXQ3hEUVVGS0xFVkJRV2RETzBGQlFVVTdRVUZEYUVOS0xEWkNRVUZsYUVRc1UwRkJVekJFTEU5QlFWUXNRMEZCYVVJc1NVRkJha0lzUlVGQmRVSkdMRXRCUVhaQ0xFZEJRU3RDTlVNc1NVRkJMMElzUTBGQmIwTXNSMEZCY0VNc1JVRkJlVU0wUXl4TFFVRjZReXhGUVVGbU8wRkJRMFFzWVVGR1JDeE5RVVZQTEVsQlFVbFNMR0ZCUVdGVkxFOUJRV0lzUTBGQmNVSXNTVUZCY2tJc1JVRkJNa0pHTEV0QlFUTkNMRWRCUVcxRGFrTXNVVUZCYmtNc1EwRkJORU1zZDBKQlFUVkRMRVZCUVhORll5eE5RVUV4UlN4RlFVRnJSanRCUVVGRk8wRkJRM3BHVnl3MlFrRkJaVUVzWVVGQllWVXNUMEZCWWl4RFFVRnhRaXhKUVVGeVFpeEZRVUV5UWpsRExFbEJRVE5DTEVOQlFXZERMR1ZCUVdoRExFVkJRV2xFUVN4SlFVRnFSQ3hEUVVGelJDeEhRVUYwUkN4RlFVRXlSRFJETEV0QlFUTkVMRVZCUVdZN1FVRkRSRHRCUVVORUxHZENRVUZKTEhOQ1FVRkZMRWxCUVVZc1JVRkJVVW9zUlVGQlVpeERRVUZYTEdGQlFWZ3NRMEZCU2l4RlFVRXJRanRCUVVGRk8wRkJReTlDU0N3MlFrRkJaV3BFTEZOQlFWTXdSQ3hQUVVGVUxFTkJRV2xDTEVsQlFXcENMRVZCUVhWQ1JpeExRVUYyUWl4SFFVRXJRa2NzU1VGQkwwSXNRMEZCYjBNc1NVRkJjRU1zUlVGQk1FTXZReXhKUVVFeFF5eERRVUVyUXl4SFFVRXZReXhGUVVGdlJEUkRMRXRCUVhCRUxFVkJRV1k3UVVGRFJEczdRVUZGUkR0QlFVTkVPMEZCUTBZc1UwRnVRa1E3TzBGQmNVSkJha1FzYVVOQlFWTnhSQ3hUUVVGVUxFTkJRVzFDYWtJc1EwRkJia0lzUlVGQmMwSXNaVUZCZEVJc1JVRkJkVU03UVVGRGNrTnJRaXhuUWtGQlRTeG5Ra0ZCVnp0QlFVTm1MR2RDUVVGSldDeFJRVUZSUlN4RlFVRlNMRU5CUVZjc1UwRkJXQ3hEUVVGS0xFVkJRVEpDTzBGQlEzcENla01zYjBKQlFVMHlRaXhKUVVGT0xFTkJRVmRaTEU5QlFWZzdRVUZEUVVFc2MwSkJRVkYwUXl4SlFVRlNMRU5CUVdFc1NVRkJZaXhGUVVGdFFqUkRMRXRCUVc1Q0xFZEJRVEpDTlVNc1NVRkJNMElzUTBGQlowTXNSMEZCYUVNc1JVRkJjVU0wUXl4TFFVRnlReXhIUVVFMlEwMHNTMEZCTjBNN1FVRkRSRHRCUVVOR0xGZEJUbTlETzBGQlQzSkRReXhwUWtGQlR5eHBRa0ZCVnp0QlFVTm9RaXhuUWtGQlNXSXNVVUZCVVdJc1RVRkJVaXhKUVVGclFpeERRVUZEWVN4UlFVRlJSU3hGUVVGU0xFTkJRVmNzVTBGQldDeERRVUYyUWl4RlFVRTRRenRCUVVGRk8wRkJRemxEZWtNc2IwSkJRVTF4UkN4RlFVRk9MRU5CUVZOa0xFOUJRVlE3UVVGRFJDeGhRVVpFTEUxQlJVOHNTVUZCU1d4RUxGTkJRVk1yUXl4TlFVRlVMRU5CUVdkQ0xHZENRVUZvUWl4RlFVRnJRMVlzVFVGQmRFTXNSVUZCT0VNN1FVRkJSVHRCUVVOeVJERkNMRzlDUVVGTmNVUXNSVUZCVGl4RFFVRlRhRVVzVTBGQlV5dERMRTFCUVZRc1EwRkJaMElzWjBKQlFXaENMRU5CUVZRN1FVRkRRUzlETEhWQ1FVRlRNRVFzVDBGQlZDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFrWXNTMEZCZGtJc1IwRkJLMEkxUXl4SlFVRXZRaXhEUVVGdlF5eEhRVUZ3UXl4RlFVRjVRelJETEV0QlFYcERMRWRCUVdsRVRTeExRVUZxUkR0QlFVTkVPMEZCUTBZc1YwRmtiME03UVVGbGNrTkZMR05CUVVrc1kwRkJWenRCUVVOaWFFSXNlVUpCUVdGakxFdEJRV0k3UVVGRFFTeHRRa0ZCVHl4SlFVRlFPMEZCUTBRc1YwRnNRbTlETzBGQmJVSnlRM2hDTEdkQ1FVRk5MR2RDUVVGWE8wRkJRMlpYTEhsQ1FVRmhZU3hMUVVGaU8wRkJRMEVzYlVKQlFVOHNTVUZCVUR0QlFVTkVMRmRCZEVKdlF6dEJRWFZDY2tOc1FpeHJRa0ZCVVN4clFrRkJWenRCUVVOcVFpeG5Ra0ZCU1dwRExFMUJRVTFhTEU5QlFVNHNRMEZCWTJsRExHRkJRV3hDTEVWQlFXbERPMEZCUXk5Q0xIRkNRVUZQTEV0QlFWQTdRVUZEUkR0QlFVTkVMR2RDUVVGSmFFTXNVMEZCVTNWQ0xGRkJRVlFzUTBGQmEwSXNaMEpCUVd4Q0xFVkJRVzlEWXl4TlFVRjRReXhGUVVGblJEdEJRVU01UXpGQ0xHOUNRVUZOYVVNc1RVRkJUaXhEUVVGaE5VTXNVMEZCVTNWQ0xGRkJRVlFzUTBGQmEwSXNaMEpCUVd4Q0xFTkJRV0k3UVVGRFFTeHhRa0ZCVHl4SlFVRlFPMEZCUTBRN1FVRkRSaXhYUVM5Q2IwTTdRVUZuUTNKRE1FTXNiMEpCUVZVc2IwSkJRVmM3UVVGRGJrSjBSQ3hyUWtGQlRYVkVMRTlCUVU0N1FVRkRSQ3hYUVd4RGIwTTdRVUZ0UTNKRFF5eHRRa0ZCVXl4cFFrRkJVM1JDTEdOQlFWUXNSVUZCZVVJN1FVRkRhRU1zWjBKQlFVbEJMR05CUVVvc1JVRkJiMEk3UVVGRGJFSkdMR2RDUVVGRlJTeGpRVUZHTzBGQlEwUTdRVUZEUkVZc1kwRkJSWGxDTEhkQ1FVRkdPMEZCUTBRN1FVRjRRMjlETEZOQlFYWkRPMEZCTUVORUxFOUJja1pFTEVWQlNGRXNRMEYzUmt3N1FVRkRTanM3UVVGRlJEczdPenM3T3pzNFFrRkpWVHRCUVVOU0xGZEJRVXRLTEVWQlFVd3NRMEZCVVN4TFFVRkxhRVVzVVVGQlRDeERRVUZqV1N4SlFVRmtMRU5CUVcxQ0xHZENRVUZ1UWl4RFFVRlNPMEZCUTBRN08wRkJSVVE3T3pzN096czdPRUpCU1ZVN1FVRkRVaXhYUVVGTE1FSXNTVUZCVEN4RFFVRlZMRXRCUVV0MFF5eFJRVUZNTEVOQlFXTlpMRWxCUVdRc1EwRkJiVUlzWjBKQlFXNUNMRU5CUVZZN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN01rSkJTMDl6UXl4UExFVkJRVkU3UVVGRFlpeFZRVUZITEVOQlFVTkJMRkZCUVZGRkxFVkJRVklzUTBGQlZ5eFhRVUZZTEVOQlFVb3NSVUZCTmtJN1FVRkRNMElzV1VGQlNTeERRVUZEUml4UlFVRlJSU3hGUVVGU0xFTkJRVmNzVTBGQldDeERRVUZNTEVWQlFUUkNPMEZCUXpGQ0xHVkJRVXRaTEVWQlFVd3NRMEZCVVdRc1QwRkJVanRCUVVORUxGTkJSa1FzVFVGSFN6dEJRVU5JTEdWQlFVdGFMRWxCUVV3c1EwRkJWVmtzVDBGQlZqdEJRVU5FTzBGQlEwWTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdlVUpCUzB0QkxFOHNSVUZCVXp0QlFVTmFMRlZCUVVsMlF5eFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJSeXhEUVVGRExFdEJRVXRhTEU5QlFVd3NRMEZCWVdsQ0xGTkJRV3BDTEVWQlFUUkNPMEZCUXpGQ0xHRkJRVXRuUkN4RlFVRk1MRU5CUVZFc1MwRkJTMmhGTEZGQlFVd3NRMEZCWTFrc1NVRkJaQ3hEUVVGdFFpeFpRVUZ1UWl4RlFVRnBRME1zUjBGQmFrTXNRMEZCY1VOeFF5eFJRVUZSYlVJc1dVRkJVaXhEUVVGeFFpeExRVUZMY2tVc1VVRkJNVUlzUlVGQmIwTnpSU3hIUVVGd1F5eERRVUYzUTNCQ0xFOUJRWGhETEVOQlFYSkRMRU5CUVZJN1FVRkRSRHM3UVVGRlJFRXNZMEZCVVdwQ0xGRkJRVklzUTBGQmFVSXNWMEZCYWtJc1JVRkJPRUpzUWl4SlFVRTVRaXhEUVVGdFF5eEZRVUZETEdWQlFXVXNTMEZCYUVJc1JVRkJia003TzBGQlJVRXNWVUZCUnl4TFFVRkxhRUlzVDBGQlRDeERRVUZoYVVNc1lVRkJhRUlzUlVGQkswSTdRVUZETjBKclFpeG5Ra0ZCVVhGQ0xFbEJRVklzUTBGQllTeHBRa0ZCWWl4RlFVRm5RM2hFTEVsQlFXaERMRU5CUVhGRExFVkJRVU1zYVVKQlFXbENMRWxCUVd4Q0xFVkJRWEpETzBGQlEwUXNUMEZHUkN4TlFVZExPMEZCUTBodFF5eG5Ra0ZCVVVnc1RVRkJVaXhEUVVGbExEaENRVUZtTEVWQlFTdERhRU1zU1VGQkwwTXNRMEZCYjBRc1JVRkJReXhwUWtGQmFVSXNTVUZCYkVJc1JVRkJjRVE3UVVGRFJEczdRVUZGUkcxRExHTkJRVkZ6UWl4VFFVRlNMRU5CUVd0Q04wUXNUVUZCVFZvc1QwRkJUaXhEUVVGak1FVXNWVUZCYUVNc1JVRkJORU1zV1VGQldUdEJRVU4wUkRzN096dEJRVWxCT1VRc1kwRkJUVmdzVVVGQlRpeERRVUZsTUVVc1QwRkJaaXhEUVVGMVFpeDFRa0ZCZGtJc1JVRkJaMFFzUTBGQlEzaENMRTlCUVVRc1EwRkJhRVE3UVVGRFJDeFBRVTVFTzBGQlQwUTdPMEZCUlVRN096czdPenM3TzNWQ1FVdEhRU3hQTEVWQlFWTTdRVUZEVml4VlFVRkpka01zVVVGQlVTeEpRVUZhTzBGQlEwRjFReXhqUVVGUmNFTXNUMEZCVWl4RFFVRm5Ra2dzVFVGQlRWb3NUMEZCVGl4RFFVRmpNRVVzVlVGQk9VSXNSVUZCTUVNc1dVRkJXVHRCUVVOd1JEczdPenRCUVVsQk9VUXNZMEZCVFZnc1VVRkJUaXhEUVVGbE1FVXNUMEZCWml4RFFVRjFRaXh4UWtGQmRrSXNSVUZCT0VNc1EwRkJRM2hDTEU5QlFVUXNRMEZCT1VNN1FVRkRSQ3hQUVU1RU96dEJRVkZCTEZWQlFVbDVRaXhUUVVGVGVrSXNVVUZCVVhSRExFbEJRVklzUTBGQllTeG5Ra0ZCWWl4RlFVRXJRa1VzVDBGQkwwSXNRMEZCZFVNc1EwRkJka01zUlVGQk1FTTRSQ3hQUVVFeFF5eEhRVUZ2UkRkRUxFbEJRWEJFTEVOQlFYbEVMR0ZCUVhwRUxFVkJRWGRGTEVsQlFYaEZMRU5CUVdJN08wRkJSVUVzVlVGQlJ5eExRVUZMYUVJc1QwRkJUQ3hEUVVGaGFVTXNZVUZCYUVJc1JVRkJLMEk3UVVGRE4wSXlReXhsUVVGUFNpeEpRVUZRTEVOQlFWa3NhVUpCUVZvc1JVRkJLMEo0UkN4SlFVRXZRaXhEUVVGdlF5eGxRVUZ3UXl4RlFVRnhSQ3hMUVVGeVJEdEJRVU5FTEU5QlJrUXNUVUZIU3p0QlFVTklORVFzWlVGQlR6VkNMRTFCUVZBc1EwRkJZeXc0UWtGQlpDeEZRVUU0UTJoRExFbEJRVGxETEVOQlFXMUVMR1ZCUVc1RUxFVkJRVzlGTEV0QlFYQkZPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzclFrRkpWenRCUVVOVUxGZEJRVXRtTEZGQlFVd3NRMEZCWTFrc1NVRkJaQ3hEUVVGdFFpeG5Ra0ZCYmtJc1JVRkJjVU0wUkN4VFFVRnlReXhEUVVFclF5eERRVUV2UXl4RlFVRnJSRXNzUjBGQmJFUXNRMEZCYzBRc1UwRkJkRVFzUlVGQmFVVXNSVUZCYWtVN1FVRkRRU3hYUVVGTE4wVXNVVUZCVEN4RFFVRmpXU3hKUVVGa0xFTkJRVzFDTEVkQlFXNUNMRVZCUVhkQ05rSXNSMEZCZUVJc1EwRkJORUlzZDBKQlFUVkNPMEZCUTBFc1YwRkJTM3BETEZGQlFVd3NRMEZCWTFrc1NVRkJaQ3hEUVVGdFFpeDFRa0ZCYmtJc1JVRkJORU5yUlN4TlFVRTFRenM3UVVGRlFTeFZRVUZITEV0QlFVc3ZSU3hQUVVGTUxFTkJRV0ZwUXl4aFFVRm9RaXhGUVVFclFqdEJRVU0zUWl4aFFVRkxhRU1zVVVGQlRDeERRVUZqV1N4SlFVRmtMRU5CUVcxQ0xIRkNRVUZ1UWl4RlFVRXdRMjFGTEZkQlFURkRMRU5CUVhORUxHOUNRVUYwUkR0QlFVTkJMR0ZCUVVzdlJTeFJRVUZNTEVOQlFXTlpMRWxCUVdRc1EwRkJiVUlzYVVKQlFXNUNMRVZCUVhORGIwVXNUVUZCZEVNN1FVRkRSRHM3UVVGRlJIWkZMRFJDUVVGTGQwVXNTVUZCVEN4RFFVRlZMRXRCUVV0cVJpeFJRVUZtTEVWQlFYbENMRmRCUVhwQ08wRkJRMFE3T3pzN1JVRTFVbmxDYTBZc2EwSTdPMEZCSzFJMVFuSkdMR05CUVdOTkxGRkJRV1FzUjBGQmVVSTdRVUZEZGtJN096czdPenRCUVUxQmQwSXNZMEZCV1N4TFFWQlhPMEZCVVhaQ096czdPenM3UVVGTlFUaERMR05CUVZrc1IwRmtWenRCUVdWMlFqczdPenM3UVVGTFFYcERMR2xDUVVGbExFdEJjRUpSTzBGQmNVSjJRanM3T3pzN1FVRkxRVWNzY1VKQlFXMUNMR0ZCTVVKSk8wRkJNa0oyUWpzN096czdPMEZCVFVGdVFpeGhRVUZYTzBGQmFrTlpMRU5CUVhwQ096dFJRVzlEVVc1Q0xHRXNSMEZCUVVFc1lTSXNJbVpwYkdVaU9pSm1iM1Z1WkdGMGFXOXVMbUZqWTI5eVpHbHZiazFsYm5VdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNibHh1YVcxd2IzSjBJQ1FnWm5KdmJTQW5hbkYxWlhKNUp6dGNibWx0Y0c5eWRDQjdJRXRsZVdKdllYSmtJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5WMGFXd3VhMlY1WW05aGNtUW5PMXh1YVcxd2IzSjBJSHNnVG1WemRDQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtNWxjM1FuTzF4dWFXMXdiM0owSUhzZ1IyVjBXVzlFYVdkcGRITWdmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNWpiM0psSnp0Y2JtbHRjRzl5ZENCN0lGQnNkV2RwYmlCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNXdiSFZuYVc0bk8xeHVYRzR2S2lwY2JpQXFJRUZqWTI5eVpHbHZiazFsYm5VZ2JXOWtkV3hsTGx4dUlDb2dRRzF2WkhWc1pTQm1iM1Z1WkdGMGFXOXVMbUZqWTI5eVpHbHZiazFsYm5WY2JpQXFJRUJ5WlhGMWFYSmxjeUJtYjNWdVpHRjBhVzl1TG5WMGFXd3VhMlY1WW05aGNtUmNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxuVjBhV3d1Ym1WemRGeHVJQ292WEc1Y2JtTnNZWE56SUVGalkyOXlaR2x2YmsxbGJuVWdaWGgwWlc1a2N5QlFiSFZuYVc0Z2UxeHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUc1bGR5QnBibk4wWVc1alpTQnZaaUJoYmlCaFkyTnZjbVJwYjI0Z2JXVnVkUzVjYmlBZ0lDb2dRR05zWVhOelhHNGdJQ0FxSUVCdVlXMWxJRUZqWTI5eVpHbHZiazFsYm5WY2JpQWdJQ29nUUdacGNtVnpJRUZqWTI5eVpHbHZiazFsYm5VamFXNXBkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ1pXeGxiV1Z1ZENBdElHcFJkV1Z5ZVNCdlltcGxZM1FnZEc4Z2JXRnJaU0JwYm5SdklHRnVJR0ZqWTI5eVpHbHZiaUJ0Wlc1MUxseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUU5MlpYSnlhV1JsY3lCMGJ5QjBhR1VnWkdWbVlYVnNkQ0J3YkhWbmFXNGdjMlYwZEdsdVozTXVYRzRnSUNBcUwxeHVJQ0JmYzJWMGRYQW9aV3hsYldWdWRDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlDUXVaWGgwWlc1a0tIdDlMQ0JCWTJOdmNtUnBiMjVOWlc1MUxtUmxabUYxYkhSekxDQjBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9LU3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdkR2hwY3k1amJHRnpjMDVoYldVZ1BTQW5RV05qYjNKa2FXOXVUV1Z1ZFNjN0lDOHZJR2xsT1NCaVlXTnJJR052YlhCaGRGeHVYRzRnSUNBZ2RHaHBjeTVmYVc1cGRDZ3BPMXh1WEc0Z0lDQWdTMlY1WW05aGNtUXVjbVZuYVhOMFpYSW9KMEZqWTI5eVpHbHZiazFsYm5VbkxDQjdYRzRnSUNBZ0lDQW5SVTVVUlZJbk9pQW5kRzluWjJ4bEp5eGNiaUFnSUNBZ0lDZFRVRUZEUlNjNklDZDBiMmRuYkdVbkxGeHVJQ0FnSUNBZ0owRlNVazlYWDFKSlIwaFVKem9nSjI5d1pXNG5MRnh1SUNBZ0lDQWdKMEZTVWs5WFgxVlFKem9nSjNWd0p5eGNiaUFnSUNBZ0lDZEJVbEpQVjE5RVQxZE9Kem9nSjJSdmQyNG5MRnh1SUNBZ0lDQWdKMEZTVWs5WFgweEZSbFFuT2lBblkyeHZjMlVuTEZ4dUlDQWdJQ0FnSjBWVFEwRlFSU2M2SUNkamJHOXpaVUZzYkNkY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc1Y2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ2RHaGxJR0ZqWTI5eVpHbHZiaUJ0Wlc1MUlHSjVJR2hwWkdsdVp5QmhiR3dnYm1WemRHVmtJRzFsYm5WekxseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gybHVhWFFvS1NCN1hHNGdJQ0FnVG1WemRDNUdaV0YwYUdWeUtIUm9hWE11SkdWc1pXMWxiblFzSUNkaFkyTnZjbVJwYjI0bktUdGNibHh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0oxdGtZWFJoTFhOMVltMWxiblZkSnlrdWJtOTBLQ2N1YVhNdFlXTjBhWFpsSnlrdWMyeHBaR1ZWY0Nnd0tUc3ZMeTVtYVc1a0tDZGhKeWt1WTNOektDZHdZV1JrYVc1bkxXeGxablFuTENBbk1YSmxiU2NwTzF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWg3WEc0Z0lDQWdJQ0FuY205c1pTYzZJQ2QwY21WbEp5eGNiaUFnSUNBZ0lDZGhjbWxoTFcxMWJIUnBjMlZzWldOMFlXSnNaU2M2SUhSb2FYTXViM0IwYVc5dWN5NXRkV3gwYVU5d1pXNWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lIUm9hWE11SkcxbGJuVk1hVzVyY3lBOUlIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25MbWx6TFdGalkyOXlaR2x2YmkxemRXSnRaVzUxTFhCaGNtVnVkQ2NwTzF4dUlDQWdJSFJvYVhNdUpHMWxiblZNYVc1cmN5NWxZV05vS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCMllYSWdiR2x1YTBsa0lEMGdkR2hwY3k1cFpDQjhmQ0JIWlhSWmIwUnBaMmwwY3lnMkxDQW5ZV05qTFcxbGJuVXRiR2x1YXljcExGeHVJQ0FnSUNBZ0lDQWdJQ1JsYkdWdElEMGdKQ2gwYUdsektTeGNiaUFnSUNBZ0lDQWdJQ0FrYzNWaUlEMGdKR1ZzWlcwdVkyaHBiR1J5Wlc0b0oxdGtZWFJoTFhOMVltMWxiblZkSnlrc1hHNGdJQ0FnSUNBZ0lDQWdjM1ZpU1dRZ1BTQWtjM1ZpV3pCZExtbGtJSHg4SUVkbGRGbHZSR2xuYVhSektEWXNJQ2RoWTJNdGJXVnVkU2NwTEZ4dUlDQWdJQ0FnSUNBZ0lHbHpRV04wYVhabElEMGdKSE4xWWk1b1lYTkRiR0Z6Y3lnbmFYTXRZV04wYVhabEp5azdYRzVjYmlBZ0lDQWdJR2xtS0Y5MGFHbHpMbTl3ZEdsdmJuTXVjR0Z5Wlc1MFRHbHVheWtnZTF4dUlDQWdJQ0FnSUNCc1pYUWdKR0Z1WTJodmNpQTlJQ1JsYkdWdExtTm9hV3hrY21WdUtDZGhKeWs3WEc0Z0lDQWdJQ0FnSUNSaGJtTm9iM0l1WTJ4dmJtVW9LUzV3Y21Wd1pXNWtWRzhvSkhOMVlpa3VkM0poY0NnblBHeHBJR1JoZEdFdGFYTXRjR0Z5Wlc1MExXeHBibXNnWTJ4aGMzTTlYQ0pwY3kxemRXSnRaVzUxTFhCaGNtVnVkQzFwZEdWdElHbHpMWE4xWW0xbGJuVXRhWFJsYlNCcGN5MWhZMk52Y21ScGIyNHRjM1ZpYldWdWRTMXBkR1Z0WENJK1BDOXNhVDRuS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWW9YM1JvYVhNdWIzQjBhVzl1Y3k1emRXSnRaVzUxVkc5bloyeGxLU0I3WEc0Z0lDQWdJQ0FnSUNSbGJHVnRMbUZrWkVOc1lYTnpLQ2RvWVhNdGMzVmliV1Z1ZFMxMGIyZG5iR1VuS1R0Y2JpQWdJQ0FnSUNBZ0pHVnNaVzB1WTJocGJHUnlaVzRvSjJFbktTNWhablJsY2lnblBHSjFkSFJ2YmlCcFpEMWNJaWNnS3lCc2FXNXJTV1FnS3lBblhDSWdZMnhoYzNNOVhDSnpkV0p0Wlc1MUxYUnZaMmRzWlZ3aUlHRnlhV0V0WTI5dWRISnZiSE05WENJbklDc2djM1ZpU1dRZ0t5QW5YQ0lnWVhKcFlTMWxlSEJoYm1SbFpEMWNJaWNnS3lCcGMwRmpkR2wyWlNBcklDZGNJaUIwYVhSc1pUMWNJaWNnS3lCZmRHaHBjeTV2Y0hScGIyNXpMbk4xWW0xbGJuVlViMmRuYkdWVVpYaDBJQ3NnSjF3aVBqeHpjR0Z1SUdOc1lYTnpQVndpYzNWaWJXVnVkUzEwYjJkbmJHVXRkR1Y0ZEZ3aVBpY2dLeUJmZEdocGN5NXZjSFJwYjI1ekxuTjFZbTFsYm5WVWIyZG5iR1ZVWlhoMElDc2dKend2YzNCaGJqNDhMMkoxZEhSdmJqNG5LVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ1JsYkdWdExtRjBkSElvZTF4dUlDQWdJQ0FnSUNBZ0lDZGhjbWxoTFdOdmJuUnliMnh6SnpvZ2MzVmlTV1FzWEc0Z0lDQWdJQ0FnSUNBZ0oyRnlhV0V0Wlhod1lXNWtaV1FuT2lCcGMwRmpkR2wyWlN4Y2JpQWdJQ0FnSUNBZ0lDQW5hV1FuT2lCc2FXNXJTV1JjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBa2MzVmlMbUYwZEhJb2UxeHVJQ0FnSUNBZ0lDQW5ZWEpwWVMxc1lXSmxiR3hsWkdKNUp6b2diR2x1YTBsa0xGeHVJQ0FnSUNBZ0lDQW5ZWEpwWVMxb2FXUmtaVzRuT2lBaGFYTkJZM1JwZG1Vc1hHNGdJQ0FnSUNBZ0lDZHliMnhsSnpvZ0oyZHliM1Z3Snl4Y2JpQWdJQ0FnSUNBZ0oybGtKem9nYzNWaVNXUmNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25iR2tuS1M1aGRIUnlLSHRjYmlBZ0lDQWdJQ2R5YjJ4bEp6b2dKM1J5WldWcGRHVnRKMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIWmhjaUJwYm1sMFVHRnVaWE1nUFNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0p5NXBjeTFoWTNScGRtVW5LVHRjYmlBZ0lDQnBaaWhwYm1sMFVHRnVaWE11YkdWdVozUm9LWHRjYmlBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQnBibWwwVUdGdVpYTXVaV0ZqYUNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1a2IzZHVLQ1FvZEdocGN5a3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11WDJWMlpXNTBjeWdwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nWlhabGJuUWdhR0Z1Wkd4bGNuTWdabTl5SUdsMFpXMXpJSGRwZEdocGJpQjBhR1VnYldWdWRTNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWxkbVZ1ZEhNb0tTQjdYRzRnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNnbmJHa25LUzVsWVdOb0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUNSemRXSnRaVzUxSUQwZ0pDaDBhR2x6S1M1amFHbHNaSEpsYmlnblcyUmhkR0V0YzNWaWJXVnVkVjBuS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLQ1J6ZFdKdFpXNTFMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0JwWmloZmRHaHBjeTV2Y0hScGIyNXpMbk4xWW0xbGJuVlViMmRuYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FrS0hSb2FYTXBMbU5vYVd4a2NtVnVLQ2N1YzNWaWJXVnVkUzEwYjJkbmJHVW5LUzV2Wm1Zb0oyTnNhV05yTG5wbUxtRmpZMjl5WkdsdmJrMWxiblVuS1M1dmJpZ25ZMnhwWTJzdWVtWXVZV05qYjNKa2FXOXVUV1Z1ZFNjc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5SdloyZHNaU2drYzNWaWJXVnVkU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG1Ob2FXeGtjbVZ1S0NkaEp5a3ViMlptS0NkamJHbGpheTU2Wmk1aFkyTnZjbVJwYjI1TlpXNTFKeWt1YjI0b0oyTnNhV05yTG5wbUxtRmpZMjl5WkdsdmJrMWxiblVuTENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11ZEc5bloyeGxLQ1J6ZFdKdFpXNTFLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2t1YjI0b0oydGxlV1J2ZDI0dWVtWXVZV05qYjNKa2FXOXViV1Z1ZFNjc0lHWjFibU4wYVc5dUtHVXBlMXh1SUNBZ0lDQWdkbUZ5SUNSbGJHVnRaVzUwSUQwZ0pDaDBhR2x6S1N4Y2JpQWdJQ0FnSUNBZ0lDQWtaV3hsYldWdWRITWdQU0FrWld4bGJXVnVkQzV3WVhKbGJuUW9KM1ZzSnlrdVkyaHBiR1J5Wlc0b0oyeHBKeWtzWEc0Z0lDQWdJQ0FnSUNBZ0pIQnlaWFpGYkdWdFpXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNSdVpYaDBSV3hsYldWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FrZEdGeVoyVjBJRDBnSkdWc1pXMWxiblF1WTJocGJHUnlaVzRvSjF0a1lYUmhMWE4xWW0xbGJuVmRKeWs3WEc1Y2JpQWdJQ0FnSUNSbGJHVnRaVzUwY3k1bFlXTm9LR1oxYm1OMGFXOXVLR2twSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ1FvZEdocGN5a3VhWE1vSkdWc1pXMWxiblFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdKSEJ5WlhaRmJHVnRaVzUwSUQwZ0pHVnNaVzFsYm5SekxtVnhLRTFoZEdndWJXRjRLREFzSUdrdE1Ta3BMbVpwYm1Rb0oyRW5LUzVtYVhKemRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNSdVpYaDBSV3hsYldWdWRDQTlJQ1JsYkdWdFpXNTBjeTVsY1NoTllYUm9MbTFwYmlocEt6RXNJQ1JsYkdWdFpXNTBjeTVzWlc1bmRHZ3RNU2twTG1acGJtUW9KMkVuS1M1bWFYSnpkQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NRb2RHaHBjeWt1WTJocGJHUnlaVzRvSjF0a1lYUmhMWE4xWW0xbGJuVmRPblpwYzJsaWJHVW5LUzVzWlc1bmRHZ3BJSHNnTHk4Z2FHRnpJRzl3Wlc0Z2MzVmlJRzFsYm5WY2JpQWdJQ0FnSUNBZ0lDQWdJQ1J1WlhoMFJXeGxiV1Z1ZENBOUlDUmxiR1Z0Wlc1MExtWnBibVFvSjJ4cE9tWnBjbk4wTFdOb2FXeGtKeWt1Wm1sdVpDZ25ZU2NwTG1acGNuTjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNna0tIUm9hWE1wTG1sektDYzZabWx5YzNRdFkyaHBiR1FuS1NrZ2V5QXZMeUJwY3lCbWFYSnpkQ0JsYkdWdFpXNTBJRzltSUhOMVlpQnRaVzUxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWtjSEpsZGtWc1pXMWxiblFnUFNBa1pXeGxiV1Z1ZEM1d1lYSmxiblJ6S0Nkc2FTY3BMbVpwY25OMEtDa3VabWx1WkNnbllTY3BMbVpwY25OMEtDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNna2NISmxka1ZzWlcxbGJuUXVjR0Z5Wlc1MGN5Z25iR2tuS1M1bWFYSnpkQ2dwTG1Ob2FXeGtjbVZ1S0NkYlpHRjBZUzF6ZFdKdFpXNTFYVHAyYVhOcFlteGxKeWt1YkdWdVozUm9LU0I3SUM4dklHbG1JSEJ5WlhacGIzVnpJR1ZzWlcxbGJuUWdhR0Z6SUc5d1pXNGdjM1ZpSUcxbGJuVmNiaUFnSUNBZ0lDQWdJQ0FnSUNSd2NtVjJSV3hsYldWdWRDQTlJQ1J3Y21WMlJXeGxiV1Z1ZEM1d1lYSmxiblJ6S0Nkc2FTY3BMbVpwYm1Rb0oyeHBPbXhoYzNRdFkyaHBiR1FuS1M1bWFXNWtLQ2RoSnlrdVptbHljM1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDUW9kR2hwY3lrdWFYTW9KenBzWVhOMExXTm9hV3hrSnlrcElIc2dMeThnYVhNZ2JHRnpkQ0JsYkdWdFpXNTBJRzltSUhOMVlpQnRaVzUxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWtibVY0ZEVWc1pXMWxiblFnUFNBa1pXeGxiV1Z1ZEM1d1lYSmxiblJ6S0Nkc2FTY3BMbVpwY25OMEtDa3VibVY0ZENnbmJHa25LUzVtYVc1a0tDZGhKeWt1Wm1seWMzUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCTFpYbGliMkZ5WkM1b1lXNWtiR1ZMWlhrb1pTd2dKMEZqWTI5eVpHbHZiazFsYm5VbkxDQjdYRzRnSUNBZ0lDQWdJRzl3Wlc0NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2tkR0Z5WjJWMExtbHpLQ2M2YUdsa1pHVnVKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtUnZkMjRvSkhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtkR0Z5WjJWMExtWnBibVFvSjJ4cEp5a3VabWx5YzNRb0tTNW1hVzVrS0NkaEp5a3VabWx5YzNRb0tTNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1kyeHZjMlU2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNna2RHRnlaMlYwTG14bGJtZDBhQ0FtSmlBaEpIUmhjbWRsZEM1cGN5Z25PbWhwWkdSbGJpY3BLU0I3SUM4dklHTnNiM05sSUdGamRHbDJaU0J6ZFdJZ2IyWWdkR2hwY3lCcGRHVnRYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTUxY0Nna2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ1JsYkdWdFpXNTBMbkJoY21WdWRDZ25XMlJoZEdFdGMzVmliV1Z1ZFYwbktTNXNaVzVuZEdncElIc2dMeThnWTJ4dmMyVWdZM1Z5Y21WdWRHeDVJRzl3Wlc0Z2MzVmlYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTUxY0Nna1pXeGxiV1Z1ZEM1d1lYSmxiblFvSjF0a1lYUmhMWE4xWW0xbGJuVmRKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdKR1ZzWlcxbGJuUXVjR0Z5Wlc1MGN5Z25iR2tuS1M1bWFYSnpkQ2dwTG1acGJtUW9KMkVuS1M1bWFYSnpkQ2dwTG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0IxY0RvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSkhCeVpYWkZiR1Z0Wlc1MExtWnZZM1Z6S0NrN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHUnZkMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ1J1WlhoMFJXeGxiV1Z1ZEM1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMGIyZG5iR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTV2Y0hScGIyNXpMbk4xWW0xbGJuVlViMmRuYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ1JsYkdWdFpXNTBMbU5vYVd4a2NtVnVLQ2RiWkdGMFlTMXpkV0p0Wlc1MVhTY3BMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11ZEc5bloyeGxLQ1JsYkdWdFpXNTBMbU5vYVd4a2NtVnVLQ2RiWkdGMFlTMXpkV0p0Wlc1MVhTY3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdZMnh2YzJWQmJHdzZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1ocFpHVkJiR3dvS1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdhR0Z1Wkd4bFpEb2dablZ1WTNScGIyNG9jSEpsZG1WdWRFUmxabUYxYkhRcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NISmxkbVZ1ZEVSbFptRjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdaUzV6ZEc5d1NXMXRaV1JwWVhSbFVISnZjR0ZuWVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN0x5OHVZWFIwY2lnbmRHRmlhVzVrWlhnbkxDQXdLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGJHOXpaWE1nWVd4c0lIQmhibVZ6SUc5bUlIUm9aU0J0Wlc1MUxseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ292WEc0Z0lHaHBaR1ZCYkd3b0tTQjdYRzRnSUNBZ2RHaHBjeTUxY0NoMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0oxdGtZWFJoTFhOMVltMWxiblZkSnlrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRTl3Wlc1eklHRnNiQ0J3WVc1bGN5QnZaaUIwYUdVZ2JXVnVkUzVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUwxeHVJQ0J6YUc5M1FXeHNLQ2tnZTF4dUlDQWdJSFJvYVhNdVpHOTNiaWgwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvSjF0a1lYUmhMWE4xWW0xbGJuVmRKeWtwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUnZaMmRzWlhNZ2RHaGxJRzl3Wlc0dlkyeHZjMlVnYzNSaGRHVWdiMllnWVNCemRXSnRaVzUxTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElIdHFVWFZsY25sOUlDUjBZWEpuWlhRZ0xTQjBhR1VnYzNWaWJXVnVkU0IwYnlCMGIyZG5iR1ZjYmlBZ0lDb3ZYRzRnSUhSdloyZHNaU2drZEdGeVoyVjBLWHRjYmlBZ0lDQnBaaWdoSkhSaGNtZGxkQzVwY3lnbk9tRnVhVzFoZEdWa0p5a3BJSHRjYmlBZ0lDQWdJR2xtSUNnaEpIUmhjbWRsZEM1cGN5Z25PbWhwWkdSbGJpY3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEFvSkhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a2IzZHVLQ1IwWVhKblpYUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJQY0dWdWN5QjBhR1VnYzNWaUxXMWxiblVnWkdWbWFXNWxaQ0JpZVNCZ0pIUmhjbWRsZEdBdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YWxGMVpYSjVmU0FrZEdGeVoyVjBJQzBnVTNWaUxXMWxiblVnZEc4Z2IzQmxiaTVjYmlBZ0lDb2dRR1pwY21WeklFRmpZMjl5WkdsdmJrMWxiblVqWkc5M2JseHVJQ0FnS2k5Y2JpQWdaRzkzYmlna2RHRnlaMlYwS1NCN1hHNGdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR2xtS0NGMGFHbHpMbTl3ZEdsdmJuTXViWFZzZEdsUGNHVnVLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuVndLSFJvYVhNdUpHVnNaVzFsYm5RdVptbHVaQ2duTG1sekxXRmpkR2wyWlNjcExtNXZkQ2drZEdGeVoyVjBMbkJoY21WdWRITlZiblJwYkNoMGFHbHpMaVJsYkdWdFpXNTBLUzVoWkdRb0pIUmhjbWRsZENrcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBa2RHRnlaMlYwTG1Ga1pFTnNZWE56S0NkcGN5MWhZM1JwZG1VbktTNWhkSFJ5S0hzbllYSnBZUzFvYVdSa1pXNG5PaUJtWVd4elpYMHBPMXh1WEc0Z0lDQWdhV1lvZEdocGN5NXZjSFJwYjI1ekxuTjFZbTFsYm5WVWIyZG5iR1VwSUh0Y2JpQWdJQ0FnSUNSMFlYSm5aWFF1Y0hKbGRpZ25Mbk4xWW0xbGJuVXRkRzluWjJ4bEp5a3VZWFIwY2loN0oyRnlhV0V0Wlhod1lXNWtaV1FuT2lCMGNuVmxmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSkhSaGNtZGxkQzV3WVhKbGJuUW9KeTVwY3kxaFkyTnZjbVJwYjI0dGMzVmliV1Z1ZFMxd1lYSmxiblFuS1M1aGRIUnlLSHNuWVhKcFlTMWxlSEJoYm1SbFpDYzZJSFJ5ZFdWOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBa2RHRnlaMlYwTG5Oc2FXUmxSRzkzYmloZmRHaHBjeTV2Y0hScGIyNXpMbk5zYVdSbFUzQmxaV1FzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdiV1Z1ZFNCcGN5QmtiMjVsSUc5d1pXNXBibWN1WEc0Z0lDQWdJQ0FnS2lCQVpYWmxiblFnUVdOamIzSmthVzl1VFdWdWRTTmtiM2R1WEc0Z0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUY5MGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KMlJ2ZDI0dWVtWXVZV05qYjNKa2FXOXVUV1Z1ZFNjc0lGc2tkR0Z5WjJWMFhTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJ4dmMyVnpJSFJvWlNCemRXSXRiV1Z1ZFNCa1pXWnBibVZrSUdKNUlHQWtkR0Z5WjJWMFlDNGdRV3hzSUhOMVlpMXRaVzUxY3lCcGJuTnBaR1VnZEdobElIUmhjbWRsZENCM2FXeHNJR0psSUdOc2IzTmxaQ0JoY3lCM1pXeHNMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ0pIUmhjbWRsZENBdElGTjFZaTF0Wlc1MUlIUnZJR05zYjNObExseHVJQ0FnS2lCQVptbHlaWE1nUVdOamIzSmthVzl1VFdWdWRTTjFjRnh1SUNBZ0tpOWNiaUFnZFhBb0pIUmhjbWRsZENrZ2UxeHVJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdKSFJoY21kbGRDNXpiR2xrWlZWd0tGOTBhR2x6TG05d2RHbHZibk11YzJ4cFpHVlRjR1ZsWkN3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnS2lCR2FYSmxjeUIzYUdWdUlIUm9aU0J0Wlc1MUlHbHpJR1J2Ym1VZ1kyOXNiR0Z3YzJsdVp5QjFjQzVjYmlBZ0lDQWdJQ0FxSUVCbGRtVnVkQ0JCWTJOdmNtUnBiMjVOWlc1MUkzVndYRzRnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJRjkwYUdsekxpUmxiR1Z0Wlc1MExuUnlhV2RuWlhJb0ozVndMbnBtTG1GalkyOXlaR2x2YmsxbGJuVW5MQ0JiSkhSaGNtZGxkRjBwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZG1GeUlDUnRaVzUxY3lBOUlDUjBZWEpuWlhRdVptbHVaQ2duVzJSaGRHRXRjM1ZpYldWdWRWMG5LUzV6Ykdsa1pWVndLREFwTG1Ga1pFSmhZMnNvS1M1aGRIUnlLQ2RoY21saExXaHBaR1JsYmljc0lIUnlkV1VwTzF4dVhHNGdJQ0FnYVdZb2RHaHBjeTV2Y0hScGIyNXpMbk4xWW0xbGJuVlViMmRuYkdVcElIdGNiaUFnSUNBZ0lDUnRaVzUxY3k1d2NtVjJLQ2N1YzNWaWJXVnVkUzEwYjJkbmJHVW5LUzVoZEhSeUtDZGhjbWxoTFdWNGNHRnVaR1ZrSnl3Z1ptRnNjMlVwTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNSdFpXNTFjeTV3WVhKbGJuUW9KeTVwY3kxaFkyTnZjbVJwYjI0dGMzVmliV1Z1ZFMxd1lYSmxiblFuS1M1aGRIUnlLQ2RoY21saExXVjRjR0Z1WkdWa0p5d2dabUZzYzJVcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaWE4wY205NWN5QmhiaUJwYm5OMFlXNWpaU0J2WmlCaFkyTnZjbVJwYjI0Z2JXVnVkUzVjYmlBZ0lDb2dRR1pwY21WeklFRmpZMjl5WkdsdmJrMWxiblVqWkdWemRISnZlV1ZrWEc0Z0lDQXFMMXh1SUNCZlpHVnpkSEp2ZVNncElIdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0oxdGtZWFJoTFhOMVltMWxiblZkSnlrdWMyeHBaR1ZFYjNkdUtEQXBMbU56Y3lnblpHbHpjR3hoZVNjc0lDY25LVHRjYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG1acGJtUW9KMkVuS1M1dlptWW9KMk5zYVdOckxucG1MbUZqWTI5eVpHbHZiazFsYm5VbktUdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0oxdGtZWFJoTFdsekxYQmhjbVZ1ZEMxc2FXNXJYU2NwTG1SbGRHRmphQ2dwTzF4dVhHNGdJQ0FnYVdZb2RHaHBjeTV2Y0hScGIyNXpMbk4xWW0xbGJuVlViMmRuYkdVcElIdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25MbWhoY3kxemRXSnRaVzUxTFhSdloyZHNaU2NwTG5KbGJXOTJaVU5zWVhOektDZG9ZWE10YzNWaWJXVnVkUzEwYjJkbmJHVW5LVHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdVptbHVaQ2duTG5OMVltMWxiblV0ZEc5bloyeGxKeWt1Y21WdGIzWmxLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdUbVZ6ZEM1Q2RYSnVLSFJvYVhNdUpHVnNaVzFsYm5Rc0lDZGhZMk52Y21ScGIyNG5LVHRjYmlBZ2ZWeHVmVnh1WEc1QlkyTnZjbVJwYjI1TlpXNTFMbVJsWm1GMWJIUnpJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrY3lCMGFHVWdjR0Z5Wlc1MElHeHBibXNnZEc4Z2RHaGxJSE4xWW0xbGJuVXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCd1lYSmxiblJNYVc1ck9pQm1ZV3h6WlN4Y2JpQWdMeW9xWEc0Z0lDQXFJRUZ0YjNWdWRDQnZaaUIwYVcxbElIUnZJR0Z1YVcxaGRHVWdkR2hsSUc5d1pXNXBibWNnYjJZZ1lTQnpkV0p0Wlc1MUlHbHVJRzF6TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0dWRXMWlaWEo5WEc0Z0lDQXFJRUJrWldaaGRXeDBJREkxTUZ4dUlDQWdLaTljYmlBZ2MyeHBaR1ZUY0dWbFpEb2dNalV3TEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrY3lCaElITmxjR0Z5WVhSbElITjFZbTFsYm5VZ2RHOW5aMnhsSUdKMWRIUnZiaTRnVkdocGN5QmhiR3h2ZDNNZ2RHaGxJSEJoY21WdWRDQnBkR1Z0SUhSdklHaGhkbVVnWVNCc2FXNXJMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCbGVHRnRjR3hsSUhSeWRXVmNiaUFnSUNvdlhHNGdJSE4xWW0xbGJuVlViMmRuYkdVNklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUhSbGVIUWdkWE5sWkNCbWIzSWdkR2hsSUhOMVltMWxiblVnZEc5bloyeGxJR2xtSUdWdVlXSnNaV1F1SUZSb2FYTWdhWE1nZFhObFpDQm1iM0lnYzJOeVpXVnVJSEpsWVdSbGNuTWdiMjVzZVM1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFaWGhoYlhCc1pTQjBjblZsWEc0Z0lDQXFMMXh1SUNCemRXSnRaVzUxVkc5bloyeGxWR1Y0ZERvZ0oxUnZaMmRzWlNCdFpXNTFKeXhjYmlBZ0x5b3FYRzRnSUNBcUlFRnNiRzkzSUhSb1pTQnRaVzUxSUhSdklHaGhkbVVnYlhWc2RHbHdiR1VnYjNCbGJpQndZVzVsY3k1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN1ltOXZiR1ZoYm4xY2JpQWdJQ29nUUdSbFptRjFiSFFnZEhKMVpWeHVJQ0FnS2k5Y2JpQWdiWFZzZEdsUGNHVnVPaUIwY25WbFhHNTlPMXh1WEc1bGVIQnZjblFnZTBGalkyOXlaR2x2YmsxbGJuVjlPMXh1SWwxOVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmFjY29yZGlvbk1lbnUuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Gb3VuZGF0aW9uID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5jb3JlJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeScpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRk9VTkRBVElPTl9WRVJTSU9OID0gJzYuNC40LXJjMSc7XG5cbi8vIEdsb2JhbCBGb3VuZGF0aW9uIG9iamVjdFxuLy8gVGhpcyBpcyBhdHRhY2hlZCB0byB0aGUgd2luZG93LCBvciB1c2VkIGFzIGEgbW9kdWxlIGZvciBBTUQvQnJvd3NlcmlmeVxudmFyIEZvdW5kYXRpb24gPSB7XG4gIHZlcnNpb246IEZPVU5EQVRJT05fVkVSU0lPTixcblxuICAvKipcbiAgICogU3RvcmVzIGluaXRpYWxpemVkIHBsdWdpbnMuXG4gICAqL1xuICBfcGx1Z2luczoge30sXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBnZW5lcmF0ZWQgdW5pcXVlIGlkcyBmb3IgcGx1Z2luIGluc3RhbmNlc1xuICAgKi9cbiAgX3V1aWRzOiBbXSxcblxuICAvKipcbiAgICogRGVmaW5lcyBhIEZvdW5kYXRpb24gcGx1Z2luLCBhZGRpbmcgaXQgdG8gdGhlIGBGb3VuZGF0aW9uYCBuYW1lc3BhY2UgYW5kIHRoZSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZSB3aGVuIHJlZmxvd2luZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgcGx1Z2luLlxuICAgKi9cbiAgcGx1Z2luOiBmdW5jdGlvbiBwbHVnaW4oX3BsdWdpbiwgbmFtZSkge1xuICAgIC8vIE9iamVjdCBrZXkgdG8gdXNlIHdoZW4gYWRkaW5nIHRvIGdsb2JhbCBGb3VuZGF0aW9uIG9iamVjdFxuICAgIC8vIEV4YW1wbGVzOiBGb3VuZGF0aW9uLlJldmVhbCwgRm91bmRhdGlvbi5PZmZDYW52YXNcbiAgICB2YXIgY2xhc3NOYW1lID0gbmFtZSB8fCBmdW5jdGlvbk5hbWUoX3BsdWdpbik7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBzdG9yaW5nIHRoZSBwbHVnaW4sIGFsc28gdXNlZCB0byBjcmVhdGUgdGhlIGlkZW50aWZ5aW5nIGRhdGEgYXR0cmlidXRlIGZvciB0aGUgcGx1Z2luXG4gICAgLy8gRXhhbXBsZXM6IGRhdGEtcmV2ZWFsLCBkYXRhLW9mZi1jYW52YXNcbiAgICB2YXIgYXR0ck5hbWUgPSBoeXBoZW5hdGUoY2xhc3NOYW1lKTtcblxuICAgIC8vIEFkZCB0byB0aGUgRm91bmRhdGlvbiBvYmplY3QgYW5kIHRoZSBwbHVnaW5zIGxpc3QgKGZvciByZWZsb3dpbmcpXG4gICAgdGhpcy5fcGx1Z2luc1thdHRyTmFtZV0gPSB0aGlzW2NsYXNzTmFtZV0gPSBfcGx1Z2luO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICogQWRkcyB0aGUgYHpmUGx1Z2luYCBkYXRhLWF0dHJpYnV0ZSB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgcGx1Z2lucyB0byBhbGxvdyB1c2Ugb2YgJChzZWxlY3RvcikuZm91bmRhdGlvbihtZXRob2QpIGNhbGxzLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBpbml0aWFsaXphdGlvbiBldmVudCBmb3IgZWFjaCBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBsdWdpbiwgcGFzc2VkIGFzIGEgY2FtZWxDYXNlZCBzdHJpbmcuXG4gICAqIEBmaXJlcyBQbHVnaW4jaW5pdFxuICAgKi9cbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbiwgbmFtZSkge1xuICAgIHZhciBwbHVnaW5OYW1lID0gbmFtZSA/IGh5cGhlbmF0ZShuYW1lKSA6IGZ1bmN0aW9uTmFtZShwbHVnaW4uY29uc3RydWN0b3IpLnRvTG93ZXJDYXNlKCk7XG4gICAgcGx1Z2luLnV1aWQgPSAoMCwgX2ZvdW5kYXRpb25VdGlsLkdldFlvRGlnaXRzKSg2LCBwbHVnaW5OYW1lKTtcblxuICAgIGlmICghcGx1Z2luLiRlbGVtZW50LmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUpKSB7XG4gICAgICBwbHVnaW4uJGVsZW1lbnQuYXR0cignZGF0YS0nICsgcGx1Z2luTmFtZSwgcGx1Z2luLnV1aWQpO1xuICAgIH1cbiAgICBpZiAoIXBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpKSB7XG4gICAgICBwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nLCBwbHVnaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKCdpbml0LnpmLicgKyBwbHVnaW5OYW1lKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gdW5yZWdpc3RlclBsdWdpbihwbHVnaW4pIHtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGh5cGhlbmF0ZShmdW5jdGlvbk5hbWUocGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykuY29uc3RydWN0b3IpKTtcblxuICAgIHRoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKHBsdWdpbi51dWlkKSwgMSk7XG4gICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUpLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICovXG4gICAgLnRyaWdnZXIoJ2Rlc3Ryb3llZC56Zi4nICsgcGx1Z2luTmFtZSk7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBwbHVnaW4pIHtcbiAgICAgIHBsdWdpbltwcm9wXSA9IG51bGw7IC8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQ2F1c2VzIG9uZSBvciBtb3JlIGFjdGl2ZSBwbHVnaW5zIHRvIHJlLWluaXRpYWxpemUsIHJlc2V0dGluZyBldmVudCBsaXN0ZW5lcnMsIHJlY2FsY3VsYXRpbmcgcG9zaXRpb25zLCBldGMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5zIC0gb3B0aW9uYWwgc3RyaW5nIG9mIGFuIGluZGl2aWR1YWwgcGx1Z2luIGtleSwgYXR0YWluZWQgYnkgY2FsbGluZyBgJChlbGVtZW50KS5kYXRhKCdwbHVnaW5OYW1lJylgLCBvciBzdHJpbmcgb2YgYSBwbHVnaW4gY2xhc3MgaS5lLiBgJ2Ryb3Bkb3duJ2BcbiAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICovXG4gIHJlSW5pdDogZnVuY3Rpb24gcmVJbml0KHBsdWdpbnMpIHtcbiAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiBfanF1ZXJ5Mi5kZWZhdWx0O1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNKUSkge1xuICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgcGx1Z2lucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGx1Z2lucyksXG4gICAgICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBmbnMgPSB7XG4gICAgICAgICAgJ29iamVjdCc6IGZ1bmN0aW9uIG9iamVjdChwbGdzKSB7XG4gICAgICAgICAgICBwbGdzLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgcCA9IGh5cGhlbmF0ZShwKTtcbiAgICAgICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdbZGF0YS0nICsgcCArICddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3N0cmluZyc6IGZ1bmN0aW9uIHN0cmluZygpIHtcbiAgICAgICAgICAgIHBsdWdpbnMgPSBoeXBoZW5hdGUocGx1Z2lucyk7XG4gICAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ1tkYXRhLScgKyBwbHVnaW5zICsgJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uIHVuZGVmaW5lZCgpIHtcbiAgICAgICAgICAgIHRoaXNbJ29iamVjdCddKE9iamVjdC5rZXlzKF90aGlzLl9wbHVnaW5zKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmbnNbdHlwZV0ocGx1Z2lucyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHJldHVybiBwbHVnaW5zO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBwbHVnaW5zIG9uIGFueSBlbGVtZW50cyB3aXRoaW4gYGVsZW1gIChhbmQgYGVsZW1gIGl0c2VsZikgdGhhdCBhcmVuJ3QgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW0gLSBqUXVlcnkgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVsZW1lbnQgdG8gY2hlY2sgaW5zaWRlLiBBbHNvIGNoZWNrcyB0aGUgZWxlbWVudCBpdHNlbGYsIHVubGVzcyBpdCdzIHRoZSBgZG9jdW1lbnRgIG9iamVjdC5cbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBsdWdpbnMgLSBBIGxpc3Qgb2YgcGx1Z2lucyB0byBpbml0aWFsaXplLiBMZWF2ZSB0aGlzIG91dCB0byBpbml0aWFsaXplIGV2ZXJ5dGhpbmcuXG4gICAqL1xuICByZWZsb3c6IGZ1bmN0aW9uIHJlZmxvdyhlbGVtLCBwbHVnaW5zKSB7XG5cbiAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwbHVnaW5zID0gT2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk7XG4gICAgfVxuICAgIC8vIElmIHBsdWdpbnMgaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYW4gYXJyYXkgd2l0aCBvbmUgaXRlbVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnc3RyaW5nJykge1xuICAgICAgICBwbHVnaW5zID0gW3BsdWdpbnNdO1xuICAgICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHBsdWdpblxuICAgIF9qcXVlcnkyLmRlZmF1bHQuZWFjaChwbHVnaW5zLCBmdW5jdGlvbiAoaSwgbmFtZSkge1xuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHBsdWdpblxuICAgICAgdmFyIHBsdWdpbiA9IF90aGlzLl9wbHVnaW5zW25hbWVdO1xuXG4gICAgICAvLyBMb2NhbGl6ZSB0aGUgc2VhcmNoIHRvIGFsbCBlbGVtZW50cyBpbnNpZGUgZWxlbSwgYXMgd2VsbCBhcyBlbGVtIGl0c2VsZiwgdW5sZXNzIGVsZW0gPT09IGRvY3VtZW50XG4gICAgICB2YXIgJGVsZW0gPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZWxlbSkuZmluZCgnW2RhdGEtJyArIG5hbWUgKyAnXScpLmFkZEJhY2soJ1tkYXRhLScgKyBuYW1lICsgJ10nKTtcblxuICAgICAgLy8gRm9yIGVhY2ggcGx1Z2luIGZvdW5kLCBpbml0aWFsaXplIGl0XG4gICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIgKyBuYW1lICsgXCIgb24gYW4gZWxlbWVudCB0aGF0IGFscmVhZHkgaGFzIGEgRm91bmRhdGlvbiBwbHVnaW4uXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkZWwuYXR0cignZGF0YS1vcHRpb25zJykpIHtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZS5zcGxpdCgnOicpLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVsLnRyaW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgJGVsLmRhdGEoJ3pmUGx1Z2luJywgbmV3IHBsdWdpbigoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksIG9wdHMpKTtcbiAgICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBnZXRGbk5hbWU6IGZ1bmN0aW9uTmFtZSxcblxuICBhZGRUb0pxdWVyeTogZnVuY3Rpb24gYWRkVG9KcXVlcnkoJCkge1xuICAgIC8vIFRPRE86IGNvbnNpZGVyIG5vdCBtYWtpbmcgdGhpcyBhIGpRdWVyeSBmdW5jdGlvblxuICAgIC8vIFRPRE86IG5lZWQgd2F5IHRvIHJlZmxvdyB2cy4gcmUtaW5pdGlhbGl6ZVxuICAgIC8qKlxuICAgICAqIFRoZSBGb3VuZGF0aW9uIGpRdWVyeSBtZXRob2QuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG1ldGhvZCAtIEFuIGFjdGlvbiB0byBwZXJmb3JtIG9uIHRoZSBjdXJyZW50IGpRdWVyeSBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGZvdW5kYXRpb24gPSBmdW5jdGlvbiBmb3VuZGF0aW9uKG1ldGhvZCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgbWV0aG9kID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihtZXRob2QpLFxuICAgICAgICAgICRub0pTID0gJCgnLm5vLWpzJyk7XG5cbiAgICAgIGlmICgkbm9KUy5sZW5ndGgpIHtcbiAgICAgICAgJG5vSlMucmVtb3ZlQ2xhc3MoJ25vLWpzJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvL25lZWRzIHRvIGluaXRpYWxpemUgdGhlIEZvdW5kYXRpb24gb2JqZWN0LCBvciBhbiBpbmRpdmlkdWFsIHBsdWdpbi5cbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsMi5NZWRpYVF1ZXJ5Ll9pbml0KCk7XG4gICAgICAgIEZvdW5kYXRpb24ucmVmbG93KHRoaXMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAvL2FuIGluZGl2aWR1YWwgbWV0aG9kIHRvIGludm9rZSBvbiBhIHBsdWdpbiBvciBncm91cCBvZiBwbHVnaW5zXG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsgLy9jb2xsZWN0IGFsbCB0aGUgYXJndW1lbnRzLCBpZiBuZWNlc3NhcnlcbiAgICAgICAgdmFyIHBsdWdDbGFzcyA9IHRoaXMuZGF0YSgnemZQbHVnaW4nKTsgLy9kZXRlcm1pbmUgdGhlIGNsYXNzIG9mIHBsdWdpblxuXG4gICAgICAgIGlmIChwbHVnQ2xhc3MgIT09IHVuZGVmaW5lZCAmJiBwbHVnQ2xhc3NbbWV0aG9kXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy9tYWtlIHN1cmUgYm90aCB0aGUgY2xhc3MgYW5kIG1ldGhvZCBleGlzdFxuICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy9pZiB0aGVyZSdzIG9ubHkgb25lLCBjYWxsIGl0IGRpcmVjdGx5LlxuICAgICAgICAgICAgcGx1Z0NsYXNzW21ldGhvZF0uYXBwbHkocGx1Z0NsYXNzLCBhcmdzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICAgICAgICAvL290aGVyd2lzZSBsb29wIHRocm91Z2ggdGhlIGpRdWVyeSBjb2xsZWN0aW9uIGFuZCBpbnZva2UgdGhlIG1ldGhvZCBvbiBlYWNoXG4gICAgICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KCQoZWwpLmRhdGEoJ3pmUGx1Z2luJyksIGFyZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vZXJyb3IgZm9yIG5vIGNsYXNzIG9yIG5vIG1ldGhvZFxuICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIldlJ3JlIHNvcnJ5LCAnXCIgKyBtZXRob2QgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBtZXRob2QgZm9yIFwiICsgKHBsdWdDbGFzcyA/IGZ1bmN0aW9uTmFtZShwbHVnQ2xhc3MpIDogJ3RoaXMgZWxlbWVudCcpICsgJy4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9lcnJvciBmb3IgaW52YWxpZCBhcmd1bWVudCB0eXBlXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1dlXFwncmUgc29ycnksICcgKyB0eXBlICsgJyBpcyBub3QgYSB2YWxpZCBwYXJhbWV0ZXIuIFlvdSBtdXN0IHVzZSBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1ldGhvZCB5b3Ugd2lzaCB0byBpbnZva2UuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgICQuZm4uZm91bmRhdGlvbiA9IGZvdW5kYXRpb247XG4gICAgcmV0dXJuICQ7XG4gIH1cbn07XG5cbkZvdW5kYXRpb24udXRpbCA9IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGZvciBhcHBseWluZyBhIGRlYm91bmNlIGVmZmVjdCB0byBhIGZ1bmN0aW9uIGNhbGwuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIC0gRnVuY3Rpb24gdG8gYmUgY2FsbGVkIGF0IGVuZCBvZiB0aW1lb3V0LlxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsYXkgLSBUaW1lIGluIG1zIHRvIGRlbGF5IHRoZSBjYWxsIG9mIGBmdW5jYC5cbiAgICogQHJldHVybnMgZnVuY3Rpb25cbiAgICovXG4gIHRocm90dGxlOiBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCBkZWxheSkge1xuICAgIHZhciB0aW1lciA9IG51bGw7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLFxuICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxud2luZG93LkZvdW5kYXRpb24gPSBGb3VuZGF0aW9uO1xuXG4vLyBQb2x5ZmlsbCBmb3IgcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4oZnVuY3Rpb24gKCkge1xuICBpZiAoIURhdGUubm93IHx8ICF3aW5kb3cuRGF0ZS5ub3cpIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICB2YXIgdnAgPSB2ZW5kb3JzW2ldO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnAgKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHwgd2luZG93W3ZwICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIHx8ICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgdmFyIG5leHRUaW1lID0gTWF0aC5tYXgobGFzdFRpbWUgKyAxNiwgbm93KTtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7XG4gICAgICB9LCBuZXh0VGltZSAtIG5vdyk7XG4gICAgfTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjbGVhclRpbWVvdXQ7XG4gIH1cbiAgLyoqXG4gICAqIFBvbHlmaWxsIGZvciBwZXJmb3JtYW5jZS5ub3csIHJlcXVpcmVkIGJ5IHJBRlxuICAgKi9cbiAgaWYgKCF3aW5kb3cucGVyZm9ybWFuY2UgfHwgIXdpbmRvdy5wZXJmb3JtYW5jZS5ub3cpIHtcbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICBzdGFydDogRGF0ZS5ub3coKSxcbiAgICAgIG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSkoKTtcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAob1RoaXMpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGNsb3Nlc3QgdGhpbmcgcG9zc2libGUgdG8gdGhlIEVDTUFTY3JpcHQgNVxuICAgICAgLy8gaW50ZXJuYWwgSXNDYWxsYWJsZSBmdW5jdGlvblxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgLSB3aGF0IGlzIHRyeWluZyB0byBiZSBib3VuZCBpcyBub3QgY2FsbGFibGUnKTtcbiAgICB9XG5cbiAgICB2YXIgYUFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICBmVG9CaW5kID0gdGhpcyxcbiAgICAgICAgZk5PUCA9IGZ1bmN0aW9uIGZOT1AoKSB7fSxcbiAgICAgICAgZkJvdW5kID0gZnVuY3Rpb24gZkJvdW5kKCkge1xuICAgICAgcmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1AgPyB0aGlzIDogb1RoaXMsIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnByb3RvdHlwZSkge1xuICAgICAgLy8gbmF0aXZlIGZ1bmN0aW9ucyBkb24ndCBoYXZlIGEgcHJvdG90eXBlXG4gICAgICBmTk9QLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuICAgIH1cbiAgICBmQm91bmQucHJvdG90eXBlID0gbmV3IGZOT1AoKTtcblxuICAgIHJldHVybiBmQm91bmQ7XG4gIH07XG59XG4vLyBQb2x5ZmlsbCB0byBnZXQgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbiBpbiBJRTlcbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZShmbikge1xuICBpZiAoRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBmdW5jTmFtZVJlZ2V4ID0gL2Z1bmN0aW9uXFxzKFteKF17MSx9KVxcKC87XG4gICAgdmFyIHJlc3VsdHMgPSBmdW5jTmFtZVJlZ2V4LmV4ZWMoZm4udG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxID8gcmVzdWx0c1sxXS50cmltKCkgOiBcIlwiO1xuICB9IGVsc2UgaWYgKGZuLnByb3RvdHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZuLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKHN0cikge1xuICBpZiAoJ3RydWUnID09PSBzdHIpIHJldHVybiB0cnVlO2Vsc2UgaWYgKCdmYWxzZScgPT09IHN0cikgcmV0dXJuIGZhbHNlO2Vsc2UgaWYgKCFpc05hTihzdHIgKiAxKSkgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cbi8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4vLyBUaGFuayB5b3U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg5NTU1ODBcbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnRzLkZvdW5kYXRpb24gPSBGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dVkyOXlaUzVxY3lKZExDSnVZVzFsY3lJNld5SkdUMVZPUkVGVVNVOU9YMVpGVWxOSlQwNGlMQ0pHYjNWdVpHRjBhVzl1SWl3aWRtVnljMmx2YmlJc0lsOXdiSFZuYVc1eklpd2lYM1YxYVdSeklpd2ljR3gxWjJsdUlpd2libUZ0WlNJc0ltTnNZWE56VG1GdFpTSXNJbVoxYm1OMGFXOXVUbUZ0WlNJc0ltRjBkSEpPWVcxbElpd2lhSGx3YUdWdVlYUmxJaXdpY21WbmFYTjBaWEpRYkhWbmFXNGlMQ0p3YkhWbmFXNU9ZVzFsSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0luVjFhV1FpTENJa1pXeGxiV1Z1ZENJc0ltRjBkSElpTENKa1lYUmhJaXdpZEhKcFoyZGxjaUlzSW5CMWMyZ2lMQ0oxYm5KbFoybHpkR1Z5VUd4MVoybHVJaXdpYzNCc2FXTmxJaXdpYVc1a1pYaFBaaUlzSW5KbGJXOTJaVUYwZEhJaUxDSnlaVzF2ZG1WRVlYUmhJaXdpY0hKdmNDSXNJbkpsU1c1cGRDSXNJbkJzZFdkcGJuTWlMQ0pwYzBwUklpd2lKQ0lzSW1WaFkyZ2lMQ0pmYVc1cGRDSXNJblI1Y0dVaUxDSmZkR2hwY3lJc0ltWnVjeUlzSW5Cc1ozTWlMQ0ptYjNKRllXTm9JaXdpY0NJc0ltWnZkVzVrWVhScGIyNGlMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2laWEp5SWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aWNtVm1iRzkzSWl3aVpXeGxiU0lzSW1raUxDSWtaV3hsYlNJc0ltWnBibVFpTENKaFpHUkNZV05ySWl3aUpHVnNJaXdpYjNCMGN5SXNJbmRoY200aUxDSjBhR2x1WnlJc0luTndiR2wwSWl3aVpTSXNJbTl3ZENJc0ltMWhjQ0lzSW1Wc0lpd2lkSEpwYlNJc0luQmhjbk5sVm1Gc2RXVWlMQ0psY2lJc0ltZGxkRVp1VG1GdFpTSXNJbUZrWkZSdlNuRjFaWEo1SWl3aWJXVjBhRzlrSWl3aUpHNXZTbE1pTENKc1pXNW5kR2dpTENKeVpXMXZkbVZEYkdGemN5SXNJazFsWkdsaFVYVmxjbmtpTENKaGNtZHpJaXdpUVhKeVlYa2lMQ0p3Y205MGIzUjVjR1VpTENKemJHbGpaU0lzSW1OaGJHd2lMQ0poY21kMWJXVnVkSE1pTENKd2JIVm5RMnhoYzNNaUxDSjFibVJsWm1sdVpXUWlMQ0poY0hCc2VTSXNJbEpsWm1WeVpXNWpaVVZ5Y205eUlpd2lWSGx3WlVWeWNtOXlJaXdpWm00aUxDSjFkR2xzSWl3aWRHaHliM1IwYkdVaUxDSm1kVzVqSWl3aVpHVnNZWGtpTENKMGFXMWxjaUlzSW1OdmJuUmxlSFFpTENKelpYUlVhVzFsYjNWMElpd2lkMmx1Wkc5M0lpd2lSR0YwWlNJc0ltNXZkeUlzSW1kbGRGUnBiV1VpTENKMlpXNWtiM0p6SWl3aWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxJaXdpZG5BaUxDSmpZVzVqWld4QmJtbHRZWFJwYjI1R2NtRnRaU0lzSW5SbGMzUWlMQ0p1WVhacFoyRjBiM0lpTENKMWMyVnlRV2RsYm5RaUxDSnNZWE4wVkdsdFpTSXNJbU5oYkd4aVlXTnJJaXdpYm1WNGRGUnBiV1VpTENKTllYUm9JaXdpYldGNElpd2lZMnhsWVhKVWFXMWxiM1YwSWl3aWNHVnlabTl5YldGdVkyVWlMQ0p6ZEdGeWRDSXNJa1oxYm1OMGFXOXVJaXdpWW1sdVpDSXNJbTlVYUdseklpd2lZVUZ5WjNNaUxDSm1WRzlDYVc1a0lpd2laazVQVUNJc0ltWkNiM1Z1WkNJc0ltTnZibU5oZENJc0ltWjFibU5PWVcxbFVtVm5aWGdpTENKeVpYTjFiSFJ6SWl3aVpYaGxZeUlzSW5SdlUzUnlhVzVuSWl3aWMzUnlJaXdpYVhOT1lVNGlMQ0p3WVhKelpVWnNiMkYwSWl3aWNtVndiR0ZqWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3p0QlFVVkJPenM3TzBGQlEwRTdPMEZCUTBFN096czdRVUZGUVN4SlFVRkpRU3h4UWtGQmNVSXNWMEZCZWtJN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVsQlFVbERMR0ZCUVdFN1FVRkRaa01zVjBGQlUwWXNhMEpCUkUwN08wRkJSMlk3T3p0QlFVZEJSeXhaUVVGVkxFVkJUa3M3TzBGQlVXWTdPenRCUVVkQlF5eFZRVUZSTEVWQldFODdPMEZCWVdZN096czdRVUZKUVVNc1ZVRkJVU3huUWtGQlUwRXNUMEZCVkN4RlFVRnBRa01zU1VGQmFrSXNSVUZCZFVJN1FVRkROMEk3UVVGRFFUdEJRVU5CTEZGQlFVbERMRmxCUVdGRUxGRkJRVkZGTEdGQlFXRklMRTlCUVdJc1EwRkJla0k3UVVGRFFUdEJRVU5CTzBGQlEwRXNVVUZCU1Vrc1YwRkJXVU1zVlVGQlZVZ3NVMEZCVml4RFFVRm9RanM3UVVGRlFUdEJRVU5CTEZOQlFVdEtMRkZCUVV3c1EwRkJZMDBzVVVGQlpDeEpRVUV3UWl4TFFVRkxSaXhUUVVGTUxFbEJRV3RDUml4UFFVRTFRenRCUVVORUxFZEJNMEpqTzBGQk5FSm1PenM3T3pzN096czdRVUZUUVUwc2EwSkJRV2RDTEhkQ1FVRlRUaXhOUVVGVUxFVkJRV2xDUXl4SlFVRnFRaXhGUVVGelFqdEJRVU53UXl4UlFVRkpUU3hoUVVGaFRpeFBRVUZQU1N4VlFVRlZTaXhKUVVGV0xFTkJRVkFzUjBGQmVVSkZMR0ZCUVdGSUxFOUJRVTlSTEZkQlFYQkNMRVZCUVdsRFF5eFhRVUZxUXl4RlFVRXhRenRCUVVOQlZDeFhRVUZQVlN4SlFVRlFMRWRCUVdNc2FVTkJRVmtzUTBGQldpeEZRVUZsU0N4VlFVRm1MRU5CUVdRN08wRkJSVUVzVVVGQlJ5eERRVUZEVUN4UFFVRlBWeXhSUVVGUUxFTkJRV2RDUXl4SlFVRm9RaXhYUVVFMlFrd3NWVUZCTjBJc1EwRkJTaXhGUVVFclF6dEJRVUZGVUN4aFFVRlBWeXhSUVVGUUxFTkJRV2RDUXl4SlFVRm9RaXhYUVVFMlFrd3NWVUZCTjBJc1JVRkJNa05RTEU5QlFVOVZMRWxCUVd4RU8wRkJRVEJFTzBGQlF6TkhMRkZCUVVjc1EwRkJRMVlzVDBGQlQxY3NVVUZCVUN4RFFVRm5Ra1VzU1VGQmFFSXNRMEZCY1VJc1ZVRkJja0lzUTBGQlNpeEZRVUZ4UXp0QlFVRkZZaXhoUVVGUFZ5eFJRVUZRTEVOQlFXZENSU3hKUVVGb1FpeERRVUZ4UWl4VlFVRnlRaXhGUVVGcFEySXNUVUZCYWtNN1FVRkJNa003UVVGRE5VVTdPenM3UVVGSlRrRXNWMEZCVDFjc1VVRkJVQ3hEUVVGblFrY3NUMEZCYUVJc1kwRkJiVU5RTEZWQlFXNURPenRCUVVWQkxGTkJRVXRTTEUxQlFVd3NRMEZCV1dkQ0xFbEJRVm9zUTBGQmFVSm1MRTlCUVU5VkxFbEJRWGhDT3p0QlFVVkJPMEZCUTBRc1IwRndSR003UVVGeFJHWTdPenM3T3pzN08wRkJVVUZOTEc5Q1FVRnJRaXd3UWtGQlUyaENMRTFCUVZRc1JVRkJaMEk3UVVGRGFFTXNVVUZCU1U4c1lVRkJZVVlzVlVGQlZVWXNZVUZCWVVnc1QwRkJUMWNzVVVGQlVDeERRVUZuUWtVc1NVRkJhRUlzUTBGQmNVSXNWVUZCY2tJc1JVRkJhVU5NTEZkQlFUbERMRU5CUVZZc1EwRkJha0k3TzBGQlJVRXNVMEZCUzFRc1RVRkJUQ3hEUVVGWmEwSXNUVUZCV2l4RFFVRnRRaXhMUVVGTGJFSXNUVUZCVEN4RFFVRlpiVUlzVDBGQldpeERRVUZ2UW14Q0xFOUJRVTlWTEVsQlFUTkNMRU5CUVc1Q0xFVkJRWEZFTEVOQlFYSkVPMEZCUTBGV0xGZEJRVTlYTEZGQlFWQXNRMEZCWjBKUkxGVkJRV2hDTEZkQlFXMURXaXhWUVVGdVF5eEZRVUZwUkdFc1ZVRkJha1FzUTBGQk5FUXNWVUZCTlVRN1FVRkRUVHM3T3p0QlFVUk9MRXRCUzA5T0xFOUJURkFzYlVKQlN5dENVQ3hWUVV3dlFqdEJRVTFCTEZOQlFVa3NTVUZCU1dNc1NVRkJVaXhKUVVGblFuSkNMRTFCUVdoQ0xFVkJRWFZDTzBGQlEzSkNRU3hoUVVGUGNVSXNTVUZCVUN4SlFVRmxMRWxCUVdZc1EwRkVjVUlzUTBGRFJEdEJRVU55UWp0QlFVTkVPMEZCUTBRc1IwRXpSV003TzBGQk5rVm1PenM3T3pzN1FVRk5RME1zVlVGQlVTeG5Ra0ZCVTBNc1QwRkJWQ3hGUVVGcFFqdEJRVU4yUWl4UlFVRkpReXhQUVVGUFJDeHRRa0ZCYlVKRkxHZENRVUU1UWp0QlFVTkJMRkZCUVVjN1FVRkRSQ3hWUVVGSFJDeEpRVUZJTEVWQlFWRTdRVUZEVGtRc1owSkJRVkZITEVsQlFWSXNRMEZCWVN4WlFVRlZPMEZCUTNKQ0xHZERRVUZGTEVsQlFVWXNSVUZCVVdJc1NVRkJVaXhEUVVGaExGVkJRV0lzUlVGQmVVSmpMRXRCUVhwQ08wRkJRMFFzVTBGR1JEdEJRVWRFTEU5QlNrUXNUVUZKU3p0QlFVTklMRmxCUVVsRExHTkJRV05NTEU5QlFXUXNlVU5CUVdOQkxFOUJRV1FzUTBGQlNqdEJRVUZCTEZsQlEwRk5MRkZCUVZFc1NVRkVVanRCUVVGQkxGbEJSVUZETEUxQlFVMDdRVUZEU2l4dlFrRkJWU3huUWtGQlUwTXNTVUZCVkN4RlFVRmpPMEZCUTNSQ1FTeHBRa0ZCUzBNc1QwRkJUQ3hEUVVGaExGVkJRVk5ETEVOQlFWUXNSVUZCVnp0QlFVTjBRa0VzYTBKQlFVazFRaXhWUVVGVk5FSXNRMEZCVml4RFFVRktPMEZCUTBFc2IwTkJRVVVzVjBGQlZVRXNRMEZCVml4SFFVRmhMRWRCUVdZc1JVRkJiMEpETEZWQlFYQkNMRU5CUVN0Q0xFOUJRUzlDTzBGQlEwUXNZVUZJUkR0QlFVbEVMRmRCVGtjN1FVRlBTaXh2UWtGQlZTeHJRa0ZCVlR0QlFVTnNRbGdzYzBKQlFWVnNRaXhWUVVGVmEwSXNUMEZCVml4RFFVRldPMEZCUTBFc2EwTkJRVVVzVjBGQlZVRXNUMEZCVml4SFFVRnRRaXhIUVVGeVFpeEZRVUV3UWxjc1ZVRkJNVUlzUTBGQmNVTXNUMEZCY2tNN1FVRkRSQ3hYUVZaSE8wRkJWMG9zZFVKQlFXRXNjVUpCUVZVN1FVRkRja0lzYVVKQlFVc3NVVUZCVEN4RlFVRmxReXhQUVVGUFF5eEpRVUZRTEVOQlFWbFFMRTFCUVUwdlFpeFJRVUZzUWl4RFFVRm1PMEZCUTBRN1FVRmlSeXhUUVVaT08wRkJhVUpCWjBNc1dVRkJTVVlzU1VGQlNpeEZRVUZWVEN4UFFVRldPMEZCUTBRN1FVRkRSaXhMUVhwQ1JDeERRWGxDUXl4UFFVRk5ZeXhIUVVGT0xFVkJRVlU3UVVGRFZFTXNZMEZCVVVNc1MwRkJVaXhEUVVGalJpeEhRVUZrTzBGQlEwUXNTMEV6UWtRc1UwRXlRbEU3UVVGRFRpeGhRVUZQWkN4UFFVRlFPMEZCUTBRN1FVRkRSaXhIUVc1SVlUczdRVUZ4U0dZN096czdPMEZCUzBGcFFpeFZRVUZSTEdkQ1FVRlRReXhKUVVGVUxFVkJRV1ZzUWl4UFFVRm1MRVZCUVhkQ096dEJRVVU1UWp0QlFVTkJMRkZCUVVrc1QwRkJUMEVzVDBGQlVDeExRVUZ0UWl4WFFVRjJRaXhGUVVGdlF6dEJRVU5zUTBFc1owSkJRVlZaTEU5QlFVOURMRWxCUVZBc1EwRkJXU3hMUVVGTGRFTXNVVUZCYWtJc1EwRkJWanRCUVVORU8wRkJRMFE3UVVGSVFTeFRRVWxMTEVsQlFVa3NUMEZCVDNsQ0xFOUJRVkFzUzBGQmJVSXNVVUZCZGtJc1JVRkJhVU03UVVGRGNFTkJMR3RDUVVGVkxFTkJRVU5CTEU5QlFVUXNRMEZCVmp0QlFVTkVPenRCUVVWRUxGRkJRVWxOTEZGQlFWRXNTVUZCV2pzN1FVRkZRVHRCUVVOQlNpeHhRa0ZCUlVNc1NVRkJSaXhEUVVGUFNDeFBRVUZRTEVWQlFXZENMRlZCUVZOdFFpeERRVUZVTEVWQlFWbDZReXhKUVVGYUxFVkJRV3RDTzBGQlEyaERPMEZCUTBFc1ZVRkJTVVFzVTBGQlV6WkNMRTFCUVUwdlFpeFJRVUZPTEVOQlFXVkhMRWxCUVdZc1EwRkJZanM3UVVGRlFUdEJRVU5CTEZWQlFVa3dReXhSUVVGUkxITkNRVUZGUml4SlFVRkdMRVZCUVZGSExFbEJRVklzUTBGQllTeFhRVUZUTTBNc1NVRkJWQ3hIUVVGakxFZEJRVE5DTEVWQlFXZERORU1zVDBGQmFFTXNRMEZCZDBNc1YwRkJVelZETEVsQlFWUXNSMEZCWXl4SFFVRjBSQ3hEUVVGYU96dEJRVVZCTzBGQlEwRXdReXhaUVVGTmFrSXNTVUZCVGl4RFFVRlhMRmxCUVZjN1FVRkRjRUlzV1VGQlNXOUNMRTFCUVUwc2MwSkJRVVVzU1VGQlJpeERRVUZXTzBGQlFVRXNXVUZEU1VNc1QwRkJUeXhGUVVSWU8wRkJSVUU3UVVGRFFTeFpRVUZKUkN4SlFVRkpha01zU1VGQlNpeERRVUZUTEZWQlFWUXNRMEZCU2l4RlFVRXdRanRCUVVONFFubENMR3RDUVVGUlZTeEpRVUZTTEVOQlFXRXNlVUpCUVhWQ0wwTXNTVUZCZGtJc1IwRkJORUlzYzBSQlFYcERPMEZCUTBFN1FVRkRSRHM3UVVGRlJDeFpRVUZITmtNc1NVRkJTV3hETEVsQlFVb3NRMEZCVXl4alFVRlVMRU5CUVVnc1JVRkJORUk3UVVGRE1VSXNZMEZCU1hGRExGRkJRVkZJTEVsQlFVbHNReXhKUVVGS0xFTkJRVk1zWTBGQlZDeEZRVUY1UW5ORExFdEJRWHBDTEVOQlFTdENMRWRCUVM5Q0xFVkJRVzlEYkVJc1QwRkJjRU1zUTBGQk5FTXNWVUZCVTIxQ0xFTkJRVlFzUlVGQldWUXNRMEZCV2l4RlFVRmpPMEZCUTNCRkxHZENRVUZKVlN4TlFVRk5SQ3hGUVVGRlJDeExRVUZHTEVOQlFWRXNSMEZCVWl4RlFVRmhSeXhIUVVGaUxFTkJRV2xDTEZWQlFWTkRMRVZCUVZRc1JVRkJXVHRCUVVGRkxIRkNRVUZQUVN4SFFVRkhReXhKUVVGSUxFVkJRVkE3UVVGQmJVSXNZVUZCYkVRc1EwRkJWanRCUVVOQkxHZENRVUZIU0N4SlFVRkpMRU5CUVVvc1EwRkJTQ3hGUVVGWFRDeExRVUZMU3l4SlFVRkpMRU5CUVVvc1EwRkJUQ3hKUVVGbFNTeFhRVUZYU2l4SlFVRkpMRU5CUVVvc1EwRkJXQ3hEUVVGbU8wRkJRMW9zVjBGSVZ5eERRVUZhTzBGQlNVUTdRVUZEUkN4WlFVRkhPMEZCUTBST0xHTkJRVWxxUXl4SlFVRktMRU5CUVZNc1ZVRkJWQ3hGUVVGeFFpeEpRVUZKWWl4TlFVRktMRU5CUVZjc2MwSkJRVVVzU1VGQlJpeERRVUZZTEVWQlFXOUNLME1zU1VGQmNFSXNRMEZCY2tJN1FVRkRSQ3hUUVVaRUxFTkJSVU1zVDBGQlRWVXNSVUZCVGl4RlFVRlRPMEZCUTFKdVFpeHJRa0ZCVVVNc1MwRkJVaXhEUVVGamEwSXNSVUZCWkR0QlFVTkVMRk5CU2tRc1UwRkpVVHRCUVVOT08wRkJRMFE3UVVGRFJpeFBRWFJDUkR0QlFYVkNSQ3hMUVM5Q1JEdEJRV2REUkN4SFFYaExZenRCUVhsTFprTXNZVUZCVjNaRUxGbEJla3RKT3p0QlFUSkxabmRFTEdWQlFXRXNjVUpCUVZOc1F5eERRVUZVTEVWQlFWazdRVUZEZGtJN1FVRkRRVHRCUVVOQk96czdPMEZCU1VFc1VVRkJTVk1zWVVGQllTeFRRVUZpUVN4VlFVRmhMRU5CUVZNd1FpeE5RVUZVTEVWQlFXbENPMEZCUTJoRExGVkJRVWxvUXl4alFVRmpaME1zVFVGQlpDeDVRMEZCWTBFc1RVRkJaQ3hEUVVGS08wRkJRVUVzVlVGRFNVTXNVVUZCVVhCRExFVkJRVVVzVVVGQlJpeERRVVJhT3p0QlFVZEJMRlZCUVVkdlF5eE5RVUZOUXl4TlFVRlVMRVZCUVdkQ08wRkJRMlJFTEdOQlFVMUZMRmRCUVU0c1EwRkJhMElzVDBGQmJFSTdRVUZEUkRzN1FVRkZSQ3hWUVVGSGJrTXNVMEZCVXl4WFFVRmFMRVZCUVhkQ08wRkJRVU03UVVGRGRrSnZReXh2UTBGQlYzSkRMRXRCUVZnN1FVRkRRUzlDTEcxQ1FVRlhORU1zVFVGQldDeERRVUZyUWl4SlFVRnNRanRCUVVORUxFOUJTRVFzVFVGSFRTeEpRVUZIV2l4VFFVRlRMRkZCUVZvc1JVRkJjVUk3UVVGQlF6dEJRVU14UWl4WlFVRkpjVU1zVDBGQlQwTXNUVUZCVFVNc1UwRkJUaXhEUVVGblFrTXNTMEZCYUVJc1EwRkJjMEpETEVsQlFYUkNMRU5CUVRKQ1F5eFRRVUV6UWl4RlFVRnpReXhEUVVGMFF5eERRVUZZTEVOQlJIbENMRU5CUXpKQ08wRkJRM0JFTEZsQlFVbERMRmxCUVZrc1MwRkJTekZFTEVsQlFVd3NRMEZCVlN4VlFVRldMRU5CUVdoQ0xFTkJSbmxDTEVOQlJXRTdPMEZCUlhSRExGbEJRVWN3UkN4alFVRmpReXhUUVVGa0xFbEJRVEpDUkN4VlFVRlZXQ3hOUVVGV0xFMUJRWE5DV1N4VFFVRndSQ3hGUVVFNFJEdEJRVUZETzBGQlF6ZEVMR05CUVVjc1MwRkJTMVlzVFVGQlRDeExRVUZuUWl4RFFVRnVRaXhGUVVGeFFqdEJRVUZETzBGQlEyeENVeXh6UWtGQlZWZ3NUVUZCVml4RlFVRnJRbUVzUzBGQmJFSXNRMEZCZDBKR0xGTkJRWGhDTEVWQlFXMURUaXhKUVVGdVF6dEJRVU5JTEZkQlJrUXNUVUZGU3p0QlFVTklMR2xDUVVGTGRrTXNTVUZCVEN4RFFVRlZMRlZCUVZOblFpeERRVUZVTEVWQlFWbFpMRVZCUVZvc1JVRkJaVHRCUVVGRE8wRkJRM2hDYVVJc2QwSkJRVlZZTEUxQlFWWXNSVUZCYTBKaExFdEJRV3hDTEVOQlFYZENhRVFzUlVGQlJUWkNMRVZCUVVZc1JVRkJUWHBETEVsQlFVNHNRMEZCVnl4VlFVRllMRU5CUVhoQ0xFVkJRV2RFYjBRc1NVRkJhRVE3UVVGRFJDeGhRVVpFTzBGQlIwUTdRVUZEUml4VFFWSkVMRTFCVVVzN1FVRkJRenRCUVVOS0xHZENRVUZOTEVsQlFVbFRMR05CUVVvc1EwRkJiVUlzYlVKQlFXMUNaQ3hOUVVGdVFpeEhRVUUwUWl4dFEwRkJOVUlzU1VGQmJVVlhMRmxCUVZsd1JTeGhRVUZoYjBVc1UwRkJZaXhEUVVGYUxFZEJRWE5ETEdOQlFYcEhMRWxCUVRKSUxFZEJRVGxKTEVOQlFVNDdRVUZEUkR0QlFVTkdMRTlCWmtzc1RVRmxSRHRCUVVGRE8wRkJRMG9zWTBGQlRTeEpRVUZKU1N4VFFVRktMRzlDUVVFNFFpOURMRWxCUVRsQ0xHdEhRVUZPTzBGQlEwUTdRVUZEUkN4aFFVRlBMRWxCUVZBN1FVRkRSQ3hMUVRsQ1JEdEJRU3RDUVVnc1RVRkJSVzFFTEVWQlFVWXNRMEZCU3pGRExGVkJRVXdzUjBGQmEwSkJMRlZCUVd4Q08wRkJRMEVzVjBGQlQxUXNRMEZCVUR0QlFVTkVPMEZCYms1akxFTkJRV3BDT3p0QlFYTk9RVGRDTEZkQlFWZHBSaXhKUVVGWUxFZEJRV3RDTzBGQlEyaENPenM3T3pzN08wRkJUMEZETEZsQlFWVXNhMEpCUVZWRExFbEJRVllzUlVGQlowSkRMRXRCUVdoQ0xFVkJRWFZDTzBGQlF5OUNMRkZCUVVsRExGRkJRVkVzU1VGQldqczdRVUZGUVN4WFFVRlBMRmxCUVZrN1FVRkRha0lzVlVGQlNVTXNWVUZCVlN4SlFVRmtPMEZCUVVFc1ZVRkJiMEpxUWl4UFFVRlBTeXhUUVVFelFqczdRVUZGUVN4VlFVRkpWeXhWUVVGVkxFbEJRV1FzUlVGQmIwSTdRVUZEYkVKQkxHZENRVUZSUlN4WFFVRlhMRmxCUVZrN1FVRkROMEpLTEdWQlFVdE9MRXRCUVV3c1EwRkJWMU1zVDBGQldDeEZRVUZ2UW1wQ0xFbEJRWEJDTzBGQlEwRm5RaXhyUWtGQlVTeEpRVUZTTzBGQlEwUXNVMEZJVHl4RlFVZE1SQ3hMUVVoTExFTkJRVkk3UVVGSlJEdEJRVU5HTEV0QlZFUTdRVUZWUkR0QlFYSkNaU3hEUVVGc1FqczdRVUYzUWtGSkxFOUJRVTk0Uml4VlFVRlFMRWRCUVc5Q1FTeFZRVUZ3UWpzN1FVRkZRVHRCUVVOQkxFTkJRVU1zV1VGQlZ6dEJRVU5XTEUxQlFVa3NRMEZCUTNsR0xFdEJRVXRETEVkQlFVNHNTVUZCWVN4RFFVRkRSaXhQUVVGUFF5eEpRVUZRTEVOQlFWbERMRWRCUVRsQ0xFVkJRMFZHTEU5QlFVOURMRWxCUVZBc1EwRkJXVU1zUjBGQldpeEhRVUZyUWtRc1MwRkJTME1zUjBGQlRDeEhRVUZYTEZsQlFWYzdRVUZCUlN4WFFVRlBMRWxCUVVsRUxFbEJRVW9zUjBGQlYwVXNUMEZCV0N4RlFVRlFPMEZCUVRoQ0xFZEJRWGhGT3p0QlFVVkdMRTFCUVVsRExGVkJRVlVzUTBGQlF5eFJRVUZFTEVWQlFWY3NTMEZCV0N4RFFVRmtPMEZCUTBFc1QwRkJTeXhKUVVGSk9VTXNTVUZCU1N4RFFVRmlMRVZCUVdkQ1FTeEpRVUZKT0VNc1VVRkJVVEZDTEUxQlFWb3NTVUZCYzBJc1EwRkJRM05DTEU5QlFVOUxMSEZDUVVFNVF5eEZRVUZ4UlN4RlFVRkZMME1zUTBGQmRrVXNSVUZCTUVVN1FVRkRkRVVzVVVGQlNXZEVMRXRCUVV0R0xGRkJRVkU1UXl4RFFVRlNMRU5CUVZRN1FVRkRRVEJETEZkQlFVOUxMSEZDUVVGUUxFZEJRU3RDVEN4UFFVRlBUU3hMUVVGSExIVkNRVUZXTEVOQlFTOUNPMEZCUTBGT0xGZEJRVTlQTEc5Q1FVRlFMRWRCUVN0Q1VDeFBRVUZQVFN4TFFVRkhMSE5DUVVGV0xFdEJRMFJPTEU5QlFVOU5MRXRCUVVjc05rSkJRVllzUTBGRU9VSTdRVUZGU0R0QlFVTkVMRTFCUVVrc2RVSkJRWFZDUlN4SlFVRjJRaXhEUVVFMFFsSXNUMEZCVDFNc1UwRkJVQ3hEUVVGcFFrTXNVMEZCTjBNc1MwRkRReXhEUVVGRFZpeFBRVUZQU3l4eFFrRkVWQ3hKUVVOclF5eERRVUZEVEN4UFFVRlBUeXh2UWtGRU9VTXNSVUZEYjBVN1FVRkRiRVVzVVVGQlNVa3NWMEZCVnl4RFFVRm1PMEZCUTBGWUxGZEJRVTlMTEhGQ1FVRlFMRWRCUVN0Q0xGVkJRVk5QTEZGQlFWUXNSVUZCYlVJN1FVRkRPVU1zVlVGQlNWWXNUVUZCVFVRc1MwRkJTME1zUjBGQlRDeEZRVUZXTzBGQlEwRXNWVUZCU1Zjc1YwRkJWME1zUzBGQlMwTXNSMEZCVEN4RFFVRlRTaXhYUVVGWExFVkJRWEJDTEVWQlFYZENWQ3hIUVVGNFFpeERRVUZtTzBGQlEwRXNZVUZCVDBnc1YwRkJWeXhaUVVGWE8wRkJRVVZoTEdsQ1FVRlRSQ3hYUVVGWFJTeFJRVUZ3UWp0QlFVRm5ReXhQUVVGNFJDeEZRVU5YUVN4WFFVRlhXQ3hIUVVSMFFpeERRVUZRTzBGQlJVZ3NTMEZNUkR0QlFVMUJSaXhYUVVGUFR5eHZRa0ZCVUN4SFFVRTRRbE1zV1VGQk9VSTdRVUZEUkR0QlFVTkVPenM3UVVGSFFTeE5RVUZITEVOQlFVTm9RaXhQUVVGUGFVSXNWMEZCVWl4SlFVRjFRaXhEUVVGRGFrSXNUMEZCVDJsQ0xGZEJRVkFzUTBGQmJVSm1MRWRCUVRsRExFVkJRV3RFTzBGQlEyaEVSaXhYUVVGUGFVSXNWMEZCVUN4SFFVRnhRanRCUVVOdVFrTXNZVUZCVDJwQ0xFdEJRVXRETEVkQlFVd3NSVUZFV1R0QlFVVnVRa0VzVjBGQlN5eGxRVUZWTzBGQlFVVXNaVUZCVDBRc1MwRkJTME1zUjBGQlRDeExRVUZoTEV0QlFVdG5RaXhMUVVGNlFqdEJRVUZwUXp0QlFVWXZRaXhMUVVGeVFqdEJRVWxFTzBGQlEwWXNRMEV2UWtRN1FVRm5RMEVzU1VGQlNTeERRVUZEUXl4VFFVRlRjRU1zVTBGQlZDeERRVUZ0UW5GRExFbEJRWGhDTEVWQlFUaENPMEZCUXpWQ1JDeFhRVUZUY0VNc1UwRkJWQ3hEUVVGdFFuRkRMRWxCUVc1Q0xFZEJRVEJDTEZWQlFWTkRMRXRCUVZRc1JVRkJaMEk3UVVGRGVFTXNVVUZCU1N4UFFVRlBMRWxCUVZBc1MwRkJaMElzVlVGQmNFSXNSVUZCWjBNN1FVRkRPVUk3UVVGRFFUdEJRVU5CTEZsQlFVMHNTVUZCU1RsQ0xGTkJRVW9zUTBGQll5eHpSVUZCWkN4RFFVRk9PMEZCUTBRN08wRkJSVVFzVVVGQlNTdENMRkZCUVZWNFF5eE5RVUZOUXl4VFFVRk9MRU5CUVdkQ1F5eExRVUZvUWl4RFFVRnpRa01zU1VGQmRFSXNRMEZCTWtKRExGTkJRVE5DTEVWQlFYTkRMRU5CUVhSRExFTkJRV1E3UVVGQlFTeFJRVU5KY1VNc1ZVRkJWU3hKUVVSa08wRkJRVUVzVVVGRlNVTXNUMEZCVlN4VFFVRldRU3hKUVVGVkxFZEJRVmNzUTBGQlJTeERRVVl6UWp0QlFVRkJMRkZCUjBsRExGTkJRVlVzVTBGQlZrRXNUVUZCVlN4SFFVRlhPMEZCUTI1Q0xHRkJRVTlHTEZGQlFWRnNReXhMUVVGU0xFTkJRV01zWjBKQlFXZENiVU1zU1VGQmFFSXNSMEZEV2l4SlFVUlpMRWRCUlZwSUxFdEJSa1lzUlVGSFFVTXNUVUZCVFVrc1RVRkJUaXhEUVVGaE5VTXNUVUZCVFVNc1UwRkJUaXhEUVVGblFrTXNTMEZCYUVJc1EwRkJjMEpETEVsQlFYUkNMRU5CUVRKQ1F5eFRRVUV6UWl4RFFVRmlMRU5CU0VFc1EwRkJVRHRCUVVsRUxFdEJVa3c3TzBGQlZVRXNVVUZCU1N4TFFVRkxTQ3hUUVVGVUxFVkJRVzlDTzBGQlEyeENPMEZCUTBGNVF5eFhRVUZMZWtNc1UwRkJUQ3hIUVVGcFFpeExRVUZMUVN4VFFVRjBRanRCUVVORU8wRkJRMFF3UXl4WFFVRlBNVU1zVTBGQlVDeEhRVUZ0UWl4SlFVRkplVU1zU1VGQlNpeEZRVUZ1UWpzN1FVRkZRU3hYUVVGUFF5eE5RVUZRTzBGQlEwUXNSMEY0UWtRN1FVRjVRa1E3UVVGRFJEdEJRVU5CTEZOQlFWTXhSeXhaUVVGVUxFTkJRWE5DZVVVc1JVRkJkRUlzUlVGQk1FSTdRVUZEZUVJc1RVRkJTVEpDTEZOQlFWTndReXhUUVVGVUxFTkJRVzFDYkVVc1NVRkJia0lzUzBGQk5FSjFSU3hUUVVGb1F5eEZRVUV5UXp0QlFVTjZReXhSUVVGSmRVTXNaMEpCUVdkQ0xIZENRVUZ3UWp0QlFVTkJMRkZCUVVsRExGVkJRVmRFTEdGQlFVUXNRMEZCWjBKRkxFbEJRV2hDTEVOQlFYTkNja01zUlVGQlJDeERRVUZMYzBNc1VVRkJUQ3hGUVVGeVFpeERRVUZrTzBGQlEwRXNWMEZCVVVZc1YwRkJWMEVzVVVGQlVXeEVMRTFCUVZJc1IwRkJhVUlzUTBGQk4wSXNSMEZCYTBOclJDeFJRVUZSTEVOQlFWSXNSVUZCVjNwRUxFbEJRVmdzUlVGQmJFTXNSMEZCYzBRc1JVRkJOMFE3UVVGRFJDeEhRVXBFTEUxQlMwc3NTVUZCU1hGQ0xFZEJRVWRVTEZOQlFVZ3NTMEZCYVVKTExGTkJRWEpDTEVWQlFXZERPMEZCUTI1RExGZEJRVTlKTEVkQlFVZHdSU3hYUVVGSUxFTkJRV1ZRTEVsQlFYUkNPMEZCUTBRc1IwRkdTU3hOUVVkQk8wRkJRMGdzVjBGQlR6SkZMRWRCUVVkVUxGTkJRVWdzUTBGQllUTkVMRmRCUVdJc1EwRkJlVUpRTEVsQlFXaERPMEZCUTBRN1FVRkRSanRCUVVORUxGTkJRVk4xUkN4VlFVRlVMRU5CUVc5Q01rUXNSMEZCY0VJc1JVRkJkMEk3UVVGRGRFSXNUVUZCU1N4WFFVRlhRU3hIUVVGbUxFVkJRVzlDTEU5QlFVOHNTVUZCVUN4RFFVRndRaXhMUVVOTExFbEJRVWtzV1VGQldVRXNSMEZCYUVJc1JVRkJjVUlzVDBGQlR5eExRVUZRTEVOQlFYSkNMRXRCUTBFc1NVRkJTU3hEUVVGRFF5eE5RVUZOUkN4TlFVRk5MRU5CUVZvc1EwRkJUQ3hGUVVGeFFpeFBRVUZQUlN4WFFVRlhSaXhIUVVGWUxFTkJRVkE3UVVGRE1VSXNVMEZCVDBFc1IwRkJVRHRCUVVORU8wRkJRMFE3UVVGRFFUdEJRVU5CTEZOQlFWTTVSeXhUUVVGVUxFTkJRVzFDT0Vjc1IwRkJia0lzUlVGQmQwSTdRVUZEZEVJc1UwRkJUMEVzU1VGQlNVY3NUMEZCU2l4RFFVRlpMR2xDUVVGYUxFVkJRU3RDTEU5QlFTOUNMRVZCUVhkRE4wY3NWMEZCZUVNc1JVRkJVRHRCUVVORU96dFJRVVZQWWl4VkxFZEJRVUZCTEZVaUxDSm1hV3hsSWpvaVptOTFibVJoZEdsdmJpNWpiM0psTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNibWx0Y0c5eWRDQWtJR1p5YjIwZ0oycHhkV1Z5ZVNjN1hHNXBiWEJ2Y25RZ2V5QkhaWFJaYjBScFoybDBjeUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbU52Y21Vbk8xeHVhVzF3YjNKMElIc2dUV1ZrYVdGUmRXVnllU0I5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbTFsWkdsaFVYVmxjbmtuTzF4dVhHNTJZWElnUms5VlRrUkJWRWxQVGw5V1JWSlRTVTlPSUQwZ0p6WXVOQzQwTFhKak1TYzdYRzVjYmk4dklFZHNiMkpoYkNCR2IzVnVaR0YwYVc5dUlHOWlhbVZqZEZ4dUx5OGdWR2hwY3lCcGN5QmhkSFJoWTJobFpDQjBieUIwYUdVZ2QybHVaRzkzTENCdmNpQjFjMlZrSUdGeklHRWdiVzlrZFd4bElHWnZjaUJCVFVRdlFuSnZkM05sY21sbWVWeHVkbUZ5SUVadmRXNWtZWFJwYjI0Z1BTQjdYRzRnSUhabGNuTnBiMjQ2SUVaUFZVNUVRVlJKVDA1ZlZrVlNVMGxQVGl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVTNSdmNtVnpJR2x1YVhScFlXeHBlbVZrSUhCc2RXZHBibk11WEc0Z0lDQXFMMXh1SUNCZmNHeDFaMmx1Y3pvZ2UzMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTjBiM0psY3lCblpXNWxjbUYwWldRZ2RXNXBjWFZsSUdsa2N5Qm1iM0lnY0d4MVoybHVJR2x1YzNSaGJtTmxjMXh1SUNBZ0tpOWNiaUFnWDNWMWFXUnpPaUJiWFN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdWbWFXNWxjeUJoSUVadmRXNWtZWFJwYjI0Z2NHeDFaMmx1TENCaFpHUnBibWNnYVhRZ2RHOGdkR2hsSUdCR2IzVnVaR0YwYVc5dVlDQnVZVzFsYzNCaFkyVWdZVzVrSUhSb1pTQnNhWE4wSUc5bUlIQnNkV2RwYm5NZ2RHOGdhVzVwZEdsaGJHbDZaU0IzYUdWdUlISmxabXh2ZDJsdVp5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhCc2RXZHBiaUF0SUZSb1pTQmpiMjV6ZEhKMVkzUnZjaUJ2WmlCMGFHVWdjR3gxWjJsdUxseHVJQ0FnS2k5Y2JpQWdjR3gxWjJsdU9pQm1kVzVqZEdsdmJpaHdiSFZuYVc0c0lHNWhiV1VwSUh0Y2JpQWdJQ0F2THlCUFltcGxZM1FnYTJWNUlIUnZJSFZ6WlNCM2FHVnVJR0ZrWkdsdVp5QjBieUJuYkc5aVlXd2dSbTkxYm1SaGRHbHZiaUJ2WW1wbFkzUmNiaUFnSUNBdkx5QkZlR0Z0Y0d4bGN6b2dSbTkxYm1SaGRHbHZiaTVTWlhabFlXd3NJRVp2ZFc1a1lYUnBiMjR1VDJabVEyRnVkbUZ6WEc0Z0lDQWdkbUZ5SUdOc1lYTnpUbUZ0WlNBOUlDaHVZVzFsSUh4OElHWjFibU4wYVc5dVRtRnRaU2h3YkhWbmFXNHBLVHRjYmlBZ0lDQXZMeUJQWW1wbFkzUWdhMlY1SUhSdklIVnpaU0IzYUdWdUlITjBiM0pwYm1jZ2RHaGxJSEJzZFdkcGJpd2dZV3h6YnlCMWMyVmtJSFJ2SUdOeVpXRjBaU0IwYUdVZ2FXUmxiblJwWm5scGJtY2daR0YwWVNCaGRIUnlhV0oxZEdVZ1ptOXlJSFJvWlNCd2JIVm5hVzVjYmlBZ0lDQXZMeUJGZUdGdGNHeGxjem9nWkdGMFlTMXlaWFpsWVd3c0lHUmhkR0V0YjJabUxXTmhiblpoYzF4dUlDQWdJSFpoY2lCaGRIUnlUbUZ0WlNBZ1BTQm9lWEJvWlc1aGRHVW9ZMnhoYzNOT1lXMWxLVHRjYmx4dUlDQWdJQzh2SUVGa1pDQjBieUIwYUdVZ1JtOTFibVJoZEdsdmJpQnZZbXBsWTNRZ1lXNWtJSFJvWlNCd2JIVm5hVzV6SUd4cGMzUWdLR1p2Y2lCeVpXWnNiM2RwYm1jcFhHNGdJQ0FnZEdocGN5NWZjR3gxWjJsdWMxdGhkSFJ5VG1GdFpWMGdQU0IwYUdselcyTnNZWE56VG1GdFpWMGdQU0J3YkhWbmFXNDdYRzRnSUgwc1hHNGdJQzhxS2x4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dVRzl3ZFd4aGRHVnpJSFJvWlNCZmRYVnBaSE1nWVhKeVlYa2dkMmwwYUNCd2IybHVkR1Z5Y3lCMGJ5QmxZV05vSUdsdVpHbDJhV1IxWVd3Z2NHeDFaMmx1SUdsdWMzUmhibU5sTGx4dUlDQWdLaUJCWkdSeklIUm9aU0JnZW1aUWJIVm5hVzVnSUdSaGRHRXRZWFIwY21saWRYUmxJSFJ2SUhCeWIyZHlZVzF0WVhScFkyRnNiSGtnWTNKbFlYUmxaQ0J3YkhWbmFXNXpJSFJ2SUdGc2JHOTNJSFZ6WlNCdlppQWtLSE5sYkdWamRHOXlLUzVtYjNWdVpHRjBhVzl1S0cxbGRHaHZaQ2tnWTJGc2JITXVYRzRnSUNBcUlFRnNjMjhnWm1seVpYTWdkR2hsSUdsdWFYUnBZV3hwZW1GMGFXOXVJR1YyWlc1MElHWnZjaUJsWVdOb0lIQnNkV2RwYml3Z1kyOXVjMjlzYVdSaGRHbHVaeUJ5WlhCbGRHbDBhWFpsSUdOdlpHVXVYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCd2JIVm5hVzRnTFNCaGJpQnBibk4wWVc1alpTQnZaaUJoSUhCc2RXZHBiaXdnZFhOMVlXeHNlU0JnZEdocGMyQWdhVzRnWTI5dWRHVjRkQzVjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1VnTFNCMGFHVWdibUZ0WlNCdlppQjBhR1VnY0d4MVoybHVMQ0J3WVhOelpXUWdZWE1nWVNCallXMWxiRU5oYzJWa0lITjBjbWx1Wnk1Y2JpQWdJQ29nUUdacGNtVnpJRkJzZFdkcGJpTnBibWwwWEc0Z0lDQXFMMXh1SUNCeVpXZHBjM1JsY2xCc2RXZHBiam9nWm5WdVkzUnBiMjRvY0d4MVoybHVMQ0J1WVcxbEtYdGNiaUFnSUNCMllYSWdjR3gxWjJsdVRtRnRaU0E5SUc1aGJXVWdQeUJvZVhCb1pXNWhkR1VvYm1GdFpTa2dPaUJtZFc1amRHbHZiazVoYldVb2NHeDFaMmx1TG1OdmJuTjBjblZqZEc5eUtTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dUlDQWdJSEJzZFdkcGJpNTFkV2xrSUQwZ1IyVjBXVzlFYVdkcGRITW9OaXdnY0d4MVoybHVUbUZ0WlNrN1hHNWNiaUFnSUNCcFppZ2hjR3gxWjJsdUxpUmxiR1Z0Wlc1MExtRjBkSElvWUdSaGRHRXRKSHR3YkhWbmFXNU9ZVzFsZldBcEtYc2djR3gxWjJsdUxpUmxiR1Z0Wlc1MExtRjBkSElvWUdSaGRHRXRKSHR3YkhWbmFXNU9ZVzFsZldBc0lIQnNkV2RwYmk1MWRXbGtLVHNnZlZ4dUlDQWdJR2xtS0NGd2JIVm5hVzR1SkdWc1pXMWxiblF1WkdGMFlTZ25lbVpRYkhWbmFXNG5LU2w3SUhCc2RXZHBiaTRrWld4bGJXVnVkQzVrWVhSaEtDZDZabEJzZFdkcGJpY3NJSEJzZFdkcGJpazdJSDFjYmlBZ0lDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ0FnS2lCR2FYSmxjeUIzYUdWdUlIUm9aU0J3YkhWbmFXNGdhR0Z6SUdsdWFYUnBZV3hwZW1Wa0xseHVJQ0FnSUNBZ0lDQWdJQ0FxSUVCbGRtVnVkQ0JRYkhWbmFXNGphVzVwZEZ4dUlDQWdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lIQnNkV2RwYmk0a1pXeGxiV1Z1ZEM1MGNtbG5aMlZ5S0dCcGJtbDBMbnBtTGlSN2NHeDFaMmx1VG1GdFpYMWdLVHRjYmx4dUlDQWdJSFJvYVhNdVgzVjFhV1J6TG5CMWMyZ29jR3gxWjJsdUxuVjFhV1FwTzF4dVhHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOUxGeHVJQ0F2S2lwY2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFJRkpsYlc5MlpYTWdkR2hsSUhCc2RXZHBibk1nZFhWcFpDQm1jbTl0SUhSb1pTQmZkWFZwWkhNZ1lYSnlZWGt1WEc0Z0lDQXFJRkpsYlc5MlpYTWdkR2hsSUhwbVVHeDFaMmx1SUdSaGRHRWdZWFIwY21saWRYUmxMQ0JoY3lCM1pXeHNJR0Z6SUhSb1pTQmtZWFJoTFhCc2RXZHBiaTF1WVcxbElHRjBkSEpwWW5WMFpTNWNiaUFnSUNvZ1FXeHpieUJtYVhKbGN5QjBhR1VnWkdWemRISnZlV1ZrSUdWMlpXNTBJR1p2Y2lCMGFHVWdjR3gxWjJsdUxDQmpiMjV6YjJ4cFpHRjBhVzVuSUhKbGNHVjBhWFJwZG1VZ1kyOWtaUzVjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIQnNkV2RwYmlBdElHRnVJR2x1YzNSaGJtTmxJRzltSUdFZ2NHeDFaMmx1TENCMWMzVmhiR3g1SUdCMGFHbHpZQ0JwYmlCamIyNTBaWGgwTGx4dUlDQWdLaUJBWm1seVpYTWdVR3gxWjJsdUkyUmxjM1J5YjNsbFpGeHVJQ0FnS2k5Y2JpQWdkVzV5WldkcGMzUmxjbEJzZFdkcGJqb2dablZ1WTNScGIyNG9jR3gxWjJsdUtYdGNiaUFnSUNCMllYSWdjR3gxWjJsdVRtRnRaU0E5SUdoNWNHaGxibUYwWlNobWRXNWpkR2x2Yms1aGJXVW9jR3gxWjJsdUxpUmxiR1Z0Wlc1MExtUmhkR0VvSjNwbVVHeDFaMmx1SnlrdVkyOXVjM1J5ZFdOMGIzSXBLVHRjYmx4dUlDQWdJSFJvYVhNdVgzVjFhV1J6TG5Od2JHbGpaU2gwYUdsekxsOTFkV2xrY3k1cGJtUmxlRTltS0hCc2RXZHBiaTUxZFdsa0tTd2dNU2s3WEc0Z0lDQWdjR3gxWjJsdUxpUmxiR1Z0Wlc1MExuSmxiVzkyWlVGMGRISW9ZR1JoZEdFdEpIdHdiSFZuYVc1T1lXMWxmV0FwTG5KbGJXOTJaVVJoZEdFb0ozcG1VR3gxWjJsdUp5bGNiaUFnSUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDQWdLaUJHYVhKbGN5QjNhR1Z1SUhSb1pTQndiSFZuYVc0Z2FHRnpJR0psWlc0Z1pHVnpkSEp2ZVdWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FxSUVCbGRtVnVkQ0JRYkhWbmFXNGpaR1Z6ZEhKdmVXVmtYRzRnSUNBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lDQWdMblJ5YVdkblpYSW9ZR1JsYzNSeWIzbGxaQzU2Wmk0a2UzQnNkV2RwYms1aGJXVjlZQ2s3WEc0Z0lDQWdabTl5S0haaGNpQndjbTl3SUdsdUlIQnNkV2RwYmlsN1hHNGdJQ0FnSUNCd2JIVm5hVzViY0hKdmNGMGdQU0J1ZFd4c095OHZZMnhsWVc0Z2RYQWdjMk55YVhCMElIUnZJSEJ5WlhBZ1ptOXlJR2RoY21KaFoyVWdZMjlzYkdWamRHbHZiaTVjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1EyRjFjMlZ6SUc5dVpTQnZjaUJ0YjNKbElHRmpkR2wyWlNCd2JIVm5hVzV6SUhSdklISmxMV2x1YVhScFlXeHBlbVVzSUhKbGMyVjBkR2x1WnlCbGRtVnVkQ0JzYVhOMFpXNWxjbk1zSUhKbFkyRnNZM1ZzWVhScGJtY2djRzl6YVhScGIyNXpMQ0JsZEdNdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J3YkhWbmFXNXpJQzBnYjNCMGFXOXVZV3dnYzNSeWFXNW5JRzltSUdGdUlHbHVaR2wyYVdSMVlXd2djR3gxWjJsdUlHdGxlU3dnWVhSMFlXbHVaV1FnWW5rZ1kyRnNiR2x1WnlCZ0pDaGxiR1Z0Wlc1MEtTNWtZWFJoS0Nkd2JIVm5hVzVPWVcxbEp5bGdMQ0J2Y2lCemRISnBibWNnYjJZZ1lTQndiSFZuYVc0Z1kyeGhjM01nYVM1bExpQmdKMlJ5YjNCa2IzZHVKMkJjYmlBZ0lDb2dRR1JsWm1GMWJIUWdTV1lnYm04Z1lYSm5kVzFsYm5RZ2FYTWdjR0Z6YzJWa0xDQnlaV1pzYjNjZ1lXeHNJR04xY25KbGJuUnNlU0JoWTNScGRtVWdjR3gxWjJsdWN5NWNiaUFnSUNvdlhHNGdJQ0J5WlVsdWFYUTZJR1oxYm1OMGFXOXVLSEJzZFdkcGJuTXBlMXh1SUNBZ0lDQjJZWElnYVhOS1VTQTlJSEJzZFdkcGJuTWdhVzV6ZEdGdVkyVnZaaUFrTzF4dUlDQWdJQ0IwY25sN1hHNGdJQ0FnSUNBZ2FXWW9hWE5LVVNsN1hHNGdJQ0FnSUNBZ0lDQndiSFZuYVc1ekxtVmhZMmdvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdKQ2gwYUdsektTNWtZWFJoS0NkNlpsQnNkV2RwYmljcExsOXBibWwwS0NrN1hHNGdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0I5Wld4elpYdGNiaUFnSUNBZ0lDQWdJSFpoY2lCMGVYQmxJRDBnZEhsd1pXOW1JSEJzZFdkcGJuTXNYRzRnSUNBZ0lDQWdJQ0JmZEdocGN5QTlJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lDQm1ibk1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ2R2WW1wbFkzUW5PaUJtZFc1amRHbHZiaWh3YkdkektYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNCd2JHZHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9jQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3SUQwZ2FIbHdhR1Z1WVhSbEtIQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duVzJSaGRHRXRKeXNnY0NBckoxMG5LUzVtYjNWdVpHRjBhVzl1S0NkZmFXNXBkQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBbmMzUnlhVzVuSnpvZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNCd2JIVm5hVzV6SUQwZ2FIbHdhR1Z1WVhSbEtIQnNkV2RwYm5NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0oxdGtZWFJoTFNjcklIQnNkV2RwYm5NZ0t5ZGRKeWt1Wm05MWJtUmhkR2x2YmlnblgybHVhWFFuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0ozVnVaR1ZtYVc1bFpDYzZJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdkR2hwYzFzbmIySnFaV04wSjEwb1QySnFaV04wTG10bGVYTW9YM1JvYVhNdVgzQnNkV2RwYm5NcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJR1p1YzF0MGVYQmxYU2h3YkhWbmFXNXpLVHRjYmlBZ0lDQWdJQ0I5WEc0Z0lDQWdJSDFqWVhSamFDaGxjbklwZTF4dUlDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9aWEp5S1R0Y2JpQWdJQ0FnZldacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnY21WMGRYSnVJSEJzZFdkcGJuTTdYRzRnSUNBZ0lIMWNiaUFnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWFYUnBZV3hwZW1VZ2NHeDFaMmx1Y3lCdmJpQmhibmtnWld4bGJXVnVkSE1nZDJsMGFHbHVJR0JsYkdWdFlDQW9ZVzVrSUdCbGJHVnRZQ0JwZEhObGJHWXBJSFJvWVhRZ1lYSmxiaWQwSUdGc2NtVmhaSGtnYVc1cGRHbGhiR2w2WldRdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JsYkdWdElDMGdhbEYxWlhKNUlHOWlhbVZqZENCamIyNTBZV2x1YVc1bklIUm9aU0JsYkdWdFpXNTBJSFJ2SUdOb1pXTnJJR2x1YzJsa1pTNGdRV3h6YnlCamFHVmphM01nZEdobElHVnNaVzFsYm5RZ2FYUnpaV3htTENCMWJteGxjM01nYVhRbmN5QjBhR1VnWUdSdlkzVnRaVzUwWUNCdlltcGxZM1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZFRnljbUY1ZlNCd2JIVm5hVzV6SUMwZ1FTQnNhWE4wSUc5bUlIQnNkV2RwYm5NZ2RHOGdhVzVwZEdsaGJHbDZaUzRnVEdWaGRtVWdkR2hwY3lCdmRYUWdkRzhnYVc1cGRHbGhiR2w2WlNCbGRtVnllWFJvYVc1bkxseHVJQ0FnS2k5Y2JpQWdjbVZtYkc5M09pQm1kVzVqZEdsdmJpaGxiR1Z0TENCd2JIVm5hVzV6S1NCN1hHNWNiaUFnSUNBdkx5QkpaaUJ3YkhWbmFXNXpJR2x6SUhWdVpHVm1hVzVsWkN3Z2FuVnpkQ0JuY21GaUlHVjJaWEo1ZEdocGJtZGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIQnNkV2RwYm5NZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNCd2JIVm5hVzV6SUQwZ1QySnFaV04wTG10bGVYTW9kR2hwY3k1ZmNHeDFaMmx1Y3lrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUVsbUlIQnNkV2RwYm5NZ2FYTWdZU0J6ZEhKcGJtY3NJR052Ym5abGNuUWdhWFFnZEc4Z1lXNGdZWEp5WVhrZ2QybDBhQ0J2Ym1VZ2FYUmxiVnh1SUNBZ0lHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCd2JIVm5hVzV6SUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdjR3gxWjJsdWN5QTlJRnR3YkhWbmFXNXpYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ0x5OGdTWFJsY21GMFpTQjBhSEp2ZFdkb0lHVmhZMmdnY0d4MVoybHVYRzRnSUNBZ0pDNWxZV05vS0hCc2RXZHBibk1zSUdaMWJtTjBhVzl1S0drc0lHNWhiV1VwSUh0Y2JpQWdJQ0FnSUM4dklFZGxkQ0IwYUdVZ1kzVnljbVZ1ZENCd2JIVm5hVzVjYmlBZ0lDQWdJSFpoY2lCd2JIVm5hVzRnUFNCZmRHaHBjeTVmY0d4MVoybHVjMXR1WVcxbFhUdGNibHh1SUNBZ0lDQWdMeThnVEc5allXeHBlbVVnZEdobElITmxZWEpqYUNCMGJ5QmhiR3dnWld4bGJXVnVkSE1nYVc1emFXUmxJR1ZzWlcwc0lHRnpJSGRsYkd3Z1lYTWdaV3hsYlNCcGRITmxiR1lzSUhWdWJHVnpjeUJsYkdWdElEMDlQU0JrYjJOMWJXVnVkRnh1SUNBZ0lDQWdkbUZ5SUNSbGJHVnRJRDBnSkNobGJHVnRLUzVtYVc1a0tDZGJaR0YwWVMwbksyNWhiV1VySjEwbktTNWhaR1JDWVdOcktDZGJaR0YwWVMwbksyNWhiV1VySjEwbktUdGNibHh1SUNBZ0lDQWdMeThnUm05eUlHVmhZMmdnY0d4MVoybHVJR1p2ZFc1a0xDQnBibWwwYVdGc2FYcGxJR2wwWEc0Z0lDQWdJQ0FrWld4bGJTNWxZV05vS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnSkdWc0lEMGdKQ2gwYUdsektTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RITWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0x5OGdSRzl1SjNRZ1pHOTFZbXhsTFdScGNDQnZiaUJ3YkhWbmFXNXpYRzRnSUNBZ0lDQWdJR2xtSUNna1pXd3VaR0YwWVNnbmVtWlFiSFZuYVc0bktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNJbFJ5YVdWa0lIUnZJR2x1YVhScFlXeHBlbVVnWENJcmJtRnRaU3RjSWlCdmJpQmhiaUJsYkdWdFpXNTBJSFJvWVhRZ1lXeHlaV0ZrZVNCb1lYTWdZU0JHYjNWdVpHRjBhVzl1SUhCc2RXZHBiaTVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZb0pHVnNMbUYwZEhJb0oyUmhkR0V0YjNCMGFXOXVjeWNwS1h0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnZEdocGJtY2dQU0FrWld3dVlYUjBjaWduWkdGMFlTMXZjSFJwYjI1ekp5a3VjM0JzYVhRb0p6c25LUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR1VzSUdrcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOXdkQ0E5SUdVdWMzQnNhWFFvSnpvbktTNXRZWEFvWm5WdVkzUnBiMjRvWld3cGV5QnlaWFIxY200Z1pXd3VkSEpwYlNncE95QjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LRzl3ZEZzd1hTa2diM0IwYzF0dmNIUmJNRjFkSUQwZ2NHRnljMlZXWVd4MVpTaHZjSFJiTVYwcE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUnllWHRjYmlBZ0lDQWdJQ0FnSUNBa1pXd3VaR0YwWVNnbmVtWlFiSFZuYVc0bkxDQnVaWGNnY0d4MVoybHVLQ1FvZEdocGN5a3NJRzl3ZEhNcEtUdGNiaUFnSUNBZ0lDQWdmV05oZEdOb0tHVnlLWHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR1Z5S1R0Y2JpQWdJQ0FnSUNBZ2ZXWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZTeGNiaUFnWjJWMFJtNU9ZVzFsT2lCbWRXNWpkR2x2Yms1aGJXVXNYRzVjYmlBZ1lXUmtWRzlLY1hWbGNuazZJR1oxYm1OMGFXOXVLQ1FwSUh0Y2JpQWdJQ0F2THlCVVQwUlBPaUJqYjI1emFXUmxjaUJ1YjNRZ2JXRnJhVzVuSUhSb2FYTWdZU0JxVVhWbGNua2dablZ1WTNScGIyNWNiaUFnSUNBdkx5QlVUMFJQT2lCdVpXVmtJSGRoZVNCMGJ5QnlaV1pzYjNjZ2RuTXVJSEpsTFdsdWFYUnBZV3hwZW1WY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdSbTkxYm1SaGRHbHZiaUJxVVhWbGNua2diV1YwYUc5a0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZkVGeWNtRjVmU0J0WlhSb2IyUWdMU0JCYmlCaFkzUnBiMjRnZEc4Z2NHVnlabTl5YlNCdmJpQjBhR1VnWTNWeWNtVnVkQ0JxVVhWbGNua2diMkpxWldOMExseHVJQ0FnSUNBcUwxeHVJQ0FnSUhaaGNpQm1iM1Z1WkdGMGFXOXVJRDBnWm5WdVkzUnBiMjRvYldWMGFHOWtLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2RIbHdaU0E5SUhSNWNHVnZaaUJ0WlhSb2IyUXNYRzRnSUNBZ0lDQWdJQ0FnSkc1dlNsTWdQU0FrS0NjdWJtOHRhbk1uS1R0Y2JseHVJQ0FnSUNBZ2FXWW9KRzV2U2xNdWJHVnVaM1JvS1h0Y2JpQWdJQ0FnSUNBZ0pHNXZTbE11Y21WdGIzWmxRMnhoYzNNb0oyNXZMV3B6SnlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1LSFI1Y0dVZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1hzdkwyNWxaV1J6SUhSdklHbHVhWFJwWVd4cGVtVWdkR2hsSUVadmRXNWtZWFJwYjI0Z2IySnFaV04wTENCdmNpQmhiaUJwYm1ScGRtbGtkV0ZzSUhCc2RXZHBiaTVjYmlBZ0lDQWdJQ0FnVFdWa2FXRlJkV1Z5ZVM1ZmFXNXBkQ2dwTzF4dUlDQWdJQ0FnSUNCR2IzVnVaR0YwYVc5dUxuSmxabXh2ZHloMGFHbHpLVHRjYmlBZ0lDQWdJSDFsYkhObElHbG1LSFI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25LWHN2TDJGdUlHbHVaR2wyYVdSMVlXd2diV1YwYUc5a0lIUnZJR2x1ZG05clpTQnZiaUJoSUhCc2RXZHBiaUJ2Y2lCbmNtOTFjQ0J2WmlCd2JIVm5hVzV6WEc0Z0lDQWdJQ0FnSUhaaGNpQmhjbWR6SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SekxDQXhLVHN2TDJOdmJHeGxZM1FnWVd4c0lIUm9aU0JoY21kMWJXVnVkSE1zSUdsbUlHNWxZMlZ6YzJGeWVWeHVJQ0FnSUNBZ0lDQjJZWElnY0d4MVowTnNZWE56SUQwZ2RHaHBjeTVrWVhSaEtDZDZabEJzZFdkcGJpY3BPeTh2WkdWMFpYSnRhVzVsSUhSb1pTQmpiR0Z6Y3lCdlppQndiSFZuYVc1Y2JseHVJQ0FnSUNBZ0lDQnBaaWh3YkhWblEyeGhjM01nSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ3YkhWblEyeGhjM05iYldWMGFHOWtYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tYc3ZMMjFoYTJVZ2MzVnlaU0JpYjNSb0lIUm9aU0JqYkdGemN5QmhibVFnYldWMGFHOWtJR1Y0YVhOMFhHNGdJQ0FnSUNBZ0lDQWdhV1lvZEdocGN5NXNaVzVuZEdnZ1BUMDlJREVwZXk4dmFXWWdkR2hsY21VbmN5QnZibXg1SUc5dVpTd2dZMkZzYkNCcGRDQmthWEpsWTNSc2VTNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NHeDFaME5zWVhOelcyMWxkR2h2WkYwdVlYQndiSGtvY0d4MVowTnNZWE56TENCaGNtZHpLVHRjYmlBZ0lDQWdJQ0FnSUNCOVpXeHpaWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WldGamFDaG1kVzVqZEdsdmJpaHBMQ0JsYkNsN0x5OXZkR2hsY25kcGMyVWdiRzl2Y0NCMGFISnZkV2RvSUhSb1pTQnFVWFZsY25rZ1kyOXNiR1ZqZEdsdmJpQmhibVFnYVc1MmIydGxJSFJvWlNCdFpYUm9iMlFnYjI0Z1pXRmphRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndiSFZuUTJ4aGMzTmJiV1YwYUc5a1hTNWhjSEJzZVNna0tHVnNLUzVrWVhSaEtDZDZabEJzZFdkcGJpY3BMQ0JoY21kektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZldWc2MyVjdMeTlsY25KdmNpQm1iM0lnYm04Z1kyeGhjM01nYjNJZ2JtOGdiV1YwYUc5a1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRkpsWm1WeVpXNWpaVVZ5Y205eUtGd2lWMlVuY21VZ2MyOXljbmtzSUNkY0lpQXJJRzFsZEdodlpDQXJJRndpSnlCcGN5QnViM1FnWVc0Z1lYWmhhV3hoWW14bElHMWxkR2h2WkNCbWIzSWdYQ0lnS3lBb2NHeDFaME5zWVhOeklEOGdablZ1WTNScGIyNU9ZVzFsS0hCc2RXZERiR0Z6Y3lrZ09pQW5kR2hwY3lCbGJHVnRaVzUwSnlrZ0t5QW5MaWNwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVpXeHpaWHN2TDJWeWNtOXlJR1p2Y2lCcGJuWmhiR2xrSUdGeVozVnRaVzUwSUhSNWNHVmNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhnVjJVbmNtVWdjMjl5Y25rc0lDUjdkSGx3WlgwZ2FYTWdibTkwSUdFZ2RtRnNhV1FnY0dGeVlXMWxkR1Z5TGlCWmIzVWdiWFZ6ZENCMWMyVWdZU0J6ZEhKcGJtY2djbVZ3Y21WelpXNTBhVzVuSUhSb1pTQnRaWFJvYjJRZ2VXOTFJSGRwYzJnZ2RHOGdhVzUyYjJ0bExtQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQWtMbVp1TG1admRXNWtZWFJwYjI0Z1BTQm1iM1Z1WkdGMGFXOXVPMXh1SUNBZ0lISmxkSFZ5YmlBa08xeHVJQ0I5WEc1OU8xeHVYRzVHYjNWdVpHRjBhVzl1TG5WMGFXd2dQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQkdkVzVqZEdsdmJpQm1iM0lnWVhCd2JIbHBibWNnWVNCa1pXSnZkVzVqWlNCbFptWmxZM1FnZEc4Z1lTQm1kVzVqZEdsdmJpQmpZV3hzTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdablZ1WXlBdElFWjFibU4wYVc5dUlIUnZJR0psSUdOaGJHeGxaQ0JoZENCbGJtUWdiMllnZEdsdFpXOTFkQzVjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUmxiR0Y1SUMwZ1ZHbHRaU0JwYmlCdGN5QjBieUJrWld4aGVTQjBhR1VnWTJGc2JDQnZaaUJnWm5WdVkyQXVYRzRnSUNBcUlFQnlaWFIxY201eklHWjFibU4wYVc5dVhHNGdJQ0FxTDF4dUlDQjBhSEp2ZEhSc1pUb2dablZ1WTNScGIyNGdLR1oxYm1Nc0lHUmxiR0Y1S1NCN1hHNGdJQ0FnZG1GeUlIUnBiV1Z5SUQwZ2JuVnNiRHRjYmx4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlIUm9hWE1zSUdGeVozTWdQU0JoY21kMWJXVnVkSE03WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhVzFsY2lBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhVzFsY2lBOUlITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHWjFibU11WVhCd2JIa29ZMjl1ZEdWNGRDd2dZWEpuY3lrN1hHNGdJQ0FnSUNBZ0lDQWdkR2x0WlhJZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOUxDQmtaV3hoZVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdmVnh1ZlR0Y2JseHVkMmx1Wkc5M0xrWnZkVzVrWVhScGIyNGdQU0JHYjNWdVpHRjBhVzl1TzF4dVhHNHZMeUJRYjJ4NVptbHNiQ0JtYjNJZ2NtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxYRzRvWm5WdVkzUnBiMjRvS1NCN1hHNGdJR2xtSUNnaFJHRjBaUzV1YjNjZ2ZId2dJWGRwYm1SdmR5NUVZWFJsTG01dmR5bGNiaUFnSUNCM2FXNWtiM2N1UkdGMFpTNXViM2NnUFNCRVlYUmxMbTV2ZHlBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdibVYzSUVSaGRHVW9LUzVuWlhSVWFXMWxLQ2s3SUgwN1hHNWNiaUFnZG1GeUlIWmxibVJ2Y25NZ1BTQmJKM2RsWW10cGRDY3NJQ2R0YjNvblhUdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMlpXNWtiM0p6TG14bGJtZDBhQ0FtSmlBaGQybHVaRzkzTG5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpUc2dLeXRwS1NCN1hHNGdJQ0FnSUNCMllYSWdkbkFnUFNCMlpXNWtiM0p6VzJsZE8xeHVJQ0FnSUNBZ2QybHVaRzkzTG5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTQTlJSGRwYm1SdmQxdDJjQ3NuVW1WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEoxMDdYRzRnSUNBZ0lDQjNhVzVrYjNjdVkyRnVZMlZzUVc1cGJXRjBhVzl1Um5KaGJXVWdQU0FvZDJsdVpHOTNXM1p3S3lkRFlXNWpaV3hCYm1sdFlYUnBiMjVHY21GdFpTZGRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhmQ0IzYVc1a2IzZGJkbkFySjBOaGJtTmxiRkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNkZEtUdGNiaUFnZlZ4dUlDQnBaaUFvTDJsUUtHRmtmR2h2Ym1WOGIyUXBMaXBQVXlBMkx5NTBaWE4wS0hkcGJtUnZkeTV1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwS1Z4dUlDQWdJSHg4SUNGM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElIeDhJQ0YzYVc1a2IzY3VZMkZ1WTJWc1FXNXBiV0YwYVc5dVJuSmhiV1VwSUh0Y2JpQWdJQ0IyWVhJZ2JHRnpkRlJwYldVZ1BTQXdPMXh1SUNBZ0lIZHBibVJ2ZHk1eVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVWdQU0JtZFc1amRHbHZiaWhqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdibTkzSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUc1bGVIUlVhVzFsSUQwZ1RXRjBhQzV0WVhnb2JHRnpkRlJwYldVZ0t5QXhOaXdnYm05M0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LU0I3SUdOaGJHeGlZV05yS0d4aGMzUlVhVzFsSUQwZ2JtVjRkRlJwYldVcE95QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFZHbHRaU0F0SUc1dmR5azdYRzRnSUNBZ2ZUdGNiaUFnSUNCM2FXNWtiM2N1WTJGdVkyVnNRVzVwYldGMGFXOXVSbkpoYldVZ1BTQmpiR1ZoY2xScGJXVnZkWFE3WEc0Z0lIMWNiaUFnTHlvcVhHNGdJQ0FxSUZCdmJIbG1hV3hzSUdadmNpQndaWEptYjNKdFlXNWpaUzV1YjNjc0lISmxjWFZwY21Wa0lHSjVJSEpCUmx4dUlDQWdLaTljYmlBZ2FXWW9JWGRwYm1SdmR5NXdaWEptYjNKdFlXNWpaU0I4ZkNBaGQybHVaRzkzTG5CbGNtWnZjbTFoYm1ObExtNXZkeWw3WEc0Z0lDQWdkMmx1Wkc5M0xuQmxjbVp2Y20xaGJtTmxJRDBnZTF4dUlDQWdJQ0FnYzNSaGNuUTZJRVJoZEdVdWJtOTNLQ2tzWEc0Z0lDQWdJQ0J1YjNjNklHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQkVZWFJsTG01dmR5Z3BJQzBnZEdocGN5NXpkR0Z5ZERzZ2ZWeHVJQ0FnSUgwN1hHNGdJSDFjYm4wcEtDazdYRzVwWmlBb0lVWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTNWlhVzVrS1NCN1hHNGdJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVpYVc1a0lEMGdablZ1WTNScGIyNG9iMVJvYVhNcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE1nSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQzh2SUdOc2IzTmxjM1FnZEdocGJtY2djRzl6YzJsaWJHVWdkRzhnZEdobElFVkRUVUZUWTNKcGNIUWdOVnh1SUNBZ0lDQWdMeThnYVc1MFpYSnVZV3dnU1hORFlXeHNZV0pzWlNCbWRXNWpkR2x2Ymx4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblJuVnVZM1JwYjI0dWNISnZkRzkwZVhCbExtSnBibVFnTFNCM2FHRjBJR2x6SUhSeWVXbHVaeUIwYnlCaVpTQmliM1Z1WkNCcGN5QnViM1FnWTJGc2JHRmliR1VuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1lVRnlaM01nSUNBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNU2tzWEc0Z0lDQWdJQ0FnSUdaVWIwSnBibVFnUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0JtVGs5UUlDQWdJRDBnWm5WdVkzUnBiMjRvS1NCN2ZTeGNiaUFnSUNBZ0lDQWdaa0p2ZFc1a0lDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVZHOUNhVzVrTG1Gd2NHeDVLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQm1UazlRWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2RHaHBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUc5VWFHbHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoUVhKbmN5NWpiMjVqWVhRb1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektTa3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmRHOTBlWEJsS1NCN1hHNGdJQ0FnSUNBdkx5QnVZWFJwZG1VZ1puVnVZM1JwYjI1eklHUnZiaWQwSUdoaGRtVWdZU0J3Y205MGIzUjVjR1ZjYmlBZ0lDQWdJR1pPVDFBdWNISnZkRzkwZVhCbElEMGdkR2hwY3k1d2NtOTBiM1I1Y0dVN1hHNGdJQ0FnZlZ4dUlDQWdJR1pDYjNWdVpDNXdjbTkwYjNSNWNHVWdQU0J1WlhjZ1prNVBVQ2dwTzF4dVhHNGdJQ0FnY21WMGRYSnVJR1pDYjNWdVpEdGNiaUFnZlR0Y2JuMWNiaTh2SUZCdmJIbG1hV3hzSUhSdklHZGxkQ0IwYUdVZ2JtRnRaU0J2WmlCaElHWjFibU4wYVc5dUlHbHVJRWxGT1Z4dVpuVnVZM1JwYjI0Z1puVnVZM1JwYjI1T1lXMWxLR1p1S1NCN1hHNGdJR2xtSUNoR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVdWJtRnRaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2RtRnlJR1oxYm1OT1lXMWxVbVZuWlhnZ1BTQXZablZ1WTNScGIyNWNYSE1vVzE0b1hYc3hMSDBwWEZ3b0x6dGNiaUFnSUNCMllYSWdjbVZ6ZFd4MGN5QTlJQ2htZFc1alRtRnRaVkpsWjJWNEtTNWxlR1ZqS0NobWJpa3VkRzlUZEhKcGJtY29LU2s3WEc0Z0lDQWdjbVYwZFhKdUlDaHlaWE4xYkhSeklDWW1JSEpsYzNWc2RITXViR1Z1WjNSb0lENGdNU2tnUHlCeVpYTjFiSFJ6V3pGZExuUnlhVzBvS1NBNklGd2lYQ0k3WEc0Z0lIMWNiaUFnWld4elpTQnBaaUFvWm00dWNISnZkRzkwZVhCbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabTR1WTI5dWMzUnlkV04wYjNJdWJtRnRaVHRjYmlBZ2ZWeHVJQ0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnWm00dWNISnZkRzkwZVhCbExtTnZibk4wY25WamRHOXlMbTVoYldVN1hHNGdJSDFjYm4xY2JtWjFibU4wYVc5dUlIQmhjbk5sVm1Gc2RXVW9jM1J5S1h0Y2JpQWdhV1lnS0NkMGNuVmxKeUE5UFQwZ2MzUnlLU0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdaV3h6WlNCcFppQW9KMlpoYkhObEp5QTlQVDBnYzNSeUtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lHVnNjMlVnYVdZZ0tDRnBjMDVoVGloemRISWdLaUF4S1NrZ2NtVjBkWEp1SUhCaGNuTmxSbXh2WVhRb2MzUnlLVHRjYmlBZ2NtVjBkWEp1SUhOMGNqdGNibjFjYmk4dklFTnZiblpsY25RZ1VHRnpZMkZzUTJGelpTQjBieUJyWldKaFlpMWpZWE5sWEc0dkx5QlVhR0Z1YXlCNWIzVTZJR2gwZEhBNkx5OXpkR0ZqYTI5MlpYSm1iRzkzTG1OdmJTOWhMemc1TlRVMU9EQmNibVoxYm1OMGFXOXVJR2g1Y0dobGJtRjBaU2h6ZEhJcElIdGNiaUFnY21WMGRYSnVJSE4wY2k1eVpYQnNZV05sS0M4b1cyRXRlbDBwS0Z0QkxWcGRLUzluTENBbkpERXRKREluS1M1MGIweHZkMlZ5UTJGelpTZ3BPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2UwWnZkVzVrWVhScGIyNTlPMXh1SWwxOVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmNvcmUuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRHJpbGxkb3duID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQnKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDIgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5uZXN0Jyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwzID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsNCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmJveCcpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBEcmlsbGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICovXG5cbnZhciBEcmlsbGRvd24gPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoRHJpbGxkb3duLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBEcmlsbGRvd24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyaWxsZG93bik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKERyaWxsZG93bi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyaWxsZG93bikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERyaWxsZG93biwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyaWxsZG93biBtZW51LlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIERyaWxsZG93blxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgRHJpbGxkb3duLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdEcmlsbGRvd24nOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQucmVnaXN0ZXIoJ0RyaWxsZG93bicsIHtcbiAgICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICAgJ0FSUk9XX0RPV04nOiAnZG93bicsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJyxcbiAgICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAgICdUQUInOiAnZG93bicsXG4gICAgICAgICdTSElGVF9UQUInOiAndXAnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgZHJpbGxkb3duIGJ5IGNyZWF0aW5nIGpRdWVyeSBjb2xsZWN0aW9ucyBvZiBlbGVtZW50c1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfZm91bmRhdGlvblV0aWwyLk5lc3QuRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJpbGxkb3duJyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0FwcGx5Q2xhc3MpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnZHJpbGxkb3duJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RyZWUnLFxuICAgICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB0aGlzLiRzdWJtZW51QW5jaG9ycyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGkuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50JykuY2hpbGRyZW4oJ2EnKTtcbiAgICAgIHRoaXMuJHN1Ym1lbnVzID0gdGhpcy4kc3VibWVudUFuY2hvcnMucGFyZW50KCdsaScpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLmF0dHIoJ3JvbGUnLCAnZ3JvdXAnKTtcbiAgICAgIHRoaXMuJG1lbnVJdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGknKS5ub3QoJy5qcy1kcmlsbGRvd24tYmFjaycpLmF0dHIoJ3JvbGUnLCAndHJlZWl0ZW0nKS5maW5kKCdhJyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJywgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLWRyaWxsZG93bicpIHx8ICgwLCBfZm91bmRhdGlvblV0aWwzLkdldFlvRGlnaXRzKSg2LCAnZHJpbGxkb3duJykpO1xuXG4gICAgICB0aGlzLl9wcmVwYXJlTWVudSgpO1xuICAgICAgdGhpcy5fcmVnaXN0ZXJFdmVudHMoKTtcblxuICAgICAgdGhpcy5fa2V5Ym9hcmRFdmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwcmVwYXJlcyBkcmlsbGRvd24gbWVudSBieSBzZXR0aW5nIGF0dHJpYnV0ZXMgdG8gbGlua3MgYW5kIGVsZW1lbnRzXG4gICAgICogc2V0cyBhIG1pbiBoZWlnaHQgdG8gcHJldmVudCBjb250ZW50IGp1bXBpbmdcbiAgICAgKiB3cmFwcyB0aGUgZWxlbWVudCBpZiBub3QgYWxyZWFkeSB3cmFwcGVkXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3ByZXBhcmVNZW51JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVNZW51KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8vIGlmKCF0aGlzLm9wdGlvbnMuaG9sZE9wZW4pe1xuICAgICAgLy8gICB0aGlzLl9tZW51TGlua0V2ZW50cygpO1xuICAgICAgLy8gfVxuICAgICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkbGluayA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKTtcbiAgICAgICAgdmFyICRzdWIgPSAkbGluay5wYXJlbnQoKTtcbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucGFyZW50TGluaykge1xuICAgICAgICAgICRsaW5rLmNsb25lKCkucHJlcGVuZFRvKCRzdWIuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpLndyYXAoJzxsaSBkYXRhLWlzLXBhcmVudC1saW5rIGNsYXNzPVwiaXMtc3VibWVudS1wYXJlbnQtaXRlbSBpcy1zdWJtZW51LWl0ZW0gaXMtZHJpbGxkb3duLXN1Ym1lbnUtaXRlbVwiIHJvbGU9XCJtZW51aXRlbVwiPjwvbGk+Jyk7XG4gICAgICAgIH1cbiAgICAgICAgJGxpbmsuZGF0YSgnc2F2ZWRIcmVmJywgJGxpbmsuYXR0cignaHJlZicpKS5yZW1vdmVBdHRyKCdocmVmJykuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgJGxpbmsuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuYXR0cih7XG4gICAgICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICAgICAndGFiaW5kZXgnOiAwLFxuICAgICAgICAgICdyb2xlJzogJ2dyb3VwJ1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX2V2ZW50cygkbGluayk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJHN1Ym1lbnVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJG1lbnUgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksXG4gICAgICAgICAgICAkYmFjayA9ICRtZW51LmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjaycpO1xuICAgICAgICBpZiAoISRiYWNrLmxlbmd0aCkge1xuICAgICAgICAgIHN3aXRjaCAoX3RoaXMub3B0aW9ucy5iYWNrQnV0dG9uUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICAgICAgJG1lbnUuYXBwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICAgICAgICAkbWVudS5wcmVwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuc3VwcG9ydGVkIGJhY2tCdXR0b25Qb3NpdGlvbiB2YWx1ZSAnXCIgKyBfdGhpcy5vcHRpb25zLmJhY2tCdXR0b25Qb3NpdGlvbiArIFwiJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX2JhY2soJG1lbnUpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJHN1Ym1lbnVzLmFkZENsYXNzKCdpbnZpc2libGUnKTtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgdGhpcy4kc3VibWVudXMuYWRkQ2xhc3MoJ2RyaWxsZG93bi1zdWJtZW51LWNvdmVyLXByZXZpb3VzJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNyZWF0ZSBhIHdyYXBwZXIgb24gZWxlbWVudCBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgaWYgKCF0aGlzLiRlbGVtZW50LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24nKSkge1xuICAgICAgICB0aGlzLiR3cmFwcGVyID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMub3B0aW9ucy53cmFwcGVyKS5hZGRDbGFzcygnaXMtZHJpbGxkb3duJyk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZUhlaWdodCkgdGhpcy4kd3JhcHBlci5hZGRDbGFzcygnYW5pbWF0ZS1oZWlnaHQnKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC53cmFwKHRoaXMuJHdyYXBwZXIpO1xuICAgICAgfVxuICAgICAgLy8gc2V0IHdyYXBwZXJcbiAgICAgIHRoaXMuJHdyYXBwZXIgPSB0aGlzLiRlbGVtZW50LnBhcmVudCgpO1xuICAgICAgdGhpcy4kd3JhcHBlci5jc3ModGhpcy5fZ2V0TWF4RGltcygpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVzaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2l6ZSgpIHtcbiAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHsgJ21heC13aWR0aCc6ICdub25lJywgJ21pbi1oZWlnaHQnOiAnbm9uZScgfSk7XG4gICAgICAvLyBfZ2V0TWF4RGltcyBoYXMgc2lkZSBlZmZlY3RzIChib28pIGJ1dCBjYWxsaW5nIGl0IHNob3VsZCB1cGRhdGUgYWxsIG90aGVyIG5lY2Vzc2FyeSBoZWlnaHRzICYgd2lkdGhzXG4gICAgICB0aGlzLiR3cmFwcGVyLmNzcyh0aGlzLl9nZXRNYXhEaW1zKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgdG8gZWxlbWVudHMgaW4gdGhlIG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBtZW51IGl0ZW0gdG8gYWRkIGhhbmRsZXJzIHRvLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygkZWxlbSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICdsaScpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKSkge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldC5maXJzdEVsZW1lbnRDaGlsZCl7XG4gICAgICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyB9XG4gICAgICAgIF90aGlzLl9zaG93KCRlbGVtLnBhcmVudCgnbGknKSk7XG5cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICAgICAgdmFyICRib2R5ID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdib2R5Jyk7XG4gICAgICAgICAgJGJvZHkub2ZmKCcuemYuZHJpbGxkb3duJykub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IF9qcXVlcnkyLmRlZmF1bHQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGlkZUFsbCgpO1xuICAgICAgICAgICAgJGJvZHkub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG1lbnUgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVnaXN0ZXJFdmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNjcm9sbFRvcCkge1xuICAgICAgICB0aGlzLl9iaW5kSGFuZGxlciA9IHRoaXMuX3Njcm9sbFRvcC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdvcGVuLnpmLmRyaWxsZG93biBoaWRlLnpmLmRyaWxsZG93biBjbG9zZWQuemYuZHJpbGxkb3duJywgdGhpcy5fYmluZEhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5vbignbXV0YXRlbWUuemYudHJpZ2dlcicsIHRoaXMuX3Jlc2l6ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG8gVG9wIG9mIEVsZW1lbnQgb3IgZGF0YS1zY3JvbGwtdG9wLWVsZW1lbnRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJpbGxkb3duI3Njcm9sbG1lXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zY3JvbGxUb3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2Nyb2xsVG9wKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciAkc2Nyb2xsVG9wRWxlbWVudCA9IF90aGlzLm9wdGlvbnMuc2Nyb2xsVG9wRWxlbWVudCAhPSAnJyA/ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShfdGhpcy5vcHRpb25zLnNjcm9sbFRvcEVsZW1lbnQpIDogX3RoaXMuJGVsZW1lbnQsXG4gICAgICAgICAgc2Nyb2xsUG9zID0gcGFyc2VJbnQoJHNjcm9sbFRvcEVsZW1lbnQub2Zmc2V0KCkudG9wICsgX3RoaXMub3B0aW9ucy5zY3JvbGxUb3BPZmZzZXQsIDEwKTtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSkuYW5pbWF0ZSh7IHNjcm9sbFRvcDogc2Nyb2xsUG9zIH0sIF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sIF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgICogRmlyZXMgYWZ0ZXIgdGhlIG1lbnUgaGFzIHNjcm9sbGVkXG4gICAgICAgICAgKiBAZXZlbnQgRHJpbGxkb3duI3Njcm9sbG1lXG4gICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRoaXMgPT09ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnaHRtbCcpWzBdKSBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzY3JvbGxtZS56Zi5kcmlsbGRvd24nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMga2V5ZG93biBldmVudCBsaXN0ZW5lciB0byBgbGlgJ3MgaW4gdGhlIG1lbnUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2tleWJvYXJkRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2tleWJvYXJkRXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kbWVudUl0ZW1zLmFkZCh0aGlzLiRlbGVtZW50LmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjayA+IGEsIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtID4gYScpKS5vbigna2V5ZG93bi56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksXG4gICAgICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLmNoaWxkcmVuKCdsaScpLmNoaWxkcmVuKCdhJyksXG4gICAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGkgLSAxKSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSArIDEsICRlbGVtZW50cy5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcmlsbGRvd24nLCB7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIGlmICgkZWxlbWVudC5pcyhfdGhpcy4kc3VibWVudUFuY2hvcnMpKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9zaG93KCRlbGVtZW50LnBhcmVudCgnbGknKSk7XG4gICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoKDAsIF9mb3VuZGF0aW9uVXRpbDMudHJhbnNpdGlvbmVuZCkoJGVsZW1lbnQpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmV2aW91czogZnVuY3Rpb24gcHJldmlvdXMoKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykub25lKCgwLCBfZm91bmRhdGlvblV0aWwzLnRyYW5zaXRpb25lbmQpKCRlbGVtZW50KSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdXA6IGZ1bmN0aW9uIHVwKCkge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAvLyBEb24ndCB0YXAgZm9jdXMgb24gZmlyc3QgZWxlbWVudCBpbiByb290IHVsXG4gICAgICAgICAgICByZXR1cm4gISRlbGVtZW50LmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJz4gbGk6Zmlyc3QtY2hpbGQgPiBhJykpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZG93bjogZnVuY3Rpb24gZG93bigpIHtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgLy8gRG9uJ3QgdGFwIGZvY3VzIG9uIGxhc3QgZWxlbWVudCBpbiByb290IHVsXG4gICAgICAgICAgICByZXR1cm4gISRlbGVtZW50LmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJz4gbGk6bGFzdC1jaGlsZCA+IGEnKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBjbG9zZSBvbiBlbGVtZW50IGluIHJvb3QgdWxcbiAgICAgICAgICAgIGlmICghJGVsZW1lbnQuaXMoX3RoaXMuJGVsZW1lbnQuZmluZCgnPiBsaSA+IGEnKSkpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW1lbnQucGFyZW50KCkucGFyZW50KCkpO1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoKS5wYXJlbnQoKS5zaWJsaW5ncygnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcGVuOiBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgICAgICAgaWYgKCEkZWxlbWVudC5pcyhfdGhpcy4kbWVudUl0ZW1zKSkge1xuICAgICAgICAgICAgICAvLyBub3QgbWVudSBpdGVtIG1lYW5zIGJhY2sgYnV0dG9uXG4gICAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZSgoMCwgX2ZvdW5kYXRpb25VdGlsMy50cmFuc2l0aW9uZW5kKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpLmNoaWxkcmVuKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRlbGVtZW50LmlzKF90aGlzLiRzdWJtZW51QW5jaG9ycykpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLm9uZSgoMCwgX2ZvdW5kYXRpb25VdGlsMy50cmFuc2l0aW9uZW5kKSgkZWxlbWVudCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIGhhbmRsZWQocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTsgLy8gZW5kIGtleWJvYXJkQWNjZXNzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIGFsbCBvcGVuIGVsZW1lbnRzLCBhbmQgcmV0dXJucyB0byByb290IG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyaWxsZG93biNjbG9zZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hpZGVBbGwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGlkZUFsbCgpIHtcbiAgICAgIHZhciAkZWxlbSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWRyaWxsZG93bi1zdWJtZW51LmlzLWFjdGl2ZScpLmFkZENsYXNzKCdpcy1jbG9zaW5nJyk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9IZWlnaHQpIHRoaXMuJHdyYXBwZXIuY3NzKHsgaGVpZ2h0OiAkZWxlbS5wYXJlbnQoKS5jbG9zZXN0KCd1bCcpLmRhdGEoJ2NhbGNIZWlnaHQnKSB9KTtcbiAgICAgICRlbGVtLm9uZSgoMCwgX2ZvdW5kYXRpb25VdGlsMy50cmFuc2l0aW9uZW5kKSgkZWxlbSksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZycpO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZnVsbHkgY2xvc2VkLlxuICAgICAgICogQGV2ZW50IERyaWxsZG93biNjbG9zZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZWQuemYuZHJpbGxkb3duJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBsaXN0ZW5lciBmb3IgZWFjaCBgYmFja2AgYnV0dG9uLCBhbmQgY2xvc2VzIG9wZW4gbWVudXMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyaWxsZG93biNiYWNrXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgc3ViLW1lbnUgdG8gYWRkIGBiYWNrYCBldmVudC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2JhY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYmFjaygkZWxlbSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICRlbGVtLm9mZignY2xpY2suemYuZHJpbGxkb3duJyk7XG4gICAgICAkZWxlbS5jaGlsZHJlbignLmpzLWRyaWxsZG93bi1iYWNrJykub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtb3VzZXVwIG9uIGJhY2snKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcGFyZW50IHN1Ym1lbnUsIGNhbGwgc2hvd1xuICAgICAgICB2YXIgcGFyZW50U3ViTWVudSA9ICRlbGVtLnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpO1xuICAgICAgICBpZiAocGFyZW50U3ViTWVudS5sZW5ndGgpIHtcbiAgICAgICAgICBfdGhpcy5fc2hvdyhwYXJlbnRTdWJNZW51KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBsaXN0ZW5lciB0byBtZW51IGl0ZW1zIHcvbyBzdWJtZW51cyB0byBjbG9zZSBvcGVuIG1lbnVzIG9uIGNsaWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19tZW51TGlua0V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9tZW51TGlua0V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLiRtZW51SXRlbXMubm90KCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50Jykub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgLy8gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuX2hpZGVBbGwoKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBDU1MgY2xhc3NlcyBmb3Igc3VibWVudSB0byBzaG93IGl0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIHRhcmdldCBzdWJtZW51IChgdWxgIHRhZylcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaWdnZXIgLSB0cmlnZ2VyIGRyaWxsZG93biBldmVudFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0U2hvd1N1Yk1lbnVDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFNob3dTdWJNZW51Q2xhc3NlcygkZWxlbSwgdHJpZ2dlcikge1xuICAgICAgJGVsZW0uYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdpbnZpc2libGUnKS5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcbiAgICAgICRlbGVtLnBhcmVudCgnbGknKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICBpZiAodHJpZ2dlciA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYuZHJpbGxkb3duJywgWyRlbGVtXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgQ1NTIGNsYXNzZXMgZm9yIHN1Ym1lbnUgdG8gaGlkZSBpdC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSB0YXJnZXQgc3VibWVudSAoYHVsYCB0YWcpXG4gICAgICogQHBhcmFtIHtib29sZWFufSB0cmlnZ2VyIC0gdHJpZ2dlciBkcmlsbGRvd24gZXZlbnRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldEhpZGVTdWJNZW51Q2xhc3NlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRIaWRlU3ViTWVudUNsYXNzZXMoJGVsZW0sIHRyaWdnZXIpIHtcbiAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5hZGRDbGFzcygnaW52aXNpYmxlJykuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgICRlbGVtLnBhcmVudCgnbGknKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgaWYgKHRyaWdnZXIgPT09IHRydWUpIHtcbiAgICAgICAgJGVsZW0udHJpZ2dlcignaGlkZS56Zi5kcmlsbGRvd24nLCBbJGVsZW1dKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIHNwZWNpZmljIGRyaWxsZG93biAoc3ViKW1lbnUgbm8gbWF0dGVyIHdoaWNoIChzdWIpbWVudSBpbiBpdCBpcyBjdXJyZW50bHkgdmlzaWJsZS5cbiAgICAgKiBDb21wYXJlZCB0byBfc2hvdygpIHRoaXMgbGV0cyB5b3UganVtcCBpbnRvIGFueSBzdWJtZW51IHdpdGhvdXQgY2xpY2tpbmcgdGhyb3VnaCBldmVyeSBzdWJtZW51IG9uIHRoZSB3YXkgdG8gaXQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyaWxsZG93biNvcGVuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIHRhcmdldCAoc3ViKW1lbnUgKGB1bGAgdGFnKVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYXV0b0ZvY3VzIC0gaWYgdHJ1ZSB0aGUgZmlyc3QgbGluayBpbiB0aGUgdGFyZ2V0IChzdWIpbWVudSBnZXRzIGF1dG8gZm9jdXNlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2hvd01lbnUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvd01lbnUoJGVsZW0sIGF1dG9Gb2N1cykge1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAvLyBSZXNldCBkcmlsbGRvd25cbiAgICAgIHZhciAkZXhwYW5kZWRTdWJtZW51cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGlbYXJpYS1leHBhbmRlZD1cInRydWVcIl0gPiB1bFtkYXRhLXN1Ym1lbnVdJyk7XG4gICAgICAkZXhwYW5kZWRTdWJtZW51cy5lYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBfdGhpcy5fc2V0SGlkZVN1Yk1lbnVDbGFzc2VzKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gSWYgdGFyZ2V0IG1lbnUgaXMgcm9vdCwgZm9jdXMgZmlyc3QgbGluayAmIGV4aXRcbiAgICAgIGlmICgkZWxlbS5pcygnW2RhdGEtZHJpbGxkb3duXScpKSB7XG4gICAgICAgIGlmIChhdXRvRm9jdXMgPT09IHRydWUpICRlbGVtLmZpbmQoJ2xpW3JvbGU9XCJ0cmVlaXRlbVwiXSA+IGEnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkgdGhpcy4kd3JhcHBlci5jc3MoJ2hlaWdodCcsICRlbGVtLmRhdGEoJ2NhbGNIZWlnaHQnKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBhbGwgc3VibWVudXMgb24gd2F5IHRvIHJvb3QgaW5jbC4gdGhlIGVsZW1lbnQgaXRzZWxmXG4gICAgICB2YXIgJHN1Ym1lbnVzID0gJGVsZW0uY2hpbGRyZW4oKS5maXJzdCgpLnBhcmVudHNVbnRpbCgnW2RhdGEtZHJpbGxkb3duXScsICdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICAvLyBPcGVuIHRhcmdldCBtZW51IGFuZCBhbGwgc3VibWVudXMgb24gaXRzIHdheSB0byByb290XG4gICAgICAkc3VibWVudXMuZWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcblxuICAgICAgICAvLyBVcGRhdGUgaGVpZ2h0IG9mIGZpcnN0IGNoaWxkICh0YXJnZXQgbWVudSkgaWYgYXV0b0hlaWdodCBvcHRpb24gdHJ1ZVxuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgX3RoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgX3RoaXMuJHdyYXBwZXIuY3NzKCdoZWlnaHQnLCAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuZGF0YSgnY2FsY0hlaWdodCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc0xhc3RDaGlsZCA9IGluZGV4ID09ICRzdWJtZW51cy5sZW5ndGggLSAxO1xuXG4gICAgICAgIC8vIEFkZCB0cmFuc2l0aW9uc2VuZCBsaXN0ZW5lciB0byBsYXN0IGNoaWxkIChyb290IGR1ZSB0byByZXZlcnNlIG9yZGVyKSB0byBvcGVuIHRhcmdldCBtZW51J3MgZmlyc3QgbGlua1xuICAgICAgICAvLyBMYXN0IGNoaWxkIG1ha2VzIHN1cmUgdGhlIGV2ZW50IGdldHMgYWx3YXlzIHRyaWdnZXJlZCBldmVuIGlmIGdvaW5nIHRocm91Z2ggc2V2ZXJhbCBtZW51c1xuICAgICAgICBpZiAoaXNMYXN0Q2hpbGQgPT09IHRydWUpIHtcbiAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykub25lKCgwLCBfZm91bmRhdGlvblV0aWwzLnRyYW5zaXRpb25lbmQpKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChhdXRvRm9jdXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgJGVsZW0uZmluZCgnbGlbcm9sZT1cInRyZWVpdGVtXCJdID4gYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLl9zZXRTaG93U3ViTWVudUNsYXNzZXMoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLCBpc0xhc3RDaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIHN1Ym1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyaWxsZG93biNvcGVuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBvcGVuLCBpLmUuIHRoZSBgbGlgIHRhZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvdygkZWxlbSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB0aGlzLiR3cmFwcGVyLmNzcyh7IGhlaWdodDogJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuZGF0YSgnY2FsY0hlaWdodCcpIH0pO1xuICAgICAgJGVsZW0uYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdpbnZpc2libGUnKS5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgc3VibWVudSBoYXMgb3BlbmVkLlxuICAgICAgICogQGV2ZW50IERyaWxsZG93biNvcGVuXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb3Blbi56Zi5kcmlsbGRvd24nLCBbJGVsZW1dKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyBhIHN1Ym1lbnVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJpbGxkb3duI2hpZGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBzdWItbWVudSB0byBoaWRlLCBpLmUuIHRoZSBgdWxgIHRhZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hpZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGlkZSgkZWxlbSkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB0aGlzLiR3cmFwcGVyLmNzcyh7IGhlaWdodDogJGVsZW0ucGFyZW50KCkuY2xvc2VzdCgndWwnKS5kYXRhKCdjYWxjSGVpZ2h0JykgfSk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgJGVsZW0ucGFyZW50KCdsaScpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICAkZWxlbS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgJGVsZW0uYWRkQ2xhc3MoJ2lzLWNsb3NpbmcnKS5vbmUoKDAsIF9mb3VuZGF0aW9uVXRpbDMudHJhbnNpdGlvbmVuZCkoJGVsZW0pLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZycpO1xuICAgICAgICAkZWxlbS5ibHVyKCkuYWRkQ2xhc3MoJ2ludmlzaWJsZScpO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIGNsb3NlZC5cbiAgICAgICAqIEBldmVudCBEcmlsbGRvd24jaGlkZVxuICAgICAgICovXG4gICAgICAkZWxlbS50cmlnZ2VyKCdoaWRlLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIG5lc3RlZCBtZW51cyB0byBjYWxjdWxhdGUgdGhlIG1pbi1oZWlnaHQsIGFuZCBtYXgtd2lkdGggZm9yIHRoZSBtZW51LlxuICAgICAqIFByZXZlbnRzIGNvbnRlbnQganVtcGluZy5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0TWF4RGltcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRNYXhEaW1zKCkge1xuICAgICAgdmFyIG1heEhlaWdodCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0ge30sXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy4kc3VibWVudXMuYWRkKHRoaXMuJGVsZW1lbnQpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbnVtT2ZFbGVtcyA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5jaGlsZHJlbignbGknKS5sZW5ndGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBfZm91bmRhdGlvblV0aWw0LkJveC5HZXREaW1lbnNpb25zKHRoaXMpLmhlaWdodDtcbiAgICAgICAgbWF4SGVpZ2h0ID0gaGVpZ2h0ID4gbWF4SGVpZ2h0ID8gaGVpZ2h0IDogbWF4SGVpZ2h0O1xuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmRhdGEoJ2NhbGNIZWlnaHQnLCBoZWlnaHQpO1xuICAgICAgICAgIGlmICghKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudScpKSByZXN1bHRbJ2hlaWdodCddID0gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkgcmVzdWx0WydtaW4taGVpZ2h0J10gPSBtYXhIZWlnaHQgKyAncHgnO1xuXG4gICAgICByZXN1bHRbJ21heC13aWR0aCddID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIERyaWxsZG93biBNZW51XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNjcm9sbFRvcCkgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5kcmlsbGRvd24nLCB0aGlzLl9iaW5kSGFuZGxlcik7XG4gICAgICB0aGlzLl9oaWRlQWxsKCk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgX2ZvdW5kYXRpb25VdGlsMi5OZXN0LkJ1cm4odGhpcy4kZWxlbWVudCwgJ2RyaWxsZG93bicpO1xuICAgICAgdGhpcy4kZWxlbWVudC51bndyYXAoKS5maW5kKCcuanMtZHJpbGxkb3duLWJhY2ssIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtJykucmVtb3ZlKCkuZW5kKCkuZmluZCgnLmlzLWFjdGl2ZSwgLmlzLWNsb3NpbmcsIC5pcy1kcmlsbGRvd24tc3VibWVudScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZyBpcy1kcmlsbGRvd24tc3VibWVudScpLmVuZCgpLmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXggcm9sZScpO1xuICAgICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5vZmYoJy56Zi5kcmlsbGRvd24nKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWlzLXBhcmVudC1saW5rXScpLmRldGFjaCgpO1xuICAgICAgdGhpcy4kc3VibWVudXMucmVtb3ZlQ2xhc3MoJ2RyaWxsZG93bi1zdWJtZW51LWNvdmVyLXByZXZpb3VzIGludmlzaWJsZScpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRsaW5rID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpO1xuICAgICAgICAkbGluay5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICBpZiAoJGxpbmsuZGF0YSgnc2F2ZWRIcmVmJykpIHtcbiAgICAgICAgICAkbGluay5hdHRyKCdocmVmJywgJGxpbmsuZGF0YSgnc2F2ZWRIcmVmJykpLnJlbW92ZURhdGEoJ3NhdmVkSHJlZicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERyaWxsZG93bjtcbn0oX2ZvdW5kYXRpb24uUGx1Z2luKTtcblxuRHJpbGxkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRHJpbGxkb3ducyBkZXBlbmQgb24gc3R5bGVzIGluIG9yZGVyIHRvIGZ1bmN0aW9uIHByb3Blcmx5OyBpbiB0aGUgZGVmYXVsdCBidWlsZCBvZiBGb3VuZGF0aW9uIHRoZXNlIGFyZVxuICAgKiBvbiB0aGUgYGRyaWxsZG93bmAgY2xhc3MuIFRoaXMgb3B0aW9uIGF1dG8tYXBwbGllcyB0aGlzIGNsYXNzIHRvIHRoZSBkcmlsbGRvd24gdXBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGlhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXV0b0FwcGx5Q2xhc3M6IHRydWUsXG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCBmb3IgSlMgZ2VuZXJhdGVkIGJhY2sgYnV0dG9uLiBQcmVwZW5kZWQgIG9yIGFwcGVuZGVkIChzZWUgYmFja0J1dHRvblBvc2l0aW9uKSB0byBzdWJtZW51IGxpc3RzIGFuZCBkZWxldGVkIG9uIGBkZXN0cm95YCBtZXRob2QsICdqcy1kcmlsbGRvd24tYmFjaycgY2xhc3MgcmVxdWlyZWQuIFJlbW92ZSB0aGUgYmFja3NsYXNoIChgXFxgKSBpZiBjb3B5IGFuZCBwYXN0aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICc8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nXG4gICAqL1xuICBiYWNrQnV0dG9uOiAnPGxpIGNsYXNzPVwianMtZHJpbGxkb3duLWJhY2tcIj48YSB0YWJpbmRleD1cIjBcIj5CYWNrPC9hPjwvbGk+JyxcbiAgLyoqXG4gICAqIFBvc2l0aW9uIHRoZSBiYWNrIGJ1dHRvbiBlaXRoZXIgYXQgdGhlIHRvcCBvciBib3R0b20gb2YgZHJpbGxkb3duIHN1Ym1lbnVzLiBDYW4gYmUgYCdsZWZ0J2Agb3IgYCdib3R0b20nYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCB0b3BcbiAgICovXG4gIGJhY2tCdXR0b25Qb3NpdGlvbjogJ3RvcCcsXG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCB0byB3cmFwIGRyaWxsZG93biBtZW51LiBVc2UgYSBjbGFzcyBuYW1lIGZvciBpbmRlcGVuZGVudCBzdHlsaW5nOyB0aGUgSlMgYXBwbGllZCBjbGFzczogYGlzLWRyaWxsZG93bmAgaXMgcmVxdWlyZWQuIFJlbW92ZSB0aGUgYmFja3NsYXNoIChgXFxgKSBpZiBjb3B5IGFuZCBwYXN0aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICc8ZGl2PjwvZGl2PidcbiAgICovXG4gIHdyYXBwZXI6ICc8ZGl2PjwvZGl2PicsXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBwYXJlbnQgbGluayB0byB0aGUgc3VibWVudS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHBhcmVudExpbms6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gcmV0dXJuIHRvIHJvb3QgbGlzdCBvbiBib2R5IGNsaWNrLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBtZW51IHRvIGF1dG8gYWRqdXN0IGhlaWdodC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvKipcbiAgICogQW5pbWF0ZSB0aGUgYXV0byBhZGp1c3QgaGVpZ2h0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZUhlaWdodDogZmFsc2UsXG4gIC8qKlxuICAgKiBTY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgbWVudSBhZnRlciBvcGVuaW5nIGEgc3VibWVudSBvciBuYXZpZ2F0aW5nIGJhY2sgdXNpbmcgdGhlIG1lbnUgYmFjayBidXR0b25cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNjcm9sbFRvcDogZmFsc2UsXG4gIC8qKlxuICAgKiBTdHJpbmcganF1ZXJ5IHNlbGVjdG9yIChmb3IgZXhhbXBsZSAnYm9keScpIG9mIGVsZW1lbnQgdG8gdGFrZSBvZmZzZXQoKS50b3AgZnJvbSwgaWYgZW1wdHkgc3RyaW5nIHRoZSBkcmlsbGRvd24gbWVudSBvZmZzZXQoKS50b3AgaXMgdGFrZW5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgc2Nyb2xsVG9wRWxlbWVudDogJycsXG4gIC8qKlxuICAgKiBTY3JvbGxUb3Agb2Zmc2V0XG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc2Nyb2xsVG9wT2Zmc2V0OiAwLFxuICAvKipcbiAgICogU2Nyb2xsIGFuaW1hdGlvbiBkdXJhdGlvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwMFxuICAgKi9cbiAgYW5pbWF0aW9uRHVyYXRpb246IDUwMCxcbiAgLyoqXG4gICAqIFNjcm9sbCBhbmltYXRpb24gZWFzaW5nLiBDYW4gYmUgYCdzd2luZydgIG9yIGAnbGluZWFyJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hbmltYXRlfEpRdWVyeSBhbmltYXRlfVxuICAgKiBAZGVmYXVsdCAnc3dpbmcnXG4gICAqL1xuICBhbmltYXRpb25FYXNpbmc6ICdzd2luZydcbiAgLy8gaG9sZE9wZW46IGZhbHNlXG59O1xuXG5leHBvcnRzLkRyaWxsZG93biA9IERyaWxsZG93bjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVaSEpwYkd4a2IzZHVMbXB6SWwwc0ltNWhiV1Z6SWpwYklrUnlhV3hzWkc5M2JpSXNJbVZzWlcxbGJuUWlMQ0p2Y0hScGIyNXpJaXdpSkdWc1pXMWxiblFpTENJa0lpd2laWGgwWlc1a0lpd2laR1ZtWVhWc2RITWlMQ0prWVhSaElpd2lZMnhoYzNOT1lXMWxJaXdpWDJsdWFYUWlMQ0pMWlhsaWIyRnlaQ0lzSW5KbFoybHpkR1Z5SWl3aVRtVnpkQ0lzSWtabFlYUm9aWElpTENKaGRYUnZRWEJ3YkhsRGJHRnpjeUlzSW1Ga1pFTnNZWE56SWl3aVlYUjBjaUlzSWlSemRXSnRaVzUxUVc1amFHOXljeUlzSW1acGJtUWlMQ0pqYUdsc1pISmxiaUlzSWlSemRXSnRaVzUxY3lJc0luQmhjbVZ1ZENJc0lpUnRaVzUxU1hSbGJYTWlMQ0p1YjNRaUxDSmZjSEpsY0dGeVpVMWxiblVpTENKZmNtVm5hWE4wWlhKRmRtVnVkSE1pTENKZmEyVjVZbTloY21SRmRtVnVkSE1pTENKZmRHaHBjeUlzSW1WaFkyZ2lMQ0lrYkdsdWF5SXNJaVJ6ZFdJaUxDSndZWEpsYm5STWFXNXJJaXdpWTJ4dmJtVWlMQ0p3Y21Wd1pXNWtWRzhpTENKM2NtRndJaXdpY21WdGIzWmxRWFIwY2lJc0lsOWxkbVZ1ZEhNaUxDSWtiV1Z1ZFNJc0lpUmlZV05ySWl3aWJHVnVaM1JvSWl3aVltRmphMEoxZEhSdmJsQnZjMmwwYVc5dUlpd2lZWEJ3Wlc1a0lpd2lZbUZqYTBKMWRIUnZiaUlzSW5CeVpYQmxibVFpTENKamIyNXpiMnhsSWl3aVpYSnliM0lpTENKZlltRmpheUlzSW1GMWRHOUlaV2xuYUhRaUxDSm9ZWE5EYkdGemN5SXNJaVIzY21Gd2NHVnlJaXdpZDNKaGNIQmxjaUlzSW1GdWFXMWhkR1ZJWldsbmFIUWlMQ0pqYzNNaUxDSmZaMlYwVFdGNFJHbHRjeUlzSWlSbGJHVnRJaXdpYjJabUlpd2liMjRpTENKbElpd2lkR0Z5WjJWMElpd2ljR0Z5Wlc1MGMxVnVkR2xzSWl3aWMzUnZjRWx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1SWl3aWNISmxkbVZ1ZEVSbFptRjFiSFFpTENKZmMyaHZkeUlzSW1Oc2IzTmxUMjVEYkdsamF5SXNJaVJpYjJSNUlpd2lZMjl1ZEdGcGJuTWlMQ0pmYUdsa1pVRnNiQ0lzSW5OamNtOXNiRlJ2Y0NJc0lsOWlhVzVrU0dGdVpHeGxjaUlzSWw5elkzSnZiR3hVYjNBaUxDSmlhVzVrSWl3aVgzSmxjMmw2WlNJc0lpUnpZM0p2Ykd4VWIzQkZiR1Z0Wlc1MElpd2ljMk55YjJ4c1ZHOXdSV3hsYldWdWRDSXNJbk5qY205c2JGQnZjeUlzSW5CaGNuTmxTVzUwSWl3aWIyWm1jMlYwSWl3aWRHOXdJaXdpYzJOeWIyeHNWRzl3VDJabWMyVjBJaXdpYzNSdmNDSXNJbUZ1YVcxaGRHVWlMQ0poYm1sdFlYUnBiMjVFZFhKaGRHbHZiaUlzSW1GdWFXMWhkR2x2YmtWaGMybHVaeUlzSW5SeWFXZG5aWElpTENKaFpHUWlMQ0lrWld4bGJXVnVkSE1pTENJa2NISmxka1ZzWlcxbGJuUWlMQ0lrYm1WNGRFVnNaVzFsYm5RaUxDSnBJaXdpYVhNaUxDSmxjU0lzSWsxaGRHZ2lMQ0p0WVhnaUxDSnRhVzRpTENKb1lXNWtiR1ZMWlhraUxDSnVaWGgwSWl3aWIyNWxJaXdpWm1sc2RHVnlJaXdpWm1seWMzUWlMQ0ptYjJOMWN5SXNJbkJ5WlhacGIzVnpJaXdpWDJocFpHVWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWRYQWlMQ0prYjNkdUlpd2lZMnh2YzJVaUxDSnphV0pzYVc1bmN5SXNJbTl3Wlc0aUxDSm9ZVzVrYkdWa0lpd2lhR1ZwWjJoMElpd2lZMnh2YzJWemRDSXNJbkpsYlc5MlpVTnNZWE56SWl3aWNHRnlaVzUwVTNWaVRXVnVkU0lzSW1GMWRHOUdiMk4xY3lJc0lpUmxlSEJoYm1SbFpGTjFZbTFsYm5Weklpd2lhVzVrWlhnaUxDSmZjMlYwU0dsa1pWTjFZazFsYm5WRGJHRnpjMlZ6SWl3aWFYTk1ZWE4wUTJocGJHUWlMQ0pmYzJWMFUyaHZkMU4xWWsxbGJuVkRiR0Z6YzJWeklpd2lZbXgxY2lJc0ltMWhlRWhsYVdkb2RDSXNJbkpsYzNWc2RDSXNJbTUxYlU5bVJXeGxiWE1pTENKQ2IzZ2lMQ0pIWlhSRWFXMWxibk5wYjI1eklpd2laMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wSWl3aWQybGtkR2dpTENKQ2RYSnVJaXdpZFc1M2NtRndJaXdpY21WdGIzWmxJaXdpWlc1a0lpd2laR1YwWVdOb0lpd2ljbVZ0YjNabFJHRjBZU0lzSWxCc2RXZHBiaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdPenRCUVVWQk96czdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPenM3UVVGRlFUczdPenM3T3pzN1NVRlJUVUVzVXpzN096czdPenM3T3pzN08wRkJRMG83T3pzN096czdNa0pCVDA5RExFOHNSVUZCVTBNc1R5eEZRVUZUTzBGQlEzWkNMRmRCUVV0RExGRkJRVXdzUjBGQlowSkdMRTlCUVdoQ08wRkJRMEVzVjBGQlMwTXNUMEZCVEN4SFFVRmxSU3hwUWtGQlJVTXNUVUZCUml4RFFVRlRMRVZCUVZRc1JVRkJZVXdzVlVGQlZVMHNVVUZCZGtJc1JVRkJhVU1zUzBGQlMwZ3NVVUZCVEN4RFFVRmpTU3hKUVVGa0xFVkJRV3BETEVWQlFYVkVUQ3hQUVVGMlJDeERRVUZtTzBGQlEwRXNWMEZCUzAwc1UwRkJUQ3hIUVVGcFFpeFhRVUZxUWl4RFFVaDFRaXhEUVVkUE96dEJRVVU1UWl4WFFVRkxReXhMUVVGTU96dEJRVVZCUXl3clFrRkJVME1zVVVGQlZDeERRVUZyUWl4WFFVRnNRaXhGUVVFclFqdEJRVU0zUWl4cFFrRkJVeXhOUVVSdlFqdEJRVVUzUWl4cFFrRkJVeXhOUVVadlFqdEJRVWMzUWl4MVFrRkJaU3hOUVVoak8wRkJTVGRDTEc5Q1FVRlpMRWxCU21sQ08wRkJTemRDTEhOQ1FVRmpMRTFCVEdVN1FVRk5OMElzYzBKQlFXTXNWVUZPWlR0QlFVODNRaXhyUWtGQlZTeFBRVkJ0UWp0QlFWRTNRaXhsUVVGUExFMUJVbk5DTzBGQlV6ZENMSEZDUVVGaE8wRkJWR2RDTEU5QlFTOUNPMEZCVjBRN08wRkJSVVE3T3pzN096czdORUpCU1ZFN1FVRkRUa01zTkVKQlFVdERMRTlCUVV3c1EwRkJZU3hMUVVGTFZpeFJRVUZzUWl4RlFVRTBRaXhYUVVFMVFqczdRVUZGUVN4VlFVRkhMRXRCUVV0RUxFOUJRVXdzUTBGQllWa3NZMEZCYUVJc1JVRkJaME03UVVGRE9VSXNZVUZCUzFnc1VVRkJUQ3hEUVVGaldTeFJRVUZrTEVOQlFYVkNMRmRCUVhaQ08wRkJRMFE3TzBGQlJVUXNWMEZCUzFvc1VVRkJUQ3hEUVVGallTeEpRVUZrTEVOQlFXMUNPMEZCUTJwQ0xHZENRVUZSTEUxQlJGTTdRVUZGYWtJc1owTkJRWGRDTzBGQlJsQXNUMEZCYmtJN1FVRkpRU3hYUVVGTFF5eGxRVUZNTEVkQlFYVkNMRXRCUVV0a0xGRkJRVXdzUTBGQlkyVXNTVUZCWkN4RFFVRnRRaXhuUTBGQmJrSXNSVUZCY1VSRExGRkJRWEpFTEVOQlFUaEVMRWRCUVRsRUxFTkJRWFpDTzBGQlEwRXNWMEZCUzBNc1UwRkJUQ3hIUVVGcFFpeExRVUZMU0N4bFFVRk1MRU5CUVhGQ1NTeE5RVUZ5UWl4RFFVRTBRaXhKUVVFMVFpeEZRVUZyUTBZc1VVRkJiRU1zUTBGQk1rTXNaMEpCUVRORExFVkJRVFpFU0N4SlFVRTNSQ3hEUVVGclJTeE5RVUZzUlN4RlFVRXdSU3hQUVVFeFJTeERRVUZxUWp0QlFVTkJMRmRCUVV0TkxGVkJRVXdzUjBGQmEwSXNTMEZCUzI1Q0xGRkJRVXdzUTBGQlkyVXNTVUZCWkN4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWtzc1IwRkJla0lzUTBGQk5rSXNiMEpCUVRkQ0xFVkJRVzFFVUN4SlFVRnVSQ3hEUVVGM1JDeE5RVUY0UkN4RlFVRm5SU3hWUVVGb1JTeEZRVUUwUlVVc1NVRkJOVVVzUTBGQmFVWXNSMEZCYWtZc1EwRkJiRUk3UVVGRFFTeFhRVUZMWml4UlFVRk1MRU5CUVdOaExFbEJRV1FzUTBGQmJVSXNZVUZCYmtJc1JVRkJiVU1zUzBGQlMySXNVVUZCVEN4RFFVRmpZU3hKUVVGa0xFTkJRVzFDTEdkQ1FVRnVRaXhMUVVGM1F5eHJRMEZCV1N4RFFVRmFMRVZCUVdVc1YwRkJaaXhEUVVFelJUczdRVUZGUVN4WFFVRkxVU3haUVVGTU8wRkJRMEVzVjBGQlMwTXNaVUZCVERzN1FVRkZRU3hYUVVGTFF5eGxRVUZNTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN2JVTkJUMlU3UVVGRFlpeFZRVUZKUXl4UlFVRlJMRWxCUVZvN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFhRVUZMVml4bFFVRk1MRU5CUVhGQ1Z5eEpRVUZ5UWl4RFFVRXdRaXhaUVVGVk8wRkJRMnhETEZsQlFVbERMRkZCUVZFc2MwSkJRVVVzU1VGQlJpeERRVUZhTzBGQlEwRXNXVUZCU1VNc1QwRkJUMFFzVFVGQlRWSXNUVUZCVGl4RlFVRllPMEZCUTBFc1dVRkJSMDBzVFVGQlRYcENMRTlCUVU0c1EwRkJZelpDTEZWQlFXcENMRVZCUVRSQ08wRkJRekZDUml4blFrRkJUVWNzUzBGQlRpeEhRVUZqUXl4VFFVRmtMRU5CUVhkQ1NDeExRVUZMV0N4UlFVRk1MRU5CUVdNc1owSkJRV1FzUTBGQmVFSXNSVUZCZVVSbExFbEJRWHBFTEVOQlFUaEVMSGRJUVVFNVJEdEJRVU5FTzBGQlEwUk1MR05CUVUxMFFpeEpRVUZPTEVOQlFWY3NWMEZCV0N4RlFVRjNRbk5DTEUxQlFVMWlMRWxCUVU0c1EwRkJWeXhOUVVGWUxFTkJRWGhDTEVWQlFUUkRiVUlzVlVGQk5VTXNRMEZCZFVRc1RVRkJka1FzUlVGQkswUnVRaXhKUVVFdlJDeERRVUZ2UlN4VlFVRndSU3hGUVVGblJpeERRVUZvUmp0QlFVTkJZU3hqUVVGTlZpeFJRVUZPTEVOQlFXVXNaMEpCUVdZc1JVRkRTMGdzU1VGRVRDeERRVU5WTzBGQlEwb3NlVUpCUVdVc1NVRkVXRHRCUVVWS0xITkNRVUZaTEVOQlJsSTdRVUZIU2l4clFrRkJVVHRCUVVoS0xGTkJSRlk3UVVGTlFWY3NZMEZCVFZNc1QwRkJUaXhEUVVGalVDeExRVUZrTzBGQlEwUXNUMEZrUkR0QlFXVkJMRmRCUVV0VUxGTkJRVXdzUTBGQlpWRXNTVUZCWml4RFFVRnZRaXhaUVVGVk8wRkJRelZDTEZsQlFVbFRMRkZCUVZFc2MwSkJRVVVzU1VGQlJpeERRVUZhTzBGQlFVRXNXVUZEU1VNc1VVRkJVVVFzVFVGQlRXNUNMRWxCUVU0c1EwRkJWeXh2UWtGQldDeERRVVJhTzBGQlJVRXNXVUZCUnl4RFFVRkRiMElzVFVGQlRVTXNUVUZCVml4RlFVRnBRanRCUVVObUxHdENRVUZSV2l4TlFVRk5la0lzVDBGQlRpeERRVUZqYzBNc2EwSkJRWFJDTzBGQlEwVXNhVUpCUVVzc1VVRkJURHRCUVVORlNDeHZRa0ZCVFVrc1RVRkJUaXhEUVVGaFpDeE5RVUZOZWtJc1QwRkJUaXhEUVVGamQwTXNWVUZCTTBJN1FVRkRRVHRCUVVOR0xHbENRVUZMTEV0QlFVdzdRVUZEUlV3c2IwSkJRVTFOTEU5QlFVNHNRMEZCWTJoQ0xFMUJRVTE2UWl4UFFVRk9MRU5CUVdOM1F5eFZRVUUxUWp0QlFVTkJPMEZCUTBZN1FVRkRSVVVzYzBKQlFWRkRMRXRCUVZJc1EwRkJZeXd5UTBGQk1rTnNRaXhOUVVGTmVrSXNUMEZCVGl4RFFVRmpjME1zYTBKQlFYcEVMRWRCUVRoRkxFZEJRVFZHTzBGQlVrbzdRVUZWUkR0QlFVTkVZaXhqUVVGTmJVSXNTMEZCVGl4RFFVRlpWQ3hMUVVGYU8wRkJRMFFzVDBGb1FrUTdPMEZCYTBKQkxGZEJRVXRxUWl4VFFVRk1MRU5CUVdWTUxGRkJRV1lzUTBGQmQwSXNWMEZCZUVJN1FVRkRRU3hWUVVGSExFTkJRVU1zUzBGQlMySXNUMEZCVEN4RFFVRmhOa01zVlVGQmFrSXNSVUZCTmtJN1FVRkRNMElzWVVGQlN6TkNMRk5CUVV3c1EwRkJaVXdzVVVGQlppeERRVUYzUWl4clEwRkJlRUk3UVVGRFJEczdRVUZGUkR0QlFVTkJMRlZCUVVjc1EwRkJReXhMUVVGTFdpeFJRVUZNTEVOQlFXTnJRaXhOUVVGa0xFZEJRWFZDTWtJc1VVRkJka0lzUTBGQlowTXNZMEZCYUVNc1EwRkJTaXhGUVVGdlJEdEJRVU5zUkN4aFFVRkxReXhSUVVGTUxFZEJRV2RDTEhOQ1FVRkZMRXRCUVVzdlF5eFBRVUZNTEVOQlFXRm5SQ3hQUVVGbUxFVkJRWGRDYmtNc1VVRkJlRUlzUTBGQmFVTXNZMEZCYWtNc1EwRkJhRUk3UVVGRFFTeFpRVUZITEV0QlFVdGlMRTlCUVV3c1EwRkJZV2xFTEdGQlFXaENMRVZCUVN0Q0xFdEJRVXRHTEZGQlFVd3NRMEZCWTJ4RExGRkJRV1FzUTBGQmRVSXNaMEpCUVhaQ08wRkJReTlDTEdGQlFVdGFMRkZCUVV3c1EwRkJZeXRDTEVsQlFXUXNRMEZCYlVJc1MwRkJTMlVzVVVGQmVFSTdRVUZEUkR0QlFVTkVPMEZCUTBFc1YwRkJTMEVzVVVGQlRDeEhRVUZuUWl4TFFVRkxPVU1zVVVGQlRDeERRVUZqYTBJc1RVRkJaQ3hGUVVGb1FqdEJRVU5CTEZkQlFVczBRaXhSUVVGTUxFTkJRV05ITEVkQlFXUXNRMEZCYTBJc1MwRkJTME1zVjBGQlRDeEZRVUZzUWp0QlFVTkVPenM3T0VKQlJWTTdRVUZEVWl4WFFVRkxTaXhSUVVGTUxFTkJRV05ITEVkQlFXUXNRMEZCYTBJc1JVRkJReXhoUVVGaExFMUJRV1FzUlVGQmMwSXNZMEZCWXl4TlFVRndReXhGUVVGc1FqdEJRVU5CTzBGQlEwRXNWMEZCUzBnc1VVRkJUQ3hEUVVGalJ5eEhRVUZrTEVOQlFXdENMRXRCUVV0RExGZEJRVXdzUlVGQmJFSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPelJDUVUxUlF5eExMRVZCUVU4N1FVRkRZaXhWUVVGSk0wSXNVVUZCVVN4SlFVRmFPenRCUVVWQk1rSXNXVUZCVFVNc1IwRkJUaXhEUVVGVkxHOUNRVUZXTEVWQlEwTkRMRVZCUkVRc1EwRkRTU3h2UWtGRVNpeEZRVU13UWl4VlFVRlRReXhEUVVGVUxFVkJRVmM3UVVGRGJrTXNXVUZCUnl4elFrRkJSVUVzUlVGQlJVTXNUVUZCU2l4RlFVRlpReXhaUVVGYUxFTkJRWGxDTEVsQlFYcENMRVZCUVN0Q0xFbEJRUzlDTEVWQlFYRkRXQ3hSUVVGeVF5eERRVUU0UXl3MlFrRkJPVU1zUTBGQlNDeEZRVUZuUmp0QlFVTTVSVk1zV1VGQlJVY3NkMEpCUVVZN1FVRkRRVWdzV1VGQlJVa3NZMEZCUmp0QlFVTkVPenRCUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CYkVNc1kwRkJUVzFETEV0QlFVNHNRMEZCV1ZJc1RVRkJUV3BETEUxQlFVNHNRMEZCWVN4SlFVRmlMRU5CUVZvN08wRkJSVUVzV1VGQlIwMHNUVUZCVFhwQ0xFOUJRVTRzUTBGQll6WkVMRmxCUVdwQ0xFVkJRVGhDTzBGQlF6VkNMR05CUVVsRExGRkJRVkVzYzBKQlFVVXNUVUZCUml4RFFVRmFPMEZCUTBGQkxHZENRVUZOVkN4SFFVRk9MRU5CUVZVc1pVRkJWaXhGUVVFeVFrTXNSVUZCTTBJc1EwRkJPRUlzYjBKQlFUbENMRVZCUVc5RUxGVkJRVk5ETEVOQlFWUXNSVUZCVnp0QlFVTTNSQ3huUWtGQlNVRXNSVUZCUlVNc1RVRkJSaXhMUVVGaEwwSXNUVUZCVFhoQ0xGRkJRVTRzUTBGQlpTeERRVUZtTEVOQlFXSXNTVUZCYTBORExHbENRVUZGTmtRc1VVRkJSaXhEUVVGWGRFTXNUVUZCVFhoQ0xGRkJRVTRzUTBGQlpTeERRVUZtTEVOQlFWZ3NSVUZCT0VKelJDeEZRVUZGUXl4TlFVRm9ReXhEUVVGMFF5eEZRVUVyUlR0QlFVRkZPMEZCUVZNN1FVRkRNVVpFTEdOQlFVVkpMR05CUVVZN1FVRkRRV3hETEd0Q1FVRk5kVU1zVVVGQlRqdEJRVU5CUml4clFrRkJUVlFzUjBGQlRpeERRVUZWTEdWQlFWWTdRVUZEUkN4WFFVeEVPMEZCVFVRN1FVRkRSaXhQUVhKQ1JEdEJRWE5DUkRzN1FVRkZSRHM3T3pzN096czdjME5CUzJ0Q08wRkJRMmhDTEZWQlFVY3NTMEZCUzNKRUxFOUJRVXdzUTBGQllXbEZMRk5CUVdoQ0xFVkJRVEJDTzBGQlEzaENMR0ZCUVV0RExGbEJRVXdzUjBGQmIwSXNTMEZCUzBNc1ZVRkJUQ3hEUVVGblFrTXNTVUZCYUVJc1EwRkJjVUlzU1VGQmNrSXNRMEZCY0VJN1FVRkRRU3hoUVVGTGJrVXNVVUZCVEN4RFFVRmpjVVFzUlVGQlpDeERRVUZwUWl4NVJFRkJha0lzUlVGQk1rVXNTMEZCUzFrc1dVRkJhRVk3UVVGRFJEdEJRVU5FTEZkQlFVdHFSU3hSUVVGTUxFTkJRV054UkN4RlFVRmtMRU5CUVdsQ0xIRkNRVUZxUWl4RlFVRjNReXhMUVVGTFpTeFBRVUZNTEVOQlFXRkVMRWxCUVdJc1EwRkJhMElzU1VGQmJFSXNRMEZCZUVNN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN2FVTkJTMkU3UVVGRFdDeFZRVUZKTTBNc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNUWkRMRzlDUVVGdlFqZERMRTFCUVUxNlFpeFBRVUZPTEVOQlFXTjFSU3huUWtGQlpDeEpRVUZuUXl4RlFVRm9ReXhIUVVGdFF5eHpRa0ZCUlRsRExFMUJRVTE2UWl4UFFVRk9MRU5CUVdOMVJTeG5Ra0ZCYUVJc1EwRkJia01zUjBGQmNVVTVReXhOUVVGTmVFSXNVVUZCYmtjN1FVRkJRU3hWUVVOSmRVVXNXVUZCV1VNc1UwRkJVMGdzYTBKQlFXdENTU3hOUVVGc1FpeEhRVUV5UWtNc1IwRkJNMElzUjBGQkswSnNSQ3hOUVVGTmVrSXNUMEZCVGl4RFFVRmpORVVzWlVGQmRFUXNSVUZCZFVVc1JVRkJka1VzUTBGRWFFSTdRVUZGUVN3MFFrRkJSU3haUVVGR0xFVkJRV2RDUXl4SlFVRm9RaXhEUVVGeFFpeEpRVUZ5UWl4RlFVRXlRa01zVDBGQk0wSXNRMEZCYlVNc1JVRkJSV0lzVjBGQlYwOHNVMEZCWWl4RlFVRnVReXhGUVVFMlJDOURMRTFCUVUxNlFpeFBRVUZPTEVOQlFXTXJSU3hwUWtGQk0wVXNSVUZCT0VaMFJDeE5RVUZOZWtJc1QwRkJUaXhEUVVGalowWXNaVUZCTlVjc1JVRkJORWdzV1VGQlZUdEJRVU53U1RzN096dEJRVWxCTEZsQlFVY3NVMEZCVHl4elFrRkJSU3hOUVVGR0xFVkJRVlVzUTBGQlZpeERRVUZXTEVWQlFYVkNka1FzVFVGQlRYaENMRkZCUVU0c1EwRkJaV2RHTEU5QlFXWXNRMEZCZFVJc2RVSkJRWFpDTzBGQlEzaENMRTlCVGtRN1FVRlBSRHM3UVVGRlJEczdPenM3T3p0elEwRkphMEk3UVVGRGFFSXNWVUZCU1hoRUxGRkJRVkVzU1VGQldqczdRVUZGUVN4WFFVRkxUQ3hWUVVGTUxFTkJRV2RDT0VRc1IwRkJhRUlzUTBGQmIwSXNTMEZCUzJwR0xGRkJRVXdzUTBGQlkyVXNTVUZCWkN4RFFVRnRRaXh4UkVGQmJrSXNRMEZCY0VJc1JVRkJLMFp6UXl4RlFVRXZSaXhEUVVGclJ5eHpRa0ZCYkVjc1JVRkJNRWdzVlVGQlUwTXNRMEZCVkN4RlFVRlhPMEZCUTI1SkxGbEJRVWwwUkN4WFFVRlhMSE5DUVVGRkxFbEJRVVlzUTBGQlpqdEJRVUZCTEZsQlEwbHJSaXhaUVVGWmJFWXNVMEZCVTJ0Q0xFMUJRVlFzUTBGQlowSXNTVUZCYUVJc1JVRkJjMEpCTEUxQlFYUkNMRU5CUVRaQ0xFbEJRVGRDTEVWQlFXMURSaXhSUVVGdVF5eERRVUUwUXl4SlFVRTFReXhGUVVGclJFRXNVVUZCYkVRc1EwRkJNa1FzUjBGQk0wUXNRMEZFYUVJN1FVRkJRU3haUVVWSmJVVXNXVUZHU2p0QlFVRkJMRmxCUjBsRExGbEJTRW83TzBGQlMwRkdMR3RDUVVGVmVrUXNTVUZCVml4RFFVRmxMRlZCUVZNMFJDeERRVUZVTEVWQlFWazdRVUZEZWtJc1kwRkJTU3h6UWtGQlJTeEpRVUZHTEVWQlFWRkRMRVZCUVZJc1EwRkJWM1JHTEZGQlFWZ3NRMEZCU2l4RlFVRXdRanRCUVVONFFtMUdMREpDUVVGbFJDeFZRVUZWU3l4RlFVRldMRU5CUVdGRExFdEJRVXRETEVkQlFVd3NRMEZCVXl4RFFVRlVMRVZCUVZsS0xFbEJRVVVzUTBGQlpDeERRVUZpTEVOQlFXWTdRVUZEUVVRc01rSkJRV1ZHTEZWQlFWVkxMRVZCUVZZc1EwRkJZVU1zUzBGQlMwVXNSMEZCVEN4RFFVRlRUQ3hKUVVGRkxFTkJRVmdzUlVGQlkwZ3NWVUZCVlRsRExFMUJRVllzUjBGQmFVSXNRMEZCTDBJc1EwRkJZaXhEUVVGbU8wRkJRMEU3UVVGRFJEdEJRVU5HTEZOQlRrUTdPMEZCVVVFM1FpeHBRMEZCVTI5R0xGTkJRVlFzUTBGQmJVSnlReXhEUVVGdVFpeEZRVUZ6UWl4WFFVRjBRaXhGUVVGdFF6dEJRVU5xUTNORExHZENRVUZOTEdkQ1FVRlhPMEZCUTJZc1owSkJRVWsxUml4VFFVRlRjMFlzUlVGQlZDeERRVUZaT1VRc1RVRkJUVllzWlVGQmJFSXNRMEZCU2l4RlFVRjNRenRCUVVOMFExVXNiMEpCUVUxdFF5eExRVUZPTEVOQlFWa3pSQ3hUUVVGVGEwSXNUVUZCVkN4RFFVRm5RaXhKUVVGb1FpeERRVUZhTzBGQlEwRnNRaXgxUWtGQlUydENMRTFCUVZRc1EwRkJaMElzU1VGQmFFSXNSVUZCYzBJeVJTeEhRVUYwUWl4RFFVRXdRaXh2UTBGQll6ZEdMRkZCUVdRc1EwRkJNVUlzUlVGQmJVUXNXVUZCVlR0QlFVTXpSRUVzZVVKQlFWTnJRaXhOUVVGVUxFTkJRV2RDTEVsQlFXaENMRVZCUVhOQ1NDeEpRVUYwUWl4RFFVRXlRaXhUUVVFelFpeEZRVUZ6UXl0RkxFMUJRWFJETEVOQlFUWkRkRVVzVFVGQlRVd3NWVUZCYmtRc1JVRkJLMFEwUlN4TFFVRXZSQ3hIUVVGMVJVTXNTMEZCZGtVN1FVRkRSQ3hsUVVaRU8wRkJSMEVzY1VKQlFVOHNTVUZCVUR0QlFVTkVPMEZCUTBZc1YwRlVaME03UVVGVmFrTkRMRzlDUVVGVkxHOUNRVUZYTzBGQlEyNUNla1VzYTBKQlFVMHdSU3hMUVVGT0xFTkJRVmxzUnl4VFFVRlRhMElzVFVGQlZDeERRVUZuUWl4SlFVRm9RaXhGUVVGelFrRXNUVUZCZEVJc1EwRkJOa0lzU1VGQk4wSXNRMEZCV2p0QlFVTkJiRUlzY1VKQlFWTnJRaXhOUVVGVUxFTkJRV2RDTEVsQlFXaENMRVZCUVhOQ1FTeE5RVUYwUWl4RFFVRTJRaXhKUVVFM1FpeEZRVUZ0UXpKRkxFZEJRVzVETEVOQlFYVkRMRzlEUVVGak4wWXNVVUZCWkN4RFFVRjJReXhGUVVGblJTeFpRVUZWTzBGQlEzaEZiVWNzZVVKQlFWY3NXVUZCVnp0QlFVTndRbTVITEhsQ1FVRlRhMElzVFVGQlZDeERRVUZuUWl4SlFVRm9RaXhGUVVGelFrRXNUVUZCZEVJc1EwRkJOa0lzU1VGQk4wSXNSVUZCYlVOQkxFMUJRVzVETEVOQlFUQkRMRWxCUVRGRExFVkJRV2RFUml4UlFVRm9SQ3hEUVVGNVJDeEhRVUY2UkN4RlFVRTRSQ3RGTEV0QlFUbEVMRWRCUVhORlF5eExRVUYwUlR0QlFVTkVMR1ZCUmtRc1JVRkZSeXhEUVVaSU8wRkJSMFFzWVVGS1JEdEJRVXRCTEcxQ1FVRlBMRWxCUVZBN1FVRkRSQ3hYUVd4Q1owTTdRVUZ0UW1wRFNTeGpRVUZKTEdOQlFWYzdRVUZEWW1wQ0xIbENRVUZoWVN4TFFVRmlPMEZCUTBFN1FVRkRRU3h0UWtGQlR5eERRVUZEYUVjc1UwRkJVM05HTEVWQlFWUXNRMEZCV1RsRUxFMUJRVTE0UWl4UlFVRk9MRU5CUVdWbExFbEJRV1lzUTBGQmIwSXNjMEpCUVhCQ0xFTkJRVm9zUTBGQlVqdEJRVU5FTEZkQmRrSm5RenRCUVhkQ2FrTnpSaXhuUWtGQlRTeG5Ra0ZCVnp0QlFVTm1ha0lzZVVKQlFXRlpMRXRCUVdJN1FVRkRRVHRCUVVOQkxHMUNRVUZQTEVOQlFVTm9SeXhUUVVGVGMwWXNSVUZCVkN4RFFVRlpPVVFzVFVGQlRYaENMRkZCUVU0c1EwRkJaV1VzU1VGQlppeERRVUZ2UWl4eFFrRkJjRUlzUTBGQldpeERRVUZTTzBGQlEwUXNWMEUxUW1kRE8wRkJOa0pxUTNWR0xHbENRVUZQTEdsQ1FVRlhPMEZCUTJoQ08wRkJRMEVzWjBKQlFVa3NRMEZCUTNSSExGTkJRVk56Uml4RlFVRlVMRU5CUVZrNVJDeE5RVUZOZUVJc1VVRkJUaXhEUVVGbFpTeEpRVUZtTEVOQlFXOUNMRlZCUVhCQ0xFTkJRVm9zUTBGQlRDeEZRVUZ0UkR0QlFVTnFSRk1zYjBKQlFVMHdSU3hMUVVGT0xFTkJRVmxzUnl4VFFVRlRhMElzVFVGQlZDeEhRVUZyUWtFc1RVRkJiRUlzUlVGQldqdEJRVU5CYkVJc2RVSkJRVk5yUWl4TlFVRlVMRWRCUVd0Q1FTeE5RVUZzUWl4SFFVRXlRbkZHTEZGQlFUTkNMRU5CUVc5RExFZEJRWEJETEVWQlFYbERVQ3hMUVVGNlF6dEJRVU5FTzBGQlEwWXNWMEZ1UTJkRE8wRkJiME5xUTFFc1owSkJRVTBzWjBKQlFWYzdRVUZEWml4blFrRkJTU3hEUVVGRGVFY3NVMEZCVTNOR0xFVkJRVlFzUTBGQldUbEVMRTFCUVUxTUxGVkJRV3hDTEVOQlFVd3NSVUZCYjBNN1FVRkJSVHRCUVVOd1Ewc3NiMEpCUVUwd1JTeExRVUZPTEVOQlFWbHNSeXhUUVVGVGEwSXNUVUZCVkN4RFFVRm5RaXhKUVVGb1FpeEZRVUZ6UWtFc1RVRkJkRUlzUTBGQk5rSXNTVUZCTjBJc1EwRkJXanRCUVVOQmJFSXNkVUpCUVZOclFpeE5RVUZVTEVOQlFXZENMRWxCUVdoQ0xFVkJRWE5DUVN4TlFVRjBRaXhEUVVFMlFpeEpRVUUzUWl4RlFVRnRRekpGTEVkQlFXNURMRU5CUVhWRExHOURRVUZqTjBZc1VVRkJaQ3hEUVVGMlF5eEZRVUZuUlN4WlFVRlZPMEZCUTNoRmJVY3NNa0pCUVZjc1dVRkJWenRCUVVOd1FtNUhMREpDUVVGVGEwSXNUVUZCVkN4RFFVRm5RaXhKUVVGb1FpeEZRVUZ6UWtFc1RVRkJkRUlzUTBGQk5rSXNTVUZCTjBJc1JVRkJiVU5CTEUxQlFXNURMRU5CUVRCRExFbEJRVEZETEVWQlFXZEVSaXhSUVVGb1JDeERRVUY1UkN4SFFVRjZSQ3hGUVVFNFJDdEZMRXRCUVRsRUxFZEJRWE5GUXl4TFFVRjBSVHRCUVVORUxHbENRVVpFTEVWQlJVY3NRMEZHU0R0QlFVZEVMR1ZCU2tRN1FVRkxRU3h4UWtGQlR5eEpRVUZRTzBGQlEwUXNZVUZTUkN4TlFWRlBMRWxCUVVsb1J5eFRRVUZUYzBZc1JVRkJWQ3hEUVVGWk9VUXNUVUZCVFZZc1pVRkJiRUlzUTBGQlNpeEZRVUYzUXp0QlFVTTNRMVVzYjBKQlFVMXRReXhMUVVGT0xFTkJRVmt6UkN4VFFVRlRhMElzVFVGQlZDeERRVUZuUWl4SlFVRm9RaXhEUVVGYU8wRkJRMEZzUWl4MVFrRkJVMnRDTEUxQlFWUXNRMEZCWjBJc1NVRkJhRUlzUlVGQmMwSXlSU3hIUVVGMFFpeERRVUV3UWl4dlEwRkJZemRHTEZGQlFXUXNRMEZCTVVJc1JVRkJiVVFzV1VGQlZUdEJRVU16UkVFc2VVSkJRVk5yUWl4TlFVRlVMRU5CUVdkQ0xFbEJRV2hDTEVWQlFYTkNTQ3hKUVVGMFFpeERRVUV5UWl4VFFVRXpRaXhGUVVGelF5dEZMRTFCUVhSRExFTkJRVFpEZEVVc1RVRkJUVXdzVlVGQmJrUXNSVUZCSzBRMFJTeExRVUV2UkN4SFFVRjFSVU1zUzBGQmRrVTdRVUZEUkN4bFFVWkVPMEZCUjBFc2NVSkJRVThzU1VGQlVEdEJRVU5FTzBGQlEwWXNWMEZ3UkdkRE8wRkJjVVJxUTFNc2JVSkJRVk1zYVVKQlFWTXZReXhqUVVGVUxFVkJRWGxDTzBGQlEyaERMR2RDUVVGSlFTeGpRVUZLTEVWQlFXOUNPMEZCUTJ4Q1NpeG5Ra0ZCUlVrc1kwRkJSanRCUVVORU8wRkJRMFJLTEdOQlFVVkhMSGRDUVVGR08wRkJRMFE3UVVFeFJHZERMRk5CUVc1RE8wRkJORVJFTEU5Qk1VVkVMRVZCU0dkQ0xFTkJOa1ZhTzBGQlEwdzdPMEZCUlVRN096czdPenM3T3l0Q1FVdFhPMEZCUTFRc1ZVRkJTVTRzVVVGQlVTeExRVUZMYmtRc1VVRkJUQ3hEUVVGalpTeEpRVUZrTEVOQlFXMUNMR2xEUVVGdVFpeEZRVUZ6UkVnc1VVRkJkRVFzUTBGQkswUXNXVUZCTDBRc1EwRkJXanRCUVVOQkxGVkJRVWNzUzBGQlMySXNUMEZCVEN4RFFVRmhOa01zVlVGQmFFSXNSVUZCTkVJc1MwRkJTMFVzVVVGQlRDeERRVUZqUnl4SFFVRmtMRU5CUVd0Q0xFVkJRVU41UkN4UlFVRlBka1FzVFVGQlRXcERMRTFCUVU0c1IwRkJaWGxHTEU5QlFXWXNRMEZCZFVJc1NVRkJka0lzUlVGQk5rSjJSeXhKUVVFM1FpeERRVUZyUXl4WlFVRnNReXhEUVVGU0xFVkJRV3hDTzBGQlF6VkNLME1zV1VGQlRUQkRMRWRCUVU0c1EwRkJWU3h2UTBGQll6RkRMRXRCUVdRc1EwRkJWaXhGUVVGblF5eFZRVUZUUnl4RFFVRlVMRVZCUVZjN1FVRkRla05JTEdOQlFVMTVSQ3hYUVVGT0xFTkJRV3RDTEhOQ1FVRnNRanRCUVVORUxFOUJSa1E3UVVGSFNUczdPenRCUVVsS0xGZEJRVXMxUnl4UlFVRk1MRU5CUVdOblJpeFBRVUZrTEVOQlFYTkNMSEZDUVVGMFFqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdNRUpCVFUwM1FpeExMRVZCUVU4N1FVRkRXQ3hWUVVGSk0wSXNVVUZCVVN4SlFVRmFPMEZCUTBFeVFpeFpRVUZOUXl4SFFVRk9MRU5CUVZVc2IwSkJRVlk3UVVGRFFVUXNXVUZCVFc1RExGRkJRVTRzUTBGQlpTeHZRa0ZCWml4RlFVTkhjVU1zUlVGRVNDeERRVU5OTEc5Q1FVUk9MRVZCUXpSQ0xGVkJRVk5ETEVOQlFWUXNSVUZCVnp0QlFVTnVRMEVzVlVGQlJVY3NkMEpCUVVZN1FVRkRRVHRCUVVOQmFrTXNZMEZCVFRCRkxFdEJRVTRzUTBGQldTOURMRXRCUVZvN08wRkJSVUU3UVVGRFFTeFpRVUZKTUVRc1owSkJRV2RDTVVRc1RVRkJUV3BETEUxQlFVNHNRMEZCWVN4SlFVRmlMRVZCUVcxQ1FTeE5RVUZ1UWl4RFFVRXdRaXhKUVVFeFFpeEZRVUZuUTBFc1RVRkJhRU1zUTBGQmRVTXNTVUZCZGtNc1EwRkJjRUk3UVVGRFFTeFpRVUZKTWtZc1kwRkJZM3BGTEUxQlFXeENMRVZCUVRCQ08wRkJRM2hDV2l4blFrRkJUVzFETEV0QlFVNHNRMEZCV1d0RUxHRkJRVm83UVVGRFJEdEJRVU5HTEU5QldFZzdRVUZaUkRzN1FVRkZSRHM3T3pzN096czdjME5CUzJ0Q08wRkJRMmhDTEZWQlFVbHlSaXhSUVVGUkxFbEJRVm83UVVGRFFTeFhRVUZMVEN4VlFVRk1MRU5CUVdkQ1F5eEhRVUZvUWl4RFFVRnZRaXc0UWtGQmNFSXNSVUZEUzJkRExFZEJSRXdzUTBGRFV5eHZRa0ZFVkN4RlFVVkxReXhGUVVaTUxFTkJSVkVzYjBKQlJsSXNSVUZGT0VJc1ZVRkJVME1zUTBGQlZDeEZRVUZYTzBGQlEyNURPMEZCUTBFMlF5eHRRa0ZCVnl4WlFVRlZPMEZCUTI1Q00wVXNaMEpCUVUxMVF5eFJRVUZPTzBGQlEwUXNVMEZHUkN4RlFVVkhMRU5CUmtnN1FVRkhTQ3hQUVZCSU8wRkJVVVE3TzBGQlJVUTdPenM3T3pzN096czdNa05CVDNWQ1dpeExMRVZCUVU4MlFpeFBMRVZCUVZNN1FVRkRja00zUWl4WlFVRk5ka01zVVVGQlRpeERRVUZsTEZkQlFXWXNSVUZCTkVKblJ5eFhRVUUxUWl4RFFVRjNReXhYUVVGNFF5eEZRVUZ4UkM5R0xFbEJRWEpFTEVOQlFUQkVMR0ZCUVRGRUxFVkJRWGxGTEV0QlFYcEZPMEZCUTBGelF5eFpRVUZOYWtNc1RVRkJUaXhEUVVGaExFbEJRV0lzUlVGQmJVSk1MRWxCUVc1Q0xFTkJRWGRDTEdWQlFYaENMRVZCUVhsRExFbEJRWHBETzBGQlEwRXNWVUZCU1cxRkxGbEJRVmtzU1VGQmFFSXNSVUZCYzBJN1FVRkRjRUlzWVVGQlMyaEdMRkZCUVV3c1EwRkJZMmRHTEU5QlFXUXNRMEZCYzBJc2JVSkJRWFJDTEVWQlFUSkRMRU5CUVVNM1FpeExRVUZFTEVOQlFUTkRPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096c3lRMEZQZFVKQkxFc3NSVUZCVHpaQ0xFOHNSVUZCVXp0QlFVTnlRemRDTEZsQlFVMTVSQ3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRVZCUVN0Q2FFY3NVVUZCTDBJc1EwRkJkME1zVjBGQmVFTXNSVUZCY1VSRExFbEJRWEpFTEVOQlFUQkVMR0ZCUVRGRUxFVkJRWGxGTEVsQlFYcEZPMEZCUTBGelF5eFpRVUZOYWtNc1RVRkJUaXhEUVVGaExFbEJRV0lzUlVGQmJVSk1MRWxCUVc1Q0xFTkJRWGRDTEdWQlFYaENMRVZCUVhsRExFdEJRWHBETzBGQlEwRXNWVUZCU1cxRkxGbEJRVmtzU1VGQmFFSXNSVUZCYzBJN1FVRkRjRUkzUWl4alFVRk5Oa0lzVDBGQlRpeERRVUZqTEcxQ1FVRmtMRVZCUVcxRExFTkJRVU0zUWl4TFFVRkVMRU5CUVc1RE8wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3pzN09FSkJVVlZCTEVzc1JVRkJUekpFTEZNc1JVRkJWenM3UVVGRk1VSXNWVUZCU1hSR0xGRkJRVkVzU1VGQldqczdRVUZGUVR0QlFVTkJMRlZCUVVsMVJpeHZRa0ZCYjBJc1MwRkJTeTlITEZGQlFVd3NRMEZCWTJVc1NVRkJaQ3hEUVVGdFFpdzJRMEZCYmtJc1EwRkJlRUk3UVVGRFFXZEhMSGRDUVVGclFuUkdMRWxCUVd4Q0xFTkJRWFZDTEZWQlFWTjFSaXhMUVVGVUxFVkJRV2RDTzBGQlEzSkRlRVlzWTBGQlRYbEdMSE5DUVVGT0xFTkJRVFpDTEhOQ1FVRkZMRWxCUVVZc1EwRkJOMEk3UVVGRFJDeFBRVVpFT3p0QlFVbEJPMEZCUTBFc1ZVRkJTVGxFTEUxQlFVMXRReXhGUVVGT0xFTkJRVk1zYTBKQlFWUXNRMEZCU2l4RlFVRnJRenRCUVVOb1F5eFpRVUZKZDBJc1kwRkJZeXhKUVVGc1FpeEZRVUYzUWpORUxFMUJRVTF3UXl4SlFVRk9MRU5CUVZjc2VVSkJRVmdzUlVGQmMwTm5SaXhMUVVGMFF5eEhRVUU0UTBNc1MwRkJPVU03UVVGRGVFSXNXVUZCU1N4TFFVRkxha2NzVDBGQlRDeERRVUZoTmtNc1ZVRkJha0lzUlVGQk5rSXNTMEZCUzBVc1VVRkJUQ3hEUVVGalJ5eEhRVUZrTEVOQlFXdENMRkZCUVd4Q0xFVkJRVFJDUlN4TlFVRk5MME1zU1VGQlRpeERRVUZYTEZsQlFWZ3NRMEZCTlVJN1FVRkROMEk3UVVGRFJEczdRVUZGUkR0QlFVTkJMRlZCUVVsaExGbEJRVmxyUXl4TlFVRk5ia01zVVVGQlRpeEhRVUZwUWl0RkxFdEJRV3BDTEVkQlFYbENka01zV1VGQmVrSXNRMEZCYzBNc2EwSkJRWFJETEVWQlFUQkVMR2RDUVVFeFJDeERRVUZvUWpzN1FVRkZRVHRCUVVOQmRrTXNaMEpCUVZWUkxFbEJRVllzUTBGQlpTeFZRVUZUZFVZc1MwRkJWQ3hGUVVGblFqczdRVUZGTjBJN1FVRkRRU3haUVVGSlFTeFZRVUZWTEVOQlFWWXNTVUZCWlhoR0xFMUJRVTE2UWl4UFFVRk9MRU5CUVdNMlF5eFZRVUZxUXl4RlFVRTJRenRCUVVNelEzQkNMR2RDUVVGTmMwSXNVVUZCVGl4RFFVRmxSeXhIUVVGbUxFTkJRVzFDTEZGQlFXNUNMRVZCUVRaQ0xITkNRVUZGTEVsQlFVWXNSVUZCVVRkRExFbEJRVklzUTBGQllTeFpRVUZpTEVOQlFUZENPMEZCUTBRN08wRkJSVVFzV1VGQlNUaEhMR05CUVdOR0xGTkJRVk12Uml4VlFVRlZiVUlzVFVGQlZpeEhRVUZ0UWl4RFFVRTVRenM3UVVGRlFUdEJRVU5CTzBGQlEwRXNXVUZCU1RoRkxHZENRVUZuUWl4SlFVRndRaXhGUVVFd1FqdEJRVU40UWl4blEwRkJSU3hKUVVGR0xFVkJRVkZ5UWl4SFFVRlNMRU5CUVZrc2IwTkJRV01zYzBKQlFVVXNTVUZCUml4RFFVRmtMRU5CUVZvc1JVRkJiME1zV1VGQlRUdEJRVU40UXl4blFrRkJTV2xDTEdOQlFXTXNTVUZCYkVJc1JVRkJkMEk3UVVGRGRFSXpSQ3h2UWtGQlRYQkRMRWxCUVU0c1EwRkJWeXg1UWtGQldDeEZRVUZ6UTJkR0xFdEJRWFJETEVkQlFUaERReXhMUVVFNVF6dEJRVU5FTzBGQlEwWXNWMEZLUkR0QlFVdEVPenRCUVVWRWVFVXNZMEZCVFRKR0xITkNRVUZPTEVOQlFUWkNMSE5DUVVGRkxFbEJRVVlzUTBGQk4wSXNSVUZCYzBORUxGZEJRWFJETzBGQlEwUXNUMEZ3UWtRN1FVRnhRa1E3TzBGQlJVUTdPenM3T3pzN096c3dRa0ZOVFM5RUxFc3NSVUZCVHp0QlFVTllMRlZCUVVjc1MwRkJTM0JFTEU5QlFVd3NRMEZCWVRaRExGVkJRV2hDTEVWQlFUUkNMRXRCUVV0RkxGRkJRVXdzUTBGQlkwY3NSMEZCWkN4RFFVRnJRaXhGUVVGRGVVUXNVVUZCVDNaRUxFMUJRVTF1UXl4UlFVRk9MRU5CUVdVc1owSkJRV1lzUlVGQmFVTmFMRWxCUVdwRExFTkJRWE5ETEZsQlFYUkRMRU5CUVZJc1JVRkJiRUk3UVVGRE5VSXJReXhaUVVGTmRFTXNTVUZCVGl4RFFVRlhMR1ZCUVZnc1JVRkJORUlzU1VGQk5VSTdRVUZEUVhORExGbEJRVTF1UXl4UlFVRk9MRU5CUVdVc1owSkJRV1lzUlVGQmFVTktMRkZCUVdwRExFTkJRVEJETEZkQlFURkRMRVZCUVhWRVowY3NWMEZCZGtRc1EwRkJiVVVzVjBGQmJrVXNSVUZCWjBZdlJpeEpRVUZvUml4RFFVRnhSaXhoUVVGeVJpeEZRVUZ2Unl4TFFVRndSenRCUVVOQk96czdPMEZCU1VFc1YwRkJTMklzVVVGQlRDeERRVUZqWjBZc1QwRkJaQ3hEUVVGelFpeHRRa0ZCZEVJc1JVRkJNa01zUTBGQlF6ZENMRXRCUVVRc1EwRkJNME03UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pCQ1FVMU5RU3hMTEVWQlFVODdRVUZEV0N4VlFVRkhMRXRCUVV0d1JDeFBRVUZNTEVOQlFXRTJReXhWUVVGb1FpeEZRVUUwUWl4TFFVRkxSU3hSUVVGTUxFTkJRV05ITEVkQlFXUXNRMEZCYTBJc1JVRkJRM2xFTEZGQlFVOTJSQ3hOUVVGTmFrTXNUVUZCVGl4SFFVRmxlVVlzVDBGQlppeERRVUYxUWl4SlFVRjJRaXhGUVVFMlFuWkhMRWxCUVRkQ0xFTkJRV3RETEZsQlFXeERMRU5CUVZJc1JVRkJiRUk3UVVGRE5VSXNWVUZCU1c5Q0xGRkJRVkVzU1VGQldqdEJRVU5CTWtJc1dVRkJUV3BETEUxQlFVNHNRMEZCWVN4SlFVRmlMRVZCUVcxQ1RDeEpRVUZ1UWl4RFFVRjNRaXhsUVVGNFFpeEZRVUY1UXl4TFFVRjZRenRCUVVOQmMwTXNXVUZCVFhSRExFbEJRVTRzUTBGQlZ5eGhRVUZZTEVWQlFUQkNMRWxCUVRGQ08wRkJRMEZ6UXl4WlFVRk5ka01zVVVGQlRpeERRVUZsTEZsQlFXWXNSVUZEVFdsR0xFZEJSRTRzUTBGRFZTeHZRMEZCWXpGRExFdEJRV1FzUTBGRVZpeEZRVU5uUXl4WlFVRlZPMEZCUTI1RFFTeGpRVUZOZVVRc1YwRkJUaXhEUVVGclFpeHpRa0ZCYkVJN1FVRkRRWHBFTEdOQlFVMXBSU3hKUVVGT0xFZEJRV0Y0Unl4UlFVRmlMRU5CUVhOQ0xGZEJRWFJDTzBGQlEwUXNUMEZLVGp0QlFVdEJPenM3TzBGQlNVRjFReXhaUVVGTk5rSXNUMEZCVGl4RFFVRmpMRzFDUVVGa0xFVkJRVzFETEVOQlFVTTNRaXhMUVVGRUxFTkJRVzVETzBGQlEwUTdPMEZCUlVRN096czdPenM3T3p0clEwRk5ZenRCUVVOYUxGVkJRVXRyUlN4WlFVRlpMRU5CUVdwQ08wRkJRVUVzVlVGQmIwSkRMRk5CUVZNc1JVRkJOMEk3UVVGQlFTeFZRVUZwUXpsR0xGRkJRVkVzU1VGQmVrTTdRVUZEUVN4WFFVRkxVQ3hUUVVGTUxFTkJRV1ZuUlN4SFFVRm1MRU5CUVcxQ0xFdEJRVXRxUml4UlFVRjRRaXhGUVVGclEzbENMRWxCUVd4RExFTkJRWFZETEZsQlFWVTdRVUZETDBNc1dVRkJTVGhHTEdGQlFXRXNjMEpCUVVVc1NVRkJSaXhGUVVGUmRrY3NVVUZCVWl4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUW05Q0xFMUJRWGhETzBGQlEwRXNXVUZCU1hORkxGTkJRVk5qTEhGQ1FVRkpReXhoUVVGS0xFTkJRV3RDTEVsQlFXeENMRVZCUVhkQ1ppeE5RVUZ5UXp0QlFVTkJWeXh2UWtGQldWZ3NVMEZCVTFjc1UwRkJWQ3hIUVVGeFFsZ3NUVUZCY2tJc1IwRkJPRUpYTEZOQlFURkRPMEZCUTBFc1dVRkJSemRHTEUxQlFVMTZRaXhQUVVGT0xFTkJRV00yUXl4VlFVRnFRaXhGUVVFMlFqdEJRVU16UWl4blEwRkJSU3hKUVVGR0xFVkJRVkY0UXl4SlFVRlNMRU5CUVdFc1dVRkJZaXhGUVVFd1FuTkhMRTFCUVRGQ08wRkJRMEVzWTBGQlNTeERRVUZETEhOQ1FVRkZMRWxCUVVZc1JVRkJVVGRFTEZGQlFWSXNRMEZCYVVJc2MwSkJRV3BDTEVOQlFVd3NSVUZCSzBONVJTeFBRVUZQTEZGQlFWQXNTVUZCYlVKYUxFMUJRVzVDTzBGQlEyaEVPMEZCUTBZc1QwRlNSRHM3UVVGVlFTeFZRVUZITEVOQlFVTXNTMEZCU3pOSExFOUJRVXdzUTBGQllUWkRMRlZCUVdwQ0xFVkJRVFpDTUVVc1QwRkJUeXhaUVVGUUxFbEJRVEJDUkN4VFFVRXhRanM3UVVGRk4wSkRMR0ZCUVU4c1YwRkJVQ3hKUVVGNVFpeExRVUZMZEVnc1VVRkJUQ3hEUVVGakxFTkJRV1FzUlVGQmFVSXdTQ3h4UWtGQmFrSXNSMEZCZVVORExFdEJRV3hGT3p0QlFVVkJMR0ZCUVU5TUxFMUJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenNyUWtGSlZ6dEJRVU5VTEZWQlFVY3NTMEZCUzNaSUxFOUJRVXdzUTBGQllXbEZMRk5CUVdoQ0xFVkJRVEpDTEV0QlFVdG9SU3hSUVVGTUxFTkJRV052UkN4SFFVRmtMRU5CUVd0Q0xHVkJRV3hDTEVWQlFXdERMRXRCUVV0aExGbEJRWFpETzBGQlF6TkNMRmRCUVV0R0xGRkJRVXc3UVVGRFJDeFhRVUZMTDBRc1VVRkJUQ3hEUVVGamIwUXNSMEZCWkN4RFFVRnJRaXh4UWtGQmJFSTdRVUZEUXpORExEUkNRVUZMYlVnc1NVRkJUQ3hEUVVGVkxFdEJRVXMxU0N4UlFVRm1MRVZCUVhsQ0xGZEJRWHBDTzBGQlEwRXNWMEZCUzBFc1VVRkJUQ3hEUVVGak5rZ3NUVUZCWkN4SFFVTmpPVWNzU1VGRVpDeERRVU50UWl3MlEwRkVia0lzUlVGRGEwVXJSeXhOUVVSc1JTeEhRVVZqUXl4SFFVWmtMRWRCUlc5Q2FFZ3NTVUZHY0VJc1EwRkZlVUlzWjBSQlJucENMRVZCUlRKRk5rWXNWMEZHTTBVc1EwRkZkVVlzTWtOQlJuWkdMRVZCUjJOdFFpeEhRVWhrTEVkQlIyOUNhRWdzU1VGSWNFSXNRMEZIZVVJc1owSkJTSHBDTEVWQlJ6SkRhVUlzVlVGSU0wTXNRMEZIYzBRc01rSkJTSFJFTzBGQlNVRXNWMEZCUzJ4Q0xHVkJRVXdzUTBGQmNVSlhMRWxCUVhKQ0xFTkJRVEJDTEZsQlFWYzdRVUZEYmtNc09FSkJRVVVzU1VGQlJpeEZRVUZSTWtJc1IwRkJVaXhEUVVGWkxHVkJRVm83UVVGRFJDeFBRVVpFT3p0QlFVbEJMRmRCUVV0d1JDeFJRVUZNTEVOQlFXTmxMRWxCUVdRc1EwRkJiVUlzZFVKQlFXNUNMRVZCUVRSRGFVZ3NUVUZCTlVNN1FVRkRRU3hYUVVGTEwwY3NVMEZCVEN4RFFVRmxNa1lzVjBGQlppeERRVUV5UWl3MFEwRkJNMEk3TzBGQlJVRXNWMEZCU3pWSExGRkJRVXdzUTBGQlkyVXNTVUZCWkN4RFFVRnRRaXhIUVVGdVFpeEZRVUYzUWxVc1NVRkJlRUlzUTBGQk5rSXNXVUZCVlR0QlFVTnlReXhaUVVGSlF5eFJRVUZSTEhOQ1FVRkZMRWxCUVVZc1EwRkJXanRCUVVOQlFTeGpRVUZOVFN4VlFVRk9MRU5CUVdsQ0xGVkJRV3BDTzBGQlEwRXNXVUZCUjA0c1RVRkJUWFJDTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVVnc1JVRkJNa0k3UVVGRGVrSnpRaXhuUWtGQlRXSXNTVUZCVGl4RFFVRlhMRTFCUVZnc1JVRkJiVUpoTEUxQlFVMTBRaXhKUVVGT0xFTkJRVmNzVjBGQldDeERRVUZ1UWl4RlFVRTBRelpJTEZWQlFUVkRMRU5CUVhWRUxGZEJRWFpFTzBGQlEwUXNVMEZHUkN4TlFVVkxPMEZCUVVVN1FVRkJVenRCUVVOcVFpeFBRVTVFTzBGQlQwUTdPenM3UlVGeVpuRkNReXhyUWpzN1FVRjNabmhDY2trc1ZVRkJWVTBzVVVGQlZpeEhRVUZ4UWp0QlFVTnVRanM3T3pzN096dEJRVTlCVVN4clFrRkJaMElzU1VGU1J6dEJRVk51UWpzN096czdPMEZCVFVFMFFpeGpRVUZaTERaRVFXWlBPMEZCWjBKdVFqczdPenM3TzBGQlRVRkdMSE5DUVVGdlFpeExRWFJDUkR0QlFYVkNia0k3T3pzN096dEJRVTFCVlN4WFFVRlRMR0ZCTjBKVk8wRkJPRUp1UWpzN096czdPMEZCVFVGdVFpeGpRVUZaTEV0QmNFTlBPMEZCY1VOdVFqczdPenM3TzBGQlRVRm5ReXhuUWtGQll5eExRVE5EU3p0QlFUUkRia0k3T3pzN096dEJRVTFCYUVJc1kwRkJXU3hMUVd4RVR6dEJRVzFFYmtJN096czdPenRCUVUxQlNTeHBRa0ZCWlN4TFFYcEVTVHRCUVRCRWJrSTdPenM3T3p0QlFVMUJaMElzWVVGQlZ5eExRV2hGVVR0QlFXbEZia0k3T3pzN096dEJRVTFCVFN4dlFrRkJhMElzUlVGMlJVTTdRVUYzUlc1Q096czdPenM3UVVGTlFVc3NiVUpCUVdsQ0xFTkJPVVZGTzBGQkswVnVRanM3T3pzN08wRkJUVUZITEhGQ1FVRnRRaXhIUVhKR1FUdEJRWE5HYmtJN096czdPenM3UVVGUFFVTXNiVUpCUVdsQ08wRkJRMnBDTzBGQk9VWnRRaXhEUVVGeVFqczdVVUZwUjFGc1JpeFRMRWRCUVVGQkxGTWlMQ0ptYVd4bElqb2labTkxYm1SaGRHbHZiaTVrY21sc2JHUnZkMjR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbHRjRzl5ZENBa0lHWnliMjBnSjJweGRXVnllU2M3WEc1cGJYQnZjblFnZXlCTFpYbGliMkZ5WkNCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG10bGVXSnZZWEprSnp0Y2JtbHRjRzl5ZENCN0lFNWxjM1FnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzV1WlhOMEp6dGNibWx0Y0c5eWRDQjdJRWRsZEZsdlJHbG5hWFJ6TENCMGNtRnVjMmwwYVc5dVpXNWtJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5WMGFXd3VZMjl5WlNjN1hHNXBiWEJ2Y25RZ2V5QkNiM2dnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzVpYjNnbk8xeHVhVzF3YjNKMElIc2dVR3gxWjJsdUlIMGdabkp2YlNBbkxpOW1iM1Z1WkdGMGFXOXVMbkJzZFdkcGJpYzdYRzVjYmk4cUtseHVJQ29nUkhKcGJHeGtiM2R1SUcxdlpIVnNaUzVjYmlBcUlFQnRiMlIxYkdVZ1ptOTFibVJoZEdsdmJpNWtjbWxzYkdSdmQyNWNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxuVjBhV3d1YTJWNVltOWhjbVJjYmlBcUlFQnlaWEYxYVhKbGN5Qm1iM1Z1WkdGMGFXOXVMblYwYVd3dWJtVnpkRnh1SUNvZ1FISmxjWFZwY21WeklHWnZkVzVrWVhScGIyNHVkWFJwYkM1aWIzaGNiaUFxTDF4dVhHNWpiR0Z6Y3lCRWNtbHNiR1J2ZDI0Z1pYaDBaVzVrY3lCUWJIVm5hVzRnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQmhJR1J5YVd4c1pHOTNiaUJ0Wlc1MUxseHVJQ0FnS2lCQVkyeGhjM05jYmlBZ0lDb2dRRzVoYldVZ1JISnBiR3hrYjNkdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YWxGMVpYSjVmU0JsYkdWdFpXNTBJQzBnYWxGMVpYSjVJRzlpYW1WamRDQjBieUJ0WVd0bElHbHVkRzhnWVc0Z1lXTmpiM0prYVc5dUlHMWxiblV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdUM1psY25KcFpHVnpJSFJ2SUhSb1pTQmtaV1poZFd4MElIQnNkV2RwYmlCelpYUjBhVzVuY3k1Y2JpQWdJQ292WEc0Z0lGOXpaWFIxY0NobGJHVnRaVzUwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDQTlJR1ZzWlcxbGJuUTdYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnSkM1bGVIUmxibVFvZTMwc0lFUnlhV3hzWkc5M2JpNWtaV1poZFd4MGN5d2dkR2hwY3k0a1pXeGxiV1Z1ZEM1a1lYUmhLQ2tzSUc5d2RHbHZibk1wTzF4dUlDQWdJSFJvYVhNdVkyeGhjM05PWVcxbElEMGdKMFJ5YVd4c1pHOTNiaWM3SUM4dklHbGxPU0JpWVdOcklHTnZiWEJoZEZ4dVhHNGdJQ0FnZEdocGN5NWZhVzVwZENncE8xeHVYRzRnSUNBZ1MyVjVZbTloY21RdWNtVm5hWE4wWlhJb0owUnlhV3hzWkc5M2JpY3NJSHRjYmlBZ0lDQWdJQ2RGVGxSRlVpYzZJQ2R2Y0dWdUp5eGNiaUFnSUNBZ0lDZFRVRUZEUlNjNklDZHZjR1Z1Snl4Y2JpQWdJQ0FnSUNkQlVsSlBWMTlTU1VkSVZDYzZJQ2R1WlhoMEp5eGNiaUFnSUNBZ0lDZEJVbEpQVjE5VlVDYzZJQ2QxY0Njc1hHNGdJQ0FnSUNBblFWSlNUMWRmUkU5WFRpYzZJQ2RrYjNkdUp5eGNiaUFnSUNBZ0lDZEJVbEpQVjE5TVJVWlVKem9nSjNCeVpYWnBiM1Z6Snl4Y2JpQWdJQ0FnSUNkRlUwTkJVRVVuT2lBblkyeHZjMlVuTEZ4dUlDQWdJQ0FnSjFSQlFpYzZJQ2RrYjNkdUp5eGNiaUFnSUNBZ0lDZFRTRWxHVkY5VVFVSW5PaUFuZFhBblhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElHUnlhV3hzWkc5M2JpQmllU0JqY21WaGRHbHVaeUJxVVhWbGNua2dZMjlzYkdWamRHbHZibk1nYjJZZ1pXeGxiV1Z1ZEhOY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5cGJtbDBLQ2tnZTF4dUlDQWdJRTVsYzNRdVJtVmhkR2hsY2loMGFHbHpMaVJsYkdWdFpXNTBMQ0FuWkhKcGJHeGtiM2R1SnlrN1hHNWNiaUFnSUNCcFppaDBhR2x6TG05d2RHbHZibk11WVhWMGIwRndjR3g1UTJ4aGMzTXBJSHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdVlXUmtRMnhoYzNNb0oyUnlhV3hzWkc5M2JpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpaDdYRzRnSUNBZ0lDQW5jbTlzWlNjNklDZDBjbVZsSnl4Y2JpQWdJQ0FnSUNkaGNtbGhMVzExYkhScGMyVnNaV04wWVdKc1pTYzZJR1poYkhObFhHNGdJQ0FnZlNrN1hHNGdJQ0FnZEdocGN5NGtjM1ZpYldWdWRVRnVZMmh2Y25NZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1acGJtUW9KMnhwTG1sekxXUnlhV3hzWkc5M2JpMXpkV0p0Wlc1MUxYQmhjbVZ1ZENjcExtTm9hV3hrY21WdUtDZGhKeWs3WEc0Z0lDQWdkR2hwY3k0a2MzVmliV1Z1ZFhNZ1BTQjBhR2x6TGlSemRXSnRaVzUxUVc1amFHOXljeTV3WVhKbGJuUW9KMnhwSnlrdVkyaHBiR1J5Wlc0b0oxdGtZWFJoTFhOMVltMWxiblZkSnlrdVlYUjBjaWduY205c1pTY3NJQ2RuY205MWNDY3BPMXh1SUNBZ0lIUm9hWE11SkcxbGJuVkpkR1Z0Y3lBOUlIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25iR2tuS1M1dWIzUW9KeTVxY3kxa2NtbHNiR1J2ZDI0dFltRmpheWNwTG1GMGRISW9KM0p2YkdVbkxDQW5kSEpsWldsMFpXMG5LUzVtYVc1a0tDZGhKeWs3WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1aGRIUnlLQ2RrWVhSaExXMTFkR0YwWlNjc0lDaDBhR2x6TGlSbGJHVnRaVzUwTG1GMGRISW9KMlJoZEdFdFpISnBiR3hrYjNkdUp5a2dmSHdnUjJWMFdXOUVhV2RwZEhNb05pd2dKMlJ5YVd4c1pHOTNiaWNwS1NrN1hHNWNiaUFnSUNCMGFHbHpMbDl3Y21Wd1lYSmxUV1Z1ZFNncE8xeHVJQ0FnSUhSb2FYTXVYM0psWjJsemRHVnlSWFpsYm5SektDazdYRzVjYmlBZ0lDQjBhR2x6TGw5clpYbGliMkZ5WkVWMlpXNTBjeWdwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlIQnlaWEJoY21WeklHUnlhV3hzWkc5M2JpQnRaVzUxSUdKNUlITmxkSFJwYm1jZ1lYUjBjbWxpZFhSbGN5QjBieUJzYVc1cmN5QmhibVFnWld4bGJXVnVkSE5jYmlBZ0lDb2djMlYwY3lCaElHMXBiaUJvWldsbmFIUWdkRzhnY0hKbGRtVnVkQ0JqYjI1MFpXNTBJR3AxYlhCcGJtZGNiaUFnSUNvZ2QzSmhjSE1nZEdobElHVnNaVzFsYm5RZ2FXWWdibTkwSUdGc2NtVmhaSGtnZDNKaGNIQmxaRnh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ292WEc0Z0lGOXdjbVZ3WVhKbFRXVnVkU2dwSUh0Y2JpQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDOHZJR2xtS0NGMGFHbHpMbTl3ZEdsdmJuTXVhRzlzWkU5d1pXNHBlMXh1SUNBZ0lDOHZJQ0FnZEdocGN5NWZiV1Z1ZFV4cGJtdEZkbVZ1ZEhNb0tUdGNiaUFnSUNBdkx5QjlYRzRnSUNBZ2RHaHBjeTRrYzNWaWJXVnVkVUZ1WTJodmNuTXVaV0ZqYUNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2RtRnlJQ1JzYVc1cklEMGdKQ2gwYUdsektUdGNiaUFnSUNBZ0lIWmhjaUFrYzNWaUlEMGdKR3hwYm1zdWNHRnlaVzUwS0NrN1hHNGdJQ0FnSUNCcFppaGZkR2hwY3k1dmNIUnBiMjV6TG5CaGNtVnVkRXhwYm1zcGUxeHVJQ0FnSUNBZ0lDQWtiR2x1YXk1amJHOXVaU2dwTG5CeVpYQmxibVJVYnlna2MzVmlMbU5vYVd4a2NtVnVLQ2RiWkdGMFlTMXpkV0p0Wlc1MVhTY3BLUzUzY21Gd0tDYzhiR2tnWkdGMFlTMXBjeTF3WVhKbGJuUXRiR2x1YXlCamJHRnpjejFjSW1sekxYTjFZbTFsYm5VdGNHRnlaVzUwTFdsMFpXMGdhWE10YzNWaWJXVnVkUzFwZEdWdElHbHpMV1J5YVd4c1pHOTNiaTF6ZFdKdFpXNTFMV2wwWlcxY0lpQnliMnhsUFZ3aWJXVnVkV2wwWlcxY0lqNDhMMnhwUGljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0pHeHBibXN1WkdGMFlTZ25jMkYyWldSSWNtVm1KeXdnSkd4cGJtc3VZWFIwY2lnbmFISmxaaWNwS1M1eVpXMXZkbVZCZEhSeUtDZG9jbVZtSnlrdVlYUjBjaWduZEdGaWFXNWtaWGduTENBd0tUdGNiaUFnSUNBZ0lDUnNhVzVyTG1Ob2FXeGtjbVZ1S0NkYlpHRjBZUzF6ZFdKdFpXNTFYU2NwWEc0Z0lDQWdJQ0FnSUNBZ0xtRjBkSElvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKMkZ5YVdFdGFHbGtaR1Z1SnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZDBZV0pwYm1SbGVDYzZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5jbTlzWlNjNklDZG5jbTkxY0NkY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJRjkwYUdsekxsOWxkbVZ1ZEhNb0pHeHBibXNwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdUpITjFZbTFsYm5WekxtVmhZMmdvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhaaGNpQWtiV1Z1ZFNBOUlDUW9kR2hwY3lrc1hHNGdJQ0FnSUNBZ0lDQWdKR0poWTJzZ1BTQWtiV1Z1ZFM1bWFXNWtLQ2N1YW5NdFpISnBiR3hrYjNkdUxXSmhZMnNuS1R0Y2JpQWdJQ0FnSUdsbUtDRWtZbUZqYXk1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0Y5MGFHbHpMbTl3ZEdsdmJuTXVZbUZqYTBKMWRIUnZibEJ2YzJsMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSW1KdmRIUnZiVndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdKRzFsYm5VdVlYQndaVzVrS0Y5MGFHbHpMbTl3ZEdsdmJuTXVZbUZqYTBKMWRIUnZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWRHOXdYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtiV1Z1ZFM1d2NtVndaVzVrS0Y5MGFHbHpMbTl3ZEdsdmJuTXVZbUZqYTBKMWRIUnZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGNJbFZ1YzNWd2NHOXlkR1ZrSUdKaFkydENkWFIwYjI1UWIzTnBkR2x2YmlCMllXeDFaU0FuWENJZ0t5QmZkR2hwY3k1dmNIUnBiMjV6TG1KaFkydENkWFIwYjI1UWIzTnBkR2x2YmlBcklGd2lKMXdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1gzUm9hWE11WDJKaFkyc29KRzFsYm5VcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2RHaHBjeTRrYzNWaWJXVnVkWE11WVdSa1EyeGhjM01vSjJsdWRtbHphV0pzWlNjcE8xeHVJQ0FnSUdsbUtDRjBhR2x6TG05d2RHbHZibk11WVhWMGIwaGxhV2RvZENrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrYzNWaWJXVnVkWE11WVdSa1EyeGhjM01vSjJSeWFXeHNaRzkzYmkxemRXSnRaVzUxTFdOdmRtVnlMWEJ5WlhacGIzVnpKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWTNKbFlYUmxJR0VnZDNKaGNIQmxjaUJ2YmlCbGJHVnRaVzUwSUdsbUlHbDBJR1J2WlhOdUozUWdaWGhwYzNRdVhHNGdJQ0FnYVdZb0lYUm9hWE11SkdWc1pXMWxiblF1Y0dGeVpXNTBLQ2t1YUdGelEyeGhjM01vSjJsekxXUnlhV3hzWkc5M2JpY3BLWHRjYmlBZ0lDQWdJSFJvYVhNdUpIZHlZWEJ3WlhJZ1BTQWtLSFJvYVhNdWIzQjBhVzl1Y3k1M2NtRndjR1Z5S1M1aFpHUkRiR0Z6Y3lnbmFYTXRaSEpwYkd4a2IzZHVKeWs3WEc0Z0lDQWdJQ0JwWmloMGFHbHpMbTl3ZEdsdmJuTXVZVzVwYldGMFpVaGxhV2RvZENrZ2RHaHBjeTRrZDNKaGNIQmxjaTVoWkdSRGJHRnpjeWduWVc1cGJXRjBaUzFvWldsbmFIUW5LVHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWQzSmhjQ2gwYUdsekxpUjNjbUZ3Y0dWeUtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2MyVjBJSGR5WVhCd1pYSmNiaUFnSUNCMGFHbHpMaVIzY21Gd2NHVnlJRDBnZEdocGN5NGtaV3hsYldWdWRDNXdZWEpsYm5Rb0tUdGNiaUFnSUNCMGFHbHpMaVIzY21Gd2NHVnlMbU56Y3loMGFHbHpMbDluWlhSTllYaEVhVzF6S0NrcE8xeHVJQ0I5WEc1Y2JpQWdYM0psYzJsNlpTZ3BJSHRjYmlBZ0lDQjBhR2x6TGlSM2NtRndjR1Z5TG1OemN5aDdKMjFoZUMxM2FXUjBhQ2M2SUNkdWIyNWxKeXdnSjIxcGJpMW9aV2xuYUhRbk9pQW5ibTl1WlNkOUtUdGNiaUFnSUNBdkx5QmZaMlYwVFdGNFJHbHRjeUJvWVhNZ2MybGtaU0JsWm1abFkzUnpJQ2hpYjI4cElHSjFkQ0JqWVd4c2FXNW5JR2wwSUhOb2IzVnNaQ0IxY0dSaGRHVWdZV3hzSUc5MGFHVnlJRzVsWTJWemMyRnllU0JvWldsbmFIUnpJQ1lnZDJsa2RHaHpYRzRnSUNBZ2RHaHBjeTRrZDNKaGNIQmxjaTVqYzNNb2RHaHBjeTVmWjJWMFRXRjRSR2x0Y3lncEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCWkdSeklHVjJaVzUwSUdoaGJtUnNaWEp6SUhSdklHVnNaVzFsYm5SeklHbHVJSFJvWlNCdFpXNTFMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHRxVVhWbGNubDlJQ1JsYkdWdElDMGdkR2hsSUdOMWNuSmxiblFnYldWdWRTQnBkR1Z0SUhSdklHRmtaQ0JvWVc1a2JHVnljeUIwYnk1Y2JpQWdJQ292WEc0Z0lGOWxkbVZ1ZEhNb0pHVnNaVzBwSUh0Y2JpQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdKR1ZzWlcwdWIyWm1LQ2RqYkdsamF5NTZaaTVrY21sc2JHUnZkMjRuS1Z4dUlDQWdJQzV2YmlnblkyeHBZMnN1ZW1ZdVpISnBiR3hrYjNkdUp5d2dablZ1WTNScGIyNG9aU2w3WEc0Z0lDQWdJQ0JwWmlna0tHVXVkR0Z5WjJWMEtTNXdZWEpsYm5SelZXNTBhV3dvSjNWc0p5d2dKMnhwSnlrdWFHRnpRMnhoYzNNb0oybHpMV1J5YVd4c1pHOTNiaTF6ZFdKdFpXNTFMWEJoY21WdWRDY3BLWHRjYmlBZ0lDQWdJQ0FnWlM1emRHOXdTVzF0WldScFlYUmxVSEp2Y0dGbllYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJwWmlobExuUmhjbWRsZENBaFBUMGdaUzVqZFhKeVpXNTBWR0Z5WjJWMExtWnBjbk4wUld4bGJXVnVkRU5vYVd4a0tYdGNiaUFnSUNBZ0lDOHZJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0x5OGdmVnh1SUNBZ0lDQWdYM1JvYVhNdVgzTm9iM2NvSkdWc1pXMHVjR0Z5Wlc1MEtDZHNhU2NwS1R0Y2JseHVJQ0FnSUNBZ2FXWW9YM1JvYVhNdWIzQjBhVzl1Y3k1amJHOXpaVTl1UTJ4cFkyc3BlMXh1SUNBZ0lDQWdJQ0IyWVhJZ0pHSnZaSGtnUFNBa0tDZGliMlI1SnlrN1hHNGdJQ0FnSUNBZ0lDUmliMlI1TG05bVppZ25MbnBtTG1SeWFXeHNaRzkzYmljcExtOXVLQ2RqYkdsamF5NTZaaTVrY21sc2JHUnZkMjRuTENCbWRXNWpkR2x2YmlobEtYdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pTNTBZWEpuWlhRZ1BUMDlJRjkwYUdsekxpUmxiR1Z0Wlc1MFd6QmRJSHg4SUNRdVkyOXVkR0ZwYm5Nb1gzUm9hWE11SkdWc1pXMWxiblJiTUYwc0lHVXVkR0Z5WjJWMEtTa2dleUJ5WlhSMWNtNDdJSDFjYmlBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyaHBaR1ZCYkd3b0tUdGNiaUFnSUNBZ0lDQWdJQ0FrWW05a2VTNXZabVlvSnk1NlppNWtjbWxzYkdSdmQyNG5LVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrY3lCbGRtVnVkQ0JvWVc1a2JHVnljeUIwYnlCMGFHVWdiV1Z1ZFNCbGJHVnRaVzUwTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjl5WldkcGMzUmxja1YyWlc1MGN5Z3BJSHRjYmlBZ0lDQnBaaWgwYUdsekxtOXdkR2x2Ym5NdWMyTnliMnhzVkc5d0tYdGNiaUFnSUNBZ0lIUm9hWE11WDJKcGJtUklZVzVrYkdWeUlEMGdkR2hwY3k1ZmMyTnliMnhzVkc5d0xtSnBibVFvZEdocGN5azdYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG05dUtDZHZjR1Z1TG5wbUxtUnlhV3hzWkc5M2JpQm9hV1JsTG5wbUxtUnlhV3hzWkc5M2JpQmpiRzl6WldRdWVtWXVaSEpwYkd4a2IzZHVKeXgwYUdsekxsOWlhVzVrU0dGdVpHeGxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjI0b0oyMTFkR0YwWlcxbExucG1MblJ5YVdkblpYSW5MQ0IwYUdsekxsOXlaWE5wZW1VdVltbHVaQ2gwYUdsektTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJOeWIyeHNJSFJ2SUZSdmNDQnZaaUJGYkdWdFpXNTBJRzl5SUdSaGRHRXRjMk55YjJ4c0xYUnZjQzFsYkdWdFpXNTBYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2lCQVptbHlaWE1nUkhKcGJHeGtiM2R1STNOamNtOXNiRzFsWEc0Z0lDQXFMMXh1SUNCZmMyTnliMnhzVkc5d0tDa2dlMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnZG1GeUlDUnpZM0p2Ykd4VWIzQkZiR1Z0Wlc1MElEMGdYM1JvYVhNdWIzQjBhVzl1Y3k1elkzSnZiR3hVYjNCRmJHVnRaVzUwSVQwbkp6OGtLRjkwYUdsekxtOXdkR2x2Ym5NdWMyTnliMnhzVkc5d1JXeGxiV1Z1ZENrNlgzUm9hWE11SkdWc1pXMWxiblFzWEc0Z0lDQWdJQ0FnSUhOamNtOXNiRkJ2Y3lBOUlIQmhjbk5sU1c1MEtDUnpZM0p2Ykd4VWIzQkZiR1Z0Wlc1MExtOW1abk5sZENncExuUnZjQ3RmZEdocGN5NXZjSFJwYjI1ekxuTmpjbTlzYkZSdmNFOW1abk5sZEN3Z01UQXBPMXh1SUNBZ0lDUW9KMmgwYld3c0lHSnZaSGtuS1M1emRHOXdLSFJ5ZFdVcExtRnVhVzFoZEdVb2V5QnpZM0p2Ykd4VWIzQTZJSE5qY205c2JGQnZjeUI5TENCZmRHaHBjeTV2Y0hScGIyNXpMbUZ1YVcxaGRHbHZia1IxY21GMGFXOXVMQ0JmZEdocGN5NXZjSFJwYjI1ekxtRnVhVzFoZEdsdmJrVmhjMmx1Wnl4bWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ29nUm1seVpYTWdZV1owWlhJZ2RHaGxJRzFsYm5VZ2FHRnpJSE5qY205c2JHVmtYRzRnSUNBZ0lDQWdJQ29nUUdWMlpXNTBJRVJ5YVd4c1pHOTNiaU56WTNKdmJHeHRaVnh1SUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnYVdZb2RHaHBjejA5UFNRb0oyaDBiV3duS1Zzd1hTbGZkR2hwY3k0a1pXeGxiV1Z1ZEM1MGNtbG5aMlZ5S0NkelkzSnZiR3h0WlM1NlppNWtjbWxzYkdSdmQyNG5LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQlpHUnpJR3RsZVdSdmQyNGdaWFpsYm5RZ2JHbHpkR1Z1WlhJZ2RHOGdZR3hwWUNkeklHbHVJSFJvWlNCdFpXNTFMbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMnRsZVdKdllYSmtSWFpsYm5SektDa2dlMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCMGFHbHpMaVJ0Wlc1MVNYUmxiWE11WVdSa0tIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25MbXB6TFdSeWFXeHNaRzkzYmkxaVlXTnJJRDRnWVN3Z0xtbHpMWE4xWW0xbGJuVXRjR0Z5Wlc1MExXbDBaVzBnUGlCaEp5a3BMbTl1S0NkclpYbGtiM2R1TG5wbUxtUnlhV3hzWkc5M2JpY3NJR1oxYm1OMGFXOXVLR1VwZTF4dUlDQWdJQ0FnZG1GeUlDUmxiR1Z0Wlc1MElEMGdKQ2gwYUdsektTeGNiaUFnSUNBZ0lDQWdJQ0FrWld4bGJXVnVkSE1nUFNBa1pXeGxiV1Z1ZEM1d1lYSmxiblFvSjJ4cEp5a3VjR0Z5Wlc1MEtDZDFiQ2NwTG1Ob2FXeGtjbVZ1S0Nkc2FTY3BMbU5vYVd4a2NtVnVLQ2RoSnlrc1hHNGdJQ0FnSUNBZ0lDQWdKSEJ5WlhaRmJHVnRaVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDUnVaWGgwUld4bGJXVnVkRHRjYmx4dUlDQWdJQ0FnSkdWc1pXMWxiblJ6TG1WaFkyZ29ablZ1WTNScGIyNG9hU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9KQ2gwYUdsektTNXBjeWdrWld4bGJXVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWtjSEpsZGtWc1pXMWxiblFnUFNBa1pXeGxiV1Z1ZEhNdVpYRW9UV0YwYUM1dFlYZ29NQ3dnYVMweEtTazdYRzRnSUNBZ0lDQWdJQ0FnSkc1bGVIUkZiR1Z0Wlc1MElEMGdKR1ZzWlcxbGJuUnpMbVZ4S0UxaGRHZ3ViV2x1S0drck1Td2dKR1ZzWlcxbGJuUnpMbXhsYm1kMGFDMHhLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdTMlY1WW05aGNtUXVhR0Z1Wkd4bFMyVjVLR1VzSUNkRWNtbHNiR1J2ZDI0bkxDQjdYRzRnSUNBZ0lDQWdJRzVsZUhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2taV3hsYldWdWRDNXBjeWhmZEdocGN5NGtjM1ZpYldWdWRVRnVZMmh2Y25NcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYzJodmR5Z2taV3hsYldWdWRDNXdZWEpsYm5Rb0oyeHBKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdKR1ZzWlcxbGJuUXVjR0Z5Wlc1MEtDZHNhU2NwTG05dVpTaDBjbUZ1YzJsMGFXOXVaVzVrS0NSbGJHVnRaVzUwS1N3Z1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0pHVnNaVzFsYm5RdWNHRnlaVzUwS0Nkc2FTY3BMbVpwYm1Rb0ozVnNJR3hwSUdFbktTNW1hV3gwWlhJb1gzUm9hWE11SkcxbGJuVkpkR1Z0Y3lrdVptbHljM1FvS1M1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSEJ5WlhacGIzVnpPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmFHbGtaU2drWld4bGJXVnVkQzV3WVhKbGJuUW9KMnhwSnlrdWNHRnlaVzUwS0NkMWJDY3BLVHRjYmlBZ0lDQWdJQ0FnSUNBa1pXeGxiV1Z1ZEM1d1lYSmxiblFvSjJ4cEp5a3VjR0Z5Wlc1MEtDZDFiQ2NwTG05dVpTaDBjbUZ1YzJsMGFXOXVaVzVrS0NSbGJHVnRaVzUwS1N3Z1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDUmxiR1Z0Wlc1MExuQmhjbVZ1ZENnbmJHa25LUzV3WVhKbGJuUW9KM1ZzSnlrdWNHRnlaVzUwS0Nkc2FTY3BMbU5vYVd4a2NtVnVLQ2RoSnlrdVptbHljM1FvS1M1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhWd09pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBa2NISmxka1ZzWlcxbGJuUXVabTlqZFhNb0tUdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRWIyNG5kQ0IwWVhBZ1ptOWpkWE1nYjI0Z1ptbHljM1FnWld4bGJXVnVkQ0JwYmlCeWIyOTBJSFZzWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFa1pXeGxiV1Z1ZEM1cGN5aGZkR2hwY3k0a1pXeGxiV1Z1ZEM1bWFXNWtLQ2MrSUd4cE9tWnBjbk4wTFdOb2FXeGtJRDRnWVNjcEtUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWkc5M2Jqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0pHNWxlSFJGYkdWdFpXNTBMbVp2WTNWektDazdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHOXVKM1FnZEdGd0lHWnZZM1Z6SUc5dUlHeGhjM1FnWld4bGJXVnVkQ0JwYmlCeWIyOTBJSFZzWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFa1pXeGxiV1Z1ZEM1cGN5aGZkR2hwY3k0a1pXeGxiV1Z1ZEM1bWFXNWtLQ2MrSUd4cE9teGhjM1F0WTJocGJHUWdQaUJoSnlrcE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JqYkc5elpUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdSRzl1SjNRZ1kyeHZjMlVnYjI0Z1pXeGxiV1Z1ZENCcGJpQnliMjkwSUhWc1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NFa1pXeGxiV1Z1ZEM1cGN5aGZkR2hwY3k0a1pXeGxiV1Z1ZEM1bWFXNWtLQ2MrSUd4cElENGdZU2NwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMmhwWkdVb0pHVnNaVzFsYm5RdWNHRnlaVzUwS0NrdWNHRnlaVzUwS0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSkdWc1pXMWxiblF1Y0dGeVpXNTBLQ2t1Y0dGeVpXNTBLQ2t1YzJsaWJHbHVaM01vSjJFbktTNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2IzQmxiam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NFa1pXeGxiV1Z1ZEM1cGN5aGZkR2hwY3k0a2JXVnVkVWwwWlcxektTa2dleUF2THlCdWIzUWdiV1Z1ZFNCcGRHVnRJRzFsWVc1eklHSmhZMnNnWW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYUdsa1pTZ2taV3hsYldWdWRDNXdZWEpsYm5Rb0oyeHBKeWt1Y0dGeVpXNTBLQ2QxYkNjcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNSbGJHVnRaVzUwTG5CaGNtVnVkQ2duYkdrbktTNXdZWEpsYm5Rb0ozVnNKeWt1YjI1bEtIUnlZVzV6YVhScGIyNWxibVFvSkdWc1pXMWxiblFwTENCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JsYkdWdFpXNTBMbkJoY21WdWRDZ25iR2tuS1M1d1lYSmxiblFvSjNWc0p5a3VjR0Z5Wlc1MEtDZHNhU2NwTG1Ob2FXeGtjbVZ1S0NkaEp5a3VabWx5YzNRb0tTNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNna1pXeGxiV1Z1ZEM1cGN5aGZkR2hwY3k0a2MzVmliV1Z1ZFVGdVkyaHZjbk1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZjMmh2ZHlna1pXeGxiV1Z1ZEM1d1lYSmxiblFvSjJ4cEp5a3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pHVnNaVzFsYm5RdWNHRnlaVzUwS0Nkc2FTY3BMbTl1WlNoMGNtRnVjMmwwYVc5dVpXNWtLQ1JsYkdWdFpXNTBLU3dnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdWc1pXMWxiblF1Y0dGeVpXNTBLQ2RzYVNjcExtWnBibVFvSjNWc0lHeHBJR0VuS1M1bWFXeDBaWElvWDNSb2FYTXVKRzFsYm5WSmRHVnRjeWt1Wm1seWMzUW9LUzVtYjJOMWN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHaGhibVJzWldRNklHWjFibU4wYVc5dUtIQnlaWFpsYm5SRVpXWmhkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hCeVpYWmxiblJFWldaaGRXeDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHVXVjM1J2Y0VsdGJXVmthV0YwWlZCeWIzQmhaMkYwYVc5dUtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwT3lBdkx5QmxibVFnYTJWNVltOWhjbVJCWTJObGMzTmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYkc5elpYTWdZV3hzSUc5d1pXNGdaV3hsYldWdWRITXNJR0Z1WkNCeVpYUjFjbTV6SUhSdklISnZiM1FnYldWdWRTNWNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxSUVCbWFYSmxjeUJFY21sc2JHUnZkMjRqWTJ4dmMyVmtYRzRnSUNBcUwxeHVJQ0JmYUdsa1pVRnNiQ2dwSUh0Y2JpQWdJQ0IyWVhJZ0pHVnNaVzBnUFNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0p5NXBjeTFrY21sc2JHUnZkMjR0YzNWaWJXVnVkUzVwY3kxaFkzUnBkbVVuS1M1aFpHUkRiR0Z6Y3lnbmFYTXRZMnh2YzJsdVp5Y3BPMXh1SUNBZ0lHbG1LSFJvYVhNdWIzQjBhVzl1Y3k1aGRYUnZTR1ZwWjJoMEtTQjBhR2x6TGlSM2NtRndjR1Z5TG1OemN5aDdhR1ZwWjJoME9pUmxiR1Z0TG5CaGNtVnVkQ2dwTG1Oc2IzTmxjM1FvSjNWc0p5a3VaR0YwWVNnblkyRnNZMGhsYVdkb2RDY3BmU2s3WEc0Z0lDQWdKR1ZzWlcwdWIyNWxLSFJ5WVc1emFYUnBiMjVsYm1Rb0pHVnNaVzBwTENCbWRXNWpkR2x2YmlobEtYdGNiaUFnSUNBZ0lDUmxiR1Z0TG5KbGJXOTJaVU5zWVhOektDZHBjeTFoWTNScGRtVWdhWE10WTJ4dmMybHVaeWNwTzF4dUlDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdiV1Z1ZFNCcGN5Qm1kV3hzZVNCamJHOXpaV1F1WEc0Z0lDQWdJQ0FnSUNBcUlFQmxkbVZ1ZENCRWNtbHNiR1J2ZDI0alkyeHZjMlZrWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25ZMnh2YzJWa0xucG1MbVJ5YVd4c1pHOTNiaWNwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nWlhabGJuUWdiR2x6ZEdWdVpYSWdabTl5SUdWaFkyZ2dZR0poWTJ0Z0lHSjFkSFJ2Yml3Z1lXNWtJR05zYjNObGN5QnZjR1Z1SUcxbGJuVnpMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FHWnBjbVZ6SUVSeWFXeHNaRzkzYmlOaVlXTnJYRzRnSUNBcUlFQndZWEpoYlNCN2FsRjFaWEo1ZlNBa1pXeGxiU0F0SUhSb1pTQmpkWEp5Wlc1MElITjFZaTF0Wlc1MUlIUnZJR0ZrWkNCZ1ltRmphMkFnWlhabGJuUXVYRzRnSUNBcUwxeHVJQ0JmWW1GamF5Z2taV3hsYlNrZ2UxeHVJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdKR1ZzWlcwdWIyWm1LQ2RqYkdsamF5NTZaaTVrY21sc2JHUnZkMjRuS1R0Y2JpQWdJQ0FrWld4bGJTNWphR2xzWkhKbGJpZ25MbXB6TFdSeWFXeHNaRzkzYmkxaVlXTnJKeWxjYmlBZ0lDQWdJQzV2YmlnblkyeHBZMnN1ZW1ZdVpISnBiR3hrYjNkdUp5d2dablZ1WTNScGIyNG9aU2w3WEc0Z0lDQWdJQ0FnSUdVdWMzUnZjRWx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0NkdGIzVnpaWFZ3SUc5dUlHSmhZMnNuS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDJocFpHVW9KR1ZzWlcwcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aWEpsSUdseklHRWdjR0Z5Wlc1MElITjFZbTFsYm5Vc0lHTmhiR3dnYzJodmQxeHVJQ0FnSUNBZ0lDQnNaWFFnY0dGeVpXNTBVM1ZpVFdWdWRTQTlJQ1JsYkdWdExuQmhjbVZ1ZENnbmJHa25LUzV3WVhKbGJuUW9KM1ZzSnlrdWNHRnlaVzUwS0Nkc2FTY3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHRnlaVzUwVTNWaVRXVnVkUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYzJodmR5aHdZWEpsYm5SVGRXSk5aVzUxS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVdSa2N5QmxkbVZ1ZENCc2FYTjBaVzVsY2lCMGJ5QnRaVzUxSUdsMFpXMXpJSGN2YnlCemRXSnRaVzUxY3lCMGJ5QmpiRzl6WlNCdmNHVnVJRzFsYm5WeklHOXVJR05zYVdOckxseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5dFpXNTFUR2x1YTBWMlpXNTBjeWdwSUh0Y2JpQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lIUm9hWE11SkcxbGJuVkpkR1Z0Y3k1dWIzUW9KeTVwY3kxa2NtbHNiR1J2ZDI0dGMzVmliV1Z1ZFMxd1lYSmxiblFuS1Z4dUlDQWdJQ0FnSUNBdWIyWm1LQ2RqYkdsamF5NTZaaTVrY21sc2JHUnZkMjRuS1Z4dUlDQWdJQ0FnSUNBdWIyNG9KMk5zYVdOckxucG1MbVJ5YVd4c1pHOTNiaWNzSUdaMWJtTjBhVzl1S0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQzh2SUdVdWMzUnZjRWx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyaHBaR1ZCYkd3b0tUdGNiaUFnSUNBZ0lDQWdJQ0I5TENBd0tUdGNiaUFnSUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRITWdkR2hsSUVOVFV5QmpiR0Z6YzJWeklHWnZjaUJ6ZFdKdFpXNTFJSFJ2SUhOb2IzY2dhWFF1WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnSkdWc1pXMGdMU0IwYUdVZ2RHRnlaMlYwSUhOMVltMWxiblVnS0dCMWJHQWdkR0ZuS1Z4dUlDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJSFJ5YVdkblpYSWdMU0IwY21sbloyVnlJR1J5YVd4c1pHOTNiaUJsZG1WdWRGeHVJQ0FnS2k5Y2JpQWdYM05sZEZOb2IzZFRkV0pOWlc1MVEyeGhjM05sY3lna1pXeGxiU3dnZEhKcFoyZGxjaWtnZTF4dUlDQWdJQ1JsYkdWdExtRmtaRU5zWVhOektDZHBjeTFoWTNScGRtVW5LUzV5WlcxdmRtVkRiR0Z6Y3lnbmFXNTJhWE5wWW14bEp5a3VZWFIwY2lnbllYSnBZUzFvYVdSa1pXNG5MQ0JtWVd4elpTazdYRzRnSUNBZ0pHVnNaVzB1Y0dGeVpXNTBLQ2RzYVNjcExtRjBkSElvSjJGeWFXRXRaWGh3WVc1a1pXUW5MQ0IwY25WbEtUdGNiaUFnSUNCcFppQW9kSEpwWjJkbGNpQTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1MGNtbG5aMlZ5S0NkdmNHVnVMbnBtTG1SeWFXeHNaRzkzYmljc0lGc2taV3hsYlYwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUhSb1pTQkRVMU1nWTJ4aGMzTmxjeUJtYjNJZ2MzVmliV1Z1ZFNCMGJ5Qm9hV1JsSUdsMExseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdHFVWFZsY25sOUlDUmxiR1Z0SUMwZ2RHaGxJSFJoY21kbGRDQnpkV0p0Wlc1MUlDaGdkV3hnSUhSaFp5bGNiaUFnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCMGNtbG5aMlZ5SUMwZ2RISnBaMmRsY2lCa2NtbHNiR1J2ZDI0Z1pYWmxiblJjYmlBZ0lDb3ZYRzRnSUY5elpYUklhV1JsVTNWaVRXVnVkVU5zWVhOelpYTW9KR1ZzWlcwc0lIUnlhV2RuWlhJcElIdGNiaUFnSUNBa1pXeGxiUzV5WlcxdmRtVkRiR0Z6Y3lnbmFYTXRZV04wYVhabEp5a3VZV1JrUTJ4aGMzTW9KMmx1ZG1semFXSnNaU2NwTG1GMGRISW9KMkZ5YVdFdGFHbGtaR1Z1Snl3Z2RISjFaU2s3WEc0Z0lDQWdKR1ZzWlcwdWNHRnlaVzUwS0Nkc2FTY3BMbUYwZEhJb0oyRnlhV0V0Wlhod1lXNWtaV1FuTENCbVlXeHpaU2s3WEc0Z0lDQWdhV1lnS0hSeWFXZG5aWElnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNSbGJHVnRMblJ5YVdkblpYSW9KMmhwWkdVdWVtWXVaSEpwYkd4a2IzZHVKeXdnV3lSbGJHVnRYU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUU5d1pXNXpJR0VnYzNCbFkybG1hV01nWkhKcGJHeGtiM2R1SUNoemRXSXBiV1Z1ZFNCdWJ5QnRZWFIwWlhJZ2QyaHBZMmdnS0hOMVlpbHRaVzUxSUdsdUlHbDBJR2x6SUdOMWNuSmxiblJzZVNCMmFYTnBZbXhsTGx4dUlDQWdLaUJEYjIxd1lYSmxaQ0IwYnlCZmMyaHZkeWdwSUhSb2FYTWdiR1YwY3lCNWIzVWdhblZ0Y0NCcGJuUnZJR0Z1ZVNCemRXSnRaVzUxSUhkcGRHaHZkWFFnWTJ4cFkydHBibWNnZEdoeWIzVm5hQ0JsZG1WeWVTQnpkV0p0Wlc1MUlHOXVJSFJvWlNCM1lYa2dkRzhnYVhRdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBWm1seVpYTWdSSEpwYkd4a2IzZHVJMjl3Wlc1Y2JpQWdJQ29nUUhCaGNtRnRJSHRxVVhWbGNubDlJQ1JsYkdWdElDMGdkR2hsSUhSaGNtZGxkQ0FvYzNWaUtXMWxiblVnS0dCMWJHQWdkR0ZuS1Z4dUlDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJR0YxZEc5R2IyTjFjeUF0SUdsbUlIUnlkV1VnZEdobElHWnBjbk4wSUd4cGJtc2dhVzRnZEdobElIUmhjbWRsZENBb2MzVmlLVzFsYm5VZ1oyVjBjeUJoZFhSdklHWnZZM1Z6WldSY2JpQWdJQ292WEc0Z0lGOXphRzkzVFdWdWRTZ2taV3hsYlN3Z1lYVjBiMFp2WTNWektTQjdYRzVjYmlBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ0x5OGdVbVZ6WlhRZ1pISnBiR3hrYjNkdVhHNGdJQ0FnZG1GeUlDUmxlSEJoYm1SbFpGTjFZbTFsYm5WeklEMGdkR2hwY3k0a1pXeGxiV1Z1ZEM1bWFXNWtLQ2RzYVZ0aGNtbGhMV1Y0Y0dGdVpHVmtQVndpZEhKMVpWd2lYU0ErSUhWc1cyUmhkR0V0YzNWaWJXVnVkVjBuS1R0Y2JpQWdJQ0FrWlhod1lXNWtaV1JUZFdKdFpXNTFjeTVsWVdOb0tHWjFibU4wYVc5dUtHbHVaR1Y0S1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmYzJWMFNHbGtaVk4xWWsxbGJuVkRiR0Z6YzJWektDUW9kR2hwY3lrcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OGdTV1lnZEdGeVoyVjBJRzFsYm5VZ2FYTWdjbTl2ZEN3Z1ptOWpkWE1nWm1seWMzUWdiR2x1YXlBbUlHVjRhWFJjYmlBZ0lDQnBaaUFvSkdWc1pXMHVhWE1vSjF0a1lYUmhMV1J5YVd4c1pHOTNibDBuS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR0YxZEc5R2IyTjFjeUE5UFQwZ2RISjFaU2tnSkdWc1pXMHVabWx1WkNnbmJHbGJjbTlzWlQxY0luUnlaV1ZwZEdWdFhDSmRJRDRnWVNjcExtWnBjbk4wS0NrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WVhWMGIwaGxhV2RvZENrZ2RHaHBjeTRrZDNKaGNIQmxjaTVqYzNNb0oyaGxhV2RvZENjc0lDUmxiR1Z0TG1SaGRHRW9KMk5oYkdOSVpXbG5hSFFuS1NrN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUm1sdVpDQmhiR3dnYzNWaWJXVnVkWE1nYjI0Z2QyRjVJSFJ2SUhKdmIzUWdhVzVqYkM0Z2RHaGxJR1ZzWlcxbGJuUWdhWFJ6Wld4bVhHNGdJQ0FnZG1GeUlDUnpkV0p0Wlc1MWN5QTlJQ1JsYkdWdExtTm9hV3hrY21WdUtDa3VabWx5YzNRb0tTNXdZWEpsYm5SelZXNTBhV3dvSjF0a1lYUmhMV1J5YVd4c1pHOTNibDBuTENBblcyUmhkR0V0YzNWaWJXVnVkVjBuS1R0Y2JseHVJQ0FnSUM4dklFOXdaVzRnZEdGeVoyVjBJRzFsYm5VZ1lXNWtJR0ZzYkNCemRXSnRaVzUxY3lCdmJpQnBkSE1nZDJGNUlIUnZJSEp2YjNSY2JpQWdJQ0FrYzNWaWJXVnVkWE11WldGamFDaG1kVzVqZEdsdmJpaHBibVJsZUNrZ2UxeHVYRzRnSUNBZ0lDQXZMeUJWY0dSaGRHVWdhR1ZwWjJoMElHOW1JR1pwY25OMElHTm9hV3hrSUNoMFlYSm5aWFFnYldWdWRTa2dhV1lnWVhWMGIwaGxhV2RvZENCdmNIUnBiMjRnZEhKMVpWeHVJQ0FnSUNBZ2FXWWdLR2x1WkdWNElEMDlQU0F3SUNZbUlGOTBhR2x6TG05d2RHbHZibk11WVhWMGIwaGxhV2RvZENrZ2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k0a2QzSmhjSEJsY2k1amMzTW9KMmhsYVdkb2RDY3NJQ1FvZEdocGN5a3VaR0YwWVNnblkyRnNZMGhsYVdkb2RDY3BLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG1GeUlHbHpUR0Z6ZEVOb2FXeGtJRDBnYVc1a1pYZ2dQVDBnSkhOMVltMWxiblZ6TG14bGJtZDBhQ0F0SURFN1hHNWNiaUFnSUNBZ0lDOHZJRUZrWkNCMGNtRnVjMmwwYVc5dWMyVnVaQ0JzYVhOMFpXNWxjaUIwYnlCc1lYTjBJR05vYVd4a0lDaHliMjkwSUdSMVpTQjBieUJ5WlhabGNuTmxJRzl5WkdWeUtTQjBieUJ2Y0dWdUlIUmhjbWRsZENCdFpXNTFKM01nWm1seWMzUWdiR2x1YTF4dUlDQWdJQ0FnTHk4Z1RHRnpkQ0JqYUdsc1pDQnRZV3RsY3lCemRYSmxJSFJvWlNCbGRtVnVkQ0JuWlhSeklHRnNkMkY1Y3lCMGNtbG5aMlZ5WldRZ1pYWmxiaUJwWmlCbmIybHVaeUIwYUhKdmRXZG9JSE5sZG1WeVlXd2diV1Z1ZFhOY2JpQWdJQ0FnSUdsbUlDaHBjMHhoYzNSRGFHbHNaQ0E5UFQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNBa0tIUm9hWE1wTG05dVpTaDBjbUZ1YzJsMGFXOXVaVzVrS0NRb2RHaHBjeWtwTENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR0YxZEc5R2IyTjFjeUE5UFQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKR1ZzWlcwdVptbHVaQ2duYkdsYmNtOXNaVDFjSW5SeVpXVnBkR1Z0WENKZElENGdZU2NwTG1acGNuTjBLQ2t1Wm05amRYTW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZjMlYwVTJodmQxTjFZazFsYm5WRGJHRnpjMlZ6S0NRb2RHaHBjeWtzSUdselRHRnpkRU5vYVd4a0tUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJQY0dWdWN5QmhJSE4xWW0xbGJuVXVYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2lCQVptbHlaWE1nUkhKcGJHeGtiM2R1STI5d1pXNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0cVVYVmxjbmw5SUNSbGJHVnRJQzBnZEdobElHTjFjbkpsYm5RZ1pXeGxiV1Z1ZENCM2FYUm9JR0VnYzNWaWJXVnVkU0IwYnlCdmNHVnVMQ0JwTG1VdUlIUm9aU0JnYkdsZ0lIUmhaeTVjYmlBZ0lDb3ZYRzRnSUY5emFHOTNLQ1JsYkdWdEtTQjdYRzRnSUNBZ2FXWW9kR2hwY3k1dmNIUnBiMjV6TG1GMWRHOUlaV2xuYUhRcElIUm9hWE11SkhkeVlYQndaWEl1WTNOektIdG9aV2xuYUhRNkpHVnNaVzB1WTJocGJHUnlaVzRvSjF0a1lYUmhMWE4xWW0xbGJuVmRKeWt1WkdGMFlTZ25ZMkZzWTBobGFXZG9kQ2NwZlNrN1hHNGdJQ0FnSkdWc1pXMHVZWFIwY2lnbllYSnBZUzFsZUhCaGJtUmxaQ2NzSUhSeWRXVXBPMXh1SUNBZ0lDUmxiR1Z0TG1Ob2FXeGtjbVZ1S0NkYlpHRjBZUzF6ZFdKdFpXNTFYU2NwTG1Ga1pFTnNZWE56S0NkcGN5MWhZM1JwZG1VbktTNXlaVzF2ZG1WRGJHRnpjeWduYVc1MmFYTnBZbXhsSnlrdVlYUjBjaWduWVhKcFlTMW9hV1JrWlc0bkxDQm1ZV3h6WlNrN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JtbHlaWE1nZDJobGJpQjBhR1VnYzNWaWJXVnVkU0JvWVhNZ2IzQmxibVZrTGx4dUlDQWdJQ0FxSUVCbGRtVnVkQ0JFY21sc2JHUnZkMjRqYjNCbGJseHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25iM0JsYmk1NlppNWtjbWxzYkdSdmQyNG5MQ0JiSkdWc1pXMWRLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSWFXUmxjeUJoSUhOMVltMWxiblZjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQm1hWEpsY3lCRWNtbHNiR1J2ZDI0amFHbGtaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ0pHVnNaVzBnTFNCMGFHVWdZM1Z5Y21WdWRDQnpkV0l0YldWdWRTQjBieUJvYVdSbExDQnBMbVV1SUhSb1pTQmdkV3hnSUhSaFp5NWNiaUFnSUNvdlhHNGdJRjlvYVdSbEtDUmxiR1Z0S1NCN1hHNGdJQ0FnYVdZb2RHaHBjeTV2Y0hScGIyNXpMbUYxZEc5SVpXbG5hSFFwSUhSb2FYTXVKSGR5WVhCd1pYSXVZM056S0h0b1pXbG5hSFE2SkdWc1pXMHVjR0Z5Wlc1MEtDa3VZMnh2YzJWemRDZ25kV3duS1M1a1lYUmhLQ2RqWVd4alNHVnBaMmgwSnlsOUtUdGNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ1JsYkdWdExuQmhjbVZ1ZENnbmJHa25LUzVoZEhSeUtDZGhjbWxoTFdWNGNHRnVaR1ZrSnl3Z1ptRnNjMlVwTzF4dUlDQWdJQ1JsYkdWdExtRjBkSElvSjJGeWFXRXRhR2xrWkdWdUp5d2dkSEoxWlNrN1hHNGdJQ0FnSkdWc1pXMHVZV1JrUTJ4aGMzTW9KMmx6TFdOc2IzTnBibWNuS1Z4dUlDQWdJQ0FnSUNBZ0xtOXVaU2gwY21GdWMybDBhVzl1Wlc1a0tDUmxiR1Z0S1N3Z1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSkdWc1pXMHVjbVZ0YjNabFEyeGhjM01vSjJsekxXRmpkR2wyWlNCcGN5MWpiRzl6YVc1bkp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNSbGJHVnRMbUpzZFhJb0tTNWhaR1JEYkdGemN5Z25hVzUyYVhOcFlteGxKeWs3WEc0Z0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdhWEpsY3lCM2FHVnVJSFJvWlNCemRXSnRaVzUxSUdoaGN5QmpiRzl6WldRdVhHNGdJQ0FnSUNvZ1FHVjJaVzUwSUVSeWFXeHNaRzkzYmlOb2FXUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ0pHVnNaVzB1ZEhKcFoyZGxjaWduYUdsa1pTNTZaaTVrY21sc2JHUnZkMjRuTENCYkpHVnNaVzFkS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpkR1Z5WVhSbGN5QjBhSEp2ZFdkb0lIUm9aU0J1WlhOMFpXUWdiV1Z1ZFhNZ2RHOGdZMkZzWTNWc1lYUmxJSFJvWlNCdGFXNHRhR1ZwWjJoMExDQmhibVFnYldGNExYZHBaSFJvSUdadmNpQjBhR1VnYldWdWRTNWNiaUFnSUNvZ1VISmxkbVZ1ZEhNZ1kyOXVkR1Z1ZENCcWRXMXdhVzVuTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjluWlhSTllYaEVhVzF6S0NrZ2UxeHVJQ0FnSUhaaGNpQWdiV0Y0U0dWcFoyaDBJRDBnTUN3Z2NtVnpkV3gwSUQwZ2UzMHNJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0IwYUdsekxpUnpkV0p0Wlc1MWN5NWhaR1FvZEdocGN5NGtaV3hsYldWdWRDa3VaV0ZqYUNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2RtRnlJRzUxYlU5bVJXeGxiWE1nUFNBa0tIUm9hWE1wTG1Ob2FXeGtjbVZ1S0Nkc2FTY3BMbXhsYm1kMGFEdGNiaUFnSUNBZ0lIWmhjaUJvWldsbmFIUWdQU0JDYjNndVIyVjBSR2x0Wlc1emFXOXVjeWgwYUdsektTNW9aV2xuYUhRN1hHNGdJQ0FnSUNCdFlYaElaV2xuYUhRZ1BTQm9aV2xuYUhRZ1BpQnRZWGhJWldsbmFIUWdQeUJvWldsbmFIUWdPaUJ0WVhoSVpXbG5hSFE3WEc0Z0lDQWdJQ0JwWmloZmRHaHBjeTV2Y0hScGIyNXpMbUYxZEc5SVpXbG5hSFFwSUh0Y2JpQWdJQ0FnSUNBZ0pDaDBhR2x6S1M1a1lYUmhLQ2RqWVd4alNHVnBaMmgwSnl4b1pXbG5hSFFwTzF4dUlDQWdJQ0FnSUNCcFppQW9JU1FvZEdocGN5a3VhR0Z6UTJ4aGMzTW9KMmx6TFdSeWFXeHNaRzkzYmkxemRXSnRaVzUxSnlrcElISmxjM1ZzZEZzbmFHVnBaMmgwSjEwZ1BTQm9aV2xuYUhRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCcFppZ2hkR2hwY3k1dmNIUnBiMjV6TG1GMWRHOUlaV2xuYUhRcElISmxjM1ZzZEZzbmJXbHVMV2hsYVdkb2RDZGRJRDBnWUNSN2JXRjRTR1ZwWjJoMGZYQjRZRHRjYmx4dUlDQWdJSEpsYzNWc2RGc25iV0Y0TFhkcFpIUm9KMTBnUFNCZ0pIdDBhR2x6TGlSbGJHVnRaVzUwV3pCZExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG5kcFpIUm9mWEI0WUR0Y2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdWemRISnZlWE1nZEdobElFUnlhV3hzWkc5M2JpQk5aVzUxWEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpOWNiaUFnWDJSbGMzUnliM2tvS1NCN1hHNGdJQ0FnYVdZb2RHaHBjeTV2Y0hScGIyNXpMbk5qY205c2JGUnZjQ2tnZEdocGN5NGtaV3hsYldWdWRDNXZabVlvSnk1NlppNWtjbWxzYkdSdmQyNG5MSFJvYVhNdVgySnBibVJJWVc1a2JHVnlLVHRjYmlBZ0lDQjBhR2x6TGw5b2FXUmxRV3hzS0NrN1hHNWNkQ0FnZEdocGN5NGtaV3hsYldWdWRDNXZabVlvSjIxMWRHRjBaVzFsTG5wbUxuUnlhV2RuWlhJbktUdGNiaUFnSUNCT1pYTjBMa0oxY200b2RHaHBjeTRrWld4bGJXVnVkQ3dnSjJSeWFXeHNaRzkzYmljcE8xeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkVzUzY21Gd0tDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbVpwYm1Rb0p5NXFjeTFrY21sc2JHUnZkMjR0WW1GamF5d2dMbWx6TFhOMVltMWxiblV0Y0dGeVpXNTBMV2wwWlcwbktTNXlaVzF2ZG1Vb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVaVzVrS0NrdVptbHVaQ2duTG1sekxXRmpkR2wyWlN3Z0xtbHpMV05zYjNOcGJtY3NJQzVwY3kxa2NtbHNiR1J2ZDI0dGMzVmliV1Z1ZFNjcExuSmxiVzkyWlVOc1lYTnpLQ2RwY3kxaFkzUnBkbVVnYVhNdFkyeHZjMmx1WnlCcGN5MWtjbWxzYkdSdmQyNHRjM1ZpYldWdWRTY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVsYm1Rb0tTNW1hVzVrS0NkYlpHRjBZUzF6ZFdKdFpXNTFYU2NwTG5KbGJXOTJaVUYwZEhJb0oyRnlhV0V0YUdsa1pHVnVJSFJoWW1sdVpHVjRJSEp2YkdVbktUdGNiaUFnSUNCMGFHbHpMaVJ6ZFdKdFpXNTFRVzVqYUc5eWN5NWxZV05vS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0pDaDBhR2x6S1M1dlptWW9KeTU2Wmk1a2NtbHNiR1J2ZDI0bktUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25XMlJoZEdFdGFYTXRjR0Z5Wlc1MExXeHBibXRkSnlrdVpHVjBZV05vS0NrN1hHNGdJQ0FnZEdocGN5NGtjM1ZpYldWdWRYTXVjbVZ0YjNabFEyeGhjM01vSjJSeWFXeHNaRzkzYmkxemRXSnRaVzUxTFdOdmRtVnlMWEJ5WlhacGIzVnpJR2x1ZG1semFXSnNaU2NwTzF4dVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0NkaEp5a3VaV0ZqYUNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2RtRnlJQ1JzYVc1cklEMGdKQ2gwYUdsektUdGNiaUFnSUNBZ0lDUnNhVzVyTG5KbGJXOTJaVUYwZEhJb0ozUmhZbWx1WkdWNEp5azdYRzRnSUNBZ0lDQnBaaWdrYkdsdWF5NWtZWFJoS0NkellYWmxaRWh5WldZbktTbDdYRzRnSUNBZ0lDQWdJQ1JzYVc1ckxtRjBkSElvSjJoeVpXWW5MQ0FrYkdsdWF5NWtZWFJoS0NkellYWmxaRWh5WldZbktTa3VjbVZ0YjNabFJHRjBZU2duYzJGMlpXUkljbVZtSnlrN1hHNGdJQ0FnSUNCOVpXeHpaWHNnY21WMGRYSnVPeUI5WEc0Z0lDQWdmU2s3WEc0Z0lIMDdYRzU5WEc1Y2JrUnlhV3hzWkc5M2JpNWtaV1poZFd4MGN5QTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFUnlhV3hzWkc5M2JuTWdaR1Z3Wlc1a0lHOXVJSE4wZVd4bGN5QnBiaUJ2Y21SbGNpQjBieUJtZFc1amRHbHZiaUJ3Y205d1pYSnNlVHNnYVc0Z2RHaGxJR1JsWm1GMWJIUWdZblZwYkdRZ2IyWWdSbTkxYm1SaGRHbHZiaUIwYUdWelpTQmhjbVZjYmlBZ0lDb2diMjRnZEdobElHQmtjbWxzYkdSdmQyNWdJR05zWVhOekxpQlVhR2x6SUc5d2RHbHZiaUJoZFhSdkxXRndjR3hwWlhNZ2RHaHBjeUJqYkdGemN5QjBieUIwYUdVZ1pISnBiR3hrYjNkdUlIVndiMjRnYVc1cGRHbGhiR2w2WVhScGIyNHVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4cFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElIUnlkV1ZjYmlBZ0lDb3ZYRzRnSUdGMWRHOUJjSEJzZVVOc1lYTnpPaUIwY25WbExGeHVJQ0F2S2lwY2JpQWdJQ29nVFdGeWEzVndJSFZ6WldRZ1ptOXlJRXBUSUdkbGJtVnlZWFJsWkNCaVlXTnJJR0oxZEhSdmJpNGdVSEpsY0dWdVpHVmtJQ0J2Y2lCaGNIQmxibVJsWkNBb2MyVmxJR0poWTJ0Q2RYUjBiMjVRYjNOcGRHbHZiaWtnZEc4Z2MzVmliV1Z1ZFNCc2FYTjBjeUJoYm1RZ1pHVnNaWFJsWkNCdmJpQmdaR1Z6ZEhKdmVXQWdiV1YwYUc5a0xDQW5hbk10WkhKcGJHeGtiM2R1TFdKaFkyc25JR05zWVhOeklISmxjWFZwY21Wa0xpQlNaVzF2ZG1VZ2RHaGxJR0poWTJ0emJHRnphQ0FvWUZ4Y1lDa2dhV1lnWTI5d2VTQmhibVFnY0dGemRHbHVaeTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5QR3hwSUdOc1lYTnpQVndpYW5NdFpISnBiR3hrYjNkdUxXSmhZMnRjSWo0OFlTQjBZV0pwYm1SbGVEMWNJakJjSWo1Q1lXTnJQQzloUGp3dmJHaytKMXh1SUNBZ0tpOWNiaUFnWW1GamEwSjFkSFJ2YmpvZ0p6eHNhU0JqYkdGemN6MWNJbXB6TFdSeWFXeHNaRzkzYmkxaVlXTnJYQ0krUEdFZ2RHRmlhVzVrWlhnOVhDSXdYQ0krUW1GamF6d3ZZVDQ4TDJ4cFBpY3NYRzRnSUM4cUtseHVJQ0FnS2lCUWIzTnBkR2x2YmlCMGFHVWdZbUZqYXlCaWRYUjBiMjRnWldsMGFHVnlJR0YwSUhSb1pTQjBiM0FnYjNJZ1ltOTBkRzl0SUc5bUlHUnlhV3hzWkc5M2JpQnpkV0p0Wlc1MWN5NGdRMkZ1SUdKbElHQW5iR1ZtZENkZ0lHOXlJR0FuWW05MGRHOXRKMkF1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdkRzl3WEc0Z0lDQXFMMXh1SUNCaVlXTnJRblYwZEc5dVVHOXphWFJwYjI0NklDZDBiM0FuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dUV0Z5YTNWd0lIVnpaV1FnZEc4Z2QzSmhjQ0JrY21sc2JHUnZkMjRnYldWdWRTNGdWWE5sSUdFZ1kyeGhjM01nYm1GdFpTQm1iM0lnYVc1a1pYQmxibVJsYm5RZ2MzUjViR2x1WnpzZ2RHaGxJRXBUSUdGd2NHeHBaV1FnWTJ4aGMzTTZJR0JwY3kxa2NtbHNiR1J2ZDI1Z0lHbHpJSEpsY1hWcGNtVmtMaUJTWlcxdmRtVWdkR2hsSUdKaFkydHpiR0Z6YUNBb1lGeGNZQ2tnYVdZZ1kyOXdlU0JoYm1RZ2NHRnpkR2x1Wnk1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0FuUEdScGRqNDhMMlJwZGo0blhHNGdJQ0FxTDF4dUlDQjNjbUZ3Y0dWeU9pQW5QR1JwZGo0OEwyUnBkajRuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrY3lCMGFHVWdjR0Z5Wlc1MElHeHBibXNnZEc4Z2RHaGxJSE4xWW0xbGJuVXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCd1lYSmxiblJNYVc1ck9pQm1ZV3h6WlN4Y2JpQWdMeW9xWEc0Z0lDQXFJRUZzYkc5M0lIUm9aU0J0Wlc1MUlIUnZJSEpsZEhWeWJpQjBieUJ5YjI5MElHeHBjM1FnYjI0Z1ltOWtlU0JqYkdsamF5NWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDb3ZYRzRnSUdOc2IzTmxUMjVEYkdsamF6b2dabUZzYzJVc1hHNGdJQzhxS2x4dUlDQWdLaUJCYkd4dmR5QjBhR1VnYldWdWRTQjBieUJoZFhSdklHRmthblZ6ZENCb1pXbG5hSFF1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQmhkWFJ2U0dWcFoyaDBPaUJtWVd4elpTeGNiaUFnTHlvcVhHNGdJQ0FxSUVGdWFXMWhkR1VnZEdobElHRjFkRzhnWVdScWRYTjBJR2hsYVdkb2RDNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDb3ZYRzRnSUdGdWFXMWhkR1ZJWldsbmFIUTZJR1poYkhObExGeHVJQ0F2S2lwY2JpQWdJQ29nVTJOeWIyeHNJSFJ2SUhSb1pTQjBiM0FnYjJZZ2RHaGxJRzFsYm5VZ1lXWjBaWElnYjNCbGJtbHVaeUJoSUhOMVltMWxiblVnYjNJZ2JtRjJhV2RoZEdsdVp5QmlZV05ySUhWemFXNW5JSFJvWlNCdFpXNTFJR0poWTJzZ1luVjBkRzl1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQnpZM0p2Ykd4VWIzQTZJR1poYkhObExGeHVJQ0F2S2lwY2JpQWdJQ29nVTNSeWFXNW5JR3B4ZFdWeWVTQnpaV3hsWTNSdmNpQW9abTl5SUdWNFlXMXdiR1VnSjJKdlpIa25LU0J2WmlCbGJHVnRaVzUwSUhSdklIUmhhMlVnYjJabWMyVjBLQ2t1ZEc5d0lHWnliMjBzSUdsbUlHVnRjSFI1SUhOMGNtbHVaeUIwYUdVZ1pISnBiR3hrYjNkdUlHMWxiblVnYjJabWMyVjBLQ2t1ZEc5d0lHbHpJSFJoYTJWdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSnlkY2JpQWdJQ292WEc0Z0lITmpjbTlzYkZSdmNFVnNaVzFsYm5RNklDY25MRnh1SUNBdktpcGNiaUFnSUNvZ1UyTnliMnhzVkc5d0lHOW1abk5sZEZ4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0dWRXMWlaWEo5WEc0Z0lDQXFJRUJrWldaaGRXeDBJREJjYmlBZ0lDb3ZYRzRnSUhOamNtOXNiRlJ2Y0U5bVpuTmxkRG9nTUN4Y2JpQWdMeW9xWEc0Z0lDQXFJRk5qY205c2JDQmhibWx0WVhScGIyNGdaSFZ5WVhScGIyNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBMU1EQmNiaUFnSUNvdlhHNGdJR0Z1YVcxaGRHbHZia1IxY21GMGFXOXVPaUExTURBc1hHNGdJQzhxS2x4dUlDQWdLaUJUWTNKdmJHd2dZVzVwYldGMGFXOXVJR1ZoYzJsdVp5NGdRMkZ1SUdKbElHQW5jM2RwYm1jbllDQnZjaUJnSjJ4cGJtVmhjaWRnTGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQXFJRUJ6WldVZ2UwQnNhVzVySUdoMGRIQnpPaTh2WVhCcExtcHhkV1Z5ZVM1amIyMHZZVzVwYldGMFpYeEtVWFZsY25rZ1lXNXBiV0YwWlgxY2JpQWdJQ29nUUdSbFptRjFiSFFnSjNOM2FXNW5KMXh1SUNBZ0tpOWNiaUFnWVc1cGJXRjBhVzl1UldGemFXNW5PaUFuYzNkcGJtY25YRzRnSUM4dklHaHZiR1JQY0dWdU9pQm1ZV3h6WlZ4dWZUdGNibHh1Wlhod2IzSjBJSHRFY21sc2JHUnZkMjU5TzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5kcmlsbGRvd24uanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRHJvcGRvd24gPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsgfSB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmtleWJvYXJkJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucG9zaXRpb25hYmxlJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwzID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIERyb3Bkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xudmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKF9Qb3NpdGlvbmFibGUpIHtcbiAgX2luaGVyaXRzKERyb3Bkb3duLCBfUG9zaXRpb25hYmxlKTtcblxuICBmdW5jdGlvbiBEcm9wZG93bigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEcm9wZG93bi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyb3Bkb3duKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcm9wZG93bi5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBEcm9wZG93blxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93bi5cbiAgICAgKiAgICAgICAgT2JqZWN0IHNob3VsZCBiZSBvZiB0aGUgZHJvcGRvd24gcGFuZWwsIHJhdGhlciB0aGFuIGl0cyBhbmNob3IuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgRHJvcGRvd24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0Ryb3Bkb3duJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIC8vIFRyaWdnZXJzIGluaXQgaXMgaWRlbXBvdGVudCwganVzdCBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBpcyBpbml0aWFsaXplZFxuICAgICAgX2ZvdW5kYXRpb25VdGlsMy5UcmlnZ2Vycy5pbml0KF9qcXVlcnkyLmRlZmF1bHQpO1xuXG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd24nLCB7XG4gICAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBzZXR0aW5nL2NoZWNraW5nIG9wdGlvbnMgYW5kIGF0dHJpYnV0ZXMsIGFkZGluZyBoZWxwZXIgdmFyaWFibGVzLCBhbmQgc2F2aW5nIHRoZSBhbmNob3IuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciAkaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICAgIHRoaXMuJGFuY2hvcnMgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ1tkYXRhLXRvZ2dsZT1cIicgKyAkaWQgKyAnXCJdJykubGVuZ3RoID8gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdbZGF0YS10b2dnbGU9XCInICsgJGlkICsgJ1wiXScpIDogKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdbZGF0YS1vcGVuPVwiJyArICRpZCArICdcIl0nKTtcbiAgICAgIHRoaXMuJGFuY2hvcnMuYXR0cih7XG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogJGlkLFxuICAgICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fc2V0Q3VycmVudEFuY2hvcih0aGlzLiRhbmNob3JzLmZpcnN0KCkpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBhcmVudENsYXNzKSB7XG4gICAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLicgKyB0aGlzLm9wdGlvbnMucGFyZW50Q2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kcGFyZW50ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogJGlkLFxuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy4kY3VycmVudEFuY2hvci5pZCB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsMi5HZXRZb0RpZ2l0cykoNiwgJ2RkLWFuY2hvcicpXG4gICAgICB9KTtcbiAgICAgIF9nZXQoRHJvcGRvd24ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRHJvcGRvd24ucHJvdG90eXBlKSwgJ19pbml0JywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgLy8gaGFuZGxlIGxlZ2FjeSBjbGFzc25hbWVzXG4gICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLiRlbGVtZW50WzBdLmNsYXNzTmFtZS5tYXRjaCgvKHRvcHxsZWZ0fHJpZ2h0fGJvdHRvbSkvZyk7XG4gICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19nZXREZWZhdWx0QWxpZ25tZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRBbGlnbm1lbnQoKSB7XG4gICAgICAvLyBoYW5kbGUgbGVnYWN5IGZsb2F0IGFwcHJvYWNoXG4gICAgICB2YXIgaG9yaXpvbnRhbFBvc2l0aW9uID0gL2Zsb2F0LShcXFMrKS8uZXhlYyh0aGlzLiRjdXJyZW50QW5jaG9yLmNsYXNzTmFtZSk7XG4gICAgICBpZiAoaG9yaXpvbnRhbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBob3Jpem9udGFsUG9zaXRpb25bMV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZ2V0KERyb3Bkb3duLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyb3Bkb3duLnByb3RvdHlwZSksICdfZ2V0RGVmYXVsdEFsaWdubWVudCcsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uIG9mIHRoZSBkcm9wZG93biBwYW5lLCBjaGVja3MgZm9yIGNvbGxpc2lvbnMgaWYgYWxsb3ctb3ZlcmxhcCBpcyBub3QgdHJ1ZS5cbiAgICAgKiBSZWN1cnNpdmVseSBjYWxscyBpdHNlbGYgaWYgYSBjb2xsaXNpb24gaXMgZGV0ZWN0ZWQsIHdpdGggYSBuZXcgcG9zaXRpb24gY2xhc3MuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFBvc2l0aW9uKCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaGFzLXBvc2l0aW9uLScgKyB0aGlzLnBvc2l0aW9uICsgJyBoYXMtYWxpZ25tZW50LScgKyB0aGlzLmFsaWdubWVudCk7XG4gICAgICBfZ2V0KERyb3Bkb3duLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyb3Bkb3duLnByb3RvdHlwZSksICdfc2V0UG9zaXRpb24nLCB0aGlzKS5jYWxsKHRoaXMsIHRoaXMuJGN1cnJlbnRBbmNob3IsIHRoaXMuJGVsZW1lbnQsIHRoaXMuJHBhcmVudCk7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdoYXMtcG9zaXRpb24tJyArIHRoaXMucG9zaXRpb24gKyAnIGhhcy1hbGlnbm1lbnQtJyArIHRoaXMuYWxpZ25tZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIGl0IGEgY3VycmVudCBhbmNob3IuXG4gICAgICogQ3VycmVudCBhbmNob3IgYXMgdGhlIHJlZmVyZW5jZSBmb3IgdGhlIHBvc2l0aW9uIG9mIERyb3Bkb3duIHBhbmVzLlxuICAgICAqIEBwYXJhbSB7SFRNTH0gZWwgLSBET00gZWxlbWVudCBvZiB0aGUgYW5jaG9yLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRDdXJyZW50QW5jaG9yJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEN1cnJlbnRBbmNob3IoZWwpIHtcbiAgICAgIHRoaXMuJGN1cnJlbnRBbmNob3IgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBlbGVtZW50IHV0aWxpemluZyB0aGUgdHJpZ2dlcnMgdXRpbGl0eSBsaWJyYXJ5LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgICAnb3Blbi56Zi50cmlnZ2VyJzogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IHRoaXMuX3NldFBvc2l0aW9uLmJpbmQodGhpcylcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLiRhbmNob3JzLm9mZignY2xpY2suemYudHJpZ2dlcicpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fc2V0Q3VycmVudEFuY2hvcih0aGlzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmhvdmVyKSB7XG4gICAgICAgIHRoaXMuJGFuY2hvcnMub2ZmKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duIG1vdXNlbGVhdmUuemYuZHJvcGRvd24nKS5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fc2V0Q3VycmVudEFuY2hvcih0aGlzKTtcblxuICAgICAgICAgIHZhciBib2R5RGF0YSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnYm9keScpLmRhdGEoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGJvZHlEYXRhLndoYXRpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgfHwgYm9keURhdGEud2hhdGlucHV0ID09PSAnbW91c2UnKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzLm9wZW4oKTtcbiAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvcnMuZGF0YSgnaG92ZXInLCB0cnVlKTtcbiAgICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIF90aGlzLiRhbmNob3JzLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhvdmVyUGFuZSkge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duIG1vdXNlbGVhdmUuemYuZHJvcGRvd24nKS5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvcnMuZGF0YSgnaG92ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLiRhbmNob3JzLmFkZCh0aGlzLiRlbGVtZW50KS5vbigna2V5ZG93bi56Zi5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgdmFyICR0YXJnZXQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksXG4gICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMgPSBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLmhhbmRsZUtleShlLCAnRHJvcGRvd24nLCB7XG4gICAgICAgICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgICAgICAgIGlmICgkdGFyZ2V0LmlzKF90aGlzLiRhbmNob3JzKSkge1xuICAgICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgLTEpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy4kYW5jaG9ycy5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hZGRCb2R5SGFuZGxlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgIHZhciAkYm9keSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudC5ib2R5KS5ub3QodGhpcy4kZWxlbWVudCksXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgJGJvZHkub2ZmKCdjbGljay56Zi5kcm9wZG93bicpLm9uKCdjbGljay56Zi5kcm9wZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChfdGhpcy4kYW5jaG9ycy5pcyhlLnRhcmdldCkgfHwgX3RoaXMuJGFuY2hvcnMuZmluZChlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5pcyhlLnRhcmdldCkgfHwgX3RoaXMuJGVsZW1lbnQuZmluZChlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBkcm9wZG93biBwYW5lLCBhbmQgZmlyZXMgYSBidWJibGluZyBldmVudCB0byBjbG9zZSBvdGhlciBkcm9wZG93bnMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIERyb3Bkb3duI2Nsb3NlbWVcbiAgICAgKiBAZmlyZXMgRHJvcGRvd24jc2hvd1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgIC8vIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHRvIGNsb3NlIG90aGVyIG9wZW4gZHJvcGRvd25zLCB0eXBpY2FsbHkgd2hlbiBkcm9wZG93biBpcyBvcGVuaW5nXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd24jY2xvc2VtZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYuZHJvcGRvd24nLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgdGhpcy4kYW5jaG9ycy5hZGRDbGFzcygnaG92ZXInKS5hdHRyKHsgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlIH0pO1xuICAgICAgLy8gdGhpcy4kZWxlbWVudC8qLnNob3coKSovO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1vcGVuaW5nJyk7XG4gICAgICB0aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbmluZycpLmFkZENsYXNzKCdpcy1vcGVuJykuYXR0cih7ICdhcmlhLWhpZGRlbic6IGZhbHNlIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgICB2YXIgJGZvY3VzYWJsZSA9IF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgICBpZiAoJGZvY3VzYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAkZm9jdXNhYmxlLmVxKDApLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFwRm9jdXMpIHtcbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBvbmNlIHRoZSBkcm9wZG93biBpcyB2aXNpYmxlLlxuICAgICAgICogQGV2ZW50IERyb3Bkb3duI3Nob3dcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG9wZW4gZHJvcGRvd24gcGFuZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpLmF0dHIoeyAnYXJpYS1oaWRkZW4nOiB0cnVlIH0pO1xuXG4gICAgICB0aGlzLiRhbmNob3JzLnJlbW92ZUNsYXNzKCdob3ZlcicpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgbm8gbG9uZ2VyIHZpc2libGUuXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd24jaGlkZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd24nLCBbdGhpcy4kZWxlbWVudF0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgICBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIGRyb3Bkb3duIHBhbmUncyB2aXNpYmlsaXR5LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b2dnbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgIGlmICh0aGlzLiRhbmNob3JzLmRhdGEoJ2hvdmVyJykpIHJldHVybjtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGRyb3Bkb3duLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyJykuaGlkZSgpO1xuICAgICAgdGhpcy4kYW5jaG9ycy5vZmYoJy56Zi5kcm9wZG93bicpO1xuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGRvY3VtZW50LmJvZHkpLm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcGRvd247XG59KF9mb3VuZGF0aW9uLlBvc2l0aW9uYWJsZSk7XG5cbkRyb3Bkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ2xhc3MgdGhhdCBkZXNpZ25hdGVzIGJvdW5kaW5nIGNvbnRhaW5lciBvZiBEcm9wZG93biAoZGVmYXVsdDogd2luZG93KVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBwYXJlbnRDbGFzczogbnVsbCxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDI1MFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjUwLFxuICAvKipcbiAgICogQWxsb3cgc3VibWVudXMgdG8gb3BlbiBvbiBob3ZlciBldmVudHNcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIERvbid0IGNsb3NlIGRyb3Bkb3duIHdoZW4gaG92ZXJpbmcgb3ZlciBkcm9wZG93biBwYW5lXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBob3ZlclBhbmU6IGZhbHNlLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdk9mZnNldDogMCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgYmV0d2VlbiB0aGUgZHJvcGRvd24gcGFuZSBhbmQgdGhlIHRyaWdnZXJpbmcgZWxlbWVudCBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGhPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEOiBDbGFzcyBhcHBsaWVkIHRvIGFkanVzdCBvcGVuIHBvc2l0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcblxuICAvKipcbiAgICogUG9zaXRpb24gb2YgZHJvcGRvd24uIENhbiBiZSBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG9yIGF1dG8uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBwb3NpdGlvbjogJ2F1dG8nLFxuICAvKipcbiAgICogQWxpZ25tZW50IG9mIGRyb3Bkb3duIHJlbGF0aXZlIHRvIGFuY2hvci4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgY2VudGVyLCBvciBhdXRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgYWxpZ25tZW50OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIGNvbnRhaW5lci93aW5kb3cuIElmIGZhbHNlLCBkcm9wZG93biB3aWxsIGZpcnN0IHRyeSB0byBwb3NpdGlvbiBhcyBkZWZpbmVkIGJ5IGRhdGEtcG9zaXRpb24gYW5kIGRhdGEtYWxpZ25tZW50LCBidXQgcmVwb3NpdGlvbiBpZiBpdCB3b3VsZCBjYXVzZSBhbiBvdmVyZmxvdy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFsbG93T3ZlcmxhcDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIG9ubHkgdGhlIGJvdHRvbSBvZiB0aGUgY29udGFpbmVyLiBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vblxuICAgKiBiZWhhdmlvciBmb3IgZHJvcGRvd25zLCBhbGxvd2luZyB0aGUgZHJvcGRvd24gdG8gZXh0ZW5kIHRoZSBib3R0b20gb2YgdGhlXG4gICAqIHNjcmVlbiBidXQgbm90IG90aGVyd2lzZSBpbmZsdWVuY2Ugb3IgYnJlYWsgb3V0IG9mIHRoZSBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFsbG93Qm90dG9tT3ZlcmxhcDogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gdHJhcCBmb2N1cyB0byB0aGUgZHJvcGRvd24gcGFuZSBpZiBvcGVuZWQgd2l0aCBrZXlib2FyZCBjb21tYW5kcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRyYXBGb2N1czogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgcGx1Z2luIHRvIHNldCBmb2N1cyB0byB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgd2l0aGluIHRoZSBwYW5lLCByZWdhcmRsZXNzIG9mIG1ldGhvZCBvZiBvcGVuaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5IHRvIGNsb3NlIHRoZSBkcm9wZG93bi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNsb3NlT25DbGljazogZmFsc2Vcbn07XG5cbmV4cG9ydHMuRHJvcGRvd24gPSBEcm9wZG93bjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVaSEp2Y0dSdmQyNHVhbk1pWFN3aWJtRnRaWE1pT2xzaVJISnZjR1J2ZDI0aUxDSmxiR1Z0Wlc1MElpd2liM0IwYVc5dWN5SXNJaVJsYkdWdFpXNTBJaXdpSkNJc0ltVjRkR1Z1WkNJc0ltUmxabUYxYkhSeklpd2laR0YwWVNJc0ltTnNZWE56VG1GdFpTSXNJbFJ5YVdkblpYSnpJaXdpYVc1cGRDSXNJbDlwYm1sMElpd2lTMlY1WW05aGNtUWlMQ0p5WldkcGMzUmxjaUlzSWlScFpDSXNJbUYwZEhJaUxDSWtZVzVqYUc5eWN5SXNJbXhsYm1kMGFDSXNJbDl6WlhSRGRYSnlaVzUwUVc1amFHOXlJaXdpWm1seWMzUWlMQ0p3WVhKbGJuUkRiR0Z6Y3lJc0lpUndZWEpsYm5RaUxDSndZWEpsYm5Seklpd2lKR04xY25KbGJuUkJibU5vYjNJaUxDSnBaQ0lzSWw5bGRtVnVkSE1pTENKd2IzTnBkR2x2YmlJc0ltMWhkR05vSWl3aWFHOXlhWHB2Ym5SaGJGQnZjMmwwYVc5dUlpd2laWGhsWXlJc0luSmxiVzkyWlVOc1lYTnpJaXdpWVd4cFoyNXRaVzUwSWl3aVlXUmtRMnhoYzNNaUxDSmxiQ0lzSWw5MGFHbHpJaXdpYjI0aUxDSnZjR1Z1SWl3aVltbHVaQ0lzSW1Oc2IzTmxJaXdpZEc5bloyeGxJaXdpWDNObGRGQnZjMmwwYVc5dUlpd2liMlptSWl3aWFHOTJaWElpTENKaWIyUjVSR0YwWVNJc0luZG9ZWFJwYm5CMWRDSXNJbU5zWldGeVZHbHRaVzkxZENJc0luUnBiV1Z2ZFhRaUxDSnpaWFJVYVcxbGIzVjBJaXdpYUc5MlpYSkVaV3hoZVNJc0ltaHZkbVZ5VUdGdVpTSXNJbUZrWkNJc0ltVWlMQ0lrZEdGeVoyVjBJaXdpZG1semFXSnNaVVp2WTNWellXSnNaVVZzWlcxbGJuUnpJaXdpWm1sdVpFWnZZM1Z6WVdKc1pTSXNJbWhoYm1Sc1pVdGxlU0lzSW1seklpd2labTlqZFhNaUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0lpUmliMlI1SWl3aVpHOWpkVzFsYm5RaUxDSmliMlI1SWl3aWJtOTBJaXdpZEdGeVoyVjBJaXdpWm1sdVpDSXNJblJ5YVdkblpYSWlMQ0poZFhSdlJtOWpkWE1pTENJa1ptOWpkWE5oWW14bElpd2laWEVpTENKamJHOXpaVTl1UTJ4cFkyc2lMQ0pmWVdSa1FtOWtlVWhoYm1Sc1pYSWlMQ0owY21Gd1JtOWpkWE1pTENKb1lYTkRiR0Z6Y3lJc0luSmxiR1ZoYzJWR2IyTjFjeUlzSW1ocFpHVWlMQ0pRYjNOcGRHbHZibUZpYkdVaUxDSjJUMlptYzJWMElpd2lhRTltWm5ObGRDSXNJbkJ2YzJsMGFXOXVRMnhoYzNNaUxDSmhiR3h2ZDA5MlpYSnNZWEFpTENKaGJHeHZkMEp2ZEhSdmJVOTJaWEpzWVhBaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdPenM3T3pzN096dEJRVVZCT3pzN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJSVUU3T3pzN096czdPenM3UVVGSFFUczdPenM3T3p0SlFVOU5RU3hST3pzN096czdPenM3T3pzN1FVRkRTanM3T3pzN096czdNa0pCVVU5RExFOHNSVUZCVTBNc1R5eEZRVUZUTzBGQlEzWkNMRmRCUVV0RExGRkJRVXdzUjBGQlowSkdMRTlCUVdoQ08wRkJRMEVzVjBGQlMwTXNUMEZCVEN4SFFVRmxSU3hwUWtGQlJVTXNUVUZCUml4RFFVRlRMRVZCUVZRc1JVRkJZVXdzVTBGQlUwMHNVVUZCZEVJc1JVRkJaME1zUzBGQlMwZ3NVVUZCVEN4RFFVRmpTU3hKUVVGa0xFVkJRV2hETEVWQlFYTkVUQ3hQUVVGMFJDeERRVUZtTzBGQlEwRXNWMEZCUzAwc1UwRkJUQ3hIUVVGcFFpeFZRVUZxUWl4RFFVaDFRaXhEUVVkTk96dEJRVVUzUWp0QlFVTkJReXhuUTBGQlUwTXNTVUZCVkN4RFFVRmpUaXhuUWtGQlpEczdRVUZGUVN4WFFVRkxUeXhMUVVGTU96dEJRVVZCUXl3clFrRkJVME1zVVVGQlZDeERRVUZyUWl4VlFVRnNRaXhGUVVFNFFqdEJRVU0xUWl4cFFrRkJVeXhOUVVSdFFqdEJRVVUxUWl4cFFrRkJVeXhOUVVadFFqdEJRVWMxUWl4clFrRkJWVHRCUVVoclFpeFBRVUU1UWp0QlFVdEVPenRCUVVWRU96czdPenM3T3pzMFFrRkxVVHRCUVVOT0xGVkJRVWxETEUxQlFVMHNTMEZCUzFnc1VVRkJUQ3hEUVVGaldTeEpRVUZrTEVOQlFXMUNMRWxCUVc1Q0xFTkJRVlk3TzBGQlJVRXNWMEZCUzBNc1VVRkJUQ3hIUVVGblFpeDVRMEZCYlVKR0xFZEJRVzVDTEZOQlFUUkNSeXhOUVVFMVFpeEhRVUZ4UXl4NVEwRkJiVUpJTEVkQlFXNUNMRkZCUVhKRExFZEJRVzFGTEhWRFFVRnBRa0VzUjBGQmFrSXNVVUZCYmtZN1FVRkRRU3hYUVVGTFJTeFJRVUZNTEVOQlFXTkVMRWxCUVdRc1EwRkJiVUk3UVVGRGFrSXNlVUpCUVdsQ1JDeEhRVVJCTzBGQlJXcENMSGxDUVVGcFFpeExRVVpCTzBGQlIycENMSGxDUVVGcFFrRXNSMEZJUVR0QlFVbHFRaXg1UWtGQmFVSXNTVUZLUVR0QlFVdHFRaXg1UWtGQmFVSTdRVUZNUVN4UFFVRnVRanM3UVVGUlFTeFhRVUZMU1N4cFFrRkJUQ3hEUVVGMVFpeExRVUZMUml4UlFVRk1MRU5CUVdOSExFdEJRV1FzUlVGQmRrSTdPMEZCUlVFc1ZVRkJSeXhMUVVGTGFrSXNUMEZCVEN4RFFVRmhhMElzVjBGQmFFSXNSVUZCTkVJN1FVRkRNVUlzWVVGQlMwTXNUMEZCVEN4SFFVRmxMRXRCUVV0c1FpeFJRVUZNTEVOQlFXTnRRaXhQUVVGa0xFTkJRWE5DTEUxQlFVMHNTMEZCUzNCQ0xFOUJRVXdzUTBGQllXdENMRmRCUVhwRExFTkJRV1k3UVVGRFJDeFBRVVpFTEUxQlJVczdRVUZEU0N4aFFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlpqdEJRVU5FT3p0QlFVVkVMRmRCUVV0c1FpeFJRVUZNTEVOQlFXTlpMRWxCUVdRc1EwRkJiVUk3UVVGRGFrSXNkVUpCUVdVc1RVRkVSVHRCUVVWcVFpeDVRa0ZCYVVKRUxFZEJSa0U3UVVGSGFrSXNkVUpCUVdWQkxFZEJTRVU3UVVGSmFrSXNNa0pCUVcxQ0xFdEJRVXRUTEdOQlFVd3NRMEZCYjBKRExFVkJRWEJDTEVsQlFUQkNMR3REUVVGWkxFTkJRVm9zUlVGQlpTeFhRVUZtTzBGQlNqVkNMRTlCUVc1Q08wRkJUVUU3UVVGRFFTeFhRVUZMUXl4UFFVRk1PMEZCUTBRN096c3dRMEZGY1VJN1FVRkRjRUk3UVVGRFFTeFZRVUZKUXl4WFFVRlhMRXRCUVV0MlFpeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRa3NzVTBGQmFrSXNRMEZCTWtKdFFpeExRVUV6UWl4RFFVRnBReXd3UWtGQmFrTXNRMEZCWmp0QlFVTkJMRlZCUVVkRUxGRkJRVWdzUlVGQllUdEJRVU5ZTEdWQlFVOUJMRk5CUVZNc1EwRkJWQ3hEUVVGUU8wRkJRMFFzVDBGR1JDeE5RVVZQTzBGQlEwd3NaVUZCVHl4UlFVRlFPMEZCUTBRN1FVRkRSanM3T3pKRFFVVnpRanRCUVVOeVFqdEJRVU5CTEZWQlFVbEZMSEZDUVVGeFFpeGpRVUZqUXl4SlFVRmtMRU5CUVcxQ0xFdEJRVXRPTEdOQlFVd3NRMEZCYjBKbUxGTkJRWFpETEVOQlFYcENPMEZCUTBFc1ZVRkJSMjlDTEd0Q1FVRklMRVZCUVhWQ08wRkJRM0pDTEdWQlFVOUJMRzFDUVVGdFFpeERRVUZ1UWl4RFFVRlFPMEZCUTBRN08wRkJSVVE3UVVGRFJEczdRVUZKUkRzN096czdPenM3TzIxRFFVMWxPMEZCUTJJc1YwRkJTM3BDTEZGQlFVd3NRMEZCWXpKQ0xGZEJRV1FzYlVKQlFUQkRMRXRCUVV0S0xGRkJRUzlETEhWQ1FVRjVSU3hMUVVGTFN5eFRRVUU1UlR0QlFVTkJMSFZJUVVGdFFpeExRVUZMVWl4alFVRjRRaXhGUVVGM1F5eExRVUZMY0VJc1VVRkJOME1zUlVGQmRVUXNTMEZCUzJ0Q0xFOUJRVFZFTzBGQlEwRXNWMEZCUzJ4Q0xGRkJRVXdzUTBGQll6WkNMRkZCUVdRc2JVSkJRWFZETEV0QlFVdE9MRkZCUVRWRExIVkNRVUZ6UlN4TFFVRkxTeXhUUVVFelJUdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPM05EUVU5clFrVXNSU3hGUVVGSk8wRkJRM0JDTEZkQlFVdFdMR05CUVV3c1IwRkJjMElzYzBKQlFVVlZMRVZCUVVZc1EwRkJkRUk3UVVGRFJEczdRVUZGUkRzN096czdPenM3T0VKQlMxVTdRVUZEVWl4VlFVRkpReXhSUVVGUkxFbEJRVm83UVVGRFFTeFhRVUZMTDBJc1VVRkJUQ3hEUVVGalowTXNSVUZCWkN4RFFVRnBRanRCUVVObUxESkNRVUZ0UWl4TFFVRkxReXhKUVVGTUxFTkJRVlZETEVsQlFWWXNRMEZCWlN4SlFVRm1MRU5CUkVvN1FVRkZaaXcwUWtGQmIwSXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFJDeEpRVUZZTEVOQlFXZENMRWxCUVdoQ0xFTkJSa3c3UVVGSFppdzJRa0ZCY1VJc1MwRkJTMFVzVFVGQlRDeERRVUZaUml4SlFVRmFMRU5CUVdsQ0xFbEJRV3BDTEVOQlNFNDdRVUZKWml3clFrRkJkVUlzUzBGQlMwY3NXVUZCVEN4RFFVRnJRa2dzU1VGQmJFSXNRMEZCZFVJc1NVRkJka0k3UVVGS1VpeFBRVUZxUWpzN1FVRlBRU3hYUVVGTGNrSXNVVUZCVEN4RFFVRmplVUlzUjBGQlpDeERRVUZyUWl4clFrRkJiRUlzUlVGRFIwNHNSVUZFU0N4RFFVTk5MR3RDUVVST0xFVkJRekJDTEZsQlFWYzdRVUZCUlVRc1kwRkJUV2hDTEdsQ1FVRk9MRU5CUVhkQ0xFbEJRWGhDTzBGQlFXZERMRTlCUkhaRk96dEJRVWRCTEZWQlFVY3NTMEZCUzJoQ0xFOUJRVXdzUTBGQllYZERMRXRCUVdoQ0xFVkJRWE5DTzBGQlEzQkNMR0ZCUVVzeFFpeFJRVUZNTEVOQlFXTjVRaXhIUVVGa0xFTkJRV3RDTEN0RFFVRnNRaXhGUVVORFRpeEZRVVJFTEVOQlEwa3NkMEpCUkVvc1JVRkRPRUlzV1VGQlZUdEJRVU4wUTBRc1owSkJRVTFvUWl4cFFrRkJUaXhEUVVGM1FpeEpRVUY0UWpzN1FVRkZRU3hqUVVGSmVVSXNWMEZCVnl4elFrRkJSU3hOUVVGR0xFVkJRVlZ3UXl4SlFVRldMRVZCUVdZN1FVRkRRU3hqUVVGSExFOUJRVTl2UXl4VFFVRlRReXhUUVVGb1FpeExRVUVyUWl4WFFVRXZRaXhKUVVFNFEwUXNVMEZCVTBNc1UwRkJWQ3hMUVVGMVFpeFBRVUY0UlN4RlFVRnBSanRCUVVNdlJVTXNlVUpCUVdGWUxFMUJRVTFaTEU5QlFXNUNPMEZCUTBGYUxHdENRVUZOV1N4UFFVRk9MRWRCUVdkQ1F5eFhRVUZYTEZsQlFWVTdRVUZEYmtOaUxHOUNRVUZOUlN4SlFVRk9PMEZCUTBGR0xHOUNRVUZOYkVJc1VVRkJUaXhEUVVGbFZDeEpRVUZtTEVOQlFXOUNMRTlCUVhCQ0xFVkJRVFpDTEVsQlFUZENPMEZCUTBRc1lVRklaU3hGUVVkaU1rSXNUVUZCVFdoRExFOUJRVTRzUTBGQll6aERMRlZCU0VRc1EwRkJhRUk3UVVGSlJEdEJRVU5HTEZOQldrUXNSVUZaUjJJc1JVRmFTQ3hEUVZsTkxIZENRVnBPTEVWQldXZERMRmxCUVZVN1FVRkRlRU5WTEhWQ1FVRmhXQ3hOUVVGTldTeFBRVUZ1UWp0QlFVTkJXaXhuUWtGQlRWa3NUMEZCVGl4SFFVRm5Ra01zVjBGQlZ5eFpRVUZWTzBGQlEyNURZaXhyUWtGQlRVa3NTMEZCVGp0QlFVTkJTaXhyUWtGQlRXeENMRkZCUVU0c1EwRkJaVlFzU1VGQlppeERRVUZ2UWl4UFFVRndRaXhGUVVFMlFpeExRVUUzUWp0QlFVTkVMRmRCU0dVc1JVRkhZakpDTEUxQlFVMW9ReXhQUVVGT0xFTkJRV000UXl4VlFVaEVMRU5CUVdoQ08wRkJTVVFzVTBGc1FrUTdRVUZ0UWtFc1dVRkJSeXhMUVVGTE9VTXNUMEZCVEN4RFFVRmhLME1zVTBGQmFFSXNSVUZCTUVJN1FVRkRlRUlzWlVGQlN6bERMRkZCUVV3c1EwRkJZM05ETEVkQlFXUXNRMEZCYTBJc0swTkJRV3hDTEVWQlEwdE9MRVZCUkV3c1EwRkRVU3gzUWtGRVVpeEZRVU5yUXl4WlFVRlZPMEZCUTNSRFZTeDVRa0ZCWVZnc1RVRkJUVmtzVDBGQmJrSTdRVUZEUkN4WFFVaE1MRVZCUjA5WUxFVkJTRkFzUTBGSFZTeDNRa0ZJVml4RlFVZHZReXhaUVVGVk8wRkJRM2hEVlN4NVFrRkJZVmdzVFVGQlRWa3NUMEZCYmtJN1FVRkRRVm9zYTBKQlFVMVpMRTlCUVU0c1IwRkJaMEpETEZkQlFWY3NXVUZCVlR0QlFVTnVRMklzYjBKQlFVMUpMRXRCUVU0N1FVRkRRVW9zYjBKQlFVMXNRaXhSUVVGT0xFTkJRV1ZVTEVsQlFXWXNRMEZCYjBJc1QwRkJjRUlzUlVGQk5rSXNTMEZCTjBJN1FVRkRSQ3hoUVVobExFVkJSMkl5UWl4TlFVRk5hRU1zVDBGQlRpeERRVUZqT0VNc1ZVRklSQ3hEUVVGb1FqdEJRVWxFTEZkQlZFdzdRVUZWUkR0QlFVTkdPMEZCUTBRc1YwRkJTMmhETEZGQlFVd3NRMEZCWTJ0RExFZEJRV1FzUTBGQmEwSXNTMEZCU3k5RExGRkJRWFpDTEVWQlFXbERaME1zUlVGQmFrTXNRMEZCYjBNc2NVSkJRWEJETEVWQlFUSkVMRlZCUVZOblFpeERRVUZVTEVWQlFWazdPMEZCUlhKRkxGbEJRVWxETEZWQlFWVXNjMEpCUVVVc1NVRkJSaXhEUVVGa08wRkJRVUVzV1VGRFJVTXNNa0pCUVRKQ2VrTXNlVUpCUVZNd1F5eGhRVUZVTEVOQlFYVkNjRUlzVFVGQlRTOUNMRkZCUVRkQ0xFTkJSRGRDT3p0QlFVZEJVeXhwUTBGQlV6SkRMRk5CUVZRc1EwRkJiVUpLTEVOQlFXNUNMRVZCUVhOQ0xGVkJRWFJDTEVWQlFXdERPMEZCUTJoRFppeG5Ra0ZCVFN4blFrRkJWenRCUVVObUxHZENRVUZKWjBJc1VVRkJVVWtzUlVGQlVpeERRVUZYZEVJc1RVRkJUV3hDTEZGQlFXcENMRU5CUVVvc1JVRkJaME03UVVGRE9VSnJRaXh2UWtGQlRVVXNTVUZCVGp0QlFVTkJSaXh2UWtGQlRTOUNMRkZCUVU0c1EwRkJaVmtzU1VGQlppeERRVUZ2UWl4VlFVRndRaXhGUVVGblF5eERRVUZETEVOQlFXcERMRVZCUVc5RE1FTXNTMEZCY0VNN1FVRkRRVTRzWjBKQlFVVlBMR05CUVVZN1FVRkRSRHRCUVVOR0xGZEJVQ3RDTzBGQlVXaERjRUlzYVVKQlFVOHNhVUpCUVZjN1FVRkRhRUpLTEd0Q1FVRk5TU3hMUVVGT08wRkJRMEZLTEd0Q1FVRk5iRUlzVVVGQlRpeERRVUZsZVVNc1MwRkJaanRCUVVORU8wRkJXQ3RDTEZOQlFXeERPMEZCWVVRc1QwRnNRa1E3UVVGdFFrUTdPMEZCUlVRN096czdPenM3TzNORFFVdHJRanRCUVVObUxGVkJRVWxGTEZGQlFWRXNjMEpCUVVWRExGTkJRVk5ETEVsQlFWZ3NSVUZCYVVKRExFZEJRV3BDTEVOQlFYRkNMRXRCUVVzelJDeFJRVUV4UWl4RFFVRmFPMEZCUVVFc1ZVRkRTU3RDTEZGQlFWRXNTVUZFV2p0QlFVVkJlVUlzV1VGQlRXeENMRWRCUVU0c1EwRkJWU3h0UWtGQlZpeEZRVU5OVGl4RlFVUk9MRU5CUTFNc2JVSkJSRlFzUlVGRE9FSXNWVUZCVTJkQ0xFTkJRVlFzUlVGQlZ6dEJRVU5zUXl4WlFVRkhha0lzVFVGQlRXeENMRkZCUVU0c1EwRkJaWGRETEVWQlFXWXNRMEZCYTBKTUxFVkJRVVZaTEUxQlFYQkNMRXRCUVN0Q04wSXNUVUZCVFd4Q0xGRkJRVTRzUTBGQlpXZEVMRWxCUVdZc1EwRkJiMEppTEVWQlFVVlpMRTFCUVhSQ0xFVkJRVGhDT1VNc1RVRkJhRVVzUlVGQmQwVTdRVUZEZEVVN1FVRkRSRHRCUVVORUxGbEJRVWRwUWl4TlFVRk5MMElzVVVGQlRpeERRVUZsY1VRc1JVRkJaaXhEUVVGclFrd3NSVUZCUlZrc1RVRkJjRUlzUzBGQkswSTNRaXhOUVVGTkwwSXNVVUZCVGl4RFFVRmxOa1FzU1VGQlppeERRVUZ2UW1Jc1JVRkJSVmtzVFVGQmRFSXNSVUZCT0VJNVF5eE5RVUZvUlN4RlFVRjNSVHRCUVVOMFJUdEJRVU5FTzBGQlEwUnBRaXhqUVVGTlNTeExRVUZPTzBGQlEwRnhRaXhqUVVGTmJFSXNSMEZCVGl4RFFVRlZMRzFDUVVGV08wRkJRMFFzVDBGV1RqdEJRVmRHT3p0QlFVVkVPenM3T3pzN096czdNa0pCVFU4N1FVRkRURHRCUVVOQk96czdPMEZCU1VFc1YwRkJTM1JETEZGQlFVd3NRMEZCWXpoRUxFOUJRV1FzUTBGQmMwSXNjVUpCUVhSQ0xFVkJRVFpETEV0QlFVczVSQ3hSUVVGTUxFTkJRV05aTEVsQlFXUXNRMEZCYlVJc1NVRkJia0lzUTBGQk4wTTdRVUZEUVN4WFFVRkxReXhSUVVGTUxFTkJRV05uUWl4UlFVRmtMRU5CUVhWQ0xFOUJRWFpDTEVWQlEwdHFRaXhKUVVSTUxFTkJRMVVzUlVGQlF5eHBRa0ZCYVVJc1NVRkJiRUlzUlVGRVZqdEJRVVZCT3p0QlFVVkJMRmRCUVV0YUxGRkJRVXdzUTBGQll6WkNMRkZCUVdRc1EwRkJkVUlzV1VGQmRrSTdRVUZEUVN4WFFVRkxVU3haUVVGTU8wRkJRMEVzVjBGQlMzSkRMRkZCUVV3c1EwRkJZekpDTEZkQlFXUXNRMEZCTUVJc1dVRkJNVUlzUlVGQmQwTkZMRkZCUVhoRExFTkJRV2xFTEZOQlFXcEVMRVZCUTB0cVFpeEpRVVJNTEVOQlExVXNSVUZCUXl4bFFVRmxMRXRCUVdoQ0xFVkJSRlk3TzBGQlIwRXNWVUZCUnl4TFFVRkxZaXhQUVVGTUxFTkJRV0ZuUlN4VFFVRm9RaXhGUVVFd1FqdEJRVU40UWl4WlFVRkpReXhoUVVGaGRrUXNlVUpCUVZNd1F5eGhRVUZVTEVOQlFYVkNMRXRCUVV0dVJDeFJRVUUxUWl4RFFVRnFRanRCUVVOQkxGbEJRVWRuUlN4WFFVRlhiRVFzVFVGQlpDeEZRVUZ4UWp0QlFVTnVRbXRFTEhGQ1FVRlhReXhGUVVGWUxFTkJRV01zUTBGQlpDeEZRVUZwUWxnc1MwRkJha0k3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRlZCUVVjc1MwRkJTM1pFTEU5QlFVd3NRMEZCWVcxRkxGbEJRV2hDTEVWQlFUWkNPMEZCUVVVc1lVRkJTME1zWlVGQlREdEJRVUY1UWpzN1FVRkZlRVFzVlVGQlNTeExRVUZMY0VVc1QwRkJUQ3hEUVVGaGNVVXNVMEZCYWtJc1JVRkJORUk3UVVGRE1VSXpSQ3hwUTBGQlV6SkVMRk5CUVZRc1EwRkJiVUlzUzBGQlMzQkZMRkZCUVhoQ08wRkJRMFE3TzBGQlJVUTdPenM3UVVGSlFTeFhRVUZMUVN4UlFVRk1MRU5CUVdNNFJDeFBRVUZrTEVOQlFYTkNMR3RDUVVGMFFpeEZRVUV3UXl4RFFVRkRMRXRCUVVzNVJDeFJRVUZPTEVOQlFURkRPMEZCUTBRN08wRkJSVVE3T3pzN096czdPelJDUVV0Uk8wRkJRMDRzVlVGQlJ5eERRVUZETEV0QlFVdEJMRkZCUVV3c1EwRkJZM0ZGTEZGQlFXUXNRMEZCZFVJc1UwRkJka0lzUTBGQlNpeEZRVUZ6UXp0QlFVTndReXhsUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5FTEZkQlFVdHlSU3hSUVVGTUxFTkJRV015UWl4WFFVRmtMRU5CUVRCQ0xGTkJRVEZDTEVWQlEwdG1MRWxCUkV3c1EwRkRWU3hGUVVGRExHVkJRV1VzU1VGQmFFSXNSVUZFVmpzN1FVRkhRU3hYUVVGTFF5eFJRVUZNTEVOQlFXTmpMRmRCUVdRc1EwRkJNRUlzVDBGQk1VSXNSVUZEUzJZc1NVRkVUQ3hEUVVOVkxHVkJSRllzUlVGRE1rSXNTMEZFTTBJN08wRkJSMEU3T3pzN1FVRkpRU3hYUVVGTFdpeFJRVUZNTEVOQlFXTTRSQ3hQUVVGa0xFTkJRWE5DTEd0Q1FVRjBRaXhGUVVFd1F5eERRVUZETEV0QlFVczVSQ3hSUVVGT0xFTkJRVEZET3p0QlFVVkJMRlZCUVVrc1MwRkJTMFFzVDBGQlRDeERRVUZoY1VVc1UwRkJha0lzUlVGQk5FSTdRVUZETVVJelJDeHBRMEZCVXpaRUxGbEJRVlFzUTBGQmMwSXNTMEZCUzNSRkxGRkJRVE5DTzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czJRa0ZKVXp0QlFVTlFMRlZCUVVjc1MwRkJTMEVzVVVGQlRDeERRVUZqY1VVc1VVRkJaQ3hEUVVGMVFpeFRRVUYyUWl4RFFVRklMRVZCUVhGRE8wRkJRMjVETEZsQlFVY3NTMEZCUzNoRUxGRkJRVXdzUTBGQlkxUXNTVUZCWkN4RFFVRnRRaXhQUVVGdVFpeERRVUZJTEVWQlFXZERPMEZCUTJoRExHRkJRVXNyUWl4TFFVRk1PMEZCUTBRc1QwRklSQ3hOUVVkTE8wRkJRMGdzWVVGQlMwWXNTVUZCVER0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdLMEpCU1ZjN1FVRkRWQ3hYUVVGTGFrTXNVVUZCVEN4RFFVRmpjME1zUjBGQlpDeERRVUZyUWl4aFFVRnNRaXhGUVVGcFEybERMRWxCUVdwRE8wRkJRMEVzVjBGQlN6RkVMRkZCUVV3c1EwRkJZM2xDTEVkQlFXUXNRMEZCYTBJc1kwRkJiRUk3UVVGRFFTdzBRa0ZCUlcxQ0xGTkJRVk5ETEVsQlFWZ3NSVUZCYVVKd1FpeEhRVUZxUWl4RFFVRnhRaXh0UWtGQmNrSTdRVUZGUkRzN096dEZRV2hUYjBKclF5eDNRanM3UVVGdFUzWkNNMFVzVTBGQlUwMHNVVUZCVkN4SFFVRnZRanRCUVVOc1FqczdPenM3TzBGQlRVRmpMR1ZCUVdFc1NVRlFTenRCUVZGc1FqczdPenM3TzBGQlRVRTBRaXhqUVVGWkxFZEJaRTA3UVVGbGJFSTdPenM3T3p0QlFVMUJUaXhUUVVGUExFdEJja0pYTzBGQmMwSnNRanM3T3pzN08wRkJUVUZQTEdGQlFWY3NTMEUxUWs4N1FVRTJRbXhDT3pzN096czdRVUZOUVRKQ0xGZEJRVk1zUTBGdVExTTdRVUZ2UTJ4Q096czdPenM3UVVGTlFVTXNWMEZCVXl4RFFURkRVenRCUVRKRGJFSTdPenM3T3p0QlFVMUJReXhwUWtGQlpTeEZRV3BFUnpzN1FVRnRSR3hDT3pzN096czdRVUZOUVhCRUxGbEJRVlVzVFVGNlJGRTdRVUV3Ukd4Q096czdPenM3UVVGTlFVc3NZVUZCVnl4TlFXaEZUenRCUVdsRmJFSTdPenM3T3p0QlFVMUJaMFFzWjBKQlFXTXNTMEYyUlVrN1FVRjNSV3hDT3pzN096czdPenRCUVZGQlF5eHpRa0ZCYjBJc1NVRm9Sa1k3UVVGcFJteENPenM3T3pzN1FVRk5RVlFzWVVGQlZ5eExRWFpHVHp0QlFYZEdiRUk3T3pzN096dEJRVTFCVEN4aFFVRlhMRXRCT1VaUE8wRkJLMFpzUWpzN096czdPMEZCVFVGSExHZENRVUZqTzBGQmNrZEpMRU5CUVhCQ096dFJRWGRIVVhKRkxGRXNSMEZCUVVFc1VTSXNJbVpwYkdVaU9pSm1iM1Z1WkdGMGFXOXVMbVJ5YjNCa2IzZHVMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cGJYQnZjblFnSkNCbWNtOXRJQ2RxY1hWbGNua25PMXh1YVcxd2IzSjBJSHNnUzJWNVltOWhjbVFnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzVyWlhsaWIyRnlaQ2M3WEc1cGJYQnZjblFnZXlCSFpYUlpiMFJwWjJsMGN5QjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtTnZjbVVuTzF4dWFXMXdiM0owSUhzZ1VHOXphWFJwYjI1aFlteGxJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5CdmMybDBhVzl1WVdKc1pTYzdYRzVjYm1sdGNHOXlkQ0I3SUZSeWFXZG5aWEp6SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1ZEhKcFoyZGxjbk1uTzF4dVhHNWNiaThxS2x4dUlDb2dSSEp2Y0dSdmQyNGdiVzlrZFd4bExseHVJQ29nUUcxdlpIVnNaU0JtYjNWdVpHRjBhVzl1TG1SeWIzQmtiM2R1WEc0Z0tpQkFjbVZ4ZFdseVpYTWdabTkxYm1SaGRHbHZiaTUxZEdsc0xtdGxlV0p2WVhKa1hHNGdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMbUp2ZUZ4dUlDb2dRSEpsY1hWcGNtVnpJR1p2ZFc1a1lYUnBiMjR1ZFhScGJDNTBjbWxuWjJWeWMxeHVJQ292WEc1amJHRnpjeUJFY205d1pHOTNiaUJsZUhSbGJtUnpJRkJ2YzJsMGFXOXVZV0pzWlNCN1hHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JR0VnWkhKdmNHUnZkMjR1WEc0Z0lDQXFJRUJqYkdGemMxeHVJQ0FnS2lCQWJtRnRaU0JFY205d1pHOTNibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ1pXeGxiV1Z1ZENBdElHcFJkV1Z5ZVNCdlltcGxZM1FnZEc4Z2JXRnJaU0JwYm5SdklHRWdaSEp2Y0dSdmQyNHVYRzRnSUNBcUlDQWdJQ0FnSUNCUFltcGxZM1FnYzJodmRXeGtJR0psSUc5bUlIUm9aU0JrY205d1pHOTNiaUJ3WVc1bGJDd2djbUYwYUdWeUlIUm9ZVzRnYVhSeklHRnVZMmh2Y2k1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JQZG1WeWNtbGtaWE1nZEc4Z2RHaGxJR1JsWm1GMWJIUWdjR3gxWjJsdUlITmxkSFJwYm1kekxseHVJQ0FnS2k5Y2JpQWdYM05sZEhWd0tHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBJRDBnWld4bGJXVnVkRHRjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNBa0xtVjRkR1Z1WkNoN2ZTd2dSSEp2Y0dSdmQyNHVaR1ZtWVhWc2RITXNJSFJvYVhNdUpHVnNaVzFsYm5RdVpHRjBZU2dwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0IwYUdsekxtTnNZWE56VG1GdFpTQTlJQ2RFY205d1pHOTNiaWM3SUM4dklHbGxPU0JpWVdOcklHTnZiWEJoZEZ4dVhHNGdJQ0FnTHk4Z1ZISnBaMmRsY25NZ2FXNXBkQ0JwY3lCcFpHVnRjRzkwWlc1MExDQnFkWE4wSUc1bFpXUWdkRzhnYldGclpTQnpkWEpsSUdsMElHbHpJR2x1YVhScFlXeHBlbVZrWEc0Z0lDQWdWSEpwWjJkbGNuTXVhVzVwZENna0tUdGNibHh1SUNBZ0lIUm9hWE11WDJsdWFYUW9LVHRjYmx4dUlDQWdJRXRsZVdKdllYSmtMbkpsWjJsemRHVnlLQ2RFY205d1pHOTNiaWNzSUh0Y2JpQWdJQ0FnSUNkRlRsUkZVaWM2SUNkdmNHVnVKeXhjYmlBZ0lDQWdJQ2RUVUVGRFJTYzZJQ2R2Y0dWdUp5eGNiaUFnSUNBZ0lDZEZVME5CVUVVbk9pQW5ZMnh2YzJVblhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElIQnNkV2RwYmlCaWVTQnpaWFIwYVc1bkwyTm9aV05yYVc1bklHOXdkR2x2Ym5NZ1lXNWtJR0YwZEhKcFluVjBaWE1zSUdGa1pHbHVaeUJvWld4d1pYSWdkbUZ5YVdGaWJHVnpMQ0JoYm1RZ2MyRjJhVzVuSUhSb1pTQmhibU5vYjNJdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJsdWFYUW9LU0I3WEc0Z0lDQWdkbUZ5SUNScFpDQTlJSFJvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWduYVdRbktUdGNibHh1SUNBZ0lIUm9hWE11SkdGdVkyaHZjbk1nUFNBa0tHQmJaR0YwWVMxMGIyZG5iR1U5WENJa2V5UnBaSDFjSWwxZ0tTNXNaVzVuZEdnZ1B5QWtLR0JiWkdGMFlTMTBiMmRuYkdVOVhDSWtleVJwWkgxY0lsMWdLU0E2SUNRb1lGdGtZWFJoTFc5d1pXNDlYQ0lrZXlScFpIMWNJbDFnS1R0Y2JpQWdJQ0IwYUdsekxpUmhibU5vYjNKekxtRjBkSElvZTF4dUlDQWdJQ0FnSjJGeWFXRXRZMjl1ZEhKdmJITW5PaUFrYVdRc1hHNGdJQ0FnSUNBblpHRjBZUzFwY3kxbWIyTjFjeWM2SUdaaGJITmxMRnh1SUNBZ0lDQWdKMlJoZEdFdGVXVjBhUzFpYjNnbk9pQWthV1FzWEc0Z0lDQWdJQ0FuWVhKcFlTMW9ZWE53YjNCMWNDYzZJSFJ5ZFdVc1hHNGdJQ0FnSUNBbllYSnBZUzFsZUhCaGJtUmxaQ2M2SUdaaGJITmxYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQjBhR2x6TGw5elpYUkRkWEp5Wlc1MFFXNWphRzl5S0hSb2FYTXVKR0Z1WTJodmNuTXVabWx5YzNRb0tTazdYRzVjYmlBZ0lDQnBaaWgwYUdsekxtOXdkR2x2Ym5NdWNHRnlaVzUwUTJ4aGMzTXBlMXh1SUNBZ0lDQWdkR2hwY3k0a2NHRnlaVzUwSUQwZ2RHaHBjeTRrWld4bGJXVnVkQzV3WVhKbGJuUnpLQ2N1SnlBcklIUm9hWE11YjNCMGFXOXVjeTV3WVhKbGJuUkRiR0Z6Y3lrN1hHNGdJQ0FnZldWc2MyVjdYRzRnSUNBZ0lDQjBhR2x6TGlSd1lYSmxiblFnUFNCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpaDdYRzRnSUNBZ0lDQW5ZWEpwWVMxb2FXUmtaVzRuT2lBbmRISjFaU2NzWEc0Z0lDQWdJQ0FuWkdGMFlTMTVaWFJwTFdKdmVDYzZJQ1JwWkN4Y2JpQWdJQ0FnSUNka1lYUmhMWEpsYzJsNlpTYzZJQ1JwWkN4Y2JpQWdJQ0FnSUNkaGNtbGhMV3hoWW1Wc2JHVmtZbmtuT2lCMGFHbHpMaVJqZFhKeVpXNTBRVzVqYUc5eUxtbGtJSHg4SUVkbGRGbHZSR2xuYVhSektEWXNJQ2RrWkMxaGJtTm9iM0luS1Z4dUlDQWdJSDBwTzF4dUlDQWdJSE4xY0dWeUxsOXBibWwwS0NrN1hHNGdJQ0FnZEdocGN5NWZaWFpsYm5SektDazdYRzRnSUgxY2JseHVJQ0JmWjJWMFJHVm1ZWFZzZEZCdmMybDBhVzl1S0NrZ2UxeHVJQ0FnSUM4dklHaGhibVJzWlNCc1pXZGhZM2tnWTJ4aGMzTnVZVzFsYzF4dUlDQWdJSFpoY2lCd2IzTnBkR2x2YmlBOUlIUm9hWE11SkdWc1pXMWxiblJiTUYwdVkyeGhjM05PWVcxbExtMWhkR05vS0M4b2RHOXdmR3hsWm5SOGNtbG5hSFI4WW05MGRHOXRLUzluS1R0Y2JpQWdJQ0JwWmlod2IzTnBkR2x2YmlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhCdmMybDBhVzl1V3pCZE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMkp2ZEhSdmJTZGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZaMlYwUkdWbVlYVnNkRUZzYVdkdWJXVnVkQ2dwSUh0Y2JpQWdJQ0F2THlCb1lXNWtiR1VnYkdWbllXTjVJR1pzYjJGMElHRndjSEp2WVdOb1hHNGdJQ0FnZG1GeUlHaHZjbWw2YjI1MFlXeFFiM05wZEdsdmJpQTlJQzltYkc5aGRDMG9YRnhUS3lrdkxtVjRaV01vZEdocGN5NGtZM1Z5Y21WdWRFRnVZMmh2Y2k1amJHRnpjMDVoYldVcE8xeHVJQ0FnSUdsbUtHaHZjbWw2YjI1MFlXeFFiM05wZEdsdmJpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHaHZjbWw2YjI1MFlXeFFiM05wZEdsdmJsc3hYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2MzVndaWEl1WDJkbGRFUmxabUYxYkhSQmJHbG5ibTFsYm5Rb0tUdGNiaUFnZlZ4dVhHNWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBjeUIwYUdVZ2NHOXphWFJwYjI0Z1lXNWtJRzl5YVdWdWRHRjBhVzl1SUc5bUlIUm9aU0JrY205d1pHOTNiaUJ3WVc1bExDQmphR1ZqYTNNZ1ptOXlJR052Ykd4cGMybHZibk1nYVdZZ1lXeHNiM2N0YjNabGNteGhjQ0JwY3lCdWIzUWdkSEoxWlM1Y2JpQWdJQ29nVW1WamRYSnphWFpsYkhrZ1kyRnNiSE1nYVhSelpXeG1JR2xtSUdFZ1kyOXNiR2x6YVc5dUlHbHpJR1JsZEdWamRHVmtMQ0IzYVhSb0lHRWdibVYzSUhCdmMybDBhVzl1SUdOc1lYTnpMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOXpaWFJRYjNOcGRHbHZiaWdwSUh0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExuSmxiVzkyWlVOc1lYTnpLR0JvWVhNdGNHOXphWFJwYjI0dEpIdDBhR2x6TG5CdmMybDBhVzl1ZlNCb1lYTXRZV3hwWjI1dFpXNTBMU1I3ZEdocGN5NWhiR2xuYm0xbGJuUjlZQ2s3WEc0Z0lDQWdjM1Z3WlhJdVgzTmxkRkJ2YzJsMGFXOXVLSFJvYVhNdUpHTjFjbkpsYm5SQmJtTm9iM0lzSUhSb2FYTXVKR1ZzWlcxbGJuUXNJSFJvYVhNdUpIQmhjbVZ1ZENrN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWhaR1JEYkdGemN5aGdhR0Z6TFhCdmMybDBhVzl1TFNSN2RHaHBjeTV3YjNOcGRHbHZibjBnYUdGekxXRnNhV2R1YldWdWRDMGtlM1JvYVhNdVlXeHBaMjV0Wlc1MGZXQXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxaGEyVWdhWFFnWVNCamRYSnlaVzUwSUdGdVkyaHZjaTVjYmlBZ0lDb2dRM1Z5Y21WdWRDQmhibU5vYjNJZ1lYTWdkR2hsSUhKbFptVnlaVzVqWlNCbWIzSWdkR2hsSUhCdmMybDBhVzl1SUc5bUlFUnliM0JrYjNkdUlIQmhibVZ6TGx4dUlDQWdLaUJBY0dGeVlXMGdlMGhVVFV4OUlHVnNJQzBnUkU5TklHVnNaVzFsYm5RZ2IyWWdkR2hsSUdGdVkyaHZjaTVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZjMlYwUTNWeWNtVnVkRUZ1WTJodmNpaGxiQ2tnZTF4dUlDQWdJSFJvYVhNdUpHTjFjbkpsYm5SQmJtTm9iM0lnUFNBa0tHVnNLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQlpHUnpJR1YyWlc1MElHeHBjM1JsYm1WeWN5QjBieUIwYUdVZ1pXeGxiV1Z1ZENCMWRHbHNhWHBwYm1jZ2RHaGxJSFJ5YVdkblpYSnpJSFYwYVd4cGRIa2diR2xpY21GeWVTNWNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFMMXh1SUNCZlpYWmxiblJ6S0NrZ2UxeHVJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1dmJpaDdYRzRnSUNBZ0lDQW5iM0JsYmk1NlppNTBjbWxuWjJWeUp6b2dkR2hwY3k1dmNHVnVMbUpwYm1Rb2RHaHBjeWtzWEc0Z0lDQWdJQ0FuWTJ4dmMyVXVlbVl1ZEhKcFoyZGxjaWM2SUhSb2FYTXVZMnh2YzJVdVltbHVaQ2gwYUdsektTeGNiaUFnSUNBZ0lDZDBiMmRuYkdVdWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdWRHOW5aMnhsTG1KcGJtUW9kR2hwY3lrc1hHNGdJQ0FnSUNBbmNtVnphWHBsYldVdWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdVgzTmxkRkJ2YzJsMGFXOXVMbUpwYm1Rb2RHaHBjeWxjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSFJvYVhNdUpHRnVZMmh2Y25NdWIyWm1LQ2RqYkdsamF5NTZaaTUwY21sbloyVnlKeWxjYmlBZ0lDQWdJQzV2YmlnblkyeHBZMnN1ZW1ZdWRISnBaMmRsY2ljc0lHWjFibU4wYVc5dUtDa2dleUJmZEdocGN5NWZjMlYwUTNWeWNtVnVkRUZ1WTJodmNpaDBhR2x6S1RzZ2ZTazdYRzVjYmlBZ0lDQnBaaWgwYUdsekxtOXdkR2x2Ym5NdWFHOTJaWElwZTF4dUlDQWdJQ0FnZEdocGN5NGtZVzVqYUc5eWN5NXZabVlvSjIxdmRYTmxaVzUwWlhJdWVtWXVaSEp2Y0dSdmQyNGdiVzkxYzJWc1pXRjJaUzU2Wmk1a2NtOXdaRzkzYmljcFhHNGdJQ0FnSUNBdWIyNG9KMjF2ZFhObFpXNTBaWEl1ZW1ZdVpISnZjR1J2ZDI0bkxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZjMlYwUTNWeWNtVnVkRUZ1WTJodmNpaDBhR2x6S1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnWW05a2VVUmhkR0VnUFNBa0tDZGliMlI1SnlrdVpHRjBZU2dwTzF4dUlDQWdJQ0FnSUNCcFppaDBlWEJsYjJZb1ltOWtlVVJoZEdFdWQyaGhkR2x1Y0hWMEtTQTlQVDBnSjNWdVpHVm1hVzVsWkNjZ2ZId2dZbTlrZVVSaGRHRXVkMmhoZEdsdWNIVjBJRDA5UFNBbmJXOTFjMlVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0Y5MGFHbHpMblJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMblJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXZjR1Z1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NGtZVzVqYUc5eWN5NWtZWFJoS0Nkb2IzWmxjaWNzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwc0lGOTBhR2x6TG05d2RHbHZibk11YUc5MlpYSkVaV3hoZVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBMbTl1S0NkdGIzVnpaV3hsWVhabExucG1MbVJ5YjNCa2IzZHVKeXdnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLRjkwYUdsekxuUnBiV1Z2ZFhRcE8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1MGFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVKR0Z1WTJodmNuTXVaR0YwWVNnbmFHOTJaWEluTENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUgwc0lGOTBhR2x6TG05d2RHbHZibk11YUc5MlpYSkVaV3hoZVNrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lHbG1LSFJvYVhNdWIzQjBhVzl1Y3k1b2IzWmxjbEJoYm1VcGUxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG05bVppZ25iVzkxYzJWbGJuUmxjaTU2Wmk1a2NtOXdaRzkzYmlCdGIzVnpaV3hsWVhabExucG1MbVJ5YjNCa2IzZHVKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXZiaWduYlc5MWMyVmxiblJsY2k1NlppNWtjbTl3Wkc5M2JpY3NJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoZmRHaHBjeTUwYVcxbGIzVjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBMbTl1S0NkdGIzVnpaV3hsWVhabExucG1MbVJ5YjNCa2IzZHVKeXdnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSlVhVzFsYjNWMEtGOTBhR2x6TG5ScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NTBhVzFsYjNWMElEMGdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdUpHRnVZMmh2Y25NdVpHRjBZU2duYUc5MlpYSW5MQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJRjkwYUdsekxtOXdkR2x2Ym5NdWFHOTJaWEpFWld4aGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NGtZVzVqYUc5eWN5NWhaR1FvZEdocGN5NGtaV3hsYldWdWRDa3ViMjRvSjJ0bGVXUnZkMjR1ZW1ZdVpISnZjR1J2ZDI0bkxDQm1kVzVqZEdsdmJpaGxLU0I3WEc1Y2JpQWdJQ0FnSUhaaGNpQWtkR0Z5WjJWMElEMGdKQ2gwYUdsektTeGNiaUFnSUNBZ0lDQWdkbWx6YVdKc1pVWnZZM1Z6WVdKc1pVVnNaVzFsYm5SeklEMGdTMlY1WW05aGNtUXVabWx1WkVadlkzVnpZV0pzWlNoZmRHaHBjeTRrWld4bGJXVnVkQ2s3WEc1Y2JpQWdJQ0FnSUV0bGVXSnZZWEprTG1oaGJtUnNaVXRsZVNobExDQW5SSEp2Y0dSdmQyNG5MQ0I3WEc0Z0lDQWdJQ0FnSUc5d1pXNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2drZEdGeVoyVjBMbWx6S0Y5MGFHbHpMaVJoYm1Ob2IzSnpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWIzQmxiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWduZEdGaWFXNWtaWGduTENBdE1Ta3VabTlqZFhNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdOc2IzTmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amJHOXpaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGlSaGJtTm9iM0p6TG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ1lXNGdaWFpsYm5RZ2FHRnVaR3hsY2lCMGJ5QjBhR1VnWW05a2VTQjBieUJqYkc5elpTQmhibmtnWkhKdmNHUnZkMjV6SUc5dUlHRWdZMnhwWTJzdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJGa1pFSnZaSGxJWVc1a2JHVnlLQ2tnZTF4dUlDQWdJQ0IyWVhJZ0pHSnZaSGtnUFNBa0tHUnZZM1Z0Wlc1MExtSnZaSGtwTG01dmRDaDBhR2x6TGlSbGJHVnRaVzUwS1N4Y2JpQWdJQ0FnSUNBZ0lGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdKR0p2WkhrdWIyWm1LQ2RqYkdsamF5NTZaaTVrY205d1pHOTNiaWNwWEc0Z0lDQWdJQ0FnSUNBZ0xtOXVLQ2RqYkdsamF5NTZaaTVrY205d1pHOTNiaWNzSUdaMWJtTjBhVzl1S0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1gzUm9hWE11SkdGdVkyaHZjbk11YVhNb1pTNTBZWEpuWlhRcElIeDhJRjkwYUdsekxpUmhibU5vYjNKekxtWnBibVFvWlM1MFlYSm5aWFFwTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloZmRHaHBjeTRrWld4bGJXVnVkQzVwY3lobExuUmhjbWRsZENrZ2ZId2dYM1JvYVhNdUpHVnNaVzFsYm5RdVptbHVaQ2hsTG5SaGNtZGxkQ2t1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnNiM05sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrWW05a2VTNXZabVlvSjJOc2FXTnJMbnBtTG1SeWIzQmtiM2R1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1QzQmxibk1nZEdobElHUnliM0JrYjNkdUlIQmhibVVzSUdGdVpDQm1hWEpsY3lCaElHSjFZbUpzYVc1bklHVjJaVzUwSUhSdklHTnNiM05sSUc5MGFHVnlJR1J5YjNCa2IzZHVjeTVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQm1hWEpsY3lCRWNtOXdaRzkzYmlOamJHOXpaVzFsWEc0Z0lDQXFJRUJtYVhKbGN5QkVjbTl3Wkc5M2JpTnphRzkzWEc0Z0lDQXFMMXh1SUNCdmNHVnVLQ2tnZTF4dUlDQWdJQzh2SUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm1seVpYTWdkRzhnWTJ4dmMyVWdiM1JvWlhJZ2IzQmxiaUJrY205d1pHOTNibk1zSUhSNWNHbGpZV3hzZVNCM2FHVnVJR1J5YjNCa2IzZHVJR2x6SUc5d1pXNXBibWRjYmlBZ0lDQWdLaUJBWlhabGJuUWdSSEp2Y0dSdmQyNGpZMnh2YzJWdFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25ZMnh2YzJWdFpTNTZaaTVrY205d1pHOTNiaWNzSUhSb2FYTXVKR1ZzWlcxbGJuUXVZWFIwY2lnbmFXUW5LU2s3WEc0Z0lDQWdkR2hwY3k0a1lXNWphRzl5Y3k1aFpHUkRiR0Z6Y3lnbmFHOTJaWEluS1Z4dUlDQWdJQ0FnSUNBdVlYUjBjaWg3SjJGeWFXRXRaWGh3WVc1a1pXUW5PaUIwY25WbGZTazdYRzRnSUNBZ0x5OGdkR2hwY3k0a1pXeGxiV1Z1ZEM4cUxuTm9iM2NvS1Nvdk8xeHVYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzVoWkdSRGJHRnpjeWduYVhNdGIzQmxibWx1WnljcE8xeHVJQ0FnSUhSb2FYTXVYM05sZEZCdmMybDBhVzl1S0NrN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXlaVzF2ZG1WRGJHRnpjeWduYVhNdGIzQmxibWx1WnljcExtRmtaRU5zWVhOektDZHBjeTF2Y0dWdUp5bGNiaUFnSUNBZ0lDQWdMbUYwZEhJb2V5ZGhjbWxoTFdocFpHUmxiaWM2SUdaaGJITmxmU2s3WEc1Y2JpQWdJQ0JwWmloMGFHbHpMbTl3ZEdsdmJuTXVZWFYwYjBadlkzVnpLWHRjYmlBZ0lDQWdJSFpoY2lBa1ptOWpkWE5oWW14bElEMGdTMlY1WW05aGNtUXVabWx1WkVadlkzVnpZV0pzWlNoMGFHbHpMaVJsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJR2xtS0NSbWIyTjFjMkZpYkdVdWJHVnVaM1JvS1h0Y2JpQWdJQ0FnSUNBZ0pHWnZZM1Z6WVdKc1pTNWxjU2d3S1M1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtS0hSb2FYTXViM0IwYVc5dWN5NWpiRzl6WlU5dVEyeHBZMnNwZXlCMGFHbHpMbDloWkdSQ2IyUjVTR0Z1Wkd4bGNpZ3BPeUI5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMblJ5WVhCR2IyTjFjeWtnZTF4dUlDQWdJQ0FnUzJWNVltOWhjbVF1ZEhKaGNFWnZZM1Z6S0hSb2FYTXVKR1ZzWlcxbGJuUXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVpwY21WeklHOXVZMlVnZEdobElHUnliM0JrYjNkdUlHbHpJSFpwYzJsaWJHVXVYRzRnSUNBZ0lDb2dRR1YyWlc1MElFUnliM0JrYjNkdUkzTm9iM2RjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjNOb2IzY3VlbVl1WkhKdmNHUnZkMjRuTENCYmRHaHBjeTRrWld4bGJXVnVkRjBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnNiM05sY3lCMGFHVWdiM0JsYmlCa2NtOXdaRzkzYmlCd1lXNWxMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FHWnBjbVZ6SUVSeWIzQmtiM2R1STJocFpHVmNiaUFnSUNvdlhHNGdJR05zYjNObEtDa2dlMXh1SUNBZ0lHbG1LQ0YwYUdsekxpUmxiR1Z0Wlc1MExtaGhjME5zWVhOektDZHBjeTF2Y0dWdUp5a3BlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5KbGJXOTJaVU5zWVhOektDZHBjeTF2Y0dWdUp5bGNiaUFnSUNBZ0lDQWdMbUYwZEhJb2V5ZGhjbWxoTFdocFpHUmxiaWM2SUhSeWRXVjlLVHRjYmx4dUlDQWdJSFJvYVhNdUpHRnVZMmh2Y25NdWNtVnRiM1psUTJ4aGMzTW9KMmh2ZG1WeUp5bGNiaUFnSUNBZ0lDQWdMbUYwZEhJb0oyRnlhV0V0Wlhod1lXNWtaV1FuTENCbVlXeHpaU2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCR2FYSmxjeUJ2Ym1ObElIUm9aU0JrY205d1pHOTNiaUJwY3lCdWJ5QnNiMjVuWlhJZ2RtbHphV0pzWlM1Y2JpQWdJQ0FnS2lCQVpYWmxiblFnUkhKdmNHUnZkMjRqYUdsa1pWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25hR2xrWlM1NlppNWtjbTl3Wkc5M2JpY3NJRnQwYUdsekxpUmxiR1Z0Wlc1MFhTazdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxuUnlZWEJHYjJOMWN5a2dlMXh1SUNBZ0lDQWdTMlY1WW05aGNtUXVjbVZzWldGelpVWnZZM1Z6S0hSb2FYTXVKR1ZzWlcxbGJuUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJVYjJkbmJHVnpJSFJvWlNCa2NtOXdaRzkzYmlCd1lXNWxKM01nZG1semFXSnBiR2wwZVM1Y2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFMMXh1SUNCMGIyZG5iR1VvS1NCN1hHNGdJQ0FnYVdZb2RHaHBjeTRrWld4bGJXVnVkQzVvWVhORGJHRnpjeWduYVhNdGIzQmxiaWNwS1h0Y2JpQWdJQ0FnSUdsbUtIUm9hWE11SkdGdVkyaHZjbk11WkdGMFlTZ25hRzkyWlhJbktTa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ2RHaHBjeTVqYkc5elpTZ3BPMXh1SUNBZ0lIMWxiSE5sZTF4dUlDQWdJQ0FnZEdocGN5NXZjR1Z1S0NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxjM1J5YjNseklIUm9aU0JrY205d1pHOTNiaTVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUwxeHVJQ0JmWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1aaWduTG5wbUxuUnlhV2RuWlhJbktTNW9hV1JsS0NrN1hHNGdJQ0FnZEdocGN5NGtZVzVqYUc5eWN5NXZabVlvSnk1NlppNWtjbTl3Wkc5M2JpY3BPMXh1SUNBZ0lDUW9aRzlqZFcxbGJuUXVZbTlrZVNrdWIyWm1LQ2RqYkdsamF5NTZaaTVrY205d1pHOTNiaWNwTzF4dVhHNGdJSDFjYm4xY2JseHVSSEp2Y0dSdmQyNHVaR1ZtWVhWc2RITWdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiR0Z6Y3lCMGFHRjBJR1JsYzJsbmJtRjBaWE1nWW05MWJtUnBibWNnWTI5dWRHRnBibVZ5SUc5bUlFUnliM0JrYjNkdUlDaGtaV1poZFd4ME9pQjNhVzVrYjNjcFhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2V6OXpkSEpwYm1kOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSUc1MWJHeGNiaUFnSUNvdlhHNGdJSEJoY21WdWRFTnNZWE56T2lCdWRXeHNMRnh1SUNBdktpcGNiaUFnSUNvZ1FXMXZkVzUwSUc5bUlIUnBiV1VnZEc4Z1pHVnNZWGtnYjNCbGJtbHVaeUJoSUhOMVltMWxiblVnYjI0Z2FHOTJaWElnWlhabGJuUXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ01qVXdYRzRnSUNBcUwxeHVJQ0JvYjNabGNrUmxiR0Y1T2lBeU5UQXNYRzRnSUM4cUtseHVJQ0FnS2lCQmJHeHZkeUJ6ZFdKdFpXNTFjeUIwYnlCdmNHVnVJRzl1SUdodmRtVnlJR1YyWlc1MGMxeHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCbVlXeHpaVnh1SUNBZ0tpOWNiaUFnYUc5MlpYSTZJR1poYkhObExGeHVJQ0F2S2lwY2JpQWdJQ29nUkc5dUozUWdZMnh2YzJVZ1pISnZjR1J2ZDI0Z2QyaGxiaUJvYjNabGNtbHVaeUJ2ZG1WeUlHUnliM0JrYjNkdUlIQmhibVZjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ292WEc0Z0lHaHZkbVZ5VUdGdVpUb2dabUZzYzJVc1hHNGdJQzhxS2x4dUlDQWdLaUJPZFcxaVpYSWdiMllnY0dsNFpXeHpJR0psZEhkbFpXNGdkR2hsSUdSeWIzQmtiM2R1SUhCaGJtVWdZVzVrSUhSb1pTQjBjbWxuWjJWeWFXNW5JR1ZzWlcxbGJuUWdiMjRnYjNCbGJpNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FxTDF4dUlDQjJUMlptYzJWME9pQXdMRnh1SUNBdktpcGNiaUFnSUNvZ1RuVnRZbVZ5SUc5bUlIQnBlR1ZzY3lCaVpYUjNaV1Z1SUhSb1pTQmtjbTl3Wkc5M2JpQndZVzVsSUdGdVpDQjBhR1VnZEhKcFoyZGxjbWx1WnlCbGJHVnRaVzUwSUc5dUlHOXdaVzR1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdNRnh1SUNBZ0tpOWNiaUFnYUU5bVpuTmxkRG9nTUN4Y2JpQWdMeW9xWEc0Z0lDQXFJRVJGVUZKRlEwRlVSVVE2SUVOc1lYTnpJR0Z3Y0d4cFpXUWdkRzhnWVdScWRYTjBJRzl3Wlc0Z2NHOXphWFJwYjI0dVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSnlkY2JpQWdJQ292WEc0Z0lIQnZjMmwwYVc5dVEyeGhjM002SUNjbkxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCUWIzTnBkR2x2YmlCdlppQmtjbTl3Wkc5M2JpNGdRMkZ1SUdKbElHeGxablFzSUhKcFoyaDBMQ0JpYjNSMGIyMHNJSFJ2Y0N3Z2IzSWdZWFYwYnk1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0FuWVhWMGJ5ZGNiaUFnSUNvdlhHNGdJSEJ2YzJsMGFXOXVPaUFuWVhWMGJ5Y3NYRzRnSUM4cUtseHVJQ0FnS2lCQmJHbG5ibTFsYm5RZ2IyWWdaSEp2Y0dSdmQyNGdjbVZzWVhScGRtVWdkRzhnWVc1amFHOXlMaUJEWVc0Z1ltVWdiR1ZtZEN3Z2NtbG5hSFFzSUdKdmRIUnZiU3dnZEc5d0xDQmpaVzUwWlhJc0lHOXlJR0YxZEc4dVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSjJGMWRHOG5YRzRnSUNBcUwxeHVJQ0JoYkdsbmJtMWxiblE2SUNkaGRYUnZKeXhjYmlBZ0x5b3FYRzRnSUNBcUlFRnNiRzkzSUc5MlpYSnNZWEFnYjJZZ1kyOXVkR0ZwYm1WeUwzZHBibVJ2ZHk0Z1NXWWdabUZzYzJVc0lHUnliM0JrYjNkdUlIZHBiR3dnWm1seWMzUWdkSEo1SUhSdklIQnZjMmwwYVc5dUlHRnpJR1JsWm1sdVpXUWdZbmtnWkdGMFlTMXdiM05wZEdsdmJpQmhibVFnWkdGMFlTMWhiR2xuYm0xbGJuUXNJR0oxZENCeVpYQnZjMmwwYVc5dUlHbG1JR2wwSUhkdmRXeGtJR05oZFhObElHRnVJRzkyWlhKbWJHOTNMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQm1ZV3h6WlZ4dUlDQWdLaTljYmlBZ1lXeHNiM2RQZG1WeWJHRndPaUJtWVd4elpTeGNiaUFnTHlvcVhHNGdJQ0FxSUVGc2JHOTNJRzkyWlhKc1lYQWdiMllnYjI1c2VTQjBhR1VnWW05MGRHOXRJRzltSUhSb1pTQmpiMjUwWVdsdVpYSXVJRlJvYVhNZ2FYTWdkR2hsSUcxdmMzUWdZMjl0Ylc5dVhHNGdJQ0FxSUdKbGFHRjJhVzl5SUdadmNpQmtjbTl3Wkc5M2JuTXNJR0ZzYkc5M2FXNW5JSFJvWlNCa2NtOXdaRzkzYmlCMGJ5QmxlSFJsYm1RZ2RHaGxJR0p2ZEhSdmJTQnZaaUIwYUdWY2JpQWdJQ29nYzJOeVpXVnVJR0oxZENCdWIzUWdiM1JvWlhKM2FYTmxJR2x1Wm14MVpXNWpaU0J2Y2lCaWNtVmhheUJ2ZFhRZ2IyWWdkR2hsSUdOdmJuUmhhVzVsY2k1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN1ltOXZiR1ZoYm4xY2JpQWdJQ29nUUdSbFptRjFiSFFnZEhKMVpWeHVJQ0FnS2k5Y2JpQWdZV3hzYjNkQ2IzUjBiMjFQZG1WeWJHRndPaUIwY25WbExGeHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzY2dkR2hsSUhCc2RXZHBiaUIwYnlCMGNtRndJR1p2WTNWeklIUnZJSFJvWlNCa2NtOXdaRzkzYmlCd1lXNWxJR2xtSUc5d1pXNWxaQ0IzYVhSb0lHdGxlV0p2WVhKa0lHTnZiVzFoYm1SekxseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCbVlXeHpaVnh1SUNBZ0tpOWNiaUFnZEhKaGNFWnZZM1Z6T2lCbVlXeHpaU3hjYmlBZ0x5b3FYRzRnSUNBcUlFRnNiRzkzSUhSb1pTQndiSFZuYVc0Z2RHOGdjMlYwSUdadlkzVnpJSFJ2SUhSb1pTQm1hWEp6ZENCbWIyTjFjMkZpYkdVZ1pXeGxiV1Z1ZENCM2FYUm9hVzRnZEdobElIQmhibVVzSUhKbFoyRnlaR3hsYzNNZ2IyWWdiV1YwYUc5a0lHOW1JRzl3Wlc1cGJtY3VYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCaGRYUnZSbTlqZFhNNklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNkeklHRWdZMnhwWTJzZ2IyNGdkR2hsSUdKdlpIa2dkRzhnWTJ4dmMyVWdkR2hsSUdSeWIzQmtiM2R1TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnS2k5Y2JpQWdZMnh2YzJWUGJrTnNhV05yT2lCbVlXeHpaVnh1ZlZ4dVhHNWxlSEJ2Y25RZ2UwUnliM0JrYjNkdWZUdGNiaUpkZlE9PVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmRyb3Bkb3duLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkRyb3Bkb3duTWVudSA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmtleWJvYXJkJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubmVzdCcpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMyA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmJveCcpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsNCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmNvcmUnKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogRHJvcGRvd25NZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93bi1tZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxudmFyIERyb3Bkb3duTWVudSA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhEcm9wZG93bk1lbnUsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duTWVudSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd25NZW51KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRHJvcGRvd25NZW51Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRHJvcGRvd25NZW51KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRHJvcGRvd25NZW51LCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIERyb3Bkb3duTWVudS5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBEcm9wZG93bk1lbnVcbiAgICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKHt9LCBEcm9wZG93bk1lbnUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0Ryb3Bkb3duTWVudSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd25NZW51Jywge1xuICAgICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkb3duJyxcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiwgYW5kIGNhbGxzIF9wcmVwYXJlTWVudVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfZm91bmRhdGlvblV0aWwyLk5lc3QuRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcblxuICAgICAgdmFyIHN1YnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcygnZmlyc3Qtc3ViJyk7XG5cbiAgICAgIHRoaXMuJG1lbnVJdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW3JvbGU9XCJtZW51aXRlbVwiXScpO1xuICAgICAgdGhpcy4kdGFicyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICAgIHRoaXMuJHRhYnMuZmluZCgndWwuaXMtZHJvcGRvd24tc3VibWVudScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbENsYXNzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdhdXRvJykge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcykgfHwgKDAsIF9mb3VuZGF0aW9uVXRpbDQucnRsKSgpIHx8IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLnRvcC1iYXItcmlnaHQnKS5pcygnKicpKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmFsaWdubWVudCA9ICdyaWdodCc7XG4gICAgICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtbGVmdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPSAnbGVmdCc7XG4gICAgICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBzdWJzLmFkZENsYXNzKCdvcGVucy1sZWZ0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaXNWZXJ0aWNhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1ZlcnRpY2FsKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHRhYnMuY3NzKCdkaXNwbGF5JykgPT09ICdibG9jaycgfHwgdGhpcy4kZWxlbWVudC5jc3MoJ2ZsZXgtZGlyZWN0aW9uJykgPT09ICdjb2x1bW4nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19pc1J0bCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1J0bCgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhbGlnbi1yaWdodCcpIHx8ICgwLCBfZm91bmRhdGlvblV0aWw0LnJ0bCkoKSAmJiAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWxpZ24tbGVmdCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIGVsZW1lbnRzIHdpdGhpbiB0aGUgbWVudVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBoYXNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB0eXBlb2Ygd2luZG93Lm9udG91Y2hzdGFydCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgcGFyQ2xhc3MgPSAnaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnO1xuXG4gICAgICAvLyB1c2VkIGZvciBvbkNsaWNrIGFuZCBpbiB0aGUga2V5Ym9hcmQgaGFuZGxlcnNcbiAgICAgIHZhciBoYW5kbGVDbGlja0ZuID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2tGbihlKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICcuJyArIHBhckNsYXNzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKSxcbiAgICAgICAgICAgIGhhc0NsaWNrZWQgPSAkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyxcbiAgICAgICAgICAgICRzdWIgPSAkZWxlbS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcblxuICAgICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgICAgaWYgKGhhc0NsaWNrZWQpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgfHwgIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuICYmICFoYXNUb3VjaCB8fCBfdGhpcy5vcHRpb25zLmZvcmNlRm9sbG93ICYmIGhhc1RvdWNoKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgICAkZWxlbS5hZGQoJGVsZW0ucGFyZW50c1VudGlsKF90aGlzLiRlbGVtZW50LCAnLicgKyBwYXJDbGFzcykpLmF0dHIoJ2RhdGEtaXMtY2xpY2snLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tPcGVuIHx8IGhhc1RvdWNoKSB7XG4gICAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignY2xpY2suemYuZHJvcGRvd25tZW51IHRvdWNoc3RhcnQuemYuZHJvcGRvd25tZW51JywgaGFuZGxlQ2xpY2tGbik7XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBMZWFmIGVsZW1lbnQgQ2xpY2tzXG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2tJbnNpZGUpIHtcbiAgICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciAkZWxlbSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSxcbiAgICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICAgIGlmICghaGFzU3ViKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVIb3Zlcikge1xuICAgICAgICB0aGlzLiRtZW51SXRlbXMub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgJGVsZW0gPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksXG4gICAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcblxuICAgICAgICAgIGlmIChoYXNTdWIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCgkZWxlbS5kYXRhKCdfZGVsYXknKSk7XG4gICAgICAgICAgICAkZWxlbS5kYXRhKCdfZGVsYXknLCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciAkZWxlbSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSxcbiAgICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICAgIGlmIChoYXNTdWIgJiYgX3RoaXMub3B0aW9ucy5hdXRvY2xvc2UpIHtcbiAgICAgICAgICAgIGlmICgkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyAmJiBfdGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCgkZWxlbS5kYXRhKCdfZGVsYXknKSk7XG4gICAgICAgICAgICAkZWxlbS5kYXRhKCdfZGVsYXknLCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5jbG9zaW5nVGltZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLiRtZW51SXRlbXMub24oJ2tleWRvd24uemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJ1tyb2xlPVwibWVudWl0ZW1cIl0nKSxcbiAgICAgICAgICAgIGlzVGFiID0gX3RoaXMuJHRhYnMuaW5kZXgoJGVsZW1lbnQpID4gLTEsXG4gICAgICAgICAgICAkZWxlbWVudHMgPSBpc1RhYiA/IF90aGlzLiR0YWJzIDogJGVsZW1lbnQuc2libGluZ3MoJ2xpJykuYWRkKCRlbGVtZW50KSxcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIGlmICgoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaSAtIDEpO1xuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKGkgKyAxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IGZ1bmN0aW9uIG5leHRTaWJsaW5nKCkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuICAgICAgICAgICAgcHJldlNpYmxpbmcgPSBmdW5jdGlvbiBwcmV2U2libGluZygpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIG9wZW5TdWIgPSBmdW5jdGlvbiBvcGVuU3ViKCkge1xuICAgICAgICAgIHZhciAkc3ViID0gJGVsZW1lbnQuY2hpbGRyZW4oJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcbiAgICAgICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzLl9zaG93KCRzdWIpO1xuICAgICAgICAgICAgJGVsZW1lbnQuZmluZCgnbGkgPiBhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb3NlU3ViID0gZnVuY3Rpb24gY2xvc2VTdWIoKSB7XG4gICAgICAgICAgLy9pZiAoJGVsZW1lbnQuaXMoJzpmaXJzdC1jaGlsZCcpKSB7XG4gICAgICAgICAgdmFyIGNsb3NlID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKTtcbiAgICAgICAgICBjbG9zZS5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hpZGUoY2xvc2UpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAvL31cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZ1bmN0aW9ucyA9IHtcbiAgICAgICAgICBvcGVuOiBvcGVuU3ViLFxuICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlKF90aGlzLiRlbGVtZW50KTtcbiAgICAgICAgICAgIF90aGlzLiRtZW51SXRlbXMuZXEoMCkuY2hpbGRyZW4oJ2EnKS5mb2N1cygpOyAvLyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbiBoYW5kbGVkKCkge1xuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGlzVGFiKSB7XG4gICAgICAgICAgaWYgKF90aGlzLl9pc1ZlcnRpY2FsKCkpIHtcbiAgICAgICAgICAgIC8vIHZlcnRpY2FsIG1lbnVcbiAgICAgICAgICAgIGlmIChfdGhpcy5faXNSdGwoKSkge1xuICAgICAgICAgICAgICAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAgIF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgICBwcmV2aW91czogb3BlblN1YlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgICBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgICAgbmV4dDogb3BlblN1YixcbiAgICAgICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhvcml6b250YWwgbWVudVxuICAgICAgICAgICAgaWYgKF90aGlzLl9pc1J0bCgpKSB7XG4gICAgICAgICAgICAgIC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAgICAgX2pxdWVyeTIuZGVmYXVsdC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgICAgbmV4dDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIGRvd246IG9wZW5TdWIsXG4gICAgICAgICAgICAgICAgdXA6IGNsb3NlU3ViXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgICAgIF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICAgIG5leHQ6IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgICBkb3duOiBvcGVuU3ViLFxuICAgICAgICAgICAgICAgIHVwOiBjbG9zZVN1YlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm90IHRhYnMgLT4gb25lIHN1YlxuICAgICAgICAgIGlmIChfdGhpcy5faXNSdGwoKSkge1xuICAgICAgICAgICAgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICAgX2pxdWVyeTIuZGVmYXVsdC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IGNsb3NlU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogb3BlblN1YixcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgX2pxdWVyeTIuZGVmYXVsdC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duTWVudScsIGZ1bmN0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hZGRCb2R5SGFuZGxlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgIHZhciAkYm9keSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICAkYm9keS5vZmYoJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScpLm9uKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgJGxpbmsgPSBfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KTtcbiAgICAgICAgaWYgKCRsaW5rLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLl9oaWRlKCk7XG4gICAgICAgICRib2R5Lm9mZignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51Jyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIGRyb3Bkb3duIHBhbmUsIGFuZCBjaGVja3MgZm9yIGNvbGxpc2lvbnMgZmlyc3QuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRzdWIgLSB1bCBlbGVtZW50IHRoYXQgaXMgYSBzdWJtZW51IHRvIHNob3dcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBmaXJlcyBEcm9wZG93bk1lbnUjc2hvd1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zaG93KCRzdWIpIHtcbiAgICAgIHZhciBpZHggPSB0aGlzLiR0YWJzLmluZGV4KHRoaXMuJHRhYnMuZmlsdGVyKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgICByZXR1cm4gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGVsKS5maW5kKCRzdWIpLmxlbmd0aCA+IDA7XG4gICAgICB9KSk7XG4gICAgICB2YXIgJHNpYnMgPSAkc3ViLnBhcmVudCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5zaWJsaW5ncygnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICAgIHRoaXMuX2hpZGUoJHNpYnMsIGlkeCk7XG4gICAgICAkc3ViLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5hZGRDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJykucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgIHZhciBjbGVhciA9IF9mb3VuZGF0aW9uVXRpbDMuQm94LkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgICBpZiAoIWNsZWFyKSB7XG4gICAgICAgIHZhciBvbGRDbGFzcyA9IHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdsZWZ0JyA/ICctcmlnaHQnIDogJy1sZWZ0JyxcbiAgICAgICAgICAgICRwYXJlbnRMaSA9ICRzdWIucGFyZW50KCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKCdvcGVucycgKyBvbGRDbGFzcykuYWRkQ2xhc3MoJ29wZW5zLScgKyB0aGlzLm9wdGlvbnMuYWxpZ25tZW50KTtcbiAgICAgICAgY2xlYXIgPSBfZm91bmRhdGlvblV0aWwzLkJveC5JbU5vdFRvdWNoaW5nWW91KCRzdWIsIG51bGwsIHRydWUpO1xuICAgICAgICBpZiAoIWNsZWFyKSB7XG4gICAgICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKCdvcGVucy0nICsgdGhpcy5vcHRpb25zLmFsaWdubWVudCkuYWRkQ2xhc3MoJ29wZW5zLWlubmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgICRzdWIuY3NzKCd2aXNpYmlsaXR5JywgJycpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgbmV3IGRyb3Bkb3duIHBhbmUgaXMgdmlzaWJsZS5cbiAgICAgICAqIEBldmVudCBEcm9wZG93bk1lbnUjc2hvd1xuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYuZHJvcGRvd25tZW51JywgWyRzdWJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyBhIHNpbmdsZSwgY3VycmVudGx5IG9wZW4gZHJvcGRvd24gcGFuZSwgaWYgcGFzc2VkIGEgcGFyYW1ldGVyLCBvdGhlcndpc2UsIGhpZGVzIGV2ZXJ5dGhpbmcuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBoaWRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIGluZGV4IG9mIHRoZSAkdGFicyBjb2xsZWN0aW9uIHRvIGhpZGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlKCRlbGVtLCBpZHgpIHtcbiAgICAgIHZhciAkdG9DbG9zZTtcbiAgICAgIGlmICgkZWxlbSAmJiAkZWxlbS5sZW5ndGgpIHtcbiAgICAgICAgJHRvQ2xvc2UgPSAkZWxlbTtcbiAgICAgIH0gZWxzZSBpZiAoaWR4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgJHRvQ2xvc2UgPSB0aGlzLiR0YWJzLm5vdChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgICByZXR1cm4gaSA9PT0gaWR4O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR0b0Nsb3NlID0gdGhpcy4kZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHZhciBzb21ldGhpbmdUb0Nsb3NlID0gJHRvQ2xvc2UuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpIHx8ICR0b0Nsb3NlLmZpbmQoJy5pcy1hY3RpdmUnKS5sZW5ndGggPiAwO1xuXG4gICAgICBpZiAoc29tZXRoaW5nVG9DbG9zZSkge1xuICAgICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1hY3RpdmUnKS5hZGQoJHRvQ2xvc2UpLmF0dHIoe1xuICAgICAgICAgICdkYXRhLWlzLWNsaWNrJzogZmFsc2VcbiAgICAgICAgfSkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAgICR0b0Nsb3NlLmZpbmQoJ3VsLmpzLWRyb3Bkb3duLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKTtcblxuICAgICAgICBpZiAodGhpcy5jaGFuZ2VkIHx8ICR0b0Nsb3NlLmZpbmQoJ29wZW5zLWlubmVyJykubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZCgkdG9DbG9zZSkucmVtb3ZlQ2xhc3MoJ29wZW5zLWlubmVyIG9wZW5zLScgKyB0aGlzLm9wdGlvbnMuYWxpZ25tZW50KS5hZGRDbGFzcygnb3BlbnMtJyArIG9sZENsYXNzKTtcbiAgICAgICAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgb3BlbiBtZW51cyBhcmUgY2xvc2VkLlxuICAgICAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I2hpZGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaGlkZS56Zi5kcm9wZG93bm1lbnUnLCBbJHRvQ2xvc2VdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9mZignLnpmLmRyb3Bkb3dubWVudScpLnJlbW92ZUF0dHIoJ2RhdGEtaXMtY2xpY2snKS5yZW1vdmVDbGFzcygnaXMtcmlnaHQtYXJyb3cgaXMtbGVmdC1hcnJvdyBpcy1kb3duLWFycm93IG9wZW5zLXJpZ2h0IG9wZW5zLWxlZnQgb3BlbnMtaW5uZXInKTtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudC5ib2R5KS5vZmYoJy56Zi5kcm9wZG93bm1lbnUnKTtcbiAgICAgIF9mb3VuZGF0aW9uVXRpbDIuTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcm9wZG93bicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcm9wZG93bk1lbnU7XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5Ecm9wZG93bk1lbnUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBEaXNhbGxvd3MgaG92ZXIgZXZlbnRzIGZyb20gb3BlbmluZyBzdWJtZW51c1xuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBhdXRvbWF0aWNhbGx5IGNsb3NlIG9uIGEgbW91c2VsZWF2ZSBldmVudCwgaWYgbm90IGNsaWNrZWQgb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXV0b2Nsb3NlOiB0cnVlLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgb3BlbmluZyBhIHN1Ym1lbnUgb24gaG92ZXIgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTBcbiAgICovXG4gIGhvdmVyRGVsYXk6IDUwLFxuICAvKipcbiAgICogQWxsb3cgYSBzdWJtZW51IHRvIG9wZW4vcmVtYWluIG9wZW4gb24gcGFyZW50IGNsaWNrIGV2ZW50LiBBbGxvd3MgY3Vyc29yIHRvIG1vdmUgYXdheSBmcm9tIG1lbnUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbGlja09wZW46IGZhbHNlLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgY2xvc2luZyBhIHN1Ym1lbnUgb24gYSBtb3VzZWxlYXZlIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwMFxuICAgKi9cblxuICBjbG9zaW5nVGltZTogNTAwLFxuICAvKipcbiAgICogUG9zaXRpb24gb2YgdGhlIG1lbnUgcmVsYXRpdmUgdG8gd2hhdCBkaXJlY3Rpb24gdGhlIHN1Ym1lbnVzIHNob3VsZCBvcGVuLiBIYW5kbGVkIGJ5IEpTLiBDYW4gYmUgYCdhdXRvJ2AsIGAnbGVmdCdgIG9yIGAncmlnaHQnYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIGFsaWdubWVudDogJ2F1dG8nLFxuICAvKipcbiAgICogQWxsb3cgY2xpY2tzIG9uIHRoZSBib2R5IHRvIGNsb3NlIGFueSBvcGVuIHN1Ym1lbnVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gbGVhZiBhbmNob3IgbGlua3MgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25DbGlja0luc2lkZTogdHJ1ZSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdmVydGljYWwgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgdmVydGljYWxgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndmVydGljYWwnXG4gICAqL1xuICB2ZXJ0aWNhbENsYXNzOiAndmVydGljYWwnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byByaWdodC1zaWRlIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYGFsaWduLXJpZ2h0YC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2FsaWduLXJpZ2h0J1xuICAgKi9cbiAgcmlnaHRDbGFzczogJ2FsaWduLXJpZ2h0JyxcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZm9yY2Ugb3ZlcmlkZSB0aGUgY2xpY2tpbmcgb2YgbGlua3MgdG8gcGVyZm9ybSBkZWZhdWx0IGFjdGlvbiwgb24gc2Vjb25kIHRvdWNoIGV2ZW50IGZvciBtb2JpbGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGZvcmNlRm9sbG93OiB0cnVlXG59O1xuXG5leHBvcnRzLkRyb3Bkb3duTWVudSA9IERyb3Bkb3duTWVudTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVaSEp2Y0dSdmQyNU5aVzUxTG1weklsMHNJbTVoYldWeklqcGJJa1J5YjNCa2IzZHVUV1Z1ZFNJc0ltVnNaVzFsYm5RaUxDSnZjSFJwYjI1eklpd2lKR1ZzWlcxbGJuUWlMQ0lrSWl3aVpYaDBaVzVrSWl3aVpHVm1ZWFZzZEhNaUxDSmtZWFJoSWl3aVkyeGhjM05PWVcxbElpd2lYMmx1YVhRaUxDSkxaWGxpYjJGeVpDSXNJbkpsWjJsemRHVnlJaXdpVG1WemRDSXNJa1psWVhSb1pYSWlMQ0p6ZFdKeklpd2labWx1WkNJc0ltTm9hV3hrY21WdUlpd2lZV1JrUTJ4aGMzTWlMQ0lrYldWdWRVbDBaVzF6SWl3aUpIUmhZbk1pTENKMlpYSjBhV05oYkVOc1lYTnpJaXdpWVd4cFoyNXRaVzUwSWl3aWFHRnpRMnhoYzNNaUxDSnlhV2RvZEVOc1lYTnpJaXdpY0dGeVpXNTBjeUlzSW1seklpd2lZMmhoYm1kbFpDSXNJbDlsZG1WdWRITWlMQ0pqYzNNaUxDSmZkR2hwY3lJc0ltaGhjMVJ2ZFdOb0lpd2lkMmx1Wkc5M0lpd2liMjUwYjNWamFITjBZWEowSWl3aWNHRnlRMnhoYzNNaUxDSm9ZVzVrYkdWRGJHbGphMFp1SWl3aVpTSXNJaVJsYkdWdElpd2lkR0Z5WjJWMElpd2ljR0Z5Wlc1MGMxVnVkR2xzSWl3aWFHRnpVM1ZpSWl3aWFHRnpRMnhwWTJ0bFpDSXNJbUYwZEhJaUxDSWtjM1ZpSWl3aVkyeHZjMlZQYmtOc2FXTnJJaXdpWTJ4cFkydFBjR1Z1SWl3aVptOXlZMlZHYjJ4c2IzY2lMQ0p6ZEc5d1NXMXRaV1JwWVhSbFVISnZjR0ZuWVhScGIyNGlMQ0p3Y21WMlpXNTBSR1ZtWVhWc2RDSXNJbDlvYVdSbElpd2lYM05vYjNjaUxDSmhaR1FpTENKdmJpSXNJbU5zYjNObFQyNURiR2xqYTBsdWMybGtaU0lzSW1ScGMyRmliR1ZJYjNabGNpSXNJbU5zWldGeVZHbHRaVzkxZENJc0luTmxkRlJwYldWdmRYUWlMQ0pvYjNabGNrUmxiR0Y1SWl3aVlYVjBiMk5zYjNObElpd2lZMnh2YzJsdVoxUnBiV1VpTENKcGMxUmhZaUlzSW1sdVpHVjRJaXdpSkdWc1pXMWxiblJ6SWl3aWMybGliR2x1WjNNaUxDSWtjSEpsZGtWc1pXMWxiblFpTENJa2JtVjRkRVZzWlcxbGJuUWlMQ0psWVdOb0lpd2lhU0lzSW1WeElpd2libVY0ZEZOcFlteHBibWNpTENKbWIyTjFjeUlzSW5CeVpYWlRhV0pzYVc1bklpd2liM0JsYmxOMVlpSXNJbXhsYm1kMGFDSXNJbU5zYjNObFUzVmlJaXdpWTJ4dmMyVWlMQ0p3WVhKbGJuUWlMQ0ptZFc1amRHbHZibk1pTENKdmNHVnVJaXdpYUdGdVpHeGxaQ0lzSWw5cGMxWmxjblJwWTJGc0lpd2lYMmx6VW5Sc0lpd2laRzkzYmlJc0luVndJaXdpYm1WNGRDSXNJbkJ5WlhacGIzVnpJaXdpYUdGdVpHeGxTMlY1SWl3aUpHSnZaSGtpTENKa2IyTjFiV1Z1ZENJc0ltSnZaSGtpTENKdlptWWlMQ0lrYkdsdWF5SXNJbWxrZUNJc0ltWnBiSFJsY2lJc0ltVnNJaXdpSkhOcFluTWlMQ0pqYkdWaGNpSXNJa0p2ZUNJc0lrbHRUbTkwVkc5MVkyaHBibWRaYjNVaUxDSnZiR1JEYkdGemN5SXNJaVJ3WVhKbGJuUk1hU0lzSW5KbGJXOTJaVU5zWVhOeklpd2lYMkZrWkVKdlpIbElZVzVrYkdWeUlpd2lkSEpwWjJkbGNpSXNJaVIwYjBOc2IzTmxJaXdpZFc1a1pXWnBibVZrSWl3aWJtOTBJaXdpYzI5dFpYUm9hVzVuVkc5RGJHOXpaU0lzSW5KbGJXOTJaVUYwZEhJaUxDSkNkWEp1SWl3aVVHeDFaMmx1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenM3TzBGQlJVRTdPenM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN096czdPenM3T3p0QlFVZEJPenM3T3pzN096dEpRVkZOUVN4Wk96czdPenM3T3pzN096czdRVUZEU2pzN096czdPenM3TWtKQlVVOURMRThzUlVGQlUwTXNUeXhGUVVGVE8wRkJRM1pDTEZkQlFVdERMRkZCUVV3c1IwRkJaMEpHTEU5QlFXaENPMEZCUTBFc1YwRkJTME1zVDBGQlRDeEhRVUZsUlN4cFFrRkJSVU1zVFVGQlJpeERRVUZUTEVWQlFWUXNSVUZCWVV3c1lVRkJZVTBzVVVGQk1VSXNSVUZCYjBNc1MwRkJTMGdzVVVGQlRDeERRVUZqU1N4SlFVRmtMRVZCUVhCRExFVkJRVEJFVEN4UFFVRXhSQ3hEUVVGbU8wRkJRMEVzVjBGQlMwMHNVMEZCVEN4SFFVRnBRaXhqUVVGcVFpeERRVWgxUWl4RFFVZFZPenRCUVVWcVF5eFhRVUZMUXl4TFFVRk1PenRCUVVWQlF5d3JRa0ZCVTBNc1VVRkJWQ3hEUVVGclFpeGpRVUZzUWl4RlFVRnJRenRCUVVOb1F5eHBRa0ZCVXl4TlFVUjFRanRCUVVWb1F5eHBRa0ZCVXl4TlFVWjFRanRCUVVkb1F5eDFRa0ZCWlN4TlFVaHBRanRCUVVsb1F5eHZRa0ZCV1N4SlFVcHZRanRCUVV0b1F5eHpRa0ZCWXl4TlFVeHJRanRCUVUxb1F5eHpRa0ZCWXl4VlFVNXJRanRCUVU5b1F5eHJRa0ZCVlR0QlFWQnpRaXhQUVVGc1F6dEJRVk5FT3p0QlFVVkVPenM3T3pzN096czBRa0ZMVVR0QlFVTk9ReXcwUWtGQlMwTXNUMEZCVEN4RFFVRmhMRXRCUVV0V0xGRkJRV3hDTEVWQlFUUkNMRlZCUVRWQ096dEJRVVZCTEZWQlFVbFhMRTlCUVU4c1MwRkJTMWdzVVVGQlRDeERRVUZqV1N4SlFVRmtMRU5CUVcxQ0xDdENRVUZ1UWl4RFFVRllPMEZCUTBFc1YwRkJTMW9zVVVGQlRDeERRVUZqWVN4UlFVRmtMRU5CUVhWQ0xEWkNRVUYyUWl4RlFVRnpSRUVzVVVGQmRFUXNRMEZCSzBRc2MwSkJRUzlFTEVWQlFYVkdReXhSUVVGMlJpeERRVUZuUnl4WFFVRm9SenM3UVVGRlFTeFhRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFdEJRVXRtTEZGQlFVd3NRMEZCWTFrc1NVRkJaQ3hEUVVGdFFpeHRRa0ZCYmtJc1EwRkJiRUk3UVVGRFFTeFhRVUZMU1N4TFFVRk1MRWRCUVdFc1MwRkJTMmhDTEZGQlFVd3NRMEZCWTJFc1VVRkJaQ3hEUVVGMVFpeHRRa0ZCZGtJc1EwRkJZanRCUVVOQkxGZEJRVXRITEV0QlFVd3NRMEZCVjBvc1NVRkJXQ3hEUVVGblFpeDNRa0ZCYUVJc1JVRkJNRU5GTEZGQlFURkRMRU5CUVcxRUxFdEJRVXRtTEU5QlFVd3NRMEZCWVd0Q0xHRkJRV2hGT3p0QlFVVkJMRlZCUVVrc1MwRkJTMnhDTEU5QlFVd3NRMEZCWVcxQ0xGTkJRV0lzUzBGQk1rSXNUVUZCTDBJc1JVRkJkVU03UVVGRGJrTXNXVUZCU1N4TFFVRkxiRUlzVVVGQlRDeERRVUZqYlVJc1VVRkJaQ3hEUVVGMVFpeExRVUZMY0VJc1QwRkJUQ3hEUVVGaGNVSXNWVUZCY0VNc1MwRkJiVVFzTWtKQlFXNUVMRWxCUVRSRUxFdEJRVXR3UWl4UlFVRk1MRU5CUVdOeFFpeFBRVUZrTEVOQlFYTkNMR2RDUVVGMFFpeEZRVUYzUTBNc1JVRkJlRU1zUTBGQk1rTXNSMEZCTTBNc1EwRkJhRVVzUlVGQmFVZzdRVUZETjBjc1pVRkJTM1pDTEU5QlFVd3NRMEZCWVcxQ0xGTkJRV0lzUjBGQmVVSXNUMEZCZWtJN1FVRkRRVkFzWlVGQlMwY3NVVUZCVEN4RFFVRmpMRmxCUVdRN1FVRkRTQ3hUUVVoRUxFMUJSMDg3UVVGRFNDeGxRVUZMWml4UFFVRk1MRU5CUVdGdFFpeFRRVUZpTEVkQlFYbENMRTFCUVhwQ08wRkJRMEZRTEdWQlFVdEhMRkZCUVV3c1EwRkJZeXhoUVVGa08wRkJRMGc3UVVGRFNpeFBRVkpFTEUxQlVVODdRVUZEVEN4WlFVRkpMRXRCUVV0bUxFOUJRVXdzUTBGQllXMUNMRk5CUVdJc1MwRkJNa0lzVDBGQkwwSXNSVUZCZDBNN1FVRkRjRU5RTEdWQlFVdEhMRkZCUVV3c1EwRkJZeXhaUVVGa08wRkJRMGdzVTBGR1JDeE5RVVZQTzBGQlEwaElMR1ZCUVV0SExGRkJRVXdzUTBGQll5eGhRVUZrTzBGQlEwZzdRVUZEUmp0QlFVTkVMRmRCUVV0VExFOUJRVXdzUjBGQlpTeExRVUZtTzBGQlEwRXNWMEZCUzBNc1QwRkJURHRCUVVORU96czdhME5CUldFN1FVRkRXaXhoUVVGUExFdEJRVXRTTEV0QlFVd3NRMEZCVjFNc1IwRkJXQ3hEUVVGbExGTkJRV1lzVFVGQk9FSXNUMEZCT1VJc1NVRkJlVU1zUzBGQlMzcENMRkZCUVV3c1EwRkJZM2xDTEVkQlFXUXNRMEZCYTBJc1owSkJRV3hDTEUxQlFYZERMRkZCUVhoR08wRkJRMFE3T3pzMlFrRkZVVHRCUVVOUUxHRkJRVThzUzBGQlMzcENMRkZCUVV3c1EwRkJZMjFDTEZGQlFXUXNRMEZCZFVJc1lVRkJka0lzUzBGQk1FTXNLMEpCUVZNc1EwRkJReXhMUVVGTGJrSXNVVUZCVEN4RFFVRmpiVUlzVVVGQlpDeERRVUYxUWl4WlFVRjJRaXhEUVVFelJEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czRRa0ZMVlR0QlFVTlNMRlZCUVVsUExGRkJRVkVzU1VGQldqdEJRVUZCTEZWQlEwbERMRmRCUVZjc2EwSkJRV3RDUXl4TlFVRnNRaXhKUVVFMlFpeFBRVUZQUVN4UFFVRlBReXhaUVVGa0xFdEJRU3RDTEZkQlJETkZPMEZCUVVFc1ZVRkZTVU1zVjBGQlZ5dzBRa0ZHWmpzN1FVRkpRVHRCUVVOQkxGVkJRVWxETEdkQ1FVRm5RaXhUUVVGb1FrRXNZVUZCWjBJc1EwRkJVME1zUTBGQlZDeEZRVUZaTzBGQlF6bENMRmxCUVVsRExGRkJRVkVzYzBKQlFVVkVMRVZCUVVWRkxFMUJRVW9zUlVGQldVTXNXVUZCV2l4RFFVRjVRaXhKUVVGNlFpeFJRVUZ0UTB3c1VVRkJia01zUTBGQldqdEJRVUZCTEZsQlEwbE5MRk5CUVZOSUxFMUJRVTFrTEZGQlFVNHNRMEZCWlZjc1VVRkJaaXhEUVVSaU8wRkJRVUVzV1VGRlNVOHNZVUZCWVVvc1RVRkJUVXNzU1VGQlRpeERRVUZYTEdWQlFWZ3NUVUZCWjBNc1RVRkdha1E3UVVGQlFTeFpRVWRKUXl4UFFVRlBUaXhOUVVGTmNFSXNVVUZCVGl4RFFVRmxMSE5DUVVGbUxFTkJTRmc3TzBGQlMwRXNXVUZCU1hWQ0xFMUJRVW9zUlVGQldUdEJRVU5XTEdOQlFVbERMRlZCUVVvc1JVRkJaMEk3UVVGRFpDeG5Ra0ZCU1N4RFFVRkRXQ3hOUVVGTk0wSXNUMEZCVGl4RFFVRmplVU1zV1VGQlppeEpRVUZuUXl4RFFVRkRaQ3hOUVVGTk0wSXNUMEZCVGl4RFFVRmpNRU1zVTBGQlppeEpRVUUwUWl4RFFVRkRaQ3hSUVVFM1JDeEpRVUV5UlVRc1RVRkJUVE5DTEU5QlFVNHNRMEZCWXpKRExGZEJRV1FzU1VGQk5rSm1MRkZCUVRWSExFVkJRWFZJTzBGQlFVVTdRVUZCVXl4aFFVRnNTU3hOUVVOTE8wRkJRMGhMTEdkQ1FVRkZWeXgzUWtGQlJqdEJRVU5CV0N4blFrRkJSVmtzWTBGQlJqdEJRVU5CYkVJc2IwSkJRVTF0UWl4TFFVRk9MRU5CUVZsYUxFdEJRVm83UVVGRFJEdEJRVU5HTEZkQlVFUXNUVUZQVHp0QlFVTk1SQ3hqUVVGRldTeGpRVUZHTzBGQlEwRmFMR05CUVVWWExIZENRVUZHTzBGQlEwRnFRaXhyUWtGQlRXOUNMRXRCUVU0c1EwRkJXVkFzU1VGQldqdEJRVU5CVGl4clFrRkJUV01zUjBGQlRpeERRVUZWWkN4TlFVRk5SU3haUVVGT0xFTkJRVzFDVkN4TlFVRk5NVUlzVVVGQmVrSXNVVUZCZFVNNFFpeFJRVUYyUXl4RFFVRldMRVZCUVRoRVVTeEpRVUU1UkN4RFFVRnRSU3hsUVVGdVJTeEZRVUZ2Uml4SlFVRndSanRCUVVORU8wRkJRMFk3UVVGRFJpeFBRWEpDUkRzN1FVRjFRa0VzVlVGQlNTeExRVUZMZGtNc1QwRkJUQ3hEUVVGaE1FTXNVMEZCWWl4SlFVRXdRbVFzVVVGQk9VSXNSVUZCZDBNN1FVRkRkRU1zWVVGQlMxb3NWVUZCVEN4RFFVRm5RbWxETEVWQlFXaENMRU5CUVcxQ0xHdEVRVUZ1UWl4RlFVRjFSV3BDTEdGQlFYWkZPMEZCUTBRN08wRkJSVVE3UVVGRFFTeFZRVUZIVEN4TlFVRk5NMElzVDBGQlRpeERRVUZqYTBRc2EwSkJRV3BDTEVWQlFXOURPMEZCUTJ4RExHRkJRVXRzUXl4VlFVRk1MRU5CUVdkQ2FVTXNSVUZCYUVJc1EwRkJiVUlzZFVKQlFXNUNMRVZCUVRSRExGVkJRVk5vUWl4RFFVRlVMRVZCUVZrN1FVRkRkRVFzWTBGQlNVTXNVVUZCVVN4elFrRkJSU3hKUVVGR0xFTkJRVm83UVVGQlFTeGpRVU5KUnl4VFFVRlRTQ3hOUVVGTlpDeFJRVUZPTEVOQlFXVlhMRkZCUVdZc1EwRkVZanRCUVVWQkxHTkJRVWNzUTBGQlEwMHNUVUZCU2l4RlFVRlhPMEZCUTFSV0xHdENRVUZOYlVJc1MwRkJUanRCUVVORU8wRkJRMFlzVTBGT1JEdEJRVTlFT3p0QlFVVkVMRlZCUVVrc1EwRkJReXhMUVVGTE9VTXNUMEZCVEN4RFFVRmhiVVFzV1VGQmJFSXNSVUZCWjBNN1FVRkRPVUlzWVVGQlMyNURMRlZCUVV3c1EwRkJaMEpwUXl4RlFVRm9RaXhEUVVGdFFpdzBRa0ZCYmtJc1JVRkJhVVFzVlVGQlUyaENMRU5CUVZRc1JVRkJXVHRCUVVNelJDeGpRVUZKUXl4UlFVRlJMSE5DUVVGRkxFbEJRVVlzUTBGQldqdEJRVUZCTEdOQlEwbEhMRk5CUVZOSUxFMUJRVTFrTEZGQlFVNHNRMEZCWlZjc1VVRkJaaXhEUVVSaU96dEJRVWRCTEdOQlFVbE5MRTFCUVVvc1JVRkJXVHRCUVVOV1pTeDVRa0ZCWVd4Q0xFMUJRVTAzUWl4SlFVRk9MRU5CUVZjc1VVRkJXQ3hEUVVGaU8wRkJRMEUyUWl4clFrRkJUVGRDTEVsQlFVNHNRMEZCVnl4UlFVRllMRVZCUVhGQ1owUXNWMEZCVnl4WlFVRlhPMEZCUTNwRE1VSXNiMEpCUVUxdlFpeExRVUZPTEVOQlFWbGlMRTFCUVUxd1FpeFJRVUZPTEVOQlFXVXNjMEpCUVdZc1EwRkJXanRCUVVORUxHRkJSbTlDTEVWQlJXeENZU3hOUVVGTk0wSXNUMEZCVGl4RFFVRmpjMFFzVlVGR1NTeERRVUZ5UWp0QlFVZEVPMEZCUTBZc1UwRldSQ3hGUVZWSFRDeEZRVlpJTEVOQlZVMHNORUpCVms0c1JVRlZiME1zVlVGQlUyaENMRU5CUVZRc1JVRkJXVHRCUVVNNVF5eGpRVUZKUXl4UlFVRlJMSE5DUVVGRkxFbEJRVVlzUTBGQldqdEJRVUZCTEdOQlEwbEhMRk5CUVZOSUxFMUJRVTFrTEZGQlFVNHNRMEZCWlZjc1VVRkJaaXhEUVVSaU8wRkJSVUVzWTBGQlNVMHNWVUZCVlZZc1RVRkJUVE5DTEU5QlFVNHNRMEZCWTNWRUxGTkJRVFZDTEVWQlFYVkRPMEZCUTNKRExHZENRVUZKY2tJc1RVRkJUVXNzU1VGQlRpeERRVUZYTEdWQlFWZ3NUVUZCWjBNc1RVRkJhRU1zU1VGQk1FTmFMRTFCUVUwelFpeFBRVUZPTEVOQlFXTXdReXhUUVVFMVJDeEZRVUYxUlR0QlFVRkZMSEZDUVVGUExFdEJRVkE3UVVGQlpUczdRVUZGZUVaVkxIbENRVUZoYkVJc1RVRkJUVGRDTEVsQlFVNHNRMEZCVnl4UlFVRllMRU5CUVdJN1FVRkRRVFpDTEd0Q1FVRk5OMElzU1VGQlRpeERRVUZYTEZGQlFWZ3NSVUZCY1VKblJDeFhRVUZYTEZsQlFWYzdRVUZEZWtNeFFpeHZRa0ZCVFcxQ0xFdEJRVTRzUTBGQldWb3NTMEZCV2p0QlFVTkVMR0ZCUm05Q0xFVkJSV3hDVUN4TlFVRk5NMElzVDBGQlRpeERRVUZqZDBRc1YwRkdTU3hEUVVGeVFqdEJRVWRFTzBGQlEwWXNVMEZ5UWtRN1FVRnpRa1E3UVVGRFJDeFhRVUZMZUVNc1ZVRkJUQ3hEUVVGblFtbERMRVZCUVdoQ0xFTkJRVzFDTEhsQ1FVRnVRaXhGUVVFNFF5eFZRVUZUYUVJc1EwRkJWQ3hGUVVGWk8wRkJRM2hFTEZsQlFVbG9ReXhYUVVGWExITkNRVUZGWjBNc1JVRkJSVVVzVFVGQlNpeEZRVUZaUXl4WlFVRmFMRU5CUVhsQ0xFbEJRWHBDTEVWQlFTdENMRzFDUVVFdlFpeERRVUZtTzBGQlFVRXNXVUZEU1hGQ0xGRkJRVkU1UWl4TlFVRk5WaXhMUVVGT0xFTkJRVmw1UXl4TFFVRmFMRU5CUVd0Q2VrUXNVVUZCYkVJc1NVRkJPRUlzUTBGQlF5eERRVVF6UXp0QlFVRkJMRmxCUlVrd1JDeFpRVUZaUml4UlFVRlJPVUlzVFVGQlRWWXNTMEZCWkN4SFFVRnpRbWhDTEZOQlFWTXlSQ3hSUVVGVUxFTkJRV3RDTEVsQlFXeENMRVZCUVhkQ1dpeEhRVUY0UWl4RFFVRTBRaTlETEZGQlFUVkNMRU5CUm5SRE8wRkJRVUVzV1VGSFNUUkVMRmxCU0VvN1FVRkJRU3haUVVsSlF5eFpRVXBLT3p0QlFVMUJTQ3hyUWtGQlZVa3NTVUZCVml4RFFVRmxMRlZCUVZORExFTkJRVlFzUlVGQldUdEJRVU42UWl4alFVRkpMSE5DUVVGRkxFbEJRVVlzUlVGQlVYcERMRVZCUVZJc1EwRkJWM1JDTEZGQlFWZ3NRMEZCU2l4RlFVRXdRanRCUVVONFFqUkVMREpDUVVGbFJpeFZRVUZWVFN4RlFVRldMRU5CUVdGRUxFbEJRVVVzUTBGQlppeERRVUZtTzBGQlEwRkdMREpDUVVGbFNDeFZRVUZWVFN4RlFVRldMRU5CUVdGRUxFbEJRVVVzUTBGQlppeERRVUZtTzBGQlEwRTdRVUZEUkR0QlFVTkdMRk5CVGtRN08wRkJVVUVzV1VGQlNVVXNZMEZCWXl4VFFVRmtRU3hYUVVGakxFZEJRVmM3UVVGRE0wSktMSFZDUVVGaGFFUXNVVUZCWWl4RFFVRnpRaXhUUVVGMFFpeEZRVUZwUTNGRUxFdEJRV3BETzBGQlEwRnNReXhaUVVGRldTeGpRVUZHTzBGQlEwUXNVMEZJUkR0QlFVRkJMRmxCUjBkMVFpeGpRVUZqTEZOQlFXUkJMRmRCUVdNc1IwRkJWenRCUVVNeFFsQXNkVUpCUVdFdlF5eFJRVUZpTEVOQlFYTkNMRk5CUVhSQ0xFVkJRV2xEY1VRc1MwRkJha003UVVGRFFXeERMRmxCUVVWWkxHTkJRVVk3UVVGRFJDeFRRVTVFTzBGQlFVRXNXVUZOUjNkQ0xGVkJRVlVzVTBGQlZrRXNUMEZCVlN4SFFVRlhPMEZCUTNSQ0xHTkJRVWszUWl4UFFVRlBka01zVTBGQlUyRXNVVUZCVkN4RFFVRnJRaXgzUWtGQmJFSXNRMEZCV0R0QlFVTkJMR05CUVVrd1FpeExRVUZMT0VJc1RVRkJWQ3hGUVVGcFFqdEJRVU5tTTBNc2EwSkJRVTF2UWl4TFFVRk9MRU5CUVZsUUxFbEJRVm83UVVGRFFYWkRMSEZDUVVGVFdTeEpRVUZVTEVOQlFXTXNZMEZCWkN4RlFVRTRRbk5FTEV0QlFUbENPMEZCUTBGc1F5eGpRVUZGV1N4alFVRkdPMEZCUTBRc1YwRktSQ3hOUVVsUE8wRkJRVVU3UVVGQlV6dEJRVU51UWl4VFFXSkVPMEZCUVVFc1dVRmhSekJDTEZkQlFWY3NVMEZCV0VFc1VVRkJWeXhIUVVGWE8wRkJRM1pDTzBGQlEwRXNZMEZCU1VNc1VVRkJVWFpGTEZOQlFWTjNSU3hOUVVGVUxFTkJRV2RDTEVsQlFXaENMRVZCUVhOQ1FTeE5RVUYwUWl4RFFVRTJRaXhKUVVFM1FpeERRVUZhTzBGQlEwRkVMR2RDUVVGTk1VUXNVVUZCVGl4RFFVRmxMRk5CUVdZc1JVRkJNRUp4UkN4TFFVRXhRanRCUVVOQmVFTXNaMEpCUVUxdFFpeExRVUZPTEVOQlFWa3dRaXhMUVVGYU8wRkJRMEYyUXl4WlFVRkZXU3hqUVVGR08wRkJRMEU3UVVGRFJDeFRRWEJDUkR0QlFYRkNRU3haUVVGSk5rSXNXVUZCV1R0QlFVTmtReXhuUWtGQlRVNHNUMEZFVVR0QlFVVmtSeXhwUWtGQlR5eHBRa0ZCVnp0QlFVTm9RamRETEd0Q1FVRk5iVUlzUzBGQlRpeERRVUZaYmtJc1RVRkJUVEZDTEZGQlFXeENPMEZCUTBFd1FpeHJRa0ZCVFZnc1ZVRkJUaXhEUVVGcFFtbEVMRVZCUVdwQ0xFTkJRVzlDTEVOQlFYQkNMRVZCUVhWQ2JrUXNVVUZCZGtJc1EwRkJaME1zUjBGQmFFTXNSVUZCY1VOeFJDeExRVUZ5UXl4SFFVWm5RaXhEUVVVNFFqdEJRVU01UTJ4RExHTkJRVVZaTEdOQlFVWTdRVUZEUkN4WFFVNWhPMEZCVDJRclFpeHRRa0ZCVXl4dFFrRkJWenRCUVVOc1FqTkRMR05CUVVWWExIZENRVUZHTzBGQlEwUTdRVUZVWVN4VFFVRm9RanM3UVVGWlFTeFpRVUZKWVN4TFFVRktMRVZCUVZjN1FVRkRWQ3hqUVVGSk9VSXNUVUZCVFd0RUxGZEJRVTRzUlVGQlNpeEZRVUY1UWp0QlFVRkZPMEZCUTNwQ0xHZENRVUZKYkVRc1RVRkJUVzFFTEUxQlFVNHNSVUZCU2l4RlFVRnZRanRCUVVGRk8wRkJRM0JDTlVVc0swSkJRVVZETEUxQlFVWXNRMEZCVTNWRkxGTkJRVlFzUlVGQmIwSTdRVUZEYkVKTExITkNRVUZOWWl4WFFVUlpPMEZCUld4Q1l5eHZRa0ZCU1Zvc1YwRkdZenRCUVVkc1FtRXNjMEpCUVUxV0xGRkJTRms3UVVGSmJFSlhMREJDUVVGVllqdEJRVXBSTEdWQlFYQkNPMEZCVFVRc1lVRlFSQ3hOUVU5UE8wRkJRVVU3UVVGRFVHNUZMQ3RDUVVGRlF5eE5RVUZHTEVOQlFWTjFSU3hUUVVGVUxFVkJRVzlDTzBGQlEyeENTeXh6UWtGQlRXSXNWMEZFV1R0QlFVVnNRbU1zYjBKQlFVbGFMRmRCUm1NN1FVRkhiRUpoTEhOQ1FVRk5XaXhQUVVoWk8wRkJTV3hDWVN3d1FrRkJWVmc3UVVGS1VTeGxRVUZ3UWp0QlFVMUVPMEZCUTBZc1YwRm9Ra1FzVFVGblFrODdRVUZCUlR0QlFVTlFMR2RDUVVGSk5VTXNUVUZCVFcxRUxFMUJRVTRzUlVGQlNpeEZRVUZ2UWp0QlFVRkZPMEZCUTNCQ05VVXNLMEpCUVVWRExFMUJRVVlzUTBGQlUzVkZMRk5CUVZRc1JVRkJiMEk3UVVGRGJFSlBMSE5DUVVGTllpeFhRVVJaTzBGQlJXeENZeXd3UWtGQlZXaENMRmRCUmxFN1FVRkhiRUpoTEhOQ1FVRk5WaXhQUVVoWk8wRkJTV3hDVnl4dlFrRkJTVlE3UVVGS1l5eGxRVUZ3UWp0QlFVMUVMR0ZCVUVRc1RVRlBUenRCUVVGRk8wRkJRMUJ5UlN3clFrRkJSVU1zVFVGQlJpeERRVUZUZFVVc1UwRkJWQ3hGUVVGdlFqdEJRVU5zUWs4c2MwSkJRVTFtTEZkQlJGazdRVUZGYkVKblFpd3dRa0ZCVldRc1YwRkdVVHRCUVVkc1FsY3NjMEpCUVUxV0xFOUJTRms3UVVGSmJFSlhMRzlDUVVGSlZEdEJRVXBqTEdWQlFYQkNPMEZCVFVRN1FVRkRSanRCUVVOR0xGTkJiRU5FTEUxQmEwTlBPMEZCUVVVN1FVRkRVQ3hqUVVGSk5VTXNUVUZCVFcxRUxFMUJRVTRzUlVGQlNpeEZRVUZ2UWp0QlFVRkZPMEZCUTNCQ05VVXNOa0pCUVVWRExFMUJRVVlzUTBGQlUzVkZMRk5CUVZRc1JVRkJiMEk3UVVGRGJFSlBMRzlDUVVGTlZpeFJRVVJaTzBGQlJXeENWeXgzUWtGQlZXSXNUMEZHVVR0QlFVZHNRbFVzYjBKQlFVMWlMRmRCU0ZrN1FVRkpiRUpqTEd0Q1FVRkpXanRCUVVwakxHRkJRWEJDTzBGQlRVUXNWMEZRUkN4TlFVOVBPMEZCUVVVN1FVRkRVR3hGTERaQ1FVRkZReXhOUVVGR0xFTkJRVk4xUlN4VFFVRlVMRVZCUVc5Q08wRkJRMnhDVHl4dlFrRkJUVm9zVDBGRVdUdEJRVVZzUW1Fc2QwSkJRVlZZTEZGQlJsRTdRVUZIYkVKUkxHOUNRVUZOWWl4WFFVaFpPMEZCU1d4Q1l5eHJRa0ZCU1ZvN1FVRktZeXhoUVVGd1FqdEJRVTFFTzBGQlEwWTdRVUZEUkRWRUxHbERRVUZUTWtVc1UwRkJWQ3hEUVVGdFFteEVMRU5CUVc1Q0xFVkJRWE5DTEdOQlFYUkNMRVZCUVhORGVVTXNVMEZCZEVNN1FVRkZSQ3hQUVhKSFJEdEJRWE5IUkRzN1FVRkZSRHM3T3pzN096czdjME5CUzJ0Q08wRkJRMmhDTEZWQlFVbFZMRkZCUVZFc2MwSkJRVVZETEZOQlFWTkRMRWxCUVZnc1EwRkJXanRCUVVGQkxGVkJRMGt6UkN4UlFVRlJMRWxCUkZvN1FVRkZRWGxFTEZsQlFVMUhMRWRCUVU0c1EwRkJWU3hyUkVGQlZpeEZRVU5OZEVNc1JVRkVUaXhEUVVOVExHdEVRVVJVTEVWQlF6WkVMRlZCUVZOb1FpeERRVUZVTEVWQlFWazdRVUZEYkVVc1dVRkJTWFZFTEZGQlFWRTNSQ3hOUVVGTk1VSXNVVUZCVGl4RFFVRmxXU3hKUVVGbUxFTkJRVzlDYjBJc1JVRkJSVVVzVFVGQmRFSXNRMEZCV2p0QlFVTkJMRmxCUVVseFJDeE5RVUZOYkVJc1RVRkJWaXhGUVVGclFqdEJRVUZGTzBGQlFWTTdPMEZCUlRkQ00wTXNZMEZCVFcxQ0xFdEJRVTQ3UVVGRFFYTkRMR05CUVUxSExFZEJRVTRzUTBGQlZTeHJSRUZCVmp0QlFVTkVMRTlCVUU0N1FVRlJSRHM3UVVGRlJEczdPenM3T3pzN096c3dRa0ZQVFM5RExFa3NSVUZCVFR0QlFVTldMRlZCUVVscFJDeE5RVUZOTEV0QlFVdDRSU3hMUVVGTUxFTkJRVmQ1UXl4TFFVRllMRU5CUVdsQ0xFdEJRVXQ2UXl4TFFVRk1MRU5CUVZkNVJTeE5RVUZZTEVOQlFXdENMRlZCUVZNeFFpeERRVUZVTEVWQlFWa3lRaXhGUVVGYUxFVkJRV2RDTzBGQlF6TkVMR1ZCUVU4c2MwSkJRVVZCTEVWQlFVWXNSVUZCVFRsRkxFbEJRVTRzUTBGQlZ6SkNMRWxCUVZnc1JVRkJhVUk0UWl4TlFVRnFRaXhIUVVFd1FpeERRVUZxUXp0QlFVTkVMRTlCUmpCQ0xFTkJRV3BDTEVOQlFWWTdRVUZIUVN4VlFVRkpjMElzVVVGQlVYQkVMRXRCUVV0cFF5eE5RVUZNTEVOQlFWa3NLMEpCUVZvc1JVRkJOa05pTEZGQlFUZERMRU5CUVhORUxDdENRVUYwUkN4RFFVRmFPMEZCUTBFc1YwRkJTMlFzUzBGQlRDeERRVUZYT0VNc1MwRkJXQ3hGUVVGclFrZ3NSMEZCYkVJN1FVRkRRV3BFTEZkQlFVdGtMRWRCUVV3c1EwRkJVeXhaUVVGVUxFVkJRWFZDTEZGQlFYWkNMRVZCUVdsRFdDeFJRVUZxUXl4RFFVRXdReXh2UWtGQk1VTXNSVUZEU3pCRUxFMUJSRXdzUTBGRFdTd3JRa0ZFV2l4RlFVTTJRekZFTEZGQlJEZERMRU5CUTNORUxGZEJSSFJFTzBGQlJVRXNWVUZCU1RoRkxGRkJRVkZETEhGQ1FVRkpReXhuUWtGQlNpeERRVUZ4UW5aRUxFbEJRWEpDTEVWQlFUSkNMRWxCUVROQ0xFVkJRV2xETEVsQlFXcERMRU5CUVZvN1FVRkRRU3hWUVVGSkxFTkJRVU54UkN4TFFVRk1MRVZCUVZrN1FVRkRWaXhaUVVGSlJ5eFhRVUZYTEV0QlFVdG9SeXhQUVVGTUxFTkJRV0Z0UWl4VFFVRmlMRXRCUVRKQ0xFMUJRVE5DTEVkQlFXOURMRkZCUVhCRExFZEJRU3RETEU5QlFUbEVPMEZCUVVFc1dVRkRTVGhGTEZsQlFWbDZSQ3hMUVVGTGFVTXNUVUZCVEN4RFFVRlpMRFpDUVVGYUxFTkJSR2hDTzBGQlJVRjNRaXhyUWtGQlZVTXNWMEZCVml4WFFVRTRRa1lzVVVGQk9VSXNSVUZCTUVOcVJpeFJRVUV4UXl4WlFVRTBSQ3hMUVVGTFppeFBRVUZNTEVOQlFXRnRRaXhUUVVGNlJUdEJRVU5CTUVVc1owSkJRVkZETEhGQ1FVRkpReXhuUWtGQlNpeERRVUZ4UW5aRUxFbEJRWEpDTEVWQlFUSkNMRWxCUVROQ0xFVkJRV2xETEVsQlFXcERMRU5CUVZJN1FVRkRRU3haUVVGSkxFTkJRVU54UkN4TFFVRk1MRVZCUVZrN1FVRkRWa2tzYjBKQlFWVkRMRmRCUVZZc1dVRkJLMElzUzBGQlMyeEhMRTlCUVV3c1EwRkJZVzFDTEZOQlFUVkRMRVZCUVhsRVNpeFJRVUY2UkN4RFFVRnJSU3hoUVVGc1JUdEJRVU5FTzBGQlEwUXNZVUZCUzFNc1QwRkJUQ3hIUVVGbExFbEJRV1k3UVVGRFJEdEJRVU5FWjBJc1YwRkJTMlFzUjBGQlRDeERRVUZUTEZsQlFWUXNSVUZCZFVJc1JVRkJka0k3UVVGRFFTeFZRVUZKTEV0QlFVc3hRaXhQUVVGTUxFTkJRV0Y1UXl4WlFVRnFRaXhGUVVFclFqdEJRVUZGTEdGQlFVc3dSQ3hsUVVGTU8wRkJRWGxDTzBGQlF6RkVPenM3TzBGQlNVRXNWMEZCUzJ4SExGRkJRVXdzUTBGQlkyMUhMRTlCUVdRc1EwRkJjMElzYzBKQlFYUkNMRVZCUVRoRExFTkJRVU0xUkN4SlFVRkVMRU5CUVRsRE8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdNRUpCVDAxT0xFc3NSVUZCVDNWRUxFY3NSVUZCU3p0QlFVTm9RaXhWUVVGSldTeFJRVUZLTzBGQlEwRXNWVUZCU1c1RkxGTkJRVk5CTEUxQlFVMXZReXhOUVVGdVFpeEZRVUV5UWp0QlFVTjZRaXRDTEcxQ1FVRlhia1VzUzBGQldEdEJRVU5FTEU5QlJrUXNUVUZGVHl4SlFVRkpkVVFzVVVGQlVXRXNVMEZCV2l4RlFVRjFRanRCUVVNMVFrUXNiVUpCUVZjc1MwRkJTM0JHTEV0QlFVd3NRMEZCVjNOR0xFZEJRVmdzUTBGQlpTeFZRVUZUZGtNc1EwRkJWQ3hGUVVGWk1rSXNSVUZCV2l4RlFVRm5RanRCUVVONFF5eHBRa0ZCVHpOQ0xFMUJRVTE1UWl4SFFVRmlPMEZCUTBRc1UwRkdWU3hEUVVGWU8wRkJSMFFzVDBGS1RTeE5RVXRHTzBGQlEwaFpMRzFDUVVGWExFdEJRVXR3Unl4UlFVRm9RanRCUVVORU8wRkJRMFFzVlVGQlNYVkhMRzFDUVVGdFFrZ3NVMEZCVTJwR0xGRkJRVlFzUTBGQmEwSXNWMEZCYkVJc1MwRkJhME5wUml4VFFVRlRlRVlzU1VGQlZDeERRVUZqTEZsQlFXUXNSVUZCTkVKNVJDeE5RVUUxUWl4SFFVRnhReXhEUVVFNVJqczdRVUZGUVN4VlFVRkphME1zWjBKQlFVb3NSVUZCYzBJN1FVRkRjRUpJTEdsQ1FVRlRlRVlzU1VGQlZDeERRVUZqTEdOQlFXUXNSVUZCT0VKdFF5eEhRVUU1UWl4RFFVRnJRM0ZFTEZGQlFXeERMRVZCUVRSRE9VUXNTVUZCTlVNc1EwRkJhVVE3UVVGREwwTXNNa0pCUVdsQ08wRkJSRGhDTEZOQlFXcEVMRVZCUlVjeVJDeFhRVVpJTEVOQlJXVXNWMEZHWmpzN1FVRkpRVWNzYVVKQlFWTjRSaXhKUVVGVUxFTkJRV01zZFVKQlFXUXNSVUZCZFVOeFJpeFhRVUYyUXl4RFFVRnRSQ3h2UWtGQmJrUTdPMEZCUlVFc1dVRkJTU3hMUVVGTE1VVXNUMEZCVEN4SlFVRm5RalpGTEZOQlFWTjRSaXhKUVVGVUxFTkJRV01zWVVGQlpDeEZRVUUyUW5sRUxFMUJRV3BFTEVWQlFYbEVPMEZCUTNaRUxHTkJRVWt3UWl4WFFVRlhMRXRCUVV0b1J5eFBRVUZNTEVOQlFXRnRRaXhUUVVGaUxFdEJRVEpDTEUxQlFUTkNMRWRCUVc5RExFOUJRWEJETEVkQlFUaERMRTFCUVRkRU8wRkJRMEZyUml4dFFrRkJVM2hHTEVsQlFWUXNRMEZCWXl3clFrRkJaQ3hGUVVFclEyMURMRWRCUVM5RExFTkJRVzFFY1VRc1VVRkJia1FzUlVGRFUwZ3NWMEZFVkN4M1FrRkRNRU1zUzBGQlMyeEhMRTlCUVV3c1EwRkJZVzFDTEZOQlJIWkVMRVZCUlZOS0xGRkJSbFFzV1VGRk1rSnBSaXhSUVVZelFqdEJRVWRCTEdWQlFVdDRSU3hQUVVGTUxFZEJRV1VzUzBGQlpqdEJRVU5FTzBGQlEwUTdPenM3UVVGSlFTeGhRVUZMZGtJc1VVRkJUQ3hEUVVGamJVY3NUMEZCWkN4RFFVRnpRaXh6UWtGQmRFSXNSVUZCT0VNc1EwRkJRME1zVVVGQlJDeERRVUU1UXp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdLMEpCU1ZjN1FVRkRWQ3hYUVVGTGNrWXNWVUZCVEN4RFFVRm5RblZGTEVkQlFXaENMRU5CUVc5Q0xHdENRVUZ3UWl4RlFVRjNRMnRDTEZWQlFYaERMRU5CUVcxRUxHVkJRVzVFTEVWQlEwdFFMRmRCUkV3c1EwRkRhVUlzSzBWQlJHcENPMEZCUlVFc05FSkJRVVZpTEZOQlFWTkRMRWxCUVZnc1JVRkJhVUpETEVkQlFXcENMRU5CUVhGQ0xHdENRVUZ5UWp0QlFVTkJOMFVzTkVKQlFVdG5SeXhKUVVGTUxFTkJRVlVzUzBGQlMzcEhMRkZCUVdZc1JVRkJlVUlzVlVGQmVrSTdRVUZEUkRzN096dEZRUzlXZDBJd1J5eHJRanM3UVVGclZ6TkNPenM3T3p0QlFVZEJOMGNzWVVGQllVMHNVVUZCWWl4SFFVRjNRanRCUVVOMFFqczdPenM3TzBGQlRVRXJReXhuUWtGQll5eExRVkJSTzBGQlVYUkNPenM3T3pzN1FVRk5RVWtzWVVGQlZ5eEpRV1JYTzBGQlpYUkNPenM3T3pzN1FVRk5RVVFzWTBGQldTeEZRWEpDVlR0QlFYTkNkRUk3T3pzN096dEJRVTFCV2l4aFFVRlhMRXRCTlVKWE8wRkJOa0owUWpzN096czdPenRCUVU5Qll5eGxRVUZoTEVkQmNFTlRPMEZCY1VOMFFqczdPenM3TzBGQlRVRnlReXhoUVVGWExFMUJNME5YTzBGQk5FTjBRanM3T3pzN08wRkJUVUZ6UWl4blFrRkJZeXhKUVd4RVVUdEJRVzFFZEVJN096czdPenRCUVUxQlV5eHpRa0ZCYjBJc1NVRjZSRVU3UVVFd1JIUkNPenM3T3pzN1FVRk5RV2hETEdsQ1FVRmxMRlZCYUVWUE8wRkJhVVYwUWpzN096czdPMEZCVFVGSExHTkJRVmtzWVVGMlJWVTdRVUYzUlhSQ096czdPenM3UVVGTlFYTkNMR1ZCUVdFN1FVRTVSVk1zUTBGQmVFSTdPMUZCYVVaUk4wTXNXU3hIUVVGQlFTeFpJaXdpWm1sc1pTSTZJbVp2ZFc1a1lYUnBiMjR1WkhKdmNHUnZkMjVOWlc1MUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwYlhCdmNuUWdKQ0JtY205dElDZHFjWFZsY25rbk8xeHVhVzF3YjNKMElIc2dTMlY1WW05aGNtUWdmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNXJaWGxpYjJGeVpDYzdYRzVwYlhCdmNuUWdleUJPWlhOMElIMGdabkp2YlNBbkxpOW1iM1Z1WkdGMGFXOXVMblYwYVd3dWJtVnpkQ2M3WEc1cGJYQnZjblFnZXlCQ2IzZ2dmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNWliM2duTzF4dWFXMXdiM0owSUhzZ2NuUnNJR0Z6SUZKMGJDQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtTnZjbVVuTzF4dWFXMXdiM0owSUhzZ1VHeDFaMmx1SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuQnNkV2RwYmljN1hHNWNibHh1THlvcVhHNGdLaUJFY205d1pHOTNiazFsYm5VZ2JXOWtkV3hsTGx4dUlDb2dRRzF2WkhWc1pTQm1iM1Z1WkdGMGFXOXVMbVJ5YjNCa2IzZHVMVzFsYm5WY2JpQXFJRUJ5WlhGMWFYSmxjeUJtYjNWdVpHRjBhVzl1TG5WMGFXd3VhMlY1WW05aGNtUmNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxuVjBhV3d1WW05NFhHNGdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMbTVsYzNSY2JpQXFMMXh1WEc1amJHRnpjeUJFY205d1pHOTNiazFsYm5VZ1pYaDBaVzVrY3lCUWJIVm5hVzRnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQkVjbTl3Wkc5M2JrMWxiblV1WEc0Z0lDQXFJRUJqYkdGemMxeHVJQ0FnS2lCQWJtRnRaU0JFY205d1pHOTNiazFsYm5WY2JpQWdJQ29nUUdacGNtVnpJRVJ5YjNCa2IzZHVUV1Z1ZFNOcGJtbDBYRzRnSUNBcUlFQndZWEpoYlNCN2FsRjFaWEo1ZlNCbGJHVnRaVzUwSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCdFlXdGxJR2x1ZEc4Z1lTQmtjbTl3Wkc5M2JpQnRaVzUxTGx4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJRTkyWlhKeWFXUmxjeUIwYnlCMGFHVWdaR1ZtWVhWc2RDQndiSFZuYVc0Z2MyVjBkR2x1WjNNdVhHNGdJQ0FxTDF4dUlDQmZjMlYwZFhBb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUWdQU0JsYkdWdFpXNTBPMXh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUNRdVpYaDBaVzVrS0h0OUxDQkVjbTl3Wkc5M2JrMWxiblV1WkdWbVlYVnNkSE1zSUhSb2FYTXVKR1ZzWlcxbGJuUXVaR0YwWVNncExDQnZjSFJwYjI1ektUdGNiaUFnSUNCMGFHbHpMbU5zWVhOelRtRnRaU0E5SUNkRWNtOXdaRzkzYmsxbGJuVW5PeUF2THlCcFpUa2dZbUZqYXlCamIyMXdZWFJjYmx4dUlDQWdJSFJvYVhNdVgybHVhWFFvS1R0Y2JseHVJQ0FnSUV0bGVXSnZZWEprTG5KbFoybHpkR1Z5S0NkRWNtOXdaRzkzYmsxbGJuVW5MQ0I3WEc0Z0lDQWdJQ0FuUlU1VVJWSW5PaUFuYjNCbGJpY3NYRzRnSUNBZ0lDQW5VMUJCUTBVbk9pQW5iM0JsYmljc1hHNGdJQ0FnSUNBblFWSlNUMWRmVWtsSFNGUW5PaUFuYm1WNGRDY3NYRzRnSUNBZ0lDQW5RVkpTVDFkZlZWQW5PaUFuZFhBbkxGeHVJQ0FnSUNBZ0owRlNVazlYWDBSUFYwNG5PaUFuWkc5M2JpY3NYRzRnSUNBZ0lDQW5RVkpTVDFkZlRFVkdWQ2M2SUNkd2NtVjJhVzkxY3ljc1hHNGdJQ0FnSUNBblJWTkRRVkJGSnpvZ0oyTnNiM05sSjF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCd2JIVm5hVzRzSUdGdVpDQmpZV3hzY3lCZmNISmxjR0Z5WlUxbGJuVmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFMMXh1SUNCZmFXNXBkQ2dwSUh0Y2JpQWdJQ0JPWlhOMExrWmxZWFJvWlhJb2RHaHBjeTRrWld4bGJXVnVkQ3dnSjJSeWIzQmtiM2R1SnlrN1hHNWNiaUFnSUNCMllYSWdjM1ZpY3lBOUlIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25iR2t1YVhNdFpISnZjR1J2ZDI0dGMzVmliV1Z1ZFMxd1lYSmxiblFuS1R0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtTm9hV3hrY21WdUtDY3VhWE10WkhKdmNHUnZkMjR0YzNWaWJXVnVkUzF3WVhKbGJuUW5LUzVqYUdsc1pISmxiaWduTG1sekxXUnliM0JrYjNkdUxYTjFZbTFsYm5VbktTNWhaR1JEYkdGemN5Z25abWx5YzNRdGMzVmlKeWs3WEc1Y2JpQWdJQ0IwYUdsekxpUnRaVzUxU1hSbGJYTWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvSjF0eWIyeGxQVndpYldWdWRXbDBaVzFjSWwwbktUdGNiaUFnSUNCMGFHbHpMaVIwWVdKeklEMGdkR2hwY3k0a1pXeGxiV1Z1ZEM1amFHbHNaSEpsYmlnblczSnZiR1U5WENKdFpXNTFhWFJsYlZ3aVhTY3BPMXh1SUNBZ0lIUm9hWE11SkhSaFluTXVabWx1WkNnbmRXd3VhWE10WkhKdmNHUnZkMjR0YzNWaWJXVnVkU2NwTG1Ga1pFTnNZWE56S0hSb2FYTXViM0IwYVc5dWN5NTJaWEowYVdOaGJFTnNZWE56S1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WVd4cFoyNXRaVzUwSUQwOVBTQW5ZWFYwYnljcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVKR1ZzWlcxbGJuUXVhR0Z6UTJ4aGMzTW9kR2hwY3k1dmNIUnBiMjV6TG5KcFoyaDBRMnhoYzNNcElIeDhJRkowYkNncElIeDhJSFJvYVhNdUpHVnNaVzFsYm5RdWNHRnlaVzUwY3lnbkxuUnZjQzFpWVhJdGNtbG5hSFFuS1M1cGN5Z25LaWNwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdVlXeHBaMjV0Wlc1MElEMGdKM0pwWjJoMEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVluTXVZV1JrUTJ4aGMzTW9KMjl3Wlc1ekxXeGxablFuS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1aGJHbG5ibTFsYm5RZ1BTQW5iR1ZtZENjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFdKekxtRmtaRU5zWVhOektDZHZjR1Z1Y3kxeWFXZG9kQ2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZV3hwWjI1dFpXNTBJRDA5UFNBbmNtbG5hSFFuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjM1ZpY3k1aFpHUkRiR0Z6Y3lnbmIzQmxibk10YkdWbWRDY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J6ZFdKekxtRmtaRU5zWVhOektDZHZjR1Z1Y3kxeWFXZG9kQ2NwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG1Ob1lXNW5aV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TGw5bGRtVnVkSE1vS1R0Y2JpQWdmVHRjYmx4dUlDQmZhWE5XWlhKMGFXTmhiQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k0a2RHRmljeTVqYzNNb0oyUnBjM0JzWVhrbktTQTlQVDBnSjJKc2IyTnJKeUI4ZkNCMGFHbHpMaVJsYkdWdFpXNTBMbU56Y3lnblpteGxlQzFrYVhKbFkzUnBiMjRuS1NBOVBUMGdKMk52YkhWdGJpYzdYRzRnSUgxY2JseHVJQ0JmYVhOU2RHd29LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11SkdWc1pXMWxiblF1YUdGelEyeGhjM01vSjJGc2FXZHVMWEpwWjJoMEp5a2dmSHdnS0ZKMGJDZ3BJQ1ltSUNGMGFHbHpMaVJsYkdWdFpXNTBMbWhoYzBOc1lYTnpLQ2RoYkdsbmJpMXNaV1owSnlrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ1pYWmxiblFnYkdsemRHVnVaWEp6SUhSdklHVnNaVzFsYm5SeklIZHBkR2hwYmlCMGFHVWdiV1Z1ZFZ4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvdlhHNGdJRjlsZG1WdWRITW9LU0I3WEc0Z0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN5eGNiaUFnSUNBZ0lDQWdhR0Z6Vkc5MVkyZ2dQU0FuYjI1MGIzVmphSE4wWVhKMEp5QnBiaUIzYVc1a2IzY2dmSHdnS0hSNWNHVnZaaUIzYVc1a2IzY3ViMjUwYjNWamFITjBZWEowSUNFOVBTQW5kVzVrWldacGJtVmtKeWtzWEc0Z0lDQWdJQ0FnSUhCaGNrTnNZWE56SUQwZ0oybHpMV1J5YjNCa2IzZHVMWE4xWW0xbGJuVXRjR0Z5Wlc1MEp6dGNibHh1SUNBZ0lDOHZJSFZ6WldRZ1ptOXlJRzl1UTJ4cFkyc2dZVzVrSUdsdUlIUm9aU0JyWlhsaWIyRnlaQ0JvWVc1a2JHVnljMXh1SUNBZ0lIWmhjaUJvWVc1a2JHVkRiR2xqYTBadUlEMGdablZ1WTNScGIyNG9aU2tnZTF4dUlDQWdJQ0FnZG1GeUlDUmxiR1Z0SUQwZ0pDaGxMblJoY21kbGRDa3VjR0Z5Wlc1MGMxVnVkR2xzS0NkMWJDY3NJR0F1Skh0d1lYSkRiR0Z6YzMxZ0tTeGNiaUFnSUNBZ0lDQWdJQ0JvWVhOVGRXSWdQU0FrWld4bGJTNW9ZWE5EYkdGemN5aHdZWEpEYkdGemN5a3NYRzRnSUNBZ0lDQWdJQ0FnYUdGelEyeHBZMnRsWkNBOUlDUmxiR1Z0TG1GMGRISW9KMlJoZEdFdGFYTXRZMnhwWTJzbktTQTlQVDBnSjNSeWRXVW5MRnh1SUNBZ0lDQWdJQ0FnSUNSemRXSWdQU0FrWld4bGJTNWphR2xzWkhKbGJpZ25MbWx6TFdSeWIzQmtiM2R1TFhOMVltMWxiblVuS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLR2hoYzFOMVlpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FHRnpRMnhwWTJ0bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYM1JvYVhNdWIzQjBhVzl1Y3k1amJHOXpaVTl1UTJ4cFkyc2dmSHdnS0NGZmRHaHBjeTV2Y0hScGIyNXpMbU5zYVdOclQzQmxiaUFtSmlBaGFHRnpWRzkxWTJncElIeDhJQ2hmZEdocGN5NXZjSFJwYjI1ekxtWnZjbU5sUm05c2JHOTNJQ1ltSUdoaGMxUnZkV05vS1NrZ2V5QnlaWFIxY200N0lIMWNiaUFnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdVdWMzUnZjRWx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmFHbGtaU2drWld4bGJTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0JsTG5OMGIzQkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5emFHOTNLQ1J6ZFdJcE8xeHVJQ0FnSUNBZ0lDQWdJQ1JsYkdWdExtRmtaQ2drWld4bGJTNXdZWEpsYm5SelZXNTBhV3dvWDNSb2FYTXVKR1ZzWlcxbGJuUXNJR0F1Skh0d1lYSkRiR0Z6YzMxZ0tTa3VZWFIwY2lnblpHRjBZUzFwY3kxamJHbGpheWNzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZMnhwWTJ0UGNHVnVJSHg4SUdoaGMxUnZkV05vS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVJ0Wlc1MVNYUmxiWE11YjI0b0oyTnNhV05yTG5wbUxtUnliM0JrYjNkdWJXVnVkU0IwYjNWamFITjBZWEowTG5wbUxtUnliM0JrYjNkdWJXVnVkU2NzSUdoaGJtUnNaVU5zYVdOclJtNHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRWhoYm1Sc1pTQk1aV0ZtSUdWc1pXMWxiblFnUTJ4cFkydHpYRzRnSUNBZ2FXWW9YM1JvYVhNdWIzQjBhVzl1Y3k1amJHOXpaVTl1UTJ4cFkydEpibk5wWkdVcGUxeHVJQ0FnSUNBZ2RHaHBjeTRrYldWdWRVbDBaVzF6TG05dUtDZGpiR2xqYXk1NlppNWtjbTl3Wkc5M2JtMWxiblVuTENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lBa1pXeGxiU0E5SUNRb2RHaHBjeWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9ZWE5UZFdJZ1BTQWtaV3hsYlM1b1lYTkRiR0Z6Y3lod1lYSkRiR0Z6Y3lrN1hHNGdJQ0FnSUNBZ0lHbG1LQ0ZvWVhOVGRXSXBlMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDlvYVdSbEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTV2Y0hScGIyNXpMbVJwYzJGaWJHVkliM1psY2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrYldWdWRVbDBaVzF6TG05dUtDZHRiM1Z6WldWdWRHVnlMbnBtTG1SeWIzQmtiM2R1YldWdWRTY3NJR1oxYm1OMGFXOXVLR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJQ1JsYkdWdElEMGdKQ2gwYUdsektTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGMxTjFZaUE5SUNSbGJHVnRMbWhoYzBOc1lYTnpLSEJoY2tOc1lYTnpLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9hR0Z6VTNWaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJ4bFlYSlVhVzFsYjNWMEtDUmxiR1Z0TG1SaGRHRW9KMTlrWld4aGVTY3BLVHRjYmlBZ0lDQWdJQ0FnSUNBa1pXeGxiUzVrWVhSaEtDZGZaR1ZzWVhrbkxDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgzTm9iM2NvSkdWc1pXMHVZMmhwYkdSeVpXNG9KeTVwY3kxa2NtOXdaRzkzYmkxemRXSnRaVzUxSnlrcE8xeHVJQ0FnSUNBZ0lDQWdJSDBzSUY5MGFHbHpMbTl3ZEdsdmJuTXVhRzkyWlhKRVpXeGhlU2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtTNXZiaWduYlc5MWMyVnNaV0YyWlM1NlppNWtjbTl3Wkc5M2JtMWxiblVuTENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lBa1pXeGxiU0E5SUNRb2RHaHBjeWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9ZWE5UZFdJZ1BTQWtaV3hsYlM1b1lYTkRiR0Z6Y3lod1lYSkRiR0Z6Y3lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhOVGRXSWdKaVlnWDNSb2FYTXViM0IwYVc5dWN5NWhkWFJ2WTJ4dmMyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9KR1ZzWlcwdVlYUjBjaWduWkdGMFlTMXBjeTFqYkdsamF5Y3BJRDA5UFNBbmRISjFaU2NnSmlZZ1gzUm9hWE11YjNCMGFXOXVjeTVqYkdsamEwOXdaVzRwSUhzZ2NtVjBkWEp1SUdaaGJITmxPeUI5WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvSkdWc1pXMHVaR0YwWVNnblgyUmxiR0Y1SnlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ1JsYkdWdExtUmhkR0VvSjE5a1pXeGhlU2NzSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYUdsa1pTZ2taV3hsYlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU3dnWDNSb2FYTXViM0IwYVc5dWN5NWpiRzl6YVc1blZHbHRaU2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NGtiV1Z1ZFVsMFpXMXpMbTl1S0NkclpYbGtiM2R1TG5wbUxtUnliM0JrYjNkdWJXVnVkU2NzSUdaMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lIWmhjaUFrWld4bGJXVnVkQ0E5SUNRb1pTNTBZWEpuWlhRcExuQmhjbVZ1ZEhOVmJuUnBiQ2duZFd3bkxDQW5XM0p2YkdVOVhDSnRaVzUxYVhSbGJWd2lYU2NwTEZ4dUlDQWdJQ0FnSUNBZ0lHbHpWR0ZpSUQwZ1gzUm9hWE11SkhSaFluTXVhVzVrWlhnb0pHVnNaVzFsYm5RcElENGdMVEVzWEc0Z0lDQWdJQ0FnSUNBZ0pHVnNaVzFsYm5SeklEMGdhWE5VWVdJZ1B5QmZkR2hwY3k0a2RHRmljeUE2SUNSbGJHVnRaVzUwTG5OcFlteHBibWR6S0Nkc2FTY3BMbUZrWkNna1pXeGxiV1Z1ZENrc1hHNGdJQ0FnSUNBZ0lDQWdKSEJ5WlhaRmJHVnRaVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDUnVaWGgwUld4bGJXVnVkRHRjYmx4dUlDQWdJQ0FnSkdWc1pXMWxiblJ6TG1WaFkyZ29ablZ1WTNScGIyNG9hU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9KQ2gwYUdsektTNXBjeWdrWld4bGJXVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWtjSEpsZGtWc1pXMWxiblFnUFNBa1pXeGxiV1Z1ZEhNdVpYRW9hUzB4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWtibVY0ZEVWc1pXMWxiblFnUFNBa1pXeGxiV1Z1ZEhNdVpYRW9hU3N4S1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0IyWVhJZ2JtVjRkRk5wWW14cGJtY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0pHNWxlSFJGYkdWdFpXNTBMbU5vYVd4a2NtVnVLQ2RoT21acGNuTjBKeWt1Wm05amRYTW9LVHRjYmlBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJQ0FnZlN3Z2NISmxkbE5wWW14cGJtY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0pIQnlaWFpGYkdWdFpXNTBMbU5vYVd4a2NtVnVLQ2RoT21acGNuTjBKeWt1Wm05amRYTW9LVHRjYmlBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJQ0FnZlN3Z2IzQmxibE4xWWlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ0pITjFZaUE5SUNSbGJHVnRaVzUwTG1Ob2FXeGtjbVZ1S0NkMWJDNXBjeTFrY205d1pHOTNiaTF6ZFdKdFpXNTFKeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2tjM1ZpTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5emFHOTNLQ1J6ZFdJcE8xeHVJQ0FnSUNBZ0lDQWdJQ1JsYkdWdFpXNTBMbVpwYm1Rb0oyeHBJRDRnWVRwbWFYSnpkQ2NwTG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V5QnlaWFIxY200N0lIMWNiaUFnSUNBZ0lIMHNJR05zYjNObFUzVmlJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDOHZhV1lnS0NSbGJHVnRaVzUwTG1sektDYzZabWx5YzNRdFkyaHBiR1FuS1NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWTJ4dmMyVWdQU0FrWld4bGJXVnVkQzV3WVhKbGJuUW9KM1ZzSnlrdWNHRnlaVzUwS0Nkc2FTY3BPMXh1SUNBZ0lDQWdJQ0JqYkc5elpTNWphR2xzWkhKbGJpZ25ZVHBtYVhKemRDY3BMbVp2WTNWektDazdYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOW9hV1JsS0dOc2IzTmxLVHRjYmlBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJQ0FnSUNBdkwzMWNiaUFnSUNBZ0lIMDdYRzRnSUNBZ0lDQjJZWElnWm5WdVkzUnBiMjV6SUQwZ2UxeHVJQ0FnSUNBZ0lDQnZjR1Z1T2lCdmNHVnVVM1ZpTEZ4dUlDQWdJQ0FnSUNCamJHOXpaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyaHBaR1VvWDNSb2FYTXVKR1ZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMaVJ0Wlc1MVNYUmxiWE11WlhFb01Da3VZMmhwYkdSeVpXNG9KMkVuS1M1bWIyTjFjeWdwT3lBdkx5Qm1iMk4xY3lCMGJ5Qm1hWEp6ZENCbGJHVnRaVzUwWEc0Z0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JvWVc1a2JHVmtPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmxMbk4wYjNCSmJXMWxaR2xoZEdWUWNtOXdZV2RoZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNCcFppQW9hWE5VWVdJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbDlwYzFabGNuUnBZMkZzS0NrcElIc2dMeThnZG1WeWRHbGpZV3dnYldWdWRWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTVmYVhOU2RHd29LU2tnZXlBdkx5QnlhV2RvZENCaGJHbG5ibVZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWtMbVY0ZEdWdVpDaG1kVzVqZEdsdmJuTXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzkzYmpvZ2JtVjRkRk5wWW14cGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIVndPaUJ3Y21WMlUybGliR2x1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGREb2dZMnh2YzJWVGRXSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaWFpwYjNWek9pQnZjR1Z1VTNWaVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V5QXZMeUJzWldaMElHRnNhV2R1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJQ1F1WlhoMFpXNWtLR1oxYm1OMGFXOXVjeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjNkdU9pQnVaWGgwVTJsaWJHbHVaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEE2SUhCeVpYWlRhV0pzYVc1bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBPaUJ2Y0dWdVUzVmlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbVYyYVc5MWN6b2dZMnh2YzJWVGRXSmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHNnTHk4Z2FHOXlhWHB2Ym5SaGJDQnRaVzUxWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxsOXBjMUowYkNncEtTQjdJQzh2SUhKcFoyaDBJR0ZzYVdkdVpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNRdVpYaDBaVzVrS0daMWJtTjBhVzl1Y3l3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBPaUJ3Y21WMlUybGliR2x1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRtbHZkWE02SUc1bGVIUlRhV0pzYVc1bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IzZHVPaUJ2Y0dWdVUzVmlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjRG9nWTJ4dmMyVlRkV0pjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3SUM4dklHeGxablFnWVd4cFoyNWxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0pDNWxlSFJsYm1Rb1puVnVZM1JwYjI1ekxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFE2SUc1bGVIUlRhV0pzYVc1bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJhVzkxY3pvZ2NISmxkbE5wWW14cGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZkMjQ2SUc5d1pXNVRkV0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFZ3T2lCamJHOXpaVk4xWWx4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2V5QXZMeUJ1YjNRZ2RHRmljeUF0UGlCdmJtVWdjM1ZpWEc0Z0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1ZmFYTlNkR3dvS1NrZ2V5QXZMeUJ5YVdkb2RDQmhiR2xuYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdKQzVsZUhSbGJtUW9ablZ1WTNScGIyNXpMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGgwT2lCamJHOXpaVk4xWWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhacGIzVnpPaUJ2Y0dWdVUzVmlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOTNiam9nYm1WNGRGTnBZbXhwYm1jc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxY0RvZ2NISmxkbE5wWW14cGJtZGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzZ0x5OGdiR1ZtZENCaGJHbG5ibVZrWEc0Z0lDQWdJQ0FnSUNBZ0pDNWxlSFJsYm1Rb1puVnVZM1JwYjI1ekxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBPaUJ2Y0dWdVUzVmlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISmxkbWx2ZFhNNklHTnNiM05sVTNWaUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5M2Jqb2dibVY0ZEZOcFlteHBibWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjRG9nY0hKbGRsTnBZbXhwYm1kY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnUzJWNVltOWhjbVF1YUdGdVpHeGxTMlY1S0dVc0lDZEVjbTl3Wkc5M2JrMWxiblVuTENCbWRXNWpkR2x2Ym5NcE8xeHVYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVdSa2N5QmhiaUJsZG1WdWRDQm9ZVzVrYkdWeUlIUnZJSFJvWlNCaWIyUjVJSFJ2SUdOc2IzTmxJR0Z1ZVNCa2NtOXdaRzkzYm5NZ2IyNGdZU0JqYkdsamF5NWNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFMMXh1SUNCZllXUmtRbTlrZVVoaGJtUnNaWElvS1NCN1hHNGdJQ0FnZG1GeUlDUmliMlI1SUQwZ0pDaGtiMk4xYldWdWRDNWliMlI1S1N4Y2JpQWdJQ0FnSUNBZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDUmliMlI1TG05bVppZ25iVzkxYzJWMWNDNTZaaTVrY205d1pHOTNibTFsYm5VZ2RHOTFZMmhsYm1RdWVtWXVaSEp2Y0dSdmQyNXRaVzUxSnlsY2JpQWdJQ0FnSUNBZ0lDNXZiaWduYlc5MWMyVjFjQzU2Wmk1a2NtOXdaRzkzYm0xbGJuVWdkRzkxWTJobGJtUXVlbVl1WkhKdmNHUnZkMjV0Wlc1MUp5d2dablZ1WTNScGIyNG9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQjJZWElnSkd4cGJtc2dQU0JmZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0dVdWRHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdhV1lnS0NSc2FXNXJMbXhsYm1kMGFDa2dleUJ5WlhSMWNtNDdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmFHbGtaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWtZbTlrZVM1dlptWW9KMjF2ZFhObGRYQXVlbVl1WkhKdmNHUnZkMjV0Wlc1MUlIUnZkV05vWlc1a0xucG1MbVJ5YjNCa2IzZHViV1Z1ZFNjcE8xeHVJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1QzQmxibk1nWVNCa2NtOXdaRzkzYmlCd1lXNWxMQ0JoYm1RZ1kyaGxZMnR6SUdadmNpQmpiMnhzYVhOcGIyNXpJR1pwY25OMExseHVJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnSkhOMVlpQXRJSFZzSUdWc1pXMWxiblFnZEdoaGRDQnBjeUJoSUhOMVltMWxiblVnZEc4Z2MyaHZkMXh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUdacGNtVnpJRVJ5YjNCa2IzZHVUV1Z1ZFNOemFHOTNYRzRnSUNBcUwxeHVJQ0JmYzJodmR5Z2tjM1ZpS1NCN1hHNGdJQ0FnZG1GeUlHbGtlQ0E5SUhSb2FYTXVKSFJoWW5NdWFXNWtaWGdvZEdocGN5NGtkR0ZpY3k1bWFXeDBaWElvWm5WdVkzUnBiMjRvYVN3Z1pXd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQWtLR1ZzS1M1bWFXNWtLQ1J6ZFdJcExteGxibWQwYUNBK0lEQTdYRzRnSUNBZ2ZTa3BPMXh1SUNBZ0lIWmhjaUFrYzJsaWN5QTlJQ1J6ZFdJdWNHRnlaVzUwS0Nkc2FTNXBjeTFrY205d1pHOTNiaTF6ZFdKdFpXNTFMWEJoY21WdWRDY3BMbk5wWW14cGJtZHpLQ2RzYVM1cGN5MWtjbTl3Wkc5M2JpMXpkV0p0Wlc1MUxYQmhjbVZ1ZENjcE8xeHVJQ0FnSUhSb2FYTXVYMmhwWkdVb0pITnBZbk1zSUdsa2VDazdYRzRnSUNBZ0pITjFZaTVqYzNNb0ozWnBjMmxpYVd4cGRIa25MQ0FuYUdsa1pHVnVKeWt1WVdSa1EyeGhjM01vSjJwekxXUnliM0JrYjNkdUxXRmpkR2wyWlNjcFhHNGdJQ0FnSUNBZ0lDNXdZWEpsYm5Rb0oyeHBMbWx6TFdSeWIzQmtiM2R1TFhOMVltMWxiblV0Y0dGeVpXNTBKeWt1WVdSa1EyeGhjM01vSjJsekxXRmpkR2wyWlNjcE8xeHVJQ0FnSUhaaGNpQmpiR1ZoY2lBOUlFSnZlQzVKYlU1dmRGUnZkV05vYVc1bldXOTFLQ1J6ZFdJc0lHNTFiR3dzSUhSeWRXVXBPMXh1SUNBZ0lHbG1JQ2doWTJ4bFlYSXBJSHRjYmlBZ0lDQWdJSFpoY2lCdmJHUkRiR0Z6Y3lBOUlIUm9hWE11YjNCMGFXOXVjeTVoYkdsbmJtMWxiblFnUFQwOUlDZHNaV1owSnlBL0lDY3RjbWxuYUhRbklEb2dKeTFzWldaMEp5eGNiaUFnSUNBZ0lDQWdJQ0FrY0dGeVpXNTBUR2tnUFNBa2MzVmlMbkJoY21WdWRDZ25MbWx6TFdSeWIzQmtiM2R1TFhOMVltMWxiblV0Y0dGeVpXNTBKeWs3WEc0Z0lDQWdJQ0FrY0dGeVpXNTBUR2t1Y21WdGIzWmxRMnhoYzNNb1lHOXdaVzV6Skh0dmJHUkRiR0Z6YzMxZ0tTNWhaR1JEYkdGemN5aGdiM0JsYm5NdEpIdDBhR2x6TG05d2RHbHZibk11WVd4cFoyNXRaVzUwZldBcE8xeHVJQ0FnSUNBZ1kyeGxZWElnUFNCQ2IzZ3VTVzFPYjNSVWIzVmphR2x1WjFsdmRTZ2tjM1ZpTENCdWRXeHNMQ0IwY25WbEtUdGNiaUFnSUNBZ0lHbG1JQ2doWTJ4bFlYSXBJSHRjYmlBZ0lDQWdJQ0FnSkhCaGNtVnVkRXhwTG5KbGJXOTJaVU5zWVhOektHQnZjR1Z1Y3kwa2UzUm9hWE11YjNCMGFXOXVjeTVoYkdsbmJtMWxiblI5WUNrdVlXUmtRMnhoYzNNb0oyOXdaVzV6TFdsdWJtVnlKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxtTm9ZVzVuWldRZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmlBZ0lDQWtjM1ZpTG1OemN5Z25kbWx6YVdKcGJHbDBlU2NzSUNjbktUdGNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1Oc2IzTmxUMjVEYkdsamF5a2dleUIwYUdsekxsOWhaR1JDYjJSNVNHRnVaR3hsY2lncE95QjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbWx5WlhNZ2QyaGxiaUIwYUdVZ2JtVjNJR1J5YjNCa2IzZHVJSEJoYm1VZ2FYTWdkbWx6YVdKc1pTNWNiaUFnSUNBZ0tpQkFaWFpsYm5RZ1JISnZjR1J2ZDI1TlpXNTFJM05vYjNkY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExuUnlhV2RuWlhJb0ozTm9iM2N1ZW1ZdVpISnZjR1J2ZDI1dFpXNTFKeXdnV3lSemRXSmRLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSWFXUmxjeUJoSUhOcGJtZHNaU3dnWTNWeWNtVnVkR3g1SUc5d1pXNGdaSEp2Y0dSdmQyNGdjR0Z1WlN3Z2FXWWdjR0Z6YzJWa0lHRWdjR0Z5WVcxbGRHVnlMQ0J2ZEdobGNuZHBjMlVzSUdocFpHVnpJR1YyWlhKNWRHaHBibWN1WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ0pHVnNaVzBnTFNCbGJHVnRaVzUwSUhkcGRHZ2dZU0J6ZFdKdFpXNTFJSFJ2SUdocFpHVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdsa2VDQXRJR2x1WkdWNElHOW1JSFJvWlNBa2RHRmljeUJqYjJ4c1pXTjBhVzl1SUhSdklHaHBaR1ZjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjlvYVdSbEtDUmxiR1Z0TENCcFpIZ3BJSHRjYmlBZ0lDQjJZWElnSkhSdlEyeHZjMlU3WEc0Z0lDQWdhV1lnS0NSbGJHVnRJQ1ltSUNSbGJHVnRMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdKSFJ2UTJ4dmMyVWdQU0FrWld4bGJUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHbGtlQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWtkRzlEYkc5elpTQTlJSFJvYVhNdUpIUmhZbk11Ym05MEtHWjFibU4wYVc5dUtHa3NJR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcElEMDlQU0JwWkhnN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWtkRzlEYkc5elpTQTlJSFJvYVhNdUpHVnNaVzFsYm5RN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCemIyMWxkR2hwYm1kVWIwTnNiM05sSUQwZ0pIUnZRMnh2YzJVdWFHRnpRMnhoYzNNb0oybHpMV0ZqZEdsMlpTY3BJSHg4SUNSMGIwTnNiM05sTG1acGJtUW9KeTVwY3kxaFkzUnBkbVVuS1M1c1pXNW5kR2dnUGlBd08xeHVYRzRnSUNBZ2FXWWdLSE52YldWMGFHbHVaMVJ2UTJ4dmMyVXBJSHRjYmlBZ0lDQWdJQ1IwYjBOc2IzTmxMbVpwYm1Rb0oyeHBMbWx6TFdGamRHbDJaU2NwTG1Ga1pDZ2tkRzlEYkc5elpTa3VZWFIwY2loN1hHNGdJQ0FnSUNBZ0lDZGtZWFJoTFdsekxXTnNhV05ySnpvZ1ptRnNjMlZjYmlBZ0lDQWdJSDBwTG5KbGJXOTJaVU5zWVhOektDZHBjeTFoWTNScGRtVW5LVHRjYmx4dUlDQWdJQ0FnSkhSdlEyeHZjMlV1Wm1sdVpDZ25kV3d1YW5NdFpISnZjR1J2ZDI0dFlXTjBhWFpsSnlrdWNtVnRiM1psUTJ4aGMzTW9KMnB6TFdSeWIzQmtiM2R1TFdGamRHbDJaU2NwTzF4dVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1amFHRnVaMlZrSUh4OElDUjBiME5zYjNObExtWnBibVFvSjI5d1pXNXpMV2x1Ym1WeUp5a3ViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdmJHUkRiR0Z6Y3lBOUlIUm9hWE11YjNCMGFXOXVjeTVoYkdsbmJtMWxiblFnUFQwOUlDZHNaV1owSnlBL0lDZHlhV2RvZENjZ09pQW5iR1ZtZENjN1hHNGdJQ0FnSUNBZ0lDUjBiME5zYjNObExtWnBibVFvSjJ4cExtbHpMV1J5YjNCa2IzZHVMWE4xWW0xbGJuVXRjR0Z5Wlc1MEp5a3VZV1JrS0NSMGIwTnNiM05sS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpXMXZkbVZEYkdGemN5aGdiM0JsYm5NdGFXNXVaWElnYjNCbGJuTXRKSHQwYUdsekxtOXdkR2x2Ym5NdVlXeHBaMjV0Wlc1MGZXQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbUZrWkVOc1lYTnpLR0J2Y0dWdWN5MGtlMjlzWkVOc1lYTnpmV0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5vWVc1blpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdiM0JsYmlCdFpXNTFjeUJoY21VZ1kyeHZjMlZrTGx4dUlDQWdJQ0FnSUNvZ1FHVjJaVzUwSUVSeWIzQmtiM2R1VFdWdWRTTm9hV1JsWEc0Z0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25hR2xrWlM1NlppNWtjbTl3Wkc5M2JtMWxiblVuTENCYkpIUnZRMnh2YzJWZEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1Z6ZEhKdmVYTWdkR2hsSUhCc2RXZHBiaTVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUwxeHVJQ0JmWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0IwYUdsekxpUnRaVzUxU1hSbGJYTXViMlptS0NjdWVtWXVaSEp2Y0dSdmQyNXRaVzUxSnlrdWNtVnRiM1psUVhSMGNpZ25aR0YwWVMxcGN5MWpiR2xqYXljcFhHNGdJQ0FnSUNBZ0lDNXlaVzF2ZG1WRGJHRnpjeWduYVhNdGNtbG5hSFF0WVhKeWIzY2dhWE10YkdWbWRDMWhjbkp2ZHlCcGN5MWtiM2R1TFdGeWNtOTNJRzl3Wlc1ekxYSnBaMmgwSUc5d1pXNXpMV3hsWm5RZ2IzQmxibk10YVc1dVpYSW5LVHRjYmlBZ0lDQWtLR1J2WTNWdFpXNTBMbUp2WkhrcExtOW1aaWduTG5wbUxtUnliM0JrYjNkdWJXVnVkU2NwTzF4dUlDQWdJRTVsYzNRdVFuVnliaWgwYUdsekxpUmxiR1Z0Wlc1MExDQW5aSEp2Y0dSdmQyNG5LVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVSbFptRjFiSFFnYzJWMGRHbHVaM01nWm05eUlIQnNkV2RwYmx4dUlDb3ZYRzVFY205d1pHOTNiazFsYm5VdVpHVm1ZWFZzZEhNZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCRWFYTmhiR3h2ZDNNZ2FHOTJaWElnWlhabGJuUnpJR1p5YjIwZ2IzQmxibWx1WnlCemRXSnRaVzUxYzF4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnS2k5Y2JpQWdaR2x6WVdKc1pVaHZkbVZ5T2lCbVlXeHpaU3hjYmlBZ0x5b3FYRzRnSUNBcUlFRnNiRzkzSUdFZ2MzVmliV1Z1ZFNCMGJ5QmhkWFJ2YldGMGFXTmhiR3g1SUdOc2IzTmxJRzl1SUdFZ2JXOTFjMlZzWldGMlpTQmxkbVZ1ZEN3Z2FXWWdibTkwSUdOc2FXTnJaV1FnYjNCbGJpNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ2RISjFaVnh1SUNBZ0tpOWNiaUFnWVhWMGIyTnNiM05sT2lCMGNuVmxMRnh1SUNBdktpcGNiaUFnSUNvZ1FXMXZkVzUwSUc5bUlIUnBiV1VnZEc4Z1pHVnNZWGtnYjNCbGJtbHVaeUJoSUhOMVltMWxiblVnYjI0Z2FHOTJaWElnWlhabGJuUXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ05UQmNiaUFnSUNvdlhHNGdJR2h2ZG1WeVJHVnNZWGs2SURVd0xGeHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzY2dZU0J6ZFdKdFpXNTFJSFJ2SUc5d1pXNHZjbVZ0WVdsdUlHOXdaVzRnYjI0Z2NHRnlaVzUwSUdOc2FXTnJJR1YyWlc1MExpQkJiR3h2ZDNNZ1kzVnljMjl5SUhSdklHMXZkbVVnWVhkaGVTQm1jbTl0SUcxbGJuVXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCamJHbGphMDl3Wlc0NklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRVzF2ZFc1MElHOW1JSFJwYldVZ2RHOGdaR1ZzWVhrZ1kyeHZjMmx1WnlCaElITjFZbTFsYm5VZ2IyNGdZU0J0YjNWelpXeGxZWFpsSUdWMlpXNTBMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYRzRnSUNBcUlFQmtaV1poZFd4MElEVXdNRnh1SUNBZ0tpOWNibHh1SUNCamJHOXphVzVuVkdsdFpUb2dOVEF3TEZ4dUlDQXZLaXBjYmlBZ0lDb2dVRzl6YVhScGIyNGdiMllnZEdobElHMWxiblVnY21Wc1lYUnBkbVVnZEc4Z2QyaGhkQ0JrYVhKbFkzUnBiMjRnZEdobElITjFZbTFsYm5WeklITm9iM1ZzWkNCdmNHVnVMaUJJWVc1a2JHVmtJR0o1SUVwVExpQkRZVzRnWW1VZ1lDZGhkWFJ2SjJBc0lHQW5iR1ZtZENkZ0lHOXlJR0FuY21sbmFIUW5ZQzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5ZWFYwYnlkY2JpQWdJQ292WEc0Z0lHRnNhV2R1YldWdWREb2dKMkYxZEc4bkxGeHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzY2dZMnhwWTJ0eklHOXVJSFJvWlNCaWIyUjVJSFJ2SUdOc2IzTmxJR0Z1ZVNCdmNHVnVJSE4xWW0xbGJuVnpMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDQXFMMXh1SUNCamJHOXpaVTl1UTJ4cFkyczZJSFJ5ZFdVc1hHNGdJQzhxS2x4dUlDQWdLaUJCYkd4dmR5QmpiR2xqYTNNZ2IyNGdiR1ZoWmlCaGJtTm9iM0lnYkdsdWEzTWdkRzhnWTJ4dmMyVWdZVzU1SUc5d1pXNGdjM1ZpYldWdWRYTXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElIUnlkV1ZjYmlBZ0lDb3ZYRzRnSUdOc2IzTmxUMjVEYkdsamEwbHVjMmxrWlRvZ2RISjFaU3hjYmlBZ0x5b3FYRzRnSUNBcUlFTnNZWE56SUdGd2NHeHBaV1FnZEc4Z2RtVnlkR2xqWVd3Z2IzSnBaVzUwWldRZ2JXVnVkWE1zSUVadmRXNWtZWFJwYjI0Z1pHVm1ZWFZzZENCcGN5QmdkbVZ5ZEdsallXeGdMaUJWY0dSaGRHVWdkR2hwY3lCcFppQjFjMmx1WnlCNWIzVnlJRzkzYmlCamJHRnpjeTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5kbVZ5ZEdsallXd25YRzRnSUNBcUwxeHVJQ0IyWlhKMGFXTmhiRU5zWVhOek9pQW5kbVZ5ZEdsallXd25MRnh1SUNBdktpcGNiaUFnSUNvZ1EyeGhjM01nWVhCd2JHbGxaQ0IwYnlCeWFXZG9kQzF6YVdSbElHOXlhV1Z1ZEdWa0lHMWxiblZ6TENCR2IzVnVaR0YwYVc5dUlHUmxabUYxYkhRZ2FYTWdZR0ZzYVdkdUxYSnBaMmgwWUM0Z1ZYQmtZWFJsSUhSb2FYTWdhV1lnZFhOcGJtY2dlVzkxY2lCdmQyNGdZMnhoYzNNdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSjJGc2FXZHVMWEpwWjJoMEoxeHVJQ0FnS2k5Y2JpQWdjbWxuYUhSRGJHRnpjem9nSjJGc2FXZHVMWEpwWjJoMEp5eGNiaUFnTHlvcVhHNGdJQ0FxSUVKdmIyeGxZVzRnZEc4Z1ptOXlZMlVnYjNabGNtbGtaU0IwYUdVZ1kyeHBZMnRwYm1jZ2IyWWdiR2x1YTNNZ2RHOGdjR1Z5Wm05eWJTQmtaV1poZFd4MElHRmpkR2x2Yml3Z2IyNGdjMlZqYjI1a0lIUnZkV05vSUdWMlpXNTBJR1p2Y2lCdGIySnBiR1V1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJSFJ5ZFdWY2JpQWdJQ292WEc0Z0lHWnZjbU5sUm05c2JHOTNPaUIwY25WbFhHNTlPMXh1WEc1bGVIQnZjblFnZTBSeWIzQmtiM2R1VFdWdWRYMDdYRzRpWFgwPVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmRyb3Bkb3duTWVudS5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5FcXVhbGl6ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5Jyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXInKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDMgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5jb3JlJyk7XG5cbnZhciBfZm91bmRhdGlvbiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi5wbHVnaW4nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEVxdWFsaXplciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uZXF1YWxpemVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXIgaWYgZXF1YWxpemVyIGNvbnRhaW5zIGltYWdlc1xuICovXG5cbnZhciBFcXVhbGl6ZXIgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoRXF1YWxpemVyLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBFcXVhbGl6ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVxdWFsaXplcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEVxdWFsaXplci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEVxdWFsaXplcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVxdWFsaXplciwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgRXF1YWxpemVyXG4gICAgICogQGZpcmVzIEVxdWFsaXplciNpbml0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKHt9LCBFcXVhbGl6ZXIuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ0VxdWFsaXplcic7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIEVxdWFsaXplciBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgZXF1YWxpemVyIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciBlcUlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLWVxdWFsaXplcicpIHx8ICcnO1xuICAgICAgdmFyICR3YXRjaGVkID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1lcXVhbGl6ZXItd2F0Y2g9XCInICsgZXFJZCArICdcIl0nKTtcblxuICAgICAgX2ZvdW5kYXRpb25VdGlsLk1lZGlhUXVlcnkuX2luaXQoKTtcblxuICAgICAgdGhpcy4kd2F0Y2hlZCA9ICR3YXRjaGVkLmxlbmd0aCA/ICR3YXRjaGVkIDogdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1lcXVhbGl6ZXItd2F0Y2hdJyk7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtcmVzaXplJywgZXFJZCB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsMy5HZXRZb0RpZ2l0cykoNiwgJ2VxJykpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLW11dGF0ZScsIGVxSWQgfHwgKDAsIF9mb3VuZGF0aW9uVXRpbDMuR2V0WW9EaWdpdHMpKDYsICdlcScpKTtcblxuICAgICAgdGhpcy5oYXNOZXN0ZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplcl0nKS5sZW5ndGggPiAwO1xuICAgICAgdGhpcy5pc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQucGFyZW50c1VudGlsKGRvY3VtZW50LmJvZHksICdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgICAgdGhpcy5fYmluZEhhbmRsZXIgPSB7XG4gICAgICAgIG9uUmVzaXplTWVCb3VuZDogdGhpcy5fb25SZXNpemVNZS5iaW5kKHRoaXMpLFxuICAgICAgICBvblBvc3RFcXVhbGl6ZWRCb3VuZDogdGhpcy5fb25Qb3N0RXF1YWxpemVkLmJpbmQodGhpcylcbiAgICAgIH07XG5cbiAgICAgIHZhciBpbWdzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKTtcbiAgICAgIHZhciB0b29TbWFsbDtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXF1YWxpemVPbikge1xuICAgICAgICB0b29TbWFsbCA9IHRoaXMuX2NoZWNrTVEoKTtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX2NoZWNrTVEuYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0b29TbWFsbCAhPT0gdW5kZWZpbmVkICYmIHRvb1NtYWxsID09PSBmYWxzZSB8fCB0b29TbWFsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpbWdzLmxlbmd0aCkge1xuICAgICAgICAgICgwLCBfZm91bmRhdGlvblV0aWwyLm9uSW1hZ2VzTG9hZGVkKShpbWdzLCB0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBpZiB0aGUgYnJlYWtwb2ludCBpcyB0b28gc21hbGwuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3BhdXNlRXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BhdXNlRXZlbnRzKCkge1xuICAgICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZih7XG4gICAgICAgICcuemYuZXF1YWxpemVyJzogdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQsXG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kLFxuICAgICAgICAnbXV0YXRlbWUuemYudHJpZ2dlcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyByZXNpemVtZS56Zi50cmlnZ2VyLCB3aXRoIGJvdW5kIHRoaXMgb24gX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19vblJlc2l6ZU1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVzaXplTWUoZSkge1xuICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyBwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19vblBvc3RFcXVhbGl6ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Qb3N0RXF1YWxpemVkKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcy4kZWxlbWVudFswXSkge1xuICAgICAgICB0aGlzLl9yZWZsb3coKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEVxdWFsaXplci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgaWYgKHRoaXMuaGFzTmVzdGVkKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJywgdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmQpO1xuICAgICAgfVxuICAgICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCB0byB0aGUgbWluaW11bSByZXF1aXJlZCBzaXplLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19jaGVja01RJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NoZWNrTVEoKSB7XG4gICAgICB2YXIgdG9vU21hbGwgPSAhX2ZvdW5kYXRpb25VdGlsLk1lZGlhUXVlcnkuaXModGhpcy5vcHRpb25zLmVxdWFsaXplT24pO1xuICAgICAgaWYgKHRvb1NtYWxsKSB7XG4gICAgICAgIGlmICh0aGlzLmlzT24pIHtcbiAgICAgICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXRoaXMuaXNPbikge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9vU21hbGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBub29wIHZlcnNpb24gZm9yIHRoZSBwbHVnaW5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfa2lsbHN3aXRjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9raWxsc3dpdGNoKCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEVxdWFsaXplciB1cG9uIERPTSBjaGFuZ2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcmVmbG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZmxvdygpIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmVxdWFsaXplT25TdGFjaykge1xuICAgICAgICBpZiAodGhpcy5faXNTdGFja2VkKCkpIHtcbiAgICAgICAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXF1YWxpemVCeVJvdykge1xuICAgICAgICB0aGlzLmdldEhlaWdodHNCeVJvdyh0aGlzLmFwcGx5SGVpZ2h0QnlSb3cuYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdldEhlaWdodHModGhpcy5hcHBseUhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYW51YWxseSBkZXRlcm1pbmVzIGlmIHRoZSBmaXJzdCAyIGVsZW1lbnRzIGFyZSAqTk9UKiBzdGFja2VkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pc1N0YWNrZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNTdGFja2VkKCkge1xuICAgICAgaWYgKCF0aGlzLiR3YXRjaGVkWzBdIHx8ICF0aGlzLiR3YXRjaGVkWzFdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoZWRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICE9PSB0aGlzLiR3YXRjaGVkWzFdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgb3V0ZXIgaGVpZ2h0cyBvZiBjaGlsZHJlbiBjb250YWluZWQgd2l0aGluIGFuIEVxdWFsaXplciBwYXJlbnQgYW5kIHJldHVybnMgdGhlbSBpbiBhbiBhcnJheVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQSBub24tb3B0aW9uYWwgY2FsbGJhY2sgdG8gcmV0dXJuIHRoZSBoZWlnaHRzIGFycmF5IHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0SGVpZ2h0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEhlaWdodHMoY2IpIHtcbiAgICAgIHZhciBoZWlnaHRzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLiR3YXRjaGVkW2ldLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgaGVpZ2h0cy5wdXNoKHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0SGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGNiKGhlaWdodHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldEhlaWdodHNCeVJvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEhlaWdodHNCeVJvdyhjYikge1xuICAgICAgdmFyIGxhc3RFbFRvcE9mZnNldCA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoID8gdGhpcy4kd2F0Y2hlZC5maXJzdCgpLm9mZnNldCgpLnRvcCA6IDAsXG4gICAgICAgICAgZ3JvdXBzID0gW10sXG4gICAgICAgICAgZ3JvdXAgPSAwO1xuICAgICAgLy9ncm91cCBieSBSb3dcbiAgICAgIGdyb3Vwc1tncm91cF0gPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLiR3YXRjaGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICAvL21heWJlIGNvdWxkIHVzZSB0aGlzLiR3YXRjaGVkW2ldLm9mZnNldFRvcFxuICAgICAgICB2YXIgZWxPZmZzZXRUb3AgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcy4kd2F0Y2hlZFtpXSkub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAoZWxPZmZzZXRUb3AgIT0gbGFzdEVsVG9wT2Zmc2V0KSB7XG4gICAgICAgICAgZ3JvdXArKztcbiAgICAgICAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgICAgICAgbGFzdEVsVG9wT2Zmc2V0ID0gZWxPZmZzZXRUb3A7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW2dyb3VwXS5wdXNoKFt0aGlzLiR3YXRjaGVkW2ldLCB0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodF0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgbG4gPSBncm91cHMubGVuZ3RoOyBqIDwgbG47IGorKykge1xuICAgICAgICB2YXIgaGVpZ2h0cyA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShncm91cHNbal0pLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgICAgIH0pLmdldCgpO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgICAgIGdyb3Vwc1tqXS5wdXNoKG1heCk7XG4gICAgICB9XG4gICAgICBjYihncm91cHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIENTUyBoZWlnaHQgcHJvcGVydHkgb2YgZWFjaCBjaGlsZCBpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IHRvIG1hdGNoIHRoZSB0YWxsZXN0XG4gICAgICogQHBhcmFtIHthcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUhlaWdodCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5SGVpZ2h0KGhlaWdodHMpIHtcbiAgICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIGFyZSBhcHBsaWVkXG4gICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcblxuICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsIG1heCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdCBieSByb3dcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZHJvd1xuICAgICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZHJvd1xuICAgICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUhlaWdodEJ5Um93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlIZWlnaHRCeVJvdyhncm91cHMpIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIGFyZSBhcHBsaWVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgZ3JvdXBzSUxlbmd0aCA9IGdyb3Vwc1tpXS5sZW5ndGgsXG4gICAgICAgICAgICBtYXggPSBncm91cHNbaV1bZ3JvdXBzSUxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZ3JvdXBzSUxlbmd0aCA8PSAyKSB7XG4gICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGdyb3Vwc1tpXVswXVswXSkuY3NzKHsgJ2hlaWdodCc6ICdhdXRvJyB9KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBwZXIgcm93IGFyZSBhcHBsaWVkXG4gICAgICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZHJvd1xuICAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuSiA9IGdyb3Vwc0lMZW5ndGggLSAxOyBqIDwgbGVuSjsgaisrKSB7XG4gICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGdyb3Vwc1tpXVtqXVswXSkuY3NzKHsgJ2hlaWdodCc6IG1heCB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgcGVyIHJvdyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkcm93XG4gICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVxdWFsaXplcjtcbn0oX2ZvdW5kYXRpb24uUGx1Z2luKTtcblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuXG5cbkVxdWFsaXplci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEVuYWJsZSBoZWlnaHQgZXF1YWxpemF0aW9uIHdoZW4gc3RhY2tlZCBvbiBzbWFsbGVyIHNjcmVlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcXVhbGl6ZU9uU3RhY2s6IGZhbHNlLFxuICAvKipcbiAgICogRW5hYmxlIGhlaWdodCBlcXVhbGl6YXRpb24gcm93IGJ5IHJvdy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVxdWFsaXplQnlSb3c6IGZhbHNlLFxuICAvKipcbiAgICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWluaW11bSBicmVha3BvaW50IHNpemUgdGhlIHBsdWdpbiBzaG91bGQgZXF1YWxpemUgaGVpZ2h0cyBvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgZXF1YWxpemVPbjogJydcbn07XG5cbmV4cG9ydHMuRXF1YWxpemVyID0gRXF1YWxpemVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dVpYRjFZV3hwZW1WeUxtcHpJbDBzSW01aGJXVnpJanBiSWtWeGRXRnNhWHBsY2lJc0ltVnNaVzFsYm5RaUxDSnZjSFJwYjI1eklpd2lKR1ZzWlcxbGJuUWlMQ0lrSWl3aVpYaDBaVzVrSWl3aVpHVm1ZWFZzZEhNaUxDSmtZWFJoSWl3aVkyeGhjM05PWVcxbElpd2lYMmx1YVhRaUxDSmxjVWxrSWl3aVlYUjBjaUlzSWlSM1lYUmphR1ZrSWl3aVptbHVaQ0lzSWsxbFpHbGhVWFZsY25raUxDSnNaVzVuZEdnaUxDSm9ZWE5PWlhOMFpXUWlMQ0pwYzA1bGMzUmxaQ0lzSW5CaGNtVnVkSE5WYm5ScGJDSXNJbVJ2WTNWdFpXNTBJaXdpWW05a2VTSXNJbWx6VDI0aUxDSmZZbWx1WkVoaGJtUnNaWElpTENKdmJsSmxjMmw2WlUxbFFtOTFibVFpTENKZmIyNVNaWE5wZW1WTlpTSXNJbUpwYm1RaUxDSnZibEJ2YzNSRmNYVmhiR2w2WldSQ2IzVnVaQ0lzSWw5dmJsQnZjM1JGY1hWaGJHbDZaV1FpTENKcGJXZHpJaXdpZEc5dlUyMWhiR3dpTENKbGNYVmhiR2w2WlU5dUlpd2lYMk5vWldOclRWRWlMQ0ozYVc1a2IzY2lMQ0p2YmlJc0lsOWxkbVZ1ZEhNaUxDSjFibVJsWm1sdVpXUWlMQ0pmY21WbWJHOTNJaXdpYjJabUlpd2laU0lzSW5SaGNtZGxkQ0lzSWw5MGFHbHpJaXdpWDNCaGRYTmxSWFpsYm5Seklpd2lhWE1pTENKamMzTWlMQ0psY1hWaGJHbDZaVTl1VTNSaFkyc2lMQ0pmYVhOVGRHRmphMlZrSWl3aVpYRjFZV3hwZW1WQ2VWSnZkeUlzSW1kbGRFaGxhV2RvZEhOQ2VWSnZkeUlzSW1Gd2NHeDVTR1ZwWjJoMFFubFNiM2NpTENKblpYUklaV2xuYUhSeklpd2lZWEJ3YkhsSVpXbG5hSFFpTENKblpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUWlMQ0owYjNBaUxDSmpZaUlzSW1obGFXZG9kSE1pTENKcElpd2liR1Z1SWl3aWMzUjViR1VpTENKb1pXbG5hSFFpTENKd2RYTm9JaXdpYjJabWMyVjBTR1ZwWjJoMElpd2liR0Z6ZEVWc1ZHOXdUMlptYzJWMElpd2labWx5YzNRaUxDSnZabVp6WlhRaUxDSm5jbTkxY0hNaUxDSm5jbTkxY0NJc0ltVnNUMlptYzJWMFZHOXdJaXdpYWlJc0lteHVJaXdpYldGd0lpd2laMlYwSWl3aWJXRjRJaXdpVFdGMGFDSXNJbUZ3Y0d4NUlpd2lkSEpwWjJkbGNpSXNJbWR5YjNWd2MwbE1aVzVuZEdnaUxDSnNaVzVLSWl3aVVHeDFaMmx1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenM3TzBGQlJVRTdPenM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdPenM3T3pzN096dEJRVVZCT3pzN096czdPMGxCVDAxQkxGTTdPenM3T3pzN096czdPenRCUVVOS096czdPenM3T3pzeVFrRlJUME1zVHl4RlFVRlRReXhQTEVWQlFWRTdRVUZEZEVJc1YwRkJTME1zVVVGQlRDeEhRVUZuUWtZc1QwRkJhRUk3UVVGRFFTeFhRVUZMUXl4UFFVRk1MRWRCUVdkQ1JTeHBRa0ZCUlVNc1RVRkJSaXhEUVVGVExFVkJRVlFzUlVGQllVd3NWVUZCVlUwc1VVRkJka0lzUlVGQmFVTXNTMEZCUzBnc1VVRkJUQ3hEUVVGalNTeEpRVUZrTEVWQlFXcERMRVZCUVhWRVRDeFBRVUYyUkN4RFFVRm9RanRCUVVOQkxGZEJRVXROTEZOQlFVd3NSMEZCYVVJc1YwRkJha0lzUTBGSWMwSXNRMEZIVVRzN1FVRkZPVUlzVjBGQlMwTXNTMEZCVER0QlFVTkVPenRCUVVWRU96czdPenM3T3pSQ1FVbFJPMEZCUTA0c1ZVRkJTVU1zVDBGQlR5eExRVUZMVUN4UlFVRk1MRU5CUVdOUkxFbEJRV1FzUTBGQmJVSXNaMEpCUVc1Q0xFdEJRWGRETEVWQlFXNUVPMEZCUTBFc1ZVRkJTVU1zVjBGQlZ5eExRVUZMVkN4UlFVRk1MRU5CUVdOVkxFbEJRV1FzTmtKQlFUWkRTQ3hKUVVFM1F5eFJRVUZtT3p0QlFVVkJTU3hwUTBGQlYwd3NTMEZCV0RzN1FVRkZRU3hYUVVGTFJ5eFJRVUZNTEVkQlFXZENRU3hUUVVGVFJ5eE5RVUZVTEVkQlFXdENTQ3hSUVVGc1FpeEhRVUUyUWl4TFFVRkxWQ3hSUVVGTUxFTkJRV05WTEVsQlFXUXNRMEZCYlVJc2QwSkJRVzVDTEVOQlFUZERPMEZCUTBFc1YwRkJTMVlzVVVGQlRDeERRVUZqVVN4SlFVRmtMRU5CUVcxQ0xHRkJRVzVDTEVWQlFXMURSQ3hSUVVGUkxHdERRVUZaTEVOQlFWb3NSVUZCWlN4SlFVRm1MRU5CUVRORE8wRkJRMEVzVjBGQlMxQXNVVUZCVEN4RFFVRmpVU3hKUVVGa0xFTkJRVzFDTEdGQlFXNUNMRVZCUVcxRFJDeFJRVUZSTEd0RFFVRlpMRU5CUVZvc1JVRkJaU3hKUVVGbUxFTkJRVE5ET3p0QlFVVkJMRmRCUVV0TkxGTkJRVXdzUjBGQmFVSXNTMEZCUzJJc1VVRkJUQ3hEUVVGalZTeEpRVUZrTEVOQlFXMUNMR3RDUVVGdVFpeEZRVUYxUTBVc1RVRkJka01zUjBGQlowUXNRMEZCYWtVN1FVRkRRU3hYUVVGTFJTeFJRVUZNTEVkQlFXZENMRXRCUVV0a0xGRkJRVXdzUTBGQlkyVXNXVUZCWkN4RFFVRXlRa01zVTBGQlUwTXNTVUZCY0VNc1JVRkJNRU1zYTBKQlFURkRMRVZCUVRoRVRDeE5RVUU1UkN4SFFVRjFSU3hEUVVGMlJqdEJRVU5CTEZkQlFVdE5MRWxCUVV3c1IwRkJXU3hMUVVGYU8wRkJRMEVzVjBGQlMwTXNXVUZCVEN4SFFVRnZRanRCUVVOc1FrTXNlVUpCUVdsQ0xFdEJRVXRETEZkQlFVd3NRMEZCYVVKRExFbEJRV3BDTEVOQlFYTkNMRWxCUVhSQ0xFTkJSRU03UVVGRmJFSkRMRGhDUVVGelFpeExRVUZMUXl4blFrRkJUQ3hEUVVGelFrWXNTVUZCZEVJc1EwRkJNa0lzU1VGQk0wSTdRVUZHU2l4UFFVRndRanM3UVVGTFFTeFZRVUZKUnl4UFFVRlBMRXRCUVV0NlFpeFJRVUZNTEVOQlFXTlZMRWxCUVdRc1EwRkJiVUlzUzBGQmJrSXNRMEZCV0R0QlFVTkJMRlZCUVVsblFpeFJRVUZLTzBGQlEwRXNWVUZCUnl4TFFVRkxNMElzVDBGQlRDeERRVUZoTkVJc1ZVRkJhRUlzUlVGQk1rSTdRVUZEZWtKRUxHMUNRVUZYTEV0QlFVdEZMRkZCUVV3c1JVRkJXRHRCUVVOQkxEaENRVUZGUXl4TlFVRkdMRVZCUVZWRExFVkJRVllzUTBGQllTeDFRa0ZCWWl4RlFVRnpReXhMUVVGTFJpeFJRVUZNTEVOQlFXTk9MRWxCUVdRc1EwRkJiVUlzU1VGQmJrSXNRMEZCZEVNN1FVRkRSQ3hQUVVoRUxFMUJSMHM3UVVGRFNDeGhRVUZMVXl4UFFVRk1PMEZCUTBRN1FVRkRSQ3hWUVVGSlRDeGhRVUZoVFN4VFFVRmlMRWxCUVRCQ1RpeGhRVUZoTEV0QlFYaERMRWxCUVd0RVFTeGhRVUZoVFN4VFFVRnNSU3hGUVVFMFJUdEJRVU14UlN4WlFVRkhVQ3hMUVVGTFlpeE5RVUZTTEVWQlFXVTdRVUZEWWl3clEwRkJaV0VzU1VGQlppeEZRVUZ4UWl4TFFVRkxVU3hQUVVGTUxFTkJRV0ZZTEVsQlFXSXNRMEZCYTBJc1NVRkJiRUlzUTBGQmNrSTdRVUZEUkN4VFFVWkVMRTFCUlVzN1FVRkRTQ3hsUVVGTFZ5eFBRVUZNTzBGQlEwUTdRVUZEUmp0QlFVTkdPenRCUVVWRU96czdPenM3TzIxRFFVbGxPMEZCUTJJc1YwRkJTMllzU1VGQlRDeEhRVUZaTEV0QlFWbzdRVUZEUVN4WFFVRkxiRUlzVVVGQlRDeERRVUZqYTBNc1IwRkJaQ3hEUVVGclFqdEJRVU5vUWl4NVFrRkJhVUlzUzBGQlMyWXNXVUZCVEN4RFFVRnJRa2tzYjBKQlJHNUNPMEZCUldoQ0xDdENRVUYxUWl4TFFVRkxTaXhaUVVGTUxFTkJRV3RDUXl4bFFVWjZRanRCUVVkdVFpd3JRa0ZCZFVJc1MwRkJTMFFzV1VGQlRDeERRVUZyUWtNN1FVRklkRUlzVDBGQmJFSTdRVUZMUkRzN1FVRkZSRHM3T3pzN096dG5RMEZKV1dVc1F5eEZRVUZITzBGQlEySXNWMEZCUzBZc1QwRkJURHRCUVVORU96dEJRVVZFT3pzN096czdPM0ZEUVVscFFrVXNReXhGUVVGSE8wRkJRMnhDTEZWQlFVZEJMRVZCUVVWRExFMUJRVVlzUzBGQllTeExRVUZMY0VNc1VVRkJUQ3hEUVVGakxFTkJRV1FzUTBGQmFFSXNSVUZCYVVNN1FVRkJSU3hoUVVGTGFVTXNUMEZCVER0QlFVRnBRanRCUVVOeVJEczdRVUZGUkRzN096czdPenM0UWtGSlZUdEJRVU5TTEZWQlFVbEpMRkZCUVZFc1NVRkJXanRCUVVOQkxGZEJRVXRETEZsQlFVdzdRVUZEUVN4VlFVRkhMRXRCUVV0NlFpeFRRVUZTTEVWQlFXdENPMEZCUTJoQ0xHRkJRVXRpTEZGQlFVd3NRMEZCWXpoQ0xFVkJRV1FzUTBGQmFVSXNORUpCUVdwQ0xFVkJRU3RETEV0QlFVdFlMRmxCUVV3c1EwRkJhMEpKTEc5Q1FVRnFSVHRCUVVORUxFOUJSa1FzVFVGRlN6dEJRVU5JTEdGQlFVdDJRaXhSUVVGTUxFTkJRV000UWl4RlFVRmtMRU5CUVdsQ0xIRkNRVUZxUWl4RlFVRjNReXhMUVVGTFdDeFpRVUZNTEVOQlFXdENReXhsUVVFeFJEdEJRVU5JTEdGQlFVdHdRaXhSUVVGTUxFTkJRV000UWl4RlFVRmtMRU5CUVdsQ0xIRkNRVUZxUWl4RlFVRjNReXhMUVVGTFdDeFpRVUZNTEVOQlFXdENReXhsUVVFeFJEdEJRVU5GTzBGQlEwUXNWMEZCUzBZc1NVRkJUQ3hIUVVGWkxFbEJRVm83UVVGRFJEczdRVUZGUkRzN096czdPenNyUWtGSlZ6dEJRVU5VTEZWQlFVbFJMRmRCUVZjc1EwRkJRMllzTWtKQlFWYzBRaXhGUVVGWUxFTkJRV01zUzBGQlMzaERMRTlCUVV3c1EwRkJZVFJDTEZWQlFUTkNMRU5CUVdoQ08wRkJRMEVzVlVGQlIwUXNVVUZCU0N4RlFVRlpPMEZCUTFZc1dVRkJSeXhMUVVGTFVpeEpRVUZTTEVWQlFXRTdRVUZEV0N4bFFVRkxiMElzV1VGQlREdEJRVU5CTEdWQlFVczNRaXhSUVVGTUxFTkJRV01yUWl4SFFVRmtMRU5CUVd0Q0xGRkJRV3hDTEVWQlFUUkNMRTFCUVRWQ08wRkJRMFE3UVVGRFJpeFBRVXhFTEUxQlMwczdRVUZEU0N4WlFVRkhMRU5CUVVNc1MwRkJTM1JDTEVsQlFWUXNSVUZCWXp0QlFVTmFMR1ZCUVV0aExFOUJRVXc3UVVGRFJEdEJRVU5HTzBGQlEwUXNZVUZCVDB3c1VVRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPMnREUVVsak8wRkJRMW83UVVGRFJEczdRVUZGUkRzN096czdPenM0UWtGSlZUdEJRVU5TTEZWQlFVY3NRMEZCUXl4TFFVRkxNMElzVDBGQlRDeERRVUZoTUVNc1pVRkJha0lzUlVGQmFVTTdRVUZETDBJc1dVRkJSeXhMUVVGTFF5eFZRVUZNTEVWQlFVZ3NSVUZCY1VJN1FVRkRia0lzWlVGQlMycERMRkZCUVV3c1EwRkJZeXRDTEVkQlFXUXNRMEZCYTBJc1VVRkJiRUlzUlVGQk5FSXNUVUZCTlVJN1FVRkRRU3hwUWtGQlR5eExRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkVMRlZCUVVrc1MwRkJTM3BETEU5QlFVd3NRMEZCWVRSRExHRkJRV3BDTEVWQlFXZERPMEZCUXpsQ0xHRkJRVXRETEdWQlFVd3NRMEZCY1VJc1MwRkJTME1zWjBKQlFVd3NRMEZCYzBKMlFpeEpRVUYwUWl4RFFVRXlRaXhKUVVFelFpeERRVUZ5UWp0QlFVTkVMRTlCUmtRc1RVRkZTenRCUVVOSUxHRkJRVXQzUWl4VlFVRk1MRU5CUVdkQ0xFdEJRVXRETEZkQlFVd3NRMEZCYVVKNlFpeEpRVUZxUWl4RFFVRnpRaXhKUVVGMFFpeERRVUZvUWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdhVU5CU1dFN1FVRkRXQ3hWUVVGSkxFTkJRVU1zUzBGQlMySXNVVUZCVEN4RFFVRmpMRU5CUVdRc1EwRkJSQ3hKUVVGeFFpeERRVUZETEV0QlFVdEJMRkZCUVV3c1EwRkJZeXhEUVVGa0xFTkJRVEZDTEVWQlFUUkRPMEZCUXpGRExHVkJRVThzU1VGQlVEdEJRVU5FTzBGQlEwUXNZVUZCVHl4TFFVRkxRU3hSUVVGTUxFTkJRV01zUTBGQlpDeEZRVUZwUW5WRExIRkNRVUZxUWl4SFFVRjVRME1zUjBGQmVrTXNTMEZCYVVRc1MwRkJTM2hETEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ2RVTXNjVUpCUVdwQ0xFZEJRWGxEUXl4SFFVRnFSenRCUVVORU96dEJRVVZFT3pzN096czdPenNyUWtGTFYwTXNSU3hGUVVGSk8wRkJRMklzVlVGQlNVTXNWVUZCVlN4RlFVRmtPMEZCUTBFc1YwRkJTU3hKUVVGSlF5eEpRVUZKTEVOQlFWSXNSVUZCVjBNc1RVRkJUU3hMUVVGTE5VTXNVVUZCVEN4RFFVRmpSeXhOUVVGdVF5eEZRVUV5UTNkRExFbEJRVWxETEVkQlFTOURMRVZCUVc5RVJDeEhRVUZ3UkN4RlFVRjNSRHRCUVVOMFJDeGhRVUZMTTBNc1VVRkJUQ3hEUVVGak1rTXNRMEZCWkN4RlFVRnBRa1VzUzBGQmFrSXNRMEZCZFVKRExFMUJRWFpDTEVkQlFXZERMRTFCUVdoRE8wRkJRMEZLTEdkQ1FVRlJTeXhKUVVGU0xFTkJRV0VzUzBGQlN5OURMRkZCUVV3c1EwRkJZekpETEVOQlFXUXNSVUZCYVVKTExGbEJRVGxDTzBGQlEwUTdRVUZEUkZBc1UwRkJSME1zVDBGQlNEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dHZRMEZMWjBKRUxFVXNSVUZCU1R0QlFVTnNRaXhWUVVGSlVTeHJRa0ZCYlVJc1MwRkJTMnBFTEZGQlFVd3NRMEZCWTBjc1RVRkJaQ3hIUVVGMVFpeExRVUZMU0N4UlFVRk1MRU5CUVdOclJDeExRVUZrTEVkQlFYTkNReXhOUVVGMFFpeEhRVUVyUWxnc1IwRkJkRVFzUjBGQk5FUXNRMEZCYmtZN1FVRkJRU3hWUVVOSldTeFRRVUZUTEVWQlJHSTdRVUZCUVN4VlFVVkpReXhSUVVGUkxFTkJSbG83UVVGSFFUdEJRVU5CUkN4aFFVRlBReXhMUVVGUUxFbEJRV2RDTEVWQlFXaENPMEZCUTBFc1YwRkJTU3hKUVVGSlZpeEpRVUZKTEVOQlFWSXNSVUZCVjBNc1RVRkJUU3hMUVVGTE5VTXNVVUZCVEN4RFFVRmpSeXhOUVVGdVF5eEZRVUV5UTNkRExFbEJRVWxETEVkQlFTOURMRVZCUVc5RVJDeEhRVUZ3UkN4RlFVRjNSRHRCUVVOMFJDeGhRVUZMTTBNc1VVRkJUQ3hEUVVGak1rTXNRMEZCWkN4RlFVRnBRa1VzUzBGQmFrSXNRMEZCZFVKRExFMUJRWFpDTEVkQlFXZERMRTFCUVdoRE8wRkJRMEU3UVVGRFFTeFpRVUZKVVN4alFVRmpMSE5DUVVGRkxFdEJRVXQwUkN4UlFVRk1MRU5CUVdNeVF5eERRVUZrTEVOQlFVWXNSVUZCYjBKUkxFMUJRWEJDTEVkQlFUWkNXQ3hIUVVFdlF6dEJRVU5CTEZsQlFVbGpMR1ZCUVdGTUxHVkJRV3BDTEVWQlFXdERPMEZCUTJoRFNUdEJRVU5CUkN4cFFrRkJUME1zUzBGQlVDeEpRVUZuUWl4RlFVRm9RanRCUVVOQlNpdzBRa0ZCWjBKTExGZEJRV2hDTzBGQlEwUTdRVUZEUkVZc1pVRkJUME1zUzBGQlVDeEZRVUZqVGl4SlFVRmtMRU5CUVcxQ0xFTkJRVU1zUzBGQlN5OURMRkZCUVV3c1EwRkJZekpETEVOQlFXUXNRMEZCUkN4RlFVRnJRaXhMUVVGTE0wTXNVVUZCVEN4RFFVRmpNa01zUTBGQlpDeEZRVUZwUWtzc1dVRkJia01zUTBGQmJrSTdRVUZEUkRzN1FVRkZSQ3hYUVVGTExFbEJRVWxQTEVsQlFVa3NRMEZCVWl4RlFVRlhReXhMUVVGTFNpeFBRVUZQYWtRc1RVRkJOVUlzUlVGQmIwTnZSQ3hKUVVGSlF5eEZRVUY0UXl4RlFVRTBRMFFzUjBGQk5VTXNSVUZCYVVRN1FVRkRMME1zV1VGQlNXSXNWVUZCVlN4elFrRkJSVlVzVDBGQlQwY3NRMEZCVUN4RFFVRkdMRVZCUVdGRkxFZEJRV0lzUTBGQmFVSXNXVUZCVlR0QlFVRkZMR2xDUVVGUExFdEJRVXNzUTBGQlRDeERRVUZRTzBGQlFXbENMRk5CUVRsRExFVkJRV2RFUXl4SFFVRm9SQ3hGUVVGa08wRkJRMEVzV1VGQlNVTXNUVUZCWTBNc1MwRkJTMFFzUjBGQlRDeERRVUZUUlN4TFFVRlVMRU5CUVdVc1NVRkJaaXhGUVVGeFFtNUNMRTlCUVhKQ0xFTkJRV3hDTzBGQlEwRlZMR1ZCUVU5SExFTkJRVkFzUlVGQlZWSXNTVUZCVml4RFFVRmxXU3hIUVVGbU8wRkJRMFE3UVVGRFJHeENMRk5CUVVkWExFMUJRVWc3UVVGRFJEczdRVUZGUkRzN096czdPenM3TzJkRFFVMVpWaXhQTEVWQlFWTTdRVUZEYmtJc1ZVRkJTV2xDTEUxQlFVMURMRXRCUVV0RUxFZEJRVXdzUTBGQlUwVXNTMEZCVkN4RFFVRmxMRWxCUVdZc1JVRkJjVUp1UWl4UFFVRnlRaXhEUVVGV08wRkJRMEU3T3pzN1FVRkpRU3hYUVVGTGJrUXNVVUZCVEN4RFFVRmpkVVVzVDBGQlpDeERRVUZ6UWl3eVFrRkJkRUk3TzBGQlJVRXNWMEZCU3psRUxGRkJRVXdzUTBGQll5dENMRWRCUVdRc1EwRkJhMElzVVVGQmJFSXNSVUZCTkVJMFFpeEhRVUUxUWpzN1FVRkZRVHM3T3p0QlFVbERMRmRCUVV0d1JTeFJRVUZNTEVOQlFXTjFSU3hQUVVGa0xFTkJRWE5DTERSQ1FVRjBRanRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3p0eFEwRlJhVUpXTEUwc1JVRkJVVHRCUVVOMlFqczdPMEZCUjBFc1YwRkJTemRFTEZGQlFVd3NRMEZCWTNWRkxFOUJRV1FzUTBGQmMwSXNNa0pCUVhSQ08wRkJRMEVzVjBGQlN5eEpRVUZKYmtJc1NVRkJTU3hEUVVGU0xFVkJRVmRETEUxQlFVMVJMRTlCUVU5cVJDeE5RVUUzUWl4RlFVRnhRM2RETEVsQlFVbERMRWRCUVhwRExFVkJRU3REUkN4SFFVRXZReXhGUVVGdlJEdEJRVU5zUkN4WlFVRkpiMElzWjBKQlFXZENXQ3hQUVVGUFZDeERRVUZRTEVWQlFWVjRReXhOUVVFNVFqdEJRVUZCTEZsQlEwbDNSQ3hOUVVGTlVDeFBRVUZQVkN4RFFVRlFMRVZCUVZWdlFpeG5Ra0ZCWjBJc1EwRkJNVUlzUTBGRVZqdEJRVVZCTEZsQlFVbEJMR2xDUVVGbExFTkJRVzVDTEVWQlFYTkNPMEZCUTNCQ0xHZERRVUZGV0N4UFFVRlBWQ3hEUVVGUUxFVkJRVlVzUTBGQlZpeEZRVUZoTEVOQlFXSXNRMEZCUml4RlFVRnRRbG9zUjBGQmJrSXNRMEZCZFVJc1JVRkJReXhWUVVGVExFMUJRVllzUlVGQmRrSTdRVUZEUVR0QlFVTkVPMEZCUTBRN096czdRVUZKUVN4aFFVRkxlRU1zVVVGQlRDeERRVUZqZFVVc1QwRkJaQ3hEUVVGelFpdzRRa0ZCZEVJN1FVRkRRU3hoUVVGTExFbEJRVWxRTEVsQlFVa3NRMEZCVWl4RlFVRlhVeXhQUVVGUlJDeG5Ra0ZCWXl4RFFVRjBReXhGUVVFd1ExSXNTVUZCU1ZNc1NVRkJPVU1zUlVGQmNVUlVMRWRCUVhKRUxFVkJRVEJFTzBGQlEzaEVMR2REUVVGRlNDeFBRVUZQVkN4RFFVRlFMRVZCUVZWWkxFTkJRVllzUlVGQllTeERRVUZpTEVOQlFVWXNSVUZCYlVKNFFpeEhRVUZ1UWl4RFFVRjFRaXhGUVVGRExGVkJRVk0wUWl4SFFVRldMRVZCUVhaQ08wRkJRMFE3UVVGRFJEczdPenRCUVVsQkxHRkJRVXR3UlN4UlFVRk1MRU5CUVdOMVJTeFBRVUZrTEVOQlFYTkNMQ3RDUVVGMFFqdEJRVU5FTzBGQlEwUTdPenRCUVVkRExGZEJRVXQyUlN4UlFVRk1MRU5CUVdOMVJTeFBRVUZrTEVOQlFYTkNMRFJDUVVGMFFqdEJRVU5HT3p0QlFVVkVPenM3T3pzN095dENRVWxYTzBGQlExUXNWMEZCUzJwRExGbEJRVXc3UVVGRFFTeFhRVUZMTjBJc1VVRkJUQ3hEUVVGakswSXNSMEZCWkN4RFFVRnJRaXhSUVVGc1FpeEZRVUUwUWl4TlFVRTFRanRCUVVORU96czdPMFZCYUZKeFFtdERMR3RDT3p0QlFXMVNlRUk3T3pzN08wRkJSMEUzUlN4VlFVRlZUU3hSUVVGV0xFZEJRWEZDTzBGQlEyNUNPenM3T3pzN1FVRk5RWE5ETEcxQ1FVRnBRaXhMUVZCRk8wRkJVVzVDT3pzN096czdRVUZOUVVVc2FVSkJRV1VzUzBGa1NUdEJRV1Z1UWpzN096czdPMEZCVFVGb1FpeGpRVUZaTzBGQmNrSlBMRU5CUVhKQ096dFJRWGRDVVRsQ0xGTXNSMEZCUVVFc1V5SXNJbVpwYkdVaU9pSm1iM1Z1WkdGMGFXOXVMbVZ4ZFdGc2FYcGxjaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXMXdiM0owSUNRZ1puSnZiU0FuYW5GMVpYSjVKenRjYm1sdGNHOXlkQ0I3SUUxbFpHbGhVWFZsY25rZ2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVkWFJwYkM1dFpXUnBZVkYxWlhKNUp6dGNibWx0Y0c5eWRDQjdJRzl1U1cxaFoyVnpURzloWkdWa0lIMGdabkp2YlNBbkxpOW1iM1Z1WkdGMGFXOXVMblYwYVd3dWFXMWhaMlZNYjJGa1pYSW5PMXh1YVcxd2IzSjBJSHNnUjJWMFdXOUVhV2RwZEhNZ2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVkWFJwYkM1amIzSmxKenRjYm1sdGNHOXlkQ0I3SUZCc2RXZHBiaUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1d2JIVm5hVzRuTzF4dVhHNHZLaXBjYmlBcUlFVnhkV0ZzYVhwbGNpQnRiMlIxYkdVdVhHNGdLaUJBYlc5a2RXeGxJR1p2ZFc1a1lYUnBiMjR1WlhGMVlXeHBlbVZ5WEc0Z0tpQkFjbVZ4ZFdseVpYTWdabTkxYm1SaGRHbHZiaTUxZEdsc0xtMWxaR2xoVVhWbGNubGNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxuVjBhV3d1YVcxaFoyVk1iMkZrWlhJZ2FXWWdaWEYxWVd4cGVtVnlJR052Ym5SaGFXNXpJR2x0WVdkbGMxeHVJQ292WEc1Y2JtTnNZWE56SUVWeGRXRnNhWHBsY2lCbGVIUmxibVJ6SUZCc2RXZHBiaUI3WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdWeklHRWdibVYzSUdsdWMzUmhibU5sSUc5bUlFVnhkV0ZzYVhwbGNpNWNiaUFnSUNvZ1FHTnNZWE56WEc0Z0lDQXFJRUJ1WVcxbElFVnhkV0ZzYVhwbGNseHVJQ0FnS2lCQVptbHlaWE1nUlhGMVlXeHBlbVZ5STJsdWFYUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdWc1pXMWxiblFnTFNCcVVYVmxjbmtnYjJKcVpXTjBJSFJ2SUdGa1pDQjBhR1VnZEhKcFoyZGxjaUIwYnk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JQZG1WeWNtbGtaWE1nZEc4Z2RHaGxJR1JsWm1GMWJIUWdjR3gxWjJsdUlITmxkSFJwYm1kekxseHVJQ0FnS2k5Y2JpQWdYM05sZEhWd0tHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcGUxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUWdQU0JsYkdWdFpXNTBPMXh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUFnUFNBa0xtVjRkR1Z1WkNoN2ZTd2dSWEYxWVd4cGVtVnlMbVJsWm1GMWJIUnpMQ0IwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvS1N3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZEdocGN5NWpiR0Z6YzA1aGJXVWdQU0FuUlhGMVlXeHBlbVZ5SnpzZ0x5OGdhV1U1SUdKaFkyc2dZMjl0Y0dGMFhHNWNiaUFnSUNCMGFHbHpMbDlwYm1sMEtDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ2RHaGxJRVZ4ZFdGc2FYcGxjaUJ3YkhWbmFXNGdZVzVrSUdOaGJHeHpJR1oxYm1OMGFXOXVjeUIwYnlCblpYUWdaWEYxWVd4cGVtVnlJR1oxYm1OMGFXOXVhVzVuSUc5dUlHeHZZV1F1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmYVc1cGRDZ3BJSHRjYmlBZ0lDQjJZWElnWlhGSlpDQTlJSFJvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWduWkdGMFlTMWxjWFZoYkdsNlpYSW5LU0I4ZkNBbkp6dGNiaUFnSUNCMllYSWdKSGRoZEdOb1pXUWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvWUZ0a1lYUmhMV1Z4ZFdGc2FYcGxjaTEzWVhSamFEMWNJaVI3WlhGSlpIMWNJbDFnS1R0Y2JseHVJQ0FnSUUxbFpHbGhVWFZsY25rdVgybHVhWFFvS1R0Y2JseHVJQ0FnSUhSb2FYTXVKSGRoZEdOb1pXUWdQU0FrZDJGMFkyaGxaQzVzWlc1bmRHZ2dQeUFrZDJGMFkyaGxaQ0E2SUhSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNnblcyUmhkR0V0WlhGMVlXeHBlbVZ5TFhkaGRHTm9YU2NwTzF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWduWkdGMFlTMXlaWE5wZW1VbkxDQW9aWEZKWkNCOGZDQkhaWFJaYjBScFoybDBjeWcyTENBblpYRW5LU2twTzF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWduWkdGMFlTMXRkWFJoZEdVbkxDQW9aWEZKWkNCOGZDQkhaWFJaYjBScFoybDBjeWcyTENBblpYRW5LU2twTzF4dVhHNGdJQ0FnZEdocGN5NW9ZWE5PWlhOMFpXUWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvSjF0a1lYUmhMV1Z4ZFdGc2FYcGxjbDBuS1M1c1pXNW5kR2dnUGlBd08xeHVJQ0FnSUhSb2FYTXVhWE5PWlhOMFpXUWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExuQmhjbVZ1ZEhOVmJuUnBiQ2hrYjJOMWJXVnVkQzVpYjJSNUxDQW5XMlJoZEdFdFpYRjFZV3hwZW1WeVhTY3BMbXhsYm1kMGFDQStJREE3WEc0Z0lDQWdkR2hwY3k1cGMwOXVJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmWW1sdVpFaGhibVJzWlhJZ1BTQjdYRzRnSUNBZ0lDQnZibEpsYzJsNlpVMWxRbTkxYm1RNklIUm9hWE11WDI5dVVtVnphWHBsVFdVdVltbHVaQ2gwYUdsektTeGNiaUFnSUNBZ0lHOXVVRzl6ZEVWeGRXRnNhWHBsWkVKdmRXNWtPaUIwYUdsekxsOXZibEJ2YzNSRmNYVmhiR2w2WldRdVltbHVaQ2gwYUdsektWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCMllYSWdhVzFuY3lBOUlIUm9hWE11SkdWc1pXMWxiblF1Wm1sdVpDZ25hVzFuSnlrN1hHNGdJQ0FnZG1GeUlIUnZiMU50WVd4c08xeHVJQ0FnSUdsbUtIUm9hWE11YjNCMGFXOXVjeTVsY1hWaGJHbDZaVTl1S1h0Y2JpQWdJQ0FnSUhSdmIxTnRZV3hzSUQwZ2RHaHBjeTVmWTJobFkydE5VU2dwTzF4dUlDQWdJQ0FnSkNoM2FXNWtiM2NwTG05dUtDZGphR0Z1WjJWa0xucG1MbTFsWkdsaGNYVmxjbmtuTENCMGFHbHpMbDlqYUdWamEwMVJMbUpwYm1Rb2RHaHBjeWtwTzF4dUlDQWdJSDFsYkhObGUxeHVJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUnpLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1LQ2gwYjI5VGJXRnNiQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFJ2YjFOdFlXeHNJRDA5UFNCbVlXeHpaU2tnZkh3Z2RHOXZVMjFoYkd3Z1BUMDlJSFZ1WkdWbWFXNWxaQ2w3WEc0Z0lDQWdJQ0JwWmlocGJXZHpMbXhsYm1kMGFDbDdYRzRnSUNBZ0lDQWdJRzl1U1cxaFoyVnpURzloWkdWa0tHbHRaM01zSUhSb2FYTXVYM0psWm14dmR5NWlhVzVrS0hSb2FYTXBLVHRjYmlBZ0lDQWdJSDFsYkhObGUxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXWnNiM2NvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnRiM1psY3lCbGRtVnVkQ0JzYVhOMFpXNWxjbk1nYVdZZ2RHaGxJR0p5WldGcmNHOXBiblFnYVhNZ2RHOXZJSE50WVd4c0xseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gzQmhkWE5sUlhabGJuUnpLQ2tnZTF4dUlDQWdJSFJvYVhNdWFYTlBiaUE5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjJabUtIdGNiaUFnSUNBZ0lDY3VlbVl1WlhGMVlXeHBlbVZ5SnpvZ2RHaHBjeTVmWW1sdVpFaGhibVJzWlhJdWIyNVFiM04wUlhGMVlXeHBlbVZrUW05MWJtUXNYRzRnSUNBZ0lDQW5jbVZ6YVhwbGJXVXVlbVl1ZEhKcFoyZGxjaWM2SUhSb2FYTXVYMkpwYm1SSVlXNWtiR1Z5TG05dVVtVnphWHBsVFdWQ2IzVnVaQ3hjYmx4MElDQW5iWFYwWVhSbGJXVXVlbVl1ZEhKcFoyZGxjaWM2SUhSb2FYTXVYMkpwYm1SSVlXNWtiR1Z5TG05dVVtVnphWHBsVFdWQ2IzVnVaRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUdaMWJtTjBhVzl1SUhSdklHaGhibVJzWlNBa1pXeGxiV1Z1ZEhNZ2NtVnphWHBsYldVdWVtWXVkSEpwWjJkbGNpd2dkMmwwYUNCaWIzVnVaQ0IwYUdseklHOXVJRjlpYVc1a1NHRnVaR3hsY2k1dmJsSmxjMmw2WlUxbFFtOTFibVJjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjl2YmxKbGMybDZaVTFsS0dVcElIdGNiaUFnSUNCMGFHbHpMbDl5Wldac2IzY29LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCbWRXNWpkR2x2YmlCMGJ5Qm9ZVzVrYkdVZ0pHVnNaVzFsYm5SeklIQnZjM1JsY1hWaGJHbDZaV1F1ZW1ZdVpYRjFZV3hwZW1WeUxDQjNhWFJvSUdKdmRXNWtJSFJvYVhNZ2IyNGdYMkpwYm1SSVlXNWtiR1Z5TG05dVVHOXpkRVZ4ZFdGc2FYcGxaRUp2ZFc1a1hHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFMMXh1SUNCZmIyNVFiM04wUlhGMVlXeHBlbVZrS0dVcElIdGNiaUFnSUNCcFppaGxMblJoY21kbGRDQWhQVDBnZEdocGN5NGtaV3hsYldWdWRGc3dYU2w3SUhSb2FYTXVYM0psWm14dmR5Z3BPeUI5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpYTWdaWFpsYm5SeklHWnZjaUJGY1hWaGJHbDZaWEl1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmWlhabGJuUnpLQ2tnZTF4dUlDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2RHaHBjeTVmY0dGMWMyVkZkbVZ1ZEhNb0tUdGNiaUFnSUNCcFppaDBhR2x6TG1oaGMwNWxjM1JsWkNsN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbTl1S0Nkd2IzTjBaWEYxWVd4cGVtVmtMbnBtTG1WeGRXRnNhWHBsY2ljc0lIUm9hWE11WDJKcGJtUklZVzVrYkdWeUxtOXVVRzl6ZEVWeGRXRnNhWHBsWkVKdmRXNWtLVHRjYmlBZ0lDQjlaV3h6Wlh0Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXViMjRvSjNKbGMybDZaVzFsTG5wbUxuUnlhV2RuWlhJbkxDQjBhR2x6TGw5aWFXNWtTR0Z1Wkd4bGNpNXZibEpsYzJsNlpVMWxRbTkxYm1RcE8xeHVYSFFnSUhSb2FYTXVKR1ZzWlcxbGJuUXViMjRvSjIxMWRHRjBaVzFsTG5wbUxuUnlhV2RuWlhJbkxDQjBhR2x6TGw5aWFXNWtTR0Z1Wkd4bGNpNXZibEpsYzJsNlpVMWxRbTkxYm1RcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtbHpUMjRnUFNCMGNuVmxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOb1pXTnJjeUIwYUdVZ1kzVnljbVZ1ZENCaWNtVmhhM0J2YVc1MElIUnZJSFJvWlNCdGFXNXBiWFZ0SUhKbGNYVnBjbVZrSUhOcGVtVXVYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZZMmhsWTJ0TlVTZ3BJSHRjYmlBZ0lDQjJZWElnZEc5dlUyMWhiR3dnUFNBaFRXVmthV0ZSZFdWeWVTNXBjeWgwYUdsekxtOXdkR2x2Ym5NdVpYRjFZV3hwZW1WUGJpazdYRzRnSUNBZ2FXWW9kRzl2VTIxaGJHd3BlMXh1SUNBZ0lDQWdhV1lvZEdocGN5NXBjMDl1S1h0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0dGMWMyVkZkbVZ1ZEhNb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a2QyRjBZMmhsWkM1amMzTW9KMmhsYVdkb2RDY3NJQ2RoZFhSdkp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZXVnNjMlY3WEc0Z0lDQWdJQ0JwWmlnaGRHaHBjeTVwYzA5dUtYdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJ6S0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBiMjlUYldGc2JEdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUc1dmIzQWdkbVZ5YzJsdmJpQm1iM0lnZEdobElIQnNkV2RwYmx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJ0cGJHeHpkMmwwWTJnb0tTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTmhiR3h6SUc1bFkyVnpjMkZ5ZVNCbWRXNWpkR2x2Ym5NZ2RHOGdkWEJrWVhSbElFVnhkV0ZzYVhwbGNpQjFjRzl1SUVSUFRTQmphR0Z1WjJWY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5eVpXWnNiM2NvS1NCN1hHNGdJQ0FnYVdZb0lYUm9hWE11YjNCMGFXOXVjeTVsY1hWaGJHbDZaVTl1VTNSaFkyc3BlMXh1SUNBZ0lDQWdhV1lvZEdocGN5NWZhWE5UZEdGamEyVmtLQ2twZTF4dUlDQWdJQ0FnSUNCMGFHbHpMaVIzWVhSamFHVmtMbU56Y3lnbmFHVnBaMmgwSnl3Z0oyRjFkRzhuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1WeGRXRnNhWHBsUW5sU2IzY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVoyVjBTR1ZwWjJoMGMwSjVVbTkzS0hSb2FYTXVZWEJ3YkhsSVpXbG5hSFJDZVZKdmR5NWlhVzVrS0hSb2FYTXBLVHRjYmlBZ0lDQjlaV3h6Wlh0Y2JpQWdJQ0FnSUhSb2FYTXVaMlYwU0dWcFoyaDBjeWgwYUdsekxtRndjR3g1U0dWcFoyaDBMbUpwYm1Rb2RHaHBjeWtwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCTllXNTFZV3hzZVNCa1pYUmxjbTFwYm1WeklHbG1JSFJvWlNCbWFYSnpkQ0F5SUdWc1pXMWxiblJ6SUdGeVpTQXFUazlVS2lCemRHRmphMlZrTGx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJselUzUmhZMnRsWkNncElIdGNiaUFnSUNCcFppQW9JWFJvYVhNdUpIZGhkR05vWldSYk1GMGdmSHdnSVhSb2FYTXVKSGRoZEdOb1pXUmJNVjBwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k0a2QyRjBZMmhsWkZzd1hTNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1M1MGIzQWdJVDA5SUhSb2FYTXVKSGRoZEdOb1pXUmJNVjB1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDa3VkRzl3TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWnBibVJ6SUhSb1pTQnZkWFJsY2lCb1pXbG5hSFJ6SUc5bUlHTm9hV3hrY21WdUlHTnZiblJoYVc1bFpDQjNhWFJvYVc0Z1lXNGdSWEYxWVd4cGVtVnlJSEJoY21WdWRDQmhibVFnY21WMGRYSnVjeUIwYUdWdElHbHVJR0Z1SUdGeWNtRjVYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmlJQzBnUVNCdWIyNHRiM0IwYVc5dVlXd2dZMkZzYkdKaFkyc2dkRzhnY21WMGRYSnVJSFJvWlNCb1pXbG5hSFJ6SUdGeWNtRjVJSFJ2TGx4dUlDQWdLaUJBY21WMGRYSnVjeUI3UVhKeVlYbDlJR2hsYVdkb2RITWdMU0JCYmlCaGNuSmhlU0J2WmlCb1pXbG5hSFJ6SUc5bUlHTm9hV3hrY21WdUlIZHBkR2hwYmlCRmNYVmhiR2w2WlhJZ1kyOXVkR0ZwYm1WeVhHNGdJQ0FxTDF4dUlDQm5aWFJJWldsbmFIUnpLR05pS1NCN1hHNGdJQ0FnZG1GeUlHaGxhV2RvZEhNZ1BTQmJYVHRjYmlBZ0lDQm1iM0lvZG1GeUlHa2dQU0F3TENCc1pXNGdQU0IwYUdsekxpUjNZWFJqYUdWa0xteGxibWQwYURzZ2FTQThJR3hsYmpzZ2FTc3JLWHRjYmlBZ0lDQWdJSFJvYVhNdUpIZGhkR05vWldSYmFWMHVjM1I1YkdVdWFHVnBaMmgwSUQwZ0oyRjFkRzhuTzF4dUlDQWdJQ0FnYUdWcFoyaDBjeTV3ZFhOb0tIUm9hWE11SkhkaGRHTm9aV1JiYVYwdWIyWm1jMlYwU0dWcFoyaDBLVHRjYmlBZ0lDQjlYRzRnSUNBZ1kySW9hR1ZwWjJoMGN5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUm1sdVpITWdkR2hsSUc5MWRHVnlJR2hsYVdkb2RITWdiMllnWTJocGJHUnlaVzRnWTI5dWRHRnBibVZrSUhkcGRHaHBiaUJoYmlCRmNYVmhiR2w2WlhJZ2NHRnlaVzUwSUdGdVpDQnlaWFIxY201eklIUm9aVzBnYVc0Z1lXNGdZWEp5WVhsY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWTJJZ0xTQkJJRzV2YmkxdmNIUnBiMjVoYkNCallXeHNZbUZqYXlCMGJ5QnlaWFIxY200Z2RHaGxJR2hsYVdkb2RITWdZWEp5WVhrZ2RHOHVYRzRnSUNBcUlFQnlaWFIxY201eklIdEJjbkpoZVgwZ1ozSnZkWEJ6SUMwZ1FXNGdZWEp5WVhrZ2IyWWdhR1ZwWjJoMGN5QnZaaUJqYUdsc1pISmxiaUIzYVhSb2FXNGdSWEYxWVd4cGVtVnlJR052Ym5SaGFXNWxjaUJuY205MWNHVmtJR0o1SUhKdmR5QjNhWFJvSUdWc1pXMWxiblFzYUdWcFoyaDBJR0Z1WkNCdFlYZ2dZWE1nYkdGemRDQmphR2xzWkZ4dUlDQWdLaTljYmlBZ1oyVjBTR1ZwWjJoMGMwSjVVbTkzS0dOaUtTQjdYRzRnSUNBZ2RtRnlJR3hoYzNSRmJGUnZjRTltWm5ObGRDQTlJQ2gwYUdsekxpUjNZWFJqYUdWa0xteGxibWQwYUNBL0lIUm9hWE11SkhkaGRHTm9aV1F1Wm1seWMzUW9LUzV2Wm1aelpYUW9LUzUwYjNBZ09pQXdLU3hjYmlBZ0lDQWdJQ0FnWjNKdmRYQnpJRDBnVzEwc1hHNGdJQ0FnSUNBZ0lHZHliM1Z3SUQwZ01EdGNiaUFnSUNBdkwyZHliM1Z3SUdKNUlGSnZkMXh1SUNBZ0lHZHliM1Z3YzF0bmNtOTFjRjBnUFNCYlhUdGNiaUFnSUNCbWIzSW9kbUZ5SUdrZ1BTQXdMQ0JzWlc0Z1BTQjBhR2x6TGlSM1lYUmphR1ZrTG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNzcktYdGNiaUFnSUNBZ0lIUm9hWE11SkhkaGRHTm9aV1JiYVYwdWMzUjViR1V1YUdWcFoyaDBJRDBnSjJGMWRHOG5PMXh1SUNBZ0lDQWdMeTl0WVhsaVpTQmpiM1ZzWkNCMWMyVWdkR2hwY3k0a2QyRjBZMmhsWkZ0cFhTNXZabVp6WlhSVWIzQmNiaUFnSUNBZ0lIWmhjaUJsYkU5bVpuTmxkRlJ2Y0NBOUlDUW9kR2hwY3k0a2QyRjBZMmhsWkZ0cFhTa3ViMlptYzJWMEtDa3VkRzl3TzF4dUlDQWdJQ0FnYVdZZ0tHVnNUMlptYzJWMFZHOXdJVDFzWVhOMFJXeFViM0JQWm1aelpYUXBJSHRjYmlBZ0lDQWdJQ0FnWjNKdmRYQXJLenRjYmlBZ0lDQWdJQ0FnWjNKdmRYQnpXMmR5YjNWd1hTQTlJRnRkTzF4dUlDQWdJQ0FnSUNCc1lYTjBSV3hVYjNCUFptWnpaWFE5Wld4UFptWnpaWFJVYjNBN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbmNtOTFjSE5iWjNKdmRYQmRMbkIxYzJnb1czUm9hWE11SkhkaGRHTm9aV1JiYVYwc2RHaHBjeTRrZDJGMFkyaGxaRnRwWFM1dlptWnpaWFJJWldsbmFIUmRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTUN3Z2JHNGdQU0JuY205MWNITXViR1Z1WjNSb095QnFJRHdnYkc0N0lHb3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHaGxhV2RvZEhNZ1BTQWtLR2R5YjNWd2MxdHFYU2t1YldGd0tHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjBhR2x6V3pGZE95QjlLUzVuWlhRb0tUdGNiaUFnSUNBZ0lIWmhjaUJ0WVhnZ0lDQWdJQ0FnSUNBOUlFMWhkR2d1YldGNExtRndjR3g1S0c1MWJHd3NJR2hsYVdkb2RITXBPMXh1SUNBZ0lDQWdaM0p2ZFhCelcycGRMbkIxYzJnb2JXRjRLVHRjYmlBZ0lDQjlYRzRnSUNBZ1kySW9aM0p2ZFhCektUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYUdGdVoyVnpJSFJvWlNCRFUxTWdhR1ZwWjJoMElIQnliM0JsY25SNUlHOW1JR1ZoWTJnZ1kyaHBiR1FnYVc0Z1lXNGdSWEYxWVd4cGVtVnlJSEJoY21WdWRDQjBieUJ0WVhSamFDQjBhR1VnZEdGc2JHVnpkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UyRnljbUY1ZlNCb1pXbG5hSFJ6SUMwZ1FXNGdZWEp5WVhrZ2IyWWdhR1ZwWjJoMGN5QnZaaUJqYUdsc1pISmxiaUIzYVhSb2FXNGdSWEYxWVd4cGVtVnlJR052Ym5SaGFXNWxjbHh1SUNBZ0tpQkFabWx5WlhNZ1JYRjFZV3hwZW1WeUkzQnlaV1Z4ZFdGc2FYcGxaRnh1SUNBZ0tpQkFabWx5WlhNZ1JYRjFZV3hwZW1WeUkzQnZjM1JsY1hWaGJHbDZaV1JjYmlBZ0lDb3ZYRzRnSUdGd2NHeDVTR1ZwWjJoMEtHaGxhV2RvZEhNcElIdGNiaUFnSUNCMllYSWdiV0Y0SUQwZ1RXRjBhQzV0WVhndVlYQndiSGtvYm5Wc2JDd2dhR1ZwWjJoMGN5azdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbWx5WlhNZ1ltVm1iM0psSUhSb1pTQm9aV2xuYUhSeklHRnlaU0JoY0hCc2FXVmtYRzRnSUNBZ0lDb2dRR1YyWlc1MElFVnhkV0ZzYVhwbGNpTndjbVZsY1hWaGJHbDZaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjNCeVpXVnhkV0ZzYVhwbFpDNTZaaTVsY1hWaGJHbDZaWEluS1R0Y2JseHVJQ0FnSUhSb2FYTXVKSGRoZEdOb1pXUXVZM056S0Nkb1pXbG5hSFFuTENCdFlYZ3BPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdhR1ZwWjJoMGN5Qm9ZWFpsSUdKbFpXNGdZWEJ3YkdsbFpGeHVJQ0FnSUNBcUlFQmxkbVZ1ZENCRmNYVmhiR2w2WlhJamNHOXpkR1Z4ZFdGc2FYcGxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjNCdmMzUmxjWFZoYkdsNlpXUXVlbVl1WlhGMVlXeHBlbVZ5SnlrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMmhoYm1kbGN5QjBhR1VnUTFOVElHaGxhV2RvZENCd2NtOXdaWEowZVNCdlppQmxZV05vSUdOb2FXeGtJR2x1SUdGdUlFVnhkV0ZzYVhwbGNpQndZWEpsYm5RZ2RHOGdiV0YwWTJnZ2RHaGxJSFJoYkd4bGMzUWdZbmtnY205M1hHNGdJQ0FxSUVCd1lYSmhiU0I3WVhKeVlYbDlJR2R5YjNWd2N5QXRJRUZ1SUdGeWNtRjVJRzltSUdobGFXZG9kSE1nYjJZZ1kyaHBiR1J5Wlc0Z2QybDBhR2x1SUVWeGRXRnNhWHBsY2lCamIyNTBZV2x1WlhJZ1ozSnZkWEJsWkNCaWVTQnliM2NnZDJsMGFDQmxiR1Z0Wlc1MExHaGxhV2RvZENCaGJtUWdiV0Y0SUdGeklHeGhjM1FnWTJocGJHUmNiaUFnSUNvZ1FHWnBjbVZ6SUVWeGRXRnNhWHBsY2lOd2NtVmxjWFZoYkdsNlpXUmNiaUFnSUNvZ1FHWnBjbVZ6SUVWeGRXRnNhWHBsY2lOd2NtVmxjWFZoYkdsNlpXUnliM2RjYmlBZ0lDb2dRR1pwY21WeklFVnhkV0ZzYVhwbGNpTndiM04wWlhGMVlXeHBlbVZrY205M1hHNGdJQ0FxSUVCbWFYSmxjeUJGY1hWaGJHbDZaWElqY0c5emRHVnhkV0ZzYVhwbFpGeHVJQ0FnS2k5Y2JpQWdZWEJ3YkhsSVpXbG5hSFJDZVZKdmR5aG5jbTkxY0hNcElIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdhWEpsY3lCaVpXWnZjbVVnZEdobElHaGxhV2RvZEhNZ1lYSmxJR0Z3Y0d4cFpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KM0J5WldWeGRXRnNhWHBsWkM1NlppNWxjWFZoYkdsNlpYSW5LVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVJRDBnWjNKdmRYQnpMbXhsYm1kMGFEc2dhU0E4SUd4bGJpQTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR2R5YjNWd2MwbE1aVzVuZEdnZ1BTQm5jbTkxY0hOYmFWMHViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQWdJRzFoZUNBOUlHZHliM1Z3YzF0cFhWdG5jbTkxY0hOSlRHVnVaM1JvSUMwZ01WMDdYRzRnSUNBZ0lDQnBaaUFvWjNKdmRYQnpTVXhsYm1kMGFEdzlNaWtnZTF4dUlDQWdJQ0FnSUNBa0tHZHliM1Z3YzF0cFhWc3dYVnN3WFNrdVkzTnpLSHNuYUdWcFoyaDBKem9uWVhWMGJ5ZDlLVHRjYmlBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0tpQkdhWEpsY3lCaVpXWnZjbVVnZEdobElHaGxhV2RvZEhNZ2NHVnlJSEp2ZHlCaGNtVWdZWEJ3YkdsbFpGeHVJQ0FnSUNBZ0lDQXFJRUJsZG1WdWRDQkZjWFZoYkdsNlpYSWpjSEpsWlhGMVlXeHBlbVZrY205M1hHNGdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjNCeVpXVnhkV0ZzYVhwbFpISnZkeTU2Wmk1bGNYVmhiR2w2WlhJbktUdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0F3TENCc1pXNUtJRDBnS0dkeWIzVndjMGxNWlc1bmRHZ3RNU2s3SUdvZ1BDQnNaVzVLSURzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNRb1ozSnZkWEJ6VzJsZFcycGRXekJkS1M1amMzTW9leWRvWldsbmFIUW5PbTFoZUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdhR1ZwWjJoMGN5QndaWElnY205M0lHaGhkbVVnWW1WbGJpQmhjSEJzYVdWa1hHNGdJQ0FnSUNBZ0lDb2dRR1YyWlc1MElFVnhkV0ZzYVhwbGNpTndiM04wWlhGMVlXeHBlbVZrY205M1hHNGdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjNCdmMzUmxjWFZoYkdsNlpXUnliM2N1ZW1ZdVpYRjFZV3hwZW1WeUp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFWnBjbVZ6SUhkb1pXNGdkR2hsSUdobGFXZG9kSE1nYUdGMlpTQmlaV1Z1SUdGd2NHeHBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1MGNtbG5aMlZ5S0Nkd2IzTjBaWEYxWVd4cGVtVmtMbnBtTG1WeGRXRnNhWHBsY2ljcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJsYzNSeWIzbHpJR0Z1SUdsdWMzUmhibU5sSUc5bUlFVnhkV0ZzYVhwbGNpNWNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxTDF4dUlDQmZaR1Z6ZEhKdmVTZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5d1lYVnpaVVYyWlc1MGN5Z3BPMXh1SUNBZ0lIUm9hWE11SkhkaGRHTm9aV1F1WTNOektDZG9aV2xuYUhRbkxDQW5ZWFYwYnljcE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dSR1ZtWVhWc2RDQnpaWFIwYVc1bmN5Qm1iM0lnY0d4MVoybHVYRzRnS2k5Y2JrVnhkV0ZzYVhwbGNpNWtaV1poZFd4MGN5QTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFVnVZV0pzWlNCb1pXbG5hSFFnWlhGMVlXeHBlbUYwYVc5dUlIZG9aVzRnYzNSaFkydGxaQ0J2YmlCemJXRnNiR1Z5SUhOamNtVmxibk11WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQmxjWFZoYkdsNlpVOXVVM1JoWTJzNklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dSVzVoWW14bElHaGxhV2RvZENCbGNYVmhiR2w2WVhScGIyNGdjbTkzSUdKNUlISnZkeTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ292WEc0Z0lHVnhkV0ZzYVhwbFFubFNiM2M2SUdaaGJITmxMRnh1SUNBdktpcGNiaUFnSUNvZ1UzUnlhVzVuSUhKbGNISmxjMlZ1ZEdsdVp5QjBhR1VnYldsdWFXMTFiU0JpY21WaGEzQnZhVzUwSUhOcGVtVWdkR2hsSUhCc2RXZHBiaUJ6YUc5MWJHUWdaWEYxWVd4cGVtVWdhR1ZwWjJoMGN5QnZiaTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5KMXh1SUNBZ0tpOWNiaUFnWlhGMVlXeHBlbVZQYmpvZ0p5ZGNibjA3WEc1Y2JtVjRjRzl5ZENCN1JYRjFZV3hwZW1WeWZUdGNiaUpkZlE9PVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLmVxdWFsaXplci5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5JbnRlcmNoYW5nZSA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnknKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmNvcmUnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIEludGVyY2hhbmdlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5pbnRlcmNoYW5nZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxudmFyIEludGVyY2hhbmdlID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKEludGVyY2hhbmdlLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBJbnRlcmNoYW5nZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW50ZXJjaGFuZ2UpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChJbnRlcmNoYW5nZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEludGVyY2hhbmdlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSW50ZXJjaGFuZ2UsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgSW50ZXJjaGFuZ2UuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgSW50ZXJjaGFuZ2VcbiAgICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjaW5pdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgSW50ZXJjaGFuZ2UuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgICAgdGhpcy5jdXJyZW50UGF0aCA9ICcnO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnSW50ZXJjaGFuZ2UnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIEludGVyY2hhbmdlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBpbnRlcmNoYW5nZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfZm91bmRhdGlvblV0aWwuTWVkaWFRdWVyeS5faW5pdCgpO1xuXG4gICAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkIHx8ICgwLCBfZm91bmRhdGlvblV0aWwyLkdldFlvRGlnaXRzKSg2LCAnaW50ZXJjaGFuZ2UnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgICAnaWQnOiBpZFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2FkZEJyZWFrcG9pbnRzKCk7XG4gICAgICB0aGlzLl9nZW5lcmF0ZVJ1bGVzKCk7XG4gICAgICB0aGlzLl9yZWZsb3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEludGVyY2hhbmdlLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJykub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuX3JlZmxvdygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3JlZmxvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWZsb3coKSB7XG4gICAgICB2YXIgbWF0Y2g7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUsIGJ1dCBvbmx5IHNhdmUgdGhlIGxhc3QgbWF0Y2hcbiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5ydWxlcykge1xuICAgICAgICBpZiAodGhpcy5ydWxlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcbiAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocnVsZS5xdWVyeSkubWF0Y2hlcykge1xuICAgICAgICAgICAgbWF0Y2ggPSBydWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlKG1hdGNoLnBhdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIEZvdW5kYXRpb24gYnJlYWtwb2ludHMgYW5kIGFkZHMgdGhlbSB0byB0aGUgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTIG9iamVjdC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkQnJlYWtwb2ludHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkQnJlYWtwb2ludHMoKSB7XG4gICAgICBmb3IgKHZhciBpIGluIF9mb3VuZGF0aW9uVXRpbC5NZWRpYVF1ZXJ5LnF1ZXJpZXMpIHtcbiAgICAgICAgaWYgKF9mb3VuZGF0aW9uVXRpbC5NZWRpYVF1ZXJ5LnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICB2YXIgcXVlcnkgPSBfZm91bmRhdGlvblV0aWwuTWVkaWFRdWVyeS5xdWVyaWVzW2ldO1xuICAgICAgICAgIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeS5uYW1lXSA9IHF1ZXJ5LnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBJbnRlcmNoYW5nZSBlbGVtZW50IGZvciB0aGUgcHJvdmlkZWQgbWVkaWEgcXVlcnkgKyBjb250ZW50IHBhaXJpbmdzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdGhhdCBpcyBhbiBJbnRlcmNoYW5nZSBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gc2NlbmFyaW9zIC0gQXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGhhdmUgJ21xJyBhbmQgJ3BhdGgnIGtleXMgd2l0aCBjb3JyZXNwb25kaW5nIGtleXNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2dlbmVyYXRlUnVsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2VuZXJhdGVSdWxlcyhlbGVtZW50KSB7XG4gICAgICB2YXIgcnVsZXNMaXN0ID0gW107XG4gICAgICB2YXIgcnVsZXM7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucnVsZXMpIHtcbiAgICAgICAgcnVsZXMgPSB0aGlzLm9wdGlvbnMucnVsZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnaW50ZXJjaGFuZ2UnKTtcbiAgICAgIH1cblxuICAgICAgcnVsZXMgPSB0eXBlb2YgcnVsZXMgPT09ICdzdHJpbmcnID8gcnVsZXMubWF0Y2goL1xcWy4qP1xcXS9nKSA6IHJ1bGVzO1xuXG4gICAgICBmb3IgKHZhciBpIGluIHJ1bGVzKSB7XG4gICAgICAgIGlmIChydWxlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc2xpY2UoMSwgLTEpLnNwbGl0KCcsICcpO1xuICAgICAgICAgIHZhciBwYXRoID0gcnVsZS5zbGljZSgwLCAtMSkuam9pbignJyk7XG4gICAgICAgICAgdmFyIHF1ZXJ5ID0gcnVsZVtydWxlLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV0pIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBydWxlc0xpc3QucHVzaCh7XG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzTGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGBzcmNgIHByb3BlcnR5IG9mIGFuIGltYWdlLCBvciBjaGFuZ2UgdGhlIEhUTUwgb2YgYSBjb250YWluZXIsIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCAtIFBhdGggdG8gdGhlIGltYWdlIG9yIEhUTUwgcGFydGlhbC5cbiAgICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVwbGFjZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFBhdGggPT09IHBhdGgpIHJldHVybjtcblxuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICB0cmlnZ2VyID0gJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJztcblxuICAgICAgLy8gUmVwbGFjaW5nIGltYWdlc1xuICAgICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0ubm9kZU5hbWUgPT09ICdJTUcnKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignc3JjJywgcGF0aCkub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgICB9KS50cmlnZ2VyKHRyaWdnZXIpO1xuICAgICAgfVxuICAgICAgLy8gUmVwbGFjaW5nIGJhY2tncm91bmQgaW1hZ2VzXG4gICAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSkpIHtcbiAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCgvZywgJyUyOCcpLnJlcGxhY2UoL1xcKS9nLCAnJTI5Jyk7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJyArIHBhdGggKyAnKScgfSkudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXBsYWNpbmcgSFRNTFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9qcXVlcnkyLmRlZmF1bHQuZ2V0KHBhdGgsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5odG1sKHJlc3BvbnNlKS50cmlnZ2VyKHRyaWdnZXIpO1xuICAgICAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkocmVzcG9uc2UpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gY29udGVudCBpbiBhbiBJbnRlcmNoYW5nZSBlbGVtZW50IGlzIGRvbmUgYmVpbmcgbG9hZGVkLlxuICAgICAgICogQGV2ZW50IEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAgICAgKi9cbiAgICAgIC8vIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncmVwbGFjZWQuemYuaW50ZXJjaGFuZ2UnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBpbnRlcmNoYW5nZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEludGVyY2hhbmdlO1xufShfZm91bmRhdGlvbi5QbHVnaW4pO1xuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5cblxuSW50ZXJjaGFuZ2UuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBSdWxlcyB0byBiZSBhcHBsaWVkIHRvIEludGVyY2hhbmdlIGVsZW1lbnRzLiBTZXQgd2l0aCB0aGUgYGRhdGEtaW50ZXJjaGFuZ2VgIGFycmF5IG5vdGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/YXJyYXl9XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICovXG4gIHJ1bGVzOiBudWxsXG59O1xuXG5JbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVMgPSB7XG4gICdsYW5kc2NhcGUnOiAnc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICAncG9ydHJhaXQnOiAnc2NyZWVuIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KScsXG4gICdyZXRpbmEnOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwgb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwgb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxuZXhwb3J0cy5JbnRlcmNoYW5nZSA9IEludGVyY2hhbmdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWFXNTBaWEpqYUdGdVoyVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVNXNTBaWEpqYUdGdVoyVWlMQ0psYkdWdFpXNTBJaXdpYjNCMGFXOXVjeUlzSWlSbGJHVnRaVzUwSWl3aUpDSXNJbVY0ZEdWdVpDSXNJbVJsWm1GMWJIUnpJaXdpY25Wc1pYTWlMQ0pqZFhKeVpXNTBVR0YwYUNJc0ltTnNZWE56VG1GdFpTSXNJbDlwYm1sMElpd2lYMlYyWlc1MGN5SXNJazFsWkdsaFVYVmxjbmtpTENKcFpDSXNJbUYwZEhJaUxDSmZZV1JrUW5KbFlXdHdiMmx1ZEhNaUxDSmZaMlZ1WlhKaGRHVlNkV3hsY3lJc0lsOXlaV1pzYjNjaUxDSnZabVlpTENKdmJpSXNJbTFoZEdOb0lpd2lhU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpY25Wc1pTSXNJbmRwYm1SdmR5SXNJbTFoZEdOb1RXVmthV0VpTENKeGRXVnllU0lzSW0xaGRHTm9aWE1pTENKeVpYQnNZV05sSWl3aWNHRjBhQ0lzSW5GMVpYSnBaWE1pTENKVFVFVkRTVUZNWDFGVlJWSkpSVk1pTENKdVlXMWxJaXdpZG1Gc2RXVWlMQ0p5ZFd4bGMweHBjM1FpTENKa1lYUmhJaXdpYzJ4cFkyVWlMQ0p6Y0d4cGRDSXNJbXB2YVc0aUxDSnNaVzVuZEdnaUxDSndkWE5vSWl3aVgzUm9hWE1pTENKMGNtbG5aMlZ5SWl3aWJtOWtaVTVoYldVaUxDSmpjM01pTENKblpYUWlMQ0p5WlhOd2IyNXpaU0lzSW1oMGJXd2lMQ0ptYjNWdVpHRjBhVzl1SWl3aVVHeDFaMmx1SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenM3TzBGQlJVRTdPenM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3T3pzN096czdPenRCUVVkQk96czdPenM3U1VGTlRVRXNWenM3T3pzN096czdPenM3TzBGQlEwbzdPenM3T3pzN096SkNRVkZQUXl4UExFVkJRVk5ETEU4c1JVRkJVenRCUVVOMlFpeFhRVUZMUXl4UlFVRk1MRWRCUVdkQ1JpeFBRVUZvUWp0QlFVTkJMRmRCUVV0RExFOUJRVXdzUjBGQlpVVXNhVUpCUVVWRExFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRk1MRmxCUVZsTkxGRkJRWHBDTEVWQlFXMURTaXhQUVVGdVF5eERRVUZtTzBGQlEwRXNWMEZCUzBzc1MwRkJUQ3hIUVVGaExFVkJRV0k3UVVGRFFTeFhRVUZMUXl4WFFVRk1MRWRCUVcxQ0xFVkJRVzVDTzBGQlEwRXNWMEZCUzBNc1UwRkJUQ3hIUVVGcFFpeGhRVUZxUWl4RFFVeDFRaXhEUVV0VE96dEJRVVZvUXl4WFFVRkxReXhMUVVGTU8wRkJRMEVzVjBGQlMwTXNUMEZCVER0QlFVTkVPenRCUVVWRU96czdPenM3T3pzMFFrRkxVVHRCUVVOT1F5eHBRMEZCVjBZc1MwRkJXRHM3UVVGRlFTeFZRVUZKUnl4TFFVRkxMRXRCUVV0V0xGRkJRVXdzUTBGQll5eERRVUZrTEVWQlFXbENWU3hGUVVGcVFpeEpRVUYxUWl4clEwRkJXU3hEUVVGYUxFVkJRV1VzWVVGQlppeERRVUZvUXp0QlFVTkJMRmRCUVV0V0xGRkJRVXdzUTBGQlkxY3NTVUZCWkN4RFFVRnRRanRCUVVOcVFpeDFRa0ZCWlVRc1JVRkVSVHRCUVVWcVFpeGpRVUZOUVR0QlFVWlhMRTlCUVc1Q096dEJRVXRCTEZkQlFVdEZMR1ZCUVV3N1FVRkRRU3hYUVVGTFF5eGpRVUZNTzBGQlEwRXNWMEZCUzBNc1QwRkJURHRCUVVORU96dEJRVVZFT3pzN096czdPenM0UWtGTFZUdEJRVUZCT3p0QlFVTlNMRmRCUVV0a0xGRkJRVXdzUTBGQlkyVXNSMEZCWkN4RFFVRnJRaXh4UWtGQmJFSXNSVUZCZVVORExFVkJRWHBETEVOQlFUUkRMSEZDUVVFMVF5eEZRVUZ0UlR0QlFVRkJMR1ZCUVUwc1QwRkJTMFlzVDBGQlRDeEZRVUZPTzBGQlFVRXNUMEZCYmtVN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN09FSkJTMVU3UVVGRFVpeFZRVUZKUnl4TFFVRktPenRCUVVWQk8wRkJRMEVzVjBGQlN5eEpRVUZKUXl4RFFVRlVMRWxCUVdNc1MwRkJTMlFzUzBGQmJrSXNSVUZCTUVJN1FVRkRlRUlzV1VGQlJ5eExRVUZMUVN4TFFVRk1MRU5CUVZkbExHTkJRVmdzUTBGQk1FSkVMRU5CUVRGQ0xFTkJRVWdzUlVGQmFVTTdRVUZETDBJc1kwRkJTVVVzVDBGQlR5eExRVUZMYUVJc1MwRkJUQ3hEUVVGWFl5eERRVUZZTEVOQlFWZzdRVUZEUVN4alFVRkpSeXhQUVVGUFF5eFZRVUZRTEVOQlFXdENSaXhMUVVGTFJ5eExRVUYyUWl4RlFVRTRRa01zVDBGQmJFTXNSVUZCTWtNN1FVRkRla05RTEc5Q1FVRlJSeXhKUVVGU08wRkJRMFE3UVVGRFJqdEJRVU5HT3p0QlFVVkVMRlZCUVVsSUxFdEJRVW9zUlVGQlZ6dEJRVU5VTEdGQlFVdFJMRTlCUVV3c1EwRkJZVklzVFVGQlRWTXNTVUZCYmtJN1FVRkRSRHRCUVVOR096dEJRVVZFT3pzN096czdPenR6UTBGTGEwSTdRVUZEYUVJc1YwRkJTeXhKUVVGSlVpeERRVUZVTEVsQlFXTlVMREpDUVVGWGEwSXNUMEZCZWtJc1JVRkJhME03UVVGRGFFTXNXVUZCU1d4Q0xESkNRVUZYYTBJc1QwRkJXQ3hEUVVGdFFsSXNZMEZCYmtJc1EwRkJhME5FTEVOQlFXeERMRU5CUVVvc1JVRkJNRU03UVVGRGVFTXNZMEZCU1Vzc1VVRkJVV1FzTWtKQlFWZHJRaXhQUVVGWUxFTkJRVzFDVkN4RFFVRnVRaXhEUVVGYU8wRkJRMEZ5UWl4elFrRkJXU3RDTEdWQlFWb3NRMEZCTkVKTUxFMUJRVTFOTEVsQlFXeERMRWxCUVRCRFRpeE5RVUZOVHl4TFFVRm9SRHRCUVVORU8wRkJRMFk3UVVGRFJqczdRVUZGUkRzN096czdPenM3T3p0dFEwRlBaV2hETEU4c1JVRkJVenRCUVVOMFFpeFZRVUZKYVVNc1dVRkJXU3hGUVVGb1FqdEJRVU5CTEZWQlFVa3pRaXhMUVVGS096dEJRVVZCTEZWQlFVa3NTMEZCUzB3c1QwRkJUQ3hEUVVGaFN5eExRVUZxUWl4RlFVRjNRanRCUVVOMFFrRXNaMEpCUVZFc1MwRkJTMHdzVDBGQlRDeERRVUZoU3l4TFFVRnlRanRCUVVORUxFOUJSa1FzVFVGSFN6dEJRVU5JUVN4blFrRkJVU3hMUVVGTFNpeFJRVUZNTEVOQlFXTm5ReXhKUVVGa0xFTkJRVzFDTEdGQlFXNUNMRU5CUVZJN1FVRkRSRHM3UVVGRlJEVkNMR05CUVZNc1QwRkJUMEVzUzBGQlVDeExRVUZwUWl4UlFVRnFRaXhIUVVFMFFrRXNUVUZCVFdFc1MwRkJUaXhEUVVGWkxGVkJRVm9zUTBGQk5VSXNSMEZCYzBSaUxFdEJRUzlFT3p0QlFVVkJMRmRCUVVzc1NVRkJTV01zUTBGQlZDeEpRVUZqWkN4TFFVRmtMRVZCUVhGQ08wRkJRMjVDTEZsQlFVZEJMRTFCUVUxbExHTkJRVTRzUTBGQmNVSkVMRU5CUVhKQ0xFTkJRVWdzUlVGQk5FSTdRVUZETVVJc1kwRkJTVVVzVDBGQlQyaENMRTFCUVUxakxFTkJRVTRzUlVGQlUyVXNTMEZCVkN4RFFVRmxMRU5CUVdZc1JVRkJhMElzUTBGQlF5eERRVUZ1UWl4RlFVRnpRa01zUzBGQmRFSXNRMEZCTkVJc1NVRkJOVUlzUTBGQldEdEJRVU5CTEdOQlFVbFNMRTlCUVU5T0xFdEJRVXRoTEV0QlFVd3NRMEZCVnl4RFFVRllMRVZCUVdNc1EwRkJReXhEUVVGbUxFVkJRV3RDUlN4SlFVRnNRaXhEUVVGMVFpeEZRVUYyUWl4RFFVRllPMEZCUTBFc1kwRkJTVm9zVVVGQlVVZ3NTMEZCUzBFc1MwRkJTMmRDTEUxQlFVd3NSMEZCWXl4RFFVRnVRaXhEUVVGYU96dEJRVVZCTEdOQlFVbDJReXhaUVVGWkswSXNaVUZCV2l4RFFVRTBRa3dzUzBGQk5VSXNRMEZCU2l4RlFVRjNRenRCUVVOMFEwRXNiMEpCUVZFeFFpeFpRVUZaSzBJc1pVRkJXaXhEUVVFMFFrd3NTMEZCTlVJc1EwRkJVanRCUVVORU96dEJRVVZFVVN4dlFrRkJWVTBzU1VGQlZpeERRVUZsTzBGQlEySllMR3RDUVVGTlFTeEpRVVJQTzBGQlJXSklMRzFDUVVGUFFUdEJRVVpOTEZkQlFXWTdRVUZKUkR0QlFVTkdPenRCUVVWRUxGZEJRVXR1UWl4TFFVRk1MRWRCUVdFeVFpeFRRVUZpTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzMFFrRk5VVXdzU1N4RlFVRk5PMEZCUTFvc1ZVRkJTU3hMUVVGTGNrSXNWMEZCVEN4TFFVRnhRbkZDTEVsQlFYcENMRVZCUVN0Q096dEJRVVV2UWl4VlFVRkpXU3hSUVVGUkxFbEJRVm83UVVGQlFTeFZRVU5KUXl4VlFVRlZMSGxDUVVSa096dEJRVWRCTzBGQlEwRXNWVUZCU1N4TFFVRkxka01zVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVKM1F5eFJRVUZxUWl4TFFVRTRRaXhMUVVGc1F5eEZRVUY1UXp0QlFVTjJReXhoUVVGTGVFTXNVVUZCVEN4RFFVRmpWeXhKUVVGa0xFTkJRVzFDTEV0QlFXNUNMRVZCUVRCQ1pTeEpRVUV4UWl4RlFVRm5RMVlzUlVGQmFFTXNRMEZCYlVNc1RVRkJia01zUlVGQk1rTXNXVUZCVnp0QlFVTndSSE5DTEdkQ1FVRk5ha01zVjBGQlRpeEhRVUZ2UW5GQ0xFbEJRWEJDTzBGQlEwUXNVMEZHUkN4RlFVZERZU3hQUVVoRUxFTkJSMU5CTEU5QlNGUTdRVUZKUkR0QlFVTkVPMEZCVGtFc1YwRlBTeXhKUVVGSllpeExRVUZMVkN4TFFVRk1MRU5CUVZjc2VVTkJRVmdzUTBGQlNpeEZRVUV5UkR0QlFVTTVSRk1zYVVKQlFVOUJMRXRCUVV0RUxFOUJRVXdzUTBGQllTeExRVUZpTEVWQlFXOUNMRXRCUVhCQ0xFVkJRVEpDUVN4UFFVRXpRaXhEUVVGdFF5eExRVUZ1UXl4RlFVRXdReXhMUVVFeFF5eERRVUZRTzBGQlEwRXNaVUZCUzNwQ0xGRkJRVXdzUTBGQlkzbERMRWRCUVdRc1EwRkJhMElzUlVGQlJTeHZRa0ZCYjBJc1UwRkJUMllzU1VGQlVDeEhRVUZaTEVkQlFXeERMRVZCUVd4Q0xFVkJRMHRoTEU5QlJFd3NRMEZEWVVFc1QwRkVZanRCUVVWRU8wRkJRMFE3UVVGTVN5eGhRVTFCTzBGQlEwaDBReXcyUWtGQlJYbERMRWRCUVVZc1EwRkJUV2hDTEVsQlFVNHNSVUZCV1N4VlFVRlRhVUlzVVVGQlZDeEZRVUZ0UWp0QlFVTTNRa3dzYjBKQlFVMTBReXhSUVVGT0xFTkJRV1UwUXl4SlFVRm1MRU5CUVc5Q1JDeFJRVUZ3UWl4RlFVTk5TaXhQUVVST0xFTkJRMk5CTEU5QlJHUTdRVUZGUVN4dlEwRkJSVWtzVVVGQlJpeEZRVUZaUlN4VlFVRmFPMEZCUTBGUUxHOUNRVUZOYWtNc1YwRkJUaXhIUVVGdlFuRkNMRWxCUVhCQ08wRkJRMFFzWVVGTVJEdEJRVTFFT3p0QlFVVkVPenM3TzBGQlNVRTdRVUZEUkRzN1FVRkZSRHM3T3pzN096c3JRa0ZKVnp0QlFVTlVMRmRCUVVzeFFpeFJRVUZNTEVOQlFXTmxMRWRCUVdRc1EwRkJhMElzY1VKQlFXeENPMEZCUTBRN096czdSVUUzUzNWQ0swSXNhMEk3TzBGQlowd3hRanM3T3pzN1FVRkhRV3BFTEZsQlFWbE5MRkZCUVZvc1IwRkJkVUk3UVVGRGNrSTdPenM3T3p0QlFVMUJReXhUUVVGUE8wRkJVR01zUTBGQmRrSTdPMEZCVlVGUUxGbEJRVmtyUWl4bFFVRmFMRWRCUVRoQ08wRkJRelZDTEdWQlFXRXNjVU5CUkdVN1FVRkZOVUlzWTBGQldTeHZRMEZHWjBJN1FVRkhOVUlzV1VGQlZUdEJRVWhyUWl4RFFVRTVRanM3VVVGTlVTOUNMRmNzUjBGQlFVRXNWeUlzSW1acGJHVWlPaUptYjNWdVpHRjBhVzl1TG1sdWRHVnlZMmhoYm1kbExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwYlhCdmNuUWdKQ0JtY205dElDZHFjWFZsY25rbk8xeHVhVzF3YjNKMElIc2dUV1ZrYVdGUmRXVnllU0I5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbTFsWkdsaFVYVmxjbmtuTzF4dWFXMXdiM0owSUhzZ1VHeDFaMmx1SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuQnNkV2RwYmljN1hHNXBiWEJ2Y25RZ2V5QkhaWFJaYjBScFoybDBjeUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbU52Y21Vbk8xeHVYRzVjYmk4cUtseHVJQ29nU1c1MFpYSmphR0Z1WjJVZ2JXOWtkV3hsTGx4dUlDb2dRRzF2WkhWc1pTQm1iM1Z1WkdGMGFXOXVMbWx1ZEdWeVkyaGhibWRsWEc0Z0tpQkFjbVZ4ZFdseVpYTWdabTkxYm1SaGRHbHZiaTUxZEdsc0xtMWxaR2xoVVhWbGNubGNiaUFxTDF4dVhHNWpiR0Z6Y3lCSmJuUmxjbU5vWVc1blpTQmxlSFJsYm1SeklGQnNkV2RwYmlCN1hHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JRWx1ZEdWeVkyaGhibWRsTGx4dUlDQWdLaUJBWTJ4aGMzTmNiaUFnSUNvZ1FHNWhiV1VnU1c1MFpYSmphR0Z1WjJWY2JpQWdJQ29nUUdacGNtVnpJRWx1ZEdWeVkyaGhibWRsSTJsdWFYUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdWc1pXMWxiblFnTFNCcVVYVmxjbmtnYjJKcVpXTjBJSFJ2SUdGa1pDQjBhR1VnZEhKcFoyZGxjaUIwYnk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JQZG1WeWNtbGtaWE1nZEc4Z2RHaGxJR1JsWm1GMWJIUWdjR3gxWjJsdUlITmxkSFJwYm1kekxseHVJQ0FnS2k5Y2JpQWdYM05sZEhWd0tHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBJRDBnWld4bGJXVnVkRHRjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNBa0xtVjRkR1Z1WkNoN2ZTd2dTVzUwWlhKamFHRnVaMlV1WkdWbVlYVnNkSE1zSUc5d2RHbHZibk1wTzF4dUlDQWdJSFJvYVhNdWNuVnNaWE1nUFNCYlhUdGNiaUFnSUNCMGFHbHpMbU4xY25KbGJuUlFZWFJvSUQwZ0p5YzdYRzRnSUNBZ2RHaHBjeTVqYkdGemMwNWhiV1VnUFNBblNXNTBaWEpqYUdGdVoyVW5PeUF2THlCcFpUa2dZbUZqYXlCamIyMXdZWFJjYmx4dUlDQWdJSFJvYVhNdVgybHVhWFFvS1R0Y2JpQWdJQ0IwYUdsekxsOWxkbVZ1ZEhNb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm1sMGFXRnNhWHBsY3lCMGFHVWdTVzUwWlhKamFHRnVaMlVnY0d4MVoybHVJR0Z1WkNCallXeHNjeUJtZFc1amRHbHZibk1nZEc4Z1oyVjBJR2x1ZEdWeVkyaGhibWRsSUdaMWJtTjBhVzl1YVc1bklHOXVJR3h2WVdRdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJsdWFYUW9LU0I3WEc0Z0lDQWdUV1ZrYVdGUmRXVnllUzVmYVc1cGRDZ3BPMXh1WEc0Z0lDQWdkbUZ5SUdsa0lEMGdkR2hwY3k0a1pXeGxiV1Z1ZEZzd1hTNXBaQ0I4ZkNCSFpYUlpiMFJwWjJsMGN5ZzJMQ0FuYVc1MFpYSmphR0Z1WjJVbktUdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb2UxeHVJQ0FnSUNBZ0oyUmhkR0V0Y21WemFYcGxKem9nYVdRc1hHNGdJQ0FnSUNBbmFXUW5PaUJwWkZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZEdocGN5NWZZV1JrUW5KbFlXdHdiMmx1ZEhNb0tUdGNiaUFnSUNCMGFHbHpMbDluWlc1bGNtRjBaVkoxYkdWektDazdYRzRnSUNBZ2RHaHBjeTVmY21WbWJHOTNLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpYTWdaWFpsYm5SeklHWnZjaUJKYm5SbGNtTm9ZVzVuWlM1Y2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmWlhabGJuUnpLQ2tnZTF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWIyWm1LQ2R5WlhOcGVtVnRaUzU2Wmk1MGNtbG5aMlZ5SnlrdWIyNG9KM0psYzJsNlpXMWxMbnBtTG5SeWFXZG5aWEluTENBb0tTQTlQaUIwYUdsekxsOXlaV1pzYjNjb0tTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJGc2JITWdibVZqWlhOellYSjVJR1oxYm1OMGFXOXVjeUIwYnlCMWNHUmhkR1VnU1c1MFpYSmphR0Z1WjJVZ2RYQnZiaUJFVDAwZ1kyaGhibWRsWEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYM0psWm14dmR5Z3BJSHRjYmlBZ0lDQjJZWElnYldGMFkyZzdYRzVjYmlBZ0lDQXZMeUJKZEdWeVlYUmxJSFJvY205MVoyZ2daV0ZqYUNCeWRXeGxMQ0JpZFhRZ2IyNXNlU0J6WVhabElIUm9aU0JzWVhOMElHMWhkR05vWEc0Z0lDQWdabTl5SUNoMllYSWdhU0JwYmlCMGFHbHpMbkoxYkdWektTQjdYRzRnSUNBZ0lDQnBaaWgwYUdsekxuSjFiR1Z6TG1oaGMwOTNibEJ5YjNCbGNuUjVLR2twS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5ZFd4bElEMGdkR2hwY3k1eWRXeGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGRwYm1SdmR5NXRZWFJqYUUxbFpHbGhLSEoxYkdVdWNYVmxjbmtwTG0xaGRHTm9aWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQnRZWFJqYUNBOUlISjFiR1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2JXRjBZMmdwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjbVZ3YkdGalpTaHRZWFJqYUM1d1lYUm9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMGN5QjBhR1VnUm05MWJtUmhkR2x2YmlCaWNtVmhhM0J2YVc1MGN5QmhibVFnWVdSa2N5QjBhR1Z0SUhSdklIUm9aU0JKYm5SbGNtTm9ZVzVuWlM1VFVFVkRTVUZNWDFGVlJWSkpSVk1nYjJKcVpXTjBMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWhaR1JDY21WaGEzQnZhVzUwY3lncElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElHbHVJRTFsWkdsaFVYVmxjbmt1Y1hWbGNtbGxjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tFMWxaR2xoVVhWbGNua3VjWFZsY21sbGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNocEtTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NYVmxjbmtnUFNCTlpXUnBZVkYxWlhKNUxuRjFaWEpwWlhOYmFWMDdYRzRnSUNBZ0lDQWdJRWx1ZEdWeVkyaGhibWRsTGxOUVJVTkpRVXhmVVZWRlVrbEZVMXR4ZFdWeWVTNXVZVzFsWFNBOUlIRjFaWEo1TG5aaGJIVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYUdWamEzTWdkR2hsSUVsdWRHVnlZMmhoYm1kbElHVnNaVzFsYm5RZ1ptOXlJSFJvWlNCd2NtOTJhV1JsWkNCdFpXUnBZU0J4ZFdWeWVTQXJJR052Ym5SbGJuUWdjR0ZwY21sdVozTmNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmxiR1Z0Wlc1MElDMGdhbEYxWlhKNUlHOWlhbVZqZENCMGFHRjBJR2x6SUdGdUlFbHVkR1Z5WTJoaGJtZGxJR2x1YzNSaGJtTmxYRzRnSUNBcUlFQnlaWFIxY201eklIdEJjbkpoZVgwZ2MyTmxibUZ5YVc5eklDMGdRWEp5WVhrZ2IyWWdiMkpxWldOMGN5QjBhR0YwSUdoaGRtVWdKMjF4SnlCaGJtUWdKM0JoZEdnbklHdGxlWE1nZDJsMGFDQmpiM0p5WlhOd2IyNWthVzVuSUd0bGVYTmNiaUFnSUNvdlhHNGdJRjluWlc1bGNtRjBaVkoxYkdWektHVnNaVzFsYm5RcElIdGNiaUFnSUNCMllYSWdjblZzWlhOTWFYTjBJRDBnVzEwN1hHNGdJQ0FnZG1GeUlISjFiR1Z6TzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTV5ZFd4bGN5a2dlMXh1SUNBZ0lDQWdjblZzWlhNZ1BTQjBhR2x6TG05d2RHbHZibk11Y25Wc1pYTTdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdjblZzWlhNZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9KMmx1ZEdWeVkyaGhibWRsSnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY25Wc1pYTWdQU0FnZEhsd1pXOW1JSEoxYkdWeklEMDlQU0FuYzNSeWFXNW5KeUEvSUhKMWJHVnpMbTFoZEdOb0tDOWNYRnN1S2o5Y1hGMHZaeWtnT2lCeWRXeGxjenRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnYVc0Z2NuVnNaWE1wSUh0Y2JpQWdJQ0FnSUdsbUtISjFiR1Z6TG1oaGMwOTNibEJ5YjNCbGNuUjVLR2twS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5ZFd4bElEMGdjblZzWlhOYmFWMHVjMnhwWTJVb01Td2dMVEVwTG5Od2JHbDBLQ2NzSUNjcE8xeHVJQ0FnSUNBZ0lDQjJZWElnY0dGMGFDQTlJSEoxYkdVdWMyeHBZMlVvTUN3Z0xURXBMbXB2YVc0b0p5Y3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NYVmxjbmtnUFNCeWRXeGxXM0oxYkdVdWJHVnVaM1JvSUMwZ01WMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tFbHVkR1Z5WTJoaGJtZGxMbE5RUlVOSlFVeGZVVlZGVWtsRlUxdHhkV1Z5ZVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0J4ZFdWeWVTQTlJRWx1ZEdWeVkyaGhibWRsTGxOUVJVTkpRVXhmVVZWRlVrbEZVMXR4ZFdWeWVWMDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeWRXeGxjMHhwYzNRdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ2NHRjBhRG9nY0dGMGFDeGNiaUFnSUNBZ0lDQWdJQ0J4ZFdWeWVUb2djWFZsY25sY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTV5ZFd4bGN5QTlJSEoxYkdWelRHbHpkRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmNHUmhkR1VnZEdobElHQnpjbU5nSUhCeWIzQmxjblI1SUc5bUlHRnVJR2x0WVdkbExDQnZjaUJqYUdGdVoyVWdkR2hsSUVoVVRVd2diMllnWVNCamIyNTBZV2x1WlhJc0lIUnZJSFJvWlNCemNHVmphV1pwWldRZ2NHRjBhQzVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd1lYUm9JQzBnVUdGMGFDQjBieUIwYUdVZ2FXMWhaMlVnYjNJZ1NGUk5UQ0J3WVhKMGFXRnNMbHh1SUNBZ0tpQkFabWx5WlhNZ1NXNTBaWEpqYUdGdVoyVWpjbVZ3YkdGalpXUmNiaUFnSUNvdlhHNGdJSEpsY0d4aFkyVW9jR0YwYUNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1OMWNuSmxiblJRWVhSb0lEMDlQU0J3WVhSb0tTQnlaWFIxY200N1hHNWNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TEZ4dUlDQWdJQ0FnSUNCMGNtbG5aMlZ5SUQwZ0ozSmxjR3hoWTJWa0xucG1MbWx1ZEdWeVkyaGhibWRsSnp0Y2JseHVJQ0FnSUM4dklGSmxjR3hoWTJsdVp5QnBiV0ZuWlhOY2JpQWdJQ0JwWmlBb2RHaHBjeTRrWld4bGJXVnVkRnN3WFM1dWIyUmxUbUZ0WlNBOVBUMGdKMGxOUnljcElIdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpZ25jM0pqSnl3Z2NHRjBhQ2t1YjI0b0oyeHZZV1FuTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVkzVnljbVZ1ZEZCaGRHZ2dQU0J3WVhSb08xeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNTBjbWxuWjJWeUtIUnlhV2RuWlhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCU1pYQnNZV05wYm1jZ1ltRmphMmR5YjNWdVpDQnBiV0ZuWlhOY2JpQWdJQ0JsYkhObElHbG1JQ2h3WVhSb0xtMWhkR05vS0M5Y1hDNG9aMmxtZkdwd1ozeHFjR1ZuZkhCdVozeHpkbWQ4ZEdsbVppa29XejhqWFM0cUtUOHZhU2twSUh0Y2JpQWdJQ0FnSUhCaGRHZ2dQU0J3WVhSb0xuSmxjR3hoWTJVb0wxeGNLQzluTENBbkpUSTRKeWt1Y21Wd2JHRmpaU2d2WEZ3cEwyY3NJQ2NsTWprbktUdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WTNOektIc2dKMkpoWTJ0bmNtOTFibVF0YVcxaFoyVW5PaUFuZFhKc0tDY3JjR0YwYUNzbktTY2dmU2xjYmlBZ0lDQWdJQ0FnSUNBdWRISnBaMmRsY2loMGNtbG5aMlZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnVW1Wd2JHRmphVzVuSUVoVVRVeGNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ1F1WjJWMEtIQmhkR2dzSUdaMWJtTjBhVzl1S0hKbGMzQnZibk5sS1NCN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TGlSbGJHVnRaVzUwTG1oMGJXd29jbVZ6Y0c5dWMyVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0xuUnlhV2RuWlhJb2RISnBaMmRsY2lrN1hHNGdJQ0FnSUNBZ0lDUW9jbVZ6Y0c5dWMyVXBMbVp2ZFc1a1lYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WTNWeWNtVnVkRkJoZEdnZ1BTQndZWFJvTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JtbHlaWE1nZDJobGJpQmpiMjUwWlc1MElHbHVJR0Z1SUVsdWRHVnlZMmhoYm1kbElHVnNaVzFsYm5RZ2FYTWdaRzl1WlNCaVpXbHVaeUJzYjJGa1pXUXVYRzRnSUNBZ0lDb2dRR1YyWlc1MElFbHVkR1Z5WTJoaGJtZGxJM0psY0d4aFkyVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ0x5OGdkR2hwY3k0a1pXeGxiV1Z1ZEM1MGNtbG5aMlZ5S0NkeVpYQnNZV05sWkM1NlppNXBiblJsY21Ob1lXNW5aU2NwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxjM1J5YjNseklHRnVJR2x1YzNSaGJtTmxJRzltSUdsdWRHVnlZMmhoYm1kbExseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ292WEc0Z0lGOWtaWE4wY205NUtDa2dlMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjJabUtDZHlaWE5wZW1WdFpTNTZaaTUwY21sbloyVnlKeWxjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVSbFptRjFiSFFnYzJWMGRHbHVaM01nWm05eUlIQnNkV2RwYmx4dUlDb3ZYRzVKYm5SbGNtTm9ZVzVuWlM1a1pXWmhkV3gwY3lBOUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUZKMWJHVnpJSFJ2SUdKbElHRndjR3hwWldRZ2RHOGdTVzUwWlhKamFHRnVaMlVnWld4bGJXVnVkSE11SUZObGRDQjNhWFJvSUhSb1pTQmdaR0YwWVMxcGJuUmxjbU5vWVc1blpXQWdZWEp5WVhrZ2JtOTBZWFJwYjI0dVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2V6OWhjbkpoZVgxY2JpQWdJQ29nUUdSbFptRjFiSFFnYm5Wc2JGeHVJQ0FnS2k5Y2JpQWdjblZzWlhNNklHNTFiR3hjYm4wN1hHNWNia2x1ZEdWeVkyaGhibWRsTGxOUVJVTkpRVXhmVVZWRlVrbEZVeUE5SUh0Y2JpQWdKMnhoYm1SelkyRndaU2M2SUNkelkzSmxaVzRnWVc1a0lDaHZjbWxsYm5SaGRHbHZiam9nYkdGdVpITmpZWEJsS1Njc1hHNGdJQ2R3YjNKMGNtRnBkQ2M2SUNkelkzSmxaVzRnWVc1a0lDaHZjbWxsYm5SaGRHbHZiam9nY0c5eWRISmhhWFFwSnl4Y2JpQWdKM0psZEdsdVlTYzZJQ2R2Ym14NUlITmpjbVZsYmlCaGJtUWdLQzEzWldKcmFYUXRiV2x1TFdSbGRtbGpaUzF3YVhobGJDMXlZWFJwYnpvZ01pa3NJRzl1YkhrZ2MyTnlaV1Z1SUdGdVpDQW9iV2x1TFMxdGIzb3RaR1YyYVdObExYQnBlR1ZzTFhKaGRHbHZPaUF5S1N3Z2IyNXNlU0J6WTNKbFpXNGdZVzVrSUNndGJ5MXRhVzR0WkdWMmFXTmxMWEJwZUdWc0xYSmhkR2x2T2lBeUx6RXBMQ0J2Ym14NUlITmpjbVZsYmlCaGJtUWdLRzFwYmkxa1pYWnBZMlV0Y0dsNFpXd3RjbUYwYVc4NklESXBMQ0J2Ym14NUlITmpjbVZsYmlCaGJtUWdLRzFwYmkxeVpYTnZiSFYwYVc5dU9pQXhPVEprY0drcExDQnZibXg1SUhOamNtVmxiaUJoYm1RZ0tHMXBiaTF5WlhOdmJIVjBhVzl1T2lBeVpIQndlQ2tuWEc1OU8xeHVYRzVsZUhCdmNuUWdlMGx1ZEdWeVkyaGhibWRsZlR0Y2JpSmRmUT09XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uaW50ZXJjaGFuZ2UuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTWFnZWxsYW4gPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5jb3JlJyk7XG5cbnZhciBfZm91bmRhdGlvbiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi5wbHVnaW4nKTtcblxudmFyIF9mb3VuZGF0aW9uMiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi5zbW9vdGhTY3JvbGwnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIE1hZ2VsbGFuIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tYWdlbGxhblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24uc21vb3RoU2Nyb2xsXG4gKi9cblxudmFyIE1hZ2VsbGFuID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKE1hZ2VsbGFuLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBNYWdlbGxhbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFnZWxsYW4pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNYWdlbGxhbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1hZ2VsbGFuKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWFnZWxsYW4sIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgTWFnZWxsYW4uXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgTWFnZWxsYW5cbiAgICAgKiBAZmlyZXMgTWFnZWxsYW4jaW5pdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgTWFnZWxsYW4uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ01hZ2VsbGFuJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgIHRoaXMuY2FsY1BvaW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBNYWdlbGxhbiBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgZXF1YWxpemVyIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgKDAsIF9mb3VuZGF0aW9uVXRpbC5HZXRZb0RpZ2l0cykoNiwgJ21hZ2VsbGFuJyk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy4kdGFyZ2V0cyA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtbWFnZWxsYW4tdGFyZ2V0XScpO1xuICAgICAgdGhpcy4kbGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgICAnZGF0YS1zY3JvbGwnOiBpZCxcbiAgICAgICAgJ2lkJzogaWRcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kYWN0aXZlID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCk7XG4gICAgICB0aGlzLnNjcm9sbFBvcyA9IHBhcnNlSW50KHdpbmRvdy5wYWdlWU9mZnNldCwgMTApO1xuXG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGFuIGFycmF5IG9mIHBpeGVsIHZhbHVlcyB0aGF0IGFyZSB0aGUgZGVtYXJjYXRpb24gbGluZXMgYmV0d2VlbiBsb2NhdGlvbnMgb24gdGhlIHBhZ2UuXG4gICAgICogQ2FuIGJlIGludm9rZWQgaWYgbmV3IGVsZW1lbnRzIGFyZSBhZGRlZCBvciB0aGUgc2l6ZSBvZiBhIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NhbGNQb2ludHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjUG9pbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBib2R5ID0gZG9jdW1lbnQuYm9keSxcbiAgICAgICAgICBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgICAgdGhpcy53aW5IZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KHdpbmRvdy5pbm5lckhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQpKTtcbiAgICAgIHRoaXMuZG9jSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heChib2R5LnNjcm9sbEhlaWdodCwgYm9keS5vZmZzZXRIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5vZmZzZXRIZWlnaHQpKTtcblxuICAgICAgdGhpcy4kdGFyZ2V0cy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0YXIgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksXG4gICAgICAgICAgICBwdCA9IE1hdGgucm91bmQoJHRhci5vZmZzZXQoKS50b3AgLSBfdGhpcy5vcHRpb25zLnRocmVzaG9sZCk7XG4gICAgICAgICR0YXIudGFyZ2V0UG9pbnQgPSBwdDtcbiAgICAgICAgX3RoaXMucG9pbnRzLnB1c2gocHQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBNYWdlbGxhbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgJGJvZHkgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ2h0bWwsIGJvZHknKSxcbiAgICAgICAgICBvcHRzID0ge1xuICAgICAgICBkdXJhdGlvbjogX3RoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgZWFzaW5nOiBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ1xuICAgICAgfTtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpIHtcbiAgICAgICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2MobG9jYXRpb24uaGFzaCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmNhbGNQb2ludHMoKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFjdGl2ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IHRoaXMucmVmbG93LmJpbmQodGhpcyksXG4gICAgICAgICdzY3JvbGxtZS56Zi50cmlnZ2VyJzogdGhpcy5fdXBkYXRlQWN0aXZlLmJpbmQodGhpcylcbiAgICAgIH0pLm9uKCdjbGljay56Zi5tYWdlbGxhbicsICdhW2hyZWZePVwiI1wiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGFycml2YWwgPSB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICBfdGhpcy5zY3JvbGxUb0xvYyhhcnJpdmFsKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9kZWVwTGlua1Njcm9sbCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKSB7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2Mod2luZG93LmxvY2F0aW9uLmhhc2gpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aGlzLl9kZWVwTGlua1Njcm9sbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gbG9jYXRpb24gb24gdGhlIHBhZ2UuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxvYyAtIGEgcHJvcGVybHkgZm9ybWF0dGVkIGpRdWVyeSBpZCBzZWxlY3Rvci4gRXhhbXBsZTogJyNmb28nXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Njcm9sbFRvTG9jJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG9Mb2MobG9jKSB7XG4gICAgICB0aGlzLl9pblRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGFuaW1hdGlvbkVhc2luZzogdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZyxcbiAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IHRoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgdGhyZXNob2xkOiB0aGlzLm9wdGlvbnMudGhyZXNob2xkLFxuICAgICAgICBvZmZzZXQ6IHRoaXMub3B0aW9ucy5vZmZzZXRcbiAgICAgIH07XG5cbiAgICAgIF9mb3VuZGF0aW9uMi5TbW9vdGhTY3JvbGwuc2Nyb2xsVG9Mb2MobG9jLCBvcHRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9pblRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFjdGl2ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgTWFnZWxsYW4gdXBvbiBET00gY2hhbmdlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlZmxvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZmxvdygpIHtcbiAgICAgIHRoaXMuY2FsY1BvaW50cygpO1xuICAgICAgdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBhY3RpdmUgbG9jYXRpb24gbGluaywgYW5kIHVwZGF0ZXMgdGhlIHVybCBoYXNoIGZvciB0aGUgcGFnZSwgaWYgZGVlcExpbmtpbmcgZW5hYmxlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBNYWdlbGxhbiN1cGRhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZUFjdGl2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVBY3RpdmUoKSAvKmV2dCwgZWxlbSwgc2Nyb2xsUG9zKi97XG4gICAgICBpZiAodGhpcy5faW5UcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB3aW5Qb3MgPSAvKnNjcm9sbFBvcyB8fCovcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCksXG4gICAgICAgICAgY3VySWR4O1xuXG4gICAgICBpZiAod2luUG9zICsgdGhpcy53aW5IZWlnaHQgPT09IHRoaXMuZG9jSGVpZ2h0KSB7XG4gICAgICAgIGN1cklkeCA9IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICB9IGVsc2UgaWYgKHdpblBvcyA8IHRoaXMucG9pbnRzWzBdKSB7XG4gICAgICAgIGN1cklkeCA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpc0Rvd24gPSB0aGlzLnNjcm9sbFBvcyA8IHdpblBvcyxcbiAgICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGN1clZpc2libGUgPSB0aGlzLnBvaW50cy5maWx0ZXIoZnVuY3Rpb24gKHAsIGkpIHtcbiAgICAgICAgICByZXR1cm4gaXNEb3duID8gcCAtIF90aGlzLm9wdGlvbnMub2Zmc2V0IDw9IHdpblBvcyA6IHAgLSBfdGhpcy5vcHRpb25zLm9mZnNldCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkIDw9IHdpblBvcztcbiAgICAgICAgfSk7XG4gICAgICAgIGN1cklkeCA9IGN1clZpc2libGUubGVuZ3RoID8gY3VyVmlzaWJsZS5sZW5ndGggLSAxIDogMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kYWN0aXZlLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG4gICAgICB0aGlzLiRhY3RpdmUgPSB0aGlzLiRsaW5rcy5maWx0ZXIoJ1tocmVmPVwiIycgKyB0aGlzLiR0YXJnZXRzLmVxKGN1cklkeCkuZGF0YSgnbWFnZWxsYW4tdGFyZ2V0JykgKyAnXCJdJykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZykge1xuICAgICAgICB2YXIgaGFzaCA9IFwiXCI7XG4gICAgICAgIGlmIChjdXJJZHggIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzaCAhPT0gd2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgaGFzaCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxQb3MgPSB3aW5Qb3M7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gbWFnZWxsYW4gaXMgZmluaXNoZWQgdXBkYXRpbmcgdG8gdGhlIG5ldyBhY3RpdmUgZWxlbWVudC5cbiAgICAgICAqIEBldmVudCBNYWdlbGxhbiN1cGRhdGVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cGRhdGUuemYubWFnZWxsYW4nLCBbdGhpcy4kYWN0aXZlXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgTWFnZWxsYW4gYW5kIHJlc2V0cyB0aGUgdXJsIG9mIHRoZSB3aW5kb3cuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm1hZ2VsbGFuJykuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpIHtcbiAgICAgICAgdmFyIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoaGFzaCwgJycpO1xuICAgICAgfVxuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuX2RlZXBMaW5rU2Nyb2xsKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFnZWxsYW47XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cblxuXG5NYWdlbGxhbi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgdGhlIGFuaW1hdGVkIHNjcm9sbGluZyBzaG91bGQgdGFrZSBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCA1MDBcbiAgICovXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsXG4gIC8qKlxuICAgKiBBbmltYXRpb24gc3R5bGUgdG8gdXNlIHdoZW4gc2Nyb2xsaW5nIGJldHdlZW4gbG9jYXRpb25zLiBDYW4gYmUgYCdzd2luZydgIG9yIGAnbGluZWFyJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2xpbmVhcidcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hbmltYXRlfEpxdWVyeSBhbmltYXRlfVxuICAgKi9cbiAgYW5pbWF0aW9uRWFzaW5nOiAnbGluZWFyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gdXNlIGFzIGEgbWFya2VyIGZvciBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwXG4gICAqL1xuICB0aHJlc2hvbGQ6IDUwLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGxvY2F0aW9ucyBsaW5rIG9uIHRoZSBtYWdlbGxhbiBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIGFjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgc2NyaXB0IHRvIG1hbmlwdWxhdGUgdGhlIHVybCBvZiB0aGUgY3VycmVudCBwYWdlLCBhbmQgaWYgc3VwcG9ydGVkLCBhbHRlciB0aGUgaGlzdG9yeS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIG9mZnNldDogMFxufTtcblxuZXhwb3J0cy5NYWdlbGxhbiA9IE1hZ2VsbGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWJXRm5aV3hzWVc0dWFuTWlYU3dpYm1GdFpYTWlPbHNpVFdGblpXeHNZVzRpTENKbGJHVnRaVzUwSWl3aWIzQjBhVzl1Y3lJc0lpUmxiR1Z0Wlc1MElpd2lKQ0lzSW1WNGRHVnVaQ0lzSW1SbFptRjFiSFJ6SWl3aVpHRjBZU0lzSW1Oc1lYTnpUbUZ0WlNJc0lsOXBibWwwSWl3aVkyRnNZMUJ2YVc1MGN5SXNJbWxrSWl3aVgzUm9hWE1pTENJa2RHRnlaMlYwY3lJc0lpUnNhVzVyY3lJc0ltWnBibVFpTENKaGRIUnlJaXdpSkdGamRHbDJaU0lzSW5OamNtOXNiRkJ2Y3lJc0luQmhjbk5sU1c1MElpd2lkMmx1Wkc5M0lpd2ljR0ZuWlZsUFptWnpaWFFpTENKZlpYWmxiblJ6SWl3aVltOWtlU0lzSW1SdlkzVnRaVzUwSWl3aWFIUnRiQ0lzSW1SdlkzVnRaVzUwUld4bGJXVnVkQ0lzSW5CdmFXNTBjeUlzSW5kcGJraGxhV2RvZENJc0lrMWhkR2dpTENKeWIzVnVaQ0lzSW0xaGVDSXNJbWx1Ym1WeVNHVnBaMmgwSWl3aVkyeHBaVzUwU0dWcFoyaDBJaXdpWkc5alNHVnBaMmgwSWl3aWMyTnliMnhzU0dWcFoyaDBJaXdpYjJabWMyVjBTR1ZwWjJoMElpd2laV0ZqYUNJc0lpUjBZWElpTENKd2RDSXNJbTltWm5ObGRDSXNJblJ2Y0NJc0luUm9jbVZ6YUc5c1pDSXNJblJoY21kbGRGQnZhVzUwSWl3aWNIVnphQ0lzSWlSaWIyUjVJaXdpYjNCMGN5SXNJbVIxY21GMGFXOXVJaXdpWVc1cGJXRjBhVzl1UkhWeVlYUnBiMjRpTENKbFlYTnBibWNpTENKaGJtbHRZWFJwYjI1RllYTnBibWNpTENKdmJtVWlMQ0prWldWd1RHbHVhMmx1WnlJc0lteHZZMkYwYVc5dUlpd2lhR0Z6YUNJc0luTmpjbTlzYkZSdlRHOWpJaXdpWDNWd1pHRjBaVUZqZEdsMlpTSXNJbTl1SWl3aWNtVm1iRzkzSWl3aVltbHVaQ0lzSW1VaUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0ltRnljbWwyWVd3aUxDSm5aWFJCZEhSeWFXSjFkR1VpTENKZlpHVmxjRXhwYm10VFkzSnZiR3dpTENKc2IyTWlMQ0pmYVc1VWNtRnVjMmwwYVc5dUlpd2lVMjF2YjNSb1UyTnliMnhzSWl3aWQybHVVRzl6SWl3aVkzVnlTV1I0SWl3aWJHVnVaM1JvSWl3aWRXNWtaV1pwYm1Wa0lpd2lhWE5FYjNkdUlpd2lZM1Z5Vm1semFXSnNaU0lzSW1acGJIUmxjaUlzSW5BaUxDSnBJaXdpY21WdGIzWmxRMnhoYzNNaUxDSmhZM1JwZG1WRGJHRnpjeUlzSW1WeElpd2lZV1JrUTJ4aGMzTWlMQ0pvYVhOMGIzSjVJaXdpY0hWemFGTjBZWFJsSWl3aWRISnBaMmRsY2lJc0ltOW1aaUlzSW5KbGNHeGhZMlVpTENKUWJIVm5hVzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPenM3UVVGSFFUczdPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenM3T3pzN096czdPMEZCUlVFN096czdPenRKUVUxTlFTeFJPenM3T3pzN096czdPenM3UVVGRFNqczdPenM3T3pzN01rSkJVVTlETEU4c1JVRkJVME1zVHl4RlFVRlRPMEZCUTNaQ0xGZEJRVXRETEZGQlFVd3NSMEZCWjBKR0xFOUJRV2hDTzBGQlEwRXNWMEZCUzBNc1QwRkJUQ3hIUVVGblFrVXNhVUpCUVVWRExFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRk1MRk5CUVZOTkxGRkJRWFJDTEVWQlFXZERMRXRCUVV0SUxGRkJRVXdzUTBGQlkwa3NTVUZCWkN4RlFVRm9ReXhGUVVGelJFd3NUMEZCZEVRc1EwRkJhRUk3UVVGRFFTeFhRVUZMVFN4VFFVRk1MRWRCUVdsQ0xGVkJRV3BDTEVOQlNIVkNMRU5CUjAwN08wRkJSVGRDTEZkQlFVdERMRXRCUVV3N1FVRkRRU3hYUVVGTFF5eFZRVUZNTzBGQlEwUTdPMEZCUlVRN096czdPenM3TkVKQlNWRTdRVUZEVGl4VlFVRkpReXhMUVVGTExFdEJRVXRTTEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ1VTeEZRVUZxUWl4SlFVRjFRaXhwUTBGQldTeERRVUZhTEVWQlFXVXNWVUZCWml4RFFVRm9RenRCUVVOQkxGVkJRVWxETEZGQlFWRXNTVUZCV2p0QlFVTkJMRmRCUVV0RExGRkJRVXdzUjBGQlowSXNjMEpCUVVVc2QwSkJRVVlzUTBGQmFFSTdRVUZEUVN4WFFVRkxReXhOUVVGTUxFZEJRV01zUzBGQlMxZ3NVVUZCVEN4RFFVRmpXU3hKUVVGa0xFTkJRVzFDTEVkQlFXNUNMRU5CUVdRN1FVRkRRU3hYUVVGTFdpeFJRVUZNTEVOQlFXTmhMRWxCUVdRc1EwRkJiVUk3UVVGRGFrSXNkVUpCUVdWTUxFVkJSRVU3UVVGRmFrSXNkVUpCUVdWQkxFVkJSa1U3UVVGSGFrSXNZMEZCVFVFN1FVRklWeXhQUVVGdVFqdEJRVXRCTEZkQlFVdE5MRTlCUVV3c1IwRkJaU3gxUWtGQlpqdEJRVU5CTEZkQlFVdERMRk5CUVV3c1IwRkJhVUpETEZOQlFWTkRMRTlCUVU5RExGZEJRV2hDTEVWQlFUWkNMRVZCUVRkQ0xFTkJRV3BDT3p0QlFVVkJMRmRCUVV0RExFOUJRVXc3UVVGRFJEczdRVUZGUkRzN096czdPenM3YVVOQlMyRTdRVUZEV0N4VlFVRkpWaXhSUVVGUkxFbEJRVm83UVVGQlFTeFZRVU5KVnl4UFFVRlBReXhUUVVGVFJDeEpRVVJ3UWp0QlFVRkJMRlZCUlVsRkxFOUJRVTlFTEZOQlFWTkZMR1ZCUm5CQ096dEJRVWxCTEZkQlFVdERMRTFCUVV3c1IwRkJZeXhGUVVGa08wRkJRMEVzVjBGQlMwTXNVMEZCVEN4SFFVRnBRa01zUzBGQlMwTXNTMEZCVEN4RFFVRlhSQ3hMUVVGTFJTeEhRVUZNTEVOQlFWTllMRTlCUVU5WkxGZEJRV2hDTEVWQlFUWkNVQ3hMUVVGTFVTeFpRVUZzUXl4RFFVRllMRU5CUVdwQ08wRkJRMEVzVjBGQlMwTXNVMEZCVEN4SFFVRnBRa3dzUzBGQlMwTXNTMEZCVEN4RFFVRlhSQ3hMUVVGTFJTeEhRVUZNTEVOQlFWTlNMRXRCUVV0WkxGbEJRV1FzUlVGQk5FSmFMRXRCUVV0aExGbEJRV3BETEVWQlFTdERXQ3hMUVVGTFVTeFpRVUZ3UkN4RlFVRnJSVklzUzBGQlMxVXNXVUZCZGtVc1JVRkJjVVpXTEV0QlFVdFhMRmxCUVRGR0xFTkJRVmdzUTBGQmFrSTdPMEZCUlVFc1YwRkJTM1pDTEZGQlFVd3NRMEZCWTNkQ0xFbEJRV1FzUTBGQmJVSXNXVUZCVlR0QlFVTXpRaXhaUVVGSlF5eFBRVUZQTEhOQ1FVRkZMRWxCUVVZc1EwRkJXRHRCUVVGQkxGbEJRMGxETEV0QlFVdFdMRXRCUVV0RExFdEJRVXdzUTBGQlYxRXNTMEZCUzBVc1RVRkJUQ3hIUVVGalF5eEhRVUZrTEVkQlFXOUNOMElzVFVGQlRWWXNUMEZCVGl4RFFVRmpkME1zVTBGQk4wTXNRMEZFVkR0QlFVVkJTaXhoUVVGTFN5eFhRVUZNTEVkQlFXMUNTaXhGUVVGdVFqdEJRVU5CTTBJc1kwRkJUV1VzVFVGQlRpeERRVUZoYVVJc1NVRkJZaXhEUVVGclFrd3NSVUZCYkVJN1FVRkRSQ3hQUVV4RU8wRkJUVVE3TzBGQlJVUTdPenM3T3pzN09FSkJTVlU3UVVGRFVpeFZRVUZKTTBJc1VVRkJVU3hKUVVGYU8wRkJRVUVzVlVGRFNXbERMRkZCUVZFc2MwSkJRVVVzV1VGQlJpeERRVVJhTzBGQlFVRXNWVUZGU1VNc1QwRkJUenRCUVVOTVF5eHJRa0ZCVlc1RExFMUJRVTFXTEU5QlFVNHNRMEZCWXpoRExHbENRVVJ1UWp0QlFVVk1ReXhuUWtGQlZYSkRMRTFCUVUxV0xFOUJRVTRzUTBGQlkyZEVPMEZCUm01Q0xFOUJSbGc3UVVGTlFTdzBRa0ZCUlRsQ0xFMUJRVVlzUlVGQlZTdENMRWRCUVZZc1EwRkJZeXhOUVVGa0xFVkJRWE5DTEZsQlFWVTdRVUZET1VJc1dVRkJSM1pETEUxQlFVMVdMRTlCUVU0c1EwRkJZMnRFTEZkQlFXcENMRVZCUVRaQ08wRkJRek5DTEdOQlFVZERMRk5CUVZORExFbEJRVm9zUlVGQmFVSTdRVUZEWmpGRExHdENRVUZOTWtNc1YwRkJUaXhEUVVGclFrWXNVMEZCVTBNc1NVRkJNMEk3UVVGRFJEdEJRVU5HTzBGQlEwUXhReXhqUVVGTlJpeFZRVUZPTzBGQlEwRkZMR05CUVUwMFF5eGhRVUZPTzBGQlEwUXNUMEZTUkRzN1FVRlZRU3hYUVVGTGNrUXNVVUZCVEN4RFFVRmpjMFFzUlVGQlpDeERRVUZwUWp0QlFVTm1MQ3RDUVVGMVFpeExRVUZMUXl4TlFVRk1MRU5CUVZsRExFbEJRVm9zUTBGQmFVSXNTVUZCYWtJc1EwRkVVanRCUVVWbUxDdENRVUYxUWl4TFFVRkxTQ3hoUVVGTUxFTkJRVzFDUnl4SlFVRnVRaXhEUVVGM1FpeEpRVUY0UWp0QlFVWlNMRTlCUVdwQ0xFVkJSMGRHTEVWQlNFZ3NRMEZIVFN4dFFrRklUaXhGUVVjeVFpeGpRVWd6UWl4RlFVY3lReXhWUVVGVFJ5eERRVUZVTEVWQlFWazdRVUZEYmtSQkxGVkJRVVZETEdOQlFVWTdRVUZEUVN4WlFVRkpReXhWUVVGWkxFdEJRVXRETEZsQlFVd3NRMEZCYTBJc1RVRkJiRUlzUTBGQmFFSTdRVUZEUVc1RUxHTkJRVTB5UXl4WFFVRk9MRU5CUVd0Q1R5eFBRVUZzUWp0QlFVTkVMRTlCVUVnN08wRkJVMEVzVjBGQlMwVXNaVUZCVEN4SFFVRjFRaXhWUVVGVFNpeERRVUZVTEVWQlFWazdRVUZEYWtNc1dVRkJSMmhFTEUxQlFVMVdMRTlCUVU0c1EwRkJZMnRFTEZkQlFXcENMRVZCUVRoQ08wRkJRelZDZUVNc1owSkJRVTB5UXl4WFFVRk9MRU5CUVd0Q2JrTXNUMEZCVDJsRExGRkJRVkFzUTBGQlowSkRMRWxCUVd4RE8wRkJRMFE3UVVGRFJpeFBRVXBFT3p0QlFVMUJMRFJDUVVGRmJFTXNUVUZCUml4RlFVRlZjVU1zUlVGQlZpeERRVUZoTEZWQlFXSXNSVUZCZVVJc1MwRkJTMDhzWlVGQk9VSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdaME5CUzFsRExFY3NSVUZCU3p0QlFVTm1MRmRCUVV0RExHRkJRVXdzUjBGQmNVSXNTVUZCY2tJN1FVRkRRU3hWUVVGSmRFUXNVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWxXTEZWQlFWVTdRVUZEV21kRUxIbENRVUZwUWl4TFFVRkxhRVFzVDBGQlRDeERRVUZoWjBRc1pVRkViRUk3UVVGRldrWXNNa0pCUVcxQ0xFdEJRVXM1UXl4UFFVRk1MRU5CUVdFNFF5eHBRa0ZHY0VJN1FVRkhXazRzYlVKQlFWY3NTMEZCUzNoRExFOUJRVXdzUTBGQllYZERMRk5CU0ZvN1FVRkpXa1lzWjBKQlFWRXNTMEZCUzNSRExFOUJRVXdzUTBGQllYTkRPMEZCU2xRc1QwRkJaRHM3UVVGUFFUSkNMR2REUVVGaFdpeFhRVUZpTEVOQlFYbENWU3hIUVVGNlFpeEZRVUU0UWk5RUxFOUJRVGxDTEVWQlFYVkRMRmxCUVZjN1FVRkRhRVJWTEdOQlFVMXpSQ3hoUVVGT0xFZEJRWE5DTEV0QlFYUkNPMEZCUTBGMFJDeGpRVUZOTkVNc1lVRkJUanRCUVVORUxFOUJTRVE3UVVGSlJEczdRVUZGUkRzN096czdPenMyUWtGSlV6dEJRVU5RTEZkQlFVczVReXhWUVVGTU8wRkJRMEVzVjBGQlN6aERMR0ZCUVV3N1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN08yOURRVTFqTEhkQ1FVRXdRanRCUVVOMFF5eFZRVUZITEV0QlFVdFZMR0ZCUVZJc1JVRkJkVUk3UVVGQlF6dEJRVUZSTzBGQlEyaERMRlZCUVVsRkxGTkJRVk1zWjBKQlFXbENha1FzVTBGQlUwTXNUMEZCVDBNc1YwRkJhRUlzUlVGQk5rSXNSVUZCTjBJc1EwRkJPVUk3UVVGQlFTeFZRVU5KWjBRc1RVRkVTanM3UVVGSFFTeFZRVUZIUkN4VFFVRlRMRXRCUVV0NFF5eFRRVUZrTEV0QlFUUkNMRXRCUVV0TkxGTkJRWEJETEVWQlFUaERPMEZCUVVWdFF5eHBRa0ZCVXl4TFFVRkxNVU1zVFVGQlRDeERRVUZaTWtNc1RVRkJXaXhIUVVGeFFpeERRVUU1UWp0QlFVRnJReXhQUVVGc1JpeE5RVU5MTEVsQlFVZEdMRk5CUVZNc1MwRkJTM3BETEUxQlFVd3NRMEZCV1N4RFFVRmFMRU5CUVZvc1JVRkJNa0k3UVVGQlJUQkRMR2xDUVVGVFJTeFRRVUZVTzBGQlFYRkNMRTlCUVd4RUxFMUJRMFE3UVVGRFJpeFpRVUZKUXl4VFFVRlRMRXRCUVV0MFJDeFRRVUZNTEVkQlFXbENhMFFzVFVGQk9VSTdRVUZCUVN4WlFVTkplRVFzVVVGQlVTeEpRVVJhTzBGQlFVRXNXVUZGU1RaRUxHRkJRV0VzUzBGQlN6bERMRTFCUVV3c1EwRkJXU3RETEUxQlFWb3NRMEZCYlVJc1ZVRkJVME1zUTBGQlZDeEZRVUZaUXl4RFFVRmFMRVZCUVdNN1FVRkROVU1zYVVKQlFVOUtMRk5CUVZOSExFbEJRVWt2UkN4TlFVRk5WaXhQUVVGT0xFTkJRV056UXl4TlFVRnNRaXhKUVVFMFFqUkNMRTFCUVhKRExFZEJRVGhEVHl4SlFVRkpMMFFzVFVGQlRWWXNUMEZCVGl4RFFVRmpjME1zVFVGQmJFSXNSMEZCTWtJMVFpeE5RVUZOVml4UFFVRk9MRU5CUVdOM1F5eFRRVUY2UXl4SlFVRnpSREJDTEUxQlFUTkhPMEZCUTBRc1UwRkdXU3hEUVVacVFqdEJRVXRCUXl4cFFrRkJVMGtzVjBGQlYwZ3NUVUZCV0N4SFFVRnZRa2NzVjBGQlYwZ3NUVUZCV0N4SFFVRnZRaXhEUVVGNFF5eEhRVUUwUXl4RFFVRnlSRHRCUVVORU96dEJRVVZFTEZkQlFVdHlSQ3hQUVVGTUxFTkJRV0UwUkN4WFFVRmlMRU5CUVhsQ0xFdEJRVXN6UlN4UFFVRk1MRU5CUVdFMFJTeFhRVUYwUXp0QlFVTkJMRmRCUVVzM1JDeFBRVUZNTEVkQlFXVXNTMEZCUzBnc1RVRkJUQ3hEUVVGWk5FUXNUVUZCV2l4RFFVRnRRaXhoUVVGaExFdEJRVXMzUkN4UlFVRk1MRU5CUVdOclJTeEZRVUZrTEVOQlFXbENWaXhOUVVGcVFpeEZRVUY1UWpsRUxFbEJRWHBDTEVOQlFUaENMR2xDUVVFNVFpeERRVUZpTEVkQlFXZEZMRWxCUVc1R0xFVkJRWGxHZVVVc1VVRkJla1lzUTBGQmEwY3NTMEZCU3psRkxFOUJRVXdzUTBGQllUUkZMRmRCUVM5SExFTkJRV1k3TzBGQlJVRXNWVUZCUnl4TFFVRkxOVVVzVDBGQlRDeERRVUZoYTBRc1YwRkJhRUlzUlVGQk5FSTdRVUZETVVJc1dVRkJTVVVzVDBGQlR5eEZRVUZZTzBGQlEwRXNXVUZCUjJVc1ZVRkJWVVVzVTBGQllpeEZRVUYxUWp0QlFVTnlRbXBDTEdsQ1FVRlBMRXRCUVV0eVF5eFBRVUZNTEVOQlFXRXNRMEZCWWl4RlFVRm5RamhETEZsQlFXaENMRU5CUVRaQ0xFMUJRVGRDTEVOQlFWQTdRVUZEUkR0QlFVTkVMRmxCUVVkVUxGTkJRVk5zUXl4UFFVRlBhVU1zVVVGQlVDeERRVUZuUWtNc1NVRkJOVUlzUlVGQmEwTTdRVUZEYUVNc1kwRkJSMnhETEU5QlFVODJSQ3hQUVVGUUxFTkJRV1ZETEZOQlFXeENMRVZCUVRSQ08wRkJRekZDT1VRc2JVSkJRVTgyUkN4UFFVRlFMRU5CUVdWRExGTkJRV1lzUTBGQmVVSXNTVUZCZWtJc1JVRkJLMElzU1VGQkwwSXNSVUZCY1VNMVFpeEpRVUZ5UXp0QlFVTkVMRmRCUmtRc1RVRkZTenRCUVVOSWJFTXNiVUpCUVU5cFF5eFJRVUZRTEVOQlFXZENReXhKUVVGb1FpeEhRVUYxUWtFc1NVRkJka0k3UVVGRFJEdEJRVU5HTzBGQlEwWTdPMEZCUlVRc1YwRkJTM0JETEZOQlFVd3NSMEZCYVVKclJDeE5RVUZxUWp0QlFVTkJPenM3TzBGQlNVRXNWMEZCUzJwRkxGRkJRVXdzUTBGQlkyZEdMRTlCUVdRc1EwRkJjMElzYjBKQlFYUkNMRVZCUVRSRExFTkJRVU1zUzBGQlMyeEZMRTlCUVU0c1EwRkJOVU03UVVGRFJEczdRVUZGUkRzN096czdPenNyUWtGSlZ6dEJRVU5VTEZkQlFVdGtMRkZCUVV3c1EwRkJZMmxHTEVkQlFXUXNRMEZCYTBJc01FSkJRV3hDTEVWQlEwdHlSU3hKUVVSTUxFOUJRMk1zUzBGQlMySXNUMEZCVEN4RFFVRmhORVVzVjBGRU0wSXNSVUZETUVORUxGZEJSREZETEVOQlEzTkVMRXRCUVVzelJTeFBRVUZNTEVOQlFXRTBSU3hYUVVSdVJUczdRVUZIUVN4VlFVRkhMRXRCUVVzMVJTeFBRVUZNTEVOQlFXRnJSQ3hYUVVGb1FpeEZRVUUwUWp0QlFVTXhRaXhaUVVGSlJTeFBRVUZQTEV0QlFVdHlReXhQUVVGTUxFTkJRV0VzUTBGQllpeEZRVUZuUWpoRExGbEJRV2hDTEVOQlFUWkNMRTFCUVRkQ0xFTkJRVmc3UVVGRFFUTkRMR1ZCUVU5cFF5eFJRVUZRTEVOQlFXZENReXhKUVVGb1FpeERRVUZ4UWl0Q0xFOUJRWEpDTEVOQlFUWkNMMElzU1VGQk4wSXNSVUZCYlVNc1JVRkJia003UVVGRFJEdEJRVU5FTERSQ1FVRkZiRU1zVFVGQlJpeEZRVUZWWjBVc1IwRkJWaXhEUVVGakxGVkJRV1FzUlVGQk1FSXNTMEZCUzNCQ0xHVkJRUzlDTzBGQlEwUTdPenM3UlVFNVRHOUNjMElzYTBJN08wRkJhVTEyUWpzN096czdRVUZIUVhSR0xGTkJRVk5OTEZGQlFWUXNSMEZCYjBJN1FVRkRiRUk3T3pzN096dEJRVTFCTUVNc2NVSkJRVzFDTEVkQlVFUTdRVUZSYkVJN096czdPenM3UVVGUFFVVXNiVUpCUVdsQ0xGRkJaa003UVVGblFteENPenM3T3pzN1FVRk5RVklzWVVGQlZ5eEZRWFJDVHp0QlFYVkNiRUk3T3pzN096dEJRVTFCYjBNc1pVRkJZU3hYUVRkQ1N6dEJRVGhDYkVJN096czdPenRCUVUxQk1VSXNaVUZCWVN4TFFYQkRTenRCUVhGRGJFSTdPenM3T3p0QlFVMUJXaXhWUVVGUk8wRkJNME5WTEVOQlFYQkNPenRSUVRoRFVYaERMRkVzUjBGQlFVRXNVU0lzSW1acGJHVWlPaUptYjNWdVpHRjBhVzl1TG0xaFoyVnNiR0Z1TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNWNibWx0Y0c5eWRDQWtJR1p5YjIwZ0oycHhkV1Z5ZVNjN1hHNXBiWEJ2Y25RZ2V5QkhaWFJaYjBScFoybDBjeUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbU52Y21Vbk8xeHVhVzF3YjNKMElIc2dVR3gxWjJsdUlIMGdabkp2YlNBbkxpOW1iM1Z1WkdGMGFXOXVMbkJzZFdkcGJpYzdYRzVwYlhCdmNuUWdleUJUYlc5dmRHaFRZM0p2Ykd3Z2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVjMjF2YjNSb1UyTnliMnhzSnp0Y2JseHVMeW9xWEc0Z0tpQk5ZV2RsYkd4aGJpQnRiMlIxYkdVdVhHNGdLaUJBYlc5a2RXeGxJR1p2ZFc1a1lYUnBiMjR1YldGblpXeHNZVzVjYmlBcUlFQnlaWEYxYVhKbGN5Qm1iM1Z1WkdGMGFXOXVMbk50YjI5MGFGTmpjbTlzYkZ4dUlDb3ZYRzVjYm1Oc1lYTnpJRTFoWjJWc2JHRnVJR1Y0ZEdWdVpITWdVR3gxWjJsdUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVNCdVpYY2dhVzV6ZEdGdVkyVWdiMllnVFdGblpXeHNZVzR1WEc0Z0lDQXFJRUJqYkdGemMxeHVJQ0FnS2lCQWJtRnRaU0JOWVdkbGJHeGhibHh1SUNBZ0tpQkFabWx5WlhNZ1RXRm5aV3hzWVc0amFXNXBkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pXeGxiV1Z1ZENBdElHcFJkV1Z5ZVNCdlltcGxZM1FnZEc4Z1lXUmtJSFJvWlNCMGNtbG5aMlZ5SUhSdkxseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUU5MlpYSnlhV1JsY3lCMGJ5QjBhR1VnWkdWbVlYVnNkQ0J3YkhWbmFXNGdjMlYwZEdsdVozTXVYRzRnSUNBcUwxeHVJQ0JmYzJWMGRYQW9aV3hsYldWdWRDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBZ1BTQWtMbVY0ZEdWdVpDaDdmU3dnVFdGblpXeHNZVzR1WkdWbVlYVnNkSE1zSUhSb2FYTXVKR1ZzWlcxbGJuUXVaR0YwWVNncExDQnZjSFJwYjI1ektUdGNiaUFnSUNCMGFHbHpMbU5zWVhOelRtRnRaU0E5SUNkTllXZGxiR3hoYmljN0lDOHZJR2xsT1NCaVlXTnJJR052YlhCaGRGeHVYRzRnSUNBZ2RHaHBjeTVmYVc1cGRDZ3BPMXh1SUNBZ0lIUm9hWE11WTJGc1kxQnZhVzUwY3lncE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YVhScFlXeHBlbVZ6SUhSb1pTQk5ZV2RsYkd4aGJpQndiSFZuYVc0Z1lXNWtJR05oYkd4eklHWjFibU4wYVc5dWN5QjBieUJuWlhRZ1pYRjFZV3hwZW1WeUlHWjFibU4wYVc5dWFXNW5JRzl1SUd4dllXUXVYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZhVzVwZENncElIdGNiaUFnSUNCMllYSWdhV1FnUFNCMGFHbHpMaVJsYkdWdFpXNTBXekJkTG1sa0lIeDhJRWRsZEZsdlJHbG5hWFJ6S0RZc0lDZHRZV2RsYkd4aGJpY3BPMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnZEdocGN5NGtkR0Z5WjJWMGN5QTlJQ1FvSjF0a1lYUmhMVzFoWjJWc2JHRnVMWFJoY21kbGRGMG5LVHRjYmlBZ0lDQjBhR2x6TGlSc2FXNXJjeUE5SUhSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNnbllTY3BPMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpaDdYRzRnSUNBZ0lDQW5aR0YwWVMxeVpYTnBlbVVuT2lCcFpDeGNiaUFnSUNBZ0lDZGtZWFJoTFhOamNtOXNiQ2M2SUdsa0xGeHVJQ0FnSUNBZ0oybGtKem9nYVdSY2JpQWdJQ0I5S1R0Y2JpQWdJQ0IwYUdsekxpUmhZM1JwZG1VZ1BTQWtLQ2s3WEc0Z0lDQWdkR2hwY3k1elkzSnZiR3hRYjNNZ1BTQndZWEp6WlVsdWRDaDNhVzVrYjNjdWNHRm5aVmxQWm1aelpYUXNJREV3S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlYyWlc1MGN5Z3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOaGJHTjFiR0YwWlhNZ1lXNGdZWEp5WVhrZ2IyWWdjR2w0Wld3Z2RtRnNkV1Z6SUhSb1lYUWdZWEpsSUhSb1pTQmtaVzFoY21OaGRHbHZiaUJzYVc1bGN5QmlaWFIzWldWdUlHeHZZMkYwYVc5dWN5QnZiaUIwYUdVZ2NHRm5aUzVjYmlBZ0lDb2dRMkZ1SUdKbElHbHVkbTlyWldRZ2FXWWdibVYzSUdWc1pXMWxiblJ6SUdGeVpTQmhaR1JsWkNCdmNpQjBhR1VnYzJsNlpTQnZaaUJoSUd4dlkyRjBhVzl1SUdOb1lXNW5aWE11WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpOWNiaUFnWTJGc1kxQnZhVzUwY3lncElIdGNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TEZ4dUlDQWdJQ0FnSUNCaWIyUjVJRDBnWkc5amRXMWxiblF1WW05a2VTeGNiaUFnSUNBZ0lDQWdhSFJ0YkNBOUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZER0Y2JseHVJQ0FnSUhSb2FYTXVjRzlwYm5SeklEMGdXMTA3WEc0Z0lDQWdkR2hwY3k1M2FXNUlaV2xuYUhRZ1BTQk5ZWFJvTG5KdmRXNWtLRTFoZEdndWJXRjRLSGRwYm1SdmR5NXBibTVsY2tobGFXZG9kQ3dnYUhSdGJDNWpiR2xsYm5SSVpXbG5hSFFwS1R0Y2JpQWdJQ0IwYUdsekxtUnZZMGhsYVdkb2RDQTlJRTFoZEdndWNtOTFibVFvVFdGMGFDNXRZWGdvWW05a2VTNXpZM0p2Ykd4SVpXbG5hSFFzSUdKdlpIa3ViMlptYzJWMFNHVnBaMmgwTENCb2RHMXNMbU5zYVdWdWRFaGxhV2RvZEN3Z2FIUnRiQzV6WTNKdmJHeElaV2xuYUhRc0lHaDBiV3d1YjJabWMyVjBTR1ZwWjJoMEtTazdYRzVjYmlBZ0lDQjBhR2x6TGlSMFlYSm5aWFJ6TG1WaFkyZ29ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSFpoY2lBa2RHRnlJRDBnSkNoMGFHbHpLU3hjYmlBZ0lDQWdJQ0FnSUNCd2RDQTlJRTFoZEdndWNtOTFibVFvSkhSaGNpNXZabVp6WlhRb0tTNTBiM0FnTFNCZmRHaHBjeTV2Y0hScGIyNXpMblJvY21WemFHOXNaQ2s3WEc0Z0lDQWdJQ0FrZEdGeUxuUmhjbWRsZEZCdmFXNTBJRDBnY0hRN1hHNGdJQ0FnSUNCZmRHaHBjeTV3YjJsdWRITXVjSFZ6YUNod2RDazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ1pYWmxiblJ6SUdadmNpQk5ZV2RsYkd4aGJpNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWxkbVZ1ZEhNb0tTQjdYRzRnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3l4Y2JpQWdJQ0FnSUNBZ0pHSnZaSGtnUFNBa0tDZG9kRzFzTENCaWIyUjVKeWtzWEc0Z0lDQWdJQ0FnSUc5d2RITWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pIVnlZWFJwYjI0NklGOTBhR2x6TG05d2RHbHZibk11WVc1cGJXRjBhVzl1UkhWeVlYUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ1pXRnphVzVuT2lBZ0lGOTBhR2x6TG05d2RHbHZibk11WVc1cGJXRjBhVzl1UldGemFXNW5YRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdKQ2gzYVc1a2IzY3BMbTl1WlNnbmJHOWhaQ2NzSUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCcFppaGZkR2hwY3k1dmNIUnBiMjV6TG1SbFpYQk1hVzVyYVc1bktYdGNiaUFnSUNBZ0lDQWdhV1lvYkc5allYUnBiMjR1YUdGemFDbDdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjMk55YjJ4c1ZHOU1iMk1vYkc5allYUnBiMjR1YUdGemFDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRjkwYUdsekxtTmhiR05RYjJsdWRITW9LVHRjYmlBZ0lDQWdJRjkwYUdsekxsOTFjR1JoZEdWQlkzUnBkbVVvS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXViMjRvZTF4dUlDQWdJQ0FnSjNKbGMybDZaVzFsTG5wbUxuUnlhV2RuWlhJbk9pQjBhR2x6TG5KbFpteHZkeTVpYVc1a0tIUm9hWE1wTEZ4dUlDQWdJQ0FnSjNOamNtOXNiRzFsTG5wbUxuUnlhV2RuWlhJbk9pQjBhR2x6TGw5MWNHUmhkR1ZCWTNScGRtVXVZbWx1WkNoMGFHbHpLVnh1SUNBZ0lIMHBMbTl1S0NkamJHbGpheTU2Wmk1dFlXZGxiR3hoYmljc0lDZGhXMmh5WldaZVBWd2lJMXdpWFNjc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJQ0FnSUNCMllYSWdZWEp5YVhaaGJDQWdJRDBnZEdocGN5NW5aWFJCZEhSeWFXSjFkR1VvSjJoeVpXWW5LVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVjMk55YjJ4c1ZHOU1iMk1vWVhKeWFYWmhiQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlJsWlhCTWFXNXJVMk55YjJ4c0lEMGdablZ1WTNScGIyNG9aU2tnZTF4dUlDQWdJQ0FnYVdZb1gzUm9hWE11YjNCMGFXOXVjeTVrWldWd1RHbHVhMmx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1elkzSnZiR3hVYjB4dll5aDNhVzVrYjNjdWJHOWpZWFJwYjI0dWFHRnphQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJQ1FvZDJsdVpHOTNLUzV2YmlnbmNHOXdjM1JoZEdVbkxDQjBhR2x6TGw5a1pXVndUR2x1YTFOamNtOXNiQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdjMk55YjJ4c0lIUnZJR0VnWjJsMlpXNGdiRzlqWVhScGIyNGdiMjRnZEdobElIQmhaMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnNiMk1nTFNCaElIQnliM0JsY214NUlHWnZjbTFoZEhSbFpDQnFVWFZsY25rZ2FXUWdjMlZzWldOMGIzSXVJRVY0WVcxd2JHVTZJQ2NqWm05dkoxeHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ292WEc0Z0lITmpjbTlzYkZSdlRHOWpLR3h2WXlrZ2UxeHVJQ0FnSUhSb2FYTXVYMmx1VkhKaGJuTnBkR2x2YmlBOUlIUnlkV1U3WEc0Z0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lIWmhjaUJ2Y0hScGIyNXpJRDBnZTF4dUlDQWdJQ0FnWVc1cGJXRjBhVzl1UldGemFXNW5PaUIwYUdsekxtOXdkR2x2Ym5NdVlXNXBiV0YwYVc5dVJXRnphVzVuTEZ4dUlDQWdJQ0FnWVc1cGJXRjBhVzl1UkhWeVlYUnBiMjQ2SUhSb2FYTXViM0IwYVc5dWN5NWhibWx0WVhScGIyNUVkWEpoZEdsdmJpeGNiaUFnSUNBZ0lIUm9jbVZ6YUc5c1pEb2dkR2hwY3k1dmNIUnBiMjV6TG5Sb2NtVnphRzlzWkN4Y2JpQWdJQ0FnSUc5bVpuTmxkRG9nZEdocGN5NXZjSFJwYjI1ekxtOW1abk5sZEZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JUYlc5dmRHaFRZM0p2Ykd3dWMyTnliMnhzVkc5TWIyTW9iRzlqTENCdmNIUnBiMjV6TENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJsUnlZVzV6YVhScGIyNGdQU0JtWVd4elpUdGNiaUFnSUNBZ0lGOTBhR2x6TGw5MWNHUmhkR1ZCWTNScGRtVW9LVHRjYmlBZ0lDQjlLVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOaGJHeHpJRzVsWTJWemMyRnllU0JtZFc1amRHbHZibk1nZEc4Z2RYQmtZWFJsSUUxaFoyVnNiR0Z1SUhWd2IyNGdSRTlOSUdOb1lXNW5aVnh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvdlhHNGdJSEpsWm14dmR5Z3BJSHRjYmlBZ0lDQjBhR2x6TG1OaGJHTlFiMmx1ZEhNb0tUdGNiaUFnSUNCMGFHbHpMbDkxY0dSaGRHVkJZM1JwZG1Vb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJWY0dSaGRHVnpJSFJvWlNCMmFYTnBZbWxzYVhSNUlHOW1JR0Z1SUdGamRHbDJaU0JzYjJOaGRHbHZiaUJzYVc1ckxDQmhibVFnZFhCa1lYUmxjeUIwYUdVZ2RYSnNJR2hoYzJnZ1ptOXlJSFJvWlNCd1lXZGxMQ0JwWmlCa1pXVndUR2x1YTJsdVp5QmxibUZpYkdWa0xseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRR1pwY21WeklFMWhaMlZzYkdGdUkzVndaR0YwWlZ4dUlDQWdLaTljYmlBZ1gzVndaR0YwWlVGamRHbDJaU2d2S21WMmRDd2daV3hsYlN3Z2MyTnliMnhzVUc5ektpOHBJSHRjYmlBZ0lDQnBaaWgwYUdsekxsOXBibFJ5WVc1emFYUnBiMjRwSUh0eVpYUjFjbTQ3ZlZ4dUlDQWdJSFpoY2lCM2FXNVFiM01nUFNBdktuTmpjbTlzYkZCdmN5QjhmQ292SUhCaGNuTmxTVzUwS0hkcGJtUnZkeTV3WVdkbFdVOW1abk5sZEN3Z01UQXBMRnh1SUNBZ0lDQWdJQ0JqZFhKSlpIZzdYRzVjYmlBZ0lDQnBaaWgzYVc1UWIzTWdLeUIwYUdsekxuZHBia2hsYVdkb2RDQTlQVDBnZEdocGN5NWtiMk5JWldsbmFIUXBleUJqZFhKSlpIZ2dQU0IwYUdsekxuQnZhVzUwY3k1c1pXNW5kR2dnTFNBeE95QjlYRzRnSUNBZ1pXeHpaU0JwWmloM2FXNVFiM01nUENCMGFHbHpMbkJ2YVc1MGMxc3dYU2w3SUdOMWNrbGtlQ0E5SUhWdVpHVm1hVzVsWkRzZ2ZWeHVJQ0FnSUdWc2MyVjdYRzRnSUNBZ0lDQjJZWElnYVhORWIzZHVJRDBnZEdocGN5NXpZM0p2Ykd4UWIzTWdQQ0IzYVc1UWIzTXNYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTWdQU0IwYUdsekxGeHVJQ0FnSUNBZ0lDQWdJR04xY2xacGMybGliR1VnUFNCMGFHbHpMbkJ2YVc1MGN5NW1hV3gwWlhJb1puVnVZM1JwYjI0b2NDd2dhU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FYTkViM2R1SUQ4Z2NDQXRJRjkwYUdsekxtOXdkR2x2Ym5NdWIyWm1jMlYwSUR3OUlIZHBibEJ2Y3lBNklIQWdMU0JmZEdocGN5NXZjSFJwYjI1ekxtOW1abk5sZENBdElGOTBhR2x6TG05d2RHbHZibk11ZEdoeVpYTm9iMnhrSUR3OUlIZHBibEJ2Y3p0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJR04xY2tsa2VDQTlJR04xY2xacGMybGliR1V1YkdWdVozUm9JRDhnWTNWeVZtbHphV0pzWlM1c1pXNW5kR2dnTFNBeElEb2dNRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGlSaFkzUnBkbVV1Y21WdGIzWmxRMnhoYzNNb2RHaHBjeTV2Y0hScGIyNXpMbUZqZEdsMlpVTnNZWE56S1R0Y2JpQWdJQ0IwYUdsekxpUmhZM1JwZG1VZ1BTQjBhR2x6TGlSc2FXNXJjeTVtYVd4MFpYSW9KMXRvY21WbVBWd2lJeWNnS3lCMGFHbHpMaVIwWVhKblpYUnpMbVZ4S0dOMWNrbGtlQ2t1WkdGMFlTZ25iV0ZuWld4c1lXNHRkR0Z5WjJWMEp5a2dLeUFuWENKZEp5a3VZV1JrUTJ4aGMzTW9kR2hwY3k1dmNIUnBiMjV6TG1GamRHbDJaVU5zWVhOektUdGNibHh1SUNBZ0lHbG1LSFJvYVhNdWIzQjBhVzl1Y3k1a1pXVndUR2x1YTJsdVp5bDdYRzRnSUNBZ0lDQjJZWElnYUdGemFDQTlJRndpWENJN1hHNGdJQ0FnSUNCcFppaGpkWEpKWkhnZ0lUMGdkVzVrWldacGJtVmtLWHRjYmlBZ0lDQWdJQ0FnYUdGemFDQTlJSFJvYVhNdUpHRmpkR2wyWlZzd1hTNW5aWFJCZEhSeWFXSjFkR1VvSjJoeVpXWW5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtS0doaGMyZ2dJVDA5SUhkcGJtUnZkeTVzYjJOaGRHbHZiaTVvWVhOb0tTQjdYRzRnSUNBZ0lDQWdJR2xtS0hkcGJtUnZkeTVvYVhOMGIzSjVMbkIxYzJoVGRHRjBaU2w3WEc0Z0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG1ocGMzUnZjbmt1Y0hWemFGTjBZWFJsS0c1MWJHd3NJRzUxYkd3c0lHaGhjMmdwTzF4dUlDQWdJQ0FnSUNCOVpXeHpaWHRjYmlBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Ykc5allYUnBiMjR1YUdGemFDQTlJR2hoYzJnN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbk5qY205c2JGQnZjeUE5SUhkcGJsQnZjenRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJHYVhKbGN5QjNhR1Z1SUcxaFoyVnNiR0Z1SUdseklHWnBibWx6YUdWa0lIVndaR0YwYVc1bklIUnZJSFJvWlNCdVpYY2dZV04wYVhabElHVnNaVzFsYm5RdVhHNGdJQ0FnSUNvZ1FHVjJaVzUwSUUxaFoyVnNiR0Z1STNWd1pHRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1ZEhKcFoyZGxjaWduZFhCa1lYUmxMbnBtTG0xaFoyVnNiR0Z1Snl3Z1czUm9hWE11SkdGamRHbDJaVjBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxjM1J5YjNseklHRnVJR2x1YzNSaGJtTmxJRzltSUUxaFoyVnNiR0Z1SUdGdVpDQnlaWE5sZEhNZ2RHaGxJSFZ5YkNCdlppQjBhR1VnZDJsdVpHOTNMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvdlhHNGdJRjlrWlhOMGNtOTVLQ2tnZTF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWIyWm1LQ2N1ZW1ZdWRISnBaMmRsY2lBdWVtWXViV0ZuWld4c1lXNG5LVnh1SUNBZ0lDQWdJQ0F1Wm1sdVpDaGdMaVI3ZEdocGN5NXZjSFJwYjI1ekxtRmpkR2wyWlVOc1lYTnpmV0FwTG5KbGJXOTJaVU5zWVhOektIUm9hWE11YjNCMGFXOXVjeTVoWTNScGRtVkRiR0Z6Y3lrN1hHNWNiaUFnSUNCcFppaDBhR2x6TG05d2RHbHZibk11WkdWbGNFeHBibXRwYm1jcGUxeHVJQ0FnSUNBZ2RtRnlJR2hoYzJnZ1BTQjBhR2x6TGlSaFkzUnBkbVZiTUYwdVoyVjBRWFIwY21saWRYUmxLQ2RvY21WbUp5azdYRzRnSUNBZ0lDQjNhVzVrYjNjdWJHOWpZWFJwYjI0dWFHRnphQzV5WlhCc1lXTmxLR2hoYzJnc0lDY25LVHRjYmlBZ0lDQjlYRzRnSUNBZ0pDaDNhVzVrYjNjcExtOW1aaWduY0c5d2MzUmhkR1VuTENCMGFHbHpMbDlrWldWd1RHbHVhMU5qY205c2JDazdYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJFWldaaGRXeDBJSE5sZEhScGJtZHpJR1p2Y2lCd2JIVm5hVzVjYmlBcUwxeHVUV0ZuWld4c1lXNHVaR1ZtWVhWc2RITWdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQkJiVzkxYm5RZ2IyWWdkR2x0WlN3Z2FXNGdiWE1zSUhSb1pTQmhibWx0WVhSbFpDQnpZM0p2Ykd4cGJtY2djMmh2ZFd4a0lIUmhhMlVnWW1WMGQyVmxiaUJzYjJOaGRHbHZibk11WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdOVEF3WEc0Z0lDQXFMMXh1SUNCaGJtbHRZWFJwYjI1RWRYSmhkR2x2YmpvZ05UQXdMRnh1SUNBdktpcGNiaUFnSUNvZ1FXNXBiV0YwYVc5dUlITjBlV3hsSUhSdklIVnpaU0IzYUdWdUlITmpjbTlzYkdsdVp5QmlaWFIzWldWdUlHeHZZMkYwYVc5dWN5NGdRMkZ1SUdKbElHQW5jM2RwYm1jbllDQnZjaUJnSjJ4cGJtVmhjaWRnTGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQXFJRUJrWldaaGRXeDBJQ2RzYVc1bFlYSW5YRzRnSUNBcUlFQnpaV1VnZTBCc2FXNXJJR2gwZEhCek9pOHZZWEJwTG1weGRXVnllUzVqYjIwdllXNXBiV0YwWlh4S2NYVmxjbmtnWVc1cGJXRjBaWDFjYmlBZ0lDb3ZYRzRnSUdGdWFXMWhkR2x2YmtWaGMybHVaem9nSjJ4cGJtVmhjaWNzWEc0Z0lDOHFLbHh1SUNBZ0tpQk9kVzFpWlhJZ2IyWWdjR2w0Wld4eklIUnZJSFZ6WlNCaGN5QmhJRzFoY210bGNpQm1iM0lnYkc5allYUnBiMjRnWTJoaGJtZGxjeTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQTFNRnh1SUNBZ0tpOWNiaUFnZEdoeVpYTm9iMnhrT2lBMU1DeGNiaUFnTHlvcVhHNGdJQ0FxSUVOc1lYTnpJR0Z3Y0d4cFpXUWdkRzhnZEdobElHRmpkR2wyWlNCc2IyTmhkR2x2Ym5NZ2JHbHVheUJ2YmlCMGFHVWdiV0ZuWld4c1lXNGdZMjl1ZEdGcGJtVnlMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYRzRnSUNBcUlFQmtaV1poZFd4MElDZHBjeTFoWTNScGRtVW5YRzRnSUNBcUwxeHVJQ0JoWTNScGRtVkRiR0Z6Y3pvZ0oybHpMV0ZqZEdsMlpTY3NYRzRnSUM4cUtseHVJQ0FnS2lCQmJHeHZkM01nZEdobElITmpjbWx3ZENCMGJ5QnRZVzVwY0hWc1lYUmxJSFJvWlNCMWNtd2diMllnZEdobElHTjFjbkpsYm5RZ2NHRm5aU3dnWVc1a0lHbG1JSE4xY0hCdmNuUmxaQ3dnWVd4MFpYSWdkR2hsSUdocGMzUnZjbmt1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQmtaV1Z3VEdsdWEybHVaem9nWm1Gc2MyVXNYRzRnSUM4cUtseHVJQ0FnS2lCT2RXMWlaWElnYjJZZ2NHbDRaV3h6SUhSdklHOW1abk5sZENCMGFHVWdjMk55YjJ4c0lHOW1JSFJvWlNCd1lXZGxJRzl1SUdsMFpXMGdZMnhwWTJzZ2FXWWdkWE5wYm1jZ1lTQnpkR2xqYTNrZ2JtRjJJR0poY2k1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0F3WEc0Z0lDQXFMMXh1SUNCdlptWnpaWFE2SURCY2JuMWNibHh1Wlhod2IzSjBJSHROWVdkbGJHeGhibjA3WEc0aVhYMD1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5tYWdlbGxhbi5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5PZmZDYW52YXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5rZXlib2FyZCcpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnknKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDMgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5jb3JlJyk7XG5cbnZhciBfZm91bmRhdGlvbiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi5wbHVnaW4nKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDQgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC50cmlnZ2VycycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogT2ZmQ2FudmFzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vZmZjYW52YXNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbnZhciBPZmZDYW52YXMgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoT2ZmQ2FudmFzLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBPZmZDYW52YXMoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9mZkNhbnZhcyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE9mZkNhbnZhcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9mZkNhbnZhcykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE9mZkNhbnZhcywgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvZmYtY2FudmFzIHdyYXBwZXIuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgT2ZmQ2FudmFzXG4gICAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGluaXRpYWxpemUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ09mZkNhbnZhcyc7IC8vIGllOSBiYWNrIGNvbXBhdFxuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgT2ZmQ2FudmFzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNvbnRlbnRDbGFzc2VzID0geyBiYXNlOiBbXSwgcmV2ZWFsOiBbXSB9O1xuICAgICAgdGhpcy4kbGFzdFRyaWdnZXIgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoKTtcbiAgICAgIHRoaXMuJHRyaWdnZXJzID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCk7XG4gICAgICB0aGlzLnBvc2l0aW9uID0gJ2xlZnQnO1xuICAgICAgdGhpcy4kY29udGVudCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgpO1xuICAgICAgdGhpcy5uZXN0ZWQgPSAhIXRoaXMub3B0aW9ucy5uZXN0ZWQ7XG5cbiAgICAgIC8vIERlZmluZXMgdGhlIENTUyB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzZXMgb2YgdGhlIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIuXG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoWydwdXNoJywgJ292ZXJsYXAnXSkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIHZhbCkge1xuICAgICAgICBfdGhpczMuY29udGVudENsYXNzZXMuYmFzZS5wdXNoKCdoYXMtdHJhbnNpdGlvbi0nICsgdmFsKTtcbiAgICAgIH0pO1xuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10pLmVhY2goZnVuY3Rpb24gKGluZGV4LCB2YWwpIHtcbiAgICAgICAgX3RoaXMzLmNvbnRlbnRDbGFzc2VzLmJhc2UucHVzaCgnaGFzLXBvc2l0aW9uLScgKyB2YWwpO1xuICAgICAgICBfdGhpczMuY29udGVudENsYXNzZXMucmV2ZWFsLnB1c2goJ2hhcy1yZXZlYWwtJyArIHZhbCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gVHJpZ2dlcnMgaW5pdCBpcyBpZGVtcG90ZW50LCBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIGluaXRpYWxpemVkXG4gICAgICBfZm91bmRhdGlvblV0aWw0LlRyaWdnZXJzLmluaXQoX2pxdWVyeTIuZGVmYXVsdCk7XG4gICAgICBfZm91bmRhdGlvblV0aWwyLk1lZGlhUXVlcnkuX2luaXQoKTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5yZWdpc3RlcignT2ZmQ2FudmFzJywge1xuICAgICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIG9mZi1jYW52YXMgd3JhcHBlciBieSBhZGRpbmcgdGhlIGV4aXQgb3ZlcmxheSAoaWYgbmVlZGVkKS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgLy8gRmluZCBvZmYtY2FudmFzIGNvbnRlbnQsIGVpdGhlciBieSBJRCAoaWYgc3BlY2lmaWVkKSwgYnkgc2libGluZ3Mgb3IgYnkgY2xvc2VzdCBzZWxlY3RvciAoZmFsbGJhY2spXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRJZCkge1xuICAgICAgICB0aGlzLiRjb250ZW50ID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArIHRoaXMub3B0aW9ucy5jb250ZW50SWQpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQgPSB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykuZmlyc3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQgPSB0aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5maXJzdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5jb250ZW50SWQpIHtcbiAgICAgICAgLy8gQXNzdW1lIHRoYXQgdGhlIG9mZi1jYW52YXMgZWxlbWVudCBpcyBuZXN0ZWQgaWYgaXQgaXNuJ3QgYSBzaWJsaW5nIG9mIHRoZSBjb250ZW50XG4gICAgICAgIHRoaXMubmVzdGVkID0gdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmxlbmd0aCA9PT0gMDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRJZCAmJiB0aGlzLm9wdGlvbnMubmVzdGVkID09PSBudWxsKSB7XG4gICAgICAgIC8vIFdhcm5pbmcgaWYgdXNpbmcgY29udGVudCBJRCB3aXRob3V0IHNldHRpbmcgdGhlIG5lc3RlZCBvcHRpb25cbiAgICAgICAgLy8gT25jZSB0aGUgZWxlbWVudCBpcyBuZXN0ZWQgaXQgaXMgcmVxdWlyZWQgdG8gd29yayBwcm9wZXJseSBpbiB0aGlzIGNhc2VcbiAgICAgICAgY29uc29sZS53YXJuKCdSZW1lbWJlciB0byB1c2UgdGhlIG5lc3RlZCBvcHRpb24gaWYgdXNpbmcgdGhlIGNvbnRlbnQgSUQgb3B0aW9uIScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5uZXN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgLy8gRm9yY2UgdHJhbnNpdGlvbiBvdmVybGFwIGlmIG5lc3RlZFxuICAgICAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiA9ICdvdmVybGFwJztcbiAgICAgICAgLy8gUmVtb3ZlIGFwcHJvcHJpYXRlIGNsYXNzZXMgaWYgYWxyZWFkeSBhc3NpZ25lZCBpbiBtYXJrdXBcbiAgICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtdHJhbnNpdGlvbi1wdXNoJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLXRyYW5zaXRpb24tJyArIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICsgJyBpcy1jbG9zZWQnKTtcblxuICAgICAgLy8gRmluZCB0cmlnZ2VycyB0aGF0IGFmZmVjdCB0aGlzIGVsZW1lbnQgYW5kIGFkZCBhcmlhLWV4cGFuZGVkIHRvIHRoZW1cbiAgICAgIHRoaXMuJHRyaWdnZXJzID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGRvY3VtZW50KS5maW5kKCdbZGF0YS1vcGVuPVwiJyArIGlkICsgJ1wiXSwgW2RhdGEtY2xvc2U9XCInICsgaWQgKyAnXCJdLCBbZGF0YS10b2dnbGU9XCInICsgaWQgKyAnXCJdJykuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAgIC8vIEdldCBwb3NpdGlvbiBieSBjaGVja2luZyBmb3IgcmVsYXRlZCBDU1MgY2xhc3NcbiAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLiRlbGVtZW50LmlzKCcucG9zaXRpb24tbGVmdCwgLnBvc2l0aW9uLXRvcCwgLnBvc2l0aW9uLXJpZ2h0LCAucG9zaXRpb24tYm90dG9tJykgPyB0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJykubWF0Y2goL3Bvc2l0aW9uXFwtKGxlZnR8dG9wfHJpZ2h0fGJvdHRvbSkvKVsxXSA6IHRoaXMucG9zaXRpb247XG5cbiAgICAgIC8vIEFkZCBhbiBvdmVybGF5IG92ZXIgdGhlIGNvbnRlbnQgaWYgbmVjZXNzYXJ5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHZhciBvdmVybGF5UG9zaXRpb24gPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcy4kZWxlbWVudCkuY3NzKFwicG9zaXRpb25cIikgPT09ICdmaXhlZCcgPyAnaXMtb3ZlcmxheS1maXhlZCcgOiAnaXMtb3ZlcmxheS1hYnNvbHV0ZSc7XG4gICAgICAgIG92ZXJsYXkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdqcy1vZmYtY2FudmFzLW92ZXJsYXkgJyArIG92ZXJsYXlQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkob3ZlcmxheSk7XG4gICAgICAgIGlmIChvdmVybGF5UG9zaXRpb24gPT09ICdpcy1vdmVybGF5LWZpeGVkJykge1xuICAgICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzLiRvdmVybGF5KS5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRjb250ZW50LmFwcGVuZCh0aGlzLiRvdmVybGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCA9IHRoaXMub3B0aW9ucy5pc1JldmVhbGVkIHx8IG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJldmVhbENsYXNzLCAnZycpLnRlc3QodGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgICAgdGhpcy5fc2V0TVFDaGVja2VyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCB0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0YWxseSByZW1vdmUgYWxsIHRyYW5zaXRpb24vcG9zaXRpb24gQ1NTIGNsYXNzZXMgZnJvbSBvZmYtY2FudmFzIGNvbnRlbnQgY29udGFpbmVyLlxuICAgICAgdGhpcy5fcmVtb3ZlQ29udGVudENsYXNzZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYW5kIHRoZSBleGl0IG92ZXJsYXkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpLm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuY2xvc2UuYmluZCh0aGlzKSxcbiAgICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICAgJ2tleWRvd24uemYub2ZmY2FudmFzJzogdGhpcy5faGFuZGxlS2V5Ym9hcmQuYmluZCh0aGlzKVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrID09PSB0cnVlKSB7XG4gICAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID8gdGhpcy4kb3ZlcmxheSA6IHRoaXMuJGNvbnRlbnQ7XG4gICAgICAgICR0YXJnZXQub24oeyAnY2xpY2suemYub2ZmY2FudmFzJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZXZlbnQgbGlzdGVuZXIgZm9yIGVsZW1lbnRzIHRoYXQgd2lsbCByZXZlYWwgYXQgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0TVFDaGVja2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldE1RQ2hlY2tlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfZm91bmRhdGlvblV0aWwyLk1lZGlhUXVlcnkuYXRMZWFzdChfdGhpcy5vcHRpb25zLnJldmVhbE9uKSkge1xuICAgICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5yZXZlYWwoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9KS5vbmUoJ2xvYWQuemYub2ZmY2FudmFzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX2ZvdW5kYXRpb25VdGlsMi5NZWRpYVF1ZXJ5LmF0TGVhc3QoX3RoaXMub3B0aW9ucy5yZXZlYWxPbikpIHtcbiAgICAgICAgICBfdGhpcy5yZXZlYWwodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIENTUyB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzZXMgb2YgdGhlIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIuXG4gICAgICogUmVtb3ZpbmcgdGhlIGNsYXNzZXMgaXMgaW1wb3J0YW50IHdoZW4gYW5vdGhlciBvZmYtY2FudmFzIGdldHMgb3BlbmVkIHRoYXQgdXNlcyB0aGUgc2FtZSBjb250ZW50IGNvbnRhaW5lci5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGhhc1JldmVhbCAtIHRydWUgaWYgcmVsYXRlZCBvZmYtY2FudmFzIGVsZW1lbnQgaXMgcmV2ZWFsZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3JlbW92ZUNvbnRlbnRDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZUNvbnRlbnRDbGFzc2VzKGhhc1JldmVhbCkge1xuICAgICAgaWYgKHR5cGVvZiBoYXNSZXZlYWwgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLiRjb250ZW50LnJlbW92ZUNsYXNzKHRoaXMuY29udGVudENsYXNzZXMuYmFzZS5qb2luKCcgJykpO1xuICAgICAgfSBlbHNlIGlmIChoYXNSZXZlYWwgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoJ2hhcy1yZXZlYWwtJyArIHRoaXMucG9zaXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIENTUyB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzZXMgb2YgdGhlIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIsIGJhc2VkIG9uIHRoZSBvcGVuaW5nIG9mZi1jYW52YXMgZWxlbWVudC5cbiAgICAgKiBCZWZvcmVoYW5kIGFueSB0cmFuc2l0aW9uL3Bvc2l0aW9uIGNsYXNzIGdldHMgcmVtb3ZlZC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGhhc1JldmVhbCAtIHRydWUgaWYgcmVsYXRlZCBvZmYtY2FudmFzIGVsZW1lbnQgaXMgcmV2ZWFsZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2FkZENvbnRlbnRDbGFzc2VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZENvbnRlbnRDbGFzc2VzKGhhc1JldmVhbCkge1xuICAgICAgdGhpcy5fcmVtb3ZlQ29udGVudENsYXNzZXMoaGFzUmV2ZWFsKTtcbiAgICAgIGlmICh0eXBlb2YgaGFzUmV2ZWFsICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5hZGRDbGFzcygnaGFzLXRyYW5zaXRpb24tJyArIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICsgJyBoYXMtcG9zaXRpb24tJyArIHRoaXMucG9zaXRpb24pO1xuICAgICAgfSBlbHNlIGlmIChoYXNSZXZlYWwgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5hZGRDbGFzcygnaGFzLXJldmVhbC0nICsgdGhpcy5wb3NpdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgcmV2ZWFsaW5nL2hpZGluZyB0aGUgb2ZmLWNhbnZhcyBhdCBicmVha3BvaW50cywgbm90IHRoZSBzYW1lIGFzIG9wZW4uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmV2ZWFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmV2ZWFsKGlzUmV2ZWFsZWQpIHtcbiAgICAgIGlmIChpc1JldmVhbGVkKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignb3Blbi56Zi50cmlnZ2VyIHRvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLWNsb3NlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pc1JldmVhbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignb3Blbi56Zi50cmlnZ2VyIHRvZ2dsZS56Zi50cmlnZ2VyJykub24oe1xuICAgICAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1jbG9zZWQnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FkZENvbnRlbnRDbGFzc2VzKGlzUmV2ZWFsZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHNjcm9sbGluZyBvZiB0aGUgYm9keSB3aGVuIG9mZmNhbnZhcyBpcyBvcGVuIG9uIG1vYmlsZSBTYWZhcmkgYW5kIG90aGVyIHRyb3VibGVzb21lIGJyb3dzZXJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zdG9wU2Nyb2xsaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0b3BTY3JvbGxpbmcoZXZlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUYWtlbiBhbmQgYWRhcHRlZCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY4ODk0NDcvcHJldmVudC1mdWxsLXBhZ2Utc2Nyb2xsaW5nLWlvc1xuICAgIC8vIE9ubHkgcmVhbGx5IHdvcmtzIGZvciB5LCBub3Qgc3VyZSBob3cgdG8gZXh0ZW5kIHRvIHggb3IgaWYgd2UgbmVlZCB0by5cblxuICB9LCB7XG4gICAga2V5OiAnX3JlY29yZFNjcm9sbGFibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVjb3JkU2Nyb2xsYWJsZShldmVudCkge1xuICAgICAgdmFyIGVsZW0gPSB0aGlzOyAvLyBjYWxsZWQgZnJvbSBldmVudCBoYW5kbGVyIGNvbnRleHQgd2l0aCB0aGlzIGFzIGVsZW1cblxuICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZSAoY29udGVudCBvdmVyZmxvd3MpLCB0aGVuLi4uXG4gICAgICBpZiAoZWxlbS5zY3JvbGxIZWlnaHQgIT09IGVsZW0uY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgIC8vIElmIHdlJ3JlIGF0IHRoZSB0b3AsIHNjcm9sbCBkb3duIG9uZSBwaXhlbCB0byBhbGxvdyBzY3JvbGxpbmcgdXBcbiAgICAgICAgaWYgKGVsZW0uc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlJ3JlIGF0IHRoZSBib3R0b20sIHNjcm9sbCB1cCBvbmUgcGl4ZWwgdG8gYWxsb3cgc2Nyb2xsaW5nIGRvd25cbiAgICAgICAgaWYgKGVsZW0uc2Nyb2xsVG9wID09PSBlbGVtLnNjcm9sbEhlaWdodCAtIGVsZW0uY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSBlbGVtLnNjcm9sbEhlaWdodCAtIGVsZW0uY2xpZW50SGVpZ2h0IC0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxlbS5hbGxvd1VwID0gZWxlbS5zY3JvbGxUb3AgPiAwO1xuICAgICAgZWxlbS5hbGxvd0Rvd24gPSBlbGVtLnNjcm9sbFRvcCA8IGVsZW0uc2Nyb2xsSGVpZ2h0IC0gZWxlbS5jbGllbnRIZWlnaHQ7XG4gICAgICBlbGVtLmxhc3RZID0gZXZlbnQub3JpZ2luYWxFdmVudC5wYWdlWTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc3RvcFNjcm9sbFByb3BhZ2F0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0b3BTY3JvbGxQcm9wYWdhdGlvbihldmVudCkge1xuICAgICAgdmFyIGVsZW0gPSB0aGlzOyAvLyBjYWxsZWQgZnJvbSBldmVudCBoYW5kbGVyIGNvbnRleHQgd2l0aCB0aGlzIGFzIGVsZW1cbiAgICAgIHZhciB1cCA9IGV2ZW50LnBhZ2VZIDwgZWxlbS5sYXN0WTtcbiAgICAgIHZhciBkb3duID0gIXVwO1xuICAgICAgZWxlbS5sYXN0WSA9IGV2ZW50LnBhZ2VZO1xuXG4gICAgICBpZiAodXAgJiYgZWxlbS5hbGxvd1VwIHx8IGRvd24gJiYgZWxlbS5hbGxvd0Rvd24pIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gRXZlbnQgb2JqZWN0IHBhc3NlZCBmcm9tIGxpc3RlbmVyLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0cmlnZ2VyIC0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgb2ZmLWNhbnZhcyB0byBvcGVuLlxuICAgICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29wZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpIHx8IHRoaXMuaXNSZXZlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICB0aGlzLiRsYXN0VHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZm9yY2VUbyA9PT0gJ3RvcCcpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZm9yY2VUbyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSAmJiB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiAhPT0gJ292ZXJsYXAnKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuc2libGluZ3MoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCB0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsICcnKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICAgKiBAZXZlbnQgT2ZmQ2FudmFzI29wZW5lZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1vcGVuJykucmVtb3ZlQ2xhc3MoJ2lzLWNsb3NlZCcpO1xuXG4gICAgICB0aGlzLiR0cmlnZ2Vycy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKS50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAgIHRoaXMuJGNvbnRlbnQuYWRkQ2xhc3MoJ2lzLW9wZW4tJyArIHRoaXMucG9zaXRpb24pO1xuXG4gICAgICAvLyBJZiBgY29udGVudFNjcm9sbGAgaXMgc2V0IHRvIGZhbHNlLCBhZGQgY2xhc3MgYW5kIGRpc2FibGUgc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXMuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRTY3JvbGwgPT09IGZhbHNlKSB7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnYm9keScpLmFkZENsYXNzKCdpcy1vZmYtY2FudmFzLW9wZW4nKS5vbigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3RvdWNoc3RhcnQnLCB0aGlzLl9yZWNvcmRTY3JvbGxhYmxlKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbFByb3BhZ2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrID09PSB0cnVlICYmIHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdpcy1jbG9zYWJsZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uZSgoMCwgX2ZvdW5kYXRpb25VdGlsMy50cmFuc2l0aW9uZW5kKSh0aGlzLiRlbGVtZW50KSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghX3RoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBleGl0IGlmIHByZW1hdHVyZWx5IGNsb3NlZFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2FudmFzRm9jdXMgPSBfdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1hdXRvZm9jdXNdJyk7XG4gICAgICAgICAgaWYgKGNhbnZhc0ZvY3VzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FudmFzRm9jdXMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuZmluZCgnYSwgYnV0dG9uJykuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLiRjb250ZW50LmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC50cmFwRm9jdXModGhpcy4kZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FkZENvbnRlbnRDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYiB0byBmaXJlIGFmdGVyIGNsb3N1cmUuXG4gICAgICogQGZpcmVzIE9mZkNhbnZhcyNjbG9zZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2xvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZShjYikge1xuICAgICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICAgKiBAZXZlbnQgT2ZmQ2FudmFzI2Nsb3NlZFxuICAgICAgICovXG4gICAgICAudHJpZ2dlcignY2xvc2VkLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgICB0aGlzLiRjb250ZW50LnJlbW92ZUNsYXNzKCdpcy1vcGVuLWxlZnQgaXMtb3Blbi10b3AgaXMtb3Blbi1yaWdodCBpcy1vcGVuLWJvdHRvbScpO1xuXG4gICAgICAvLyBJZiBgY29udGVudFNjcm9sbGAgaXMgc2V0IHRvIGZhbHNlLCByZW1vdmUgY2xhc3MgYW5kIHJlLWVuYWJsZSBzY3JvbGxpbmcgb24gdG91Y2ggZGV2aWNlcy5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudFNjcm9sbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLW9mZi1jYW52YXMtb3BlbicpLm9mZigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b3VjaHN0YXJ0JywgdGhpcy5fcmVjb3JkU2Nyb2xsYWJsZSk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b3VjaG1vdmUnLCB0aGlzLl9zdG9wU2Nyb2xsUHJvcGFnYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoJ2lzLXZpc2libGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgPT09IHRydWUgJiYgdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoJ2lzLWNsb3NhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFwRm9jdXMgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBMaXN0ZW4gdG8gdHJhbnNpdGlvbkVuZCBhbmQgYWRkIGNsYXNzIHdoZW4gZG9uZS5cbiAgICAgIHRoaXMuJGVsZW1lbnQub25lKCgwLCBfZm91bmRhdGlvblV0aWwzLnRyYW5zaXRpb25lbmQpKHRoaXMuJGVsZW1lbnQpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtY2xvc2VkJyk7XG4gICAgICAgIF90aGlzLl9yZW1vdmVDb250ZW50Q2xhc3NlcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW4gb3IgY2xvc2VkLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gdHJpZ2dlciAtIGVsZW1lbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIG9mZi1jYW52YXMgdG8gb3Blbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9nZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoZXZlbnQsIHRyaWdnZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcGVuKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGtleWJvYXJkIGlucHV0IHdoZW4gZGV0ZWN0ZWQuIFdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCwgdGhlIG9mZi1jYW52YXMgbWVudSBjbG9zZXMsIGFuZCBmb2N1cyBpcyByZXN0b3JlZCB0byB0aGUgZWxlbWVudCB0aGF0IG9wZW5lZCB0aGUgbWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaGFuZGxlS2V5Ym9hcmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlS2V5Ym9hcmQoZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ09mZkNhbnZhcycsIHtcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgIF90aGlzNC5jbG9zZSgpO1xuICAgICAgICAgIF90aGlzNC4kbGFzdFRyaWdnZXIuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24gaGFuZGxlZCgpIHtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIG9mZmNhbnZhcyBwbHVnaW4uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpO1xuICAgICAgdGhpcy4kb3ZlcmxheS5vZmYoJy56Zi5vZmZjYW52YXMnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT2ZmQ2FudmFzO1xufShfZm91bmRhdGlvbi5QbHVnaW4pO1xuXG5PZmZDYW52YXMuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgdXNlciB0byBjbGljayBvdXRzaWRlIG9mIHRoZSBtZW51IHRvIGNsb3NlIGl0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gb3ZlcmxheSBvbiB0b3Agb2YgYFtkYXRhLW9mZi1jYW52YXMtY29udGVudF1gLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjb250ZW50T3ZlcmxheTogdHJ1ZSxcblxuICAvKipcbiAgICogVGFyZ2V0IGFuIG9mZi1jYW52YXMgY29udGVudCBjb250YWluZXIgYnkgSUQgdGhhdCBtYXkgYmUgcGxhY2VkIGFueXdoZXJlLiBJZiBudWxsIHRoZSBjbG9zZXN0IGNvbnRlbnQgY29udGFpbmVyIHdpbGwgYmUgdGFrZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUgez9zdHJpbmd9XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICovXG4gIGNvbnRlbnRJZDogbnVsbCxcblxuICAvKipcbiAgICogRGVmaW5lIHRoZSBvZmYtY2FudmFzIGVsZW1lbnQgaXMgbmVzdGVkIGluIGFuIG9mZi1jYW52YXMgY29udGVudC4gVGhpcyBpcyByZXF1aXJlZCB3aGVuIHVzaW5nIHRoZSBjb250ZW50SWQgb3B0aW9uIGZvciBhIG5lc3RlZCBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBuZXN0ZWQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIEVuYWJsZS9kaXNhYmxlIHNjcm9sbGluZyBvZiB0aGUgbWFpbiBjb250ZW50IHdoZW4gYW4gb2ZmIGNhbnZhcyBwYW5lbCBpcyBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjb250ZW50U2Nyb2xsOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICovXG4gIHRyYW5zaXRpb25UaW1lOiBudWxsLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRyYW5zaXRpb24gZm9yIHRoZSBvZmZjYW52YXMgbWVudS4gT3B0aW9ucyBhcmUgJ3B1c2gnLCAnZGV0YWNoZWQnIG9yICdzbGlkZScuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgcHVzaFxuICAgKi9cbiAgdHJhbnNpdGlvbjogJ3B1c2gnLFxuXG4gIC8qKlxuICAgKiBGb3JjZSB0aGUgcGFnZSB0byBzY3JvbGwgdG8gdG9wIG9yIGJvdHRvbSBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBmb3JjZVRvOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuIGZvciBjZXJ0YWluIGJyZWFrcG9pbnRzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICByZXZlYWxPbjogbnVsbCxcblxuICAvKipcbiAgICogRm9yY2UgZm9jdXMgdG8gdGhlIG9mZmNhbnZhcyBvbiBvcGVuLiBJZiB0cnVlLCB3aWxsIGZvY3VzIHRoZSBvcGVuaW5nIHRyaWdnZXIgb24gY2xvc2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAvKipcbiAgICogQ2xhc3MgdXNlZCB0byBmb3JjZSBhbiBvZmZjYW52YXMgdG8gcmVtYWluIG9wZW4uIEZvdW5kYXRpb24gZGVmYXVsdHMgZm9yIHRoaXMgYXJlIGByZXZlYWwtZm9yLWxhcmdlYCAmIGByZXZlYWwtZm9yLW1lZGl1bWAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgcmV2ZWFsLWZvci1cbiAgICogQHRvZG8gaW1wcm92ZSB0aGUgcmVnZXggdGVzdGluZyBmb3IgdGhpcy5cbiAgICovXG4gIHJldmVhbENsYXNzOiAncmV2ZWFsLWZvci0nLFxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBvcHRpb25hbCBmb2N1cyB0cmFwcGluZyB3aGVuIG9wZW5pbmcgYW4gb2ZmY2FudmFzLiBTZXRzIHRhYmluZGV4IG9mIFtkYXRhLW9mZi1jYW52YXMtY29udGVudF0gdG8gLTEgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0cmFwRm9jdXM6IGZhbHNlXG59O1xuXG5leHBvcnRzLk9mZkNhbnZhcyA9IE9mZkNhbnZhcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHViMlptWTJGdWRtRnpMbXB6SWwwc0ltNWhiV1Z6SWpwYklrOW1aa05oYm5aaGN5SXNJbVZzWlcxbGJuUWlMQ0p2Y0hScGIyNXpJaXdpWTJ4aGMzTk9ZVzFsSWl3aUpHVnNaVzFsYm5RaUxDSWtJaXdpWlhoMFpXNWtJaXdpWkdWbVlYVnNkSE1pTENKa1lYUmhJaXdpWTI5dWRHVnVkRU5zWVhOelpYTWlMQ0ppWVhObElpd2ljbVYyWldGc0lpd2lKR3hoYzNSVWNtbG5aMlZ5SWl3aUpIUnlhV2RuWlhKeklpd2ljRzl6YVhScGIyNGlMQ0lrWTI5dWRHVnVkQ0lzSW01bGMzUmxaQ0lzSW1WaFkyZ2lMQ0pwYm1SbGVDSXNJblpoYkNJc0luQjFjMmdpTENKVWNtbG5aMlZ5Y3lJc0ltbHVhWFFpTENKTlpXUnBZVkYxWlhKNUlpd2lYMmx1YVhRaUxDSmZaWFpsYm5Seklpd2lTMlY1WW05aGNtUWlMQ0p5WldkcGMzUmxjaUlzSW1sa0lpd2lZWFIwY2lJc0ltTnZiblJsYm5SSlpDSXNJbk5wWW14cGJtZHpJaXdpYkdWdVozUm9JaXdpWm1seWMzUWlMQ0pqYkc5elpYTjBJaXdpWTI5dWMyOXNaU0lzSW5kaGNtNGlMQ0owY21GdWMybDBhVzl1SWl3aWNtVnRiM1psUTJ4aGMzTWlMQ0poWkdSRGJHRnpjeUlzSW1SdlkzVnRaVzUwSWl3aVptbHVaQ0lzSW1seklpd2liV0YwWTJnaUxDSmpiMjUwWlc1MFQzWmxjbXhoZVNJc0ltOTJaWEpzWVhraUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aWIzWmxjbXhoZVZCdmMybDBhVzl1SWl3aVkzTnpJaXdpYzJWMFFYUjBjbWxpZFhSbElpd2lKRzkyWlhKc1lYa2lMQ0pwYm5ObGNuUkJablJsY2lJc0ltRndjR1Z1WkNJc0ltbHpVbVYyWldGc1pXUWlMQ0pTWldkRmVIQWlMQ0p5WlhabFlXeERiR0Z6Y3lJc0luUmxjM1FpTENKeVpYWmxZV3hQYmlJc0luTndiR2wwSWl3aVgzTmxkRTFSUTJobFkydGxjaUlzSW5SeVlXNXphWFJwYjI1VWFXMWxJaXdpWDNKbGJXOTJaVU52Ym5SbGJuUkRiR0Z6YzJWeklpd2liMlptSWl3aWIyNGlMQ0p2Y0dWdUlpd2lZbWx1WkNJc0ltTnNiM05sSWl3aWRHOW5aMnhsSWl3aVgyaGhibVJzWlV0bGVXSnZZWEprSWl3aVkyeHZjMlZQYmtOc2FXTnJJaXdpSkhSaGNtZGxkQ0lzSWw5MGFHbHpJaXdpZDJsdVpHOTNJaXdpWVhSTVpXRnpkQ0lzSW05dVpTSXNJbWhoYzFKbGRtVmhiQ0lzSW1wdmFXNGlMQ0pmWVdSa1EyOXVkR1Z1ZEVOc1lYTnpaWE1pTENKbGRtVnVkQ0lzSW1Wc1pXMGlMQ0p6WTNKdmJHeElaV2xuYUhRaUxDSmpiR2xsYm5SSVpXbG5hSFFpTENKelkzSnZiR3hVYjNBaUxDSmhiR3h2ZDFWd0lpd2lZV3hzYjNkRWIzZHVJaXdpYkdGemRGa2lMQ0p2Y21sbmFXNWhiRVYyWlc1MElpd2ljR0ZuWlZraUxDSjFjQ0lzSW1SdmQyNGlMQ0p6ZEc5d1VISnZjR0ZuWVhScGIyNGlMQ0p3Y21WMlpXNTBSR1ZtWVhWc2RDSXNJblJ5YVdkblpYSWlMQ0pvWVhORGJHRnpjeUlzSW1admNtTmxWRzhpTENKelkzSnZiR3hVYnlJc0ltSnZaSGtpTENKamIyNTBaVzUwVTJOeWIyeHNJaXdpWDNOMGIzQlRZM0p2Ykd4cGJtY2lMQ0pmY21WamIzSmtVMk55YjJ4c1lXSnNaU0lzSWw5emRHOXdVMk55YjJ4c1VISnZjR0ZuWVhScGIyNGlMQ0poZFhSdlJtOWpkWE1pTENKallXNTJZWE5HYjJOMWN5SXNJbVZ4SWl3aVptOWpkWE1pTENKMGNtRndSbTlqZFhNaUxDSmpZaUlzSW5KbGJXOTJaVUYwZEhJaUxDSnlaV3hsWVhObFJtOWpkWE1pTENKbElpd2lhR0Z1Wkd4bFMyVjVJaXdpYUdGdVpHeGxaQ0lzSWxCc2RXZHBiaUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdPenRCUVVWQk96czdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJSVUU3T3pzN096czdPenM3UVVGRlFUczdPenM3T3pzN1NVRlJUVUVzVXpzN096czdPenM3T3pzN08wRkJRMG83T3pzN096czdPekpDUVZGUFF5eFBMRVZCUVZORExFOHNSVUZCVXp0QlFVRkJPenRCUVVOMlFpeFhRVUZMUXl4VFFVRk1MRWRCUVdsQ0xGZEJRV3BDTEVOQlJIVkNMRU5CUTA4N1FVRkRPVUlzVjBGQlMwTXNVVUZCVEN4SFFVRm5Ra2dzVDBGQmFFSTdRVUZEUVN4WFFVRkxReXhQUVVGTUxFZEJRV1ZITEdsQ1FVRkZReXhOUVVGR0xFTkJRVk1zUlVGQlZDeEZRVUZoVGl4VlFVRlZUeXhSUVVGMlFpeEZRVUZwUXl4TFFVRkxTQ3hSUVVGTUxFTkJRV05KTEVsQlFXUXNSVUZCYWtNc1JVRkJkVVJPTEU5QlFYWkVMRU5CUVdZN1FVRkRRU3hYUVVGTFR5eGpRVUZNTEVkQlFYTkNMRVZCUVVWRExFMUJRVTBzUlVGQlVpeEZRVUZaUXl4UlFVRlJMRVZCUVhCQ0xFVkJRWFJDTzBGQlEwRXNWMEZCUzBNc1dVRkJUQ3hIUVVGdlFpeDFRa0ZCY0VJN1FVRkRRU3hYUVVGTFF5eFRRVUZNTEVkQlFXbENMSFZDUVVGcVFqdEJRVU5CTEZkQlFVdERMRkZCUVV3c1IwRkJaMElzVFVGQmFFSTdRVUZEUVN4WFFVRkxReXhSUVVGTUxFZEJRV2RDTEhWQ1FVRm9RanRCUVVOQkxGZEJRVXRETEUxQlFVd3NSMEZCWXl4RFFVRkRMRU5CUVVVc1MwRkJTMlFzVDBGQlRDeERRVUZoWXl4TlFVRTVRanM3UVVGRlFUdEJRVU5CTERSQ1FVRkZMRU5CUVVNc1RVRkJSQ3hGUVVGVExGTkJRVlFzUTBGQlJpeEZRVUYxUWtNc1NVRkJka0lzUTBGQk5FSXNWVUZCUTBNc1MwRkJSQ3hGUVVGUlF5eEhRVUZTTEVWQlFXZENPMEZCUXpGRExHVkJRVXRXTEdOQlFVd3NRMEZCYjBKRExFbEJRWEJDTEVOQlFYbENWU3hKUVVGNlFpeERRVUU0UWl4dlFrRkJhMEpFTEVkQlFXaEVPMEZCUTBRc1QwRkdSRHRCUVVkQkxEUkNRVUZGTEVOQlFVTXNUVUZCUkN4RlFVRlRMRTlCUVZRc1JVRkJhMElzUzBGQmJFSXNSVUZCZVVJc1VVRkJla0lzUTBGQlJpeEZRVUZ6UTBZc1NVRkJkRU1zUTBGQk1rTXNWVUZCUTBNc1MwRkJSQ3hGUVVGUlF5eEhRVUZTTEVWQlFXZENPMEZCUTNwRUxHVkJRVXRXTEdOQlFVd3NRMEZCYjBKRExFbEJRWEJDTEVOQlFYbENWU3hKUVVGNlFpeERRVUU0UWl4clFrRkJaMEpFTEVkQlFUbERPMEZCUTBFc1pVRkJTMVlzWTBGQlRDeERRVUZ2UWtVc1RVRkJjRUlzUTBGQk1rSlRMRWxCUVROQ0xFTkJRV2RETEdkQ1FVRmpSQ3hIUVVFNVF6dEJRVU5FTEU5QlNFUTdPMEZCUzBFN1FVRkRRVVVzWjBOQlFWTkRMRWxCUVZRc1EwRkJZMnBDTEdkQ1FVRmtPMEZCUTBGclFpeHJRMEZCVjBNc1MwRkJXRHM3UVVGRlFTeFhRVUZMUVN4TFFVRk1PMEZCUTBFc1YwRkJTME1zVDBGQlREczdRVUZGUVVNc0swSkJRVk5ETEZGQlFWUXNRMEZCYTBJc1YwRkJiRUlzUlVGQkswSTdRVUZETjBJc2EwSkJRVlU3UVVGRWJVSXNUMEZCTDBJN1FVRkpSRHM3UVVGRlJEczdPenM3T3pzN05FSkJTMUU3UVVGRFRpeFZRVUZKUXl4TFFVRkxMRXRCUVV0NFFpeFJRVUZNTEVOQlFXTjVRaXhKUVVGa0xFTkJRVzFDTEVsQlFXNUNMRU5CUVZRN08wRkJSVUVzVjBGQlMzcENMRkZCUVV3c1EwRkJZM2xDTEVsQlFXUXNRMEZCYlVJc1lVRkJia0lzUlVGQmEwTXNUVUZCYkVNN08wRkJSVUU3UVVGRFFTeFZRVUZKTEV0QlFVc3pRaXhQUVVGTUxFTkJRV0UwUWl4VFFVRnFRaXhGUVVFMFFqdEJRVU14UWl4aFFVRkxaaXhSUVVGTUxFZEJRV2RDTEhOQ1FVRkZMRTFCUVVrc1MwRkJTMklzVDBGQlRDeERRVUZoTkVJc1UwRkJia0lzUTBGQmFFSTdRVUZEUkN4UFFVWkVMRTFCUlU4c1NVRkJTU3hMUVVGTE1VSXNVVUZCVEN4RFFVRmpNa0lzVVVGQlpDeERRVUYxUWl3eVFrRkJka0lzUlVGQmIwUkRMRTFCUVhoRUxFVkJRV2RGTzBGQlEzSkZMR0ZCUVV0cVFpeFJRVUZNTEVkQlFXZENMRXRCUVV0WUxGRkJRVXdzUTBGQll6SkNMRkZCUVdRc1EwRkJkVUlzTWtKQlFYWkNMRVZCUVc5RVJTeExRVUZ3UkN4RlFVRm9RanRCUVVORUxFOUJSazBzVFVGRlFUdEJRVU5NTEdGQlFVdHNRaXhSUVVGTUxFZEJRV2RDTEV0QlFVdFlMRkZCUVV3c1EwRkJZemhDTEU5QlFXUXNRMEZCYzBJc01rSkJRWFJDTEVWQlFXMUVSQ3hMUVVGdVJDeEZRVUZvUWp0QlFVTkVPenRCUVVWRUxGVkJRVWtzUTBGQlF5eExRVUZMTDBJc1QwRkJUQ3hEUVVGaE5FSXNVMEZCYkVJc1JVRkJOa0k3UVVGRE0wSTdRVUZEUVN4aFFVRkxaQ3hOUVVGTUxFZEJRV01zUzBGQlMxb3NVVUZCVEN4RFFVRmpNa0lzVVVGQlpDeERRVUYxUWl3eVFrRkJka0lzUlVGQmIwUkRMRTFCUVhCRUxFdEJRU3RFTEVOQlFUZEZPMEZCUlVRc1QwRktSQ3hOUVVsUExFbEJRVWtzUzBGQlN6bENMRTlCUVV3c1EwRkJZVFJDTEZOQlFXSXNTVUZCTUVJc1MwRkJTelZDTEU5QlFVd3NRMEZCWVdNc1RVRkJZaXhMUVVGM1FpeEpRVUYwUkN4RlFVRTBSRHRCUVVOcVJUdEJRVU5CTzBGQlEwRnRRaXhuUWtGQlVVTXNTVUZCVWl4RFFVRmhMRzFGUVVGaU8wRkJRMFE3TzBGQlJVUXNWVUZCU1N4TFFVRkxjRUlzVFVGQlRDeExRVUZuUWl4SlFVRndRaXhGUVVFd1FqdEJRVU40UWp0QlFVTkJMR0ZCUVV0a0xFOUJRVXdzUTBGQllXMURMRlZCUVdJc1IwRkJNRUlzVTBGQk1VSTdRVUZEUVR0QlFVTkJMR0ZCUVV0cVF5eFJRVUZNTEVOQlFXTnJReXhYUVVGa0xFTkJRVEJDTEc5Q1FVRXhRanRCUVVORU96dEJRVVZFTEZkQlFVdHNReXhSUVVGTUxFTkJRV050UXl4UlFVRmtMRzlDUVVGM1F5eExRVUZMY2tNc1QwRkJUQ3hEUVVGaGJVTXNWVUZCY2tRN08wRkJSVUU3UVVGRFFTeFhRVUZMZUVJc1UwRkJUQ3hIUVVGcFFpeHpRa0ZCUlRKQ0xGRkJRVVlzUlVGRFpFTXNTVUZFWXl4RFFVTlVMR2xDUVVGbFlpeEZRVUZtTEVkQlFXdENMRzFDUVVGc1FpeEhRVUZ6UTBFc1JVRkJkRU1zUjBGQmVVTXNiMEpCUVhwRExFZEJRVGhFUVN4RlFVRTVSQ3hIUVVGcFJTeEpRVVI0UkN4RlFVVmtReXhKUVVaakxFTkJSVlFzWlVGR1V5eEZRVVZSTEU5QlJsSXNSVUZIWkVFc1NVRklZeXhEUVVkVUxHVkJTRk1zUlVGSFVVUXNSVUZJVWl4RFFVRnFRanM3UVVGTFFUdEJRVU5CTEZkQlFVdGtMRkZCUVV3c1IwRkJaMElzUzBGQlMxWXNVVUZCVEN4RFFVRmpjME1zUlVGQlpDeERRVUZwUWl4clJVRkJha0lzU1VGQmRVWXNTMEZCUzNSRExGRkJRVXdzUTBGQlkzbENMRWxCUVdRc1EwRkJiVUlzVDBGQmJrSXNSVUZCTkVKakxFdEJRVFZDTEVOQlFXdERMRzFEUVVGc1F5eEZRVUYxUlN4RFFVRjJSU3hEUVVGMlJpeEhRVUZ0U3l4TFFVRkxOMElzVVVGQmVFdzdPMEZCUlVFN1FVRkRRU3hWUVVGSkxFdEJRVXRhTEU5QlFVd3NRMEZCWVRCRExHTkJRV0lzUzBGQlowTXNTVUZCY0VNc1JVRkJNRU03UVVGRGVFTXNXVUZCU1VNc1ZVRkJWVXdzVTBGQlUwMHNZVUZCVkN4RFFVRjFRaXhMUVVGMlFpeERRVUZrTzBGQlEwRXNXVUZCU1VNc2EwSkJRV3RDTEhOQ1FVRkZMRXRCUVVzelF5eFJRVUZRTEVWQlFXbENORU1zUjBGQmFrSXNRMEZCY1VJc1ZVRkJja0lzVFVGQmNVTXNUMEZCY2tNc1IwRkJLME1zYTBKQlFTOURMRWRCUVc5RkxIRkNRVUV4Ump0QlFVTkJTQ3huUWtGQlVVa3NXVUZCVWl4RFFVRnhRaXhQUVVGeVFpeEZRVUU0UWl3eVFrRkJNa0pHTEdWQlFYcEVPMEZCUTBFc1lVRkJTMGNzVVVGQlRDeEhRVUZuUWl4elFrRkJSVXdzVDBGQlJpeERRVUZvUWp0QlFVTkJMRmxCUVVkRkxHOUNRVUZ2UWl4clFrRkJka0lzUlVGQk1rTTdRVUZEZWtNc1owTkJRVVVzUzBGQlMwY3NVVUZCVUN4RlFVRnBRa01zVjBGQmFrSXNRMEZCTmtJc1MwRkJTeTlETEZGQlFXeERPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzWlVGQlMxY3NVVUZCVEN4RFFVRmpjVU1zVFVGQlpDeERRVUZ4UWl4TFFVRkxSaXhSUVVFeFFqdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1YwRkJTMmhFTEU5QlFVd3NRMEZCWVcxRUxGVkJRV0lzUjBGQk1FSXNTMEZCUzI1RUxFOUJRVXdzUTBGQllXMUVMRlZCUVdJc1NVRkJNa0lzU1VGQlNVTXNUVUZCU2l4RFFVRlhMRXRCUVV0d1JDeFBRVUZNTEVOQlFXRnhSQ3hYUVVGNFFpeEZRVUZ4UXl4SFFVRnlReXhGUVVFd1EwTXNTVUZCTVVNc1EwRkJLME1zUzBGQlMzQkVMRkZCUVV3c1EwRkJZeXhEUVVGa0xFVkJRV2xDUkN4VFFVRm9SU3hEUVVGeVJEczdRVUZGUVN4VlFVRkpMRXRCUVV0RUxFOUJRVXdzUTBGQllXMUVMRlZCUVdJc1MwRkJORUlzU1VGQmFFTXNSVUZCYzBNN1FVRkRjRU1zWVVGQlMyNUVMRTlCUVV3c1EwRkJZWFZFTEZGQlFXSXNSMEZCZDBJc1MwRkJTM1pFTEU5QlFVd3NRMEZCWVhWRUxGRkJRV0lzU1VGQmVVSXNTMEZCUzNKRUxGRkJRVXdzUTBGQll5eERRVUZrTEVWQlFXbENSQ3hUUVVGcVFpeERRVUV5UW5kRExFdEJRVE5DTEVOQlFXbERMSFZEUVVGcVF5eEZRVUV3UlN4RFFVRXhSU3hGUVVFMlJXVXNTMEZCTjBVc1EwRkJiVVlzUjBGQmJrWXNSVUZCZDBZc1EwRkJlRVlzUTBGQmFrUTdRVUZEUVN4aFFVRkxReXhoUVVGTU8wRkJRMFE3TzBGQlJVUXNWVUZCU1N4TFFVRkxla1FzVDBGQlRDeERRVUZoTUVRc1kwRkJha0lzUlVGQmFVTTdRVUZETDBJc1lVRkJTM2hFTEZGQlFVd3NRMEZCWXpSRExFZEJRV1FzUTBGQmEwSXNjVUpCUVd4Q0xFVkJRWGxETEV0QlFVczVReXhQUVVGTUxFTkJRV0V3UkN4alFVRjBSRHRCUVVORU96dEJRVVZFTzBGQlEwRXNWMEZCUzBNc2NVSkJRVXc3UVVGRFJEczdRVUZGUkRzN096czdPenM3T0VKQlMxVTdRVUZEVWl4WFFVRkxla1FzVVVGQlRDeERRVUZqTUVRc1IwRkJaQ3hEUVVGclFpd3lRa0ZCYkVJc1JVRkJLME5ETEVWQlFTOURMRU5CUVd0RU8wRkJRMmhFTERKQ1FVRnRRaXhMUVVGTFF5eEpRVUZNTEVOQlFWVkRMRWxCUVZZc1EwRkJaU3hKUVVGbUxFTkJSRFpDTzBGQlJXaEVMRFJDUVVGdlFpeExRVUZMUXl4TFFVRk1MRU5CUVZkRUxFbEJRVmdzUTBGQlowSXNTVUZCYUVJc1EwRkdORUk3UVVGSGFFUXNOa0pCUVhGQ0xFdEJRVXRGTEUxQlFVd3NRMEZCV1VZc1NVRkJXaXhEUVVGcFFpeEpRVUZxUWl4RFFVZ3lRanRCUVVsb1JDeG5RMEZCZDBJc1MwRkJTMGNzWlVGQlRDeERRVUZ4UWtnc1NVRkJja0lzUTBGQk1FSXNTVUZCTVVJN1FVRktkMElzVDBGQmJFUTdPMEZCVDBFc1ZVRkJTU3hMUVVGTEwwUXNUMEZCVEN4RFFVRmhiVVVzV1VGQllpeExRVUU0UWl4SlFVRnNReXhGUVVGM1F6dEJRVU4wUXl4WlFVRkpReXhWUVVGVkxFdEJRVXR3UlN4UFFVRk1MRU5CUVdFd1F5eGpRVUZpTEVkQlFUaENMRXRCUVV0TkxGRkJRVzVETEVkQlFUaERMRXRCUVV0dVF5eFJRVUZxUlR0QlFVTkJkVVFzWjBKQlFWRlFMRVZCUVZJc1EwRkJWeXhGUVVGRExITkNRVUZ6UWl4TFFVRkxSeXhMUVVGTUxFTkJRVmRFTEVsQlFWZ3NRMEZCWjBJc1NVRkJhRUlzUTBGQmRrSXNSVUZCV0R0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdiME5CU1dkQ08wRkJRMlFzVlVGQlNVMHNVVUZCVVN4SlFVRmFPenRCUVVWQkxEUkNRVUZGUXl4TlFVRkdMRVZCUVZWVUxFVkJRVllzUTBGQllTeDFRa0ZCWWl4RlFVRnpReXhaUVVGWE8wRkJReTlETEZsQlFVbDRReXcwUWtGQlYydEVMRTlCUVZnc1EwRkJiVUpHTEUxQlFVMXlSU3hQUVVGT0xFTkJRV04xUkN4UlFVRnFReXhEUVVGS0xFVkJRV2RFTzBGQlF6bERZeXhuUWtGQlRUVkVMRTFCUVU0c1EwRkJZU3hKUVVGaU8wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwdzBSQ3huUWtGQlRUVkVMRTFCUVU0c1EwRkJZU3hMUVVGaU8wRkJRMFE3UVVGRFJpeFBRVTVFTEVWQlRVY3JSQ3hIUVU1SUxFTkJUVThzYlVKQlRsQXNSVUZOTkVJc1dVRkJWenRCUVVOeVF5eFpRVUZKYmtRc05FSkJRVmRyUkN4UFFVRllMRU5CUVcxQ1JpeE5RVUZOY2tVc1QwRkJUaXhEUVVGamRVUXNVVUZCYWtNc1EwRkJTaXhGUVVGblJEdEJRVU01UTJNc1owSkJRVTAxUkN4TlFVRk9MRU5CUVdFc1NVRkJZanRCUVVORU8wRkJRMFlzVDBGV1JEdEJRVmRFT3p0QlFVVkVPenM3T3pzN096czdNRU5CVFhOQ1owVXNVeXhGUVVGWE8wRkJReTlDTEZWQlFVa3NUMEZCVDBFc1UwRkJVQ3hMUVVGeFFpeFRRVUY2UWl4RlFVRnZRenRCUVVOc1F5eGhRVUZMTlVRc1VVRkJUQ3hEUVVGamRVSXNWMEZCWkN4RFFVRXdRaXhMUVVGTE4wSXNZMEZCVEN4RFFVRnZRa01zU1VGQmNFSXNRMEZCZVVKclJTeEpRVUY2UWl4RFFVRTRRaXhIUVVFNVFpeERRVUV4UWp0QlFVTkVMRTlCUmtRc1RVRkZUeXhKUVVGSlJDeGpRVUZqTEV0QlFXeENMRVZCUVhsQ08wRkJRemxDTEdGQlFVczFSQ3hSUVVGTUxFTkJRV04xUWl4WFFVRmtMR2xDUVVGM1F5eExRVUZMZUVJc1VVRkJOME03UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3T3pzN096czdkVU5CVFcxQ05rUXNVeXhGUVVGWE8wRkJRelZDTEZkQlFVdGtMSEZDUVVGTUxFTkJRVEpDWXl4VFFVRXpRanRCUVVOQkxGVkJRVWtzVDBGQlQwRXNVMEZCVUN4TFFVRnhRaXhUUVVGNlFpeEZRVUZ2UXp0QlFVTnNReXhoUVVGTE5VUXNVVUZCVEN4RFFVRmpkMElzVVVGQlpDeHhRa0ZCZVVNc1MwRkJTM0pETEU5QlFVd3NRMEZCWVcxRExGVkJRWFJFTEhOQ1FVRnBSaXhMUVVGTGRrSXNVVUZCZEVZN1FVRkRSQ3hQUVVaRUxFMUJSVThzU1VGQlNUWkVMR05CUVdNc1NVRkJiRUlzUlVGQmQwSTdRVUZETjBJc1lVRkJTelZFTEZGQlFVd3NRMEZCWTNkQ0xGRkJRV1FzYVVKQlFYRkRMRXRCUVV0NlFpeFJRVUV4UXp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdPekpDUVV0UGRVTXNWU3hGUVVGWk8wRkJRMnBDTEZWQlFVbEJMRlZCUVVvc1JVRkJaMEk3UVVGRFpDeGhRVUZMWVN4TFFVRk1PMEZCUTBFc1lVRkJTMklzVlVGQlRDeEhRVUZyUWl4SlFVRnNRanRCUVVOQkxHRkJRVXRxUkN4UlFVRk1MRU5CUVdONVFpeEpRVUZrTEVOQlFXMUNMR0ZCUVc1Q0xFVkJRV3RETEU5QlFXeERPMEZCUTBFc1lVRkJTM3BDTEZGQlFVd3NRMEZCWXpCRUxFZEJRV1FzUTBGQmEwSXNiVU5CUVd4Q08wRkJRMEVzWVVGQlN6RkVMRkZCUVV3c1EwRkJZMnRETEZkQlFXUXNRMEZCTUVJc1YwRkJNVUk3UVVGRFJDeFBRVTVFTEUxQlRVODdRVUZEVEN4aFFVRkxaU3hWUVVGTUxFZEJRV3RDTEV0QlFXeENPMEZCUTBFc1lVRkJTMnBFTEZGQlFVd3NRMEZCWTNsQ0xFbEJRV1FzUTBGQmJVSXNZVUZCYmtJc1JVRkJhME1zVFVGQmJFTTdRVUZEUVN4aFFVRkxla0lzVVVGQlRDeERRVUZqTUVRc1IwRkJaQ3hEUVVGclFpeHRRMEZCYkVJc1JVRkJkVVJETEVWQlFYWkVMRU5CUVRCRU8wRkJRM2hFTERaQ1FVRnRRaXhMUVVGTFF5eEpRVUZNTEVOQlFWVkRMRWxCUVZZc1EwRkJaU3hKUVVGbUxFTkJSSEZETzBGQlJYaEVMQ3RDUVVGeFFpeExRVUZMUlN4TlFVRk1MRU5CUVZsR0xFbEJRVm9zUTBGQmFVSXNTVUZCYWtJN1FVRkdiVU1zVTBGQk1VUTdRVUZKUVN4aFFVRkxOMFFzVVVGQlRDeERRVUZqYlVNc1VVRkJaQ3hEUVVGMVFpeFhRVUYyUWp0QlFVTkVPMEZCUTBRc1YwRkJTM05ETEd0Q1FVRk1MRU5CUVhkQ2VFSXNWVUZCZUVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0dFEwRkpaWGxDTEVzc1JVRkJUenRCUVVOd1FpeGhRVUZQTEV0QlFWQTdRVUZEUkRzN1FVRkZSRHRCUVVOQk96czdPM05EUVVOclFrRXNTeXhGUVVGUE8wRkJRM1pDTEZWQlFVbERMRTlCUVU4c1NVRkJXQ3hEUVVSMVFpeERRVU5PT3p0QlFVVm9RanRCUVVORUxGVkJRVWxCTEV0QlFVdERMRmxCUVV3c1MwRkJjMEpFTEV0QlFVdEZMRmxCUVM5Q0xFVkJRVFpETzBGQlF6TkRPMEZCUTBFc1dVRkJTVVlzUzBGQlMwY3NVMEZCVEN4TFFVRnRRaXhEUVVGMlFpeEZRVUV3UWp0QlFVTjRRa2dzWlVGQlMwY3NVMEZCVEN4SFFVRnBRaXhEUVVGcVFqdEJRVU5FTzBGQlEwUTdRVUZEUVN4WlFVRkpTQ3hMUVVGTFJ5eFRRVUZNTEV0QlFXMUNTQ3hMUVVGTFF5eFpRVUZNTEVkQlFXOUNSQ3hMUVVGTFJTeFpRVUZvUkN4RlFVRTRSRHRCUVVNMVJFWXNaVUZCUzBjc1UwRkJUQ3hIUVVGcFFrZ3NTMEZCUzBNc1dVRkJUQ3hIUVVGdlFrUXNTMEZCUzBVc1dVRkJla0lzUjBGQmQwTXNRMEZCZWtRN1FVRkRSRHRCUVVOR08wRkJRMFJHTEZkQlFVdEpMRTlCUVV3c1IwRkJaVW9zUzBGQlMwY3NVMEZCVEN4SFFVRnBRaXhEUVVGb1F6dEJRVU5CU0N4WFFVRkxTeXhUUVVGTUxFZEJRV2xDVEN4TFFVRkxSeXhUUVVGTUxFZEJRV3RDU0N4TFFVRkxReXhaUVVGTUxFZEJRVzlDUkN4TFFVRkxSU3haUVVFMVJEdEJRVU5CUml4WFFVRkxUU3hMUVVGTUxFZEJRV0ZRTEUxQlFVMVJMR0ZCUVU0c1EwRkJiMEpETEV0QlFXcERPMEZCUTBRN096c3lRMEZGYzBKVUxFc3NSVUZCVHp0QlFVTTFRaXhWUVVGSlF5eFBRVUZQTEVsQlFWZ3NRMEZFTkVJc1EwRkRXRHRCUVVOcVFpeFZRVUZKVXl4TFFVRkxWaXhOUVVGTlV5eExRVUZPTEVkQlFXTlNMRXRCUVV0TkxFdEJRVFZDTzBGQlEwRXNWVUZCU1Vrc1QwRkJUeXhEUVVGRFJDeEZRVUZhTzBGQlEwRlVMRmRCUVV0TkxFdEJRVXdzUjBGQllWQXNUVUZCVFZNc1MwRkJia0k3TzBGQlJVRXNWVUZCU1VNc1RVRkJUVlFzUzBGQlMwa3NUMEZCV2l4SlFVRjVRazBzVVVGQlVWWXNTMEZCUzBzc1UwRkJla01zUlVGQmNVUTdRVUZEYmtST0xHTkJRVTFaTEdWQlFVNDdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRURm9zWTBGQlRXRXNZMEZCVGp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3ZVVKQlQwdGlMRXNzUlVGQlQyTXNUeXhGUVVGVE8wRkJRMjVDTEZWQlFVa3NTMEZCUzNoR0xGRkJRVXdzUTBGQlkzbEdMRkZCUVdRc1EwRkJkVUlzVTBGQmRrSXNTMEZCY1VNc1MwRkJTM2hETEZWQlFUbERMRVZCUVRCRU8wRkJRVVU3UVVGQlV6dEJRVU55UlN4VlFVRkphMElzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVseFFpeFBRVUZLTEVWQlFXRTdRVUZEV0N4aFFVRkxhRVlzV1VGQlRDeEhRVUZ2UW1kR0xFOUJRWEJDTzBGQlEwUTdPMEZCUlVRc1ZVRkJTU3hMUVVGTE1VWXNUMEZCVEN4RFFVRmhORVlzVDBGQllpeExRVUY1UWl4TFFVRTNRaXhGUVVGdlF6dEJRVU5zUTNSQ0xHVkJRVTkxUWl4UlFVRlFMRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRU5CUVc1Q08wRkJRMFFzVDBGR1JDeE5RVVZQTEVsQlFVa3NTMEZCU3pkR0xFOUJRVXdzUTBGQllUUkdMRTlCUVdJc1MwRkJlVUlzVVVGQk4wSXNSVUZCZFVNN1FVRkROVU4wUWl4bFFVRlBkVUlzVVVGQlVDeERRVUZuUWl4RFFVRm9RaXhGUVVGclFuWkVMRk5CUVZOM1JDeEpRVUZVTEVOQlFXTm9RaXhaUVVGb1F6dEJRVU5FT3p0QlFVVkVMRlZCUVVrc1MwRkJTemxGTEU5QlFVd3NRMEZCWVRCRUxHTkJRV0lzU1VGQkswSXNTMEZCU3pGRUxFOUJRVXdzUTBGQllXMURMRlZCUVdJc1MwRkJORUlzVTBGQkwwUXNSVUZCTUVVN1FVRkRlRVVzWVVGQlMycERMRkZCUVV3c1EwRkJZekpDTEZGQlFXUXNRMEZCZFVJc01rSkJRWFpDTEVWQlFXOUVhVUlzUjBGQmNFUXNRMEZCZDBRc2NVSkJRWGhFTEVWQlFTdEZMRXRCUVVzNVF5eFBRVUZNTEVOQlFXRXdSQ3hqUVVFMVJqdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MR0ZCUVV0NFJDeFJRVUZNTEVOQlFXTXlRaXhSUVVGa0xFTkJRWFZDTERKQ1FVRjJRaXhGUVVGdlJHbENMRWRCUVhCRUxFTkJRWGRFTEhGQ1FVRjRSQ3hGUVVFclJTeEZRVUV2UlR0QlFVTkVPenRCUVVWRU96czdPMEZCU1VFc1YwRkJTelZETEZGQlFVd3NRMEZCWTIxRExGRkJRV1FzUTBGQmRVSXNVMEZCZGtJc1JVRkJhME5FTEZkQlFXeERMRU5CUVRoRExGZEJRVGxET3p0QlFVVkJMRmRCUVV0NlFpeFRRVUZNTEVOQlFXVm5RaXhKUVVGbUxFTkJRVzlDTEdWQlFYQkNMRVZCUVhGRExFMUJRWEpETzBGQlEwRXNWMEZCUzNwQ0xGRkJRVXdzUTBGQlkzbENMRWxCUVdRc1EwRkJiVUlzWVVGQmJrSXNSVUZCYTBNc1QwRkJiRU1zUlVGRFN5dEVMRTlCUkV3c1EwRkRZU3h4UWtGRVlqczdRVUZIUVN4WFFVRkxOMFVzVVVGQlRDeERRVUZqZDBJc1VVRkJaQ3hEUVVGMVFpeGhRVUZoTEV0QlFVdDZRaXhSUVVGNlF6czdRVUZGUVR0QlFVTkJMRlZCUVVrc1MwRkJTMW9zVDBGQlRDeERRVUZoSzBZc1lVRkJZaXhMUVVFclFpeExRVUZ1UXl4RlFVRXdRenRCUVVONFF5dzRRa0ZCUlN4TlFVRkdMRVZCUVZVeFJDeFJRVUZXTEVOQlFXMUNMRzlDUVVGdVFpeEZRVUY1UTNkQ0xFVkJRWHBETEVOQlFUUkRMRmRCUVRWRExFVkJRWGxFTEV0QlFVdHRReXhqUVVFNVJEdEJRVU5CTEdGQlFVczVSaXhSUVVGTUxFTkJRV015UkN4RlFVRmtMRU5CUVdsQ0xGbEJRV3BDTEVWQlFTdENMRXRCUVV0dlF5eHBRa0ZCY0VNN1FVRkRRU3hoUVVGTEwwWXNVVUZCVEN4RFFVRmpNa1FzUlVGQlpDeERRVUZwUWl4WFFVRnFRaXhGUVVFNFFpeExRVUZMY1VNc2MwSkJRVzVETzBGQlEwUTdPMEZCUlVRc1ZVRkJTU3hMUVVGTGJFY3NUMEZCVEN4RFFVRmhNRU1zWTBGQllpeExRVUZuUXl4SlFVRndReXhGUVVFd1F6dEJRVU40UXl4aFFVRkxUU3hSUVVGTUxFTkJRV05ZTEZGQlFXUXNRMEZCZFVJc1dVRkJka0k3UVVGRFJEczdRVUZGUkN4VlFVRkpMRXRCUVV0eVF5eFBRVUZNTEVOQlFXRnRSU3haUVVGaUxFdEJRVGhDTEVsQlFUbENMRWxCUVhORExFdEJRVXR1UlN4UFFVRk1MRU5CUVdFd1F5eGpRVUZpTEV0QlFXZERMRWxCUVRGRkxFVkJRV2RHTzBGQlF6bEZMR0ZCUVV0TkxGRkJRVXdzUTBGQlkxZ3NVVUZCWkN4RFFVRjFRaXhoUVVGMlFqdEJRVU5FT3p0QlFVVkVMRlZCUVVrc1MwRkJTM0pETEU5QlFVd3NRMEZCWVcxSExGTkJRV0lzUzBGQk1rSXNTVUZCTDBJc1JVRkJjVU03UVVGRGJrTXNZVUZCUzJwSExGRkJRVXdzUTBGQlkzTkZMRWRCUVdRc1EwRkJhMElzYjBOQlFXTXNTMEZCUzNSRkxGRkJRVzVDTEVOQlFXeENMRVZCUVdkRUxGbEJRVmM3UVVGRGVrUXNZMEZCU1N4RFFVRkRiVVVzVFVGQlRXNUZMRkZCUVU0c1EwRkJaWGxHTEZGQlFXWXNRMEZCZDBJc1UwRkJlRUlzUTBGQlRDeEZRVUY1UXp0QlFVTjJReXh0UWtGRWRVTXNRMEZETDBJN1FVRkRWRHRCUVVORUxHTkJRVWxUTEdOQlFXTXZRaXhOUVVGTmJrVXNVVUZCVGl4RFFVRmxjVU1zU1VGQlppeERRVUZ2UWl4clFrRkJjRUlzUTBGQmJFSTdRVUZEUVN4alFVRkpOa1FzV1VGQldYUkZMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzQkNjMFVzZDBKQlFWbERMRVZCUVZvc1EwRkJaU3hEUVVGbUxFVkJRV3RDUXl4TFFVRnNRanRCUVVOSUxGZEJSa1FzVFVGRlR6dEJRVU5JYWtNc2EwSkJRVTF1UlN4UlFVRk9MRU5CUVdWeFF5eEpRVUZtTEVOQlFXOUNMRmRCUVhCQ0xFVkJRV2xET0VRc1JVRkJha01zUTBGQmIwTXNRMEZCY0VNc1JVRkJkVU5ETEV0QlFYWkRPMEZCUTBnN1FVRkRSaXhUUVZaRU8wRkJWMFE3TzBGQlJVUXNWVUZCU1N4TFFVRkxkRWNzVDBGQlRDeERRVUZoZFVjc1UwRkJZaXhMUVVFeVFpeEpRVUV2UWl4RlFVRnhRenRCUVVOdVF5eGhRVUZMTVVZc1VVRkJUQ3hEUVVGall5eEpRVUZrTEVOQlFXMUNMRlZCUVc1Q0xFVkJRU3RDTEVsQlFTOUNPMEZCUTBGSUxHbERRVUZUSzBVc1UwRkJWQ3hEUVVGdFFpeExRVUZMY2tjc1VVRkJlRUk3UVVGRFJEczdRVUZGUkN4WFFVRkxlVVVzYTBKQlFVdzdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPekJDUVUxTk5rSXNSU3hGUVVGSk8wRkJRMUlzVlVGQlNTeERRVUZETEV0QlFVdDBSeXhSUVVGTUxFTkJRV041Uml4UlFVRmtMRU5CUVhWQ0xGTkJRWFpDTEVOQlFVUXNTVUZCYzBNc1MwRkJTM2hETEZWQlFTOURMRVZCUVRKRU8wRkJRVVU3UVVGQlV6czdRVUZGZEVVc1ZVRkJTV3RDTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hYUVVGTGJrVXNVVUZCVEN4RFFVRmphME1zVjBGQlpDeERRVUV3UWl4VFFVRXhRanM3UVVGRlFTeFhRVUZMYkVNc1VVRkJUQ3hEUVVGamVVSXNTVUZCWkN4RFFVRnRRaXhoUVVGdVFpeEZRVUZyUXl4TlFVRnNRenRCUVVORk96czdPMEZCUkVZc1QwRkxTeXRFTEU5QlRFd3NRMEZMWVN4eFFrRk1ZanM3UVVGUFFTeFhRVUZMTjBVc1VVRkJUQ3hEUVVGamRVSXNWMEZCWkN4RFFVRXdRaXgxUkVGQk1VSTdPMEZCUlVFN1FVRkRRU3hWUVVGSkxFdEJRVXR3UXl4UFFVRk1MRU5CUVdFclJpeGhRVUZpTEV0QlFTdENMRXRCUVc1RExFVkJRVEJETzBGQlEzaERMRGhDUVVGRkxFMUJRVVlzUlVGQlZUTkVMRmRCUVZZc1EwRkJjMElzYjBKQlFYUkNMRVZCUVRSRGQwSXNSMEZCTlVNc1EwRkJaMFFzVjBGQmFFUXNSVUZCTmtRc1MwRkJTMjlETEdOQlFXeEZPMEZCUTBFc1lVRkJTemxHTEZGQlFVd3NRMEZCWXpCRUxFZEJRV1FzUTBGQmEwSXNXVUZCYkVJc1JVRkJaME1zUzBGQlMzRkRMR2xDUVVGeVF6dEJRVU5CTEdGQlFVc3ZSaXhSUVVGTUxFTkJRV013UkN4SFFVRmtMRU5CUVd0Q0xGZEJRV3hDTEVWQlFTdENMRXRCUVV0elF5eHpRa0ZCY0VNN1FVRkRSRHM3UVVGRlJDeFZRVUZKTEV0QlFVdHNSeXhQUVVGTUxFTkJRV0V3UXl4alFVRmlMRXRCUVdkRExFbEJRWEJETEVWQlFUQkRPMEZCUTNoRExHRkJRVXROTEZGQlFVd3NRMEZCWTFvc1YwRkJaQ3hEUVVFd1FpeFpRVUV4UWp0QlFVTkVPenRCUVVWRUxGVkJRVWtzUzBGQlMzQkRMRTlCUVV3c1EwRkJZVzFGTEZsQlFXSXNTMEZCT0VJc1NVRkJPVUlzU1VGQmMwTXNTMEZCUzI1RkxFOUJRVXdzUTBGQllUQkRMR05CUVdJc1MwRkJaME1zU1VGQk1VVXNSVUZCWjBZN1FVRkRPVVVzWVVGQlMwMHNVVUZCVEN4RFFVRmpXaXhYUVVGa0xFTkJRVEJDTEdGQlFURkNPMEZCUTBRN08wRkJSVVFzVjBGQlMzcENMRk5CUVV3c1EwRkJaV2RDTEVsQlFXWXNRMEZCYjBJc1pVRkJjRUlzUlVGQmNVTXNUMEZCY2tNN08wRkJSVUVzVlVGQlNTeExRVUZMTTBJc1QwRkJUQ3hEUVVGaGRVY3NVMEZCWWl4TFFVRXlRaXhKUVVFdlFpeEZRVUZ4UXp0QlFVTnVReXhoUVVGTE1VWXNVVUZCVEN4RFFVRmpORVlzVlVGQlpDeERRVUY1UWl4VlFVRjZRanRCUVVOQmFrWXNhVU5CUVZOclJpeFpRVUZVTEVOQlFYTkNMRXRCUVV0NFJ5eFJRVUV6UWp0QlFVTkVPenRCUVVWRU8wRkJRMEVzVjBGQlMwRXNVVUZCVEN4RFFVRmpjMFVzUjBGQlpDeERRVUZyUWl4dlEwRkJZeXhMUVVGTGRFVXNVVUZCYmtJc1EwRkJiRUlzUlVGQlowUXNWVUZCVTNsSExFTkJRVlFzUlVGQldUdEJRVU14UkhSRExHTkJRVTF1UlN4UlFVRk9MRU5CUVdWdFF5eFJRVUZtTEVOQlFYZENMRmRCUVhoQ08wRkJRMEZuUXl4alFVRk5WaXh4UWtGQlRqdEJRVU5FTEU5QlNFUTdRVUZKUkRzN1FVRkZSRHM3T3pzN096czdPekpDUVUxUGFVSXNTeXhGUVVGUFl5eFBMRVZCUVZNN1FVRkRja0lzVlVGQlNTeExRVUZMZUVZc1VVRkJUQ3hEUVVGamVVWXNVVUZCWkN4RFFVRjFRaXhUUVVGMlFpeERRVUZLTEVWQlFYVkRPMEZCUTNKRExHRkJRVXN6UWl4TFFVRk1MRU5CUVZkWkxFdEJRVmdzUlVGQmEwSmpMRTlCUVd4Q08wRkJRMFFzVDBGR1JDeE5RVWRMTzBGQlEwZ3NZVUZCU3pWQ0xFbEJRVXdzUTBGQlZXTXNTMEZCVml4RlFVRnBRbU1zVDBGQmFrSTdRVUZEUkR0QlFVTkdPenRCUVVWRU96czdPenM3T3p0dlEwRkxaMEpwUWl4RExFVkJRVWM3UVVGQlFUczdRVUZEYWtKdVJpd3JRa0ZCVTI5R0xGTkJRVlFzUTBGQmJVSkVMRU5CUVc1Q0xFVkJRWE5DTEZkQlFYUkNMRVZCUVcxRE8wRkJRMnBETTBNc1pVRkJUeXhwUWtGQlRUdEJRVU5ZTEdsQ1FVRkxRU3hMUVVGTU8wRkJRMEVzYVVKQlFVdDBSQ3haUVVGTUxFTkJRV3RDTkVZc1MwRkJiRUk3UVVGRFFTeHBRa0ZCVHl4SlFVRlFPMEZCUTBRc1UwRk1aME03UVVGTmFrTlBMR2xDUVVGVExHMUNRVUZOTzBGQlEySkdMRmxCUVVWdVFpeGxRVUZHTzBGQlEwRnRRaXhaUVVGRmJFSXNZMEZCUmp0QlFVTkVPMEZCVkdkRExFOUJRVzVETzBGQlYwUTdPMEZCUlVRN096czdPenM3SzBKQlNWYzdRVUZEVkN4WFFVRkxla0lzUzBGQlREdEJRVU5CTEZkQlFVczVSQ3hSUVVGTUxFTkJRV013UkN4SFFVRmtMRU5CUVd0Q0xESkNRVUZzUWp0QlFVTkJMRmRCUVV0YUxGRkJRVXdzUTBGQlkxa3NSMEZCWkN4RFFVRnJRaXhsUVVGc1FqdEJRVU5FT3pzN08wVkJjR0Z4UW10RUxHdENPenRCUVhWaGVFSm9TQ3hWUVVGVlR5eFJRVUZXTEVkQlFYRkNPMEZCUTI1Q096czdPenM3UVVGTlFUaEVMR2RDUVVGakxFbEJVRXM3TzBGQlUyNUNPenM3T3pzN1FVRk5RWHBDTEd0Q1FVRm5RaXhKUVdaSE96dEJRV2xDYmtJN096czdPenRCUVUxQlpDeGhRVUZYTEVsQmRrSlJPenRCUVhsQ2JrSTdPenM3T3p0QlFVMUJaQ3hWUVVGUkxFbEJMMEpYT3p0QlFXbERia0k3T3pzN096dEJRVTFCYVVZc2FVSkJRV1VzU1VGMlEwazdPMEZCZVVOdVFqczdPenM3TzBGQlRVRnlReXhyUWtGQlowSXNTVUV2UTBjN08wRkJhVVJ1UWpzN096czdPMEZCVFVGMlFpeGpRVUZaTEUxQmRrUlBPenRCUVhsRWJrSTdPenM3T3p0QlFVMUJlVVFzVjBGQlV5eEpRUzlFVlRzN1FVRnBSVzVDT3pzN096czdRVUZOUVhwRExHTkJRVmtzUzBGMlJVODdPMEZCZVVWdVFqczdPenM3TzBGQlRVRkpMRmxCUVZVc1NVRXZSVk03TzBGQmFVWnVRanM3T3pzN08wRkJUVUUwUXl4aFFVRlhMRWxCZGtaUk96dEJRWGxHYmtJN096czdPenM3UVVGUFFUbERMR1ZCUVdFc1lVRm9SMDA3TzBGQmEwZHVRanM3T3pzN08wRkJUVUZyUkN4aFFVRlhPMEZCZUVkUkxFTkJRWEpDT3p0UlFUSkhVWHBITEZNc1IwRkJRVUVzVXlJc0ltWnBiR1VpT2lKbWIzVnVaR0YwYVc5dUxtOW1abU5oYm5aaGN5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVcxd2IzSjBJQ1FnWm5KdmJTQW5hbkYxWlhKNUp6dGNibWx0Y0c5eWRDQjdJRXRsZVdKdllYSmtJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5WMGFXd3VhMlY1WW05aGNtUW5PMXh1YVcxd2IzSjBJSHNnVFdWa2FXRlJkV1Z5ZVNCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG0xbFpHbGhVWFZsY25rbk8xeHVhVzF3YjNKMElIc2dkSEpoYm5OcGRHbHZibVZ1WkNCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG1OdmNtVW5PMXh1YVcxd2IzSjBJSHNnVUd4MVoybHVJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWM3WEc1Y2JtbHRjRzl5ZENCN0lGUnlhV2RuWlhKeklIMGdabkp2YlNBbkxpOW1iM1Z1WkdGMGFXOXVMblYwYVd3dWRISnBaMmRsY25Nbk8xeHVYRzR2S2lwY2JpQXFJRTltWmtOaGJuWmhjeUJ0YjJSMWJHVXVYRzRnS2lCQWJXOWtkV3hsSUdadmRXNWtZWFJwYjI0dWIyWm1ZMkZ1ZG1GelhHNGdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMbXRsZVdKdllYSmtYRzRnS2lCQWNtVnhkV2x5WlhNZ1ptOTFibVJoZEdsdmJpNTFkR2xzTG0xbFpHbGhVWFZsY25sY2JpQXFJRUJ5WlhGMWFYSmxjeUJtYjNWdVpHRjBhVzl1TG5WMGFXd3VkSEpwWjJkbGNuTmNiaUFxTDF4dVhHNWpiR0Z6Y3lCUFptWkRZVzUyWVhNZ1pYaDBaVzVrY3lCUWJIVm5hVzRnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQmhiaUJ2Wm1ZdFkyRnVkbUZ6SUhkeVlYQndaWEl1WEc0Z0lDQXFJRUJqYkdGemMxeHVJQ0FnS2lCQWJtRnRaU0JQWm1aRFlXNTJZWE5jYmlBZ0lDb2dRR1pwY21WeklFOW1aa05oYm5aaGN5TnBibWwwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmxiR1Z0Wlc1MElDMGdhbEYxWlhKNUlHOWlhbVZqZENCMGJ5QnBibWwwYVdGc2FYcGxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElFOTJaWEp5YVdSbGN5QjBieUIwYUdVZ1pHVm1ZWFZzZENCd2JIVm5hVzRnYzJWMGRHbHVaM011WEc0Z0lDQXFMMXh1SUNCZmMyVjBkWEFvWld4bGJXVnVkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJSFJvYVhNdVkyeGhjM05PWVcxbElEMGdKMDltWmtOaGJuWmhjeWM3SUM4dklHbGxPU0JpWVdOcklHTnZiWEJoZEZ4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJQ1F1WlhoMFpXNWtLSHQ5TENCUFptWkRZVzUyWVhNdVpHVm1ZWFZzZEhNc0lIUm9hWE11SkdWc1pXMWxiblF1WkdGMFlTZ3BMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjBhR2x6TG1OdmJuUmxiblJEYkdGemMyVnpJRDBnZXlCaVlYTmxPaUJiWFN3Z2NtVjJaV0ZzT2lCYlhTQjlPMXh1SUNBZ0lIUm9hWE11Skd4aGMzUlVjbWxuWjJWeUlEMGdKQ2dwTzF4dUlDQWdJSFJvYVhNdUpIUnlhV2RuWlhKeklEMGdKQ2dwTzF4dUlDQWdJSFJvYVhNdWNHOXphWFJwYjI0Z1BTQW5iR1ZtZENjN1hHNGdJQ0FnZEdocGN5NGtZMjl1ZEdWdWRDQTlJQ1FvS1R0Y2JpQWdJQ0IwYUdsekxtNWxjM1JsWkNBOUlDRWhLSFJvYVhNdWIzQjBhVzl1Y3k1dVpYTjBaV1FwTzF4dVhHNGdJQ0FnTHk4Z1JHVm1hVzVsY3lCMGFHVWdRMU5USUhSeVlXNXphWFJwYjI0dmNHOXphWFJwYjI0Z1kyeGhjM05sY3lCdlppQjBhR1VnYjJabUxXTmhiblpoY3lCamIyNTBaVzUwSUdOdmJuUmhhVzVsY2k1Y2JpQWdJQ0FrS0ZzbmNIVnphQ2NzSUNkdmRtVnliR0Z3SjEwcExtVmhZMmdvS0dsdVpHVjRMQ0IyWVd3cElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdVkyOXVkR1Z1ZEVOc1lYTnpaWE11WW1GelpTNXdkWE5vS0Nkb1lYTXRkSEpoYm5OcGRHbHZiaTBuSzNaaGJDazdYRzRnSUNBZ2ZTazdYRzRnSUNBZ0pDaGJKMnhsWm5RbkxDQW5jbWxuYUhRbkxDQW5kRzl3Snl3Z0oySnZkSFJ2YlNkZEtTNWxZV05vS0NocGJtUmxlQ3dnZG1Gc0tTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxtTnZiblJsYm5SRGJHRnpjMlZ6TG1KaGMyVXVjSFZ6YUNnbmFHRnpMWEJ2YzJsMGFXOXVMU2NyZG1Gc0tUdGNiaUFnSUNBZ0lIUm9hWE11WTI5dWRHVnVkRU5zWVhOelpYTXVjbVYyWldGc0xuQjFjMmdvSjJoaGN5MXlaWFpsWVd3dEp5dDJZV3dwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnTHk4Z1ZISnBaMmRsY25NZ2FXNXBkQ0JwY3lCcFpHVnRjRzkwWlc1MExDQnFkWE4wSUc1bFpXUWdkRzhnYldGclpTQnpkWEpsSUdsMElHbHpJR2x1YVhScFlXeHBlbVZrWEc0Z0lDQWdWSEpwWjJkbGNuTXVhVzVwZENna0tUdGNiaUFnSUNCTlpXUnBZVkYxWlhKNUxsOXBibWwwS0NrN1hHNWNiaUFnSUNCMGFHbHpMbDlwYm1sMEtDazdYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpLQ2s3WEc1Y2JpQWdJQ0JMWlhsaWIyRnlaQzV5WldkcGMzUmxjaWduVDJabVEyRnVkbUZ6Snl3Z2UxeHVJQ0FnSUNBZ0owVlRRMEZRUlNjNklDZGpiRzl6WlNkY2JpQWdJQ0I5S1R0Y2JseHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YVhScFlXeHBlbVZ6SUhSb1pTQnZabVl0WTJGdWRtRnpJSGR5WVhCd1pYSWdZbmtnWVdSa2FXNW5JSFJvWlNCbGVHbDBJRzkyWlhKc1lYa2dLR2xtSUc1bFpXUmxaQ2t1WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMmx1YVhRb0tTQjdYRzRnSUNBZ2RtRnlJR2xrSUQwZ2RHaHBjeTRrWld4bGJXVnVkQzVoZEhSeUtDZHBaQ2NwTzF4dVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWhkSFJ5S0NkaGNtbGhMV2hwWkdSbGJpY3NJQ2QwY25WbEp5azdYRzVjYmlBZ0lDQXZMeUJHYVc1a0lHOW1aaTFqWVc1MllYTWdZMjl1ZEdWdWRDd2daV2wwYUdWeUlHSjVJRWxFSUNocFppQnpjR1ZqYVdacFpXUXBMQ0JpZVNCemFXSnNhVzVuY3lCdmNpQmllU0JqYkc5elpYTjBJSE5sYkdWamRHOXlJQ2htWVd4c1ltRmpheWxjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtTnZiblJsYm5SSlpDa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a1kyOXVkR1Z1ZENBOUlDUW9KeU1uSzNSb2FYTXViM0IwYVc5dWN5NWpiMjUwWlc1MFNXUXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k0a1pXeGxiV1Z1ZEM1emFXSnNhVzVuY3lnblcyUmhkR0V0YjJabUxXTmhiblpoY3kxamIyNTBaVzUwWFNjcExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrWTI5dWRHVnVkQ0E5SUhSb2FYTXVKR1ZzWlcxbGJuUXVjMmxpYkdsdVozTW9KMXRrWVhSaExXOW1aaTFqWVc1MllYTXRZMjl1ZEdWdWRGMG5LUzVtYVhKemRDZ3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMaVJqYjI1MFpXNTBJRDBnZEdocGN5NGtaV3hsYldWdWRDNWpiRzl6WlhOMEtDZGJaR0YwWVMxdlptWXRZMkZ1ZG1GekxXTnZiblJsYm5SZEp5a3VabWx5YzNRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9JWFJvYVhNdWIzQjBhVzl1Y3k1amIyNTBaVzUwU1dRcElIdGNiaUFnSUNBZ0lDOHZJRUZ6YzNWdFpTQjBhR0YwSUhSb1pTQnZabVl0WTJGdWRtRnpJR1ZzWlcxbGJuUWdhWE1nYm1WemRHVmtJR2xtSUdsMElHbHpiaWQwSUdFZ2MybGliR2x1WnlCdlppQjBhR1VnWTI5dWRHVnVkRnh1SUNBZ0lDQWdkR2hwY3k1dVpYTjBaV1FnUFNCMGFHbHpMaVJsYkdWdFpXNTBMbk5wWW14cGJtZHpLQ2RiWkdGMFlTMXZabVl0WTJGdWRtRnpMV052Ym5SbGJuUmRKeWt1YkdWdVozUm9JRDA5UFNBd08xeHVYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WTI5dWRHVnVkRWxrSUNZbUlIUm9hWE11YjNCMGFXOXVjeTV1WlhOMFpXUWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQzh2SUZkaGNtNXBibWNnYVdZZ2RYTnBibWNnWTI5dWRHVnVkQ0JKUkNCM2FYUm9iM1YwSUhObGRIUnBibWNnZEdobElHNWxjM1JsWkNCdmNIUnBiMjVjYmlBZ0lDQWdJQzh2SUU5dVkyVWdkR2hsSUdWc1pXMWxiblFnYVhNZ2JtVnpkR1ZrSUdsMElHbHpJSEpsY1hWcGNtVmtJSFJ2SUhkdmNtc2djSEp2Y0dWeWJIa2dhVzRnZEdocGN5QmpZWE5sWEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0oxSmxiV1Z0WW1WeUlIUnZJSFZ6WlNCMGFHVWdibVZ6ZEdWa0lHOXdkR2x2YmlCcFppQjFjMmx1WnlCMGFHVWdZMjl1ZEdWdWRDQkpSQ0J2Y0hScGIyNGhKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVibVZ6ZEdWa0lEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQXZMeUJHYjNKalpTQjBjbUZ1YzJsMGFXOXVJRzkyWlhKc1lYQWdhV1lnYm1WemRHVmtYRzRnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk11ZEhKaGJuTnBkR2x2YmlBOUlDZHZkbVZ5YkdGd0p6dGNiaUFnSUNBZ0lDOHZJRkpsYlc5MlpTQmhjSEJ5YjNCeWFXRjBaU0JqYkdGemMyVnpJR2xtSUdGc2NtVmhaSGtnWVhOemFXZHVaV1FnYVc0Z2JXRnlhM1Z3WEc0Z0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExuSmxiVzkyWlVOc1lYTnpLQ2RwY3kxMGNtRnVjMmwwYVc5dUxYQjFjMmduS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtRmtaRU5zWVhOektHQnBjeTEwY21GdWMybDBhVzl1TFNSN2RHaHBjeTV2Y0hScGIyNXpMblJ5WVc1emFYUnBiMjU5SUdsekxXTnNiM05sWkdBcE8xeHVYRzRnSUNBZ0x5OGdSbWx1WkNCMGNtbG5aMlZ5Y3lCMGFHRjBJR0ZtWm1WamRDQjBhR2x6SUdWc1pXMWxiblFnWVc1a0lHRmtaQ0JoY21saExXVjRjR0Z1WkdWa0lIUnZJSFJvWlcxY2JpQWdJQ0IwYUdsekxpUjBjbWxuWjJWeWN5QTlJQ1FvWkc5amRXMWxiblFwWEc0Z0lDQWdJQ0F1Wm1sdVpDZ25XMlJoZEdFdGIzQmxiajFjSWljcmFXUXJKMXdpWFN3Z1cyUmhkR0V0WTJ4dmMyVTlYQ0luSzJsa0t5ZGNJbDBzSUZ0a1lYUmhMWFJ2WjJkc1pUMWNJaWNyYVdRckoxd2lYU2NwWEc0Z0lDQWdJQ0F1WVhSMGNpZ25ZWEpwWVMxbGVIQmhibVJsWkNjc0lDZG1ZV3h6WlNjcFhHNGdJQ0FnSUNBdVlYUjBjaWduWVhKcFlTMWpiMjUwY205c2N5Y3NJR2xrS1R0Y2JseHVJQ0FnSUM4dklFZGxkQ0J3YjNOcGRHbHZiaUJpZVNCamFHVmphMmx1WnlCbWIzSWdjbVZzWVhSbFpDQkRVMU1nWTJ4aGMzTmNiaUFnSUNCMGFHbHpMbkJ2YzJsMGFXOXVJRDBnZEdocGN5NGtaV3hsYldWdWRDNXBjeWduTG5CdmMybDBhVzl1TFd4bFpuUXNJQzV3YjNOcGRHbHZiaTEwYjNBc0lDNXdiM05wZEdsdmJpMXlhV2RvZEN3Z0xuQnZjMmwwYVc5dUxXSnZkSFJ2YlNjcElEOGdkR2hwY3k0a1pXeGxiV1Z1ZEM1aGRIUnlLQ2RqYkdGemN5Y3BMbTFoZEdOb0tDOXdiM05wZEdsdmJseGNMU2hzWldaMGZIUnZjSHh5YVdkb2RIeGliM1IwYjIwcEx5bGJNVjBnT2lCMGFHbHpMbkJ2YzJsMGFXOXVPMXh1WEc0Z0lDQWdMeThnUVdSa0lHRnVJRzkyWlhKc1lYa2diM1psY2lCMGFHVWdZMjl1ZEdWdWRDQnBaaUJ1WldObGMzTmhjbmxjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtTnZiblJsYm5SUGRtVnliR0Y1SUQwOVBTQjBjblZsS1NCN1hHNGdJQ0FnSUNCMllYSWdiM1psY214aGVTQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dUlDQWdJQ0FnZG1GeUlHOTJaWEpzWVhsUWIzTnBkR2x2YmlBOUlDUW9kR2hwY3k0a1pXeGxiV1Z1ZENrdVkzTnpLRndpY0c5emFYUnBiMjVjSWlrZ1BUMDlJQ2RtYVhobFpDY2dQeUFuYVhNdGIzWmxjbXhoZVMxbWFYaGxaQ2NnT2lBbmFYTXRiM1psY214aGVTMWhZbk52YkhWMFpTYzdYRzRnSUNBZ0lDQnZkbVZ5YkdGNUxuTmxkRUYwZEhKcFluVjBaU2duWTJ4aGMzTW5MQ0FuYW5NdGIyWm1MV05oYm5aaGN5MXZkbVZ5YkdGNUlDY2dLeUJ2ZG1WeWJHRjVVRzl6YVhScGIyNHBPMXh1SUNBZ0lDQWdkR2hwY3k0a2IzWmxjbXhoZVNBOUlDUW9iM1psY214aGVTazdYRzRnSUNBZ0lDQnBaaWh2ZG1WeWJHRjVVRzl6YVhScGIyNGdQVDA5SUNkcGN5MXZkbVZ5YkdGNUxXWnBlR1ZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWtLSFJvYVhNdUpHOTJaWEpzWVhrcExtbHVjMlZ5ZEVGbWRHVnlLSFJvYVhNdUpHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTRrWTI5dWRHVnVkQzVoY0hCbGJtUW9kR2hwY3k0a2IzWmxjbXhoZVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXZjSFJwYjI1ekxtbHpVbVYyWldGc1pXUWdQU0IwYUdsekxtOXdkR2x2Ym5NdWFYTlNaWFpsWVd4bFpDQjhmQ0J1WlhjZ1VtVm5SWGh3S0hSb2FYTXViM0IwYVc5dWN5NXlaWFpsWVd4RGJHRnpjeXdnSjJjbktTNTBaWE4wS0hSb2FYTXVKR1ZzWlcxbGJuUmJNRjB1WTJ4aGMzTk9ZVzFsS1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11YVhOU1pYWmxZV3hsWkNBOVBUMGdkSEoxWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbkpsZG1WaGJFOXVJRDBnZEdocGN5NXZjSFJwYjI1ekxuSmxkbVZoYkU5dUlIeDhJSFJvYVhNdUpHVnNaVzFsYm5SYk1GMHVZMnhoYzNOT1lXMWxMbTFoZEdOb0tDOG9jbVYyWldGc0xXWnZjaTF0WldScGRXMThjbVYyWldGc0xXWnZjaTFzWVhKblpTa3ZaeWxiTUYwdWMzQnNhWFFvSnkwbktWc3lYVHRjYmlBZ0lDQWdJSFJvYVhNdVgzTmxkRTFSUTJobFkydGxjaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVkSEpoYm5OcGRHbHZibFJwYldVcElIdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WTNOektDZDBjbUZ1YzJsMGFXOXVMV1IxY21GMGFXOXVKeXdnZEdocGN5NXZjSFJwYjI1ekxuUnlZVzV6YVhScGIyNVVhVzFsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCSmJtbDBZV3hzZVNCeVpXMXZkbVVnWVd4c0lIUnlZVzV6YVhScGIyNHZjRzl6YVhScGIyNGdRMU5USUdOc1lYTnpaWE1nWm5KdmJTQnZabVl0WTJGdWRtRnpJR052Ym5SbGJuUWdZMjl1ZEdGcGJtVnlMbHh1SUNBZ0lIUm9hWE11WDNKbGJXOTJaVU52Ym5SbGJuUkRiR0Z6YzJWektDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVdSa2N5QmxkbVZ1ZENCb1lXNWtiR1Z5Y3lCMGJ5QjBhR1VnYjJabUxXTmhiblpoY3lCM2NtRndjR1Z5SUdGdVpDQjBhR1VnWlhocGRDQnZkbVZ5YkdGNUxseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5bGRtVnVkSE1vS1NCN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXZabVlvSnk1NlppNTBjbWxuWjJWeUlDNTZaaTV2Wm1aallXNTJZWE1uS1M1dmJpaDdYRzRnSUNBZ0lDQW5iM0JsYmk1NlppNTBjbWxuWjJWeUp6b2dkR2hwY3k1dmNHVnVMbUpwYm1Rb2RHaHBjeWtzWEc0Z0lDQWdJQ0FuWTJ4dmMyVXVlbVl1ZEhKcFoyZGxjaWM2SUhSb2FYTXVZMnh2YzJVdVltbHVaQ2gwYUdsektTeGNiaUFnSUNBZ0lDZDBiMmRuYkdVdWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdWRHOW5aMnhsTG1KcGJtUW9kR2hwY3lrc1hHNGdJQ0FnSUNBbmEyVjVaRzkzYmk1NlppNXZabVpqWVc1MllYTW5PaUIwYUdsekxsOW9ZVzVrYkdWTFpYbGliMkZ5WkM1aWFXNWtLSFJvYVhNcFhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1Oc2IzTmxUMjVEYkdsamF5QTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdkbUZ5SUNSMFlYSm5aWFFnUFNCMGFHbHpMbTl3ZEdsdmJuTXVZMjl1ZEdWdWRFOTJaWEpzWVhrZ1B5QjBhR2x6TGlSdmRtVnliR0Y1SURvZ2RHaHBjeTRrWTI5dWRHVnVkRHRjYmlBZ0lDQWdJQ1IwWVhKblpYUXViMjRvZXlkamJHbGpheTU2Wmk1dlptWmpZVzUyWVhNbk9pQjBhR2x6TG1Oc2IzTmxMbUpwYm1Rb2RHaHBjeWw5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FYQndiR2xsY3lCbGRtVnVkQ0JzYVhOMFpXNWxjaUJtYjNJZ1pXeGxiV1Z1ZEhNZ2RHaGhkQ0IzYVd4c0lISmxkbVZoYkNCaGRDQmpaWEowWVdsdUlHSnlaV0ZyY0c5cGJuUnpMbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYM05sZEUxUlEyaGxZMnRsY2lncElIdGNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSkNoM2FXNWtiM2NwTG05dUtDZGphR0Z1WjJWa0xucG1MbTFsWkdsaGNYVmxjbmtuTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lHbG1JQ2hOWldScFlWRjFaWEo1TG1GMFRHVmhjM1FvWDNSb2FYTXViM0IwYVc5dWN5NXlaWFpsWVd4UGJpa3BJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVjbVYyWldGc0tIUnlkV1VwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVjbVYyWldGc0tHWmhiSE5sS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1M1dmJtVW9KMnh2WVdRdWVtWXViMlptWTJGdWRtRnpKeXdnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCcFppQW9UV1ZrYVdGUmRXVnllUzVoZEV4bFlYTjBLRjkwYUdsekxtOXdkR2x2Ym5NdWNtVjJaV0ZzVDI0cEtTQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxuSmxkbVZoYkNoMGNuVmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXMXZkbVZ6SUhSb1pTQkRVMU1nZEhKaGJuTnBkR2x2Ymk5d2IzTnBkR2x2YmlCamJHRnpjMlZ6SUc5bUlIUm9aU0J2Wm1ZdFkyRnVkbUZ6SUdOdmJuUmxiblFnWTI5dWRHRnBibVZ5TGx4dUlDQWdLaUJTWlcxdmRtbHVaeUIwYUdVZ1kyeGhjM05sY3lCcGN5QnBiWEJ2Y25SaGJuUWdkMmhsYmlCaGJtOTBhR1Z5SUc5bVppMWpZVzUyWVhNZ1oyVjBjeUJ2Y0dWdVpXUWdkR2hoZENCMWMyVnpJSFJvWlNCellXMWxJR052Ym5SbGJuUWdZMjl1ZEdGcGJtVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlHaGhjMUpsZG1WaGJDQXRJSFJ5ZFdVZ2FXWWdjbVZzWVhSbFpDQnZabVl0WTJGdWRtRnpJR1ZzWlcxbGJuUWdhWE1nY21WMlpXRnNaV1F1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmY21WdGIzWmxRMjl1ZEdWdWRFTnNZWE56WlhNb2FHRnpVbVYyWldGc0tTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQm9ZWE5TWlhabFlXd2dJVDA5SUNkaWIyOXNaV0Z1SnlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrWTI5dWRHVnVkQzV5WlcxdmRtVkRiR0Z6Y3loMGFHbHpMbU52Ym5SbGJuUkRiR0Z6YzJWekxtSmhjMlV1YW05cGJpZ25JQ2NwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0doaGMxSmxkbVZoYkNBOVBUMGdabUZzYzJVcElIdGNiaUFnSUNBZ0lIUm9hWE11SkdOdmJuUmxiblF1Y21WdGIzWmxRMnhoYzNNb1lHaGhjeTF5WlhabFlXd3RKSHQwYUdsekxuQnZjMmwwYVc5dWZXQXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCWkdSeklIUm9aU0JEVTFNZ2RISmhibk5wZEdsdmJpOXdiM05wZEdsdmJpQmpiR0Z6YzJWeklHOW1JSFJvWlNCdlptWXRZMkZ1ZG1GeklHTnZiblJsYm5RZ1kyOXVkR0ZwYm1WeUxDQmlZWE5sWkNCdmJpQjBhR1VnYjNCbGJtbHVaeUJ2Wm1ZdFkyRnVkbUZ6SUdWc1pXMWxiblF1WEc0Z0lDQXFJRUpsWm05eVpXaGhibVFnWVc1NUlIUnlZVzV6YVhScGIyNHZjRzl6YVhScGIyNGdZMnhoYzNNZ1oyVjBjeUJ5WlcxdmRtVmtMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlHaGhjMUpsZG1WaGJDQXRJSFJ5ZFdVZ2FXWWdjbVZzWVhSbFpDQnZabVl0WTJGdWRtRnpJR1ZzWlcxbGJuUWdhWE1nY21WMlpXRnNaV1F1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmWVdSa1EyOXVkR1Z1ZEVOc1lYTnpaWE1vYUdGelVtVjJaV0ZzS1NCN1hHNGdJQ0FnZEdocGN5NWZjbVZ0YjNabFEyOXVkR1Z1ZEVOc1lYTnpaWE1vYUdGelVtVjJaV0ZzS1R0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdoaGMxSmxkbVZoYkNBaFBUMGdKMkp2YjJ4bFlXNG5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmpiMjUwWlc1MExtRmtaRU5zWVhOektHQm9ZWE10ZEhKaGJuTnBkR2x2Ymkwa2UzUm9hWE11YjNCMGFXOXVjeTUwY21GdWMybDBhVzl1ZlNCb1lYTXRjRzl6YVhScGIyNHRKSHQwYUdsekxuQnZjMmwwYVc5dWZXQXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hR0Z6VW1WMlpXRnNJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmpiMjUwWlc1MExtRmtaRU5zWVhOektHQm9ZWE10Y21WMlpXRnNMU1I3ZEdocGN5NXdiM05wZEdsdmJuMWdLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU0dGdVpHeGxjeUIwYUdVZ2NtVjJaV0ZzYVc1bkwyaHBaR2x1WnlCMGFHVWdiMlptTFdOaGJuWmhjeUJoZENCaWNtVmhhM0J2YVc1MGN5d2dibTkwSUhSb1pTQnpZVzFsSUdGeklHOXdaVzR1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRbTl2YkdWaGJuMGdhWE5TWlhabFlXeGxaQ0F0SUhSeWRXVWdhV1lnWld4bGJXVnVkQ0J6YUc5MWJHUWdZbVVnY21WMlpXRnNaV1F1WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpOWNiaUFnY21WMlpXRnNLR2x6VW1WMlpXRnNaV1FwSUh0Y2JpQWdJQ0JwWmlBb2FYTlNaWFpsWVd4bFpDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1amJHOXpaU2dwTzF4dUlDQWdJQ0FnZEdocGN5NXBjMUpsZG1WaGJHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpZ25ZWEpwWVMxb2FXUmtaVzRuTENBblptRnNjMlVuS1R0Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXViMlptS0NkdmNHVnVMbnBtTG5SeWFXZG5aWElnZEc5bloyeGxMbnBtTG5SeWFXZG5aWEluS1R0Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVjbVZ0YjNabFEyeGhjM01vSjJsekxXTnNiM05sWkNjcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxtbHpVbVYyWldGc1pXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpZ25ZWEpwWVMxb2FXUmtaVzRuTENBbmRISjFaU2NwTzF4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXZabVlvSjI5d1pXNHVlbVl1ZEhKcFoyZGxjaUIwYjJkbmJHVXVlbVl1ZEhKcFoyZGxjaWNwTG05dUtIdGNiaUFnSUNBZ0lDQWdKMjl3Wlc0dWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdWIzQmxiaTVpYVc1a0tIUm9hWE1wTEZ4dUlDQWdJQ0FnSUNBbmRHOW5aMnhsTG5wbUxuUnlhV2RuWlhJbk9pQjBhR2x6TG5SdloyZHNaUzVpYVc1a0tIUm9hWE1wWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVZV1JrUTJ4aGMzTW9KMmx6TFdOc2IzTmxaQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TGw5aFpHUkRiMjUwWlc1MFEyeGhjM05sY3locGMxSmxkbVZoYkdWa0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUZEc5d2N5QnpZM0p2Ykd4cGJtY2diMllnZEdobElHSnZaSGtnZDJobGJpQnZabVpqWVc1MllYTWdhWE1nYjNCbGJpQnZiaUJ0YjJKcGJHVWdVMkZtWVhKcElHRnVaQ0J2ZEdobGNpQjBjbTkxWW14bGMyOXRaU0JpY205M2MyVnljeTVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjl6ZEc5d1UyTnliMnhzYVc1bktHVjJaVzUwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdMeThnVkdGclpXNGdZVzVrSUdGa1lYQjBaV1FnWm5KdmJTQm9kSFJ3T2k4dmMzUmhZMnR2ZG1WeVpteHZkeTVqYjIwdmNYVmxjM1JwYjI1ekx6RTJPRGc1TkRRM0wzQnlaWFpsYm5RdFpuVnNiQzF3WVdkbExYTmpjbTlzYkdsdVp5MXBiM05jYmlBZ0x5OGdUMjVzZVNCeVpXRnNiSGtnZDI5eWEzTWdabTl5SUhrc0lHNXZkQ0J6ZFhKbElHaHZkeUIwYnlCbGVIUmxibVFnZEc4Z2VDQnZjaUJwWmlCM1pTQnVaV1ZrSUhSdkxseHVJQ0JmY21WamIzSmtVMk55YjJ4c1lXSnNaU2hsZG1WdWRDa2dlMXh1SUNBZ0lHeGxkQ0JsYkdWdElEMGdkR2hwY3pzZ0x5OGdZMkZzYkdWa0lHWnliMjBnWlhabGJuUWdhR0Z1Wkd4bGNpQmpiMjUwWlhoMElIZHBkR2dnZEdocGN5QmhjeUJsYkdWdFhHNWNiaUFnSUNBZ0x5OGdTV1lnZEdobElHVnNaVzFsYm5RZ2FYTWdjMk55YjJ4c1lXSnNaU0FvWTI5dWRHVnVkQ0J2ZG1WeVpteHZkM01wTENCMGFHVnVMaTR1WEc0Z0lDQWdhV1lnS0dWc1pXMHVjMk55YjJ4c1NHVnBaMmgwSUNFOVBTQmxiR1Z0TG1Oc2FXVnVkRWhsYVdkb2RDa2dlMXh1SUNBZ0lDQWdMeThnU1dZZ2QyVW5jbVVnWVhRZ2RHaGxJSFJ2Y0N3Z2MyTnliMnhzSUdSdmQyNGdiMjVsSUhCcGVHVnNJSFJ2SUdGc2JHOTNJSE5qY205c2JHbHVaeUIxY0Z4dUlDQWdJQ0FnYVdZZ0tHVnNaVzB1YzJOeWIyeHNWRzl3SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdWc1pXMHVjMk55YjJ4c1ZHOXdJRDBnTVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklFbG1JSGRsSjNKbElHRjBJSFJvWlNCaWIzUjBiMjBzSUhOamNtOXNiQ0IxY0NCdmJtVWdjR2w0Wld3Z2RHOGdZV3hzYjNjZ2MyTnliMnhzYVc1bklHUnZkMjVjYmlBZ0lDQWdJR2xtSUNobGJHVnRMbk5qY205c2JGUnZjQ0E5UFQwZ1pXeGxiUzV6WTNKdmJHeElaV2xuYUhRZ0xTQmxiR1Z0TG1Oc2FXVnVkRWhsYVdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0JsYkdWdExuTmpjbTlzYkZSdmNDQTlJR1ZzWlcwdWMyTnliMnhzU0dWcFoyaDBJQzBnWld4bGJTNWpiR2xsYm5SSVpXbG5hSFFnTFNBeE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JsYkdWdExtRnNiRzkzVlhBZ1BTQmxiR1Z0TG5OamNtOXNiRlJ2Y0NBK0lEQTdYRzRnSUNBZ1pXeGxiUzVoYkd4dmQwUnZkMjRnUFNCbGJHVnRMbk5qY205c2JGUnZjQ0E4SUNobGJHVnRMbk5qY205c2JFaGxhV2RvZENBdElHVnNaVzB1WTJ4cFpXNTBTR1ZwWjJoMEtUdGNiaUFnSUNCbGJHVnRMbXhoYzNSWklEMGdaWFpsYm5RdWIzSnBaMmx1WVd4RmRtVnVkQzV3WVdkbFdUdGNiaUFnZlZ4dVhHNGdJRjl6ZEc5d1UyTnliMnhzVUhKdmNHRm5ZWFJwYjI0b1pYWmxiblFwSUh0Y2JpQWdJQ0JzWlhRZ1pXeGxiU0E5SUhSb2FYTTdJQzh2SUdOaGJHeGxaQ0JtY205dElHVjJaVzUwSUdoaGJtUnNaWElnWTI5dWRHVjRkQ0IzYVhSb0lIUm9hWE1nWVhNZ1pXeGxiVnh1SUNBZ0lHeGxkQ0IxY0NBOUlHVjJaVzUwTG5CaFoyVlpJRHdnWld4bGJTNXNZWE4wV1R0Y2JpQWdJQ0JzWlhRZ1pHOTNiaUE5SUNGMWNEdGNiaUFnSUNCbGJHVnRMbXhoYzNSWklEMGdaWFpsYm5RdWNHRm5aVms3WEc1Y2JpQWdJQ0JwWmlnb2RYQWdKaVlnWld4bGJTNWhiR3h2ZDFWd0tTQjhmQ0FvWkc5M2JpQW1KaUJsYkdWdExtRnNiRzkzUkc5M2Jpa3BJSHRjYmlBZ0lDQWdJR1YyWlc1MExuTjBiM0JRY205d1lXZGhkR2x2YmlncE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlBjR1Z1Y3lCMGFHVWdiMlptTFdOaGJuWmhjeUJ0Wlc1MUxseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1YyWlc1MElDMGdSWFpsYm5RZ2IySnFaV04wSUhCaGMzTmxaQ0JtY205dElHeHBjM1JsYm1WeUxseHVJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnZEhKcFoyZGxjaUF0SUdWc1pXMWxiblFnZEdoaGRDQjBjbWxuWjJWeVpXUWdkR2hsSUc5bVppMWpZVzUyWVhNZ2RHOGdiM0JsYmk1Y2JpQWdJQ29nUUdacGNtVnpJRTltWmtOaGJuWmhjeU52Y0dWdVpXUmNiaUFnSUNvdlhHNGdJRzl3Wlc0b1pYWmxiblFzSUhSeWFXZG5aWElwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTRrWld4bGJXVnVkQzVvWVhORGJHRnpjeWduYVhNdGIzQmxiaWNwSUh4OElIUm9hWE11YVhOU1pYWmxZV3hsWkNrZ2V5QnlaWFIxY200N0lIMWNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYVdZZ0tIUnlhV2RuWlhJcElIdGNiaUFnSUNBZ0lIUm9hWE11Skd4aGMzUlVjbWxuWjJWeUlEMGdkSEpwWjJkbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1admNtTmxWRzhnUFQwOUlDZDBiM0FuS1NCN1hHNGdJQ0FnSUNCM2FXNWtiM2N1YzJOeWIyeHNWRzhvTUN3Z01DazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG05d2RHbHZibk11Wm05eVkyVlVieUE5UFQwZ0oySnZkSFJ2YlNjcElIdGNiaUFnSUNBZ0lIZHBibVJ2ZHk1elkzSnZiR3hVYnlnd0xHUnZZM1Z0Wlc1MExtSnZaSGt1YzJOeWIyeHNTR1ZwWjJoMEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG5SeVlXNXphWFJwYjI1VWFXMWxJQ1ltSUhSb2FYTXViM0IwYVc5dWN5NTBjbUZ1YzJsMGFXOXVJQ0U5UFNBbmIzWmxjbXhoY0NjcElIdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YzJsaWJHbHVaM01vSjF0a1lYUmhMVzltWmkxallXNTJZWE10WTI5dWRHVnVkRjBuS1M1amMzTW9KM1J5WVc1emFYUnBiMjR0WkhWeVlYUnBiMjRuTENCMGFHbHpMbTl3ZEdsdmJuTXVkSEpoYm5OcGRHbHZibFJwYldVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExuTnBZbXhwYm1kektDZGJaR0YwWVMxdlptWXRZMkZ1ZG1GekxXTnZiblJsYm5SZEp5a3VZM056S0NkMGNtRnVjMmwwYVc5dUxXUjFjbUYwYVc5dUp5d2dKeWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVacGNtVnpJSGRvWlc0Z2RHaGxJRzltWmkxallXNTJZWE1nYldWdWRTQnZjR1Z1Y3k1Y2JpQWdJQ0FnS2lCQVpYWmxiblFnVDJabVEyRnVkbUZ6STI5d1pXNWxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVdSa1EyeGhjM01vSjJsekxXOXdaVzRuS1M1eVpXMXZkbVZEYkdGemN5Z25hWE10WTJ4dmMyVmtKeWs3WEc1Y2JpQWdJQ0IwYUdsekxpUjBjbWxuWjJWeWN5NWhkSFJ5S0NkaGNtbGhMV1Y0Y0dGdVpHVmtKeXdnSjNSeWRXVW5LVHRjYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG1GMGRISW9KMkZ5YVdFdGFHbGtaR1Z1Snl3Z0oyWmhiSE5sSnlsY2JpQWdJQ0FnSUNBZ0xuUnlhV2RuWlhJb0oyOXdaVzVsWkM1NlppNXZabVpqWVc1MllYTW5LVHRjYmx4dUlDQWdJSFJvYVhNdUpHTnZiblJsYm5RdVlXUmtRMnhoYzNNb0oybHpMVzl3Wlc0dEp5QXJJSFJvYVhNdWNHOXphWFJwYjI0cE8xeHVYRzRnSUNBZ0x5OGdTV1lnWUdOdmJuUmxiblJUWTNKdmJHeGdJR2x6SUhObGRDQjBieUJtWVd4elpTd2dZV1JrSUdOc1lYTnpJR0Z1WkNCa2FYTmhZbXhsSUhOamNtOXNiR2x1WnlCdmJpQjBiM1ZqYUNCa1pYWnBZMlZ6TGx4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZMjl1ZEdWdWRGTmpjbTlzYkNBOVBUMGdabUZzYzJVcElIdGNiaUFnSUNBZ0lDUW9KMkp2WkhrbktTNWhaR1JEYkdGemN5Z25hWE10YjJabUxXTmhiblpoY3kxdmNHVnVKeWt1YjI0b0ozUnZkV05vYlc5MlpTY3NJSFJvYVhNdVgzTjBiM0JUWTNKdmJHeHBibWNwTzF4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXZiaWduZEc5MVkyaHpkR0Z5ZENjc0lIUm9hWE11WDNKbFkyOXlaRk5qY205c2JHRmliR1VwTzF4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXZiaWduZEc5MVkyaHRiM1psSnl3Z2RHaHBjeTVmYzNSdmNGTmpjbTlzYkZCeWIzQmhaMkYwYVc5dUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1OdmJuUmxiblJQZG1WeWJHRjVJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUnZkbVZ5YkdGNUxtRmtaRU5zWVhOektDZHBjeTEyYVhOcFlteGxKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWpiRzl6WlU5dVEyeHBZMnNnUFQwOUlIUnlkV1VnSmlZZ2RHaHBjeTV2Y0hScGIyNXpMbU52Ym5SbGJuUlBkbVZ5YkdGNUlEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSdmRtVnliR0Y1TG1Ga1pFTnNZWE56S0NkcGN5MWpiRzl6WVdKc1pTY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVlYVjBiMFp2WTNWeklEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG05dVpTaDBjbUZ1YzJsMGFXOXVaVzVrS0hSb2FYTXVKR1ZzWlcxbGJuUXBMQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZmZEdocGN5NGtaV3hsYldWdWRDNW9ZWE5EYkdGemN5Z25hWE10YjNCbGJpY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1T3lBdkx5QmxlR2wwSUdsbUlIQnlaVzFoZEhWeVpXeDVJR05zYjNObFpGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCallXNTJZWE5HYjJOMWN5QTlJRjkwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvSjF0a1lYUmhMV0YxZEc5bWIyTjFjMTBuS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05oYm5aaGMwWnZZM1Z6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ1ZG1GelJtOWpkWE11WlhFb01Da3VabTlqZFhNb0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0oyRXNJR0oxZEhSdmJpY3BMbVZ4S0RBcExtWnZZM1Z6S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWRISmhjRVp2WTNWeklEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSamIyNTBaVzUwTG1GMGRISW9KM1JoWW1sdVpHVjRKeXdnSnkweEp5azdYRzRnSUNBZ0lDQkxaWGxpYjJGeVpDNTBjbUZ3Um05amRYTW9kR2hwY3k0a1pXeGxiV1Z1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZZV1JrUTI5dWRHVnVkRU5zWVhOelpYTW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGJHOXpaWE1nZEdobElHOW1aaTFqWVc1MllYTWdiV1Z1ZFM1Y2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR05pSUMwZ2IzQjBhVzl1WVd3Z1kySWdkRzhnWm1seVpTQmhablJsY2lCamJHOXpkWEpsTGx4dUlDQWdLaUJBWm1seVpYTWdUMlptUTJGdWRtRnpJMk5zYjNObFpGeHVJQ0FnS2k5Y2JpQWdZMnh2YzJVb1kySXBJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVKR1ZzWlcxbGJuUXVhR0Z6UTJ4aGMzTW9KMmx6TFc5d1pXNG5LU0I4ZkNCMGFHbHpMbWx6VW1WMlpXRnNaV1FwSUhzZ2NtVjBkWEp1T3lCOVhHNWNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXlaVzF2ZG1WRGJHRnpjeWduYVhNdGIzQmxiaWNwTzF4dVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWhkSFJ5S0NkaGNtbGhMV2hwWkdSbGJpY3NJQ2QwY25WbEp5bGNiaUFnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ29nUm1seVpYTWdkMmhsYmlCMGFHVWdiMlptTFdOaGJuWmhjeUJ0Wlc1MUlHOXdaVzV6TGx4dUlDQWdJQ0FnSUNvZ1FHVjJaVzUwSUU5bVprTmhiblpoY3lOamJHOXpaV1JjYmlBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNBdWRISnBaMmRsY2lnblkyeHZjMlZrTG5wbUxtOW1abU5oYm5aaGN5Y3BPMXh1WEc0Z0lDQWdkR2hwY3k0a1kyOXVkR1Z1ZEM1eVpXMXZkbVZEYkdGemN5Z25hWE10YjNCbGJpMXNaV1owSUdsekxXOXdaVzR0ZEc5d0lHbHpMVzl3Wlc0dGNtbG5hSFFnYVhNdGIzQmxiaTFpYjNSMGIyMG5LVHRjYmx4dUlDQWdJQzh2SUVsbUlHQmpiMjUwWlc1MFUyTnliMnhzWUNCcGN5QnpaWFFnZEc4Z1ptRnNjMlVzSUhKbGJXOTJaU0JqYkdGemN5QmhibVFnY21VdFpXNWhZbXhsSUhOamNtOXNiR2x1WnlCdmJpQjBiM1ZqYUNCa1pYWnBZMlZ6TGx4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZMjl1ZEdWdWRGTmpjbTlzYkNBOVBUMGdabUZzYzJVcElIdGNiaUFnSUNBZ0lDUW9KMkp2WkhrbktTNXlaVzF2ZG1WRGJHRnpjeWduYVhNdGIyWm1MV05oYm5aaGN5MXZjR1Z1SnlrdWIyWm1LQ2QwYjNWamFHMXZkbVVuTENCMGFHbHpMbDl6ZEc5d1UyTnliMnhzYVc1bktUdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjJabUtDZDBiM1ZqYUhOMFlYSjBKeXdnZEdocGN5NWZjbVZqYjNKa1UyTnliMnhzWVdKc1pTazdYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG05bVppZ25kRzkxWTJodGIzWmxKeXdnZEdocGN5NWZjM1J2Y0ZOamNtOXNiRkJ5YjNCaFoyRjBhVzl1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbU52Ym5SbGJuUlBkbVZ5YkdGNUlEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSdmRtVnliR0Y1TG5KbGJXOTJaVU5zWVhOektDZHBjeTEyYVhOcFlteGxKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWpiRzl6WlU5dVEyeHBZMnNnUFQwOUlIUnlkV1VnSmlZZ2RHaHBjeTV2Y0hScGIyNXpMbU52Ym5SbGJuUlBkbVZ5YkdGNUlEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSdmRtVnliR0Y1TG5KbGJXOTJaVU5zWVhOektDZHBjeTFqYkc5ellXSnNaU2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdUpIUnlhV2RuWlhKekxtRjBkSElvSjJGeWFXRXRaWGh3WVc1a1pXUW5MQ0FuWm1Gc2MyVW5LVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVkSEpoY0VadlkzVnpJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmpiMjUwWlc1MExuSmxiVzkyWlVGMGRISW9KM1JoWW1sdVpHVjRKeWs3WEc0Z0lDQWdJQ0JMWlhsaWIyRnlaQzV5Wld4bFlYTmxSbTlqZFhNb2RHaHBjeTRrWld4bGJXVnVkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnVEdsemRHVnVJSFJ2SUhSeVlXNXphWFJwYjI1RmJtUWdZVzVrSUdGa1pDQmpiR0Z6Y3lCM2FHVnVJR1J2Ym1VdVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXZibVVvZEhKaGJuTnBkR2x2Ym1WdVpDaDBhR2x6TGlSbGJHVnRaVzUwS1N3Z1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdYM1JvYVhNdUpHVnNaVzFsYm5RdVlXUmtRMnhoYzNNb0oybHpMV05zYjNObFpDY3BPMXh1SUNBZ0lDQWdYM1JvYVhNdVgzSmxiVzkyWlVOdmJuUmxiblJEYkdGemMyVnpLQ2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHOW5aMnhsY3lCMGFHVWdiMlptTFdOaGJuWmhjeUJ0Wlc1MUlHOXdaVzRnYjNJZ1kyeHZjMlZrTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHVjJaVzUwSUMwZ1JYWmxiblFnYjJKcVpXTjBJSEJoYzNObFpDQm1jbTl0SUd4cGMzUmxibVZ5TGx4dUlDQWdLaUJBY0dGeVlXMGdlMnBSZFdWeWVYMGdkSEpwWjJkbGNpQXRJR1ZzWlcxbGJuUWdkR2hoZENCMGNtbG5aMlZ5WldRZ2RHaGxJRzltWmkxallXNTJZWE1nZEc4Z2IzQmxiaTVjYmlBZ0lDb3ZYRzRnSUhSdloyZHNaU2hsZG1WdWRDd2dkSEpwWjJkbGNpa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxpUmxiR1Z0Wlc1MExtaGhjME5zWVhOektDZHBjeTF2Y0dWdUp5a3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVkyeHZjMlVvWlhabGJuUXNJSFJ5YVdkblpYSXBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdWIzQmxiaWhsZG1WdWRDd2dkSEpwWjJkbGNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWhoYm1Sc1pYTWdhMlY1WW05aGNtUWdhVzV3ZFhRZ2QyaGxiaUJrWlhSbFkzUmxaQzRnVjJobGJpQjBhR1VnWlhOallYQmxJR3RsZVNCcGN5QndjbVZ6YzJWa0xDQjBhR1VnYjJabUxXTmhiblpoY3lCdFpXNTFJR05zYjNObGN5d2dZVzVrSUdadlkzVnpJR2x6SUhKbGMzUnZjbVZrSUhSdklIUm9aU0JsYkdWdFpXNTBJSFJvWVhRZ2IzQmxibVZrSUhSb1pTQnRaVzUxTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjlvWVc1a2JHVkxaWGxpYjJGeVpDaGxLU0I3WEc0Z0lDQWdTMlY1WW05aGNtUXVhR0Z1Wkd4bFMyVjVLR1VzSUNkUFptWkRZVzUyWVhNbkxDQjdYRzRnSUNBZ0lDQmpiRzl6WlRvZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHeGhjM1JVY21sbloyVnlMbVp2WTNWektDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUdoaGJtUnNaV1E2SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnWlM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJsYzNSeWIzbHpJSFJvWlNCdlptWmpZVzUyWVhNZ2NHeDFaMmx1TGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb3ZYRzRnSUY5a1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVZMnh2YzJVb0tUdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbTltWmlnbkxucG1MblJ5YVdkblpYSWdMbnBtTG05bVptTmhiblpoY3ljcE8xeHVJQ0FnSUhSb2FYTXVKRzkyWlhKc1lYa3ViMlptS0NjdWVtWXViMlptWTJGdWRtRnpKeWs3WEc0Z0lIMWNibjFjYmx4dVQyWm1RMkZ1ZG1GekxtUmxabUYxYkhSeklEMGdlMXh1SUNBdktpcGNiaUFnSUNvZ1FXeHNiM2NnZEdobElIVnpaWElnZEc4Z1kyeHBZMnNnYjNWMGMybGtaU0J2WmlCMGFHVWdiV1Z1ZFNCMGJ5QmpiRzl6WlNCcGRDNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ2RISjFaVnh1SUNBZ0tpOWNiaUFnWTJ4dmMyVlBia05zYVdOck9pQjBjblZsTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCWkdSeklHRnVJRzkyWlhKc1lYa2diMjRnZEc5d0lHOW1JR0JiWkdGMFlTMXZabVl0WTJGdWRtRnpMV052Ym5SbGJuUmRZQzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdkSEoxWlZ4dUlDQWdLaTljYmlBZ1kyOXVkR1Z1ZEU5MlpYSnNZWGs2SUhSeWRXVXNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUmhjbWRsZENCaGJpQnZabVl0WTJGdWRtRnpJR052Ym5SbGJuUWdZMjl1ZEdGcGJtVnlJR0o1SUVsRUlIUm9ZWFFnYldGNUlHSmxJSEJzWVdObFpDQmhibmwzYUdWeVpTNGdTV1lnYm5Wc2JDQjBhR1VnWTJ4dmMyVnpkQ0JqYjI1MFpXNTBJR052Ym5SaGFXNWxjaUIzYVd4c0lHSmxJSFJoYTJWdUxseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIcy9jM1J5YVc1bmZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCdWRXeHNYRzRnSUNBcUwxeHVJQ0JqYjI1MFpXNTBTV1E2SUc1MWJHd3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxabWx1WlNCMGFHVWdiMlptTFdOaGJuWmhjeUJsYkdWdFpXNTBJR2x6SUc1bGMzUmxaQ0JwYmlCaGJpQnZabVl0WTJGdWRtRnpJR052Ym5SbGJuUXVJRlJvYVhNZ2FYTWdjbVZ4ZFdseVpXUWdkMmhsYmlCMWMybHVaeUIwYUdVZ1kyOXVkR1Z1ZEVsa0lHOXdkR2x2YmlCbWIzSWdZU0J1WlhOMFpXUWdaV3hsYldWdWRDNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ2JuVnNiRnh1SUNBZ0tpOWNiaUFnYm1WemRHVmtPaUJ1ZFd4c0xGeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmJtRmliR1V2WkdsellXSnNaU0J6WTNKdmJHeHBibWNnYjJZZ2RHaGxJRzFoYVc0Z1kyOXVkR1Z1ZENCM2FHVnVJR0Z1SUc5bVppQmpZVzUyWVhNZ2NHRnVaV3dnYVhNZ2IzQmxiaTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdkSEoxWlZ4dUlDQWdLaTljYmlBZ1kyOXVkR1Z1ZEZOamNtOXNiRG9nZEhKMVpTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1FXMXZkVzUwSUc5bUlIUnBiV1VnYVc0Z2JYTWdkR2hsSUc5d1pXNGdZVzVrSUdOc2IzTmxJSFJ5WVc1emFYUnBiMjRnY21WeGRXbHlaWE11SUVsbUlHNXZibVVnYzJWc1pXTjBaV1FzSUhCMWJHeHpJR1p5YjIwZ1ltOWtlU0J6ZEhsc1pTNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCdWRXeHNYRzRnSUNBcUwxeHVJQ0IwY21GdWMybDBhVzl1VkdsdFpUb2diblZzYkN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVkhsd1pTQnZaaUIwY21GdWMybDBhVzl1SUdadmNpQjBhR1VnYjJabVkyRnVkbUZ6SUcxbGJuVXVJRTl3ZEdsdmJuTWdZWEpsSUNkd2RYTm9KeXdnSjJSbGRHRmphR1ZrSnlCdmNpQW5jMnhwWkdVbkxseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSUhCMWMyaGNiaUFnSUNvdlhHNGdJSFJ5WVc1emFYUnBiMjQ2SUNkd2RYTm9KeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSbTl5WTJVZ2RHaGxJSEJoWjJVZ2RHOGdjMk55YjJ4c0lIUnZJSFJ2Y0NCdmNpQmliM1IwYjIwZ2IyNGdiM0JsYmk1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN1AzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnYm5Wc2JGeHVJQ0FnS2k5Y2JpQWdabTl5WTJWVWJ6b2diblZzYkN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzY2dkR2hsSUc5bVptTmhiblpoY3lCMGJ5QnlaVzFoYVc0Z2IzQmxiaUJtYjNJZ1kyVnlkR0ZwYmlCaWNtVmhhM0J2YVc1MGN5NWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDb3ZYRzRnSUdselVtVjJaV0ZzWldRNklHWmhiSE5sTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJDY21WaGEzQnZhVzUwSUdGMElIZG9hV05vSUhSdklISmxkbVZoYkM0Z1NsTWdkMmxzYkNCMWMyVWdZU0JTWldkRmVIQWdkRzhnZEdGeVoyVjBJSE4wWVc1a1lYSmtJR05zWVhOelpYTXNJR2xtSUdOb1lXNW5hVzVuSUdOc1lYTnpibUZ0WlhNc0lIQmhjM01nZVc5MWNpQmpiR0Z6Y3lCM2FYUm9JSFJvWlNCZ2NtVjJaV0ZzUTJ4aGMzTmdJRzl3ZEdsdmJpNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdQM04wY21sdVozMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ2JuVnNiRnh1SUNBZ0tpOWNiaUFnY21WMlpXRnNUMjQ2SUc1MWJHd3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWnZjbU5sSUdadlkzVnpJSFJ2SUhSb1pTQnZabVpqWVc1MllYTWdiMjRnYjNCbGJpNGdTV1lnZEhKMVpTd2dkMmxzYkNCbWIyTjFjeUIwYUdVZ2IzQmxibWx1WnlCMGNtbG5aMlZ5SUc5dUlHTnNiM05sTGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0IwY25WbFhHNGdJQ0FxTDF4dUlDQmhkWFJ2Um05amRYTTZJSFJ5ZFdVc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOc1lYTnpJSFZ6WldRZ2RHOGdabTl5WTJVZ1lXNGdiMlptWTJGdWRtRnpJSFJ2SUhKbGJXRnBiaUJ2Y0dWdUxpQkdiM1Z1WkdGMGFXOXVJR1JsWm1GMWJIUnpJR1p2Y2lCMGFHbHpJR0Z5WlNCZ2NtVjJaV0ZzTFdadmNpMXNZWEpuWldBZ0ppQmdjbVYyWldGc0xXWnZjaTF0WldScGRXMWdMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYRzRnSUNBcUlFQmtaV1poZFd4MElISmxkbVZoYkMxbWIzSXRYRzRnSUNBcUlFQjBiMlJ2SUdsdGNISnZkbVVnZEdobElISmxaMlY0SUhSbGMzUnBibWNnWm05eUlIUm9hWE11WEc0Z0lDQXFMMXh1SUNCeVpYWmxZV3hEYkdGemN6b2dKM0psZG1WaGJDMW1iM0l0Snl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVkhKcFoyZGxjbk1nYjNCMGFXOXVZV3dnWm05amRYTWdkSEpoY0hCcGJtY2dkMmhsYmlCdmNHVnVhVzVuSUdGdUlHOW1abU5oYm5aaGN5NGdVMlYwY3lCMFlXSnBibVJsZUNCdlppQmJaR0YwWVMxdlptWXRZMkZ1ZG1GekxXTnZiblJsYm5SZElIUnZJQzB4SUdadmNpQmhZMk5sYzNOcFltbHNhWFI1SUhCMWNuQnZjMlZ6TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnS2k5Y2JpQWdkSEpoY0VadlkzVnpPaUJtWVd4elpWeHVmVnh1WEc1bGVIQnZjblFnZTA5bVprTmhiblpoYzMwN1hHNGlYWDA9XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24ub2ZmY2FudmFzLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk9yYml0ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQnKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDIgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5tb3Rpb24nKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDMgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC50aW1lcicpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsNCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmltYWdlTG9hZGVyJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWw1ID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWw2ID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwudG91Y2gnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIE9yYml0IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vcmJpdFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudG91Y2hcbiAqL1xuXG52YXIgT3JiaXQgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoT3JiaXQsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIE9yYml0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcmJpdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE9yYml0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT3JiaXQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhPcmJpdCwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIG9yYml0IGNhcm91c2VsLlxuICAgICogQGNsYXNzXG4gICAgKiBAbmFtZSBPcmJpdFxuICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBPcmJpdCBDYXJvdXNlbC5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgT3JiaXQuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ09yYml0JzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIF9mb3VuZGF0aW9uVXRpbDYuVG91Y2guaW5pdChfanF1ZXJ5Mi5kZWZhdWx0KTsgLy8gVG91Y2ggaW5pdCBpcyBpZGVtcG90ZW50LCB3ZSBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0J3MgaW5pdGlhbGllZC5cblxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQucmVnaXN0ZXIoJ09yYml0Jywge1xuICAgICAgICAnbHRyJzoge1xuICAgICAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgICAgfSxcbiAgICAgICAgJ3J0bCc6IHtcbiAgICAgICAgICAnQVJST1dfTEVGVCc6ICduZXh0JyxcbiAgICAgICAgICAnQVJST1dfUklHSFQnOiAncHJldmlvdXMnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMsIHNldHRpbmcgYXR0cmlidXRlcywgYW5kIHN0YXJ0aW5nIHRoZSBhbmltYXRpb24uXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwcml2YXRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIC8vIEBUT0RPOiBjb25zaWRlciBkaXNjdXNzaW9uIG9uIFBSICM5Mjc4IGFib3V0IERPTSBwb2xsdXRpb24gYnkgY2hhbmdlU2xpZGVcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG5cbiAgICAgIHRoaXMuJHdyYXBwZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKTtcbiAgICAgIHRoaXMuJHNsaWRlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcyk7XG5cbiAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKSxcbiAgICAgICAgICBpbml0QWN0aXZlID0gdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpLFxuICAgICAgICAgIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsNS5HZXRZb0RpZ2l0cykoNiwgJ29yYml0Jyk7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgICAnaWQnOiBpZFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghaW5pdEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLmVxKDApLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlTVVJKSB7XG4gICAgICAgIHRoaXMuJHNsaWRlcy5hZGRDbGFzcygnbm8tbW90aW9udWknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgICgwLCBfZm91bmRhdGlvblV0aWw0Lm9uSW1hZ2VzTG9hZGVkKSgkaW1hZ2VzLCB0aGlzLl9wcmVwYXJlRm9yT3JiaXQuYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wcmVwYXJlRm9yT3JiaXQoKTsgLy9oZWhlXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgICB0aGlzLl9sb2FkQnVsbGV0cygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiB0aGlzLiRzbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLmdlb1N5bmMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlKSB7XG4gICAgICAgIC8vIGFsbG93IHdyYXBwZXIgdG8gYmUgZm9jdXNhYmxlIHRvIGVuYWJsZSBhcnJvdyBuYXZpZ2F0aW9uXG4gICAgICAgIHRoaXMuJHdyYXBwZXIuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENyZWF0ZXMgYSBqUXVlcnkgY29sbGVjdGlvbiBvZiBidWxsZXRzLCBpZiB0aGV5IGFyZSBiZWluZyB1c2VkLlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19sb2FkQnVsbGV0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2FkQnVsbGV0cygpIHtcbiAgICAgIHRoaXMuJGJ1bGxldHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmJveE9mQnVsbGV0cykuZmluZCgnYnV0dG9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTZXRzIGEgYHRpbWVyYCBvYmplY3Qgb24gdGhlIG9yYml0LCBhbmQgc3RhcnRzIHRoZSBjb3VudGVyIGZvciB0aGUgbmV4dCBzbGlkZS5cbiAgICAqIEBmdW5jdGlvblxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dlb1N5bmMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZW9TeW5jKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMudGltZXIgPSBuZXcgX2ZvdW5kYXRpb25VdGlsMy5UaW1lcih0aGlzLiRlbGVtZW50LCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGlzLm9wdGlvbnMudGltZXJEZWxheSxcbiAgICAgICAgaW5maW5pdGU6IGZhbHNlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnRpbWVyLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTZXRzIHdyYXBwZXIgYW5kIHNsaWRlIGhlaWdodHMgZm9yIHRoZSBvcmJpdC5cbiAgICAqIEBmdW5jdGlvblxuICAgICogQHByaXZhdGVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfcHJlcGFyZUZvck9yYml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVGb3JPcmJpdCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLl9zZXRXcmFwcGVySGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDYWx1bGF0ZXMgdGhlIGhlaWdodCBvZiBlYWNoIHNsaWRlIGluIHRoZSBjb2xsZWN0aW9uLCBhbmQgdXNlcyB0aGUgdGFsbGVzdCBvbmUgZm9yIHRoZSB3cmFwcGVyIGhlaWdodC5cbiAgICAqIEBmdW5jdGlvblxuICAgICogQHByaXZhdGVcbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIHdoZW4gY29tcGxldGUuXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldFdyYXBwZXJIZWlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0V3JhcHBlckhlaWdodChjYikge1xuICAgICAgLy9yZXdyaXRlIHRoaXMgdG8gYGZvcmAgbG9vcFxuICAgICAgdmFyIG1heCA9IDAsXG4gICAgICAgICAgdGVtcCxcbiAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGVtcCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuYXR0cignZGF0YS1zbGlkZScsIGNvdW50ZXIpO1xuXG4gICAgICAgIGlmICghL211aS9nLnRlc3QoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpWzBdLmNsYXNzTmFtZSkgJiYgX3RoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKVswXSAhPT0gX3RoaXMuJHNsaWRlcy5lcShjb3VudGVyKVswXSkge1xuICAgICAgICAgIC8vaWYgbm90IHRoZSBhY3RpdmUgc2xpZGUsIHNldCBjc3MgcG9zaXRpb24gYW5kIGRpc3BsYXkgcHJvcGVydHlcbiAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuY3NzKHsgJ3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywgJ2Rpc3BsYXknOiAnbm9uZScgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4ID0gdGVtcCA+IG1heCA/IHRlbXAgOiBtYXg7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY291bnRlciA9PT0gdGhpcy4kc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLiR3cmFwcGVyLmNzcyh7ICdoZWlnaHQnOiBtYXggfSk7IC8vb25seSBjaGFuZ2UgdGhlIHdyYXBwZXIgaGVpZ2h0IHByb3BlcnR5IG9uY2UuXG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgIGNiKG1heCk7XG4gICAgICAgIH0gLy9maXJlIGNhbGxiYWNrIHdpdGggbWF4IGhlaWdodCBkaW1lbnNpb24uXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBTZXRzIHRoZSBtYXgtaGVpZ2h0IG9mIGVhY2ggc2xpZGUuXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwcml2YXRlXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldFNsaWRlSGVpZ2h0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFNsaWRlSGVpZ2h0KGhlaWdodCkge1xuICAgICAgdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuY3NzKCdtYXgtaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gYmFzaWNhbGx5IGV2ZXJ5dGhpbmcgd2l0aGluIHRoZSBlbGVtZW50LlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgIC8vKipOb3cgdXNpbmcgY3VzdG9tIGV2ZW50IC0gdGhhbmtzIHRvOioqXG4gICAgICAvLyoqICAgICAgWW9oYWkgQXJhcmF0IG9mIFRvcm9udG8gICAgICAqKlxuICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgIC8vXG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnJlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbih7XG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fcHJlcGFyZUZvck9yYml0LmJpbmQodGhpcylcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zd2lwZSkge1xuICAgICAgICAgIHRoaXMuJHNsaWRlcy5vZmYoJ3N3aXBlbGVmdC56Zi5vcmJpdCBzd2lwZXJpZ2h0LnpmLm9yYml0Jykub24oJ3N3aXBlbGVmdC56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgICAgICB9KS5vbignc3dpcGVyaWdodC56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5KSB7XG4gICAgICAgICAgdGhpcy4kc2xpZGVzLm9uKCdjbGljay56Zi5vcmJpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicsIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVyW190aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gJ3BhdXNlJyA6ICdzdGFydCddKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdXNlT25Ib3Zlcikge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2VlbnRlci56Zi5vcmJpdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMudGltZXIucGF1c2UoKTtcbiAgICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLm9yYml0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIV90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGltZXIuc3RhcnQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5uYXZCdXR0b25zKSB7XG4gICAgICAgICAgdmFyICRjb250cm9scyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubmV4dENsYXNzICsgJywgLicgKyB0aGlzLm9wdGlvbnMucHJldkNsYXNzKTtcbiAgICAgICAgICAkY29udHJvbHMuYXR0cigndGFiaW5kZXgnLCAwKVxuICAgICAgICAgIC8vYWxzbyBuZWVkIHRvIGhhbmRsZSBlbnRlci9yZXR1cm4gYW5kIHNwYWNlYmFyIGtleSBwcmVzc2VzXG4gICAgICAgICAgLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSgoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuaGFzQ2xhc3MoX3RoaXMub3B0aW9ucy5uZXh0Q2xhc3MpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgICAgIHRoaXMuJGJ1bGxldHMub24oJ2NsaWNrLnpmLm9yYml0IHRvdWNoZW5kLnpmLm9yYml0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKC9pcy1hY3RpdmUvZy50ZXN0KHRoaXMuY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IC8vaWYgdGhpcyBpcyBhY3RpdmUsIGtpY2sgb3V0IG9mIGZ1bmN0aW9uLlxuICAgICAgICAgICAgdmFyIGlkeCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5kYXRhKCdzbGlkZScpLFxuICAgICAgICAgICAgICAgIGx0ciA9IGlkeCA+IF90aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZGF0YSgnc2xpZGUnKSxcbiAgICAgICAgICAgICAgICAkc2xpZGUgPSBfdGhpcy4kc2xpZGVzLmVxKGlkeCk7XG5cbiAgICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKGx0ciwgJHNsaWRlLCBpZHgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlKSB7XG4gICAgICAgICAgdGhpcy4kd3JhcHBlci5hZGQodGhpcy4kYnVsbGV0cykub24oJ2tleWRvd24uemYub3JiaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLmhhbmRsZUtleShlLCAnT3JiaXQnLCB7XG4gICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbiBwcmV2aW91cygpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIGhhbmRsZWQoKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgYnVsbGV0IGlzIGZvY3VzZWQsIG1ha2Ugc3VyZSBmb2N1cyBtb3Zlc1xuICAgICAgICAgICAgICAgIGlmICgoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZS50YXJnZXQpLmlzKF90aGlzLiRidWxsZXRzKSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuJGJ1bGxldHMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIE9yYml0IHNvIGl0IGNhbiBiZSByZWluaXRpYWxpemVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZXNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNldCgpIHtcbiAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZXJlIGFyZSBubyBzbGlkZXMgKGZpcnN0IHJ1bilcbiAgICAgIGlmICh0eXBlb2YgdGhpcy4kc2xpZGVzID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIFJlbW92ZSBvbGQgZXZlbnRzXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYub3JiaXQnKS5maW5kKCcqJykub2ZmKCcuemYub3JiaXQnKTtcblxuICAgICAgICAvLyBSZXN0YXJ0IHRpbWVyIGlmIGF1dG9QbGF5IGlzIGVuYWJsZWRcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSkge1xuICAgICAgICAgIHRoaXMudGltZXIucmVzdGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgYWxsIHNsaWRkZXNcbiAgICAgICAgdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGVsKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWFjdGl2ZSBpcy1pbicpLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpLmhpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2hvdyB0aGUgZmlyc3Qgc2xpZGVcbiAgICAgICAgdGhpcy4kc2xpZGVzLmZpcnN0KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLnNob3coKTtcblxuICAgICAgICAvLyBUcmlnZ2VycyB3aGVuIHRoZSBzbGlkZSBoYXMgZmluaXNoZWQgYW5pbWF0aW5nXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbdGhpcy4kc2xpZGVzLmZpcnN0KCldKTtcblxuICAgICAgICAvLyBTZWxlY3QgZmlyc3QgYnVsbGV0IGlmIGJ1bGxldHMgYXJlIHByZXNlbnRcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlQnVsbGV0cygwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogQ2hhbmdlcyB0aGUgY3VycmVudCBzbGlkZSB0byBhIG5ldyBvbmUuXG4gICAgKiBAZnVuY3Rpb25cbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMVFIgLSBmbGFnIGlmIHRoZSBzbGlkZSBzaG91bGQgbW92ZSBsZWZ0IHRvIHJpZ2h0LlxuICAgICogQHBhcmFtIHtqUXVlcnl9IGNob3NlblNsaWRlIC0gdGhlIGpRdWVyeSBlbGVtZW50IG9mIHRoZSBzbGlkZSB0byBzaG93IG5leHQsIGlmIG9uZSBpcyBzZWxlY3RlZC5cbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSB0aGUgaW5kZXggb2YgdGhlIG5ldyBzbGlkZSBpbiBpdHMgY29sbGVjdGlvbiwgaWYgb25lIGNob3Nlbi5cbiAgICAqIEBmaXJlcyBPcmJpdCNzbGlkZWNoYW5nZVxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NoYW5nZVNsaWRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlU2xpZGUoaXNMVFIsIGNob3NlblNsaWRlLCBpZHgpIHtcbiAgICAgIGlmICghdGhpcy4kc2xpZGVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRG9uJ3QgZnJlYWsgb3V0IGlmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgY2xlYW51cFxuICAgICAgdmFyICRjdXJTbGlkZSA9IHRoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5lcSgwKTtcblxuICAgICAgaWYgKC9tdWkvZy50ZXN0KCRjdXJTbGlkZVswXS5jbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy9pZiB0aGUgc2xpZGUgaXMgY3VycmVudGx5IGFuaW1hdGluZywga2ljayBvdXQgb2YgdGhlIGZ1bmN0aW9uXG5cbiAgICAgIHZhciAkZmlyc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5maXJzdCgpLFxuICAgICAgICAgICRsYXN0U2xpZGUgPSB0aGlzLiRzbGlkZXMubGFzdCgpLFxuICAgICAgICAgIGRpckluID0gaXNMVFIgPyAnUmlnaHQnIDogJ0xlZnQnLFxuICAgICAgICAgIGRpck91dCA9IGlzTFRSID8gJ0xlZnQnIDogJ1JpZ2h0JyxcbiAgICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgJG5ld1NsaWRlO1xuXG4gICAgICBpZiAoIWNob3NlblNsaWRlKSB7XG4gICAgICAgIC8vbW9zdCBvZiB0aGUgdGltZSwgdGhpcyB3aWxsIGJlIGF1dG8gcGxheWVkIG9yIGNsaWNrZWQgZnJvbSB0aGUgbmF2QnV0dG9ucy5cbiAgICAgICAgJG5ld1NsaWRlID0gaXNMVFIgPyAvL2lmIHdyYXBwaW5nIGVuYWJsZWQsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBhIGBuZXh0YCBvciBgcHJldmAgc2libGluZywgaWYgbm90LCBzZWxlY3QgdGhlIGZpcnN0IG9yIGxhc3Qgc2xpZGUgdG8gZmlsbCBpbi4gaWYgd3JhcHBpbmcgbm90IGVuYWJsZWQsIGF0dGVtcHQgdG8gc2VsZWN0IGBuZXh0YCBvciBgcHJldmAsIGlmIHRoZXJlJ3Mgbm90aGluZyB0aGVyZSwgdGhlIGZ1bmN0aW9uIHdpbGwga2ljayBvdXQgb24gbmV4dCBzdGVwLiBDUkFaWSBORVNURUQgVEVSTkFSSUVTISEhISFcbiAgICAgICAgdGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5uZXh0KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKS5sZW5ndGggPyAkY3VyU2xpZGUubmV4dCgnLicgKyB0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcykgOiAkZmlyc3RTbGlkZSA6ICRjdXJTbGlkZS5uZXh0KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKSA6IC8vcGljayBuZXh0IHNsaWRlIGlmIG1vdmluZyBsZWZ0IHRvIHJpZ2h0XG4gICAgICAgIHRoaXMub3B0aW9ucy5pbmZpbml0ZVdyYXAgPyAkY3VyU2xpZGUucHJldignLicgKyB0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcykubGVuZ3RoID8gJGN1clNsaWRlLnByZXYoJy4nICsgdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpIDogJGxhc3RTbGlkZSA6ICRjdXJTbGlkZS5wcmV2KCcuJyArIHRoaXMub3B0aW9ucy5zbGlkZUNsYXNzKTsgLy9waWNrIHByZXYgc2xpZGUgaWYgbW92aW5nIHJpZ2h0IHRvIGxlZnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRuZXdTbGlkZSA9IGNob3NlblNsaWRlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJG5ld1NsaWRlLmxlbmd0aCkge1xuICAgICAgICAvKipcbiAgICAgICAgKiBUcmlnZ2VycyBiZWZvcmUgdGhlIG5leHQgc2xpZGUgc3RhcnRzIGFuaW1hdGluZyBpbiBhbmQgb25seSBpZiBhIG5leHQgc2xpZGUgaGFzIGJlZW4gZm91bmQuXG4gICAgICAgICogQGV2ZW50IE9yYml0I2JlZm9yZXNsaWRlY2hhbmdlXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignYmVmb3Jlc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJGN1clNsaWRlLCAkbmV3U2xpZGVdKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgICBpZHggPSBpZHggfHwgdGhpcy4kc2xpZGVzLmluZGV4KCRuZXdTbGlkZSk7IC8vZ3JhYiBpbmRleCB0byB1cGRhdGUgYnVsbGV0c1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUJ1bGxldHMoaWR4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlTVVJICYmICF0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICBfZm91bmRhdGlvblV0aWwyLk1vdGlvbi5hbmltYXRlSW4oJG5ld1NsaWRlLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5jc3MoeyAncG9zaXRpb24nOiAnYWJzb2x1dGUnLCAndG9wJzogMCB9KSwgdGhpcy5vcHRpb25zWydhbmltSW5Gcm9tJyArIGRpckluXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG5ld1NsaWRlLmNzcyh7ICdwb3NpdGlvbic6ICdyZWxhdGl2ZScsICdkaXNwbGF5JzogJ2Jsb2NrJyB9KS5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfZm91bmRhdGlvblV0aWwyLk1vdGlvbi5hbmltYXRlT3V0KCRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyksIHRoaXMub3B0aW9uc1snYW5pbU91dFRvJyArIGRpck91dF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVBdHRyKCdhcmlhLWxpdmUnKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmICFfdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2RvIHN0dWZmP1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWluJykucmVtb3ZlQXR0cignYXJpYS1saXZlJykuaGlkZSgpO1xuICAgICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlIGlzLWluJykuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpLnNob3coKTtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmICF0aGlzLnRpbWVyLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVyLnJlc3RhcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgc2xpZGUgaGFzIGZpbmlzaGVkIGFuaW1hdGluZyBpbi5cbiAgICAgICAgKiBAZXZlbnQgT3JiaXQjc2xpZGVjaGFuZ2VcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFskbmV3U2xpZGVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFVwZGF0ZXMgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgYnVsbGV0cywgaWYgZGlzcGxheWVkLlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBzbGlkZS5cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlQnVsbGV0cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVCdWxsZXRzKGlkeCkge1xuICAgICAgdmFyICRvbGRCdWxsZXQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmJveE9mQnVsbGV0cykuZmluZCgnLmlzLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5ibHVyKCksXG4gICAgICAgICAgc3BhbiA9ICRvbGRCdWxsZXQuZmluZCgnc3BhbjpsYXN0JykuZGV0YWNoKCksXG4gICAgICAgICAgJG5ld0J1bGxldCA9IHRoaXMuJGJ1bGxldHMuZXEoaWR4KS5hZGRDbGFzcygnaXMtYWN0aXZlJykuYXBwZW5kKHNwYW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogRGVzdHJveXMgdGhlIGNhcm91c2VsIGFuZCBoaWRlcyB0aGUgZWxlbWVudC5cbiAgICAqIEBmdW5jdGlvblxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLm9yYml0JykuZmluZCgnKicpLm9mZignLnpmLm9yYml0JykuZW5kKCkuaGlkZSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPcmJpdDtcbn0oX2ZvdW5kYXRpb24uUGx1Z2luKTtcblxuT3JiaXQuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAqIFRlbGxzIHRoZSBKUyB0byBsb29rIGZvciBhbmQgbG9hZEJ1bGxldHMuXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIGJ1bGxldHM6IHRydWUsXG4gIC8qKlxuICAqIFRlbGxzIHRoZSBKUyB0byBhcHBseSBldmVudCBsaXN0ZW5lcnMgdG8gbmF2IGJ1dHRvbnNcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgbmF2QnV0dG9uczogdHJ1ZSxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnc2xpZGUtaW4tcmlnaHQnXG4gICovXG4gIGFuaW1JbkZyb21SaWdodDogJ3NsaWRlLWluLXJpZ2h0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnc2xpZGUtb3V0LXJpZ2h0J1xuICAqL1xuICBhbmltT3V0VG9SaWdodDogJ3NsaWRlLW91dC1yaWdodCcsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ3NsaWRlLWluLWxlZnQnXG4gICpcbiAgKi9cbiAgYW5pbUluRnJvbUxlZnQ6ICdzbGlkZS1pbi1sZWZ0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnc2xpZGUtb3V0LWxlZnQnXG4gICovXG4gIGFuaW1PdXRUb0xlZnQ6ICdzbGlkZS1vdXQtbGVmdCcsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBhdXRvbWF0aWNhbGx5IGFuaW1hdGUgb24gcGFnZSBsb2FkLlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICBhdXRvUGxheTogdHJ1ZSxcbiAgLyoqXG4gICogQW1vdW50IG9mIHRpbWUsIGluIG1zLCBiZXR3ZWVuIHNsaWRlIHRyYW5zaXRpb25zXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAqIEBkZWZhdWx0IDUwMDBcbiAgKi9cbiAgdGltZXJEZWxheTogNTAwMCxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGluZmluaXRlbHkgbG9vcCB0aHJvdWdoIHRoZSBzbGlkZXNcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgaW5maW5pdGVXcmFwOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIE9yYml0IHNsaWRlcyB0byBiaW5kIHRvIHN3aXBlIGV2ZW50cyBmb3IgbW9iaWxlLCByZXF1aXJlcyBhbiBhZGRpdGlvbmFsIHV0aWwgbGlicmFyeVxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICBzd2lwZTogdHJ1ZSxcbiAgLyoqXG4gICogQWxsb3dzIHRoZSB0aW1pbmcgZnVuY3Rpb24gdG8gcGF1c2UgYW5pbWF0aW9uIG9uIGhvdmVyLlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBiaW5kIGtleWJvYXJkIGV2ZW50cyB0byB0aGUgc2xpZGVyLCB0byBhbmltYXRlIGZyYW1lcyB3aXRoIGFycm93IGtleXNcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgYWNjZXNzaWJsZTogdHJ1ZSxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIG9mIE9yYml0XG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdvcmJpdC1jb250YWluZXInXG4gICovXG4gIGNvbnRhaW5lckNsYXNzOiAnb3JiaXQtY29udGFpbmVyJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byBpbmRpdmlkdWFsIHNsaWRlcy5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ29yYml0LXNsaWRlJ1xuICAqL1xuICBzbGlkZUNsYXNzOiAnb3JiaXQtc2xpZGUnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBidWxsZXQgY29udGFpbmVyLiBZb3UncmUgd2VsY29tZS5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ29yYml0LWJ1bGxldHMnXG4gICovXG4gIGJveE9mQnVsbGV0czogJ29yYml0LWJ1bGxldHMnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBgbmV4dGAgbmF2aWdhdGlvbiBidXR0b24uXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdvcmJpdC1uZXh0J1xuICAqL1xuICBuZXh0Q2xhc3M6ICdvcmJpdC1uZXh0JyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYHByZXZpb3VzYCBuYXZpZ2F0aW9uIGJ1dHRvbi5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ29yYml0LXByZXZpb3VzJ1xuICAqL1xuICBwcmV2Q2xhc3M6ICdvcmJpdC1wcmV2aW91cycsXG4gIC8qKlxuICAqIEJvb2xlYW4gdG8gZmxhZyB0aGUganMgdG8gdXNlIG1vdGlvbiB1aSBjbGFzc2VzIG9yIG5vdC4gRGVmYXVsdCB0byB0cnVlIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eS5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgdXNlTVVJOiB0cnVlXG59O1xuXG5leHBvcnRzLk9yYml0ID0gT3JiaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1YjNKaWFYUXVhbk1pWFN3aWJtRnRaWE1pT2xzaVQzSmlhWFFpTENKbGJHVnRaVzUwSWl3aWIzQjBhVzl1Y3lJc0lpUmxiR1Z0Wlc1MElpd2lKQ0lzSW1WNGRHVnVaQ0lzSW1SbFptRjFiSFJ6SWl3aVpHRjBZU0lzSW1Oc1lYTnpUbUZ0WlNJc0lsUnZkV05vSWl3aWFXNXBkQ0lzSWw5cGJtbDBJaXdpUzJWNVltOWhjbVFpTENKeVpXZHBjM1JsY2lJc0lsOXlaWE5sZENJc0lpUjNjbUZ3Y0dWeUlpd2labWx1WkNJc0ltTnZiblJoYVc1bGNrTnNZWE56SWl3aUpITnNhV1JsY3lJc0luTnNhV1JsUTJ4aGMzTWlMQ0lrYVcxaFoyVnpJaXdpYVc1cGRFRmpkR2wyWlNJc0ltWnBiSFJsY2lJc0ltbGtJaXdpWVhSMGNpSXNJbXhsYm1kMGFDSXNJbVZ4SWl3aVlXUmtRMnhoYzNNaUxDSjFjMlZOVlVraUxDSmZjSEpsY0dGeVpVWnZjazl5WW1sMElpd2lZbWx1WkNJc0ltSjFiR3hsZEhNaUxDSmZiRzloWkVKMWJHeGxkSE1pTENKZlpYWmxiblJ6SWl3aVlYVjBiMUJzWVhraUxDSm5aVzlUZVc1aklpd2lZV05qWlhOemFXSnNaU0lzSWlSaWRXeHNaWFJ6SWl3aVltOTRUMlpDZFd4c1pYUnpJaXdpWDNSb2FYTWlMQ0owYVcxbGNpSXNJbFJwYldWeUlpd2laSFZ5WVhScGIyNGlMQ0owYVcxbGNrUmxiR0Y1SWl3aWFXNW1hVzVwZEdVaUxDSmphR0Z1WjJWVGJHbGtaU0lzSW5OMFlYSjBJaXdpWDNObGRGZHlZWEJ3WlhKSVpXbG5hSFFpTENKallpSXNJbTFoZUNJc0luUmxiWEFpTENKamIzVnVkR1Z5SWl3aVpXRmphQ0lzSW1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDSXNJbWhsYVdkb2RDSXNJblJsYzNRaUxDSmpjM01pTENKdlptWWlMQ0p2YmlJc0luTjNhWEJsSWl3aVpTSXNJbkJ5WlhabGJuUkVaV1poZFd4MElpd2ljR0YxYzJWUGJraHZkbVZ5SWl3aWNHRjFjMlVpTENKdVlYWkNkWFIwYjI1eklpd2lKR052Ym5SeWIyeHpJaXdpYm1WNGRFTnNZWE56SWl3aWNISmxka05zWVhOeklpd2lhR0Z6UTJ4aGMzTWlMQ0pwWkhnaUxDSnNkSElpTENJa2MyeHBaR1VpTENKaFpHUWlMQ0pvWVc1a2JHVkxaWGtpTENKdVpYaDBJaXdpY0hKbGRtbHZkWE1pTENKb1lXNWtiR1ZrSWl3aWRHRnlaMlYwSWl3aWFYTWlMQ0ptYjJOMWN5SXNJbkpsYzNSaGNuUWlMQ0psYkNJc0luSmxiVzkyWlVOc1lYTnpJaXdpY21WdGIzWmxRWFIwY2lJc0ltaHBaR1VpTENKbWFYSnpkQ0lzSW5Ob2IzY2lMQ0owY21sbloyVnlJaXdpWDNWd1pHRjBaVUoxYkd4bGRITWlMQ0pwYzB4VVVpSXNJbU5vYjNObGJsTnNhV1JsSWl3aUpHTjFjbE5zYVdSbElpd2lKR1pwY25OMFUyeHBaR1VpTENJa2JHRnpkRk5zYVdSbElpd2liR0Z6ZENJc0ltUnBja2x1SWl3aVpHbHlUM1YwSWl3aUpHNWxkMU5zYVdSbElpd2lhVzVtYVc1cGRHVlhjbUZ3SWl3aWNISmxkaUlzSW1sdVpHVjRJaXdpVFc5MGFXOXVJaXdpWVc1cGJXRjBaVWx1SWl3aVlXNXBiV0YwWlU5MWRDSXNJbWx6VUdGMWMyVmtJaXdpSkc5c1pFSjFiR3hsZENJc0ltSnNkWElpTENKemNHRnVJaXdpWkdWMFlXTm9JaXdpSkc1bGQwSjFiR3hsZENJc0ltRndjR1Z1WkNJc0ltVnVaQ0lzSWxCc2RXZHBiaUlzSW1GdWFXMUpia1p5YjIxU2FXZG9kQ0lzSW1GdWFXMVBkWFJVYjFKcFoyaDBJaXdpWVc1cGJVbHVSbkp2YlV4bFpuUWlMQ0poYm1sdFQzVjBWRzlNWldaMElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdPenM3T3pzN08wRkJSVUU3T3pzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3T3pzN096czdPenRCUVVkQk96czdPenM3T3pzN08wbEJWVTFCTEVzN096czdPenM3T3pzN096dEJRVU5LT3pzN096czdPekpDUVU5UFF5eFBMRVZCUVZORExFOHNSVUZCVVR0QlFVTjBRaXhYUVVGTFF5eFJRVUZNTEVkQlFXZENSaXhQUVVGb1FqdEJRVU5CTEZkQlFVdERMRTlCUVV3c1IwRkJaVVVzYVVKQlFVVkRMRTFCUVVZc1EwRkJVeXhGUVVGVUxFVkJRV0ZNTEUxQlFVMU5MRkZCUVc1Q0xFVkJRVFpDTEV0QlFVdElMRkZCUVV3c1EwRkJZMGtzU1VGQlpDeEZRVUUzUWl4RlFVRnRSRXdzVDBGQmJrUXNRMEZCWmp0QlFVTkJMRmRCUVV0TkxGTkJRVXdzUjBGQmFVSXNUMEZCYWtJc1EwRkljMElzUTBGSFNUczdRVUZGTVVKRExEWkNRVUZOUXl4SlFVRk9MRU5CUVZkT0xHZENRVUZZTEVWQlRITkNMRU5CUzFBN08wRkJSV1lzVjBGQlMwOHNTMEZCVERzN1FVRkZRVU1zSzBKQlFWTkRMRkZCUVZRc1EwRkJhMElzVDBGQmJFSXNSVUZCTWtJN1FVRkRla0lzWlVGQlR6dEJRVU5NTEhsQ1FVRmxMRTFCUkZZN1FVRkZUQ3gzUWtGQll6dEJRVVpVTEZOQlJHdENPMEZCUzNwQ0xHVkJRVTg3UVVGRFRDeDNRa0ZCWXl4TlFVUlVPMEZCUlV3c2VVSkJRV1U3UVVGR1ZqdEJRVXhyUWl4UFFVRXpRanRCUVZWRU96dEJRVVZFT3pzN096czdPenMwUWtGTFVUdEJRVU5PTzBGQlEwRXNWMEZCUzBNc1RVRkJURHM3UVVGRlFTeFhRVUZMUXl4UlFVRk1MRWRCUVdkQ0xFdEJRVXRhTEZGQlFVd3NRMEZCWTJFc1NVRkJaQ3hQUVVGMVFpeExRVUZMWkN4UFFVRk1MRU5CUVdGbExHTkJRWEJETEVOQlFXaENPMEZCUTBFc1YwRkJTME1zVDBGQlRDeEhRVUZsTEV0QlFVdG1MRkZCUVV3c1EwRkJZMkVzU1VGQlpDeFBRVUYxUWl4TFFVRkxaQ3hQUVVGTUxFTkJRV0ZwUWl4VlFVRndReXhEUVVGbU96dEJRVVZCTEZWQlFVbERMRlZCUVZVc1MwRkJTMnBDTEZGQlFVd3NRMEZCWTJFc1NVRkJaQ3hEUVVGdFFpeExRVUZ1UWl4RFFVRmtPMEZCUVVFc1ZVRkRTVXNzWVVGQllTeExRVUZMU0N4UFFVRk1MRU5CUVdGSkxFMUJRV0lzUTBGQmIwSXNXVUZCY0VJc1EwRkVha0k3UVVGQlFTeFZRVVZKUXl4TFFVRkxMRXRCUVV0d1FpeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRbTlDTEVWQlFXcENMRWxCUVhWQ0xHdERRVUZaTEVOQlFWb3NSVUZCWlN4UFFVRm1MRU5CUm1oRE96dEJRVWxCTEZkQlFVdHdRaXhSUVVGTUxFTkJRV054UWl4SlFVRmtMRU5CUVcxQ08wRkJRMnBDTEhWQ1FVRmxSQ3hGUVVSRk8wRkJSV3BDTEdOQlFVMUJPMEZCUmxjc1QwRkJia0k3TzBGQlMwRXNWVUZCU1N4RFFVRkRSaXhYUVVGWFNTeE5RVUZvUWl4RlFVRjNRanRCUVVOMFFpeGhRVUZMVUN4UFFVRk1MRU5CUVdGUkxFVkJRV0lzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUpETEZGQlFXNUNMRU5CUVRSQ0xGZEJRVFZDTzBGQlEwUTdPMEZCUlVRc1ZVRkJTU3hEUVVGRExFdEJRVXQ2UWl4UFFVRk1MRU5CUVdFd1FpeE5RVUZzUWl4RlFVRXdRanRCUVVONFFpeGhRVUZMVml4UFFVRk1MRU5CUVdGVExGRkJRV0lzUTBGQmMwSXNZVUZCZEVJN1FVRkRSRHM3UVVGRlJDeFZRVUZKVUN4UlFVRlJTeXhOUVVGYUxFVkJRVzlDTzBGQlEyeENMRFpEUVVGbFRDeFBRVUZtTEVWQlFYZENMRXRCUVV0VExHZENRVUZNTEVOQlFYTkNReXhKUVVGMFFpeERRVUV5UWl4SlFVRXpRaXhEUVVGNFFqdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MR0ZCUVV0RUxHZENRVUZNTEVkQlJFc3NRMEZEYlVJN1FVRkRla0k3TzBGQlJVUXNWVUZCU1N4TFFVRkxNMElzVDBGQlRDeERRVUZoTmtJc1QwRkJha0lzUlVGQk1FSTdRVUZEZUVJc1lVRkJTME1zV1VGQlREdEJRVU5FT3p0QlFVVkVMRmRCUVV0RExFOUJRVXc3TzBGQlJVRXNWVUZCU1N4TFFVRkxMMElzVDBGQlRDeERRVUZoWjBNc1VVRkJZaXhKUVVGNVFpeExRVUZMYUVJc1QwRkJUQ3hEUVVGaFR5eE5RVUZpTEVkQlFYTkNMRU5CUVc1RUxFVkJRWE5FTzBGQlEzQkVMR0ZCUVV0VkxFOUJRVXc3UVVGRFJEczdRVUZGUkN4VlFVRkpMRXRCUVV0cVF5eFBRVUZNTEVOQlFXRnJReXhWUVVGcVFpeEZRVUUyUWp0QlFVRkZPMEZCUXpkQ0xHRkJRVXR5UWl4UlFVRk1MRU5CUVdOVExFbEJRV1FzUTBGQmJVSXNWVUZCYmtJc1JVRkJLMElzUTBGQkwwSTdRVUZEUkR0QlFVTkdPenRCUVVWRU96czdPenM3T3p0dFEwRkxaVHRCUVVOaUxGZEJRVXRoTEZGQlFVd3NSMEZCWjBJc1MwRkJTMnhETEZGQlFVd3NRMEZCWTJFc1NVRkJaQ3hQUVVGMVFpeExRVUZMWkN4UFFVRk1MRU5CUVdGdlF5eFpRVUZ3UXl4RlFVRnZSSFJDTEVsQlFYQkVMRU5CUVhsRUxGRkJRWHBFTEVOQlFXaENPMEZCUTBRN08wRkJSVVE3T3pzN096czdPRUpCU1ZVN1FVRkRVaXhWUVVGSmRVSXNVVUZCVVN4SlFVRmFPMEZCUTBFc1YwRkJTME1zUzBGQlRDeEhRVUZoTEVsQlFVbERMSE5DUVVGS0xFTkJRMWdzUzBGQlMzUkRMRkZCUkUwc1JVRkZXRHRCUVVORmRVTXNhMEpCUVZVc1MwRkJTM2hETEU5QlFVd3NRMEZCWVhsRExGVkJSSHBDTzBGQlJVVkRMR3RDUVVGVk8wRkJSbG9zVDBGR1Z5eEZRVTFZTEZsQlFWYzdRVUZEVkV3c1kwRkJUVTBzVjBGQlRpeERRVUZyUWl4SlFVRnNRanRCUVVORUxFOUJVbFVzUTBGQllqdEJRVk5CTEZkQlFVdE1MRXRCUVV3c1EwRkJWMDBzUzBGQldEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dDFRMEZMYlVJN1FVRkRha0lzVlVGQlNWQXNVVUZCVVN4SlFVRmFPMEZCUTBFc1YwRkJTMUVzYVVKQlFVdzdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPM05EUVUxclFrTXNSU3hGUVVGSk8wRkJRVU03UVVGRGNrSXNWVUZCU1VNc1RVRkJUU3hEUVVGV08wRkJRVUVzVlVGQllVTXNTVUZCWWp0QlFVRkJMRlZCUVcxQ1F5eFZRVUZWTEVOQlFUZENPMEZCUVVFc1ZVRkJaME5hTEZGQlFWRXNTVUZCZUVNN08wRkJSVUVzVjBGQlMzSkNMRTlCUVV3c1EwRkJZV3RETEVsQlFXSXNRMEZCYTBJc1dVRkJWenRCUVVNelFrWXNaVUZCVHl4TFFVRkxSeXh4UWtGQlRDeEhRVUUyUWtNc1RVRkJjRU03UVVGRFFTdzRRa0ZCUlN4SlFVRkdMRVZCUVZFNVFpeEpRVUZTTEVOQlFXRXNXVUZCWWl4RlFVRXlRakpDTEU5QlFUTkNPenRCUVVWQkxGbEJRVWtzUTBGQlF5eFBRVUZQU1N4SlFVRlFMRU5CUVZrc2MwSkJRVVVzU1VGQlJpeEZRVUZSTEVOQlFWSXNSVUZCVnk5RExGTkJRWFpDTEVOQlFVUXNTVUZCYzBNclFpeE5RVUZOY2tJc1QwRkJUaXhEUVVGalNTeE5RVUZrTEVOQlFYRkNMRmxCUVhKQ0xFVkJRVzFETEVOQlFXNURMRTFCUVRCRGFVSXNUVUZCVFhKQ0xFOUJRVTRzUTBGQlkxRXNSVUZCWkN4RFFVRnBRbmxDTEU5QlFXcENMRVZCUVRCQ0xFTkJRVEZDTEVOQlFYQkdMRVZCUVd0SU8wRkJRVU03UVVGRGFrZ3NaME5CUVVVc1NVRkJSaXhGUVVGUlN5eEhRVUZTTEVOQlFWa3NSVUZCUXl4WlFVRlpMRlZCUVdJc1JVRkJlVUlzVjBGQlZ5eE5RVUZ3UXl4RlFVRmFPMEZCUTBRN1FVRkRSRkFzWTBGQlRVTXNUMEZCVDBRc1IwRkJVQ3hIUVVGaFF5eEpRVUZpTEVkQlFXOUNSQ3hIUVVFeFFqdEJRVU5CUlR0QlFVTkVMRTlCVkVRN08wRkJWMEVzVlVGQlNVRXNXVUZCV1N4TFFVRkxha01zVDBGQlRDeERRVUZoVHl4TlFVRTNRaXhGUVVGeFF6dEJRVU51UXl4aFFVRkxWaXhSUVVGTUxFTkJRV041UXl4SFFVRmtMRU5CUVd0Q0xFVkJRVU1zVlVGQlZWQXNSMEZCV0N4RlFVRnNRaXhGUVVSdFF5eERRVU5ETzBGQlEzQkRMRmxCUVVkRUxFVkJRVWdzUlVGQlR6dEJRVUZEUVN4aFFVRkhReXhIUVVGSU8wRkJRVk1zVTBGR2EwSXNRMEZGYWtJN1FVRkRia0k3UVVGRFJqczdRVUZGUkRzN096czdPenM3YjBOQlMyZENTeXhOTEVWQlFWRTdRVUZEZEVJc1YwRkJTM0JETEU5QlFVd3NRMEZCWVd0RExFbEJRV0lzUTBGQmEwSXNXVUZCVnp0QlFVTXpRaXc0UWtGQlJTeEpRVUZHTEVWQlFWRkpMRWRCUVZJc1EwRkJXU3haUVVGYUxFVkJRVEJDUml4TlFVRXhRanRCUVVORUxFOUJSa1E3UVVGSFJEczdRVUZGUkRzN096czdPenM3T0VKQlMxVTdRVUZEVWl4VlFVRkpaaXhSUVVGUkxFbEJRVm83TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGZEJRVXR3UXl4UlFVRk1MRU5CUVdOelJDeEhRVUZrTEVOQlFXdENMSE5DUVVGc1FpeEZRVUV3UTBNc1JVRkJNVU1zUTBGQk5rTTdRVUZETTBNc0swSkJRWFZDTEV0QlFVczNRaXhuUWtGQlRDeERRVUZ6UWtNc1NVRkJkRUlzUTBGQk1rSXNTVUZCTTBJN1FVRkViMElzVDBGQk4wTTdRVUZIUVN4VlFVRkpMRXRCUVV0YUxFOUJRVXdzUTBGQllVOHNUVUZCWWl4SFFVRnpRaXhEUVVFeFFpeEZRVUUyUWpzN1FVRkZNMElzV1VGQlNTeExRVUZMZGtJc1QwRkJUQ3hEUVVGaGVVUXNTMEZCYWtJc1JVRkJkMEk3UVVGRGRFSXNaVUZCUzNwRExFOUJRVXdzUTBGQllYVkRMRWRCUVdJc1EwRkJhVUlzZDBOQlFXcENMRVZCUTBORExFVkJSRVFzUTBGRFNTeHZRa0ZFU2l4RlFVTXdRaXhWUVVGVFJTeERRVUZVTEVWQlFWYzdRVUZEYmtOQkxHTkJRVVZETEdOQlFVWTdRVUZEUVhSQ0xHdENRVUZOVFN4WFFVRk9MRU5CUVd0Q0xFbEJRV3hDTzBGQlEwUXNWMEZLUkN4RlFVbEhZU3hGUVVwSUxFTkJTVTBzY1VKQlNrNHNSVUZKTmtJc1ZVRkJVMFVzUTBGQlZDeEZRVUZYTzBGQlEzUkRRU3hqUVVGRlF5eGpRVUZHTzBGQlEwRjBRaXhyUWtGQlRVMHNWMEZCVGl4RFFVRnJRaXhMUVVGc1FqdEJRVU5FTEZkQlVFUTdRVUZSUkR0QlFVTkVPenRCUVVWQkxGbEJRVWtzUzBGQlN6TkRMRTlCUVV3c1EwRkJZV2RETEZGQlFXcENMRVZCUVRKQ08wRkJRM3BDTEdWQlFVdG9RaXhQUVVGTUxFTkJRV0YzUXl4RlFVRmlMRU5CUVdkQ0xHZENRVUZvUWl4RlFVRnJReXhaUVVGWE8wRkJRek5EYmtJc2EwSkJRVTF3UXl4UlFVRk9MRU5CUVdWSkxFbEJRV1lzUTBGQmIwSXNWMEZCY0VJc1JVRkJhVU5uUXl4TlFVRk5jRU1zVVVGQlRpeERRVUZsU1N4SlFVRm1MRU5CUVc5Q0xGZEJRWEJDTEVsQlFXMURMRXRCUVc1RExFZEJRVEpETEVsQlFUVkZPMEZCUTBGblF5eHJRa0ZCVFVNc1MwRkJUaXhEUVVGWlJDeE5RVUZOY0VNc1VVRkJUaXhEUVVGbFNTeEpRVUZtTEVOQlFXOUNMRmRCUVhCQ0xFbEJRVzFETEU5QlFXNURMRWRCUVRaRExFOUJRWHBFTzBGQlEwUXNWMEZJUkRzN1FVRkxRU3hqUVVGSkxFdEJRVXRNTEU5QlFVd3NRMEZCWVRSRUxGbEJRV3BDTEVWQlFTdENPMEZCUXpkQ0xHbENRVUZMTTBRc1VVRkJUQ3hEUVVGamRVUXNSVUZCWkN4RFFVRnBRaXh4UWtGQmFrSXNSVUZCZDBNc1dVRkJWenRCUVVOcVJHNUNMRzlDUVVGTlF5eExRVUZPTEVOQlFWbDFRaXhMUVVGYU8wRkJRMFFzWVVGR1JDeEZRVVZIVEN4RlFVWklMRU5CUlUwc2NVSkJSazRzUlVGRk5rSXNXVUZCVnp0QlFVTjBReXhyUWtGQlNTeERRVUZEYmtJc1RVRkJUWEJETEZGQlFVNHNRMEZCWlVrc1NVRkJaaXhEUVVGdlFpeFhRVUZ3UWl4RFFVRk1MRVZCUVhWRE8wRkJRM0pEWjBNc2MwSkJRVTFETEV0QlFVNHNRMEZCV1Uwc1MwRkJXanRCUVVORU8wRkJRMFlzWVVGT1JEdEJRVTlFTzBGQlEwWTdPMEZCUlVRc1dVRkJTU3hMUVVGTE5VTXNUMEZCVEN4RFFVRmhPRVFzVlVGQmFrSXNSVUZCTmtJN1FVRkRNMElzWTBGQlNVTXNXVUZCV1N4TFFVRkxPVVFzVVVGQlRDeERRVUZqWVN4SlFVRmtMRTlCUVhWQ0xFdEJRVXRrTEU5QlFVd3NRMEZCWVdkRkxGTkJRWEJETEZkQlFXMUVMRXRCUVV0b1JTeFBRVUZNTEVOQlFXRnBSU3hUUVVGb1JTeERRVUZvUWp0QlFVTkJSaXh2UWtGQlZYcERMRWxCUVZZc1EwRkJaU3hWUVVGbUxFVkJRVEpDTEVOQlFUTkNPMEZCUTBFN1FVRkVRU3hYUVVWRGEwTXNSVUZHUkN4RFFVVkpMR3REUVVaS0xFVkJSWGRETEZWQlFWTkZMRU5CUVZRc1JVRkJWenRCUVVONFJFRXNZMEZCUlVNc1kwRkJSanRCUVVOUGRFSXNhMEpCUVUxTkxGZEJRVTRzUTBGQmEwSXNjMEpCUVVVc1NVRkJSaXhGUVVGUmRVSXNVVUZCVWl4RFFVRnBRamRDTEUxQlFVMXlReXhQUVVGT0xFTkJRV05uUlN4VFFVRXZRaXhEUVVGc1FqdEJRVU5FTEZkQlRFUTdRVUZOUkRzN1FVRkZSQ3haUVVGSkxFdEJRVXRvUlN4UFFVRk1MRU5CUVdFMlFpeFBRVUZxUWl4RlFVRXdRanRCUVVONFFpeGxRVUZMVFN4UlFVRk1MRU5CUVdOeFFpeEZRVUZrTEVOQlFXbENMR3REUVVGcVFpeEZRVUZ4UkN4WlFVRlhPMEZCUXpsRUxHZENRVUZKTEdGQlFXRklMRWxCUVdJc1EwRkJhMElzUzBGQlN5OURMRk5CUVhaQ0xFTkJRVW9zUlVGQmRVTTdRVUZCUlN4eFFrRkJUeXhMUVVGUU8wRkJRV1VzWVVGRVRTeERRVU5PTzBGQlEzaEVMR2RDUVVGSk5rUXNUVUZCVFN4elFrRkJSU3hKUVVGR0xFVkJRVkU1UkN4SlFVRlNMRU5CUVdFc1QwRkJZaXhEUVVGV08wRkJRVUVzWjBKQlEwRXJSQ3hOUVVGTlJDeE5RVUZOT1VJc1RVRkJUWEpDTEU5QlFVNHNRMEZCWTBrc1RVRkJaQ3hEUVVGeFFpeFpRVUZ5UWl4RlFVRnRRMllzU1VGQmJrTXNRMEZCZDBNc1QwRkJlRU1zUTBGRVdqdEJRVUZCTEdkQ1FVVkJaMFVzVTBGQlUyaERMRTFCUVUxeVFpeFBRVUZPTEVOQlFXTlJMRVZCUVdRc1EwRkJhVUl5UXl4SFFVRnFRaXhEUVVaVU96dEJRVWxCT1VJc2EwSkJRVTFOTEZkQlFVNHNRMEZCYTBKNVFpeEhRVUZzUWl4RlFVRjFRa01zVFVGQmRrSXNSVUZCSzBKR0xFZEJRUzlDTzBGQlEwUXNWMEZRUkR0QlFWRkVPenRCUVVWRUxGbEJRVWtzUzBGQlMyNUZMRTlCUVV3c1EwRkJZV3RETEZWQlFXcENMRVZCUVRaQ08wRkJRek5DTEdWQlFVdHlRaXhSUVVGTUxFTkJRV041UkN4SFFVRmtMRU5CUVd0Q0xFdEJRVXR1UXl4UlFVRjJRaXhGUVVGcFEzRkNMRVZCUVdwRExFTkJRVzlETEd0Q1FVRndReXhGUVVGM1JDeFZRVUZUUlN4RFFVRlVMRVZCUVZrN1FVRkRiRVU3UVVGRFFXaEVMSEZEUVVGVE5rUXNVMEZCVkN4RFFVRnRRbUlzUTBGQmJrSXNSVUZCYzBJc1QwRkJkRUlzUlVGQkswSTdRVUZETjBKakxHOUNRVUZOTEdkQ1FVRlhPMEZCUTJadVF5eHpRa0ZCVFUwc1YwRkJUaXhEUVVGclFpeEpRVUZzUWp0QlFVTkVMR1ZCU0RSQ08wRkJTVGRDT0VJc2QwSkJRVlVzYjBKQlFWYzdRVUZEYmtKd1F5eHpRa0ZCVFUwc1YwRkJUaXhEUVVGclFpeExRVUZzUWp0QlFVTkVMR1ZCVGpSQ08wRkJUemRDSzBJc2RVSkJRVk1zYlVKQlFWYzdRVUZCUlR0QlFVTndRaXh2UWtGQlNTeHpRa0ZCUldoQ0xFVkJRVVZwUWl4TlFVRktMRVZCUVZsRExFVkJRVm9zUTBGQlpYWkRMRTFCUVUxR0xGRkJRWEpDTEVOQlFVb3NSVUZCYjBNN1FVRkRiRU5GTEhkQ1FVRk5SaXhSUVVGT0xFTkJRV1ZtTEUxQlFXWXNRMEZCYzBJc1dVRkJkRUlzUlVGQmIwTjVSQ3hMUVVGd1F6dEJRVU5FTzBGQlEwWTdRVUZZTkVJc1lVRkJMMEk3UVVGaFJDeFhRV1pFTzBGQlowSkVPMEZCUTBZN1FVRkRSanM3UVVGRlJEczdPenM3T3paQ1FVZFRPMEZCUTFBN1FVRkRRU3hWUVVGSkxFOUJRVThzUzBGQlN6ZEVMRTlCUVZvc1NVRkJkVUlzVjBGQk0wSXNSVUZCZDBNN1FVRkRkRU03UVVGRFJEczdRVUZGUkN4VlFVRkpMRXRCUVV0QkxFOUJRVXdzUTBGQllVOHNUVUZCWWl4SFFVRnpRaXhEUVVFeFFpeEZRVUUyUWp0QlFVTXpRanRCUVVOQkxHRkJRVXQwUWl4UlFVRk1MRU5CUVdOelJDeEhRVUZrTEVOQlFXdENMRmRCUVd4Q0xFVkJRU3RDZWtNc1NVRkJMMElzUTBGQmIwTXNSMEZCY0VNc1JVRkJlVU41UXl4SFFVRjZReXhEUVVFMlF5eFhRVUUzUXpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzUzBGQlMzWkVMRTlCUVV3c1EwRkJZV2RETEZGQlFXcENMRVZCUVRKQ08wRkJRM3BDTEdWQlFVdE5MRXRCUVV3c1EwRkJWM2RETEU5QlFWZzdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHRkJRVXM1UkN4UFFVRk1MRU5CUVdGclF5eEpRVUZpTEVOQlFXdENMRlZCUVZNMlFpeEZRVUZVTEVWQlFXRTdRVUZETjBJc1owTkJRVVZCTEVWQlFVWXNSVUZCVFVNc1YwRkJUaXhEUVVGclFpd3lRa0ZCYkVJc1JVRkRSME1zVlVGRVNDeERRVU5qTEZkQlJHUXNSVUZGUjBNc1NVRkdTRHRCUVVkRUxGTkJTa1E3TzBGQlRVRTdRVUZEUVN4aFFVRkxiRVVzVDBGQlRDeERRVUZoYlVVc1MwRkJZaXhIUVVGeFFqRkVMRkZCUVhKQ0xFTkJRVGhDTEZkQlFUbENMRVZCUVRKRE1rUXNTVUZCTTBNN08wRkJSVUU3UVVGRFFTeGhRVUZMYmtZc1VVRkJUQ3hEUVVGamIwWXNUMEZCWkN4RFFVRnpRaXh6UWtGQmRFSXNSVUZCT0VNc1EwRkJReXhMUVVGTGNrVXNUMEZCVEN4RFFVRmhiVVVzUzBGQllpeEZRVUZFTEVOQlFUbERPenRCUVVWQk8wRkJRMEVzV1VGQlNTeExRVUZMYmtZc1QwRkJUQ3hEUVVGaE5rSXNUMEZCYWtJc1JVRkJNRUk3UVVGRGVFSXNaVUZCUzNsRUxHTkJRVXdzUTBGQmIwSXNRMEZCY0VJN1FVRkRSRHRCUVVOR08wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdPMmREUVZGWlF5eExMRVZCUVU5RExGY3NSVUZCWVhKQ0xFY3NSVUZCU3p0QlFVTnVReXhWUVVGSkxFTkJRVU1zUzBGQlMyNUVMRTlCUVZZc1JVRkJiVUk3UVVGQlF6dEJRVUZUTEU5QlJFMHNRMEZEVER0QlFVTTVRaXhWUVVGSmVVVXNXVUZCV1N4TFFVRkxla1VzVDBGQlRDeERRVUZoU1N4TlFVRmlMRU5CUVc5Q0xGbEJRWEJDTEVWQlFXdERTU3hGUVVGc1F5eERRVUZ4UXl4RFFVRnlReXhEUVVGb1FqczdRVUZGUVN4VlFVRkpMRTlCUVU4MlFpeEpRVUZRTEVOQlFWbHZReXhWUVVGVkxFTkJRVllzUlVGQllXNUdMRk5CUVhwQ0xFTkJRVW9zUlVGQmVVTTdRVUZCUlN4bFFVRlBMRXRCUVZBN1FVRkJaU3hQUVVwMlFpeERRVWwzUWpzN1FVRkZNMFFzVlVGQlNXOUdMR05CUVdNc1MwRkJTekZGTEU5QlFVd3NRMEZCWVcxRkxFdEJRV0lzUlVGQmJFSTdRVUZCUVN4VlFVTkJVU3hoUVVGaExFdEJRVXN6UlN4UFFVRk1MRU5CUVdFMFJTeEpRVUZpTEVWQlJHSTdRVUZCUVN4VlFVVkJReXhSUVVGUlRpeFJRVUZSTEU5QlFWSXNSMEZCYTBJc1RVRkdNVUk3UVVGQlFTeFZRVWRCVHl4VFFVRlRVQ3hSUVVGUkxFMUJRVklzUjBGQmFVSXNUMEZJTVVJN1FVRkJRU3hWUVVsQmJFUXNVVUZCVVN4SlFVcFNPMEZCUVVFc1ZVRkxRVEJFTEZOQlRFRTdPMEZCVDBFc1ZVRkJTU3hEUVVGRFVDeFhRVUZNTEVWQlFXdENPMEZCUVVVN1FVRkRiRUpQTEc5Q1FVRlpVaXhSUVVGUk8wRkJRMjVDTEdGQlFVdDJSaXhQUVVGTUxFTkJRV0ZuUnl4WlFVRmlMRWRCUVRSQ1VDeFZRVUZWYWtJc1NVRkJWaXhQUVVGdFFpeExRVUZMZUVVc1QwRkJUQ3hEUVVGaGFVSXNWVUZCYUVNc1JVRkJPRU5OTEUxQlFUbERMRWRCUVhWRWEwVXNWVUZCVldwQ0xFbEJRVllzVDBGQmJVSXNTMEZCUzNoRkxFOUJRVXdzUTBGQllXbENMRlZCUVdoRExFTkJRWFpFTEVkQlFYVkhlVVVzVjBGQmJra3NSMEZCYVVwRUxGVkJRVlZxUWl4SlFVRldMRTlCUVcxQ0xFdEJRVXQ0UlN4UFFVRk1MRU5CUVdGcFFpeFZRVUZvUXl4RFFVUjBTU3hIUVVOdlREdEJRVVV2VEN4aFFVRkxha0lzVDBGQlRDeERRVUZoWjBjc1dVRkJZaXhIUVVFMFFsQXNWVUZCVlZFc1NVRkJWaXhQUVVGdFFpeExRVUZMYWtjc1QwRkJUQ3hEUVVGaGFVSXNWVUZCYUVNc1JVRkJPRU5OTEUxQlFUbERMRWRCUVhWRWEwVXNWVUZCVlZFc1NVRkJWaXhQUVVGdFFpeExRVUZMYWtjc1QwRkJUQ3hEUVVGaGFVSXNWVUZCYUVNc1EwRkJka1FzUjBGQmRVY3dSU3hWUVVGdVNTeEhRVUZuU2tZc1ZVRkJWVkVzU1VGQlZpeFBRVUZ0UWl4TFFVRkxha2NzVDBGQlRDeERRVUZoYVVJc1ZVRkJhRU1zUTBGSWFrb3NRMEZFWjBJc1EwRkpaMHc3UVVGRGFrMHNUMEZNUkN4TlFVdFBPMEZCUTB3NFJTeHZRa0ZCV1ZBc1YwRkJXanRCUVVORU96dEJRVVZFTEZWQlFVbFBMRlZCUVZWNFJTeE5RVUZrTEVWQlFYTkNPMEZCUTNCQ096czdPMEZCU1VFc1lVRkJTM1JDTEZGQlFVd3NRMEZCWTI5R0xFOUJRV1FzUTBGQmMwSXNORUpCUVhSQ0xFVkJRVzlFTEVOQlFVTkpMRk5CUVVRc1JVRkJXVTBzVTBGQldpeERRVUZ3UkRzN1FVRkZRU3haUVVGSkxFdEJRVXN2Uml4UFFVRk1MRU5CUVdFMlFpeFBRVUZxUWl4RlFVRXdRanRCUVVONFFuTkRMR2RDUVVGTlFTeFBRVUZQTEV0QlFVdHVSQ3hQUVVGTUxFTkJRV0ZyUml4TFFVRmlMRU5CUVcxQ1NDeFRRVUZ1UWl4RFFVRmlMRU5CUkhkQ0xFTkJRMjlDTzBGQlF6VkRMR1ZCUVV0VUxHTkJRVXdzUTBGQmIwSnVRaXhIUVVGd1FqdEJRVU5FT3p0QlFVVkVMRmxCUVVrc1MwRkJTMjVGTEU5QlFVd3NRMEZCWVRCQ0xFMUJRV0lzU1VGQmRVSXNRMEZCUXl4TFFVRkxla0lzVVVGQlRDeERRVUZqTWtVc1JVRkJaQ3hEUVVGcFFpeFRRVUZxUWl4RFFVRTFRaXhGUVVGNVJEdEJRVU4yUkhWQ0xHdERRVUZQUXl4VFFVRlFMRU5CUTBWTUxGVkJRVlYwUlN4UlFVRldMRU5CUVcxQ0xGZEJRVzVDTEVWQlFXZEROa0lzUjBGQmFFTXNRMEZCYjBNc1JVRkJReXhaUVVGWkxGVkJRV0lzUlVGQmVVSXNUMEZCVHl4RFFVRm9ReXhGUVVGd1F5eERRVVJHTEVWQlJVVXNTMEZCUzNSRUxFOUJRVXdzWjBKQlFUQkNOa1lzUzBGQk1VSXNRMEZHUml4RlFVZEZMRmxCUVZVN1FVRkRVa1VzYzBKQlFWVjZReXhIUVVGV0xFTkJRV01zUlVGQlF5eFpRVUZaTEZWQlFXSXNSVUZCZVVJc1YwRkJWeXhQUVVGd1F5eEZRVUZrTEVWQlEwTm9ReXhKUVVSRUxFTkJRMDBzVjBGRVRpeEZRVU50UWl4UlFVUnVRanRCUVVWSUxGZEJUa1E3TzBGQlVVRTJSU3hyUTBGQlQwVXNWVUZCVUN4RFFVTkZXaXhWUVVGVlZDeFhRVUZXTEVOQlFYTkNMRmRCUVhSQ0xFTkJSRVlzUlVGRlJTeExRVUZMYUVZc1QwRkJUQ3hsUVVGNVFqaEdMRTFCUVhwQ0xFTkJSa1lzUlVGSFJTeFpRVUZWTzBGQlExSk1MSE5DUVVGVlVpeFZRVUZXTEVOQlFYRkNMRmRCUVhKQ08wRkJRMEVzWjBKQlFVYzFReXhOUVVGTmNrTXNUMEZCVGl4RFFVRmpaME1zVVVGQlpDeEpRVUV3UWl4RFFVRkRTeXhOUVVGTlF5eExRVUZPTEVOQlFWbG5SU3hSUVVFeFF5eEZRVUZ0UkR0QlFVTnFSR3BGTEc5Q1FVRk5ReXhMUVVGT0xFTkJRVmwzUXl4UFFVRmFPMEZCUTBRN1FVRkRSRHRCUVVORUxGZEJWRWc3UVVGVlJDeFRRVzVDUkN4TlFXMUNUenRCUVVOTVZ5eHZRa0ZCVlZRc1YwRkJWaXhEUVVGelFpeHBRa0ZCZEVJc1JVRkJlVU5ETEZWQlFYcERMRU5CUVc5RUxGZEJRWEJFTEVWQlFXbEZReXhKUVVGcVJUdEJRVU5CWVN4dlFrRkJWWFJGTEZGQlFWWXNRMEZCYlVJc2FVSkJRVzVDTEVWQlFYTkRTQ3hKUVVGMFF5eERRVUV5UXl4WFFVRXpReXhGUVVGM1JDeFJRVUY0UkN4RlFVRnJSVGhFTEVsQlFXeEZPMEZCUTBFc1kwRkJTU3hMUVVGTGNFWXNUMEZCVEN4RFFVRmhaME1zVVVGQllpeEpRVUY1UWl4RFFVRkRMRXRCUVV0TkxFdEJRVXdzUTBGQlYyZEZMRkZCUVhwRExFVkJRVzFFTzBGQlEycEVMR2xDUVVGTGFFVXNTMEZCVEN4RFFVRlhkME1zVDBGQldEdEJRVU5FTzBGQlEwWTdRVUZEU0RzN096dEJRVWxGTEdGQlFVczNSU3hSUVVGTUxFTkJRV052Uml4UFFVRmtMRU5CUVhOQ0xITkNRVUYwUWl4RlFVRTRReXhEUVVGRFZTeFRRVUZFTEVOQlFUbERPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN08yMURRVTFsTlVJc1J5eEZRVUZMTzBGQlEyeENMRlZCUVVsdlF5eGhRVUZoTEV0QlFVdDBSeXhSUVVGTUxFTkJRV05oTEVsQlFXUXNUMEZCZFVJc1MwRkJTMlFzVDBGQlRDeERRVUZoYjBNc1dVRkJjRU1zUlVGRGFFSjBRaXhKUVVSblFpeERRVU5ZTEZsQlJGY3NSVUZEUjJ0RkxGZEJSRWdzUTBGRFpTeFhRVVJtTEVWQlF6UkNkMElzU1VGRU5VSXNSVUZCYWtJN1FVRkJRU3hWUVVWQlF5eFBRVUZQUml4WFFVRlhla1lzU1VGQldDeERRVUZuUWl4WFFVRm9RaXhGUVVFMlFqUkdMRTFCUVRkQ0xFVkJSbEE3UVVGQlFTeFZRVWRCUXl4aFFVRmhMRXRCUVV0NFJTeFJRVUZNTEVOQlFXTllMRVZCUVdRc1EwRkJhVUl5UXl4SFFVRnFRaXhGUVVGelFqRkRMRkZCUVhSQ0xFTkJRU3RDTEZkQlFTOUNMRVZCUVRSRGJVWXNUVUZCTlVNc1EwRkJiVVJJTEVsQlFXNUVMRU5CU0dJN1FVRkpSRHM3UVVGRlJEczdPenM3T3pzclFrRkpWenRCUVVOVUxGZEJRVXQ0Unl4UlFVRk1MRU5CUVdOelJDeEhRVUZrTEVOQlFXdENMRmRCUVd4Q0xFVkJRU3RDZWtNc1NVRkJMMElzUTBGQmIwTXNSMEZCY0VNc1JVRkJlVU41UXl4SFFVRjZReXhEUVVFMlF5eFhRVUUzUXl4RlFVRXdSSE5FTEVkQlFURkVMRWRCUVdkRk0wSXNTVUZCYUVVN1FVRkRSRHM3T3p0RlFYWllhVUkwUWl4clFqczdRVUV3V0hCQ2FFZ3NUVUZCVFUwc1VVRkJUaXhIUVVGcFFqdEJRVU5tT3pzN096czdRVUZOUVhsQ0xGZEJRVk1zU1VGUVRUdEJRVkZtT3pzN096czdRVUZOUVdsRExHTkJRVmtzU1VGa1J6dEJRV1ZtT3pzN096czdRVUZOUVdsRUxHMUNRVUZwUWl4blFrRnlRa1k3UVVGelFtWTdPenM3T3p0QlFVMUJReXhyUWtGQlowSXNhVUpCTlVKRU8wRkJOa0ptT3pzN096czdPMEZCVDBGRExHdENRVUZuUWl4bFFYQkRSRHRCUVhGRFpqczdPenM3TzBGQlRVRkRMR2xDUVVGbExHZENRVE5EUVR0QlFUUkRaanM3T3pzN08wRkJUVUZzUml4WlFVRlZMRWxCYkVSTE8wRkJiVVJtT3pzN096czdRVUZOUVZNc1kwRkJXU3hKUVhwRVJ6dEJRVEJFWmpzN096czdPMEZCVFVGMVJDeG5Ra0ZCWXl4SlFXaEZRenRCUVdsRlpqczdPenM3TzBGQlRVRjJReXhUUVVGUExFbEJka1ZSTzBGQmQwVm1PenM3T3pzN1FVRk5RVWNzWjBKQlFXTXNTVUU1UlVNN1FVRXJSV1k3T3pzN096dEJRVTFCTVVJc1kwRkJXU3hKUVhKR1J6dEJRWE5HWmpzN096czdPMEZCVFVGdVFpeHJRa0ZCWjBJc2FVSkJOVVpFTzBGQk5rWm1PenM3T3pzN1FVRk5RVVVzWTBGQldTeGhRVzVIUnp0QlFXOUhaanM3T3pzN08wRkJUVUZ0UWl4blFrRkJZeXhsUVRGSFF6dEJRVEpIWmpzN096czdPMEZCVFVFMFFpeGhRVUZYTEZsQmFraEpPMEZCYTBobU96czdPenM3UVVGTlFVTXNZVUZCVnl4blFrRjRTRWs3UVVGNVNHWTdPenM3T3p0QlFVMUJka01zVlVGQlVUdEJRUzlJVHl4RFFVRnFRanM3VVVGclNWRTFRaXhMTEVkQlFVRkJMRXNpTENKbWFXeGxJam9pWm05MWJtUmhkR2x2Ymk1dmNtSnBkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXMXdiM0owSUNRZ1puSnZiU0FuYW5GMVpYSjVKenRjYm1sdGNHOXlkQ0I3SUV0bGVXSnZZWEprSUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1YTJWNVltOWhjbVFuTzF4dWFXMXdiM0owSUhzZ1RXOTBhVzl1SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1Ylc5MGFXOXVKenRjYm1sdGNHOXlkQ0I3SUZScGJXVnlJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5WMGFXd3VkR2x0WlhJbk8xeHVhVzF3YjNKMElIc2diMjVKYldGblpYTk1iMkZrWldRZ2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVkWFJwYkM1cGJXRm5aVXh2WVdSbGNpYzdYRzVwYlhCdmNuUWdleUJIWlhSWmIwUnBaMmwwY3lCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG1OdmNtVW5PMXh1YVcxd2IzSjBJSHNnVUd4MVoybHVJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWM3WEc1cGJYQnZjblFnZXlCVWIzVmphQ0I5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMblJ2ZFdOb0oxeHVYRzVjYmk4cUtseHVJQ29nVDNKaWFYUWdiVzlrZFd4bExseHVJQ29nUUcxdlpIVnNaU0JtYjNWdVpHRjBhVzl1TG05eVltbDBYRzRnS2lCQWNtVnhkV2x5WlhNZ1ptOTFibVJoZEdsdmJpNTFkR2xzTG10bGVXSnZZWEprWEc0Z0tpQkFjbVZ4ZFdseVpYTWdabTkxYm1SaGRHbHZiaTUxZEdsc0xtMXZkR2x2Ymx4dUlDb2dRSEpsY1hWcGNtVnpJR1p2ZFc1a1lYUnBiMjR1ZFhScGJDNTBhVzFsY2x4dUlDb2dRSEpsY1hWcGNtVnpJR1p2ZFc1a1lYUnBiMjR1ZFhScGJDNXBiV0ZuWlV4dllXUmxjbHh1SUNvZ1FISmxjWFZwY21WeklHWnZkVzVrWVhScGIyNHVkWFJwYkM1MGIzVmphRnh1SUNvdlhHNWNibU5zWVhOeklFOXlZbWwwSUdWNGRHVnVaSE1nVUd4MVoybHVJSHRjYmlBZ0x5b3FYRzRnSUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJwYm5OMFlXNWpaU0J2WmlCaGJpQnZjbUpwZENCallYSnZkWE5sYkM1Y2JpQWdLaUJBWTJ4aGMzTmNiaUFnS2lCQWJtRnRaU0JQY21KcGRGeHVJQ0FxSUVCd1lYSmhiU0I3YWxGMVpYSjVmU0JsYkdWdFpXNTBJQzBnYWxGMVpYSjVJRzlpYW1WamRDQjBieUJ0WVd0bElHbHVkRzhnWVc0Z1QzSmlhWFFnUTJGeWIzVnpaV3d1WEc0Z0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQlBkbVZ5Y21sa1pYTWdkRzhnZEdobElHUmxabUYxYkhRZ2NHeDFaMmx1SUhObGRIUnBibWR6TGx4dUlDQXFMMXh1SUNCZmMyVjBkWEFvWld4bGJXVnVkQ3dnYjNCMGFXOXVjeWw3WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZENBOUlHVnNaVzFsYm5RN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdKQzVsZUhSbGJtUW9lMzBzSUU5eVltbDBMbVJsWm1GMWJIUnpMQ0IwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvS1N3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZEdocGN5NWpiR0Z6YzA1aGJXVWdQU0FuVDNKaWFYUW5PeUF2THlCcFpUa2dZbUZqYXlCamIyMXdZWFJjYmx4dUlDQWdJRlJ2ZFdOb0xtbHVhWFFvSkNrN0lDOHZJRlJ2ZFdOb0lHbHVhWFFnYVhNZ2FXUmxiWEJ2ZEdWdWRDd2dkMlVnYW5WemRDQnVaV1ZrSUhSdklHMWhhMlVnYzNWeVpTQnBkQ2R6SUdsdWFYUnBZV3hwWldRdVhHNWNiaUFnSUNCMGFHbHpMbDlwYm1sMEtDazdYRzVjYmlBZ0lDQkxaWGxpYjJGeVpDNXlaV2RwYzNSbGNpZ25UM0ppYVhRbkxDQjdYRzRnSUNBZ0lDQW5iSFJ5SnpvZ2UxeHVJQ0FnSUNBZ0lDQW5RVkpTVDFkZlVrbEhTRlFuT2lBbmJtVjRkQ2NzWEc0Z0lDQWdJQ0FnSUNkQlVsSlBWMTlNUlVaVUp6b2dKM0J5WlhacGIzVnpKMXh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ2R5ZEd3bk9pQjdYRzRnSUNBZ0lDQWdJQ2RCVWxKUFYxOU1SVVpVSnpvZ0oyNWxlSFFuTEZ4dUlDQWdJQ0FnSUNBblFWSlNUMWRmVWtsSFNGUW5PaUFuY0hKbGRtbHZkWE1uWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCSmJtbDBhV0ZzYVhwbGN5QjBhR1VnY0d4MVoybHVJR0o1SUdOeVpXRjBhVzVuSUdwUmRXVnllU0JqYjJ4c1pXTjBhVzl1Y3l3Z2MyVjBkR2x1WnlCaGRIUnlhV0oxZEdWekxDQmhibVFnYzNSaGNuUnBibWNnZEdobElHRnVhVzFoZEdsdmJpNWNiaUFnS2lCQVpuVnVZM1JwYjI1Y2JpQWdLaUJBY0hKcGRtRjBaVnh1SUNBcUwxeHVJQ0JmYVc1cGRDZ3BJSHRjYmlBZ0lDQXZMeUJBVkU5RVR6b2dZMjl1YzJsa1pYSWdaR2x6WTNWemMybHZiaUJ2YmlCUVVpQWpPVEkzT0NCaFltOTFkQ0JFVDAwZ2NHOXNiSFYwYVc5dUlHSjVJR05vWVc1blpWTnNhV1JsWEc0Z0lDQWdkR2hwY3k1ZmNtVnpaWFFvS1R0Y2JseHVJQ0FnSUhSb2FYTXVKSGR5WVhCd1pYSWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtWnBibVFvWUM0a2UzUm9hWE11YjNCMGFXOXVjeTVqYjI1MFlXbHVaWEpEYkdGemMzMWdLVHRjYmlBZ0lDQjBhR2x6TGlSemJHbGtaWE1nUFNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb1lDNGtlM1JvYVhNdWIzQjBhVzl1Y3k1emJHbGtaVU5zWVhOemZXQXBPMXh1WEc0Z0lDQWdkbUZ5SUNScGJXRm5aWE1nUFNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb0oybHRaeWNwTEZ4dUlDQWdJQ0FnSUNCcGJtbDBRV04wYVhabElEMGdkR2hwY3k0a2MyeHBaR1Z6TG1acGJIUmxjaWduTG1sekxXRmpkR2wyWlNjcExGeHVJQ0FnSUNBZ0lDQnBaQ0E5SUhSb2FYTXVKR1ZzWlcxbGJuUmJNRjB1YVdRZ2ZId2dSMlYwV1c5RWFXZHBkSE1vTml3Z0oyOXlZbWwwSnlrN1hHNWNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb2UxeHVJQ0FnSUNBZ0oyUmhkR0V0Y21WemFYcGxKem9nYVdRc1hHNGdJQ0FnSUNBbmFXUW5PaUJwWkZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnYVdZZ0tDRnBibWwwUVdOMGFYWmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a2MyeHBaR1Z6TG1WeEtEQXBMbUZrWkVOc1lYTnpLQ2RwY3kxaFkzUnBkbVVuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lYUm9hWE11YjNCMGFXOXVjeTUxYzJWTlZVa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdUpITnNhV1JsY3k1aFpHUkRiR0Z6Y3lnbmJtOHRiVzkwYVc5dWRXa25LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSkdsdFlXZGxjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJRzl1U1cxaFoyVnpURzloWkdWa0tDUnBiV0ZuWlhNc0lIUm9hWE11WDNCeVpYQmhjbVZHYjNKUGNtSnBkQzVpYVc1a0tIUm9hWE1wS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hwY3k1ZmNISmxjR0Z5WlVadmNrOXlZbWwwS0NrN0x5OW9aV2hsWEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWlkV3hzWlhSektTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5c2IyRmtRblZzYkdWMGN5Z3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDJWMlpXNTBjeWdwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVoZFhSdlVHeGhlU0FtSmlCMGFHbHpMaVJ6Ykdsa1pYTXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnZEdocGN5NW5aVzlUZVc1aktDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aFkyTmxjM05wWW14bEtTQjdJQzh2SUdGc2JHOTNJSGR5WVhCd1pYSWdkRzhnWW1VZ1ptOWpkWE5oWW14bElIUnZJR1Z1WVdKc1pTQmhjbkp2ZHlCdVlYWnBaMkYwYVc5dVhHNGdJQ0FnSUNCMGFHbHpMaVIzY21Gd2NHVnlMbUYwZEhJb0ozUmhZbWx1WkdWNEp5d2dNQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUTNKbFlYUmxjeUJoSUdwUmRXVnllU0JqYjJ4c1pXTjBhVzl1SUc5bUlHSjFiR3hsZEhNc0lHbG1JSFJvWlhrZ1lYSmxJR0psYVc1bklIVnpaV1F1WEc0Z0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNvZ1FIQnlhWFpoZEdWY2JpQWdLaTljYmlBZ1gyeHZZV1JDZFd4c1pYUnpLQ2tnZTF4dUlDQWdJSFJvYVhNdUpHSjFiR3hsZEhNZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1acGJtUW9ZQzRrZTNSb2FYTXViM0IwYVc5dWN5NWliM2hQWmtKMWJHeGxkSE45WUNrdVptbHVaQ2duWW5WMGRHOXVKeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVFpYUnpJR0VnWUhScGJXVnlZQ0J2WW1wbFkzUWdiMjRnZEdobElHOXlZbWwwTENCaGJtUWdjM1JoY25SeklIUm9aU0JqYjNWdWRHVnlJR1p2Y2lCMGFHVWdibVY0ZENCemJHbGtaUzVjYmlBZ0tpQkFablZ1WTNScGIyNWNiaUFnS2k5Y2JpQWdaMlZ2VTNsdVl5Z3BJSHRjYmlBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhSb2FYTXVkR2x0WlhJZ1BTQnVaWGNnVkdsdFpYSW9YRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTEZ4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNCa2RYSmhkR2x2YmpvZ2RHaHBjeTV2Y0hScGIyNXpMblJwYldWeVJHVnNZWGtzWEc0Z0lDQWdJQ0FnSUdsdVptbHVhWFJsT2lCbVlXeHpaVnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGdVoyVlRiR2xrWlNoMGNuVmxLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdWRHbHRaWEl1YzNSaGNuUW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZObGRITWdkM0poY0hCbGNpQmhibVFnYzJ4cFpHVWdhR1ZwWjJoMGN5Qm1iM0lnZEdobElHOXlZbWwwTGx4dUlDQXFJRUJtZFc1amRHbHZibHh1SUNBcUlFQndjbWwyWVhSbFhHNGdJQ292WEc0Z0lGOXdjbVZ3WVhKbFJtOXlUM0ppYVhRb0tTQjdYRzRnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0IwYUdsekxsOXpaWFJYY21Gd2NHVnlTR1ZwWjJoMEtDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJEWVd4MWJHRjBaWE1nZEdobElHaGxhV2RvZENCdlppQmxZV05vSUhOc2FXUmxJR2x1SUhSb1pTQmpiMnhzWldOMGFXOXVMQ0JoYm1RZ2RYTmxjeUIwYUdVZ2RHRnNiR1Z6ZENCdmJtVWdabTl5SUhSb1pTQjNjbUZ3Y0dWeUlHaGxhV2RvZEM1Y2JpQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaUlDMGdZU0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIwYnlCbWFYSmxJSGRvWlc0Z1kyOXRjR3hsZEdVdVhHNGdJQ292WEc0Z0lGOXpaWFJYY21Gd2NHVnlTR1ZwWjJoMEtHTmlLU0I3THk5eVpYZHlhWFJsSUhSb2FYTWdkRzhnWUdadmNtQWdiRzl2Y0Z4dUlDQWdJSFpoY2lCdFlYZ2dQU0F3TENCMFpXMXdMQ0JqYjNWdWRHVnlJRDBnTUN3Z1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdkR2hwY3k0a2MyeHBaR1Z6TG1WaFkyZ29ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IwWlcxd0lEMGdkR2hwY3k1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LUzVvWldsbmFIUTdYRzRnSUNBZ0lDQWtLSFJvYVhNcExtRjBkSElvSjJSaGRHRXRjMnhwWkdVbkxDQmpiM1Z1ZEdWeUtUdGNibHh1SUNBZ0lDQWdhV1lnS0NFdmJYVnBMMmN1ZEdWemRDZ2tLSFJvYVhNcFd6QmRMbU5zWVhOelRtRnRaU2tnSmlZZ1gzUm9hWE11SkhOc2FXUmxjeTVtYVd4MFpYSW9KeTVwY3kxaFkzUnBkbVVuS1Zzd1hTQWhQVDBnWDNSb2FYTXVKSE5zYVdSbGN5NWxjU2hqYjNWdWRHVnlLVnN3WFNrZ2V5OHZhV1lnYm05MElIUm9aU0JoWTNScGRtVWdjMnhwWkdVc0lITmxkQ0JqYzNNZ2NHOXphWFJwYjI0Z1lXNWtJR1JwYzNCc1lYa2djSEp2Y0dWeWRIbGNiaUFnSUNBZ0lDQWdKQ2gwYUdsektTNWpjM01vZXlkd2IzTnBkR2x2YmljNklDZHlaV3hoZEdsMlpTY3NJQ2RrYVhOd2JHRjVKem9nSjI1dmJtVW5mU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J0WVhnZ1BTQjBaVzF3SUQ0Z2JXRjRJRDhnZEdWdGNDQTZJRzFoZUR0Y2JpQWdJQ0FnSUdOdmRXNTBaWElyS3p0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUlDaGpiM1Z1ZEdWeUlEMDlQU0IwYUdsekxpUnpiR2xrWlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVIzY21Gd2NHVnlMbU56Y3loN0oyaGxhV2RvZENjNklHMWhlSDBwT3lBdkwyOXViSGtnWTJoaGJtZGxJSFJvWlNCM2NtRndjR1Z5SUdobGFXZG9kQ0J3Y205d1pYSjBlU0J2Ym1ObExseHVJQ0FnSUNBZ2FXWW9ZMklwSUh0allpaHRZWGdwTzMwZ0x5OW1hWEpsSUdOaGJHeGlZV05ySUhkcGRHZ2diV0Y0SUdobGFXZG9kQ0JrYVcxbGJuTnBiMjR1WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVTJWMGN5QjBhR1VnYldGNExXaGxhV2RvZENCdlppQmxZV05vSUhOc2FXUmxMbHh1SUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDb3ZYRzRnSUY5elpYUlRiR2xrWlVobGFXZG9kQ2hvWldsbmFIUXBJSHRjYmlBZ0lDQjBhR2x6TGlSemJHbGtaWE11WldGamFDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ1FvZEdocGN5a3VZM056S0NkdFlYZ3RhR1ZwWjJoMEp5d2dhR1ZwWjJoMEtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRUZrWkhNZ1pYWmxiblFnYkdsemRHVnVaWEp6SUhSdklHSmhjMmxqWVd4c2VTQmxkbVZ5ZVhSb2FXNW5JSGRwZEdocGJpQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0tpQkFablZ1WTNScGIyNWNiaUFnS2lCQWNISnBkbUYwWlZ4dUlDQXFMMXh1SUNCZlpYWmxiblJ6S0NrZ2UxeHVJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ0FnSUM4dktpcE9iM2NnZFhOcGJtY2dZM1Z6ZEc5dElHVjJaVzUwSUMwZ2RHaGhibXR6SUhSdk9pb3FYRzRnSUNBZ0x5OHFLaUFnSUNBZ0lGbHZhR0ZwSUVGeVlYSmhkQ0J2WmlCVWIzSnZiblJ2SUNBZ0lDQWdLaXBjYmlBZ0lDQXZMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDQWdJQzh2WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1dlptWW9KeTV5WlhOcGVtVnRaUzU2Wmk1MGNtbG5aMlZ5SnlrdWIyNG9lMXh1SUNBZ0lDQWdKM0psYzJsNlpXMWxMbnBtTG5SeWFXZG5aWEluT2lCMGFHbHpMbDl3Y21Wd1lYSmxSbTl5VDNKaWFYUXVZbWx1WkNoMGFHbHpLVnh1SUNBZ0lIMHBYRzRnSUNBZ2FXWWdLSFJvYVhNdUpITnNhV1JsY3k1c1pXNW5kR2dnUGlBeEtTQjdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVjM2RwY0dVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a2MyeHBaR1Z6TG05bVppZ25jM2RwY0dWc1pXWjBMbnBtTG05eVltbDBJSE4zYVhCbGNtbG5hSFF1ZW1ZdWIzSmlhWFFuS1Z4dUlDQWdJQ0FnSUNBdWIyNG9KM04zYVhCbGJHVm1kQzU2Wmk1dmNtSnBkQ2NzSUdaMWJtTjBhVzl1S0dVcGUxeHVJQ0FnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGdVoyVlRiR2xrWlNoMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnZlNrdWIyNG9KM04zYVhCbGNtbG5hSFF1ZW1ZdWIzSmlhWFFuTENCbWRXNWpkR2x2YmlobEtYdGNiaUFnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTJoaGJtZGxVMnhwWkdVb1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lDOHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WVhWMGIxQnNZWGtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTRrYzJ4cFpHVnpMbTl1S0NkamJHbGpheTU2Wmk1dmNtSnBkQ2NzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvSjJOc2FXTnJaV1JQYmljc0lGOTBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9KMk5zYVdOclpXUlBiaWNwSUQ4Z1ptRnNjMlVnT2lCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTUwYVcxbGNsdGZkR2hwY3k0a1pXeGxiV1Z1ZEM1a1lYUmhLQ2RqYkdsamEyVmtUMjRuS1NBL0lDZHdZWFZ6WlNjZ09pQW5jM1JoY25RblhTZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxuQmhkWE5sVDI1SWIzWmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjI0b0oyMXZkWE5sWlc1MFpYSXVlbVl1YjNKaWFYUW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuUnBiV1Z5TG5CaGRYTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3ViMjRvSjIxdmRYTmxiR1ZoZG1VdWVtWXViM0ppYVhRbkxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDNSb2FYTXVKR1ZzWlcxbGJuUXVaR0YwWVNnblkyeHBZMnRsWkU5dUp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWRHbHRaWEl1YzNSaGNuUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtNWhka0oxZEhSdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlDUmpiMjUwY205c2N5QTlJSFJvYVhNdUpHVnNaVzFsYm5RdVptbHVaQ2hnTGlSN2RHaHBjeTV2Y0hScGIyNXpMbTVsZUhSRGJHRnpjMzBzSUM0a2UzUm9hWE11YjNCMGFXOXVjeTV3Y21WMlEyeGhjM045WUNrN1hHNGdJQ0FnSUNBZ0lDUmpiMjUwY205c2N5NWhkSFJ5S0NkMFlXSnBibVJsZUNjc0lEQXBYRzRnSUNBZ0lDQWdJQzh2WVd4emJ5QnVaV1ZrSUhSdklHaGhibVJzWlNCbGJuUmxjaTl5WlhSMWNtNGdZVzVrSUhOd1lXTmxZbUZ5SUd0bGVTQndjbVZ6YzJWelhHNGdJQ0FnSUNBZ0lDNXZiaWduWTJ4cFkyc3VlbVl1YjNKaWFYUWdkRzkxWTJobGJtUXVlbVl1YjNKaWFYUW5MQ0JtZFc1amRHbHZiaWhsS1h0Y2JseDBJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTJoaGJtZGxVMnhwWkdVb0pDaDBhR2x6S1M1b1lYTkRiR0Z6Y3loZmRHaHBjeTV2Y0hScGIyNXpMbTVsZUhSRGJHRnpjeWtwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWlkV3hzWlhSektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHSjFiR3hsZEhNdWIyNG9KMk5zYVdOckxucG1MbTl5WW1sMElIUnZkV05vWlc1a0xucG1MbTl5WW1sMEp5d2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQzlwY3kxaFkzUnBkbVV2Wnk1MFpYTjBLSFJvYVhNdVkyeGhjM05PWVcxbEtTa2dleUJ5WlhSMWNtNGdabUZzYzJVN0lIMHZMMmxtSUhSb2FYTWdhWE1nWVdOMGFYWmxMQ0JyYVdOcklHOTFkQ0J2WmlCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYVdSNElEMGdKQ2gwYUdsektTNWtZWFJoS0NkemJHbGtaU2NwTEZ4dUlDQWdJQ0FnSUNBZ0lHeDBjaUE5SUdsa2VDQStJRjkwYUdsekxpUnpiR2xrWlhNdVptbHNkR1Z5S0NjdWFYTXRZV04wYVhabEp5a3VaR0YwWVNnbmMyeHBaR1VuS1N4Y2JpQWdJQ0FnSUNBZ0lDQWtjMnhwWkdVZ1BTQmZkR2hwY3k0a2MyeHBaR1Z6TG1WeEtHbGtlQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amFHRnVaMlZUYkdsa1pTaHNkSElzSUNSemJHbGtaU3dnYVdSNEtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WVdOalpYTnphV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSM2NtRndjR1Z5TG1Ga1pDaDBhR2x6TGlSaWRXeHNaWFJ6S1M1dmJpZ25hMlY1Wkc5M2JpNTZaaTV2Y21KcGRDY3NJR1oxYm1OMGFXOXVLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJvWVc1a2JHVWdhMlY1WW05aGNtUWdaWFpsYm5RZ2QybDBhQ0JyWlhsaWIyRnlaQ0IxZEdsc1hHNGdJQ0FnSUNBZ0lDQWdTMlY1WW05aGNtUXVhR0Z1Wkd4bFMyVjVLR1VzSUNkUGNtSnBkQ2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZUhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amFHRnVaMlZUYkdsa1pTaDBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbVYyYVc5MWN6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTm9ZVzVuWlZOc2FXUmxLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2JHVmtPaUJtZFc1amRHbHZiaWdwSUhzZ0x5OGdhV1lnWW5Wc2JHVjBJR2x6SUdadlkzVnpaV1FzSUcxaGEyVWdjM1Z5WlNCbWIyTjFjeUJ0YjNabGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9KQ2hsTG5SaGNtZGxkQ2t1YVhNb1gzUm9hWE11SkdKMWJHeGxkSE1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11SkdKMWJHeGxkSE11Wm1sc2RHVnlLQ2N1YVhNdFlXTjBhWFpsSnlrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WelpYUnpJRTl5WW1sMElITnZJR2wwSUdOaGJpQmlaU0J5WldsdWFYUnBZV3hwZW1Wa1hHNGdJQ0FxTDF4dUlDQmZjbVZ6WlhRb0tTQjdYRzRnSUNBZ0x5OGdSRzl1SjNRZ1pHOGdZVzU1ZEdocGJtY2dhV1lnZEdobGNtVWdZWEpsSUc1dklITnNhV1JsY3lBb1ptbHljM1FnY25WdUtWeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTRrYzJ4cFpHVnpJRDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11SkhOc2FXUmxjeTVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ2IyeGtJR1YyWlc1MGMxeHVJQ0FnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzV2Wm1Zb0p5NTZaaTV2Y21KcGRDY3BMbVpwYm1Rb0p5b25LUzV2Wm1Zb0p5NTZaaTV2Y21KcGRDY3BYRzVjYmlBZ0lDQWdJQzh2SUZKbGMzUmhjblFnZEdsdFpYSWdhV1lnWVhWMGIxQnNZWGtnYVhNZ1pXNWhZbXhsWkZ4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVoZFhSdlVHeGhlU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJwYldWeUxuSmxjM1JoY25Rb0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnVW1WelpYUWdZV3hzSUhOc2FXUmtaWE5jYmlBZ0lDQWdJSFJvYVhNdUpITnNhV1JsY3k1bFlXTm9LR1oxYm1OMGFXOXVLR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lDUW9aV3dwTG5KbGJXOTJaVU5zWVhOektDZHBjeTFoWTNScGRtVWdhWE10WVdOMGFYWmxJR2x6TFdsdUp5bGNiaUFnSUNBZ0lDQWdJQ0F1Y21WdGIzWmxRWFIwY2lnbllYSnBZUzFzYVhabEp5bGNiaUFnSUNBZ0lDQWdJQ0F1YUdsa1pTZ3BPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUM4dklGTm9iM2NnZEdobElHWnBjbk4wSUhOc2FXUmxYRzRnSUNBZ0lDQjBhR2x6TGlSemJHbGtaWE11Wm1seWMzUW9LUzVoWkdSRGJHRnpjeWduYVhNdFlXTjBhWFpsSnlrdWMyaHZkeWdwTzF4dVhHNGdJQ0FnSUNBdkx5QlVjbWxuWjJWeWN5QjNhR1Z1SUhSb1pTQnpiR2xrWlNCb1lYTWdabWx1YVhOb1pXUWdZVzVwYldGMGFXNW5YRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjNOc2FXUmxZMmhoYm1kbExucG1MbTl5WW1sMEp5d2dXM1JvYVhNdUpITnNhV1JsY3k1bWFYSnpkQ2dwWFNrN1hHNWNiaUFnSUNBZ0lDOHZJRk5sYkdWamRDQm1hWEp6ZENCaWRXeHNaWFFnYVdZZ1luVnNiR1YwY3lCaGNtVWdjSEpsYzJWdWRGeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aWRXeHNaWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVUoxYkd4bGRITW9NQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUTJoaGJtZGxjeUIwYUdVZ1kzVnljbVZ1ZENCemJHbGtaU0IwYnlCaElHNWxkeUJ2Ym1VdVhHNGdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQnBjMHhVVWlBdElHWnNZV2NnYVdZZ2RHaGxJSE5zYVdSbElITm9iM1ZzWkNCdGIzWmxJR3hsWm5RZ2RHOGdjbWxuYUhRdVhHNGdJQ29nUUhCaGNtRnRJSHRxVVhWbGNubDlJR05vYjNObGJsTnNhV1JsSUMwZ2RHaGxJR3BSZFdWeWVTQmxiR1Z0Wlc1MElHOW1JSFJvWlNCemJHbGtaU0IwYnlCemFHOTNJRzVsZUhRc0lHbG1JRzl1WlNCcGN5QnpaV3hsWTNSbFpDNWNiaUFnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYVdSNElDMGdkR2hsSUdsdVpHVjRJRzltSUhSb1pTQnVaWGNnYzJ4cFpHVWdhVzRnYVhSeklHTnZiR3hsWTNScGIyNHNJR2xtSUc5dVpTQmphRzl6Wlc0dVhHNGdJQ29nUUdacGNtVnpJRTl5WW1sMEkzTnNhV1JsWTJoaGJtZGxYRzRnSUNvdlhHNGdJR05vWVc1blpWTnNhV1JsS0dselRGUlNMQ0JqYUc5elpXNVRiR2xrWlN3Z2FXUjRLU0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMaVJ6Ykdsa1pYTXBJSHR5WlhSMWNtNDdJSDBnTHk4Z1JHOXVKM1FnWm5KbFlXc2diM1YwSUdsbUlIZGxKM0psSUdsdUlIUm9aU0J0YVdSa2JHVWdiMllnWTJ4bFlXNTFjRnh1SUNBZ0lIWmhjaUFrWTNWeVUyeHBaR1VnUFNCMGFHbHpMaVJ6Ykdsa1pYTXVabWxzZEdWeUtDY3VhWE10WVdOMGFYWmxKeWt1WlhFb01DazdYRzVjYmlBZ0lDQnBaaUFvTDIxMWFTOW5MblJsYzNRb0pHTjFjbE5zYVdSbFd6QmRMbU5zWVhOelRtRnRaU2twSUhzZ2NtVjBkWEp1SUdaaGJITmxPeUI5SUM4dmFXWWdkR2hsSUhOc2FXUmxJR2x6SUdOMWNuSmxiblJzZVNCaGJtbHRZWFJwYm1jc0lHdHBZMnNnYjNWMElHOW1JSFJvWlNCbWRXNWpkR2x2Ymx4dVhHNGdJQ0FnZG1GeUlDUm1hWEp6ZEZOc2FXUmxJRDBnZEdocGN5NGtjMnhwWkdWekxtWnBjbk4wS0Nrc1hHNGdJQ0FnSkd4aGMzUlRiR2xrWlNBOUlIUm9hWE11SkhOc2FXUmxjeTVzWVhOMEtDa3NYRzRnSUNBZ1pHbHlTVzRnUFNCcGMweFVVaUEvSUNkU2FXZG9kQ2NnT2lBblRHVm1kQ2NzWEc0Z0lDQWdaR2x5VDNWMElEMGdhWE5NVkZJZ1B5QW5UR1ZtZENjZ09pQW5VbWxuYUhRbkxGeHVJQ0FnSUY5MGFHbHpJRDBnZEdocGN5eGNiaUFnSUNBa2JtVjNVMnhwWkdVN1hHNWNiaUFnSUNCcFppQW9JV05vYjNObGJsTnNhV1JsS1NCN0lDOHZiVzl6ZENCdlppQjBhR1VnZEdsdFpTd2dkR2hwY3lCM2FXeHNJR0psSUdGMWRHOGdjR3hoZVdWa0lHOXlJR05zYVdOclpXUWdabkp2YlNCMGFHVWdibUYyUW5WMGRHOXVjeTVjYmlBZ0lDQWdJQ1J1WlhkVGJHbGtaU0E5SUdselRGUlNJRDhnTHk5cFppQjNjbUZ3Y0dsdVp5QmxibUZpYkdWa0xDQmphR1ZqYXlCMGJ5QnpaV1VnYVdZZ2RHaGxjbVVnYVhNZ1lTQmdibVY0ZEdBZ2IzSWdZSEJ5WlhaZ0lITnBZbXhwYm1jc0lHbG1JRzV2ZEN3Z2MyVnNaV04wSUhSb1pTQm1hWEp6ZENCdmNpQnNZWE4wSUhOc2FXUmxJSFJ2SUdacGJHd2dhVzR1SUdsbUlIZHlZWEJ3YVc1bklHNXZkQ0JsYm1GaWJHVmtMQ0JoZEhSbGJYQjBJSFJ2SUhObGJHVmpkQ0JnYm1WNGRHQWdiM0lnWUhCeVpYWmdMQ0JwWmlCMGFHVnlaU2R6SUc1dmRHaHBibWNnZEdobGNtVXNJSFJvWlNCbWRXNWpkR2x2YmlCM2FXeHNJR3RwWTJzZ2IzVjBJRzl1SUc1bGVIUWdjM1JsY0M0Z1ExSkJXbGtnVGtWVFZFVkVJRlJGVWs1QlVrbEZVeUVoSVNFaFhHNGdJQ0FnSUNBb2RHaHBjeTV2Y0hScGIyNXpMbWx1Wm1sdWFYUmxWM0poY0NBL0lDUmpkWEpUYkdsa1pTNXVaWGgwS0dBdUpIdDBhR2x6TG05d2RHbHZibk11YzJ4cFpHVkRiR0Z6YzMxZ0tTNXNaVzVuZEdnZ1B5QWtZM1Z5VTJ4cFpHVXVibVY0ZENoZ0xpUjdkR2hwY3k1dmNIUnBiMjV6TG5Oc2FXUmxRMnhoYzNOOVlDa2dPaUFrWm1seWMzUlRiR2xrWlNBNklDUmpkWEpUYkdsa1pTNXVaWGgwS0dBdUpIdDBhR2x6TG05d2RHbHZibk11YzJ4cFpHVkRiR0Z6YzMxZ0tTa3ZMM0JwWTJzZ2JtVjRkQ0J6Ykdsa1pTQnBaaUJ0YjNacGJtY2diR1ZtZENCMGJ5QnlhV2RvZEZ4dUlDQWdJQ0FnT2x4dUlDQWdJQ0FnS0hSb2FYTXViM0IwYVc5dWN5NXBibVpwYm1sMFpWZHlZWEFnUHlBa1kzVnlVMnhwWkdVdWNISmxkaWhnTGlSN2RHaHBjeTV2Y0hScGIyNXpMbk5zYVdSbFEyeGhjM045WUNrdWJHVnVaM1JvSUQ4Z0pHTjFjbE5zYVdSbExuQnlaWFlvWUM0a2UzUm9hWE11YjNCMGFXOXVjeTV6Ykdsa1pVTnNZWE56ZldBcElEb2dKR3hoYzNSVGJHbGtaU0E2SUNSamRYSlRiR2xrWlM1d2NtVjJLR0F1Skh0MGFHbHpMbTl3ZEdsdmJuTXVjMnhwWkdWRGJHRnpjMzFnS1NrN0x5OXdhV05ySUhCeVpYWWdjMnhwWkdVZ2FXWWdiVzkyYVc1bklISnBaMmgwSUhSdklHeGxablJjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0pHNWxkMU5zYVdSbElEMGdZMmh2YzJWdVUyeHBaR1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NSdVpYZFRiR2xrWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0tpQlVjbWxuWjJWeWN5QmlaV1p2Y21VZ2RHaGxJRzVsZUhRZ2MyeHBaR1VnYzNSaGNuUnpJR0Z1YVcxaGRHbHVaeUJwYmlCaGJtUWdiMjVzZVNCcFppQmhJRzVsZUhRZ2MyeHBaR1VnYUdGeklHSmxaVzRnWm05MWJtUXVYRzRnSUNBZ0lDQXFJRUJsZG1WdWRDQlBjbUpwZENOaVpXWnZjbVZ6Ykdsa1pXTm9ZVzVuWlZ4dUlDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25ZbVZtYjNKbGMyeHBaR1ZqYUdGdVoyVXVlbVl1YjNKaWFYUW5MQ0JiSkdOMWNsTnNhV1JsTENBa2JtVjNVMnhwWkdWZEtUdGNibHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWlkV3hzWlhSektTQjdYRzRnSUNBZ0lDQWdJR2xrZUNBOUlHbGtlQ0I4ZkNCMGFHbHpMaVJ6Ykdsa1pYTXVhVzVrWlhnb0pHNWxkMU5zYVdSbEtUc2dMeTluY21GaUlHbHVaR1Y0SUhSdklIVndaR0YwWlNCaWRXeHNaWFJ6WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVSjFiR3hsZEhNb2FXUjRLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTUxYzJWTlZVa2dKaVlnSVhSb2FYTXVKR1ZzWlcxbGJuUXVhWE1vSnpwb2FXUmtaVzRuS1NrZ2UxeHVJQ0FnSUNBZ0lDQk5iM1JwYjI0dVlXNXBiV0YwWlVsdUtGeHVJQ0FnSUNBZ0lDQWdJQ1J1WlhkVGJHbGtaUzVoWkdSRGJHRnpjeWduYVhNdFlXTjBhWFpsSnlrdVkzTnpLSHNuY0c5emFYUnBiMjRuT2lBbllXSnpiMngxZEdVbkxDQW5kRzl3SnpvZ01IMHBMRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWMxdGdZVzVwYlVsdVJuSnZiU1I3WkdseVNXNTlZRjBzWEc0Z0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNSdVpYZFRiR2xrWlM1amMzTW9leWR3YjNOcGRHbHZiaWM2SUNkeVpXeGhkR2wyWlNjc0lDZGthWE53YkdGNUp6b2dKMkpzYjJOckozMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBdVlYUjBjaWduWVhKcFlTMXNhWFpsSnl3Z0ozQnZiR2wwWlNjcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCTmIzUnBiMjR1WVc1cGJXRjBaVTkxZENoY2JpQWdJQ0FnSUNBZ0lDQWtZM1Z5VTJ4cFpHVXVjbVZ0YjNabFEyeGhjM01vSjJsekxXRmpkR2wyWlNjcExGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1YzF0Z1lXNXBiVTkxZEZSdkpIdGthWEpQZFhSOVlGMHNYRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1JqZFhKVGJHbGtaUzV5WlcxdmRtVkJkSFJ5S0NkaGNtbGhMV3hwZG1VbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtGOTBhR2x6TG05d2RHbHZibk11WVhWMGIxQnNZWGtnSmlZZ0lWOTBhR2x6TG5ScGJXVnlMbWx6VUdGMWMyVmtLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWRHbHRaWEl1Y21WemRHRnlkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWtieUJ6ZEhWbVpqOWNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNSamRYSlRiR2xrWlM1eVpXMXZkbVZEYkdGemN5Z25hWE10WVdOMGFYWmxJR2x6TFdsdUp5a3VjbVZ0YjNabFFYUjBjaWduWVhKcFlTMXNhWFpsSnlrdWFHbGtaU2dwTzF4dUlDQWdJQ0FnSUNBa2JtVjNVMnhwWkdVdVlXUmtRMnhoYzNNb0oybHpMV0ZqZEdsMlpTQnBjeTFwYmljcExtRjBkSElvSjJGeWFXRXRiR2wyWlNjc0lDZHdiMnhwZEdVbktTNXphRzkzS0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVlYVjBiMUJzWVhrZ0ppWWdJWFJvYVhNdWRHbHRaWEl1YVhOUVlYVnpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ScGJXVnlMbkpsYzNSaGNuUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQzhxS2x4dUlDQWdJQ29nVkhKcFoyZGxjbk1nZDJobGJpQjBhR1VnYzJ4cFpHVWdhR0Z6SUdacGJtbHphR1ZrSUdGdWFXMWhkR2x1WnlCcGJpNWNiaUFnSUNBcUlFQmxkbVZ1ZENCUGNtSnBkQ056Ykdsa1pXTm9ZVzVuWlZ4dUlDQWdJQ292WEc0Z0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExuUnlhV2RuWlhJb0ozTnNhV1JsWTJoaGJtZGxMbnBtTG05eVltbDBKeXdnV3lSdVpYZFRiR2xrWlYwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGVndaR0YwWlhNZ2RHaGxJR0ZqZEdsMlpTQnpkR0YwWlNCdlppQjBhR1VnWW5Wc2JHVjBjeXdnYVdZZ1pHbHpjR3hoZVdWa0xseHVJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQXFJRUJ3Y21sMllYUmxYRzRnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdsa2VDQXRJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdZM1Z5Y21WdWRDQnpiR2xrWlM1Y2JpQWdLaTljYmlBZ1gzVndaR0YwWlVKMWJHeGxkSE1vYVdSNEtTQjdYRzRnSUNBZ2RtRnlJQ1J2YkdSQ2RXeHNaWFFnUFNCMGFHbHpMaVJsYkdWdFpXNTBMbVpwYm1Rb1lDNGtlM1JvYVhNdWIzQjBhVzl1Y3k1aWIzaFBaa0oxYkd4bGRITjlZQ2xjYmlBZ0lDQXVabWx1WkNnbkxtbHpMV0ZqZEdsMlpTY3BMbkpsYlc5MlpVTnNZWE56S0NkcGN5MWhZM1JwZG1VbktTNWliSFZ5S0Nrc1hHNGdJQ0FnYzNCaGJpQTlJQ1J2YkdSQ2RXeHNaWFF1Wm1sdVpDZ25jM0JoYmpwc1lYTjBKeWt1WkdWMFlXTm9LQ2tzWEc0Z0lDQWdKRzVsZDBKMWJHeGxkQ0E5SUhSb2FYTXVKR0oxYkd4bGRITXVaWEVvYVdSNEtTNWhaR1JEYkdGemN5Z25hWE10WVdOMGFYWmxKeWt1WVhCd1pXNWtLSE53WVc0cE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dSR1Z6ZEhKdmVYTWdkR2hsSUdOaGNtOTFjMlZzSUdGdVpDQm9hV1JsY3lCMGFHVWdaV3hsYldWdWRDNWNiaUFnS2lCQVpuVnVZM1JwYjI1Y2JpQWdLaTljYmlBZ1gyUmxjM1J5YjNrb0tTQjdYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzV2Wm1Zb0p5NTZaaTV2Y21KcGRDY3BMbVpwYm1Rb0p5b25LUzV2Wm1Zb0p5NTZaaTV2Y21KcGRDY3BMbVZ1WkNncExtaHBaR1VvS1R0Y2JpQWdmVnh1ZlZ4dVhHNVBjbUpwZEM1a1pXWmhkV3gwY3lBOUlIdGNiaUFnTHlvcVhHNGdJQ29nVkdWc2JITWdkR2hsSUVwVElIUnZJR3h2YjJzZ1ptOXlJR0Z1WkNCc2IyRmtRblZzYkdWMGN5NWNiaUFnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FxSUVCa1pXWmhkV3gwSUhSeWRXVmNiaUFnS2k5Y2JpQWdZblZzYkdWMGN6b2dkSEoxWlN4Y2JpQWdMeW9xWEc0Z0lDb2dWR1ZzYkhNZ2RHaGxJRXBUSUhSdklHRndjR3g1SUdWMlpXNTBJR3hwYzNSbGJtVnljeUIwYnlCdVlYWWdZblYwZEc5dWMxeHVJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UySnZiMnhsWVc1OVhHNGdJQ29nUUdSbFptRjFiSFFnZEhKMVpWeHVJQ0FxTDF4dUlDQnVZWFpDZFhSMGIyNXpPaUIwY25WbExGeHVJQ0F2S2lwY2JpQWdLaUJ0YjNScGIyNHRkV2tnWVc1cGJXRjBhVzl1SUdOc1lYTnpJSFJ2SUdGd2NHeDVYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FxSUVCa1pXWmhkV3gwSUNkemJHbGtaUzFwYmkxeWFXZG9kQ2RjYmlBZ0tpOWNiaUFnWVc1cGJVbHVSbkp2YlZKcFoyaDBPaUFuYzJ4cFpHVXRhVzR0Y21sbmFIUW5MRnh1SUNBdktpcGNiaUFnS2lCdGIzUnBiMjR0ZFdrZ1lXNXBiV0YwYVc5dUlHTnNZWE56SUhSdklHRndjR3g1WEc0Z0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBcUlFQmtaV1poZFd4MElDZHpiR2xrWlMxdmRYUXRjbWxuYUhRblhHNGdJQ292WEc0Z0lHRnVhVzFQZFhSVWIxSnBaMmgwT2lBbmMyeHBaR1V0YjNWMExYSnBaMmgwSnl4Y2JpQWdMeW9xWEc0Z0lDb2diVzkwYVc5dUxYVnBJR0Z1YVcxaGRHbHZiaUJqYkdGemN5QjBieUJoY0hCc2VWeHVJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdLaUJBWkdWbVlYVnNkQ0FuYzJ4cFpHVXRhVzR0YkdWbWRDZGNiaUFnS2x4dUlDQXFMMXh1SUNCaGJtbHRTVzVHY205dFRHVm1kRG9nSjNOc2FXUmxMV2x1TFd4bFpuUW5MRnh1SUNBdktpcGNiaUFnS2lCdGIzUnBiMjR0ZFdrZ1lXNXBiV0YwYVc5dUlHTnNZWE56SUhSdklHRndjR3g1WEc0Z0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBcUlFQmtaV1poZFd4MElDZHpiR2xrWlMxdmRYUXRiR1ZtZENkY2JpQWdLaTljYmlBZ1lXNXBiVTkxZEZSdlRHVm1kRG9nSjNOc2FXUmxMVzkxZEMxc1pXWjBKeXhjYmlBZ0x5b3FYRzRnSUNvZ1FXeHNiM2R6SUU5eVltbDBJSFJ2SUdGMWRHOXRZWFJwWTJGc2JIa2dZVzVwYldGMFpTQnZiaUJ3WVdkbElHeHZZV1F1WEc0Z0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDb3ZYRzRnSUdGMWRHOVFiR0Y1T2lCMGNuVmxMRnh1SUNBdktpcGNiaUFnS2lCQmJXOTFiblFnYjJZZ2RHbHRaU3dnYVc0Z2JYTXNJR0psZEhkbFpXNGdjMnhwWkdVZ2RISmhibk5wZEdsdmJuTmNiaUFnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ29nUUdSbFptRjFiSFFnTlRBd01GeHVJQ0FxTDF4dUlDQjBhVzFsY2tSbGJHRjVPaUExTURBd0xGeHVJQ0F2S2lwY2JpQWdLaUJCYkd4dmQzTWdUM0ppYVhRZ2RHOGdhVzVtYVc1cGRHVnNlU0JzYjI5d0lIUm9jbTkxWjJnZ2RHaGxJSE5zYVdSbGMxeHVJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UySnZiMnhsWVc1OVhHNGdJQ29nUUdSbFptRjFiSFFnZEhKMVpWeHVJQ0FxTDF4dUlDQnBibVpwYm1sMFpWZHlZWEE2SUhSeWRXVXNYRzRnSUM4cUtseHVJQ0FxSUVGc2JHOTNjeUIwYUdVZ1QzSmlhWFFnYzJ4cFpHVnpJSFJ2SUdKcGJtUWdkRzhnYzNkcGNHVWdaWFpsYm5SeklHWnZjaUJ0YjJKcGJHVXNJSEpsY1hWcGNtVnpJR0Z1SUdGa1pHbDBhVzl1WVd3Z2RYUnBiQ0JzYVdKeVlYSjVYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNvdlhHNGdJSE4zYVhCbE9pQjBjblZsTEZ4dUlDQXZLaXBjYmlBZ0tpQkJiR3h2ZDNNZ2RHaGxJSFJwYldsdVp5Qm1kVzVqZEdsdmJpQjBieUJ3WVhWelpTQmhibWx0WVhScGIyNGdiMjRnYUc5MlpYSXVYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNvdlhHNGdJSEJoZFhObFQyNUliM1psY2pvZ2RISjFaU3hjYmlBZ0x5b3FYRzRnSUNvZ1FXeHNiM2R6SUU5eVltbDBJSFJ2SUdKcGJtUWdhMlY1WW05aGNtUWdaWFpsYm5SeklIUnZJSFJvWlNCemJHbGtaWElzSUhSdklHRnVhVzFoZEdVZ1puSmhiV1Z6SUhkcGRHZ2dZWEp5YjNjZ2EyVjVjMXh1SUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNvZ1FHUmxabUYxYkhRZ2RISjFaVnh1SUNBcUwxeHVJQ0JoWTJObGMzTnBZbXhsT2lCMGNuVmxMRnh1SUNBdktpcGNiaUFnS2lCRGJHRnpjeUJoY0hCc2FXVmtJSFJ2SUhSb1pTQmpiMjUwWVdsdVpYSWdiMllnVDNKaWFYUmNiaUFnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhHNGdJQ29nUUdSbFptRjFiSFFnSjI5eVltbDBMV052Ym5SaGFXNWxjaWRjYmlBZ0tpOWNiaUFnWTI5dWRHRnBibVZ5UTJ4aGMzTTZJQ2R2Y21KcGRDMWpiMjUwWVdsdVpYSW5MRnh1SUNBdktpcGNiaUFnS2lCRGJHRnpjeUJoY0hCc2FXVmtJSFJ2SUdsdVpHbDJhV1IxWVd3Z2MyeHBaR1Z6TGx4dUlDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0tpQkFaR1ZtWVhWc2RDQW5iM0ppYVhRdGMyeHBaR1VuWEc0Z0lDb3ZYRzRnSUhOc2FXUmxRMnhoYzNNNklDZHZjbUpwZEMxemJHbGtaU2NzWEc0Z0lDOHFLbHh1SUNBcUlFTnNZWE56SUdGd2NHeHBaV1FnZEc4Z2RHaGxJR0oxYkd4bGRDQmpiMjUwWVdsdVpYSXVJRmx2ZFNkeVpTQjNaV3hqYjIxbExseHVJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdLaUJBWkdWbVlYVnNkQ0FuYjNKaWFYUXRZblZzYkdWMGN5ZGNiaUFnS2k5Y2JpQWdZbTk0VDJaQ2RXeHNaWFJ6T2lBbmIzSmlhWFF0WW5Wc2JHVjBjeWNzWEc0Z0lDOHFLbHh1SUNBcUlFTnNZWE56SUdGd2NHeHBaV1FnZEc4Z2RHaGxJR0J1WlhoMFlDQnVZWFpwWjJGMGFXOXVJR0oxZEhSdmJpNWNiaUFnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhHNGdJQ29nUUdSbFptRjFiSFFnSjI5eVltbDBMVzVsZUhRblhHNGdJQ292WEc0Z0lHNWxlSFJEYkdGemN6b2dKMjl5WW1sMExXNWxlSFFuTEZ4dUlDQXZLaXBjYmlBZ0tpQkRiR0Z6Y3lCaGNIQnNhV1ZrSUhSdklIUm9aU0JnY0hKbGRtbHZkWE5nSUc1aGRtbG5ZWFJwYjI0Z1luVjBkRzl1TGx4dUlDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0tpQkFaR1ZtWVhWc2RDQW5iM0ppYVhRdGNISmxkbWx2ZFhNblhHNGdJQ292WEc0Z0lIQnlaWFpEYkdGemN6b2dKMjl5WW1sMExYQnlaWFpwYjNWekp5eGNiaUFnTHlvcVhHNGdJQ29nUW05dmJHVmhiaUIwYnlCbWJHRm5JSFJvWlNCcWN5QjBieUIxYzJVZ2JXOTBhVzl1SUhWcElHTnNZWE56WlhNZ2IzSWdibTkwTGlCRVpXWmhkV3gwSUhSdklIUnlkV1VnWm05eUlHSmhZMnQzWVhKa2N5QmpiMjF3WVhSaFltbHNhWFI1TGx4dUlDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDb2dRR1JsWm1GMWJIUWdkSEoxWlZ4dUlDQXFMMXh1SUNCMWMyVk5WVWs2SUhSeWRXVmNibjA3WEc1Y2JtVjRjRzl5ZENCN1QzSmlhWFI5TzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5vcmJpdC5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QbHVnaW4gPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5jb3JlJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIEFic3RyYWN0IGNsYXNzIGZvciBwcm92aWRpbmcgbGlmZWN5Y2xlIGhvb2tzLiBFeHBlY3QgcGx1Z2lucyB0byBkZWZpbmUgQVQgTEVBU1Rcbi8vIHtmdW5jdGlvbn0gX3NldHVwIChyZXBsYWNlcyBwcmV2aW91cyBjb25zdHJ1Y3RvciksXG4vLyB7ZnVuY3Rpb259IF9kZXN0cm95IChyZXBsYWNlcyBwcmV2aW91cyBkZXN0cm95KVxudmFyIFBsdWdpbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1Z2luKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1Z2luKTtcblxuICAgIHRoaXMuX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIHZhciBwbHVnaW5OYW1lID0gZ2V0UGx1Z2luTmFtZSh0aGlzKTtcbiAgICB0aGlzLnV1aWQgPSAoMCwgX2ZvdW5kYXRpb25VdGlsLkdldFlvRGlnaXRzKSg2LCBwbHVnaW5OYW1lKTtcblxuICAgIGlmICghdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lLCB0aGlzLnV1aWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsIHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5pdC56Zi4nICsgcGx1Z2luTmFtZSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGx1Z2luLCBbe1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5fZGVzdHJveSgpO1xuICAgICAgdmFyIHBsdWdpbk5hbWUgPSBnZXRQbHVnaW5OYW1lKHRoaXMpO1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lKS5yZW1vdmVEYXRhKCd6ZlBsdWdpbicpXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gICAgICAgKiBAZXZlbnQgUGx1Z2luI2Rlc3Ryb3llZFxuICAgICAgICovXG4gICAgICAudHJpZ2dlcignZGVzdHJveWVkLnpmLicgKyBwbHVnaW5OYW1lKTtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gdGhpcykge1xuICAgICAgICB0aGlzW3Byb3BdID0gbnVsbDsgLy9jbGVhbiB1cCBzY3JpcHQgdG8gcHJlcCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQbHVnaW47XG59KCk7XG5cbi8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4vLyBUaGFuayB5b3U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg5NTU1ODBcblxuXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gZ2V0UGx1Z2luTmFtZShvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmouY29uc3RydWN0b3IubmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKG9iai5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKG9iai5jbGFzc05hbWUpO1xuICB9XG59XG5cbmV4cG9ydHMuUGx1Z2luID0gUGx1Z2luO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWNHeDFaMmx1TG1weklsMHNJbTVoYldWeklqcGJJbEJzZFdkcGJpSXNJbVZzWlcxbGJuUWlMQ0p2Y0hScGIyNXpJaXdpWDNObGRIVndJaXdpY0d4MVoybHVUbUZ0WlNJc0ltZGxkRkJzZFdkcGJrNWhiV1VpTENKMWRXbGtJaXdpSkdWc1pXMWxiblFpTENKaGRIUnlJaXdpWkdGMFlTSXNJblJ5YVdkblpYSWlMQ0pmWkdWemRISnZlU0lzSW5KbGJXOTJaVUYwZEhJaUxDSnlaVzF2ZG1WRVlYUmhJaXdpY0hKdmNDSXNJbWg1Y0dobGJtRjBaU0lzSW5OMGNpSXNJbkpsY0d4aFkyVWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0ltOWlhaUlzSW1OdmJuTjBjblZqZEc5eUlpd2libUZ0WlNJc0ltTnNZWE56VG1GdFpTSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096dEJRVVZCT3pzN08wRkJRMEU3T3pzN096dEJRVVZCTzBGQlEwRTdRVUZEUVR0SlFVTk5RU3hOTzBGQlJVb3NhMEpCUVZsRExFOUJRVm9zUlVGQmNVSkRMRTlCUVhKQ0xFVkJRVGhDTzBGQlFVRTdPMEZCUXpWQ0xGTkJRVXRETEUxQlFVd3NRMEZCV1VZc1QwRkJXaXhGUVVGeFFrTXNUMEZCY2tJN1FVRkRRU3hSUVVGSlJTeGhRVUZoUXl4alFVRmpMRWxCUVdRc1EwRkJha0k3UVVGRFFTeFRRVUZMUXl4SlFVRk1MRWRCUVZrc2FVTkJRVmtzUTBGQldpeEZRVUZsUml4VlFVRm1MRU5CUVZvN08wRkJSVUVzVVVGQlJ5eERRVUZETEV0QlFVdEhMRkZCUVV3c1EwRkJZME1zU1VGQlpDeFhRVUV5UWtvc1ZVRkJNMElzUTBGQlNpeEZRVUUyUXp0QlFVRkZMRmRCUVV0SExGRkJRVXdzUTBGQlkwTXNTVUZCWkN4WFFVRXlRa29zVlVGQk0wSXNSVUZCZVVNc1MwRkJTMFVzU1VGQk9VTTdRVUZCYzBRN1FVRkRja2NzVVVGQlJ5eERRVUZETEV0QlFVdERMRkZCUVV3c1EwRkJZMFVzU1VGQlpDeERRVUZ0UWl4VlFVRnVRaXhEUVVGS0xFVkJRVzFETzBGQlFVVXNWMEZCUzBZc1VVRkJUQ3hEUVVGalJTeEpRVUZrTEVOQlFXMUNMRlZCUVc1Q0xFVkJRU3RDTEVsQlFTOUNPMEZCUVhWRE8wRkJRelZGT3pzN08wRkJTVUVzVTBGQlMwWXNVVUZCVEN4RFFVRmpSeXhQUVVGa0xHTkJRV2xEVGl4VlFVRnFRenRCUVVORU96czdPemhDUVVWVE8wRkJRMUlzVjBGQlMwOHNVVUZCVER0QlFVTkJMRlZCUVVsUUxHRkJRV0ZETEdOQlFXTXNTVUZCWkN4RFFVRnFRanRCUVVOQkxGZEJRVXRGTEZGQlFVd3NRMEZCWTBzc1ZVRkJaQ3hYUVVGcFExSXNWVUZCYWtNc1JVRkJLME5UTEZWQlFTOURMRU5CUVRCRUxGVkJRVEZFTzBGQlEwazdPenM3UVVGRVNpeFBRVXRMU0N4UFFVeE1MRzFDUVVzMlFrNHNWVUZNTjBJN1FVRk5RU3hYUVVGSkxFbEJRVWxWTEVsQlFWSXNTVUZCWjBJc1NVRkJhRUlzUlVGQmNVSTdRVUZEYmtJc1lVRkJTMEVzU1VGQlRDeEpRVUZoTEVsQlFXSXNRMEZFYlVJc1EwRkRSRHRCUVVOdVFqdEJRVU5HT3pzN096czdRVUZIU0R0QlFVTkJPenM3UVVGRFFTeFRRVUZUUXl4VFFVRlVMRU5CUVcxQ1F5eEhRVUZ1UWl4RlFVRjNRanRCUVVOMFFpeFRRVUZQUVN4SlFVRkpReXhQUVVGS0xFTkJRVmtzYVVKQlFWb3NSVUZCSzBJc1QwRkJMMElzUlVGQmQwTkRMRmRCUVhoRExFVkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRZaXhoUVVGVUxFTkJRWFZDWXl4SFFVRjJRaXhGUVVFMFFqdEJRVU14UWl4TlFVRkhMRTlCUVU5QkxFbEJRVWxETEZkQlFVb3NRMEZCWjBKRExFbEJRWFpDTEV0QlFXbERMRmRCUVhCRExFVkJRV2xFTzBGQlF5OURMRmRCUVU5T0xGVkJRVlZKTEVsQlFVbERMRmRCUVVvc1EwRkJaMEpETEVsQlFURkNMRU5CUVZBN1FVRkRSQ3hIUVVaRUxFMUJSVTg3UVVGRFRDeFhRVUZQVGl4VlFVRlZTU3hKUVVGSlJ5eFRRVUZrTEVOQlFWQTdRVUZEUkR0QlFVTkdPenRSUVVWUGRFSXNUU3hIUVVGQlFTeE5JaXdpWm1sc1pTSTZJbVp2ZFc1a1lYUnBiMjR1Y0d4MVoybHVMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cGJYQnZjblFnSkNCbWNtOXRJQ2RxY1hWbGNua25PMXh1YVcxd2IzSjBJSHNnUjJWMFdXOUVhV2RwZEhNZ2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVkWFJwYkM1amIzSmxKenRjYmx4dUx5OGdRV0p6ZEhKaFkzUWdZMnhoYzNNZ1ptOXlJSEJ5YjNacFpHbHVaeUJzYVdabFkzbGpiR1VnYUc5dmEzTXVJRVY0Y0dWamRDQndiSFZuYVc1eklIUnZJR1JsWm1sdVpTQkJWQ0JNUlVGVFZGeHVMeThnZTJaMWJtTjBhVzl1ZlNCZmMyVjBkWEFnS0hKbGNHeGhZMlZ6SUhCeVpYWnBiM1Z6SUdOdmJuTjBjblZqZEc5eUtTeGNiaTh2SUh0bWRXNWpkR2x2Ym4wZ1gyUmxjM1J5YjNrZ0tISmxjR3hoWTJWeklIQnlaWFpwYjNWeklHUmxjM1J5YjNrcFhHNWpiR0Z6Y3lCUWJIVm5hVzRnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dWc1pXMWxiblFzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxsOXpaWFIxY0NobGJHVnRaVzUwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0IyWVhJZ2NHeDFaMmx1VG1GdFpTQTlJR2RsZEZCc2RXZHBiazVoYldVb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1MWRXbGtJRDBnUjJWMFdXOUVhV2RwZEhNb05pd2djR3gxWjJsdVRtRnRaU2s3WEc1Y2JpQWdJQ0JwWmlnaGRHaHBjeTRrWld4bGJXVnVkQzVoZEhSeUtHQmtZWFJoTFNSN2NHeDFaMmx1VG1GdFpYMWdLU2w3SUhSb2FYTXVKR1ZzWlcxbGJuUXVZWFIwY2loZ1pHRjBZUzBrZTNCc2RXZHBiazVoYldWOVlDd2dkR2hwY3k1MWRXbGtLVHNnZlZ4dUlDQWdJR2xtS0NGMGFHbHpMaVJsYkdWdFpXNTBMbVJoZEdFb0ozcG1VR3gxWjJsdUp5a3BleUIwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvSjNwbVVHeDFaMmx1Snl3Z2RHaHBjeWs3SUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCR2FYSmxjeUIzYUdWdUlIUm9aU0J3YkhWbmFXNGdhR0Z6SUdsdWFYUnBZV3hwZW1Wa0xseHVJQ0FnSUNBcUlFQmxkbVZ1ZENCUWJIVm5hVzRqYVc1cGRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpaGdhVzVwZEM1NlppNGtlM0JzZFdkcGJrNWhiV1Y5WUNrN1hHNGdJSDFjYmx4dUlDQmtaWE4wY205NUtDa2dlMXh1SUNBZ0lIUm9hWE11WDJSbGMzUnliM2tvS1R0Y2JpQWdJQ0IyWVhJZ2NHeDFaMmx1VG1GdFpTQTlJR2RsZEZCc2RXZHBiazVoYldVb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1eVpXMXZkbVZCZEhSeUtHQmtZWFJoTFNSN2NHeDFaMmx1VG1GdFpYMWdLUzV5WlcxdmRtVkVZWFJoS0NkNlpsQnNkV2RwYmljcFhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCR2FYSmxjeUIzYUdWdUlIUm9aU0J3YkhWbmFXNGdhR0Z6SUdKbFpXNGdaR1Z6ZEhKdmVXVmtMbHh1SUNBZ0lDQWdJQ0FnS2lCQVpYWmxiblFnVUd4MVoybHVJMlJsYzNSeWIzbGxaRnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ0xuUnlhV2RuWlhJb1lHUmxjM1J5YjNsbFpDNTZaaTRrZTNCc2RXZHBiazVoYldWOVlDazdYRzRnSUNBZ1ptOXlLSFpoY2lCd2NtOXdJR2x1SUhSb2FYTXBlMXh1SUNBZ0lDQWdkR2hwYzF0d2NtOXdYU0E5SUc1MWJHdzdMeTlqYkdWaGJpQjFjQ0J6WTNKcGNIUWdkRzhnY0hKbGNDQm1iM0lnWjJGeVltRm5aU0JqYjJ4c1pXTjBhVzl1TGx4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dkx5QkRiMjUyWlhKMElGQmhjMk5oYkVOaGMyVWdkRzhnYTJWaVlXSXRZMkZ6WlZ4dUx5OGdWR2hoYm1zZ2VXOTFPaUJvZEhSd09pOHZjM1JoWTJ0dmRtVnlabXh2ZHk1amIyMHZZUzg0T1RVMU5UZ3dYRzVtZFc1amRHbHZiaUJvZVhCb1pXNWhkR1VvYzNSeUtTQjdYRzRnSUhKbGRIVnliaUJ6ZEhJdWNtVndiR0ZqWlNndktGdGhMWHBkS1NoYlFTMWFYU2t2Wnl3Z0p5UXhMU1F5SnlrdWRHOU1iM2RsY2tOaGMyVW9LVHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwVUd4MVoybHVUbUZ0WlNodlltb3BJSHRjYmlBZ2FXWW9kSGx3Wlc5bUtHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxLU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2FIbHdhR1Z1WVhSbEtHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdhSGx3YUdWdVlYUmxLRzlpYWk1amJHRnpjMDVoYldVcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQjdVR3gxWjJsdWZUdGNiaUpkZlE9PVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnBsdWdpbi5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Qb3NpdGlvbmFibGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5ib3gnKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmNvcmUnKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUE9TSVRJT05TID0gWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXTtcbnZhciBWRVJUSUNBTF9BTElHTk1FTlRTID0gWyd0b3AnLCAnYm90dG9tJywgJ2NlbnRlciddO1xudmFyIEhPUklaT05UQUxfQUxJR05NRU5UUyA9IFsnbGVmdCcsICdyaWdodCcsICdjZW50ZXInXTtcblxudmFyIEFMSUdOTUVOVFMgPSB7XG4gICdsZWZ0JzogVkVSVElDQUxfQUxJR05NRU5UUyxcbiAgJ3JpZ2h0JzogVkVSVElDQUxfQUxJR05NRU5UUyxcbiAgJ3RvcCc6IEhPUklaT05UQUxfQUxJR05NRU5UUyxcbiAgJ2JvdHRvbSc6IEhPUklaT05UQUxfQUxJR05NRU5UU1xufTtcblxuZnVuY3Rpb24gbmV4dEl0ZW0oaXRlbSwgYXJyYXkpIHtcbiAgdmFyIGN1cnJlbnRJZHggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICBpZiAoY3VycmVudElkeCA9PT0gYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBhcnJheVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXJyYXlbY3VycmVudElkeCArIDFdO1xuICB9XG59XG5cbnZhciBQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoUG9zaXRpb25hYmxlLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBQb3NpdGlvbmFibGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvc2l0aW9uYWJsZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBvc2l0aW9uYWJsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvc2l0aW9uYWJsZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvc2l0aW9uYWJsZSwgW3tcbiAgICBrZXk6ICdfaW5pdCcsXG5cbiAgICAvKipcbiAgICAgKiBBYnN0cmFjdCBjbGFzcyBlbmNhcHN1bGF0aW5nIHRoZSB0ZXRoZXItbGlrZSBleHBsaWNpdCBwb3NpdGlvbmluZyBsb2dpY1xuICAgICAqIGluY2x1ZGluZyByZXBvc2l0aW9uaW5nIGJhc2VkIG9uIG92ZXJsYXAuXG4gICAgICogRXhwZWN0cyBjbGFzc2VzIHRvIGRlZmluZSBkZWZhdWx0cyBmb3Igdk9mZnNldCwgaE9mZnNldCwgcG9zaXRpb24sXG4gICAgICogYWxpZ25tZW50LCBhbGxvd092ZXJsYXAsIGFuZCBhbGxvd0JvdHRvbU92ZXJsYXAuIFRoZXkgY2FuIGRvIHRoaXMgYnlcbiAgICAgKiBleHRlbmRpbmcgdGhlIGRlZmF1bHRzLCBvciAoZm9yIG5vdyByZWNvbW1lbmRlZCBkdWUgdG8gdGhlIHdheSBkb2NzIGFyZVxuICAgICAqIGdlbmVyYXRlZCkgYnkgZXhwbGljaXRseSBkZWNsYXJpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqKi9cblxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHRoaXMudHJpZWRQb3NpdGlvbnMgPSB7fTtcbiAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdhdXRvJyA/IHRoaXMuX2dldERlZmF1bHRQb3NpdGlvbigpIDogdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgdGhpcy5hbGlnbm1lbnQgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnYXV0bycgPyB0aGlzLl9nZXREZWZhdWx0QWxpZ25tZW50KCkgOiB0aGlzLm9wdGlvbnMuYWxpZ25tZW50O1xuICAgICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgIHRoaXMub3JpZ2luYWxBbGlnbm1lbnQgPSB0aGlzLmFsaWdubWVudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0RGVmYXVsdFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERlZmF1bHRQb3NpdGlvbigpIHtcbiAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0RGVmYXVsdEFsaWdubWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREZWZhdWx0QWxpZ25tZW50KCkge1xuICAgICAgc3dpdGNoICh0aGlzLnBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgcmV0dXJuICgwLCBfZm91bmRhdGlvblV0aWwyLnJ0bCkoKSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdHMgdGhlIHBvc2l0aW9uYWJsZSBwb3NzaWJsZSBwb3NpdGlvbnMgYnkgaXRlcmF0aW5nIHRocm91Z2ggYWxpZ25tZW50c1xuICAgICAqIGFuZCBwb3NpdGlvbnMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3JlcG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVwb3NpdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9hbGlnbm1lbnRzRXhoYXVzdGVkKHRoaXMucG9zaXRpb24pKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXh0SXRlbSh0aGlzLnBvc2l0aW9uLCBQT1NJVElPTlMpO1xuICAgICAgICB0aGlzLmFsaWdubWVudCA9IEFMSUdOTUVOVFNbdGhpcy5wb3NpdGlvbl1bMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yZWFsaWduKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRqdXN0cyB0aGUgZHJvcGRvd24gcGFuZSBwb3NzaWJsZSBwb3NpdGlvbnMgYnkgaXRlcmF0aW5nIHRocm91Z2ggYWxpZ25tZW50c1xuICAgICAqIG9uIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZWFsaWduJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYWxpZ24oKSB7XG4gICAgICB0aGlzLl9hZGRUcmllZFBvc2l0aW9uKHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50KTtcbiAgICAgIHRoaXMuYWxpZ25tZW50ID0gbmV4dEl0ZW0odGhpcy5hbGlnbm1lbnQsIEFMSUdOTUVOVFNbdGhpcy5wb3NpdGlvbl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19hZGRUcmllZFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZFRyaWVkUG9zaXRpb24ocG9zaXRpb24sIGFsaWdubWVudCkge1xuICAgICAgdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0gPSB0aGlzLnRyaWVkUG9zaXRpb25zW3Bvc2l0aW9uXSB8fCBbXTtcbiAgICAgIHRoaXMudHJpZWRQb3NpdGlvbnNbcG9zaXRpb25dLnB1c2goYWxpZ25tZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcG9zaXRpb25zRXhoYXVzdGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Bvc2l0aW9uc0V4aGF1c3RlZCgpIHtcbiAgICAgIHZhciBpc0V4aGF1c3RlZCA9IHRydWU7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFBPU0lUSU9OUy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpc0V4aGF1c3RlZCA9IGlzRXhoYXVzdGVkICYmIHRoaXMuX2FsaWdubWVudHNFeGhhdXN0ZWQoUE9TSVRJT05TW2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0V4aGF1c3RlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfYWxpZ25tZW50c0V4aGF1c3RlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hbGlnbm1lbnRzRXhoYXVzdGVkKHBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0gJiYgdGhpcy50cmllZFBvc2l0aW9uc1twb3NpdGlvbl0ubGVuZ3RoID09IEFMSUdOTUVOVFNbcG9zaXRpb25dLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBXaGVuIHdlJ3JlIHRyeWluZyB0byBjZW50ZXIsIHdlIGRvbid0IHdhbnQgdG8gYXBwbHkgb2Zmc2V0IHRoYXQncyBnb2luZyB0b1xuICAgIC8vIHRha2UgdXMganVzdCBvZmYgY2VudGVyLCBzbyB3cmFwIGFyb3VuZCB0byByZXR1cm4gMCBmb3IgdGhlIGFwcHJvcHJpYXRlXG4gICAgLy8gb2Zmc2V0IGluIHRob3NlIGFsaWdubWVudHMuICBUT0RPOiBGaWd1cmUgb3V0IGlmIHdlIHdhbnQgdG8gbWFrZSB0aGlzXG4gICAgLy8gY29uZmlndXJhYmxlIGJlaGF2aW9yLi4uIGl0IGZlZWxzIG1vcmUgaW50dWl0aXZlLCBlc3BlY2lhbGx5IGZvciB0b29sdGlwcywgYnV0XG4gICAgLy8gaXQncyBwb3NzaWJsZSBzb21lb25lIG1pZ2h0IGFjdHVhbGx5IHdhbnQgdG8gc3RhcnQgZnJvbSBjZW50ZXIgYW5kIHRoZW4gbnVkZ2VcbiAgICAvLyBzbGlnaHRseSBvZmYuXG5cbiAgfSwge1xuICAgIGtleTogJ19nZXRWT2Zmc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFZPZmZzZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZPZmZzZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldEhPZmZzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SE9mZnNldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaE9mZnNldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UG9zaXRpb24oJGFuY2hvciwgJGVsZW1lbnQsICRwYXJlbnQpIHtcbiAgICAgIGlmICgkYW5jaG9yLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgJGVsZURpbXMgPSBfZm91bmRhdGlvblV0aWwuQm94LkdldERpbWVuc2lvbnMoJGVsZW1lbnQpLFxuICAgICAgICAgICRhbmNob3JEaW1zID0gX2ZvdW5kYXRpb25VdGlsLkJveC5HZXREaW1lbnNpb25zKCRhbmNob3IpO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd092ZXJsYXApIHtcbiAgICAgICAgLy8gcmVzdG9yZSBvcmlnaW5hbCBwb3NpdGlvbiAmIGFsaWdubWVudCBiZWZvcmUgY2hlY2tpbmcgb3ZlcmxhcFxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFsaWdubWVudCA9IHRoaXMub3JpZ2luYWxBbGlnbm1lbnQ7XG4gICAgICB9XG5cbiAgICAgICRlbGVtZW50Lm9mZnNldChfZm91bmRhdGlvblV0aWwuQm94LkdldEV4cGxpY2l0T2Zmc2V0cygkZWxlbWVudCwgJGFuY2hvciwgdGhpcy5wb3NpdGlvbiwgdGhpcy5hbGlnbm1lbnQsIHRoaXMuX2dldFZPZmZzZXQoKSwgdGhpcy5fZ2V0SE9mZnNldCgpKSk7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFsbG93T3ZlcmxhcCkge1xuICAgICAgICB2YXIgb3ZlcmxhcHMgPSB7fTtcbiAgICAgICAgdmFyIG1pbk92ZXJsYXAgPSAxMDAwMDAwMDA7XG4gICAgICAgIC8vIGRlZmF1bHQgY29vcmRpbmF0ZXMgdG8gaG93IHdlIHN0YXJ0LCBpbiBjYXNlIHdlIGNhbid0IGZpZ3VyZSBvdXQgYmV0dGVyXG4gICAgICAgIHZhciBtaW5Db29yZGluYXRlcyA9IHsgcG9zaXRpb246IHRoaXMucG9zaXRpb24sIGFsaWdubWVudDogdGhpcy5hbGlnbm1lbnQgfTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLl9wb3NpdGlvbnNFeGhhdXN0ZWQoKSkge1xuICAgICAgICAgIHZhciBvdmVybGFwID0gX2ZvdW5kYXRpb25VdGlsLkJveC5PdmVybGFwQXJlYSgkZWxlbWVudCwgJHBhcmVudCwgZmFsc2UsIGZhbHNlLCB0aGlzLm9wdGlvbnMuYWxsb3dCb3R0b21PdmVybGFwKTtcbiAgICAgICAgICBpZiAob3ZlcmxhcCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvdmVybGFwIDwgbWluT3ZlcmxhcCkge1xuICAgICAgICAgICAgbWluT3ZlcmxhcCA9IG92ZXJsYXA7XG4gICAgICAgICAgICBtaW5Db29yZGluYXRlcyA9IHsgcG9zaXRpb246IHRoaXMucG9zaXRpb24sIGFsaWdubWVudDogdGhpcy5hbGlnbm1lbnQgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9yZXBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAkZWxlbWVudC5vZmZzZXQoX2ZvdW5kYXRpb25VdGlsLkJveC5HZXRFeHBsaWNpdE9mZnNldHMoJGVsZW1lbnQsICRhbmNob3IsIHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50LCB0aGlzLl9nZXRWT2Zmc2V0KCksIHRoaXMuX2dldEhPZmZzZXQoKSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGdldCB0aHJvdWdoIHRoZSBlbnRpcmUgbG9vcCwgdGhlcmUgd2FzIG5vIG5vbi1vdmVybGFwcGluZ1xuICAgICAgICAvLyBwb3NpdGlvbiBhdmFpbGFibGUuIFBpY2sgdGhlIHZlcnNpb24gd2l0aCBsZWFzdCBvdmVybGFwLlxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gbWluQ29vcmRpbmF0ZXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYWxpZ25tZW50ID0gbWluQ29vcmRpbmF0ZXMuYWxpZ25tZW50O1xuICAgICAgICAkZWxlbWVudC5vZmZzZXQoX2ZvdW5kYXRpb25VdGlsLkJveC5HZXRFeHBsaWNpdE9mZnNldHMoJGVsZW1lbnQsICRhbmNob3IsIHRoaXMucG9zaXRpb24sIHRoaXMuYWxpZ25tZW50LCB0aGlzLl9nZXRWT2Zmc2V0KCksIHRoaXMuX2dldEhPZmZzZXQoKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3NpdGlvbmFibGU7XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cblBvc2l0aW9uYWJsZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIHBvc2l0aW9uYWJsZSByZWxhdGl2ZSB0byBhbmNob3IuIENhbiBiZSBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG9yIGF1dG8uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICBwb3NpdGlvbjogJ2F1dG8nLFxuICAvKipcbiAgICogQWxpZ25tZW50IG9mIHBvc2l0aW9uYWJsZSByZWxhdGl2ZSB0byBhbmNob3IuIENhbiBiZSBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIGNlbnRlciwgb3IgYXV0by5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIGFsaWdubWVudDogJ2F1dG8nLFxuICAvKipcbiAgICogQWxsb3cgb3ZlcmxhcCBvZiBjb250YWluZXIvd2luZG93LiBJZiBmYWxzZSwgZHJvcGRvd24gcG9zaXRpb25hYmxlIGZpcnN0XG4gICAqIHRyeSB0byBwb3NpdGlvbiBhcyBkZWZpbmVkIGJ5IGRhdGEtcG9zaXRpb24gYW5kIGRhdGEtYWxpZ25tZW50LCBidXRcbiAgICogcmVwb3NpdGlvbiBpZiBpdCB3b3VsZCBjYXVzZSBhbiBvdmVyZmxvdy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFsbG93T3ZlcmxhcDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIG9ubHkgdGhlIGJvdHRvbSBvZiB0aGUgY29udGFpbmVyLiBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vblxuICAgKiBiZWhhdmlvciBmb3IgZHJvcGRvd25zLCBhbGxvd2luZyB0aGUgZHJvcGRvd24gdG8gZXh0ZW5kIHRoZSBib3R0b20gb2YgdGhlXG4gICAqIHNjcmVlbiBidXQgbm90IG90aGVyd2lzZSBpbmZsdWVuY2Ugb3IgYnJlYWsgb3V0IG9mIHRoZSBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFsbG93Qm90dG9tT3ZlcmxhcDogdHJ1ZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdGhlIHBvc2l0aW9uYWJsZSBzaG91bGQgYmUgc2VwYXJhdGVkIHZlcnRpY2FsbHkgZnJvbSBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB2T2Zmc2V0OiAwLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0aGUgcG9zaXRpb25hYmxlIHNob3VsZCBiZSBzZXBhcmF0ZWQgaG9yaXpvbnRhbGx5IGZyb20gYW5jaG9yXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgaE9mZnNldDogMFxufTtcblxuZXhwb3J0cy5Qb3NpdGlvbmFibGUgPSBQb3NpdGlvbmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1Y0c5emFYUnBiMjVoWW14bExtcHpJbDBzSW01aGJXVnpJanBiSWxCUFUwbFVTVTlPVXlJc0lsWkZVbFJKUTBGTVgwRk1TVWRPVFVWT1ZGTWlMQ0pJVDFKSldrOU9WRUZNWDBGTVNVZE9UVVZPVkZNaUxDSkJURWxIVGsxRlRsUlRJaXdpYm1WNGRFbDBaVzBpTENKcGRHVnRJaXdpWVhKeVlYa2lMQ0pqZFhKeVpXNTBTV1I0SWl3aWFXNWtaWGhQWmlJc0lteGxibWQwYUNJc0lsQnZjMmwwYVc5dVlXSnNaU0lzSW5SeWFXVmtVRzl6YVhScGIyNXpJaXdpY0c5emFYUnBiMjRpTENKdmNIUnBiMjV6SWl3aVgyZGxkRVJsWm1GMWJIUlFiM05wZEdsdmJpSXNJbUZzYVdkdWJXVnVkQ0lzSWw5blpYUkVaV1poZFd4MFFXeHBaMjV0Wlc1MElpd2liM0pwWjJsdVlXeFFiM05wZEdsdmJpSXNJbTl5YVdkcGJtRnNRV3hwWjI1dFpXNTBJaXdpWDJGc2FXZHViV1Z1ZEhORmVHaGhkWE4wWldRaUxDSmZjbVZoYkdsbmJpSXNJbDloWkdSVWNtbGxaRkJ2YzJsMGFXOXVJaXdpY0hWemFDSXNJbWx6Ulhob1lYVnpkR1ZrSWl3aWFTSXNJblpQWm1aelpYUWlMQ0pvVDJabWMyVjBJaXdpSkdGdVkyaHZjaUlzSWlSbGJHVnRaVzUwSWl3aUpIQmhjbVZ1ZENJc0ltRjBkSElpTENJa1pXeGxSR2x0Y3lJc0lrSnZlQ0lzSWtkbGRFUnBiV1Z1YzJsdmJuTWlMQ0lrWVc1amFHOXlSR2x0Y3lJc0ltRnNiRzkzVDNabGNteGhjQ0lzSW05bVpuTmxkQ0lzSWtkbGRFVjRjR3hwWTJsMFQyWm1jMlYwY3lJc0lsOW5aWFJXVDJabWMyVjBJaXdpWDJkbGRFaFBabVp6WlhRaUxDSnZkbVZ5YkdGd2N5SXNJbTFwYms5MlpYSnNZWEFpTENKdGFXNURiMjl5WkdsdVlYUmxjeUlzSWw5d2IzTnBkR2x2Ym5ORmVHaGhkWE4wWldRaUxDSnZkbVZ5YkdGd0lpd2lUM1psY214aGNFRnlaV0VpTENKaGJHeHZkMEp2ZEhSdmJVOTJaWEpzWVhBaUxDSmZjbVZ3YjNOcGRHbHZiaUlzSWxCc2RXZHBiaUlzSW1SbFptRjFiSFJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenM3TzBGQlJVRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPMEZCUlVFc1NVRkJUVUVzV1VGQldTeERRVUZETEUxQlFVUXNSVUZCVXl4UFFVRlVMRVZCUVd0Q0xFdEJRV3hDTEVWQlFYbENMRkZCUVhwQ0xFTkJRV3hDTzBGQlEwRXNTVUZCVFVNc2MwSkJRWE5DTEVOQlFVTXNTMEZCUkN4RlFVRlJMRkZCUVZJc1JVRkJhMElzVVVGQmJFSXNRMEZCTlVJN1FVRkRRU3hKUVVGTlF5eDNRa0ZCZDBJc1EwRkJReXhOUVVGRUxFVkJRVk1zVDBGQlZDeEZRVUZyUWl4UlFVRnNRaXhEUVVFNVFqczdRVUZGUVN4SlFVRk5ReXhoUVVGaE8wRkJRMnBDTEZWQlFWRkdMRzFDUVVSVE8wRkJSV3BDTEZkQlFWTkJMRzFDUVVaUk8wRkJSMnBDTEZOQlFVOURMSEZDUVVoVk8wRkJTV3BDTEZsQlFWVkJPMEZCU2s4c1EwRkJia0k3TzBGQlQwRXNVMEZCVTBVc1VVRkJWQ3hEUVVGclFrTXNTVUZCYkVJc1JVRkJkMEpETEV0QlFYaENMRVZCUVN0Q08wRkJRemRDTEUxQlFVbERMR0ZCUVdGRUxFMUJRVTFGTEU5QlFVNHNRMEZCWTBnc1NVRkJaQ3hEUVVGcVFqdEJRVU5CTEUxQlFVZEZMR1ZCUVdWRUxFMUJRVTFITEUxQlFVNHNSMEZCWlN4RFFVRnFReXhGUVVGdlF6dEJRVU5zUXl4WFFVRlBTQ3hOUVVGTkxFTkJRVTRzUTBGQlVEdEJRVU5FTEVkQlJrUXNUVUZGVHp0QlFVTk1MRmRCUVU5QkxFMUJRVTFETEdGQlFXRXNRMEZCYmtJc1EwRkJVRHRCUVVORU8wRkJRMFk3TzBsQlIwdEhMRms3T3pzN096czdPenM3T3p0QlFVTktPenM3T3pzN096czdPelJDUVZWUk8wRkJRMDRzVjBGQlMwTXNZMEZCVEN4SFFVRnpRaXhGUVVGMFFqdEJRVU5CTEZkQlFVdERMRkZCUVV3c1IwRkJhVUlzUzBGQlMwTXNUMEZCVEN4RFFVRmhSQ3hSUVVGaUxFdEJRVEJDTEUxQlFURkNMRWRCUVcxRExFdEJRVXRGTEcxQ1FVRk1MRVZCUVc1RExFZEJRV2RGTEV0QlFVdEVMRTlCUVV3c1EwRkJZVVFzVVVGQk9VWTdRVUZEUVN4WFFVRkxSeXhUUVVGTUxFZEJRV2xDTEV0QlFVdEdMRTlCUVV3c1EwRkJZVVVzVTBGQllpeExRVUV5UWl4TlFVRXpRaXhIUVVGdlF5eExRVUZMUXl4dlFrRkJUQ3hGUVVGd1F5eEhRVUZyUlN4TFFVRkxTQ3hQUVVGTUxFTkJRV0ZGTEZOQlFXaEhPMEZCUTBFc1YwRkJTMFVzWjBKQlFVd3NSMEZCZDBJc1MwRkJTMHdzVVVGQk4wSTdRVUZEUVN4WFFVRkxUU3hwUWtGQlRDeEhRVUY1UWl4TFFVRkxTQ3hUUVVFNVFqdEJRVU5FT3pzN01FTkJSWE5DTzBGQlEzSkNMR0ZCUVU4c1VVRkJVRHRCUVVORU96czdNa05CUlhOQ08wRkJRM0pDTEdOQlFVOHNTMEZCUzBnc1VVRkJXanRCUVVORkxHRkJRVXNzVVVGQlREdEJRVU5CTEdGQlFVc3NTMEZCVER0QlFVTkZMR2xDUVVGUExEaENRVUZSTEU5QlFWSXNSMEZCYTBJc1RVRkJla0k3UVVGRFJpeGhRVUZMTEUxQlFVdzdRVUZEUVN4aFFVRkxMRTlCUVV3N1FVRkRSU3hwUWtGQlR5eFJRVUZRTzBGQlRrbzdRVUZSUkRzN1FVRkZSRHM3T3pzN096czdPMnREUVUxak8wRkJRMW9zVlVGQlJ5eExRVUZMVHl4dlFrRkJUQ3hEUVVFd1FpeExRVUZMVUN4UlFVRXZRaXhEUVVGSUxFVkJRVFpETzBGQlF6TkRMR0ZCUVV0QkxGRkJRVXdzUjBGQlowSlNMRk5CUVZNc1MwRkJTMUVzVVVGQlpDeEZRVUYzUWxvc1UwRkJlRUlzUTBGQmFFSTdRVUZEUVN4aFFVRkxaU3hUUVVGTUxFZEJRV2xDV2l4WFFVRlhMRXRCUVV0VExGRkJRV2hDTEVWQlFUQkNMRU5CUVRGQ0xFTkJRV3BDTzBGQlEwUXNUMEZJUkN4TlFVZFBPMEZCUTB3c1lVRkJTMUVzVVVGQlREdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzclFrRk5WenRCUVVOVUxGZEJRVXRETEdsQ1FVRk1MRU5CUVhWQ0xFdEJRVXRVTEZGQlFUVkNMRVZCUVhORExFdEJRVXRITEZOQlFUTkRPMEZCUTBFc1YwRkJTMEVzVTBGQlRDeEhRVUZwUWxnc1UwRkJVeXhMUVVGTFZ5eFRRVUZrTEVWQlFYbENXaXhYUVVGWExFdEJRVXRUTEZGQlFXaENMRU5CUVhwQ0xFTkJRV3BDTzBGQlEwUTdPenR6UTBGRmFVSkJMRkVzUlVGQlZVY3NVeXhGUVVGWE8wRkJRM0pETEZkQlFVdEtMR05CUVV3c1EwRkJiMEpETEZGQlFYQkNMRWxCUVdkRExFdEJRVXRFTEdOQlFVd3NRMEZCYjBKRExGRkJRWEJDTEV0QlFXbERMRVZCUVdwRk8wRkJRMEVzVjBGQlMwUXNZMEZCVEN4RFFVRnZRa01zVVVGQmNFSXNSVUZCT0VKVkxFbEJRVGxDTEVOQlFXMURVQ3hUUVVGdVF6dEJRVU5FT3pzN01FTkJSWEZDTzBGQlEzQkNMRlZCUVVsUkxHTkJRV01zU1VGQmJFSTdRVUZEUVN4WFFVRkpMRWxCUVVsRExFbEJRVWtzUTBGQldpeEZRVUZsUVN4SlFVRkplRUlzVlVGQlZWTXNUVUZCTjBJc1JVRkJjVU5sTEVkQlFYSkRMRVZCUVRCRE8wRkJRM2hEUkN4elFrRkJZMEVzWlVGQlpTeExRVUZMU2l4dlFrRkJUQ3hEUVVFd1FtNUNMRlZCUVZWM1FpeERRVUZXTEVOQlFURkNMRU5CUVRkQ08wRkJRMFE3UVVGRFJDeGhRVUZQUkN4WFFVRlFPMEZCUTBRN096dDVRMEZGYjBKWUxGRXNSVUZCVlR0QlFVTTNRaXhoUVVGUExFdEJRVXRFTEdOQlFVd3NRMEZCYjBKRExGRkJRWEJDTEV0QlFXbERMRXRCUVV0RUxHTkJRVXdzUTBGQmIwSkRMRkZCUVhCQ0xFVkJRVGhDU0N4TlFVRTVRaXhKUVVGM1EwNHNWMEZCVjFNc1VVRkJXQ3hGUVVGeFFrZ3NUVUZCY2tjN1FVRkRSRHM3UVVGSFJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdhME5CUTJNN1FVRkRXaXhoUVVGUExFdEJRVXRKTEU5QlFVd3NRMEZCWVZrc1QwRkJjRUk3UVVGRFJEczdPMnREUVVWaE8wRkJRMW9zWVVGQlR5eExRVUZMV2l4UFFVRk1MRU5CUVdGaExFOUJRWEJDTzBGQlEwUTdPenRwUTBGSFdVTXNUeXhGUVVGVFF5eFJMRVZCUVZWRExFOHNSVUZCVXp0QlFVTjJReXhWUVVGSFJpeFJRVUZSUnl4SlFVRlNMRU5CUVdFc1pVRkJZaXhOUVVGclF5eFBRVUZ5UXl4RlFVRTJRenRCUVVGRkxHVkJRVThzUzBGQlVEdEJRVUZsTzBGQlF6bEVMRlZCUVVsRExGZEJRVmRETEc5Q1FVRkpReXhoUVVGS0xFTkJRV3RDVEN4UlFVRnNRaXhEUVVGbU8wRkJRVUVzVlVGRFNVMHNZMEZCWTBZc2IwSkJRVWxETEdGQlFVb3NRMEZCYTBKT0xFOUJRV3hDTEVOQlJHeENPenRCUVVsQkxGVkJRVWtzUTBGQlF5eExRVUZMWkN4UFFVRk1MRU5CUVdGelFpeFpRVUZzUWl4RlFVRm5RenRCUVVNNVFqdEJRVU5CTEdGQlFVdDJRaXhSUVVGTUxFZEJRV2RDTEV0QlFVdExMR2RDUVVGeVFqdEJRVU5CTEdGQlFVdEdMRk5CUVV3c1IwRkJhVUlzUzBGQlMwY3NhVUpCUVhSQ08wRkJRMFE3TzBGQlJVUlZMR1ZCUVZOUkxFMUJRVlFzUTBGQlowSktMRzlDUVVGSlN5eHJRa0ZCU2l4RFFVRjFRbFFzVVVGQmRrSXNSVUZCYVVORUxFOUJRV3BETEVWQlFUQkRMRXRCUVV0bUxGRkJRUzlETEVWQlFYbEVMRXRCUVV0SExGTkJRVGxFTEVWQlFYbEZMRXRCUVV0MVFpeFhRVUZNTEVWQlFYcEZMRVZCUVRaR0xFdEJRVXRETEZkQlFVd3NSVUZCTjBZc1EwRkJhRUk3TzBGQlJVRXNWVUZCUnl4RFFVRkRMRXRCUVVzeFFpeFBRVUZNTEVOQlFXRnpRaXhaUVVGcVFpeEZRVUVyUWp0QlFVTTNRaXhaUVVGSlN5eFhRVUZYTEVWQlFXWTdRVUZEUVN4WlFVRkpReXhoUVVGaExGTkJRV3BDTzBGQlEwRTdRVUZEUVN4WlFVRkpReXhwUWtGQmFVSXNSVUZCUXpsQ0xGVkJRVlVzUzBGQlMwRXNVVUZCYUVJc1JVRkJNRUpITEZkQlFWY3NTMEZCUzBFc1UwRkJNVU1zUlVGQmNrSTdRVUZEUVN4bFFVRk5MRU5CUVVNc1MwRkJTelJDTEcxQ1FVRk1MRVZCUVZBc1JVRkJiVU03UVVGRGFrTXNZMEZCU1VNc1ZVRkJWVm9zYjBKQlFVbGhMRmRCUVVvc1EwRkJaMEpxUWl4UlFVRm9RaXhGUVVFd1FrTXNUMEZCTVVJc1JVRkJiVU1zUzBGQmJrTXNSVUZCTUVNc1MwRkJNVU1zUlVGQmFVUXNTMEZCUzJoQ0xFOUJRVXdzUTBGQllXbERMR3RDUVVFNVJDeERRVUZrTzBGQlEwRXNZMEZCUjBZc1dVRkJXU3hEUVVGbUxFVkJRV3RDTzBGQlEyaENPMEZCUTBRN08wRkJSVVFzWTBGQlIwRXNWVUZCVlVnc1ZVRkJZaXhGUVVGNVFqdEJRVU4yUWtFc2VVSkJRV0ZITEU5QlFXSTdRVUZEUVVZc05rSkJRV2xDTEVWQlFVTTVRaXhWUVVGVkxFdEJRVXRCTEZGQlFXaENMRVZCUVRCQ1J5eFhRVUZYTEV0QlFVdEJMRk5CUVRGRExFVkJRV3BDTzBGQlEwUTdPMEZCUlVRc1pVRkJTMmRETEZkQlFVdzdPMEZCUlVGdVFpeHRRa0ZCVTFFc1RVRkJWQ3hEUVVGblFrb3NiMEpCUVVsTExHdENRVUZLTEVOQlFYVkNWQ3hSUVVGMlFpeEZRVUZwUTBRc1QwRkJha01zUlVGQk1FTXNTMEZCUzJZc1VVRkJMME1zUlVGQmVVUXNTMEZCUzBjc1UwRkJPVVFzUlVGQmVVVXNTMEZCUzNWQ0xGZEJRVXdzUlVGQmVrVXNSVUZCTmtZc1MwRkJTME1zVjBGQlRDeEZRVUUzUml4RFFVRm9RanRCUVVORU8wRkJRMFE3UVVGRFFUdEJRVU5CTEdGQlFVc3pRaXhSUVVGTUxFZEJRV2RDT0VJc1pVRkJaVGxDTEZGQlFTOUNPMEZCUTBFc1lVRkJTMGNzVTBGQlRDeEhRVUZwUWpKQ0xHVkJRV1V6UWl4VFFVRm9RenRCUVVOQllTeHBRa0ZCVTFFc1RVRkJWQ3hEUVVGblFrb3NiMEpCUVVsTExHdENRVUZLTEVOQlFYVkNWQ3hSUVVGMlFpeEZRVUZwUTBRc1QwRkJha01zUlVGQk1FTXNTMEZCUzJZc1VVRkJMME1zUlVGQmVVUXNTMEZCUzBjc1UwRkJPVVFzUlVGQmVVVXNTMEZCUzNWQ0xGZEJRVXdzUlVGQmVrVXNSVUZCTmtZc1MwRkJTME1zVjBGQlRDeEZRVUUzUml4RFFVRm9RanRCUVVORU8wRkJRMFk3T3pzN1JVRnlTWGRDVXl4clFqczdRVUY1U1ROQ2RFTXNZVUZCWVhWRExGRkJRV0lzUjBGQmQwSTdRVUZEZEVJN096czdPenRCUVUxQmNrTXNXVUZCVlN4TlFWQlpPMEZCVVhSQ096czdPenM3UVVGTlFVY3NZVUZCVnl4TlFXUlhPMEZCWlhSQ096czdPenM3T3p0QlFWRkJiMElzWjBKQlFXTXNTMEYyUWxFN1FVRjNRblJDT3pzN096czdPenRCUVZGQlZ5eHpRa0ZCYjBJc1NVRm9RMFU3UVVGcFEzUkNPenM3T3pzN1FVRk5RWEpDTEZkQlFWTXNRMEYyUTJFN1FVRjNRM1JDT3pzN096czdRVUZOUVVNc1YwRkJVenRCUVRsRFlTeERRVUY0UWpzN1VVRnBSRkZvUWl4WkxFZEJRVUZCTEZraUxDSm1hV3hsSWpvaVptOTFibVJoZEdsdmJpNXdiM05wZEdsdmJtRmliR1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbHRjRzl5ZENCN0lFSnZlQ0I5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbUp2ZUNjN1hHNXBiWEJ2Y25RZ2V5QlFiSFZuYVc0Z2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVjR3gxWjJsdUp6dGNibWx0Y0c5eWRDQjdJSEowYkNCaGN5QlNkR3dnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzVqYjNKbEp6dGNibHh1WTI5dWMzUWdVRTlUU1ZSSlQwNVRJRDBnV3lkc1pXWjBKeXdnSjNKcFoyaDBKeXdnSjNSdmNDY3NJQ2RpYjNSMGIyMG5YVHRjYm1OdmJuTjBJRlpGVWxSSlEwRk1YMEZNU1VkT1RVVk9WRk1nUFNCYkozUnZjQ2NzSUNkaWIzUjBiMjBuTENBblkyVnVkR1Z5SjEwN1hHNWpiMjV6ZENCSVQxSkpXazlPVkVGTVgwRk1TVWRPVFVWT1ZGTWdQU0JiSjJ4bFpuUW5MQ0FuY21sbmFIUW5MQ0FuWTJWdWRHVnlKMTA3WEc1Y2JtTnZibk4wSUVGTVNVZE9UVVZPVkZNZ1BTQjdYRzRnSUNkc1pXWjBKem9nVmtWU1ZFbERRVXhmUVV4SlIwNU5SVTVVVXl4Y2JpQWdKM0pwWjJoMEp6b2dWa1ZTVkVsRFFVeGZRVXhKUjA1TlJVNVVVeXhjYmlBZ0ozUnZjQ2M2SUVoUFVrbGFUMDVVUVV4ZlFVeEpSMDVOUlU1VVV5eGNiaUFnSjJKdmRIUnZiU2M2SUVoUFVrbGFUMDVVUVV4ZlFVeEpSMDVOUlU1VVUxeHVmVnh1WEc1bWRXNWpkR2x2YmlCdVpYaDBTWFJsYlNocGRHVnRMQ0JoY25KaGVTa2dlMXh1SUNCMllYSWdZM1Z5Y21WdWRFbGtlQ0E5SUdGeWNtRjVMbWx1WkdWNFQyWW9hWFJsYlNrN1hHNGdJR2xtS0dOMWNuSmxiblJKWkhnZ1BUMDlJR0Z5Y21GNUxteGxibWQwYUNBdElERXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lYSnlZWGxiTUYwN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdGeWNtRjVXMk4xY25KbGJuUkpaSGdnS3lBeFhUdGNiaUFnZlZ4dWZWeHVYRzVjYm1Oc1lYTnpJRkJ2YzJsMGFXOXVZV0pzWlNCbGVIUmxibVJ6SUZCc2RXZHBiaUI3WEc0Z0lDOHFLbHh1SUNBZ0tpQkJZbk4wY21GamRDQmpiR0Z6Y3lCbGJtTmhjSE4xYkdGMGFXNW5JSFJvWlNCMFpYUm9aWEl0YkdsclpTQmxlSEJzYVdOcGRDQndiM05wZEdsdmJtbHVaeUJzYjJkcFkxeHVJQ0FnS2lCcGJtTnNkV1JwYm1jZ2NtVndiM05wZEdsdmJtbHVaeUJpWVhObFpDQnZiaUJ2ZG1WeWJHRndMbHh1SUNBZ0tpQkZlSEJsWTNSeklHTnNZWE56WlhNZ2RHOGdaR1ZtYVc1bElHUmxabUYxYkhSeklHWnZjaUIyVDJabWMyVjBMQ0JvVDJabWMyVjBMQ0J3YjNOcGRHbHZiaXhjYmlBZ0lDb2dZV3hwWjI1dFpXNTBMQ0JoYkd4dmQwOTJaWEpzWVhBc0lHRnVaQ0JoYkd4dmQwSnZkSFJ2YlU5MlpYSnNZWEF1SUZSb1pYa2dZMkZ1SUdSdklIUm9hWE1nWW5sY2JpQWdJQ29nWlhoMFpXNWthVzVuSUhSb1pTQmtaV1poZFd4MGN5d2diM0lnS0dadmNpQnViM2NnY21WamIyMXRaVzVrWldRZ1pIVmxJSFJ2SUhSb1pTQjNZWGtnWkc5amN5QmhjbVZjYmlBZ0lDb2daMlZ1WlhKaGRHVmtLU0JpZVNCbGVIQnNhV05wZEd4NUlHUmxZMnhoY21sdVp5QjBhR1Z0TGx4dUlDQWdLbHh1SUNBZ0tpb3ZYRzVjYmlBZ1gybHVhWFFvS1NCN1hHNGdJQ0FnZEdocGN5NTBjbWxsWkZCdmMybDBhVzl1Y3lBOUlIdDlPMXh1SUNBZ0lIUm9hWE11Y0c5emFYUnBiMjRnSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbkJ2YzJsMGFXOXVJRDA5UFNBbllYVjBieWNnUHlCMGFHbHpMbDluWlhSRVpXWmhkV3gwVUc5emFYUnBiMjRvS1NBNklIUm9hWE11YjNCMGFXOXVjeTV3YjNOcGRHbHZianRjYmlBZ0lDQjBhR2x6TG1Gc2FXZHViV1Z1ZENBOUlIUm9hWE11YjNCMGFXOXVjeTVoYkdsbmJtMWxiblFnUFQwOUlDZGhkWFJ2SnlBL0lIUm9hWE11WDJkbGRFUmxabUYxYkhSQmJHbG5ibTFsYm5Rb0tTQTZJSFJvYVhNdWIzQjBhVzl1Y3k1aGJHbG5ibTFsYm5RN1hHNGdJQ0FnZEdocGN5NXZjbWxuYVc1aGJGQnZjMmwwYVc5dUlEMGdkR2hwY3k1d2IzTnBkR2x2Ymp0Y2JpQWdJQ0IwYUdsekxtOXlhV2RwYm1Gc1FXeHBaMjV0Wlc1MElEMGdkR2hwY3k1aGJHbG5ibTFsYm5RN1hHNGdJSDFjYmx4dUlDQmZaMlYwUkdWbVlYVnNkRkJ2YzJsMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMkp2ZEhSdmJTYzdYRzRnSUgxY2JseHVJQ0JmWjJWMFJHVm1ZWFZzZEVGc2FXZHViV1Z1ZENncElIdGNiaUFnSUNCemQybDBZMmdvZEdocGN5NXdiM05wZEdsdmJpa2dlMXh1SUNBZ0lDQWdZMkZ6WlNBblltOTBkRzl0SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1J2Y0NjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCU2RHd29LU0EvSUNkeWFXZG9kQ2NnT2lBbmJHVm1kQ2M3WEc0Z0lDQWdJQ0JqWVhObElDZHNaV1owSnpwY2JpQWdJQ0FnSUdOaGMyVWdKM0pwWjJoMEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZGliM1IwYjIwbk8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR3AxYzNSeklIUm9aU0J3YjNOcGRHbHZibUZpYkdVZ2NHOXpjMmxpYkdVZ2NHOXphWFJwYjI1eklHSjVJR2wwWlhKaGRHbHVaeUIwYUhKdmRXZG9JR0ZzYVdkdWJXVnVkSE5jYmlBZ0lDb2dZVzVrSUhCdmMybDBhVzl1Y3k1Y2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmY21Wd2IzTnBkR2x2YmlncElIdGNiaUFnSUNCcFppaDBhR2x6TGw5aGJHbG5ibTFsYm5SelJYaG9ZWFZ6ZEdWa0tIUm9hWE11Y0c5emFYUnBiMjRwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVJRDBnYm1WNGRFbDBaVzBvZEdocGN5NXdiM05wZEdsdmJpd2dVRTlUU1ZSSlQwNVRLVHRjYmlBZ0lDQWdJSFJvYVhNdVlXeHBaMjV0Wlc1MElEMGdRVXhKUjA1TlJVNVVVMXQwYUdsekxuQnZjMmwwYVc5dVhWc3dYVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmY21WaGJHbG5iaWdwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQlpHcDFjM1J6SUhSb1pTQmtjbTl3Wkc5M2JpQndZVzVsSUhCdmMzTnBZbXhsSUhCdmMybDBhVzl1Y3lCaWVTQnBkR1Z5WVhScGJtY2dkR2h5YjNWbmFDQmhiR2xuYm0xbGJuUnpYRzRnSUNBcUlHOXVJSFJvWlNCamRYSnlaVzUwSUhCdmMybDBhVzl1TGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjl5WldGc2FXZHVLQ2tnZTF4dUlDQWdJSFJvYVhNdVgyRmtaRlJ5YVdWa1VHOXphWFJwYjI0b2RHaHBjeTV3YjNOcGRHbHZiaXdnZEdocGN5NWhiR2xuYm0xbGJuUXBYRzRnSUNBZ2RHaHBjeTVoYkdsbmJtMWxiblFnUFNCdVpYaDBTWFJsYlNoMGFHbHpMbUZzYVdkdWJXVnVkQ3dnUVV4SlIwNU5SVTVVVTF0MGFHbHpMbkJ2YzJsMGFXOXVYU2xjYmlBZ2ZWeHVYRzRnSUY5aFpHUlVjbWxsWkZCdmMybDBhVzl1S0hCdmMybDBhVzl1TENCaGJHbG5ibTFsYm5RcElIdGNiaUFnSUNCMGFHbHpMblJ5YVdWa1VHOXphWFJwYjI1elczQnZjMmwwYVc5dVhTQTlJSFJvYVhNdWRISnBaV1JRYjNOcGRHbHZibk5iY0c5emFYUnBiMjVkSUh4OElGdGRYRzRnSUNBZ2RHaHBjeTUwY21sbFpGQnZjMmwwYVc5dWMxdHdiM05wZEdsdmJsMHVjSFZ6YUNoaGJHbG5ibTFsYm5RcE8xeHVJQ0I5WEc1Y2JpQWdYM0J2YzJsMGFXOXVjMFY0YUdGMWMzUmxaQ2dwSUh0Y2JpQWdJQ0IyWVhJZ2FYTkZlR2hoZFhOMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUdadmNpaDJZWElnYVNBOUlEQTdJR2tnUENCUVQxTkpWRWxQVGxNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2x6Ulhob1lYVnpkR1ZrSUQwZ2FYTkZlR2hoZFhOMFpXUWdKaVlnZEdocGN5NWZZV3hwWjI1dFpXNTBjMFY0YUdGMWMzUmxaQ2hRVDFOSlZFbFBUbE5iYVYwcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdhWE5GZUdoaGRYTjBaV1E3WEc0Z0lIMWNibHh1SUNCZllXeHBaMjV0Wlc1MGMwVjRhR0YxYzNSbFpDaHdiM05wZEdsdmJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJ5YVdWa1VHOXphWFJwYjI1elczQnZjMmwwYVc5dVhTQW1KaUIwYUdsekxuUnlhV1ZrVUc5emFYUnBiMjV6VzNCdmMybDBhVzl1WFM1c1pXNW5kR2dnUFQwZ1FVeEpSMDVOUlU1VVUxdHdiM05wZEdsdmJsMHViR1Z1WjNSb08xeHVJQ0I5WEc1Y2JseHVJQ0F2THlCWGFHVnVJSGRsSjNKbElIUnllV2x1WnlCMGJ5QmpaVzUwWlhJc0lIZGxJR1J2YmlkMElIZGhiblFnZEc4Z1lYQndiSGtnYjJabWMyVjBJSFJvWVhRbmN5Qm5iMmx1WnlCMGIxeHVJQ0F2THlCMFlXdGxJSFZ6SUdwMWMzUWdiMlptSUdObGJuUmxjaXdnYzI4Z2QzSmhjQ0JoY205MWJtUWdkRzhnY21WMGRYSnVJREFnWm05eUlIUm9aU0JoY0hCeWIzQnlhV0YwWlZ4dUlDQXZMeUJ2Wm1aelpYUWdhVzRnZEdodmMyVWdZV3hwWjI1dFpXNTBjeTRnSUZSUFJFODZJRVpwWjNWeVpTQnZkWFFnYVdZZ2QyVWdkMkZ1ZENCMGJ5QnRZV3RsSUhSb2FYTmNiaUFnTHk4Z1kyOXVabWxuZFhKaFlteGxJR0psYUdGMmFXOXlMaTR1SUdsMElHWmxaV3h6SUcxdmNtVWdhVzUwZFdsMGFYWmxMQ0JsYzNCbFkybGhiR3g1SUdadmNpQjBiMjlzZEdsd2N5d2dZblYwWEc0Z0lDOHZJR2wwSjNNZ2NHOXpjMmxpYkdVZ2MyOXRaVzl1WlNCdGFXZG9kQ0JoWTNSMVlXeHNlU0IzWVc1MElIUnZJSE4wWVhKMElHWnliMjBnWTJWdWRHVnlJR0Z1WkNCMGFHVnVJRzUxWkdkbFhHNGdJQzh2SUhOc2FXZG9kR3g1SUc5bVppNWNiaUFnWDJkbGRGWlBabVp6WlhRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXViM0IwYVc5dWN5NTJUMlptYzJWME8xeHVJQ0I5WEc1Y2JpQWdYMmRsZEVoUFptWnpaWFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWIzQjBhVzl1Y3k1b1QyWm1jMlYwTzF4dUlDQjlYRzVjYmx4dUlDQmZjMlYwVUc5emFYUnBiMjRvSkdGdVkyaHZjaXdnSkdWc1pXMWxiblFzSUNSd1lYSmxiblFwSUh0Y2JpQWdJQ0JwWmlna1lXNWphRzl5TG1GMGRISW9KMkZ5YVdFdFpYaHdZVzVrWldRbktTQTlQVDBnSjJaaGJITmxKeWw3SUhKbGRIVnliaUJtWVd4elpUc2dmVnh1SUNBZ0lIWmhjaUFrWld4bFJHbHRjeUE5SUVKdmVDNUhaWFJFYVcxbGJuTnBiMjV6S0NSbGJHVnRaVzUwS1N4Y2JpQWdJQ0FnSUNBZ0pHRnVZMmh2Y2tScGJYTWdQU0JDYjNndVIyVjBSR2x0Wlc1emFXOXVjeWdrWVc1amFHOXlLVHRjYmx4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TG05d2RHbHZibk11WVd4c2IzZFBkbVZ5YkdGd0tTQjdYRzRnSUNBZ0lDQXZMeUJ5WlhOMGIzSmxJRzl5YVdkcGJtRnNJSEJ2YzJsMGFXOXVJQ1lnWVd4cFoyNXRaVzUwSUdKbFptOXlaU0JqYUdWamEybHVaeUJ2ZG1WeWJHRndYRzRnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1SUQwZ2RHaHBjeTV2Y21sbmFXNWhiRkJ2YzJsMGFXOXVPMXh1SUNBZ0lDQWdkR2hwY3k1aGJHbG5ibTFsYm5RZ1BTQjBhR2x6TG05eWFXZHBibUZzUVd4cFoyNXRaVzUwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQ1JsYkdWdFpXNTBMbTltWm5ObGRDaENiM2d1UjJWMFJYaHdiR2xqYVhSUFptWnpaWFJ6S0NSbGJHVnRaVzUwTENBa1lXNWphRzl5TENCMGFHbHpMbkJ2YzJsMGFXOXVMQ0IwYUdsekxtRnNhV2R1YldWdWRDd2dkR2hwY3k1ZloyVjBWazltWm5ObGRDZ3BMQ0IwYUdsekxsOW5aWFJJVDJabWMyVjBLQ2twS1R0Y2JseHVJQ0FnSUdsbUtDRjBhR2x6TG05d2RHbHZibk11WVd4c2IzZFBkbVZ5YkdGd0tTQjdYRzRnSUNBZ0lDQjJZWElnYjNabGNteGhjSE1nUFNCN2ZUdGNiaUFnSUNBZ0lIWmhjaUJ0YVc1UGRtVnliR0Z3SUQwZ01UQXdNREF3TURBd08xeHVJQ0FnSUNBZ0x5OGdaR1ZtWVhWc2RDQmpiMjl5WkdsdVlYUmxjeUIwYnlCb2IzY2dkMlVnYzNSaGNuUXNJR2x1SUdOaGMyVWdkMlVnWTJGdUozUWdabWxuZFhKbElHOTFkQ0JpWlhSMFpYSmNiaUFnSUNBZ0lIWmhjaUJ0YVc1RGIyOXlaR2x1WVhSbGN5QTlJSHR3YjNOcGRHbHZiam9nZEdocGN5NXdiM05wZEdsdmJpd2dZV3hwWjI1dFpXNTBPaUIwYUdsekxtRnNhV2R1YldWdWRIMDdYRzRnSUNBZ0lDQjNhR2xzWlNnaGRHaHBjeTVmY0c5emFYUnBiMjV6Ulhob1lYVnpkR1ZrS0NrcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUc5MlpYSnNZWEFnUFNCQ2IzZ3VUM1psY214aGNFRnlaV0VvSkdWc1pXMWxiblFzSUNSd1lYSmxiblFzSUdaaGJITmxMQ0JtWVd4elpTd2dkR2hwY3k1dmNIUnBiMjV6TG1Gc2JHOTNRbTkwZEc5dFQzWmxjbXhoY0NrN1hHNGdJQ0FnSUNBZ0lHbG1LRzkyWlhKc1lYQWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppaHZkbVZ5YkdGd0lEd2diV2x1VDNabGNteGhjQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHMXBiazkyWlhKc1lYQWdQU0J2ZG1WeWJHRndPMXh1SUNBZ0lDQWdJQ0FnSUcxcGJrTnZiM0prYVc1aGRHVnpJRDBnZTNCdmMybDBhVzl1T2lCMGFHbHpMbkJ2YzJsMGFXOXVMQ0JoYkdsbmJtMWxiblE2SUhSb2FYTXVZV3hwWjI1dFpXNTBmVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGNHOXphWFJwYjI0b0tUdGNibHh1SUNBZ0lDQWdJQ0FrWld4bGJXVnVkQzV2Wm1aelpYUW9RbTk0TGtkbGRFVjRjR3hwWTJsMFQyWm1jMlYwY3lna1pXeGxiV1Z1ZEN3Z0pHRnVZMmh2Y2l3Z2RHaHBjeTV3YjNOcGRHbHZiaXdnZEdocGN5NWhiR2xuYm0xbGJuUXNJSFJvYVhNdVgyZGxkRlpQWm1aelpYUW9LU3dnZEdocGN5NWZaMlYwU0U5bVpuTmxkQ2dwS1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QkpaaUIzWlNCblpYUWdkR2h5YjNWbmFDQjBhR1VnWlc1MGFYSmxJR3h2YjNBc0lIUm9aWEpsSUhkaGN5QnVieUJ1YjI0dGIzWmxjbXhoY0hCcGJtZGNiaUFnSUNBZ0lDOHZJSEJ2YzJsMGFXOXVJR0YyWVdsc1lXSnNaUzRnVUdsamF5QjBhR1VnZG1WeWMybHZiaUIzYVhSb0lHeGxZWE4wSUc5MlpYSnNZWEF1WEc0Z0lDQWdJQ0IwYUdsekxuQnZjMmwwYVc5dUlEMGdiV2x1UTI5dmNtUnBibUYwWlhNdWNHOXphWFJwYjI0N1hHNGdJQ0FnSUNCMGFHbHpMbUZzYVdkdWJXVnVkQ0E5SUcxcGJrTnZiM0prYVc1aGRHVnpMbUZzYVdkdWJXVnVkRHRjYmlBZ0lDQWdJQ1JsYkdWdFpXNTBMbTltWm5ObGRDaENiM2d1UjJWMFJYaHdiR2xqYVhSUFptWnpaWFJ6S0NSbGJHVnRaVzUwTENBa1lXNWphRzl5TENCMGFHbHpMbkJ2YzJsMGFXOXVMQ0IwYUdsekxtRnNhV2R1YldWdWRDd2dkR2hwY3k1ZloyVjBWazltWm5ObGRDZ3BMQ0IwYUdsekxsOW5aWFJJVDJabWMyVjBLQ2twS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1ZlZ4dVhHNVFiM05wZEdsdmJtRmliR1V1WkdWbVlYVnNkSE1nUFNCN1hHNGdJQzhxS2x4dUlDQWdLaUJRYjNOcGRHbHZiaUJ2WmlCd2IzTnBkR2x2Ym1GaWJHVWdjbVZzWVhScGRtVWdkRzhnWVc1amFHOXlMaUJEWVc0Z1ltVWdiR1ZtZEN3Z2NtbG5hSFFzSUdKdmRIUnZiU3dnZEc5d0xDQnZjaUJoZFhSdkxseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSUNkaGRYUnZKMXh1SUNBZ0tpOWNiaUFnY0c5emFYUnBiMjQ2SUNkaGRYUnZKeXhjYmlBZ0x5b3FYRzRnSUNBcUlFRnNhV2R1YldWdWRDQnZaaUJ3YjNOcGRHbHZibUZpYkdVZ2NtVnNZWFJwZG1VZ2RHOGdZVzVqYUc5eUxpQkRZVzRnWW1VZ2JHVm1kQ3dnY21sbmFIUXNJR0p2ZEhSdmJTd2dkRzl3TENCalpXNTBaWElzSUc5eUlHRjFkRzh1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdKMkYxZEc4blhHNGdJQ0FxTDF4dUlDQmhiR2xuYm0xbGJuUTZJQ2RoZFhSdkp5eGNiaUFnTHlvcVhHNGdJQ0FxSUVGc2JHOTNJRzkyWlhKc1lYQWdiMllnWTI5dWRHRnBibVZ5TDNkcGJtUnZkeTRnU1dZZ1ptRnNjMlVzSUdSeWIzQmtiM2R1SUhCdmMybDBhVzl1WVdKc1pTQm1hWEp6ZEZ4dUlDQWdLaUIwY25rZ2RHOGdjRzl6YVhScGIyNGdZWE1nWkdWbWFXNWxaQ0JpZVNCa1lYUmhMWEJ2YzJsMGFXOXVJR0Z1WkNCa1lYUmhMV0ZzYVdkdWJXVnVkQ3dnWW5WMFhHNGdJQ0FxSUhKbGNHOXphWFJwYjI0Z2FXWWdhWFFnZDI5MWJHUWdZMkYxYzJVZ1lXNGdiM1psY21ac2IzY3VYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCaGJHeHZkMDkyWlhKc1lYQTZJR1poYkhObExGeHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzY2diM1psY214aGNDQnZaaUJ2Ym14NUlIUm9aU0JpYjNSMGIyMGdiMllnZEdobElHTnZiblJoYVc1bGNpNGdWR2hwY3lCcGN5QjBhR1VnYlc5emRDQmpiMjF0YjI1Y2JpQWdJQ29nWW1Wb1lYWnBiM0lnWm05eUlHUnliM0JrYjNkdWN5d2dZV3hzYjNkcGJtY2dkR2hsSUdSeWIzQmtiM2R1SUhSdklHVjRkR1Z1WkNCMGFHVWdZbTkwZEc5dElHOW1JSFJvWlZ4dUlDQWdLaUJ6WTNKbFpXNGdZblYwSUc1dmRDQnZkR2hsY25kcGMyVWdhVzVtYkhWbGJtTmxJRzl5SUdKeVpXRnJJRzkxZENCdlppQjBhR1VnWTI5dWRHRnBibVZ5TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0IwY25WbFhHNGdJQ0FxTDF4dUlDQmhiR3h2ZDBKdmRIUnZiVTkyWlhKc1lYQTZJSFJ5ZFdVc1hHNGdJQzhxS2x4dUlDQWdLaUJPZFcxaVpYSWdiMllnY0dsNFpXeHpJSFJvWlNCd2IzTnBkR2x2Ym1GaWJHVWdjMmh2ZFd4a0lHSmxJSE5sY0dGeVlYUmxaQ0IyWlhKMGFXTmhiR3g1SUdaeWIyMGdZVzVqYUc5eVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdLaTljYmlBZ2RrOW1abk5sZERvZ01DeGNiaUFnTHlvcVhHNGdJQ0FxSUU1MWJXSmxjaUJ2WmlCd2FYaGxiSE1nZEdobElIQnZjMmwwYVc5dVlXSnNaU0J6YUc5MWJHUWdZbVVnYzJWd1lYSmhkR1ZrSUdodmNtbDZiMjUwWVd4c2VTQm1jbTl0SUdGdVkyaHZjbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYRzRnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNvdlhHNGdJR2hQWm1aelpYUTZJREFzWEc1OVhHNWNibVY0Y0c5eWRDQjdVRzl6YVhScGIyNWhZbXhsZlR0Y2JpSmRmUT09XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24ucG9zaXRpb25hYmxlLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmNvcmUnKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG52YXIgX2ZvdW5kYXRpb24yID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLmFjY29yZGlvbicpO1xuXG52YXIgX2ZvdW5kYXRpb24zID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnRhYnMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vLyBUaGUgcGx1Z2luIG1hdGNoZXMgdGhlIHBsdWdpbiBjbGFzc2VzIHdpdGggdGhlc2UgcGx1Z2luIGluc3RhbmNlcy5cbnZhciBNZW51UGx1Z2lucyA9IHtcbiAgdGFiczoge1xuICAgIGNzc0NsYXNzOiAndGFicycsXG4gICAgcGx1Z2luOiBfZm91bmRhdGlvbjMuVGFic1xuICB9LFxuICBhY2NvcmRpb246IHtcbiAgICBjc3NDbGFzczogJ2FjY29yZGlvbicsXG4gICAgcGx1Z2luOiBfZm91bmRhdGlvbjIuQWNjb3JkaW9uXG4gIH1cbn07XG5cbi8qKlxuICogUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJlc3BvbnNpdmVBY2NvcmRpb25UYWJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24uYWNjb3JkaW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi50YWJzXG4gKi9cblxudmFyIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBSZXNwb25zaXZlQWNjb3JkaW9uVGFicygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZXNwb25zaXZlQWNjb3JkaW9uVGFicy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSByZXNwb25zaXZlIGFjY29yZGlvbiB0YWJzLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzXG4gICAgICogQGZpcmVzIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzI2luaXRcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIFJlc3BvbnNpdmUgQWNjb3JkaW9uIFRhYnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShlbGVtZW50KTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKHt9LCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLnJ1bGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLWFjY29yZGlvbi10YWJzJyk7XG4gICAgICB0aGlzLmN1cnJlbnRNcSA9IG51bGw7XG4gICAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBudWxsO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMnOyAvLyBpZTkgYmFjayBjb21wYXRcbiAgICAgIGlmICghdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignaWQnLCAoMCwgX2ZvdW5kYXRpb25VdGlsMi5HZXRZb0RpZ2l0cykoNiwgJ3Jlc3BvbnNpdmVhY2NvcmRpb250YWJzJykpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIE1lbnUgYnkgcGFyc2luZyB0aGUgY2xhc3NlcyBmcm9tIHRoZSAnZGF0YS1yZXNwb25zaXZlLWFjY29yZGlvbi10YWJzJyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5NZWRpYVF1ZXJ5Ll9pbml0KCk7XG5cbiAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIGFuIEludGVyY2hhbmdlIHBsdWdpbiBpcyBpbml0aWFsaXplZCwgdGhpcy5ydWxlcyBpcyBjb252ZXJ0ZWQgZnJvbSBhIHN0cmluZyBvZiBcImNsYXNzZXNcIiB0byBhbiBvYmplY3Qgb2YgcnVsZXNcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHJ1bGVzVHJlZSA9IHt9O1xuXG4gICAgICAgIC8vIFBhcnNlIHJ1bGVzIGZyb20gXCJjbGFzc2VzXCIgcHVsbGVkIGZyb20gZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBldmVyeSBydWxlIGZvdW5kXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgICAgdmFyIHJ1bGVTaXplID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVswXSA6ICdzbWFsbCc7XG4gICAgICAgICAgdmFyIHJ1bGVQbHVnaW4gPSBydWxlLmxlbmd0aCA+IDEgPyBydWxlWzFdIDogcnVsZVswXTtcblxuICAgICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcnVsZXNUcmVlW3J1bGVTaXplXSA9IE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlc1RyZWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2dldEFsbE9wdGlvbnMoKTtcblxuICAgICAgaWYgKCFfanF1ZXJ5Mi5kZWZhdWx0LmlzRW1wdHlPYmplY3QodGhpcy5ydWxlcykpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0QWxsT3B0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRBbGxPcHRpb25zKCkge1xuICAgICAgLy9nZXQgYWxsIGRlZmF1bHRzIGFuZCBvcHRpb25zXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgX3RoaXMuYWxsT3B0aW9ucyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIE1lbnVQbHVnaW5zKSB7XG4gICAgICAgIGlmIChNZW51UGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgdmFyIG9iaiA9IE1lbnVQbHVnaW5zW2tleV07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBkdW1teVBsdWdpbiA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnPHVsPjwvdWw+Jyk7XG4gICAgICAgICAgICB2YXIgdG1wUGx1Z2luID0gbmV3IG9iai5wbHVnaW4oZHVtbXlQbHVnaW4sIF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5S2V5IGluIHRtcFBsdWdpbi5vcHRpb25zKSB7XG4gICAgICAgICAgICAgIGlmICh0bXBQbHVnaW4ub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXlLZXkpICYmIGtleUtleSAhPT0gJ3pmUGx1Z2luJykge1xuICAgICAgICAgICAgICAgIHZhciBvYmpPYmogPSB0bXBQbHVnaW4ub3B0aW9uc1trZXlLZXldO1xuICAgICAgICAgICAgICAgIF90aGlzLmFsbE9wdGlvbnNba2V5S2V5XSA9IG9iak9iajtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG1wUGx1Z2luLmRlc3Ryb3koKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgTWVudS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aCBhZ2FpbnN0IGF2YWlsYWJsZSBtZWRpYSBxdWVyaWVzLiBJZiB0aGUgbWVkaWEgcXVlcnkgaGFzIGNoYW5nZWQsIGFuZCB0aGUgcGx1Z2luIG5lZWRlZCBoYXMgY2hhbmdlZCwgdGhlIHBsdWdpbnMgd2lsbCBzd2FwIG91dC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfY2hlY2tNZWRpYVF1ZXJpZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hlY2tNZWRpYVF1ZXJpZXMoKSB7XG4gICAgICB2YXIgbWF0Y2hlZE1xLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUgYW5kIGZpbmQgdGhlIGxhc3QgbWF0Y2hpbmcgcnVsZVxuICAgICAgX2pxdWVyeTIuZGVmYXVsdC5lYWNoKHRoaXMucnVsZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKF9mb3VuZGF0aW9uVXRpbC5NZWRpYVF1ZXJ5LmF0TGVhc3Qoa2V5KSkge1xuICAgICAgICAgIG1hdGNoZWRNcSA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIE5vIG1hdGNoPyBObyBkaWNlXG4gICAgICBpZiAoIW1hdGNoZWRNcSkgcmV0dXJuO1xuXG4gICAgICAvLyBQbHVnaW4gYWxyZWFkeSBpbml0aWFsaXplZD8gV2UgZ29vZFxuICAgICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbiBpbnN0YW5jZW9mIHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4pIHJldHVybjtcblxuICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHBsdWdpbi1zcGVjaWZpYyBDU1MgY2xhc3Nlc1xuICAgICAgX2pxdWVyeTIuZGVmYXVsdC5lYWNoKE1lbnVQbHVnaW5zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZS5jc3NDbGFzcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQWRkIHRoZSBDU1MgY2xhc3MgZm9yIHRoZSBuZXcgcGx1Z2luXG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5jc3NDbGFzcyk7XG5cbiAgICAgIC8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgbmV3IHBsdWdpblxuICAgICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikge1xuICAgICAgICAvL2Rvbid0IGtub3cgd2h5IGJ1dCBvbiBuZXN0ZWQgZWxlbWVudHMgZGF0YSB6ZlBsdWdpbiBnZXQncyBsb3N0XG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50UGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykgJiYgdGhpcy5zdG9yZXpmRGF0YSkgdGhpcy5jdXJyZW50UGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJywgdGhpcy5zdG9yZXpmRGF0YSk7XG4gICAgICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9oYW5kbGVNYXJrdXAodGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcbiAgICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG5ldyB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKHRoaXMuJGVsZW1lbnQsIHt9KTtcbiAgICAgIHRoaXMuc3RvcmV6ZkRhdGEgPSB0aGlzLmN1cnJlbnRQbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaGFuZGxlTWFya3VwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZU1hcmt1cCh0b1NldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBmcm9tU3RyaW5nID0gJ2FjY29yZGlvbic7XG4gICAgICB2YXIgJHBhbmVscyA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtdGFicy1jb250ZW50PScgKyB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykgKyAnXScpO1xuICAgICAgaWYgKCRwYW5lbHMubGVuZ3RoKSBmcm9tU3RyaW5nID0gJ3RhYnMnO1xuICAgICAgaWYgKGZyb21TdHJpbmcgPT09IHRvU2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH07XG5cbiAgICAgIHZhciB0YWJzVGl0bGUgPSBfdGhpcy5hbGxPcHRpb25zLmxpbmtDbGFzcyA/IF90aGlzLmFsbE9wdGlvbnMubGlua0NsYXNzIDogJ3RhYnMtdGl0bGUnO1xuICAgICAgdmFyIHRhYnNQYW5lbCA9IF90aGlzLmFsbE9wdGlvbnMucGFuZWxDbGFzcyA/IF90aGlzLmFsbE9wdGlvbnMucGFuZWxDbGFzcyA6ICd0YWJzLXBhbmVsJztcblxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKCdyb2xlJyk7XG4gICAgICB2YXIgJGxpSGVhZHMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuJyArIHRhYnNUaXRsZSArICcsW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJykucmVtb3ZlQ2xhc3ModGFic1RpdGxlKS5yZW1vdmVDbGFzcygnYWNjb3JkaW9uLWl0ZW0nKS5yZW1vdmVBdHRyKCdkYXRhLWFjY29yZGlvbi1pdGVtJyk7XG4gICAgICB2YXIgJGxpSGVhZHNBID0gJGxpSGVhZHMuY2hpbGRyZW4oJ2EnKS5yZW1vdmVDbGFzcygnYWNjb3JkaW9uLXRpdGxlJyk7XG5cbiAgICAgIGlmIChmcm9tU3RyaW5nID09PSAndGFicycpIHtcbiAgICAgICAgJHBhbmVscyA9ICRwYW5lbHMuY2hpbGRyZW4oJy4nICsgdGFic1BhbmVsKS5yZW1vdmVDbGFzcyh0YWJzUGFuZWwpLnJlbW92ZUF0dHIoJ3JvbGUnKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtbGFiZWxsZWRieScpO1xuICAgICAgICAkcGFuZWxzLmNoaWxkcmVuKCdhJykucmVtb3ZlQXR0cigncm9sZScpLnJlbW92ZUF0dHIoJ2FyaWEtY29udHJvbHMnKS5yZW1vdmVBdHRyKCdhcmlhLXNlbGVjdGVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcGFuZWxzID0gJGxpSGVhZHMuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpLnJlbW92ZUNsYXNzKCdhY2NvcmRpb24tY29udGVudCcpO1xuICAgICAgfTtcblxuICAgICAgJHBhbmVscy5jc3MoeyBkaXNwbGF5OiAnJywgdmlzaWJpbGl0eTogJycgfSk7XG4gICAgICAkbGlIZWFkcy5jc3MoeyBkaXNwbGF5OiAnJywgdmlzaWJpbGl0eTogJycgfSk7XG4gICAgICBpZiAodG9TZXQgPT09ICdhY2NvcmRpb24nKSB7XG4gICAgICAgICRwYW5lbHMuZWFjaChmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh2YWx1ZSkuYXBwZW5kVG8oJGxpSGVhZHMuZ2V0KGtleSkpLmFkZENsYXNzKCdhY2NvcmRpb24tY29udGVudCcpLmF0dHIoJ2RhdGEtdGFiLWNvbnRlbnQnLCAnJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmNzcyh7IGhlaWdodDogJycgfSk7XG4gICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdbZGF0YS10YWJzLWNvbnRlbnQ9JyArIF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykgKyAnXScpLmFmdGVyKCc8ZGl2IGlkPVwidGFicy1wbGFjZWhvbGRlci0nICsgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSArICdcIj48L2Rpdj4nKS5kZXRhY2goKTtcbiAgICAgICAgICAkbGlIZWFkcy5hZGRDbGFzcygnYWNjb3JkaW9uLWl0ZW0nKS5hdHRyKCdkYXRhLWFjY29yZGlvbi1pdGVtJywgJycpO1xuICAgICAgICAgICRsaUhlYWRzQS5hZGRDbGFzcygnYWNjb3JkaW9uLXRpdGxlJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0b1NldCA9PT0gJ3RhYnMnKSB7XG4gICAgICAgIHZhciAkdGFic0NvbnRlbnQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ1tkYXRhLXRhYnMtY29udGVudD0nICsgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSArICddJyk7XG4gICAgICAgIHZhciAkcGxhY2Vob2xkZXIgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyN0YWJzLXBsYWNlaG9sZGVyLScgKyBfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICAgICAgaWYgKCRwbGFjZWhvbGRlci5sZW5ndGgpIHtcbiAgICAgICAgICAkdGFic0NvbnRlbnQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcigkcGxhY2Vob2xkZXIpLmF0dHIoJ2RhdGEtdGFicy1jb250ZW50JywgX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSk7XG4gICAgICAgICAgJHBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICR0YWJzQ29udGVudCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cInRhYnMtY29udGVudFwiPjwvZGl2PicpLmluc2VydEFmdGVyKF90aGlzLiRlbGVtZW50KS5hdHRyKCdkYXRhLXRhYnMtY29udGVudCcsIF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgICB9O1xuICAgICAgICAkcGFuZWxzLmVhY2goZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICB2YXIgdGVtcFZhbHVlID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHZhbHVlKS5hcHBlbmRUbygkdGFic0NvbnRlbnQpLmFkZENsYXNzKHRhYnNQYW5lbCk7XG4gICAgICAgICAgdmFyIGhhc2ggPSAkbGlIZWFkc0EuZ2V0KGtleSkuaGFzaC5zbGljZSgxKTtcbiAgICAgICAgICB2YXIgaWQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodmFsdWUpLmF0dHIoJ2lkJykgfHwgKDAsIF9mb3VuZGF0aW9uVXRpbDIuR2V0WW9EaWdpdHMpKDYsICdhY2NvcmRpb24nKTtcbiAgICAgICAgICBpZiAoaGFzaCAhPT0gaWQpIHtcbiAgICAgICAgICAgIGlmIChoYXNoICE9PSAnJykge1xuICAgICAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodmFsdWUpLmF0dHIoJ2lkJywgaGFzaCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoYXNoID0gaWQ7XG4gICAgICAgICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh2YWx1ZSkuYXR0cignaWQnLCBoYXNoKTtcbiAgICAgICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCRsaUhlYWRzQS5nZXQoa2V5KSkuYXR0cignaHJlZicsICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgkbGlIZWFkc0EuZ2V0KGtleSkpLmF0dHIoJ2hyZWYnKS5yZXBsYWNlKCcjJywgJycpICsgJyMnICsgaGFzaCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGlzQWN0aXZlID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCRsaUhlYWRzLmdldChrZXkpKS5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICB0ZW1wVmFsdWUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICAkbGlIZWFkcy5hZGRDbGFzcyh0YWJzVGl0bGUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgcGx1Z2luIG9uIHRoaXMgZWxlbWVudCwgYXMgd2VsbCBhcyB0aGUgd2luZG93IHJlc2l6ZSBoYW5kbGVyIHRoYXQgc3dpdGNoZXMgdGhlIHBsdWdpbnMgb3V0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9mZignLnpmLlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzJyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzO1xufShfZm91bmRhdGlvbi5QbHVnaW4pO1xuXG5SZXNwb25zaXZlQWNjb3JkaW9uVGFicy5kZWZhdWx0cyA9IHt9O1xuXG5leHBvcnRzLlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzID0gUmVzcG9uc2l2ZUFjY29yZGlvblRhYnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1Y21WemNHOXVjMmwyWlVGalkyOXlaR2x2YmxSaFluTXVhbk1pWFN3aWJtRnRaWE1pT2xzaVRXVnVkVkJzZFdkcGJuTWlMQ0owWVdKeklpd2lZM056UTJ4aGMzTWlMQ0p3YkhWbmFXNGlMQ0pVWVdKeklpd2lZV05qYjNKa2FXOXVJaXdpUVdOamIzSmthVzl1SWl3aVVtVnpjRzl1YzJsMlpVRmpZMjl5WkdsdmJsUmhZbk1pTENKbGJHVnRaVzUwSWl3aWIzQjBhVzl1Y3lJc0lpUmxiR1Z0Wlc1MElpd2lKQ0lzSW1WNGRHVnVaQ0lzSW1SaGRHRWlMQ0p5ZFd4bGN5SXNJbU4xY25KbGJuUk5jU0lzSW1OMWNuSmxiblJRYkhWbmFXNGlMQ0pqYkdGemMwNWhiV1VpTENKaGRIUnlJaXdpWDJsdWFYUWlMQ0pmWlhabGJuUnpJaXdpVFdWa2FXRlJkV1Z5ZVNJc0luSjFiR1Z6VkhKbFpTSXNJbk53YkdsMElpd2lhU0lzSW14bGJtZDBhQ0lzSW5KMWJHVWlMQ0p5ZFd4bFUybDZaU0lzSW5KMWJHVlFiSFZuYVc0aUxDSmZaMlYwUVd4c1QzQjBhVzl1Y3lJc0ltbHpSVzF3ZEhsUFltcGxZM1FpTENKZlkyaGxZMnROWldScFlWRjFaWEpwWlhNaUxDSmZkR2hwY3lJc0ltRnNiRTl3ZEdsdmJuTWlMQ0pyWlhraUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0ltOWlhaUlzSW1SMWJXMTVVR3gxWjJsdUlpd2lkRzF3VUd4MVoybHVJaXdpYTJWNVMyVjVJaXdpYjJKcVQySnFJaXdpWkdWemRISnZlU0lzSW1VaUxDSjNhVzVrYjNjaUxDSnZiaUlzSW0xaGRHTm9aV1JOY1NJc0ltVmhZMmdpTENKaGRFeGxZWE4wSWl3aWRtRnNkV1VpTENKeVpXMXZkbVZEYkdGemN5SXNJbUZrWkVOc1lYTnpJaXdpYzNSdmNtVjZaa1JoZEdFaUxDSmZhR0Z1Wkd4bFRXRnlhM1Z3SWl3aWRHOVRaWFFpTENKbWNtOXRVM1J5YVc1bklpd2lKSEJoYm1Wc2N5SXNJblJoWW5OVWFYUnNaU0lzSW14cGJtdERiR0Z6Y3lJc0luUmhZbk5RWVc1bGJDSXNJbkJoYm1Wc1EyeGhjM01pTENKeVpXMXZkbVZCZEhSeUlpd2lKR3hwU0dWaFpITWlMQ0pqYUdsc1pISmxiaUlzSWlSc2FVaGxZV1J6UVNJc0ltTnpjeUlzSW1ScGMzQnNZWGtpTENKMmFYTnBZbWxzYVhSNUlpd2lZWEJ3Wlc1a1ZHOGlMQ0puWlhRaUxDSm9aV2xuYUhRaUxDSmhablJsY2lJc0ltUmxkR0ZqYUNJc0lpUjBZV0p6UTI5dWRHVnVkQ0lzSWlSd2JHRmpaV2h2YkdSbGNpSXNJbWx1YzJWeWRFRm1kR1Z5SWl3aWNtVnRiM1psSWl3aWRHVnRjRlpoYkhWbElpd2lhR0Z6YUNJc0luTnNhV05sSWl3aWFXUWlMQ0p5WlhCc1lXTmxJaXdpYVhOQlkzUnBkbVVpTENKb1lYTkRiR0Z6Y3lJc0ltOW1aaUlzSWxCc2RXZHBiaUlzSW1SbFptRjFiSFJ6SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenM3TzBGQlJVRTdPenM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRlFUczdRVUZEUVRzN096czdPenM3T3p0QlFVVkJPMEZCUTBFc1NVRkJTVUVzWTBGQll6dEJRVU5vUWtNc1VVRkJUVHRCUVVOS1F5eGpRVUZWTEUxQlJFNDdRVUZGU2tNc1dVRkJVVU03UVVGR1NpeEhRVVJWTzBGQlMyaENReXhoUVVGWE8wRkJRMVJJTEdOQlFWVXNWMEZFUkR0QlFVVlVReXhaUVVGUlJ6dEJRVVpETzBGQlRFc3NRMEZCYkVJN08wRkJXVUU3T3pzN096czdPMGxCVVUxRExIVkNPenM3T3pzN096czdPenM3UVVGRFNqczdPenM3T3pzN01rSkJVVTlETEU4c1JVRkJVME1zVHl4RlFVRlRPMEZCUTNaQ0xGZEJRVXRETEZGQlFVd3NSMEZCWjBJc2MwSkJRVVZHTEU5QlFVWXNRMEZCYUVJN1FVRkRRU3hYUVVGTFF5eFBRVUZNTEVkQlFXZENSU3hwUWtGQlJVTXNUVUZCUml4RFFVRlRMRVZCUVZRc1JVRkJZU3hMUVVGTFJpeFJRVUZNTEVOQlFXTkhMRWxCUVdRc1JVRkJZaXhGUVVGdFEwb3NUMEZCYmtNc1EwRkJhRUk3UVVGRFFTeFhRVUZMU3l4TFFVRk1MRWRCUVdFc1MwRkJTMG9zVVVGQlRDeERRVUZqUnl4SlFVRmtMRU5CUVcxQ0xESkNRVUZ1UWl4RFFVRmlPMEZCUTBFc1YwRkJTMFVzVTBGQlRDeEhRVUZwUWl4SlFVRnFRanRCUVVOQkxGZEJRVXRETEdGQlFVd3NSMEZCY1VJc1NVRkJja0k3UVVGRFFTeFhRVUZMUXl4VFFVRk1MRWRCUVdsQ0xIbENRVUZxUWl4RFFVNTFRaXhEUVUxeFFqdEJRVU0xUXl4VlFVRkpMRU5CUVVNc1MwRkJTMUFzVVVGQlRDeERRVUZqVVN4SlFVRmtMRU5CUVcxQ0xFbEJRVzVDTEVOQlFVd3NSVUZCSzBJN1FVRkROMElzWVVGQlMxSXNVVUZCVEN4RFFVRmpVU3hKUVVGa0xFTkJRVzFDTEVsQlFXNUNMRVZCUVhkQ0xHdERRVUZaTEVOQlFWb3NSVUZCWlN4NVFrRkJaaXhEUVVGNFFqdEJRVU5FT3p0QlFVVkVMRmRCUVV0RExFdEJRVXc3UVVGRFFTeFhRVUZMUXl4UFFVRk1PMEZCUTBRN08wRkJSVVE3T3pzN096czdPelJDUVV0Uk8wRkJRMDVETEdsRFFVRlhSaXhMUVVGWU96dEJRVVZCTzBGQlEwRXNWVUZCU1N4UFFVRlBMRXRCUVV0TUxFdEJRVm9zUzBGQmMwSXNVVUZCTVVJc1JVRkJiME03UVVGRGJFTXNXVUZCU1ZFc1dVRkJXU3hGUVVGb1FqczdRVUZGUVR0QlFVTkJMRmxCUVVsU0xGRkJRVkVzUzBGQlMwRXNTMEZCVEN4RFFVRlhVeXhMUVVGWUxFTkJRV2xDTEVkQlFXcENMRU5CUVZvN08wRkJSVUU3UVVGRFFTeGhRVUZMTEVsQlFVbERMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1ZZc1RVRkJUVmNzVFVGQk1VSXNSVUZCYTBORUxFZEJRV3hETEVWQlFYVkRPMEZCUTNKRExHTkJRVWxGTEU5QlFVOWFMRTFCUVUxVkxFTkJRVTRzUlVGQlUwUXNTMEZCVkN4RFFVRmxMRWRCUVdZc1EwRkJXRHRCUVVOQkxHTkJRVWxKTEZkQlFWZEVMRXRCUVV0RUxFMUJRVXdzUjBGQll5eERRVUZrTEVkQlFXdENReXhMUVVGTExFTkJRVXdzUTBGQmJFSXNSMEZCTkVJc1QwRkJNME03UVVGRFFTeGpRVUZKUlN4aFFVRmhSaXhMUVVGTFJDeE5RVUZNTEVkQlFXTXNRMEZCWkN4SFFVRnJRa01zUzBGQlN5eERRVUZNTEVOQlFXeENMRWRCUVRSQ1FTeExRVUZMTEVOQlFVd3NRMEZCTjBNN08wRkJSVUVzWTBGQlNURkNMRmxCUVZrMFFpeFZRVUZhTEUxQlFUUkNMRWxCUVdoRExFVkJRWE5ETzBGQlEzQkRUaXh6UWtGQlZVc3NVVUZCVml4SlFVRnpRak5DTEZsQlFWazBRaXhWUVVGYUxFTkJRWFJDTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hoUVVGTFpDeExRVUZNTEVkQlFXRlJMRk5CUVdJN1FVRkRSRHM3UVVGRlJDeFhRVUZMVHl4alFVRk1PenRCUVVWQkxGVkJRVWtzUTBGQlEyeENMR2xDUVVGRmJVSXNZVUZCUml4RFFVRm5RaXhMUVVGTGFFSXNTMEZCY2tJc1EwRkJUQ3hGUVVGclF6dEJRVU5vUXl4aFFVRkxhVUlzYTBKQlFVdzdRVUZEUkR0QlFVTkdPenM3Y1VOQlJXZENPMEZCUTJZN1FVRkRRU3hWUVVGSlF5eFJRVUZSTEVsQlFWbzdRVUZEUVVFc1dVRkJUVU1zVlVGQlRpeEhRVUZ0UWl4RlFVRnVRanRCUVVOQkxGZEJRVXNzU1VGQlNVTXNSMEZCVkN4SlFVRm5RbXhETEZkQlFXaENMRVZCUVRaQ08wRkJRek5DTEZsQlFVbEJMRmxCUVZsdFF5eGpRVUZhTEVOQlFUSkNSQ3hIUVVFelFpeERRVUZLTEVWQlFYRkRPMEZCUTI1RExHTkJRVWxGTEUxQlFVMXdReXhaUVVGWmEwTXNSMEZCV2l4RFFVRldPMEZCUTBFc1kwRkJTVHRCUVVOR0xHZENRVUZKUnl4alFVRmpMSE5DUVVGRkxGZEJRVVlzUTBGQmJFSTdRVUZEUVN4blFrRkJTVU1zV1VGQldTeEpRVUZKUml4SlFVRkpha01zVFVGQlVpeERRVUZsYTBNc1YwRkJaaXhGUVVFeVFrd3NUVUZCVFhaQ0xFOUJRV3BETEVOQlFXaENPMEZCUTBFc2FVSkJRVXNzU1VGQlNUaENMRTFCUVZRc1NVRkJiVUpFTEZWQlFWVTNRaXhQUVVFM1FpeEZRVUZ6UXp0QlFVTndReXhyUWtGQlNUWkNMRlZCUVZVM1FpeFBRVUZXTEVOQlFXdENNRUlzWTBGQmJFSXNRMEZCYVVOSkxFMUJRV3BETEV0QlFUUkRRU3hYUVVGWExGVkJRVE5FTEVWQlFYVkZPMEZCUTNKRkxHOUNRVUZKUXl4VFFVRlRSaXhWUVVGVk4wSXNUMEZCVml4RFFVRnJRamhDTEUxQlFXeENMRU5CUVdJN1FVRkRRVkFzYzBKQlFVMURMRlZCUVU0c1EwRkJhVUpOTEUxQlFXcENMRWxCUVRKQ1F5eE5RVUV6UWp0QlFVTkVPMEZCUTBZN1FVRkRSRVlzYzBKQlFWVkhMRTlCUVZZN1FVRkRSQ3hYUVZaRUxFTkJWMEVzVDBGQlRVTXNRMEZCVGl4RlFVRlRMRU5CUTFJN1FVRkRSanRCUVVOR08wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096aENRVXRWTzBGQlExSXNWVUZCU1ZZc1VVRkJVU3hKUVVGYU96dEJRVVZCTERSQ1FVRkZWeXhOUVVGR0xFVkJRVlZETEVWQlFWWXNRMEZCWVN4MVFrRkJZaXhGUVVGelF5eFpRVUZYTzBGQlF5OURXaXhqUVVGTlJDeHJRa0ZCVGp0QlFVTkVMRTlCUmtRN1FVRkhSRHM3UVVGRlJEczdPenM3T3pzN2VVTkJTM0ZDTzBGQlEyNUNMRlZCUVVsakxGTkJRVW83UVVGQlFTeFZRVUZsWWl4UlFVRlJMRWxCUVhaQ08wRkJRMEU3UVVGRFFYSkNMSFZDUVVGRmJVTXNTVUZCUml4RFFVRlBMRXRCUVV0b1F5eExRVUZhTEVWQlFXMUNMRlZCUVZOdlFpeEhRVUZVTEVWQlFXTTdRVUZETDBJc1dVRkJTV0lzTWtKQlFWY3dRaXhQUVVGWUxFTkJRVzFDWWl4SFFVRnVRaXhEUVVGS0xFVkJRVFpDTzBGQlF6TkNWeXh6UWtGQldWZ3NSMEZCV2p0QlFVTkVPMEZCUTBZc1QwRktSRHM3UVVGTlFUdEJRVU5CTEZWQlFVa3NRMEZCUTFjc1UwRkJUQ3hGUVVGblFqczdRVUZGYUVJN1FVRkRRU3hWUVVGSkxFdEJRVXMzUWl4aFFVRk1MRmxCUVRoQ0xFdEJRVXRHTEV0QlFVd3NRMEZCVnl0Q0xGTkJRVmdzUlVGQmMwSXhReXhOUVVGNFJDeEZRVUZuUlRzN1FVRkZhRVU3UVVGRFFWRXNkVUpCUVVWdFF5eEpRVUZHTEVOQlFVODVReXhYUVVGUUxFVkJRVzlDTEZWQlFWTnJReXhIUVVGVUxFVkJRV05qTEV0QlFXUXNSVUZCY1VJN1FVRkRka05vUWl4alFVRk5kRUlzVVVGQlRpeERRVUZsZFVNc1YwRkJaaXhEUVVFeVFrUXNUVUZCVFRsRExGRkJRV3BETzBGQlEwUXNUMEZHUkRzN1FVRkpRVHRCUVVOQkxGZEJRVXRSTEZGQlFVd3NRMEZCWTNkRExGRkJRV1FzUTBGQmRVSXNTMEZCUzNCRExFdEJRVXdzUTBGQlZ5dENMRk5CUVZnc1JVRkJjMEl6UXl4UlFVRTNRenM3UVVGRlFUdEJRVU5CTEZWQlFVa3NTMEZCUzJNc1lVRkJWQ3hGUVVGM1FqdEJRVU4wUWp0QlFVTkJMRmxCUVVrc1EwRkJReXhMUVVGTFFTeGhRVUZNTEVOQlFXMUNUaXhSUVVGdVFpeERRVUUwUWtjc1NVRkJOVUlzUTBGQmFVTXNWVUZCYWtNc1EwRkJSQ3hKUVVGcFJDeExRVUZMYzBNc1YwRkJNVVFzUlVGQmRVVXNTMEZCUzI1RExHRkJRVXdzUTBGQmJVSk9MRkZCUVc1Q0xFTkJRVFJDUnl4SlFVRTFRaXhEUVVGcFF5eFZRVUZxUXl4RlFVRTBReXhMUVVGTGMwTXNWMEZCYWtRN1FVRkRka1VzWVVGQlMyNURMR0ZCUVV3c1EwRkJiVUo1UWl4UFFVRnVRanRCUVVORU8wRkJRMFFzVjBGQlMxY3NZVUZCVEN4RFFVRnRRaXhMUVVGTGRFTXNTMEZCVEN4RFFVRlhLMElzVTBGQldDeEZRVUZ6UWpORExGRkJRWHBETzBGQlEwRXNWMEZCUzJNc1lVRkJUQ3hIUVVGeFFpeEpRVUZKTEV0QlFVdEdMRXRCUVV3c1EwRkJWeXRDTEZOQlFWZ3NSVUZCYzBJeFF5eE5RVUV4UWl4RFFVRnBReXhMUVVGTFR5eFJRVUYwUXl4RlFVRm5SQ3hGUVVGb1JDeERRVUZ5UWp0QlFVTkJMRmRCUVV0NVF5eFhRVUZNTEVkQlFXMUNMRXRCUVV0dVF5eGhRVUZNTEVOQlFXMUNUaXhSUVVGdVFpeERRVUUwUWtjc1NVRkJOVUlzUTBGQmFVTXNWVUZCYWtNc1EwRkJia0k3UVVGRlJEczdPMnREUVVWaGQwTXNTeXhGUVVGTk8wRkJRMnhDTEZWQlFVbHlRaXhSUVVGUkxFbEJRVm83UVVGQlFTeFZRVUZyUW5OQ0xHRkJRV0VzVjBGQkwwSTdRVUZEUVN4VlFVRkpReXhWUVVGVkxITkNRVUZGTEhkQ1FVRnpRaXhMUVVGTE4wTXNVVUZCVEN4RFFVRmpVU3hKUVVGa0xFTkJRVzFDTEVsQlFXNUNMRU5CUVhSQ0xFZEJRU3RETEVkQlFXcEVMRU5CUVdRN1FVRkRRU3hWUVVGSmNVTXNVVUZCVVRsQ0xFMUJRVm9zUlVGQmIwSTJRaXhoUVVGaExFMUJRV0k3UVVGRGNFSXNWVUZCU1VFc1pVRkJaVVFzUzBGQmJrSXNSVUZCTUVJN1FVRkRlRUk3UVVGRFJEczdRVUZGUkN4VlFVRkpSeXhaUVVGWmVFSXNUVUZCVFVNc1ZVRkJUaXhEUVVGcFFuZENMRk5CUVdwQ0xFZEJRVEpDZWtJc1RVRkJUVU1zVlVGQlRpeERRVUZwUW5kQ0xGTkJRVFZETEVkQlFYTkVMRmxCUVhSRk8wRkJRMEVzVlVGQlNVTXNXVUZCV1RGQ0xFMUJRVTFETEZWQlFVNHNRMEZCYVVJd1FpeFZRVUZxUWl4SFFVRTBRak5DTEUxQlFVMURMRlZCUVU0c1EwRkJhVUl3UWl4VlFVRTNReXhIUVVGM1JDeFpRVUY0UlRzN1FVRkZRU3hYUVVGTGFrUXNVVUZCVEN4RFFVRmphMFFzVlVGQlpDeERRVUY1UWl4TlFVRjZRanRCUVVOQkxGVkJRVWxETEZkQlFWY3NTMEZCUzI1RUxGRkJRVXdzUTBGQlkyOUVMRkZCUVdRc1EwRkJkVUlzVFVGQlNVNHNVMEZCU2l4SFFVRmpMSGRDUVVGeVF5eEZRVUVyUkZBc1YwRkJMMFFzUTBGQk1rVlBMRk5CUVRORkxFVkJRWE5HVUN4WFFVRjBSaXhEUVVGclJ5eG5Ra0ZCYkVjc1JVRkJiMGhYTEZWQlFYQklMRU5CUVN0SUxIRkNRVUV2U0N4RFFVRm1PMEZCUTBFc1ZVRkJTVWNzV1VGQldVWXNVMEZCVTBNc1VVRkJWQ3hEUVVGclFpeEhRVUZzUWl4RlFVRjFRbUlzVjBGQmRrSXNRMEZCYlVNc2FVSkJRVzVETEVOQlFXaENPenRCUVVWQkxGVkJRVWxMTEdWQlFXVXNUVUZCYmtJc1JVRkJNa0k3UVVGRGVrSkRMR3RDUVVGVlFTeFJRVUZSVHl4UlFVRlNMRU5CUVdsQ0xFMUJRVWxLTEZOQlFYSkNMRVZCUVdkRFZDeFhRVUZvUXl4RFFVRTBRMU1zVTBGQk5VTXNSVUZCZFVSRkxGVkJRWFpFTEVOQlFXdEZMRTFCUVd4RkxFVkJRVEJGUVN4VlFVRXhSU3hEUVVGeFJpeGhRVUZ5Uml4RlFVRnZSMEVzVlVGQmNFY3NRMEZCSzBjc2FVSkJRUzlITEVOQlFWWTdRVUZEUVV3c1owSkJRVkZQTEZGQlFWSXNRMEZCYVVJc1IwRkJha0lzUlVGQmMwSkdMRlZCUVhSQ0xFTkJRV2xETEUxQlFXcERMRVZCUVhsRFFTeFZRVUY2UXl4RFFVRnZSQ3hsUVVGd1JDeEZRVUZ4UlVFc1ZVRkJja1VzUTBGQlowWXNaVUZCYUVZN1FVRkRSQ3hQUVVoRUxFMUJSMHM3UVVGRFNFd3NhMEpCUVZWTkxGTkJRVk5ETEZGQlFWUXNRMEZCYTBJc2IwSkJRV3hDTEVWQlFYZERZaXhYUVVGNFF5eERRVUZ2UkN4dFFrRkJjRVFzUTBGQlZqdEJRVU5FT3p0QlFVVkVUU3hqUVVGUlV5eEhRVUZTTEVOQlFWa3NSVUZCUTBNc1UwRkJVU3hGUVVGVUxFVkJRVmxETEZsQlFWY3NSVUZCZGtJc1JVRkJXanRCUVVOQlRDeGxRVUZUUnl4SFFVRlVMRU5CUVdFc1JVRkJRME1zVTBGQlVTeEZRVUZVTEVWQlFWbERMRmxCUVZjc1JVRkJka0lzUlVGQllqdEJRVU5CTEZWQlFVbGlMRlZCUVZVc1YwRkJaQ3hGUVVFeVFqdEJRVU42UWtVc1owSkJRVkZVTEVsQlFWSXNRMEZCWVN4VlFVRlRXaXhIUVVGVUxFVkJRV0ZqTEV0QlFXSXNSVUZCYlVJN1FVRkRPVUlzWjBOQlFVVkJMRXRCUVVZc1JVRkJVMjFDTEZGQlFWUXNRMEZCYTBKT0xGTkJRVk5QTEVkQlFWUXNRMEZCWVd4RExFZEJRV0lzUTBGQmJFSXNSVUZCY1VOblFpeFJRVUZ5UXl4RFFVRTRReXh0UWtGQk9VTXNSVUZCYlVWb1F5eEpRVUZ1UlN4RFFVRjNSU3hyUWtGQmVFVXNSVUZCTWtZc1JVRkJNMFlzUlVGQkswWXJRaXhYUVVFdlJpeERRVUV5Unl4WFFVRXpSeXhGUVVGM1NHVXNSMEZCZUVnc1EwRkJORWdzUlVGQlEwc3NVVUZCVHl4RlFVRlNMRVZCUVRWSU8wRkJRMEVzWjBOQlFVVXNkMEpCUVhOQ2NrTXNUVUZCVFhSQ0xGRkJRVTRzUTBGQlpWRXNTVUZCWml4RFFVRnZRaXhKUVVGd1FpeERRVUYwUWl4SFFVRm5SQ3hIUVVGc1JDeEZRVUYxUkc5RUxFdEJRWFpFTEVOQlFUWkVMQ3RDUVVFMlFuUkRMRTFCUVUxMFFpeFJRVUZPTEVOQlFXVlJMRWxCUVdZc1EwRkJiMElzU1VGQmNFSXNRMEZCTjBJc1IwRkJkVVFzVlVGQmNFZ3NSVUZCWjBseFJDeE5RVUZvU1R0QlFVTkJWaXh0UWtGQlUxZ3NVVUZCVkN4RFFVRnJRaXhuUWtGQmJFSXNSVUZCYjBOb1F5eEpRVUZ3UXl4RFFVRjVReXh4UWtGQmVrTXNSVUZCSzBRc1JVRkJMMFE3UVVGRFFUWkRMRzlDUVVGVllpeFJRVUZXTEVOQlFXMUNMR2xDUVVGdVFqdEJRVU5FTEZOQlRFUTdRVUZOUkN4UFFWQkVMRTFCVDAwc1NVRkJTVWNzVlVGQlZTeE5RVUZrTEVWQlFYRkNPMEZCUTNwQ0xGbEJRVWx0UWl4bFFVRmxMSE5DUVVGRkxIZENRVUZ6UW5oRExFMUJRVTEwUWl4UlFVRk9MRU5CUVdWUkxFbEJRV1lzUTBGQmIwSXNTVUZCY0VJc1EwRkJkRUlzUjBGQlowUXNSMEZCYkVRc1EwRkJia0k3UVVGRFFTeFpRVUZKZFVRc1pVRkJaU3h6UWtGQlJTeDFRa0ZCY1VKNlF5eE5RVUZOZEVJc1VVRkJUaXhEUVVGbFVTeEpRVUZtTEVOQlFXOUNMRWxCUVhCQ0xFTkJRWFpDTEVOQlFXNUNPMEZCUTBFc1dVRkJTWFZFTEdGQlFXRm9SQ3hOUVVGcVFpeEZRVUY1UWp0QlFVTjJRaXRETEhsQ1FVRmxMSE5DUVVGRkxHdERRVUZHTEVWQlFYTkRSU3hYUVVGMFF5eERRVUZyUkVRc1dVRkJiRVFzUlVGQlowVjJSQ3hKUVVGb1JTeERRVUZ4UlN4dFFrRkJja1VzUlVGQmVVWmpMRTFCUVUxMFFpeFJRVUZPTEVOQlFXVlJMRWxCUVdZc1EwRkJiMElzU1VGQmNFSXNRMEZCZWtZc1EwRkJaanRCUVVOQmRVUXNkVUpCUVdGRkxFMUJRV0k3UVVGRFJDeFRRVWhFTEUxQlIwczdRVUZEU0Vnc2VVSkJRV1VzYzBKQlFVVXNhME5CUVVZc1JVRkJjME5GTEZkQlFYUkRMRU5CUVd0RU1VTXNUVUZCVFhSQ0xGRkJRWGhFTEVWQlFXdEZVU3hKUVVGc1JTeERRVUYxUlN4dFFrRkJka1VzUlVGQk1rWmpMRTFCUVUxMFFpeFJRVUZPTEVOQlFXVlJMRWxCUVdZc1EwRkJiMElzU1VGQmNFSXNRMEZCTTBZc1EwRkJaanRCUVVORU8wRkJRMFJ4UXl4blFrRkJVVlFzU1VGQlVpeERRVUZoTEZWQlFWTmFMRWRCUVZRc1JVRkJZV01zUzBGQllpeEZRVUZ0UWp0QlFVTTVRaXhqUVVGSk5FSXNXVUZCV1N4elFrRkJSVFZDTEV0QlFVWXNSVUZCVTIxQ0xGRkJRVlFzUTBGQmEwSkxMRmxCUVd4Q0xFVkJRV2REZEVJc1VVRkJhRU1zUTBGQmVVTlJMRk5CUVhwRExFTkJRV2hDTzBGQlEwRXNZMEZCU1cxQ0xFOUJRVTlrTEZWQlFWVkxMRWRCUVZZc1EwRkJZMnhETEVkQlFXUXNSVUZCYlVJeVF5eEpRVUZ1UWl4RFFVRjNRa01zUzBGQmVFSXNRMEZCT0VJc1EwRkJPVUlzUTBGQldEdEJRVU5CTEdOQlFVbERMRXRCUVVzc2MwSkJRVVV2UWl4TFFVRkdMRVZCUVZNNVFpeEpRVUZVTEVOQlFXTXNTVUZCWkN4TFFVRjFRaXhyUTBGQldTeERRVUZhTEVWQlFXVXNWMEZCWml4RFFVRm9RenRCUVVOQkxHTkJRVWt5UkN4VFFVRlRSU3hGUVVGaUxFVkJRV2xDTzBGQlEyWXNaMEpCUVVsR0xGTkJRVk1zUlVGQllpeEZRVUZwUWp0QlFVTm1MRzlEUVVGRk4wSXNTMEZCUml4RlFVRlRPVUlzU1VGQlZDeERRVUZqTEVsQlFXUXNSVUZCYlVJeVJDeEpRVUZ1UWp0QlFVTkVMR0ZCUmtRc1RVRkZTenRCUVVOSVFTeHhRa0ZCVDBVc1JVRkJVRHRCUVVOQkxHOURRVUZGTDBJc1MwRkJSaXhGUVVGVE9VSXNTVUZCVkN4RFFVRmpMRWxCUVdRc1JVRkJiVUl5UkN4SlFVRnVRanRCUVVOQkxHOURRVUZGWkN4VlFVRlZTeXhIUVVGV0xFTkJRV05zUXl4SFFVRmtMRU5CUVVZc1JVRkJjMEpvUWl4SlFVRjBRaXhEUVVFeVFpeE5RVUV6UWl4RlFVRnJReXh6UWtGQlJUWkRMRlZCUVZWTExFZEJRVllzUTBGQlkyeERMRWRCUVdRc1EwRkJSaXhGUVVGelFtaENMRWxCUVhSQ0xFTkJRVEpDTEUxQlFUTkNMRVZCUVcxRE9FUXNUMEZCYmtNc1EwRkJNa01zUjBGQk0wTXNSVUZCSzBNc1JVRkJMME1zU1VGQmJVUXNSMEZCYmtRc1IwRkJkVVJJTEVsQlFYcEdPMEZCUTBRN1FVRkRSanRCUVVORUxHTkJRVWxKTEZkQlFWY3NjMEpCUVVWd1FpeFRRVUZUVHl4SFFVRlVMRU5CUVdGc1F5eEhRVUZpTEVOQlFVWXNSVUZCY1VKblJDeFJRVUZ5UWl4RFFVRTRRaXhYUVVFNVFpeERRVUZtTzBGQlEwRXNZMEZCU1VRc1VVRkJTaXhGUVVGak8wRkJRMXBNTEhOQ1FVRlZNVUlzVVVGQlZpeERRVUZ0UWl4WFFVRnVRanRCUVVORU8wRkJRMFlzVTBGcVFrUTdRVUZyUWtGWExHbENRVUZUV0N4UlFVRlVMRU5CUVd0Q1RTeFRRVUZzUWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdLMEpCU1ZjN1FVRkRWQ3hWUVVGSkxFdEJRVXQ0UXl4aFFVRlVMRVZCUVhkQ0xFdEJRVXRCTEdGQlFVd3NRMEZCYlVKNVFpeFBRVUZ1UWp0QlFVTjRRaXcwUWtGQlJVVXNUVUZCUml4RlFVRlZkME1zUjBGQlZpeERRVUZqTERaQ1FVRmtPMEZCUTBRN096czdSVUU1VFcxRFF5eHJRanM3UVVGcFRuUkROMFVzZDBKQlFYZENPRVVzVVVGQmVFSXNSMEZCYlVNc1JVRkJia003TzFGQlJWRTVSU3gxUWl4SFFVRkJRU3gxUWlJc0ltWnBiR1VpT2lKbWIzVnVaR0YwYVc5dUxuSmxjM0J2Ym5OcGRtVkJZMk52Y21ScGIyNVVZV0p6TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXBiWEJ2Y25RZ0pDQm1jbTl0SUNkcWNYVmxjbmtuTzF4dWFXMXdiM0owSUhzZ1RXVmthV0ZSZFdWeWVTQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtMWxaR2xoVVhWbGNua25PMXh1YVcxd2IzSjBJSHNnUjJWMFdXOUVhV2RwZEhNZ2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVkWFJwYkM1amIzSmxKenRjYm1sdGNHOXlkQ0I3SUZCc2RXZHBiaUI5Wm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWM3WEc1Y2JtbHRjRzl5ZENCN0lFRmpZMjl5WkdsdmJpQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTVoWTJOdmNtUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1ZHRmljeUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MFlXSnpKenRjYmx4dUx5OGdWR2hsSUhCc2RXZHBiaUJ0WVhSamFHVnpJSFJvWlNCd2JIVm5hVzRnWTJ4aGMzTmxjeUIzYVhSb0lIUm9aWE5sSUhCc2RXZHBiaUJwYm5OMFlXNWpaWE11WEc1MllYSWdUV1Z1ZFZCc2RXZHBibk1nUFNCN1hHNGdJSFJoWW5NNklIdGNiaUFnSUNCamMzTkRiR0Z6Y3pvZ0ozUmhZbk1uTEZ4dUlDQWdJSEJzZFdkcGJqb2dWR0ZpYzF4dUlDQjlMRnh1SUNCaFkyTnZjbVJwYjI0NklIdGNiaUFnSUNCamMzTkRiR0Z6Y3pvZ0oyRmpZMjl5WkdsdmJpY3NYRzRnSUNBZ2NHeDFaMmx1T2lCQlkyTnZjbVJwYjI1Y2JpQWdmVnh1ZlR0Y2JseHVYRzR2S2lwY2JpQXFJRkpsYzNCdmJuTnBkbVZCWTJOdmNtUnBiMjVVWVdKeklHMXZaSFZzWlM1Y2JpQXFJRUJ0YjJSMWJHVWdabTkxYm1SaGRHbHZiaTV5WlhOd2IyNXphWFpsUVdOamIzSmthVzl1VkdGaWMxeHVJQ29nUUhKbGNYVnBjbVZ6SUdadmRXNWtZWFJwYjI0dWRYUnBiQzV0YjNScGIyNWNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxtRmpZMjl5WkdsdmJseHVJQ29nUUhKbGNYVnBjbVZ6SUdadmRXNWtZWFJwYjI0dWRHRmljMXh1SUNvdlhHNWNibU5zWVhOeklGSmxjM0J2Ym5OcGRtVkJZMk52Y21ScGIyNVVZV0p6SUdWNGRHVnVaSE1nVUd4MVoybHVlMXh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJwYm5OMFlXNWpaU0J2WmlCaElISmxjM0J2Ym5OcGRtVWdZV05qYjNKa2FXOXVJSFJoWW5NdVhHNGdJQ0FxSUVCamJHRnpjMXh1SUNBZ0tpQkFibUZ0WlNCU1pYTndiMjV6YVhabFFXTmpiM0prYVc5dVZHRmljMXh1SUNBZ0tpQkFabWx5WlhNZ1VtVnpjRzl1YzJsMlpVRmpZMjl5WkdsdmJsUmhZbk1qYVc1cGRGeHVJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnWld4bGJXVnVkQ0F0SUdwUmRXVnllU0J2WW1wbFkzUWdkRzhnYldGclpTQnBiblJ2SUZKbGMzQnZibk5wZG1VZ1FXTmpiM0prYVc5dUlGUmhZbk11WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdUM1psY25KcFpHVnpJSFJ2SUhSb1pTQmtaV1poZFd4MElIQnNkV2RwYmlCelpYUjBhVzVuY3k1Y2JpQWdJQ292WEc0Z0lGOXpaWFIxY0NobGJHVnRaVzUwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDQTlJQ1FvWld4bGJXVnVkQ2s3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6SUNBOUlDUXVaWGgwWlc1a0tIdDlMQ0IwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvS1N3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZEdocGN5NXlkV3hsY3lBOUlIUm9hWE11SkdWc1pXMWxiblF1WkdGMFlTZ25jbVZ6Y0c5dWMybDJaUzFoWTJOdmNtUnBiMjR0ZEdGaWN5Y3BPMXh1SUNBZ0lIUm9hWE11WTNWeWNtVnVkRTF4SUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TG1OMWNuSmxiblJRYkhWbmFXNGdQU0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXVZMnhoYzNOT1lXMWxJRDBnSjFKbGMzQnZibk5wZG1WQlkyTnZjbVJwYjI1VVlXSnpKenNnTHk4Z2FXVTVJR0poWTJzZ1kyOXRjR0YwWEc0Z0lDQWdhV1lnS0NGMGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb0oybGtKeWtwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVZWFIwY2lnbmFXUW5MRWRsZEZsdlJHbG5hWFJ6S0RZc0lDZHlaWE53YjI1emFYWmxZV05qYjNKa2FXOXVkR0ZpY3ljcEtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RHaHBjeTVmYVc1cGRDZ3BPMXh1SUNBZ0lIUm9hWE11WDJWMlpXNTBjeWdwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCTlpXNTFJR0o1SUhCaGNuTnBibWNnZEdobElHTnNZWE56WlhNZ1puSnZiU0IwYUdVZ0oyUmhkR0V0Y21WemNHOXVjMmwyWlMxaFkyTnZjbVJwYjI0dGRHRmljeWNnWVhSMGNtbGlkWFJsSUc5dUlIUm9aU0JsYkdWdFpXNTBMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOXBibWwwS0NrZ2UxeHVJQ0FnSUUxbFpHbGhVWFZsY25rdVgybHVhWFFvS1R0Y2JseHVJQ0FnSUM4dklGUm9aU0JtYVhKemRDQjBhVzFsSUdGdUlFbHVkR1Z5WTJoaGJtZGxJSEJzZFdkcGJpQnBjeUJwYm1sMGFXRnNhWHBsWkN3Z2RHaHBjeTV5ZFd4bGN5QnBjeUJqYjI1MlpYSjBaV1FnWm5KdmJTQmhJSE4wY21sdVp5QnZaaUJjSW1Oc1lYTnpaWE5jSWlCMGJ5QmhiaUJ2WW1wbFkzUWdiMllnY25Wc1pYTmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11Y25Wc1pYTWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCc1pYUWdjblZzWlhOVWNtVmxJRDBnZTMwN1hHNWNiaUFnSUNBZ0lDOHZJRkJoY25ObElISjFiR1Z6SUdaeWIyMGdYQ0pqYkdGemMyVnpYQ0lnY0hWc2JHVmtJR1p5YjIwZ1pHRjBZU0JoZEhSeWFXSjFkR1ZjYmlBZ0lDQWdJR3hsZENCeWRXeGxjeUE5SUhSb2FYTXVjblZzWlhNdWMzQnNhWFFvSnlBbktUdGNibHh1SUNBZ0lDQWdMeThnU1hSbGNtRjBaU0IwYUhKdmRXZG9JR1YyWlhKNUlISjFiR1VnWm05MWJtUmNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2djblZzWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElISjFiR1VnUFNCeWRXeGxjMXRwWFM1emNHeHBkQ2duTFNjcE8xeHVJQ0FnSUNBZ0lDQnNaWFFnY25Wc1pWTnBlbVVnUFNCeWRXeGxMbXhsYm1kMGFDQStJREVnUHlCeWRXeGxXekJkSURvZ0ozTnRZV3hzSnp0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEoxYkdWUWJIVm5hVzRnUFNCeWRXeGxMbXhsYm1kMGFDQStJREVnUHlCeWRXeGxXekZkSURvZ2NuVnNaVnN3WFR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvVFdWdWRWQnNkV2RwYm5OYmNuVnNaVkJzZFdkcGJsMGdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeWRXeGxjMVJ5WldWYmNuVnNaVk5wZW1WZElEMGdUV1Z1ZFZCc2RXZHBibk5iY25Wc1pWQnNkV2RwYmwwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1eWRXeGxjeUE5SUhKMWJHVnpWSEpsWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOW5aWFJCYkd4UGNIUnBiMjV6S0NrN1hHNWNiaUFnSUNCcFppQW9JU1F1YVhORmJYQjBlVTlpYW1WamRDaDBhR2x6TG5KMWJHVnpLU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZZMmhsWTJ0TlpXUnBZVkYxWlhKcFpYTW9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmWjJWMFFXeHNUM0IwYVc5dWN5Z3BJSHRjYmlBZ0lDQXZMMmRsZENCaGJHd2daR1ZtWVhWc2RITWdZVzVrSUc5d2RHbHZibk5jYmlBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUY5MGFHbHpMbUZzYkU5d2RHbHZibk1nUFNCN2ZUdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnVFdWdWRWQnNkV2RwYm5NcElIdGNiaUFnSUNBZ0lHbG1JQ2hOWlc1MVVHeDFaMmx1Y3k1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdlltb2dQU0JOWlc1MVVHeDFaMmx1YzF0clpYbGRPMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCa2RXMXRlVkJzZFdkcGJpQTlJQ1FvSnp4MWJENDhMM1ZzUGljcE8xeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCMGJYQlFiSFZuYVc0Z1BTQnVaWGNnYjJKcUxuQnNkV2RwYmloa2RXMXRlVkJzZFdkcGJpeGZkR2hwY3k1dmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJaWGxMWlhrZ2FXNGdkRzF3VUd4MVoybHVMbTl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYlhCUWJIVm5hVzR1YjNCMGFXOXVjeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHJaWGxMWlhrcElDWW1JR3RsZVV0bGVTQWhQVDBnSjNwbVVHeDFaMmx1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiMkpxVDJKcUlEMGdkRzF3VUd4MVoybHVMbTl3ZEdsdmJuTmJhMlY1UzJWNVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WVd4c1QzQjBhVzl1YzF0clpYbExaWGxkSUQwZ2IySnFUMkpxTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjBiWEJRYkhWbmFXNHVaR1Z6ZEhKdmVTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOaGRHTm9LR1VwSUh0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxjeUJsZG1WdWRITWdabTl5SUhSb1pTQk5aVzUxTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjlsZG1WdWRITW9LU0I3WEc0Z0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDUW9kMmx1Wkc5M0tTNXZiaWduWTJoaGJtZGxaQzU2Wmk1dFpXUnBZWEYxWlhKNUp5d2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NWZZMmhsWTJ0TlpXUnBZVkYxWlhKcFpYTW9LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGFHVmphM01nZEdobElHTjFjbkpsYm5RZ2MyTnlaV1Z1SUhkcFpIUm9JR0ZuWVdsdWMzUWdZWFpoYVd4aFlteGxJRzFsWkdsaElIRjFaWEpwWlhNdUlFbG1JSFJvWlNCdFpXUnBZU0J4ZFdWeWVTQm9ZWE1nWTJoaGJtZGxaQ3dnWVc1a0lIUm9aU0J3YkhWbmFXNGdibVZsWkdWa0lHaGhjeUJqYUdGdVoyVmtMQ0IwYUdVZ2NHeDFaMmx1Y3lCM2FXeHNJSE4zWVhBZ2IzVjBMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWphR1ZqYTAxbFpHbGhVWFZsY21sbGN5Z3BJSHRjYmlBZ0lDQjJZWElnYldGMFkyaGxaRTF4TENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0x5OGdTWFJsY21GMFpTQjBhSEp2ZFdkb0lHVmhZMmdnY25Wc1pTQmhibVFnWm1sdVpDQjBhR1VnYkdGemRDQnRZWFJqYUdsdVp5QnlkV3hsWEc0Z0lDQWdKQzVsWVdOb0tIUm9hWE11Y25Wc1pYTXNJR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ2FXWWdLRTFsWkdsaFVYVmxjbmt1WVhSTVpXRnpkQ2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJRzFoZEdOb1pXUk5jU0E5SUd0bGVUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDOHZJRTV2SUcxaGRHTm9QeUJPYnlCa2FXTmxYRzRnSUNBZ2FXWWdLQ0Z0WVhSamFHVmtUWEVwSUhKbGRIVnlianRjYmx4dUlDQWdJQzh2SUZCc2RXZHBiaUJoYkhKbFlXUjVJR2x1YVhScFlXeHBlbVZrUHlCWFpTQm5iMjlrWEc0Z0lDQWdhV1lnS0hSb2FYTXVZM1Z5Y21WdWRGQnNkV2RwYmlCcGJuTjBZVzVqWlc5bUlIUm9hWE11Y25Wc1pYTmJiV0YwWTJobFpFMXhYUzV3YkhWbmFXNHBJSEpsZEhWeWJqdGNibHh1SUNBZ0lDOHZJRkpsYlc5MlpTQmxlR2x6ZEdsdVp5QndiSFZuYVc0dGMzQmxZMmxtYVdNZ1ExTlRJR05zWVhOelpYTmNiaUFnSUNBa0xtVmhZMmdvVFdWdWRWQnNkV2RwYm5Nc0lHWjFibU4wYVc5dUtHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJRjkwYUdsekxpUmxiR1Z0Wlc1MExuSmxiVzkyWlVOc1lYTnpLSFpoYkhWbExtTnpjME5zWVhOektUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lDOHZJRUZrWkNCMGFHVWdRMU5USUdOc1lYTnpJR1p2Y2lCMGFHVWdibVYzSUhCc2RXZHBibHh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVdSa1EyeGhjM01vZEdocGN5NXlkV3hsYzF0dFlYUmphR1ZrVFhGZExtTnpjME5zWVhOektUdGNibHh1SUNBZ0lDOHZJRU55WldGMFpTQmhiaUJwYm5OMFlXNWpaU0J2WmlCMGFHVWdibVYzSUhCc2RXZHBibHh1SUNBZ0lHbG1JQ2gwYUdsekxtTjFjbkpsYm5SUWJIVm5hVzRwSUh0Y2JpQWdJQ0FnSUM4dlpHOXVKM1FnYTI1dmR5QjNhSGtnWW5WMElHOXVJRzVsYzNSbFpDQmxiR1Z0Wlc1MGN5QmtZWFJoSUhwbVVHeDFaMmx1SUdkbGRDZHpJR3h2YzNSY2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1amRYSnlaVzUwVUd4MVoybHVMaVJsYkdWdFpXNTBMbVJoZEdFb0ozcG1VR3gxWjJsdUp5a2dKaVlnZEdocGN5NXpkRzl5WlhwbVJHRjBZU2tnZEdocGN5NWpkWEp5Wlc1MFVHeDFaMmx1TGlSbGJHVnRaVzUwTG1SaGRHRW9KM3BtVUd4MVoybHVKeXgwYUdsekxuTjBiM0psZW1aRVlYUmhLVHRjYmlBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZCc2RXZHBiaTVrWlhOMGNtOTVLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11WDJoaGJtUnNaVTFoY210MWNDaDBhR2x6TG5KMWJHVnpXMjFoZEdOb1pXUk5jVjB1WTNOelEyeGhjM01wTzF4dUlDQWdJSFJvYVhNdVkzVnljbVZ1ZEZCc2RXZHBiaUE5SUc1bGR5QjBhR2x6TG5KMWJHVnpXMjFoZEdOb1pXUk5jVjB1Y0d4MVoybHVLSFJvYVhNdUpHVnNaVzFsYm5Rc0lIdDlLVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxlbVpFWVhSaElEMGdkR2hwY3k1amRYSnlaVzUwVUd4MVoybHVMaVJsYkdWdFpXNTBMbVJoZEdFb0ozcG1VR3gxWjJsdUp5azdYRzVjYmlBZ2ZWeHVYRzRnSUY5b1lXNWtiR1ZOWVhKcmRYQW9kRzlUWlhRcGUxeHVJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE1zSUdaeWIyMVRkSEpwYm1jZ1BTQW5ZV05qYjNKa2FXOXVKenRjYmlBZ0lDQjJZWElnSkhCaGJtVnNjeUE5SUNRb0oxdGtZWFJoTFhSaFluTXRZMjl1ZEdWdWREMG5LM1JvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWduYVdRbktTc25YU2NwTzF4dUlDQWdJR2xtSUNna2NHRnVaV3h6TG14bGJtZDBhQ2tnWm5KdmJWTjBjbWx1WnlBOUlDZDBZV0p6Snp0Y2JpQWdJQ0JwWmlBb1puSnZiVk4wY21sdVp5QTlQVDBnZEc5VFpYUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RtRnlJSFJoWW5OVWFYUnNaU0E5SUY5MGFHbHpMbUZzYkU5d2RHbHZibk11YkdsdWEwTnNZWE56UDE5MGFHbHpMbUZzYkU5d2RHbHZibk11YkdsdWEwTnNZWE56T2lkMFlXSnpMWFJwZEd4bEp6dGNiaUFnSUNCMllYSWdkR0ZpYzFCaGJtVnNJRDBnWDNSb2FYTXVZV3hzVDNCMGFXOXVjeTV3WVc1bGJFTnNZWE56UDE5MGFHbHpMbUZzYkU5d2RHbHZibk11Y0dGdVpXeERiR0Z6Y3pvbmRHRmljeTF3WVc1bGJDYzdYRzVjYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5KbGJXOTJaVUYwZEhJb0ozSnZiR1VuS1R0Y2JpQWdJQ0IyWVhJZ0pHeHBTR1ZoWkhNZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1Ob2FXeGtjbVZ1S0NjdUp5dDBZV0p6VkdsMGJHVXJKeXhiWkdGMFlTMWhZMk52Y21ScGIyNHRhWFJsYlYwbktTNXlaVzF2ZG1WRGJHRnpjeWgwWVdKelZHbDBiR1VwTG5KbGJXOTJaVU5zWVhOektDZGhZMk52Y21ScGIyNHRhWFJsYlNjcExuSmxiVzkyWlVGMGRISW9KMlJoZEdFdFlXTmpiM0prYVc5dUxXbDBaVzBuS1R0Y2JpQWdJQ0IyWVhJZ0pHeHBTR1ZoWkhOQklEMGdKR3hwU0dWaFpITXVZMmhwYkdSeVpXNG9KMkVuS1M1eVpXMXZkbVZEYkdGemN5Z25ZV05qYjNKa2FXOXVMWFJwZEd4bEp5azdYRzVjYmlBZ0lDQnBaaUFvWm5KdmJWTjBjbWx1WnlBOVBUMGdKM1JoWW5NbktTQjdYRzRnSUNBZ0lDQWtjR0Z1Wld4eklEMGdKSEJoYm1Wc2N5NWphR2xzWkhKbGJpZ25MaWNyZEdGaWMxQmhibVZzS1M1eVpXMXZkbVZEYkdGemN5aDBZV0p6VUdGdVpXd3BMbkpsYlc5MlpVRjBkSElvSjNKdmJHVW5LUzV5WlcxdmRtVkJkSFJ5S0NkaGNtbGhMV2hwWkdSbGJpY3BMbkpsYlc5MlpVRjBkSElvSjJGeWFXRXRiR0ZpWld4c1pXUmllU2NwTzF4dUlDQWdJQ0FnSkhCaGJtVnNjeTVqYUdsc1pISmxiaWduWVNjcExuSmxiVzkyWlVGMGRISW9KM0p2YkdVbktTNXlaVzF2ZG1WQmRIUnlLQ2RoY21saExXTnZiblJ5YjJ4ekp5a3VjbVZ0YjNabFFYUjBjaWduWVhKcFlTMXpaV3hsWTNSbFpDY3BPMXh1SUNBZ0lIMWxiSE5sZTF4dUlDQWdJQ0FnSkhCaGJtVnNjeUE5SUNSc2FVaGxZV1J6TG1Ob2FXeGtjbVZ1S0NkYlpHRjBZUzEwWVdJdFkyOXVkR1Z1ZEYwbktTNXlaVzF2ZG1WRGJHRnpjeWduWVdOamIzSmthVzl1TFdOdmJuUmxiblFuS1R0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnSkhCaGJtVnNjeTVqYzNNb2UyUnBjM0JzWVhrNkp5Y3NkbWx6YVdKcGJHbDBlVG9uSjMwcE8xeHVJQ0FnSUNSc2FVaGxZV1J6TG1OemN5aDdaR2x6Y0d4aGVUb25KeXgyYVhOcFltbHNhWFI1T2ljbmZTazdYRzRnSUNBZ2FXWWdLSFJ2VTJWMElEMDlQU0FuWVdOamIzSmthVzl1SnlrZ2UxeHVJQ0FnSUNBZ0pIQmhibVZzY3k1bFlXTm9LR1oxYm1OMGFXOXVLR3RsZVN4MllXeDFaU2w3WEc0Z0lDQWdJQ0FnSUNRb2RtRnNkV1VwTG1Gd2NHVnVaRlJ2S0NSc2FVaGxZV1J6TG1kbGRDaHJaWGtwS1M1aFpHUkRiR0Z6Y3lnbllXTmpiM0prYVc5dUxXTnZiblJsYm5RbktTNWhkSFJ5S0Nka1lYUmhMWFJoWWkxamIyNTBaVzUwSnl3bkp5a3VjbVZ0YjNabFEyeGhjM01vSjJsekxXRmpkR2wyWlNjcExtTnpjeWg3YUdWcFoyaDBPaWNuZlNrN1hHNGdJQ0FnSUNBZ0lDUW9KMXRrWVhSaExYUmhZbk10WTI5dWRHVnVkRDBuSzE5MGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb0oybGtKeWtySjEwbktTNWhablJsY2lnblBHUnBkaUJwWkQxY0luUmhZbk10Y0d4aFkyVm9iMnhrWlhJdEp5dGZkR2hwY3k0a1pXeGxiV1Z1ZEM1aGRIUnlLQ2RwWkNjcEt5ZGNJajQ4TDJScGRqNG5LUzVrWlhSaFkyZ29LVHRjYmlBZ0lDQWdJQ0FnSkd4cFNHVmhaSE11WVdSa1EyeGhjM01vSjJGalkyOXlaR2x2YmkxcGRHVnRKeWt1WVhSMGNpZ25aR0YwWVMxaFkyTnZjbVJwYjI0dGFYUmxiU2NzSnljcE8xeHVJQ0FnSUNBZ0lDQWtiR2xJWldGa2MwRXVZV1JrUTJ4aGMzTW9KMkZqWTI5eVpHbHZiaTEwYVhSc1pTY3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmV1ZzYzJVZ2FXWWdLSFJ2VTJWMElEMDlQU0FuZEdGaWN5Y3BlMXh1SUNBZ0lDQWdkbUZ5SUNSMFlXSnpRMjl1ZEdWdWRDQTlJQ1FvSjF0a1lYUmhMWFJoWW5NdFkyOXVkR1Z1ZEQwbksxOTBhR2x6TGlSbGJHVnRaVzUwTG1GMGRISW9KMmxrSnlrckoxMG5LVHRjYmlBZ0lDQWdJSFpoY2lBa2NHeGhZMlZvYjJ4a1pYSWdQU0FrS0NjamRHRmljeTF3YkdGalpXaHZiR1JsY2kwbksxOTBhR2x6TGlSbGJHVnRaVzUwTG1GMGRISW9KMmxrSnlrcE8xeHVJQ0FnSUNBZ2FXWWdLQ1J3YkdGalpXaHZiR1JsY2k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0pIUmhZbk5EYjI1MFpXNTBJRDBnSkNnblBHUnBkaUJqYkdGemN6MWNJblJoWW5NdFkyOXVkR1Z1ZEZ3aVBqd3ZaR2wyUGljcExtbHVjMlZ5ZEVGbWRHVnlLQ1J3YkdGalpXaHZiR1JsY2lrdVlYUjBjaWduWkdGMFlTMTBZV0p6TFdOdmJuUmxiblFuTEY5MGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb0oybGtKeWtwTzF4dUlDQWdJQ0FnSUNBa2NHeGhZMlZvYjJ4a1pYSXVjbVZ0YjNabEtDazdYRzRnSUNBZ0lDQjlaV3h6Wlh0Y2JpQWdJQ0FnSUNBZ0pIUmhZbk5EYjI1MFpXNTBJRDBnSkNnblBHUnBkaUJqYkdGemN6MWNJblJoWW5NdFkyOXVkR1Z1ZEZ3aVBqd3ZaR2wyUGljcExtbHVjMlZ5ZEVGbWRHVnlLRjkwYUdsekxpUmxiR1Z0Wlc1MEtTNWhkSFJ5S0Nka1lYUmhMWFJoWW5NdFkyOXVkR1Z1ZENjc1gzUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpZ25hV1FuS1NrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0pIQmhibVZzY3k1bFlXTm9LR1oxYm1OMGFXOXVLR3RsZVN4MllXeDFaU2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBaVzF3Vm1Gc2RXVWdQU0FrS0haaGJIVmxLUzVoY0hCbGJtUlVieWdrZEdGaWMwTnZiblJsYm5RcExtRmtaRU5zWVhOektIUmhZbk5RWVc1bGJDazdYRzRnSUNBZ0lDQWdJSFpoY2lCb1lYTm9JRDBnSkd4cFNHVmhaSE5CTG1kbGRDaHJaWGtwTG1oaGMyZ3VjMnhwWTJVb01TazdYRzRnSUNBZ0lDQWdJSFpoY2lCcFpDQTlJQ1FvZG1Gc2RXVXBMbUYwZEhJb0oybGtKeWtnZkh3Z1IyVjBXVzlFYVdkcGRITW9OaXdnSjJGalkyOXlaR2x2YmljcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYUdGemFDQWhQVDBnYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FHRnphQ0FoUFQwZ0p5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9kbUZzZFdVcExtRjBkSElvSjJsa0p5eG9ZWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlaV3h6Wlh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYzJnZ1BTQnBaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9kbUZzZFdVcExtRjBkSElvSjJsa0p5eG9ZWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSkd4cFNHVmhaSE5CTG1kbGRDaHJaWGtwS1M1aGRIUnlLQ2RvY21WbUp5d2tLQ1JzYVVobFlXUnpRUzVuWlhRb2EyVjVLU2t1WVhSMGNpZ25hSEpsWmljcExuSmxjR3hoWTJVb0p5TW5MQ2NuS1Nzbkl5Y3JhR0Z6YUNrN1hHNGdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x6UVdOMGFYWmxJRDBnSkNna2JHbElaV0ZrY3k1blpYUW9hMlY1S1NrdWFHRnpRMnhoYzNNb0oybHpMV0ZqZEdsMlpTY3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkJZM1JwZG1VcElIdGNiaUFnSUNBZ0lDQWdJQ0IwWlcxd1ZtRnNkV1V1WVdSa1EyeGhjM01vSjJsekxXRmpkR2wyWlNjcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FrYkdsSVpXRmtjeTVoWkdSRGJHRnpjeWgwWVdKelZHbDBiR1VwTzF4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVnpkSEp2ZVhNZ2RHaGxJR2x1YzNSaGJtTmxJRzltSUhSb1pTQmpkWEp5Wlc1MElIQnNkV2RwYmlCdmJpQjBhR2x6SUdWc1pXMWxiblFzSUdGeklIZGxiR3dnWVhNZ2RHaGxJSGRwYm1SdmR5QnlaWE5wZW1VZ2FHRnVaR3hsY2lCMGFHRjBJSE4zYVhSamFHVnpJSFJvWlNCd2JIVm5hVzV6SUc5MWRDNWNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxTDF4dUlDQmZaR1Z6ZEhKdmVTZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWpkWEp5Wlc1MFVHeDFaMmx1S1NCMGFHbHpMbU4xY25KbGJuUlFiSFZuYVc0dVpHVnpkSEp2ZVNncE8xeHVJQ0FnSUNRb2QybHVaRzkzS1M1dlptWW9KeTU2Wmk1U1pYTndiMjV6YVhabFFXTmpiM0prYVc5dVZHRmljeWNwTzF4dUlDQjlYRzU5WEc1Y2JsSmxjM0J2Ym5OcGRtVkJZMk52Y21ScGIyNVVZV0p6TG1SbFptRjFiSFJ6SUQwZ2UzMDdYRzVjYm1WNGNHOXlkQ0I3VW1WemNHOXVjMmwyWlVGalkyOXlaR2x2YmxSaFluTjlPMXh1SWwxOVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJlc3BvbnNpdmVNZW51ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmNvcmUnKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG52YXIgX2ZvdW5kYXRpb24yID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLmRyb3Bkb3duTWVudScpO1xuXG52YXIgX2ZvdW5kYXRpb24zID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLmRyaWxsZG93bicpO1xuXG52YXIgX2ZvdW5kYXRpb240ID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLmFjY29yZGlvbk1lbnUnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTWVudVBsdWdpbnMgPSB7XG4gIGRyb3Bkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcm9wZG93bicsXG4gICAgcGx1Z2luOiBfZm91bmRhdGlvbjIuRHJvcGRvd25NZW51XG4gIH0sXG4gIGRyaWxsZG93bjoge1xuICAgIGNzc0NsYXNzOiAnZHJpbGxkb3duJyxcbiAgICBwbHVnaW46IF9mb3VuZGF0aW9uMy5EcmlsbGRvd25cbiAgfSxcbiAgYWNjb3JkaW9uOiB7XG4gICAgY3NzQ2xhc3M6ICdhY2NvcmRpb24tbWVudScsXG4gICAgcGx1Z2luOiBfZm91bmRhdGlvbjQuQWNjb3JkaW9uTWVudVxuICB9XG59O1xuXG4vLyBpbXBvcnQgXCJmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMuanNcIjtcblxuXG4vKipcbiAqIFJlc3BvbnNpdmVNZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlTWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxudmFyIFJlc3BvbnNpdmVNZW51ID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFJlc3BvbnNpdmVNZW51LCBfUGx1Z2luKTtcblxuICBmdW5jdGlvbiBSZXNwb25zaXZlTWVudSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVzcG9uc2l2ZU1lbnUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZXNwb25zaXZlTWVudS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlc3BvbnNpdmVNZW51KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVzcG9uc2l2ZU1lbnUsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSByZXNwb25zaXZlIG1lbnUuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgUmVzcG9uc2l2ZU1lbnVcbiAgICAgKiBAZmlyZXMgUmVzcG9uc2l2ZU1lbnUjaW5pdFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZWxlbWVudCk7XG4gICAgICB0aGlzLnJ1bGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLW1lbnUnKTtcbiAgICAgIHRoaXMuY3VycmVudE1xID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG51bGw7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICdSZXNwb25zaXZlTWVudSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgTWVudSBieSBwYXJzaW5nIHRoZSBjbGFzc2VzIGZyb20gdGhlICdkYXRhLVJlc3BvbnNpdmVNZW51JyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcblxuICAgICAgX2ZvdW5kYXRpb25VdGlsLk1lZGlhUXVlcnkuX2luaXQoKTtcbiAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIGFuIEludGVyY2hhbmdlIHBsdWdpbiBpcyBpbml0aWFsaXplZCwgdGhpcy5ydWxlcyBpcyBjb252ZXJ0ZWQgZnJvbSBhIHN0cmluZyBvZiBcImNsYXNzZXNcIiB0byBhbiBvYmplY3Qgb2YgcnVsZXNcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHJ1bGVzVHJlZSA9IHt9O1xuXG4gICAgICAgIC8vIFBhcnNlIHJ1bGVzIGZyb20gXCJjbGFzc2VzXCIgcHVsbGVkIGZyb20gZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBldmVyeSBydWxlIGZvdW5kXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgICAgdmFyIHJ1bGVTaXplID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVswXSA6ICdzbWFsbCc7XG4gICAgICAgICAgdmFyIHJ1bGVQbHVnaW4gPSBydWxlLmxlbmd0aCA+IDEgPyBydWxlWzFdIDogcnVsZVswXTtcblxuICAgICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcnVsZXNUcmVlW3J1bGVTaXplXSA9IE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlc1RyZWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghX2pxdWVyeTIuZGVmYXVsdC5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgICB9XG4gICAgICAvLyBBZGQgZGF0YS1tdXRhdGUgc2luY2UgY2hpbGRyZW4gbWF5IG5lZWQgaXQuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJywgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLW11dGF0ZScpIHx8ICgwLCBfZm91bmRhdGlvblV0aWwyLkdldFlvRGlnaXRzKSg2LCAncmVzcG9uc2l2ZS1tZW51JykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAgIH0pO1xuICAgICAgLy8gJCh3aW5kb3cpLm9uKCdyZXNpemUuemYuUmVzcG9uc2l2ZU1lbnUnLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vICAgX3RoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgICAvLyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgc2NyZWVuIHdpZHRoIGFnYWluc3QgYXZhaWxhYmxlIG1lZGlhIHF1ZXJpZXMuIElmIHRoZSBtZWRpYSBxdWVyeSBoYXMgY2hhbmdlZCwgYW5kIHRoZSBwbHVnaW4gbmVlZGVkIGhhcyBjaGFuZ2VkLCB0aGUgcGx1Z2lucyB3aWxsIHN3YXAgb3V0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19jaGVja01lZGlhUXVlcmllcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja01lZGlhUXVlcmllcygpIHtcbiAgICAgIHZhciBtYXRjaGVkTXEsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSBhbmQgZmluZCB0aGUgbGFzdCBtYXRjaGluZyBydWxlXG4gICAgICBfanF1ZXJ5Mi5kZWZhdWx0LmVhY2godGhpcy5ydWxlcywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoX2ZvdW5kYXRpb25VdGlsLk1lZGlhUXVlcnkuYXRMZWFzdChrZXkpKSB7XG4gICAgICAgICAgbWF0Y2hlZE1xID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gTm8gbWF0Y2g/IE5vIGRpY2VcbiAgICAgIGlmICghbWF0Y2hlZE1xKSByZXR1cm47XG5cbiAgICAgIC8vIFBsdWdpbiBhbHJlYWR5IGluaXRpYWxpemVkPyBXZSBnb29kXG4gICAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbikgcmV0dXJuO1xuXG4gICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgcGx1Z2luLXNwZWNpZmljIENTUyBjbGFzc2VzXG4gICAgICBfanF1ZXJ5Mi5kZWZhdWx0LmVhY2goTWVudVBsdWdpbnMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHZhbHVlLmNzc0NsYXNzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBZGQgdGhlIENTUyBjbGFzcyBmb3IgdGhlIG5ldyBwbHVnaW5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcblxuICAgICAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBuZXcgcGx1Z2luXG4gICAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luKSB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbmV3IHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4odGhpcy4kZWxlbWVudCwge30pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBpbnN0YW5jZSBvZiB0aGUgY3VycmVudCBwbHVnaW4gb24gdGhpcyBlbGVtZW50LCBhcyB3ZWxsIGFzIHRoZSB3aW5kb3cgcmVzaXplIGhhbmRsZXIgdGhhdCBzd2l0Y2hlcyB0aGUgcGx1Z2lucyBvdXQuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKCcuemYuUmVzcG9uc2l2ZU1lbnUnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzcG9uc2l2ZU1lbnU7XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cblJlc3BvbnNpdmVNZW51LmRlZmF1bHRzID0ge307XG5cbmV4cG9ydHMuUmVzcG9uc2l2ZU1lbnUgPSBSZXNwb25zaXZlTWVudTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVjbVZ6Y0c5dWMybDJaVTFsYm5VdWFuTWlYU3dpYm1GdFpYTWlPbHNpVFdWdWRWQnNkV2RwYm5NaUxDSmtjbTl3Wkc5M2JpSXNJbU56YzBOc1lYTnpJaXdpY0d4MVoybHVJaXdpUkhKdmNHUnZkMjVOWlc1MUlpd2laSEpwYkd4a2IzZHVJaXdpUkhKcGJHeGtiM2R1SWl3aVlXTmpiM0prYVc5dUlpd2lRV05qYjNKa2FXOXVUV1Z1ZFNJc0lsSmxjM0J2Ym5OcGRtVk5aVzUxSWl3aVpXeGxiV1Z1ZENJc0ltOXdkR2x2Ym5NaUxDSWtaV3hsYldWdWRDSXNJbkoxYkdWeklpd2laR0YwWVNJc0ltTjFjbkpsYm5STmNTSXNJbU4xY25KbGJuUlFiSFZuYVc0aUxDSmpiR0Z6YzA1aGJXVWlMQ0pmYVc1cGRDSXNJbDlsZG1WdWRITWlMQ0pOWldScFlWRjFaWEo1SWl3aWNuVnNaWE5VY21WbElpd2ljM0JzYVhRaUxDSnBJaXdpYkdWdVozUm9JaXdpY25Wc1pTSXNJbkoxYkdWVGFYcGxJaXdpY25Wc1pWQnNkV2RwYmlJc0lpUWlMQ0pwYzBWdGNIUjVUMkpxWldOMElpd2lYMk5vWldOclRXVmthV0ZSZFdWeWFXVnpJaXdpWVhSMGNpSXNJbDkwYUdseklpd2lkMmx1Wkc5M0lpd2liMjRpTENKdFlYUmphR1ZrVFhFaUxDSmxZV05vSWl3aWEyVjVJaXdpWVhSTVpXRnpkQ0lzSW5aaGJIVmxJaXdpY21WdGIzWmxRMnhoYzNNaUxDSmhaR1JEYkdGemN5SXNJbVJsYzNSeWIza2lMQ0p2Wm1ZaUxDSlFiSFZuYVc0aUxDSmtaV1poZFd4MGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096dEJRVVZCT3pzN08wRkJSVUU3TzBGQlEwRTdPMEZCUTBFN08wRkJSVUU3TzBGQlEwRTdPMEZCUTBFN096czdPenM3T3pzN1FVRkZRU3hKUVVGSlFTeGpRVUZqTzBGQlEyaENReXhaUVVGVk8wRkJRMUpETEdOQlFWVXNWVUZFUmp0QlFVVlNReXhaUVVGUlF6dEJRVVpCTEVkQlJFMDdRVUZMYWtKRExHRkJRVmM3UVVGRFVrZ3NZMEZCVlN4WFFVUkdPMEZCUlZKRExGbEJRVkZITzBGQlJrRXNSMEZNVFR0QlFWTm9Ra01zWVVGQlZ6dEJRVU5VVEN4alFVRlZMR2RDUVVSRU8wRkJSVlJETEZsQlFWRkxPMEZCUmtNN1FVRlVTeXhEUVVGc1FqczdRVUZsUlRzN08wRkJSMFk3T3pzN096czdTVUZQVFVNc1l6czdPenM3T3pzN096czdPMEZCUTBvN096czdPenM3T3pKQ1FWRlBReXhQTEVWQlFWTkRMRThzUlVGQlV6dEJRVU4yUWl4WFFVRkxReXhSUVVGTUxFZEJRV2RDTEhOQ1FVRkZSaXhQUVVGR0xFTkJRV2hDTzBGQlEwRXNWMEZCUzBjc1MwRkJUQ3hIUVVGaExFdEJRVXRFTEZGQlFVd3NRMEZCWTBVc1NVRkJaQ3hEUVVGdFFpeHBRa0ZCYmtJc1EwRkJZanRCUVVOQkxGZEJRVXRETEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFFTeFhRVUZMUXl4aFFVRk1MRWRCUVhGQ0xFbEJRWEpDTzBGQlEwRXNWMEZCUzBNc1UwRkJUQ3hIUVVGcFFpeG5Ra0ZCYWtJc1EwRk1kVUlzUTBGTFdUczdRVUZGYmtNc1YwRkJTME1zUzBGQlREdEJRVU5CTEZkQlFVdERMRTlCUVV3N1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN05FSkJTMUU3TzBGQlJVNURMR2xEUVVGWFJpeExRVUZZTzBGQlEwRTdRVUZEUVN4VlFVRkpMRTlCUVU4c1MwRkJTMHdzUzBGQldpeExRVUZ6UWl4UlFVRXhRaXhGUVVGdlF6dEJRVU5zUXl4WlFVRkpVU3haUVVGWkxFVkJRV2hDT3p0QlFVVkJPMEZCUTBFc1dVRkJTVklzVVVGQlVTeExRVUZMUVN4TFFVRk1MRU5CUVZkVExFdEJRVmdzUTBGQmFVSXNSMEZCYWtJc1EwRkJXanM3UVVGRlFUdEJRVU5CTEdGQlFVc3NTVUZCU1VNc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpWaXhOUVVGTlZ5eE5RVUV4UWl4RlFVRnJRMFFzUjBGQmJFTXNSVUZCZFVNN1FVRkRja01zWTBGQlNVVXNUMEZCVDFvc1RVRkJUVlVzUTBGQlRpeEZRVUZUUkN4TFFVRlVMRU5CUVdVc1IwRkJaaXhEUVVGWU8wRkJRMEVzWTBGQlNVa3NWMEZCVjBRc1MwRkJTMFFzVFVGQlRDeEhRVUZqTEVOQlFXUXNSMEZCYTBKRExFdEJRVXNzUTBGQlRDeERRVUZzUWl4SFFVRTBRaXhQUVVFelF6dEJRVU5CTEdOQlFVbEZMR0ZCUVdGR0xFdEJRVXRFTEUxQlFVd3NSMEZCWXl4RFFVRmtMRWRCUVd0Q1F5eExRVUZMTEVOQlFVd3NRMEZCYkVJc1IwRkJORUpCTEV0QlFVc3NRMEZCVEN4RFFVRTNRenM3UVVGRlFTeGpRVUZKZWtJc1dVRkJXVEpDTEZWQlFWb3NUVUZCTkVJc1NVRkJhRU1zUlVGQmMwTTdRVUZEY0VOT0xITkNRVUZWU3l4UlFVRldMRWxCUVhOQ01VSXNXVUZCV1RKQ0xGVkJRVm9zUTBGQmRFSTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHRkJRVXRrTEV0QlFVd3NSMEZCWVZFc1UwRkJZanRCUVVORU96dEJRVVZFTEZWQlFVa3NRMEZCUTA4c2FVSkJRVVZETEdGQlFVWXNRMEZCWjBJc1MwRkJTMmhDTEV0QlFYSkNMRU5CUVV3c1JVRkJhME03UVVGRGFFTXNZVUZCUzJsQ0xHdENRVUZNTzBGQlEwUTdRVUZEUkR0QlFVTkJMRmRCUVV0c1FpeFJRVUZNTEVOQlFXTnRRaXhKUVVGa0xFTkJRVzFDTEdGQlFXNUNMRVZCUVcxRExFdEJRVXR1UWl4UlFVRk1MRU5CUVdOdFFpeEpRVUZrTEVOQlFXMUNMR0ZCUVc1Q0xFdEJRWEZETEd0RFFVRlpMRU5CUVZvc1JVRkJaU3hwUWtGQlppeERRVUY0UlR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzNFFrRkxWVHRCUVVOU0xGVkJRVWxETEZGQlFWRXNTVUZCV2pzN1FVRkZRU3cwUWtGQlJVTXNUVUZCUml4RlFVRlZReXhGUVVGV0xFTkJRV0VzZFVKQlFXSXNSVUZCYzBNc1dVRkJWenRCUVVNdlEwWXNZMEZCVFVZc2EwSkJRVTQ3UVVGRFJDeFBRVVpFTzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBRN08wRkJSVVE3T3pzN096czdPM2xEUVV0eFFqdEJRVU51UWl4VlFVRkpTeXhUUVVGS08wRkJRVUVzVlVGQlpVZ3NVVUZCVVN4SlFVRjJRanRCUVVOQk8wRkJRMEZLTEhWQ1FVRkZVU3hKUVVGR0xFTkJRVThzUzBGQlMzWkNMRXRCUVZvc1JVRkJiVUlzVlVGQlUzZENMRWRCUVZRc1JVRkJZenRCUVVNdlFpeFpRVUZKYWtJc01rSkJRVmRyUWl4UFFVRllMRU5CUVcxQ1JDeEhRVUZ1UWl4RFFVRktMRVZCUVRaQ08wRkJRek5DUml4elFrRkJXVVVzUjBGQldqdEJRVU5FTzBGQlEwWXNUMEZLUkRzN1FVRk5RVHRCUVVOQkxGVkJRVWtzUTBGQlEwWXNVMEZCVEN4RlFVRm5RanM3UVVGRmFFSTdRVUZEUVN4VlFVRkpMRXRCUVV0dVFpeGhRVUZNTEZsQlFUaENMRXRCUVV0SUxFdEJRVXdzUTBGQlYzTkNMRk5CUVZnc1JVRkJjMEpvUXl4TlFVRjRSQ3hGUVVGblJUczdRVUZGYUVVN1FVRkRRWGxDTEhWQ1FVRkZVU3hKUVVGR0xFTkJRVTl3UXl4WFFVRlFMRVZCUVc5Q0xGVkJRVk54UXl4SFFVRlVMRVZCUVdORkxFdEJRV1FzUlVGQmNVSTdRVUZEZGtOUUxHTkJRVTF3UWl4UlFVRk9MRU5CUVdVMFFpeFhRVUZtTEVOQlFUSkNSQ3hOUVVGTmNrTXNVVUZCYWtNN1FVRkRSQ3hQUVVaRU96dEJRVWxCTzBGQlEwRXNWMEZCUzFVc1VVRkJUQ3hEUVVGak5rSXNVVUZCWkN4RFFVRjFRaXhMUVVGTE5VSXNTMEZCVEN4RFFVRlhjMElzVTBGQldDeEZRVUZ6UW1wRExGRkJRVGRET3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3hMUVVGTFl5eGhRVUZVTEVWQlFYZENMRXRCUVV0QkxHRkJRVXdzUTBGQmJVSXdRaXhQUVVGdVFqdEJRVU40UWl4WFFVRkxNVUlzWVVGQlRDeEhRVUZ4UWl4SlFVRkpMRXRCUVV0SUxFdEJRVXdzUTBGQlYzTkNMRk5CUVZnc1JVRkJjMEpvUXl4TlFVRXhRaXhEUVVGcFF5eExRVUZMVXl4UlFVRjBReXhGUVVGblJDeEZRVUZvUkN4RFFVRnlRanRCUVVORU96dEJRVVZFT3pzN096czdPeXRDUVVsWE8wRkJRMVFzVjBGQlMwa3NZVUZCVEN4RFFVRnRRakJDTEU5QlFXNUNPMEZCUTBFc05FSkJRVVZVTEUxQlFVWXNSVUZCVlZVc1IwRkJWaXhEUVVGakxHOUNRVUZrTzBGQlEwUTdPenM3UlVGb1NEQkNReXhyUWpzN1FVRnRTRGRDYmtNc1pVRkJaVzlETEZGQlFXWXNSMEZCTUVJc1JVRkJNVUk3TzFGQlJWRndReXhqTEVkQlFVRkJMR01pTENKbWFXeGxJam9pWm05MWJtUmhkR2x2Ymk1eVpYTndiMjV6YVhabFRXVnVkUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXMXdiM0owSUNRZ1puSnZiU0FuYW5GMVpYSjVKenRjYmx4dWFXMXdiM0owSUhzZ1RXVmthV0ZSZFdWeWVTQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtMWxaR2xoVVhWbGNua25PMXh1YVcxd2IzSjBJSHNnUjJWMFdXOUVhV2RwZEhNZ2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVkWFJwYkM1amIzSmxKenRjYm1sdGNHOXlkQ0I3SUZCc2RXZHBiaUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1d2JIVm5hVzRuTzF4dVhHNXBiWEJ2Y25RZ2V5QkVjbTl3Wkc5M2JrMWxiblVnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dVpISnZjR1J2ZDI1TlpXNTFKenRjYm1sdGNHOXlkQ0I3SUVSeWFXeHNaRzkzYmlCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNWtjbWxzYkdSdmQyNG5PMXh1YVcxd2IzSjBJSHNnUVdOamIzSmthVzl1VFdWdWRTQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTVoWTJOdmNtUnBiMjVOWlc1MUp6dGNibHh1YkdWMElFMWxiblZRYkhWbmFXNXpJRDBnZTF4dUlDQmtjbTl3Wkc5M2Jqb2dlMXh1SUNBZ0lHTnpjME5zWVhOek9pQW5aSEp2Y0dSdmQyNG5MRnh1SUNBZ0lIQnNkV2RwYmpvZ1JISnZjR1J2ZDI1TlpXNTFYRzRnSUgwc1hHNGdaSEpwYkd4a2IzZHVPaUI3WEc0Z0lDQWdZM056UTJ4aGMzTTZJQ2RrY21sc2JHUnZkMjRuTEZ4dUlDQWdJSEJzZFdkcGJqb2dSSEpwYkd4a2IzZHVYRzRnSUgwc1hHNGdJR0ZqWTI5eVpHbHZiam9nZTF4dUlDQWdJR056YzBOc1lYTnpPaUFuWVdOamIzSmthVzl1TFcxbGJuVW5MRnh1SUNBZ0lIQnNkV2RwYmpvZ1FXTmpiM0prYVc5dVRXVnVkVnh1SUNCOVhHNTlPMXh1WEc0Z0lDOHZJR2x0Y0c5eWRDQmNJbVp2ZFc1a1lYUnBiMjR1ZFhScGJDNTBjbWxuWjJWeWN5NXFjMXdpTzF4dVhHNWNiaThxS2x4dUlDb2dVbVZ6Y0c5dWMybDJaVTFsYm5VZ2JXOWtkV3hsTGx4dUlDb2dRRzF2WkhWc1pTQm1iM1Z1WkdGMGFXOXVMbkpsYzNCdmJuTnBkbVZOWlc1MVhHNGdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMblJ5YVdkblpYSnpYRzRnS2lCQWNtVnhkV2x5WlhNZ1ptOTFibVJoZEdsdmJpNTFkR2xzTG0xbFpHbGhVWFZsY25sY2JpQXFMMXh1WEc1amJHRnpjeUJTWlhOd2IyNXphWFpsVFdWdWRTQmxlSFJsYm1SeklGQnNkV2RwYmlCN1hHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JR0VnY21WemNHOXVjMmwyWlNCdFpXNTFMbHh1SUNBZ0tpQkFZMnhoYzNOY2JpQWdJQ29nUUc1aGJXVWdVbVZ6Y0c5dWMybDJaVTFsYm5WY2JpQWdJQ29nUUdacGNtVnpJRkpsYzNCdmJuTnBkbVZOWlc1MUkybHVhWFJjYmlBZ0lDb2dRSEJoY21GdElIdHFVWFZsY25sOUlHVnNaVzFsYm5RZ0xTQnFVWFZsY25rZ2IySnFaV04wSUhSdklHMWhhMlVnYVc1MGJ5QmhJR1J5YjNCa2IzZHVJRzFsYm5VdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnVDNabGNuSnBaR1Z6SUhSdklIUm9aU0JrWldaaGRXeDBJSEJzZFdkcGJpQnpaWFIwYVc1bmN5NWNiaUFnSUNvdlhHNGdJRjl6WlhSMWNDaGxiR1Z0Wlc1MExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQ0E5SUNRb1pXeGxiV1Z1ZENrN1hHNGdJQ0FnZEdocGN5NXlkV3hsY3lBOUlIUm9hWE11SkdWc1pXMWxiblF1WkdGMFlTZ25jbVZ6Y0c5dWMybDJaUzF0Wlc1MUp5azdYRzRnSUNBZ2RHaHBjeTVqZFhKeVpXNTBUWEVnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WTNWeWNtVnVkRkJzZFdkcGJpQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NWpiR0Z6YzA1aGJXVWdQU0FuVW1WemNHOXVjMmwyWlUxbGJuVW5PeUF2THlCcFpUa2dZbUZqYXlCamIyMXdZWFJjYmx4dUlDQWdJSFJvYVhNdVgybHVhWFFvS1R0Y2JpQWdJQ0IwYUdsekxsOWxkbVZ1ZEhNb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm1sMGFXRnNhWHBsY3lCMGFHVWdUV1Z1ZFNCaWVTQndZWEp6YVc1bklIUm9aU0JqYkdGemMyVnpJR1p5YjIwZ2RHaGxJQ2RrWVhSaExWSmxjM0J2Ym5OcGRtVk5aVzUxSnlCaGRIUnlhV0oxZEdVZ2IyNGdkR2hsSUdWc1pXMWxiblF1WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMmx1YVhRb0tTQjdYRzVjYmlBZ0lDQk5aV1JwWVZGMVpYSjVMbDlwYm1sMEtDazdYRzRnSUNBZ0x5OGdWR2hsSUdacGNuTjBJSFJwYldVZ1lXNGdTVzUwWlhKamFHRnVaMlVnY0d4MVoybHVJR2x6SUdsdWFYUnBZV3hwZW1Wa0xDQjBhR2x6TG5KMWJHVnpJR2x6SUdOdmJuWmxjblJsWkNCbWNtOXRJR0VnYzNSeWFXNW5JRzltSUZ3aVkyeGhjM05sYzF3aUlIUnZJR0Z1SUc5aWFtVmpkQ0J2WmlCeWRXeGxjMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1eWRXeGxjeUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lHeGxkQ0J5ZFd4bGMxUnlaV1VnUFNCN2ZUdGNibHh1SUNBZ0lDQWdMeThnVUdGeWMyVWdjblZzWlhNZ1puSnZiU0JjSW1Oc1lYTnpaWE5jSWlCd2RXeHNaV1FnWm5KdmJTQmtZWFJoSUdGMGRISnBZblYwWlZ4dUlDQWdJQ0FnYkdWMElISjFiR1Z6SUQwZ2RHaHBjeTV5ZFd4bGN5NXpjR3hwZENnbklDY3BPMXh1WEc0Z0lDQWdJQ0F2THlCSmRHVnlZWFJsSUhSb2NtOTFaMmdnWlhabGNua2djblZzWlNCbWIzVnVaRnh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J5ZFd4bGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjblZzWlNBOUlISjFiR1Z6VzJsZExuTndiR2wwS0NjdEp5azdYRzRnSUNBZ0lDQWdJR3hsZENCeWRXeGxVMmw2WlNBOUlISjFiR1V1YkdWdVozUm9JRDRnTVNBL0lISjFiR1ZiTUYwZ09pQW5jMjFoYkd3bk8xeHVJQ0FnSUNBZ0lDQnNaWFFnY25Wc1pWQnNkV2RwYmlBOUlISjFiR1V1YkdWdVozUm9JRDRnTVNBL0lISjFiR1ZiTVYwZ09pQnlkV3hsV3pCZE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoTlpXNTFVR3gxWjJsdWMxdHlkV3hsVUd4MVoybHVYU0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISjFiR1Z6VkhKbFpWdHlkV3hsVTJsNlpWMGdQU0JOWlc1MVVHeDFaMmx1YzF0eWRXeGxVR3gxWjJsdVhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxuSjFiR1Z6SUQwZ2NuVnNaWE5VY21WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hKQzVwYzBWdGNIUjVUMkpxWldOMEtIUm9hWE11Y25Wc1pYTXBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWphR1ZqYTAxbFpHbGhVWFZsY21sbGN5Z3BPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QkJaR1FnWkdGMFlTMXRkWFJoZEdVZ2MybHVZMlVnWTJocGJHUnlaVzRnYldGNUlHNWxaV1FnYVhRdVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWhkSFJ5S0Nka1lYUmhMVzExZEdGMFpTY3NJQ2gwYUdsekxpUmxiR1Z0Wlc1MExtRjBkSElvSjJSaGRHRXRiWFYwWVhSbEp5a2dmSHdnUjJWMFdXOUVhV2RwZEhNb05pd2dKM0psYzNCdmJuTnBkbVV0YldWdWRTY3BLU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpYTWdaWFpsYm5SeklHWnZjaUIwYUdVZ1RXVnVkUzVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZaWFpsYm5SektDa2dlMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNBa0tIZHBibVJ2ZHlrdWIyNG9KMk5vWVc1blpXUXVlbVl1YldWa2FXRnhkV1Z5ZVNjc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdYM1JvYVhNdVgyTm9aV05yVFdWa2FXRlJkV1Z5YVdWektDazdYRzRnSUNBZ2ZTazdYRzRnSUNBZ0x5OGdKQ2gzYVc1a2IzY3BMbTl1S0NkeVpYTnBlbVV1ZW1ZdVVtVnpjRzl1YzJsMlpVMWxiblVuTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBdkx5QWdJRjkwYUdsekxsOWphR1ZqYTAxbFpHbGhVWFZsY21sbGN5Z3BPMXh1SUNBZ0lDOHZJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTm9aV05yY3lCMGFHVWdZM1Z5Y21WdWRDQnpZM0psWlc0Z2QybGtkR2dnWVdkaGFXNXpkQ0JoZG1GcGJHRmliR1VnYldWa2FXRWdjWFZsY21sbGN5NGdTV1lnZEdobElHMWxaR2xoSUhGMVpYSjVJR2hoY3lCamFHRnVaMlZrTENCaGJtUWdkR2hsSUhCc2RXZHBiaUJ1WldWa1pXUWdhR0Z6SUdOb1lXNW5aV1FzSUhSb1pTQndiSFZuYVc1eklIZHBiR3dnYzNkaGNDQnZkWFF1WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMk5vWldOclRXVmthV0ZSZFdWeWFXVnpLQ2tnZTF4dUlDQWdJSFpoY2lCdFlYUmphR1ZrVFhFc0lGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQXZMeUJKZEdWeVlYUmxJSFJvY205MVoyZ2daV0ZqYUNCeWRXeGxJR0Z1WkNCbWFXNWtJSFJvWlNCc1lYTjBJRzFoZEdOb2FXNW5JSEoxYkdWY2JpQWdJQ0FrTG1WaFkyZ29kR2hwY3k1eWRXeGxjeXdnWm5WdVkzUnBiMjRvYTJWNUtTQjdYRzRnSUNBZ0lDQnBaaUFvVFdWa2FXRlJkV1Z5ZVM1aGRFeGxZWE4wS0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnYldGMFkyaGxaRTF4SUQwZ2EyVjVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnVG04Z2JXRjBZMmcvSUU1dklHUnBZMlZjYmlBZ0lDQnBaaUFvSVcxaGRHTm9aV1JOY1NrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnTHk4Z1VHeDFaMmx1SUdGc2NtVmhaSGtnYVc1cGRHbGhiR2w2WldRL0lGZGxJR2R2YjJSY2JpQWdJQ0JwWmlBb2RHaHBjeTVqZFhKeVpXNTBVR3gxWjJsdUlHbHVjM1JoYm1ObGIyWWdkR2hwY3k1eWRXeGxjMXR0WVhSamFHVmtUWEZkTG5Cc2RXZHBiaWtnY21WMGRYSnVPMXh1WEc0Z0lDQWdMeThnVW1WdGIzWmxJR1Y0YVhOMGFXNW5JSEJzZFdkcGJpMXpjR1ZqYVdacFl5QkRVMU1nWTJ4aGMzTmxjMXh1SUNBZ0lDUXVaV0ZqYUNoTlpXNTFVR3gxWjJsdWN5d2dablZ1WTNScGIyNG9hMlY1TENCMllXeDFaU2tnZTF4dUlDQWdJQ0FnWDNSb2FYTXVKR1ZzWlcxbGJuUXVjbVZ0YjNabFEyeGhjM01vZG1Gc2RXVXVZM056UTJ4aGMzTXBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnUVdSa0lIUm9aU0JEVTFNZ1kyeGhjM01nWm05eUlIUm9aU0J1WlhjZ2NHeDFaMmx1WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1aFpHUkRiR0Z6Y3loMGFHbHpMbkoxYkdWelcyMWhkR05vWldSTmNWMHVZM056UTJ4aGMzTXBPMXh1WEc0Z0lDQWdMeThnUTNKbFlYUmxJR0Z1SUdsdWMzUmhibU5sSUc5bUlIUm9aU0J1WlhjZ2NHeDFaMmx1WEc0Z0lDQWdhV1lnS0hSb2FYTXVZM1Z5Y21WdWRGQnNkV2RwYmlrZ2RHaHBjeTVqZFhKeVpXNTBVR3gxWjJsdUxtUmxjM1J5YjNrb0tUdGNiaUFnSUNCMGFHbHpMbU4xY25KbGJuUlFiSFZuYVc0Z1BTQnVaWGNnZEdocGN5NXlkV3hsYzF0dFlYUmphR1ZrVFhGZExuQnNkV2RwYmloMGFHbHpMaVJsYkdWdFpXNTBMQ0I3ZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1Z6ZEhKdmVYTWdkR2hsSUdsdWMzUmhibU5sSUc5bUlIUm9aU0JqZFhKeVpXNTBJSEJzZFdkcGJpQnZiaUIwYUdseklHVnNaVzFsYm5Rc0lHRnpJSGRsYkd3Z1lYTWdkR2hsSUhkcGJtUnZkeUJ5WlhOcGVtVWdhR0Z1Wkd4bGNpQjBhR0YwSUhOM2FYUmphR1Z6SUhSb1pTQndiSFZuYVc1eklHOTFkQzVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUwxeHVJQ0JmWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0IwYUdsekxtTjFjbkpsYm5SUWJIVm5hVzR1WkdWemRISnZlU2dwTzF4dUlDQWdJQ1FvZDJsdVpHOTNLUzV2Wm1Zb0p5NTZaaTVTWlhOd2IyNXphWFpsVFdWdWRTY3BPMXh1SUNCOVhHNTlYRzVjYmxKbGMzQnZibk5wZG1WTlpXNTFMbVJsWm1GMWJIUnpJRDBnZTMwN1hHNWNibVY0Y0c5eWRDQjdVbVZ6Y0c5dWMybDJaVTFsYm5WOU8xeHVJbDE5XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnUuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUmVzcG9uc2l2ZVRvZ2dsZSA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnknKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDIgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5tb3Rpb24nKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogUmVzcG9uc2l2ZVRvZ2dsZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICovXG5cbnZhciBSZXNwb25zaXZlVG9nZ2xlID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFJlc3BvbnNpdmVUb2dnbGUsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNpdmVUb2dnbGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNpdmVUb2dnbGUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZXNwb25zaXZlVG9nZ2xlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVzcG9uc2l2ZVRvZ2dsZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3BvbnNpdmVUb2dnbGUsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVGFiIEJhci5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBSZXNwb25zaXZlVG9nZ2xlXG4gICAgICogQGZpcmVzIFJlc3BvbnNpdmVUb2dnbGUjaW5pdFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggdGFiIGJhciBmdW5jdGlvbmFsaXR5IHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZWxlbWVudCk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnUmVzcG9uc2l2ZVRvZ2dsZSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLl9pbml0KCk7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgdGFiIGJhciBieSBmaW5kaW5nIHRoZSB0YXJnZXQgZWxlbWVudCwgdG9nZ2xpbmcgZWxlbWVudCwgYW5kIHJ1bm5pbmcgdXBkYXRlKCkuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5NZWRpYVF1ZXJ5Ll9pbml0KCk7XG4gICAgICB2YXIgdGFyZ2V0SUQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtdG9nZ2xlJyk7XG4gICAgICBpZiAoIXRhcmdldElEKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdXIgdGFiIGJhciBuZWVkcyBhbiBJRCBvZiBhIE1lbnUgYXMgdGhlIHZhbHVlIG9mIGRhdGEtdGFiLWJhci4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kdGFyZ2V0TWVudSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnIycgKyB0YXJnZXRJRCk7XG4gICAgICB0aGlzLiR0b2dnbGVyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10b2dnbGVdJykuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldCA9PT0gdGFyZ2V0SUQgfHwgdGFyZ2V0ID09PSBcIlwiO1xuICAgICAgfSk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB0aGlzLiR0YXJnZXRNZW51LmRhdGEoKSk7XG5cbiAgICAgIC8vIElmIHRoZXkgd2VyZSBzZXQsIHBhcnNlIHRoZSBhbmltYXRpb24gY2xhc3Nlc1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMub3B0aW9ucy5hbmltYXRlLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgdGFiIGJhciB0byB3b3JrLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fdXBkYXRlTXFIYW5kbGVyID0gdGhpcy5fdXBkYXRlLmJpbmQodGhpcyk7XG5cbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuXG4gICAgICB0aGlzLiR0b2dnbGVyLm9uKCdjbGljay56Zi5yZXNwb25zaXZlVG9nZ2xlJywgdGhpcy50b2dnbGVNZW51LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgY3VycmVudCBtZWRpYSBxdWVyeSB0byBkZXRlcm1pbmUgaWYgdGhlIHRhYiBiYXIgc2hvdWxkIGJlIHZpc2libGUgb3IgaGlkZGVuLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ191cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKCkge1xuICAgICAgLy8gTW9iaWxlXG4gICAgICBpZiAoIV9mb3VuZGF0aW9uVXRpbC5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdygpO1xuICAgICAgICB0aGlzLiR0YXJnZXRNZW51LmhpZGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVza3RvcFxuICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCk7XG4gICAgICAgICAgdGhpcy4kdGFyZ2V0TWVudS5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyLiBUaGUgdG9nZ2xlIG9ubHkgaGFwcGVucyBpZiB0aGUgc2NyZWVuIGlzIHNtYWxsIGVub3VnaCB0byBhbGxvdyBpdC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZU1lbnUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICghX2ZvdW5kYXRpb25VdGlsLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIgdG9nZ2xlcy5cbiAgICAgICAgICogQGV2ZW50IFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuJHRhcmdldE1lbnUuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgICAgX2ZvdW5kYXRpb25VdGlsMi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJHRhcmdldE1lbnUsIHRoaXMuYW5pbWF0aW9uSW4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLiRlbGVtZW50LnRyaWdnZXIoJ3RvZ2dsZWQuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgICAgICAgICAgICBfdGhpczMuJHRhcmdldE1lbnUuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2ZvdW5kYXRpb25VdGlsMi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiR0YXJnZXRNZW51LCB0aGlzLmFuaW1hdGlvbk91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy4kdGFyZ2V0TWVudS50b2dnbGUoMCk7XG4gICAgICAgICAgdGhpcy4kdGFyZ2V0TWVudS5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95KCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICB0aGlzLiR0b2dnbGVyLm9mZignLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcblxuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXNwb25zaXZlVG9nZ2xlO1xufShfZm91bmRhdGlvbi5QbHVnaW4pO1xuXG5SZXNwb25zaXZlVG9nZ2xlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGhlIGJyZWFrcG9pbnQgYWZ0ZXIgd2hpY2ggdGhlIG1lbnUgaXMgYWx3YXlzIHNob3duLCBhbmQgdGhlIHRhYiBiYXIgaXMgaGlkZGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBoaWRlRm9yOiAnbWVkaXVtJyxcblxuICAvKipcbiAgICogVG8gZGVjaWRlIGlmIHRoZSB0b2dnbGUgc2hvdWxkIGJlIGFuaW1hdGVkIG9yIG5vdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFuaW1hdGU6IGZhbHNlXG59O1xuXG5leHBvcnRzLlJlc3BvbnNpdmVUb2dnbGUgPSBSZXNwb25zaXZlVG9nZ2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWNtVnpjRzl1YzJsMlpWUnZaMmRzWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpTWlhOd2IyNXphWFpsVkc5bloyeGxJaXdpWld4bGJXVnVkQ0lzSW05d2RHbHZibk1pTENJa1pXeGxiV1Z1ZENJc0lpUWlMQ0psZUhSbGJtUWlMQ0prWldaaGRXeDBjeUlzSW1SaGRHRWlMQ0pqYkdGemMwNWhiV1VpTENKZmFXNXBkQ0lzSWw5bGRtVnVkSE1pTENKTlpXUnBZVkYxWlhKNUlpd2lkR0Z5WjJWMFNVUWlMQ0pqYjI1emIyeGxJaXdpWlhKeWIzSWlMQ0lrZEdGeVoyVjBUV1Z1ZFNJc0lpUjBiMmRuYkdWeUlpd2labWx1WkNJc0ltWnBiSFJsY2lJc0luUmhjbWRsZENJc0ltRnVhVzFoZEdVaUxDSnBibkIxZENJc0luTndiR2wwSWl3aVlXNXBiV0YwYVc5dVNXNGlMQ0poYm1sdFlYUnBiMjVQZFhRaUxDSmZkWEJrWVhSbElpd2lYM1JvYVhNaUxDSmZkWEJrWVhSbFRYRklZVzVrYkdWeUlpd2lZbWx1WkNJc0luZHBibVJ2ZHlJc0ltOXVJaXdpZEc5bloyeGxUV1Z1ZFNJc0ltRjBUR1ZoYzNRaUxDSm9hV1JsUm05eUlpd2ljMmh2ZHlJc0ltaHBaR1VpTENKcGN5SXNJazF2ZEdsdmJpSXNJbUZ1YVcxaGRHVkpiaUlzSW5SeWFXZG5aWElpTENKMGNtbG5aMlZ5U0dGdVpHeGxjaUlzSW1GdWFXMWhkR1ZQZFhRaUxDSjBiMmRuYkdVaUxDSnZabVlpTENKUWJIVm5hVzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPenM3UVVGRlFUczdPenRCUVVWQk96dEJRVU5CT3p0QlFVTkJPenM3T3pzN096czdPMEZCUlVFN096czdPenM3U1VGUFRVRXNaMEk3T3pzN096czdPenM3T3p0QlFVTktPenM3T3pzN096c3lRa0ZSVDBNc1R5eEZRVUZUUXl4UExFVkJRVk03UVVGRGRrSXNWMEZCUzBNc1VVRkJUQ3hIUVVGblFpeHpRa0ZCUlVZc1QwRkJSaXhEUVVGb1FqdEJRVU5CTEZkQlFVdERMRTlCUVV3c1IwRkJaVVVzYVVKQlFVVkRMRTFCUVVZc1EwRkJVeXhGUVVGVUxFVkJRV0ZNTEdsQ1FVRnBRazBzVVVGQk9VSXNSVUZCZDBNc1MwRkJTMGdzVVVGQlRDeERRVUZqU1N4SlFVRmtMRVZCUVhoRExFVkJRVGhFVEN4UFFVRTVSQ3hEUVVGbU8wRkJRMEVzVjBGQlMwMHNVMEZCVEN4SFFVRnBRaXhyUWtGQmFrSXNRMEZJZFVJc1EwRkhZenM3UVVGRmNrTXNWMEZCUzBNc1MwRkJURHRCUVVOQkxGZEJRVXRETEU5QlFVdzdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdORUpCUzFFN1FVRkRUa01zYVVOQlFWZEdMRXRCUVZnN1FVRkRRU3hWUVVGSlJ5eFhRVUZYTEV0QlFVdFVMRkZCUVV3c1EwRkJZMGtzU1VGQlpDeERRVUZ0UWl4dFFrRkJia0lzUTBGQlpqdEJRVU5CTEZWQlFVa3NRMEZCUTBzc1VVRkJUQ3hGUVVGbE8wRkJRMkpETEdkQ1FVRlJReXhMUVVGU0xFTkJRV01zYTBWQlFXUTdRVUZEUkRzN1FVRkZSQ3hYUVVGTFF5eFhRVUZNTEVkQlFXMUNMRFJDUVVGTlNDeFJRVUZPTEVOQlFXNUNPMEZCUTBFc1YwRkJTMGtzVVVGQlRDeEhRVUZuUWl4TFFVRkxZaXhSUVVGTUxFTkJRV05qTEVsQlFXUXNRMEZCYlVJc1pVRkJia0lzUlVGQmIwTkRMRTFCUVhCRExFTkJRVEpETEZsQlFWYzdRVUZEY0VVc1dVRkJTVU1zVTBGQlV5eHpRa0ZCUlN4SlFVRkdMRVZCUVZGYUxFbEJRVklzUTBGQllTeFJRVUZpTEVOQlFXSTdRVUZEUVN4bFFVRlJXU3hYUVVGWFVDeFJRVUZZTEVsQlFYVkNUeXhYUVVGWExFVkJRVEZETzBGQlEwUXNUMEZJWlN4RFFVRm9RanRCUVVsQkxGZEJRVXRxUWl4UFFVRk1MRWRCUVdWRkxHbENRVUZGUXl4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaExFdEJRVXRJTEU5QlFXeENMRVZCUVRKQ0xFdEJRVXRoTEZkQlFVd3NRMEZCYVVKU0xFbEJRV3BDTEVWQlFUTkNMRU5CUVdZN08wRkJSVUU3UVVGRFFTeFZRVUZITEV0QlFVdE1MRTlCUVV3c1EwRkJZV3RDTEU5QlFXaENMRVZCUVhsQ08wRkJRM1pDTEZsQlFVbERMRkZCUVZFc1MwRkJTMjVDTEU5QlFVd3NRMEZCWVd0Q0xFOUJRV0lzUTBGQmNVSkZMRXRCUVhKQ0xFTkJRVEpDTEVkQlFUTkNMRU5CUVZvN08wRkJSVUVzWVVGQlMwTXNWMEZCVEN4SFFVRnRRa1lzVFVGQlRTeERRVUZPTEVOQlFXNUNPMEZCUTBFc1lVRkJTMGNzV1VGQlRDeEhRVUZ2UWtnc1RVRkJUU3hEUVVGT0xFdEJRVmtzU1VGQmFFTTdRVUZEUkRzN1FVRkZSQ3hYUVVGTFNTeFBRVUZNTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3poQ1FVdFZPMEZCUTFJc1ZVRkJTVU1zVVVGQlVTeEpRVUZhT3p0QlFVVkJMRmRCUVV0RExHZENRVUZNTEVkQlFYZENMRXRCUVV0R0xFOUJRVXdzUTBGQllVY3NTVUZCWWl4RFFVRnJRaXhKUVVGc1FpeERRVUY0UWpzN1FVRkZRU3cwUWtGQlJVTXNUVUZCUml4RlFVRlZReXhGUVVGV0xFTkJRV0VzZFVKQlFXSXNSVUZCYzBNc1MwRkJTMGdzWjBKQlFUTkRPenRCUVVWQkxGZEJRVXRZTEZGQlFVd3NRMEZCWTJNc1JVRkJaQ3hEUVVGcFFpd3lRa0ZCYWtJc1JVRkJPRU1zUzBGQlMwTXNWVUZCVEN4RFFVRm5Ra2dzU1VGQmFFSXNRMEZCY1VJc1NVRkJja0lzUTBGQk9VTTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPRUpCUzFVN1FVRkRVanRCUVVOQkxGVkJRVWtzUTBGQlEycENMREpDUVVGWGNVSXNUMEZCV0N4RFFVRnRRaXhMUVVGTE9VSXNUMEZCVEN4RFFVRmhLMElzVDBGQmFFTXNRMEZCVEN4RlFVRXJRenRCUVVNM1F5eGhRVUZMT1VJc1VVRkJUQ3hEUVVGakswSXNTVUZCWkR0QlFVTkJMR0ZCUVV0dVFpeFhRVUZNTEVOQlFXbENiMElzU1VGQmFrSTdRVUZEUkRzN1FVRkZSRHRCUVV4QkxGZEJUVXM3UVVGRFNDeGxRVUZMYUVNc1VVRkJUQ3hEUVVGalowTXNTVUZCWkR0QlFVTkJMR1ZCUVV0d1FpeFhRVUZNTEVOQlFXbENiVUlzU1VGQmFrSTdRVUZEUkR0QlFVTkdPenRCUVVWRU96czdPenM3T3p0cFEwRkxZVHRCUVVGQk96dEJRVU5ZTEZWQlFVa3NRMEZCUTNaQ0xESkNRVUZYY1VJc1QwRkJXQ3hEUVVGdFFpeExRVUZMT1VJc1QwRkJUQ3hEUVVGaEswSXNUMEZCYUVNc1EwRkJUQ3hGUVVFclF6dEJRVU0zUXpzN096dEJRVWxCTEZsQlFVY3NTMEZCU3k5Q0xFOUJRVXdzUTBGQllXdENMRTlCUVdoQ0xFVkJRWGxDTzBGQlEzWkNMR05CUVVrc1MwRkJTMHdzVjBGQlRDeERRVUZwUW5GQ0xFVkJRV3BDTEVOQlFXOUNMRk5CUVhCQ0xFTkJRVW9zUlVGQmIwTTdRVUZEYkVORExHOURRVUZQUXl4VFFVRlFMRU5CUVdsQ0xFdEJRVXQyUWl4WFFVRjBRaXhGUVVGdFF5eExRVUZMVVN4WFFVRjRReXhGUVVGeFJDeFpRVUZOTzBGQlEzcEVMSEZDUVVGTGNFSXNVVUZCVEN4RFFVRmpiME1zVDBGQlpDeERRVUZ6UWl3MlFrRkJkRUk3UVVGRFFTeHhRa0ZCUzNoQ0xGZEJRVXdzUTBGQmFVSkZMRWxCUVdwQ0xFTkJRWE5DTEdWQlFYUkNMRVZCUVhWRGRVSXNZMEZCZGtNc1EwRkJjMFFzY1VKQlFYUkVPMEZCUTBRc1lVRklSRHRCUVVsRUxGZEJURVFzVFVGTlN6dEJRVU5JU0N4dlEwRkJUMGtzVlVGQlVDeERRVUZyUWl4TFFVRkxNVUlzVjBGQmRrSXNSVUZCYjBNc1MwRkJTMU1zV1VGQmVrTXNSVUZCZFVRc1dVRkJUVHRCUVVNelJDeHhRa0ZCUzNKQ0xGRkJRVXdzUTBGQlkyOURMRTlCUVdRc1EwRkJjMElzTmtKQlFYUkNPMEZCUTBRc1lVRkdSRHRCUVVkRU8wRkJRMFlzVTBGYVJDeE5RV0ZMTzBGQlEwZ3NaVUZCUzNoQ0xGZEJRVXdzUTBGQmFVSXlRaXhOUVVGcVFpeERRVUYzUWl4RFFVRjRRanRCUVVOQkxHVkJRVXN6UWl4WFFVRk1MRU5CUVdsQ1JTeEpRVUZxUWl4RFFVRnpRaXhsUVVGMFFpeEZRVUYxUTNOQ0xFOUJRWFpETEVOQlFTdERMSEZDUVVFdlF6dEJRVU5CTEdWQlFVdHdReXhSUVVGTUxFTkJRV052UXl4UFFVRmtMRU5CUVhOQ0xEWkNRVUYwUWp0QlFVTkVPMEZCUTBZN1FVRkRSanM3T3l0Q1FVVlZPMEZCUTFRc1YwRkJTM0JETEZGQlFVd3NRMEZCWTNkRExFZEJRV1FzUTBGQmEwSXNjMEpCUVd4Q08wRkJRMEVzVjBGQlN6TkNMRkZCUVV3c1EwRkJZekpDTEVkQlFXUXNRMEZCYTBJc2MwSkJRV3hDT3p0QlFVVkJMRFJDUVVGRlpDeE5RVUZHTEVWQlFWVmpMRWRCUVZZc1EwRkJZeXgxUWtGQlpDeEZRVUYxUXl4TFFVRkxhRUlzWjBKQlFUVkRPMEZCUTBRN096czdSVUYyU0RSQ2FVSXNhMEk3TzBGQk1FZ3ZRalZETEdsQ1FVRnBRazBzVVVGQmFrSXNSMEZCTkVJN1FVRkRNVUk3T3pzN096dEJRVTFCTWtJc1YwRkJVeXhSUVZCcFFqczdRVUZUTVVJN096czdPenRCUVUxQllpeFhRVUZUTzBGQlptbENMRU5CUVRWQ096dFJRV3RDVTNCQ0xHZENMRWRCUVVGQkxHZENJaXdpWm1sc1pTSTZJbVp2ZFc1a1lYUnBiMjR1Y21WemNHOXVjMmwyWlZSdloyZHNaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXMXdiM0owSUNRZ1puSnZiU0FuYW5GMVpYSjVKenRjYmx4dWFXMXdiM0owSUhzZ1RXVmthV0ZSZFdWeWVTQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtMWxaR2xoVVhWbGNua25PMXh1YVcxd2IzSjBJSHNnVFc5MGFXOXVJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5WMGFXd3ViVzkwYVc5dUp6dGNibWx0Y0c5eWRDQjdJRkJzZFdkcGJpQjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTV3YkhWbmFXNG5PMXh1WEc0dktpcGNiaUFxSUZKbGMzQnZibk5wZG1WVWIyZG5iR1VnYlc5a2RXeGxMbHh1SUNvZ1FHMXZaSFZzWlNCbWIzVnVaR0YwYVc5dUxuSmxjM0J2Ym5OcGRtVlViMmRuYkdWY2JpQXFJRUJ5WlhGMWFYSmxjeUJtYjNWdVpHRjBhVzl1TG5WMGFXd3ViV1ZrYVdGUmRXVnllVnh1SUNvZ1FISmxjWFZwY21WeklHWnZkVzVrWVhScGIyNHVkWFJwYkM1dGIzUnBiMjVjYmlBcUwxeHVYRzVqYkdGemN5QlNaWE53YjI1emFYWmxWRzluWjJ4bElHVjRkR1Z1WkhNZ1VHeDFaMmx1SUh0Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpYTWdZU0J1WlhjZ2FXNXpkR0Z1WTJVZ2IyWWdWR0ZpSUVKaGNpNWNiaUFnSUNvZ1FHTnNZWE56WEc0Z0lDQXFJRUJ1WVcxbElGSmxjM0J2Ym5OcGRtVlViMmRuYkdWY2JpQWdJQ29nUUdacGNtVnpJRkpsYzNCdmJuTnBkbVZVYjJkbmJHVWphVzVwZEZ4dUlDQWdLaUJBY0dGeVlXMGdlMnBSZFdWeWVYMGdaV3hsYldWdWRDQXRJR3BSZFdWeWVTQnZZbXBsWTNRZ2RHOGdZWFIwWVdOb0lIUmhZaUJpWVhJZ1puVnVZM1JwYjI1aGJHbDBlU0IwYnk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JQZG1WeWNtbGtaWE1nZEc4Z2RHaGxJR1JsWm1GMWJIUWdjR3gxWjJsdUlITmxkSFJwYm1kekxseHVJQ0FnS2k5Y2JpQWdYM05sZEhWd0tHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBJRDBnSkNobGJHVnRaVzUwS1R0Y2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQWtMbVY0ZEdWdVpDaDdmU3dnVW1WemNHOXVjMmwyWlZSdloyZHNaUzVrWldaaGRXeDBjeXdnZEdocGN5NGtaV3hsYldWdWRDNWtZWFJoS0Nrc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUhSb2FYTXVZMnhoYzNOT1lXMWxJRDBnSjFKbGMzQnZibk5wZG1WVWIyZG5iR1VuT3lBdkx5QnBaVGtnWW1GamF5QmpiMjF3WVhSY2JseHVJQ0FnSUhSb2FYTXVYMmx1YVhRb0tUdGNiaUFnSUNCMGFHbHpMbDlsZG1WdWRITW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJtbDBhV0ZzYVhwbGN5QjBhR1VnZEdGaUlHSmhjaUJpZVNCbWFXNWthVzVuSUhSb1pTQjBZWEpuWlhRZ1pXeGxiV1Z1ZEN3Z2RHOW5aMnhwYm1jZ1pXeGxiV1Z1ZEN3Z1lXNWtJSEoxYm01cGJtY2dkWEJrWVhSbEtDa3VYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gybHVhWFFvS1NCN1hHNGdJQ0FnVFdWa2FXRlJkV1Z5ZVM1ZmFXNXBkQ2dwTzF4dUlDQWdJSFpoY2lCMFlYSm5aWFJKUkNBOUlIUm9hWE11SkdWc1pXMWxiblF1WkdGMFlTZ25jbVZ6Y0c5dWMybDJaUzEwYjJkbmJHVW5LVHRjYmlBZ0lDQnBaaUFvSVhSaGNtZGxkRWxFS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RaYjNWeUlIUmhZaUJpWVhJZ2JtVmxaSE1nWVc0Z1NVUWdiMllnWVNCTlpXNTFJR0Z6SUhSb1pTQjJZV3gxWlNCdlppQmtZWFJoTFhSaFlpMWlZWEl1SnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NGtkR0Z5WjJWMFRXVnVkU0E5SUNRb1lDTWtlM1JoY21kbGRFbEVmV0FwTzF4dUlDQWdJSFJvYVhNdUpIUnZaMmRzWlhJZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1acGJtUW9KMXRrWVhSaExYUnZaMmRzWlYwbktTNW1hV3gwWlhJb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnZEdGeVoyVjBJRDBnSkNoMGFHbHpLUzVrWVhSaEtDZDBiMmRuYkdVbktUdGNiaUFnSUNBZ0lISmxkSFZ5YmlBb2RHRnlaMlYwSUQwOVBTQjBZWEpuWlhSSlJDQjhmQ0IwWVhKblpYUWdQVDA5SUZ3aVhDSXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUNRdVpYaDBaVzVrS0h0OUxDQjBhR2x6TG05d2RHbHZibk1zSUhSb2FYTXVKSFJoY21kbGRFMWxiblV1WkdGMFlTZ3BLVHRjYmx4dUlDQWdJQzh2SUVsbUlIUm9aWGtnZDJWeVpTQnpaWFFzSUhCaGNuTmxJSFJvWlNCaGJtbHRZWFJwYjI0Z1kyeGhjM05sYzF4dUlDQWdJR2xtS0hSb2FYTXViM0IwYVc5dWN5NWhibWx0WVhSbEtTQjdYRzRnSUNBZ0lDQnNaWFFnYVc1d2RYUWdQU0IwYUdsekxtOXdkR2x2Ym5NdVlXNXBiV0YwWlM1emNHeHBkQ2duSUNjcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TG1GdWFXMWhkR2x2YmtsdUlEMGdhVzV3ZFhSYk1GMDdYRzRnSUNBZ0lDQjBhR2x6TG1GdWFXMWhkR2x2Yms5MWRDQTlJR2x1Y0hWMFd6RmRJSHg4SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVmZFhCa1lYUmxLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXUmtjeUJ1WldObGMzTmhjbmtnWlhabGJuUWdhR0Z1Wkd4bGNuTWdabTl5SUhSb1pTQjBZV0lnWW1GeUlIUnZJSGR2Y21zdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJWMlpXNTBjeWdwSUh0Y2JpQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdkR2hwY3k1ZmRYQmtZWFJsVFhGSVlXNWtiR1Z5SUQwZ2RHaHBjeTVmZFhCa1lYUmxMbUpwYm1Rb2RHaHBjeWs3WEc1Y2JpQWdJQ0FrS0hkcGJtUnZkeWt1YjI0b0oyTm9ZVzVuWldRdWVtWXViV1ZrYVdGeGRXVnllU2NzSUhSb2FYTXVYM1Z3WkdGMFpVMXhTR0Z1Wkd4bGNpazdYRzVjYmlBZ0lDQjBhR2x6TGlSMGIyZG5iR1Z5TG05dUtDZGpiR2xqYXk1NlppNXlaWE53YjI1emFYWmxWRzluWjJ4bEp5d2dkR2hwY3k1MGIyZG5iR1ZOWlc1MUxtSnBibVFvZEdocGN5a3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOb1pXTnJjeUIwYUdVZ1kzVnljbVZ1ZENCdFpXUnBZU0J4ZFdWeWVTQjBieUJrWlhSbGNtMXBibVVnYVdZZ2RHaGxJSFJoWWlCaVlYSWdjMmh2ZFd4a0lHSmxJSFpwYzJsaWJHVWdiM0lnYUdsa1pHVnVMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOTFjR1JoZEdVb0tTQjdYRzRnSUNBZ0x5OGdUVzlpYVd4bFhHNGdJQ0FnYVdZZ0tDRk5aV1JwWVZGMVpYSjVMbUYwVEdWaGMzUW9kR2hwY3k1dmNIUnBiMjV6TG1ocFpHVkdiM0lwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbk5vYjNjb0tUdGNiaUFnSUNBZ0lIUm9hWE11SkhSaGNtZGxkRTFsYm5VdWFHbGtaU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVSbGMydDBiM0JjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVhR2xrWlNncE8xeHVJQ0FnSUNBZ2RHaHBjeTRrZEdGeVoyVjBUV1Z1ZFM1emFHOTNLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSdloyZHNaWE1nZEdobElHVnNaVzFsYm5RZ1lYUjBZV05vWldRZ2RHOGdkR2hsSUhSaFlpQmlZWEl1SUZSb1pTQjBiMmRuYkdVZ2IyNXNlU0JvWVhCd1pXNXpJR2xtSUhSb1pTQnpZM0psWlc0Z2FYTWdjMjFoYkd3Z1pXNXZkV2RvSUhSdklHRnNiRzkzSUdsMExseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUdacGNtVnpJRkpsYzNCdmJuTnBkbVZVYjJkbmJHVWpkRzluWjJ4bFpGeHVJQ0FnS2k5Y2JpQWdkRzluWjJ4bFRXVnVkU2dwSUh0Y2JpQWdJQ0JwWmlBb0lVMWxaR2xoVVhWbGNua3VZWFJNWldGemRDaDBhR2x6TG05d2RHbHZibk11YUdsa1pVWnZjaWtwSUh0Y2JpQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDb2dSbWx5WlhNZ2QyaGxiaUIwYUdVZ1pXeGxiV1Z1ZENCaGRIUmhZMmhsWkNCMGJ5QjBhR1VnZEdGaUlHSmhjaUIwYjJkbmJHVnpMbHh1SUNBZ0lDQWdJQ29nUUdWMlpXNTBJRkpsYzNCdmJuTnBkbVZVYjJkbmJHVWpkRzluWjJ4bFpGeHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQnBaaWgwYUdsekxtOXdkR2x2Ym5NdVlXNXBiV0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NGtkR0Z5WjJWMFRXVnVkUzVwY3lnbk9taHBaR1JsYmljcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnVFc5MGFXOXVMbUZ1YVcxaGRHVkpiaWgwYUdsekxpUjBZWEpuWlhSTlpXNTFMQ0IwYUdsekxtRnVhVzFoZEdsdmJrbHVMQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KM1J2WjJkc1pXUXVlbVl1Y21WemNHOXVjMmwyWlZSdloyZHNaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k0a2RHRnlaMlYwVFdWdWRTNW1hVzVrS0NkYlpHRjBZUzF0ZFhSaGRHVmRKeWt1ZEhKcFoyZGxja2hoYm1Sc1pYSW9KMjExZEdGMFpXMWxMbnBtTG5SeWFXZG5aWEluS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCTmIzUnBiMjR1WVc1cGJXRjBaVTkxZENoMGFHbHpMaVIwWVhKblpYUk5aVzUxTENCMGFHbHpMbUZ1YVcxaGRHbHZiazkxZEN3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1MGNtbG5aMlZ5S0NkMGIyZG5iR1ZrTG5wbUxuSmxjM0J2Ym5OcGRtVlViMmRuYkdVbktUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKSFJoY21kbGRFMWxiblV1ZEc5bloyeGxLREFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMaVIwWVhKblpYUk5aVzUxTG1acGJtUW9KMXRrWVhSaExXMTFkR0YwWlYwbktTNTBjbWxuWjJWeUtDZHRkWFJoZEdWdFpTNTZaaTUwY21sbloyVnlKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25kRzluWjJ4bFpDNTZaaTV5WlhOd2IyNXphWFpsVkc5bloyeGxKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUY5a1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXViMlptS0NjdWVtWXVjbVZ6Y0c5dWMybDJaVlJ2WjJkc1pTY3BPMXh1SUNBZ0lIUm9hWE11SkhSdloyZHNaWEl1YjJabUtDY3VlbVl1Y21WemNHOXVjMmwyWlZSdloyZHNaU2NwTzF4dVhHNGdJQ0FnSkNoM2FXNWtiM2NwTG05bVppZ25ZMmhoYm1kbFpDNTZaaTV0WldScFlYRjFaWEo1Snl3Z2RHaHBjeTVmZFhCa1lYUmxUWEZJWVc1a2JHVnlLVHRjYmlBZ2ZWeHVmVnh1WEc1U1pYTndiMjV6YVhabFZHOW5aMnhsTG1SbFptRjFiSFJ6SUQwZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElHSnlaV0ZyY0c5cGJuUWdZV1owWlhJZ2QyaHBZMmdnZEdobElHMWxiblVnYVhNZ1lXeDNZWGx6SUhOb2IzZHVMQ0JoYm1RZ2RHaGxJSFJoWWlCaVlYSWdhWE1nYUdsa1pHVnVMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYRzRnSUNBcUlFQmtaV1poZFd4MElDZHRaV1JwZFcwblhHNGdJQ0FxTDF4dUlDQm9hV1JsUm05eU9pQW5iV1ZrYVhWdEp5eGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZHOGdaR1ZqYVdSbElHbG1JSFJvWlNCMGIyZG5iR1VnYzJodmRXeGtJR0psSUdGdWFXMWhkR1ZrSUc5eUlHNXZkQzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ292WEc0Z0lHRnVhVzFoZEdVNklHWmhiSE5sWEc1OU8xeHVYRzVsZUhCdmNuUWdleUJTWlhOd2IyNXphWFpsVkc5bloyeGxJSDA3WEc0aVhYMD1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJldmVhbCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmtleWJvYXJkJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMyA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLm1vdGlvbicpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWw0ID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFJldmVhbCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmV2ZWFsXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uIGlmIHVzaW5nIGFuaW1hdGlvbnNcbiAqL1xuXG52YXIgUmV2ZWFsID0gZnVuY3Rpb24gKF9QbHVnaW4pIHtcbiAgX2luaGVyaXRzKFJldmVhbCwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gUmV2ZWFsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXZlYWwpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZXZlYWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZXZlYWwpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXZlYWwsIFt7XG4gICAga2V5OiAnX3NldHVwJyxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmV2ZWFsLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFJldmVhbFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byB1c2UgZm9yIHRoZSBtb2RhbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbmFsIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKHt9LCBSZXZlYWwuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1JldmVhbCc7IC8vIGllOSBiYWNrIGNvbXBhdFxuICAgICAgdGhpcy5faW5pdCgpO1xuXG4gICAgICAvLyBUcmlnZ2VycyBpbml0IGlzIGlkZW1wb3RlbnQsIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgIF9mb3VuZGF0aW9uVXRpbDQuVHJpZ2dlcnMuaW5pdChfanF1ZXJ5Mi5kZWZhdWx0KTtcblxuICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLnJlZ2lzdGVyKCdSZXZlYWwnLCB7XG4gICAgICAgICdFU0NBUEUnOiAnY2xvc2UnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgbW9kYWwgYnkgYWRkaW5nIHRoZSBvdmVybGF5IGFuZCBjbG9zZSBidXR0b25zLCAoaWYgc2VsZWN0ZWQpLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfZm91bmRhdGlvblV0aWwyLk1lZGlhUXVlcnkuX2luaXQoKTtcbiAgICAgIHRoaXMuaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLmNhY2hlZCA9IHsgbXE6IF9mb3VuZGF0aW9uVXRpbDIuTWVkaWFRdWVyeS5jdXJyZW50IH07XG5cbiAgICAgIHRoaXMuJGFuY2hvciA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtb3Blbj1cIicgKyB0aGlzLmlkICsgJ1wiXScpLmxlbmd0aCA/ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtb3Blbj1cIicgKyB0aGlzLmlkICsgJ1wiXScpIDogKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdbZGF0YS10b2dnbGU9XCInICsgdGhpcy5pZCArICdcIl0nKTtcbiAgICAgIHRoaXMuJGFuY2hvci5hdHRyKHtcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiB0aGlzLmlkLFxuICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICd0YWJpbmRleCc6IDBcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4gfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZnVsbCcpKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm92ZXJsYXkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiAhdGhpcy4kb3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5ID0gdGhpcy5fbWFrZU92ZXJsYXkodGhpcy5pZCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ2RpYWxvZycsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogdGhpcy5pZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogdGhpcy5pZFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLiRvdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuZGV0YWNoKCkuYXBwZW5kVG8odGhpcy4kb3ZlcmxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzLm9wdGlvbnMuYXBwZW5kVG8pKTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnd2l0aG91dC1vdmVybGF5Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmsgJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICcjJyArIHRoaXMuaWQpIHtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub25lKCdsb2FkLnpmLnJldmVhbCcsIHRoaXMub3Blbi5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG92ZXJsYXkgZGl2IHRvIGRpc3BsYXkgYmVoaW5kIHRoZSBtb2RhbC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfbWFrZU92ZXJsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZU92ZXJsYXkoKSB7XG4gICAgICB2YXIgYWRkaXRpb25hbE92ZXJsYXlDbGFzc2VzID0gJyc7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWRkaXRpb25hbE92ZXJsYXlDbGFzc2VzKSB7XG4gICAgICAgIGFkZGl0aW9uYWxPdmVybGF5Q2xhc3NlcyA9ICcgJyArIHRoaXMub3B0aW9ucy5hZGRpdGlvbmFsT3ZlcmxheUNsYXNzZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ3JldmVhbC1vdmVybGF5JyArIGFkZGl0aW9uYWxPdmVybGF5Q2xhc3NlcykuYXBwZW5kVG8odGhpcy5vcHRpb25zLmFwcGVuZFRvKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHBvc2l0aW9uIG9mIG1vZGFsXG4gICAgICogVE9ETzogIEZpZ3VyZSBvdXQgaWYgd2UgYWN0dWFsbHkgbmVlZCB0byBjYWNoZSB0aGVzZSB2YWx1ZXMgb3IgaWYgaXQgZG9lc24ndCBtYXR0ZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdXBkYXRlUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLiRlbGVtZW50Lm91dGVyV2lkdGgoKTtcbiAgICAgIHZhciBvdXRlcldpZHRoID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykud2lkdGgoKTtcbiAgICAgIHZhciBoZWlnaHQgPSB0aGlzLiRlbGVtZW50Lm91dGVySGVpZ2h0KCk7XG4gICAgICB2YXIgb3V0ZXJIZWlnaHQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5oZWlnaHQoKTtcbiAgICAgIHZhciBsZWZ0LFxuICAgICAgICAgIHRvcCA9IG51bGw7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmhPZmZzZXQgPT09ICdhdXRvJykge1xuICAgICAgICBsZWZ0ID0gcGFyc2VJbnQoKG91dGVyV2lkdGggLSB3aWR0aCkgLyAyLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWZ0ID0gcGFyc2VJbnQodGhpcy5vcHRpb25zLmhPZmZzZXQsIDEwKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudk9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGlmIChoZWlnaHQgPiBvdXRlckhlaWdodCkge1xuICAgICAgICAgIHRvcCA9IHBhcnNlSW50KE1hdGgubWluKDEwMCwgb3V0ZXJIZWlnaHQgLyAxMCksIDEwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3AgPSBwYXJzZUludCgob3V0ZXJIZWlnaHQgLSBoZWlnaHQpIC8gNCwgMTApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy52T2Zmc2V0ICE9PSBudWxsKSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy52T2Zmc2V0LCAxMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b3AgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyB0b3A6IHRvcCArICdweCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIG9ubHkgd29ycnkgYWJvdXQgbGVmdCBpZiB3ZSBkb24ndCBoYXZlIGFuIG92ZXJsYXkgb3Igd2UgaGF2ZSBhIGhvcml6b250YWwgb2Zmc2V0LFxuICAgICAgLy8gb3RoZXJ3aXNlIHdlJ3JlIHBlcmZlY3RseSBpbiB0aGUgbWlkZGxlXG4gICAgICBpZiAoIXRoaXMuJG92ZXJsYXkgfHwgdGhpcy5vcHRpb25zLmhPZmZzZXQgIT09ICdhdXRvJykge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcyh7IGxlZnQ6IGxlZnQgKyAncHgnIH0pO1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcyh7IG1hcmdpbjogJzBweCcgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgdGhlIG1vZGFsLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgICAnb3Blbi56Zi50cmlnZ2VyJzogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogZnVuY3Rpb24gY2xvc2VaZlRyaWdnZXIoZXZlbnQsICRlbGVtZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGV2ZW50LnRhcmdldCkucGFyZW50cygnW2RhdGEtY2xvc2FibGVdJylbMF0gPT09ICRlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBvbmx5IGNsb3NlIHJldmVhbCB3aGVuIGl0J3MgZXhwbGljaXRseSBjYWxsZWRcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuY2xvc2UuYXBwbHkoX3RoaXMzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogZnVuY3Rpb24gcmVzaXplbWVaZlRyaWdnZXIoKSB7XG4gICAgICAgICAgX3RoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiB0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5Lm9mZignLnpmLnJldmVhbCcpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgX2pxdWVyeTIuZGVmYXVsdC5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8ICFfanF1ZXJ5Mi5kZWZhdWx0LmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9uKCdwb3BzdGF0ZS56Zi5yZXZlYWw6JyArIHRoaXMuaWQsIHRoaXMuX2hhbmRsZVN0YXRlLmJpbmQodGhpcykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgbW9kYWwgbWV0aG9kcyBvbiBiYWNrL2ZvcndhcmQgYnV0dG9uIGNsaWNrcyBvciBhbnkgb3RoZXIgZXZlbnQgdGhhdCB0cmlnZ2VycyBwb3BzdGF0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaGFuZGxlU3RhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlU3RhdGUoZSkge1xuICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAnIycgKyB0aGlzLmlkICYmICF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogRGlzYWJsZXMgdGhlIHNjcm9sbCB3aGVuIFJldmVhbCBpcyBzaG93biB0byBwcmV2ZW50IHRoZSBiYWNrZ3JvdW5kIGZyb20gc2hpZnRpbmdcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfZGlzYWJsZVNjcm9sbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kaXNhYmxlU2Nyb2xsKCkge1xuICAgICAgaWYgKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudCkuaGVpZ2h0KCkgPiAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5oZWlnaHQoKSkge1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShcImh0bWxcIikuY3NzKFwidG9wXCIsIC1zY3JvbGxUb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVlbmFibGVzIHRoZSBzY3JvbGwgd2hlbiBSZXZlYWwgY2xvc2VzXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2VuYWJsZVNjcm9sbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9lbmFibGVTY3JvbGwoKSB7XG4gICAgICBpZiAoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGRvY3VtZW50KS5oZWlnaHQoKSA+ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLmhlaWdodCgpKSB7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBwYXJzZUludCgoMCwgX2pxdWVyeTIuZGVmYXVsdCkoXCJodG1sXCIpLmNzcyhcInRvcFwiKSk7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShcImh0bWxcIikuY3NzKFwidG9wXCIsIFwiXCIpO1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5zY3JvbGxUb3AoLXNjcm9sbFRvcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIG1vZGFsIGNvbnRyb2xsZWQgYnkgYHRoaXMuJGFuY2hvcmAsIGFuZCBjbG9zZXMgYWxsIG90aGVycyBieSBkZWZhdWx0LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VtZVxuICAgICAqIEBmaXJlcyBSZXZlYWwjb3BlblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAvLyBlaXRoZXIgdXBkYXRlIG9yIHJlcGxhY2UgYnJvd3NlciBoaXN0b3J5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIHZhciBoYXNoID0gJyMnICsgdGhpcy5pZDtcblxuICAgICAgICBpZiAod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGRhdGVIaXN0b3J5KSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBoYXNoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgaGFzaCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcblxuICAgICAgLy8gTWFrZSBlbGVtZW50cyBpbnZpc2libGUsIGJ1dCByZW1vdmUgZGlzcGxheTogbm9uZSBzbyB3ZSBjYW4gZ2V0IHNpemUgYW5kIHBvc2l0aW9uaW5nXG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicgfSkuc2hvdygpLnNjcm9sbFRvcCgwKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmNzcyh7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicgfSkuc2hvdygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmhpZGUoKS5jc3MoeyAndmlzaWJpbGl0eSc6ICcnIH0pO1xuXG4gICAgICBpZiAodGhpcy4kb3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmNzcyh7ICd2aXNpYmlsaXR5JzogJycgfSkuaGlkZSgpO1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFzdCcpKSB7XG4gICAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnZmFzdCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3Nsb3cnKSkge1xuICAgICAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ3Nsb3cnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5tdWx0aXBsZU9wZW5lZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBtb2RhbCBvcGVucy5cbiAgICAgICAgICogQ2xvc2VzIGFueSBvdGhlciBtb2RhbHMgdGhhdCBhcmUgY3VycmVudGx5IG9wZW5cbiAgICAgICAgICogQGV2ZW50IFJldmVhbCNjbG9zZW1lXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYucmV2ZWFsJywgdGhpcy5pZCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Rpc2FibGVTY3JvbGwoKTtcblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gYWRkUmV2ZWFsT3BlbkNsYXNzZXMoKSB7XG5cbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdodG1sJykuYWRkQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbkluKSB7XG4gICAgICAgIHZhciBhZnRlckFuaW1hdGlvbiA9IGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uKCkge1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2UsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgICAgIH0pLmZvY3VzKCk7XG4gICAgICAgICAgYWRkUmV2ZWFsT3BlbkNsYXNzZXMoKTtcbiAgICAgICAgICBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQudHJhcEZvY3VzKF90aGlzLiRlbGVtZW50KTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgICBfZm91bmRhdGlvblV0aWwzLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kb3ZlcmxheSwgJ2ZhZGUtaW4nKTtcbiAgICAgICAgfVxuICAgICAgICBfZm91bmRhdGlvblV0aWwzLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkluLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzNC4kZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gcHJvdGVjdCBhZ2FpbnN0IG9iamVjdCBoYXZpbmcgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICBfdGhpczQuZm9jdXNhYmxlRWxlbWVudHMgPSBfZm91bmRhdGlvblV0aWwuS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpczQuJGVsZW1lbnQpO1xuICAgICAgICAgICAgYWZ0ZXJBbmltYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8galF1ZXJ5IG1ldGhvZCBvZiByZXZlYWxcbiAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICAgICAgdGhpcy4kb3ZlcmxheS5zaG93KDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnNob3codGhpcy5vcHRpb25zLnNob3dEZWxheSk7XG4gICAgICAgIH1cblxuICAgICAgLy8gaGFuZGxlIGFjY2Vzc2liaWxpdHlcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlLFxuICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgfSkuZm9jdXMoKTtcbiAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC50cmFwRm9jdXModGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIGFkZFJldmVhbE9wZW5DbGFzc2VzKCk7XG5cbiAgICAgIHRoaXMuX2V4dHJhSGFuZGxlcnMoKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBoYXMgc3VjY2Vzc2Z1bGx5IG9wZW5lZC5cbiAgICAgICAqIEBldmVudCBSZXZlYWwjb3BlblxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBleHRyYSBldmVudCBoYW5kbGVycyBmb3IgdGhlIGJvZHkgYW5kIHdpbmRvdyBpZiBuZWNlc3NhcnkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V4dHJhSGFuZGxlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXh0cmFIYW5kbGVycygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoIXRoaXMuJGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBJZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGNsZWFudXAsIGRvbid0IGZyZWFrIG91dFxuICAgICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgJiYgIXRoaXMub3B0aW9ucy5mdWxsU2NyZWVuKSB7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnYm9keScpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgX2pxdWVyeTIuZGVmYXVsdC5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8ICFfanF1ZXJ5Mi5kZWZhdWx0LmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vbigna2V5ZG93bi56Zi5yZXZlYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1JldmVhbCcsIHtcbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBtb2RhbC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAZmlyZXMgUmV2ZWFsI2Nsb3NlZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlIHx8ICF0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbk91dCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgICBfZm91bmRhdGlvblV0aWwzLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJG92ZXJsYXksICdmYWRlLW91dCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsMy5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uT3V0LCBmaW5pc2hVcCk7XG4gICAgICB9XG4gICAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIGhpZGluZ1xuICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKHRoaXMub3B0aW9ucy5oaWRlRGVsYXkpO1xuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgICAgICB0aGlzLiRvdmVybGF5LmhpZGUoMCwgZmluaXNoVXApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaW5pc2hVcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAvLyBDb25kaXRpb25hbHMgdG8gcmVtb3ZlIGV4dHJhIGV2ZW50IGxpc3RlbmVycyBhZGRlZCBvbiBvcGVuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdib2R5Jykub2ZmKCdjbGljay56Zi5yZXZlYWwnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uemYucmV2ZWFsJyk7XG5cbiAgICAgIGZ1bmN0aW9uIGZpbmlzaFVwKCkge1xuXG4gICAgICAgIGlmICgoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJy5yZXZlYWw6dmlzaWJsZScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnaHRtbCcpLnJlbW92ZUNsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLnJlbGVhc2VGb2N1cyhfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICBfdGhpcy5fZW5hYmxlU2Nyb2xsKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogRmlyZXMgd2hlbiB0aGUgbW9kYWwgaXMgZG9uZSBjbG9zaW5nLlxuICAgICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VkXG4gICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlZC56Zi5yZXZlYWwnKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAqIFJlc2V0cyB0aGUgbW9kYWwgY29udGVudFxuICAgICAgKiBUaGlzIHByZXZlbnRzIGEgcnVubmluZyB2aWRlbyB0byBrZWVwIGdvaW5nIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgICAqL1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXNldE9uQ2xvc2UpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5odG1sKHRoaXMuJGVsZW1lbnQuaHRtbCgpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSgnJywgZG9jdW1lbnQudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoJyMnICsgdGhpcy5pZCwgJycpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGFuY2hvci5mb2N1cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2VkIHN0YXRlIG9mIGEgbW9kYWwuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcblxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmRUbygoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcy5vcHRpb25zLmFwcGVuZFRvKSk7IC8vIG1vdmUgJGVsZW1lbnQgb3V0c2lkZSBvZiAkb3ZlcmxheSB0byBwcmV2ZW50IGVycm9yIHVucmVnaXN0ZXJQbHVnaW4oKVxuICAgICAgICB0aGlzLiRvdmVybGF5LmhpZGUoKS5vZmYoKS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpLm9mZigpO1xuICAgICAgdGhpcy4kYW5jaG9yLm9mZignLnpmJyk7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vZmYoJy56Zi5yZXZlYWw6JyArIHRoaXMuaWQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXZlYWw7XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cblJldmVhbC5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGFuaW1hdGlvbkluOiAnJyxcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGFuaW1hdGlvbk91dDogJycsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIG9wZW5pbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHNob3dEZWxheTogMCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBkZWxheSB0aGUgY2xvc2luZyBvZiBhIG1vZGFsIGFmdGVyIGEgY2xpY2sgaWYgbm8gYW5pbWF0aW9uIHVzZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgaGlkZURlbGF5OiAwLFxuICAvKipcbiAgICogQWxsb3dzIGEgY2xpY2sgb24gdGhlIGJvZHkvb3ZlcmxheSB0byBjbG9zZSB0aGUgbW9kYWwuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25DbGljazogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gY2xvc2UgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgYEVTQ0FQRWAga2V5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uRXNjOiB0cnVlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYWxsb3dzIG11bHRpcGxlIG1vZGFscyB0byBiZSBkaXNwbGF5ZWQgYXQgb25jZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlT3BlbmVkOiBmYWxzZSxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSBtb2RhbCBzaG91bGQgcHVzaCBkb3duIGZyb20gdGhlIHRvcCBvZiB0aGUgc2NyZWVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ8c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBhdXRvXG4gICAqL1xuICB2T2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgbW9kYWwgc2hvdWxkIHB1c2ggaW4gZnJvbSB0aGUgc2lkZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ8c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBhdXRvXG4gICAqL1xuICBoT2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGJlIGZ1bGxzY3JlZW4sIGNvbXBsZXRlbHkgYmxvY2tpbmcgb3V0IHRoZSByZXN0IG9mIHRoZSB2aWV3LiBKUyBjaGVja3MgZm9yIHRoaXMgYXMgd2VsbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxTY3JlZW46IGZhbHNlLFxuICAvKipcbiAgICogUGVyY2VudGFnZSBvZiBzY3JlZW4gaGVpZ2h0IHRoZSBtb2RhbCBzaG91bGQgcHVzaCB1cCBmcm9tIHRoZSBib3R0b20gb2YgdGhlIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTBcbiAgICovXG4gIGJ0bU9mZnNldFBjdDogMTAsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGdlbmVyYXRlIGFuIG92ZXJsYXkgZGl2LCB3aGljaCB3aWxsIGNvdmVyIHRoZSB2aWV3IHdoZW4gbW9kYWwgb3BlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIG92ZXJsYXk6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIHJlbW92ZSBhbmQgcmVpbmplY3QgbWFya3VwIG9uIGNsb3NlLiBTaG91bGQgYmUgdHJ1ZSBpZiB1c2luZyB2aWRlbyBlbGVtZW50cyB3L28gdXNpbmcgcHJvdmlkZXIncyBhcGksIG90aGVyd2lzZSwgdmlkZW9zIHdpbGwgY29udGludWUgdG8gcGxheSBpbiB0aGUgYmFja2dyb3VuZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlc2V0T25DbG9zZTogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGFsdGVyIHRoZSB1cmwgb24gb3Blbi9jbG9zZSwgYW5kIGFsbG93cyB0aGUgdXNlIG9mIHRoZSBgYmFja2AgYnV0dG9uIHRvIGNsb3NlIG1vZGFscy4gQUxTTywgYWxsb3dzIGEgbW9kYWwgdG8gYXV0by1tYW5pYWNhbGx5IG9wZW4gb24gcGFnZSBsb2FkIElGIHRoZSBoYXNoID09PSB0aGUgbW9kYWwncyB1c2VyLXNldCBpZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZSxcbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYnJvd3NlciBoaXN0b3J5IHdpdGggdGhlIG9wZW4gbW9kYWxcbiAgICogQG9wdGlvblxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdXBkYXRlSGlzdG9yeTogZmFsc2UsXG4gIC8qKlxuICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gYXBwZW5kIHRvIGN1c3RvbSBkaXYuXG4gICogQG9wdGlvblxuICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgXCJib2R5XCJcbiAgKi9cbiAgYXBwZW5kVG86IFwiYm9keVwiLFxuICAvKipcbiAgICogQWxsb3dzIGFkZGluZyBhZGRpdGlvbmFsIGNsYXNzIG5hbWVzIHRvIHRoZSByZXZlYWwgb3ZlcmxheS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYWRkaXRpb25hbE92ZXJsYXlDbGFzc2VzOiAnJ1xufTtcblxuZXhwb3J0cy5SZXZlYWwgPSBSZXZlYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1Y21WMlpXRnNMbXB6SWwwc0ltNWhiV1Z6SWpwYklsSmxkbVZoYkNJc0ltVnNaVzFsYm5RaUxDSnZjSFJwYjI1eklpd2lKR1ZzWlcxbGJuUWlMQ0lrSWl3aVpYaDBaVzVrSWl3aVpHVm1ZWFZzZEhNaUxDSmtZWFJoSWl3aVkyeGhjM05PWVcxbElpd2lYMmx1YVhRaUxDSlVjbWxuWjJWeWN5SXNJbWx1YVhRaUxDSkxaWGxpYjJGeVpDSXNJbkpsWjJsemRHVnlJaXdpVFdWa2FXRlJkV1Z5ZVNJc0ltbGtJaXdpWVhSMGNpSXNJbWx6UVdOMGFYWmxJaXdpWTJGamFHVmtJaXdpYlhFaUxDSmpkWEp5Wlc1MElpd2lKR0Z1WTJodmNpSXNJbXhsYm1kMGFDSXNJbVoxYkd4VFkzSmxaVzRpTENKb1lYTkRiR0Z6Y3lJc0ltOTJaWEpzWVhraUxDSWtiM1psY214aGVTSXNJbDl0WVd0bFQzWmxjbXhoZVNJc0ltUmxkR0ZqYUNJc0ltRndjR1Z1WkZSdklpd2lZV1JrUTJ4aGMzTWlMQ0pmWlhabGJuUnpJaXdpWkdWbGNFeHBibXNpTENKM2FXNWtiM2NpTENKc2IyTmhkR2x2YmlJc0ltaGhjMmdpTENKdmJtVWlMQ0p2Y0dWdUlpd2lZbWx1WkNJc0ltRmtaR2wwYVc5dVlXeFBkbVZ5YkdGNVEyeGhjM05sY3lJc0luZHBaSFJvSWl3aWIzVjBaWEpYYVdSMGFDSXNJbWhsYVdkb2RDSXNJbTkxZEdWeVNHVnBaMmgwSWl3aWJHVm1kQ0lzSW5SdmNDSXNJbWhQWm1aelpYUWlMQ0p3WVhKelpVbHVkQ0lzSW5aUFptWnpaWFFpTENKTllYUm9JaXdpYldsdUlpd2lZM056SWl3aWJXRnlaMmx1SWl3aVgzUm9hWE1pTENKdmJpSXNJbVYyWlc1MElpd2lkR0Z5WjJWMElpd2ljR0Z5Wlc1MGN5SXNJbU5zYjNObElpd2lZWEJ3YkhraUxDSjBiMmRuYkdVaUxDSmZkWEJrWVhSbFVHOXphWFJwYjI0aUxDSmpiRzl6WlU5dVEyeHBZMnNpTENKdlptWWlMQ0psSWl3aVkyOXVkR0ZwYm5NaUxDSmtiMk4xYldWdWRDSXNJbDlvWVc1a2JHVlRkR0YwWlNJc0luTmpjbTlzYkZSdmNDSXNJbWhwYzNSdmNua2lMQ0p3ZFhOb1UzUmhkR1VpTENKMWNHUmhkR1ZJYVhOMGIzSjVJaXdpY21Wd2JHRmpaVk4wWVhSbElpd2ljMmh2ZHlJc0ltaHBaR1VpTENKdGRXeDBhWEJzWlU5d1pXNWxaQ0lzSW5SeWFXZG5aWElpTENKZlpHbHpZV0pzWlZOamNtOXNiQ0lzSW1Ga1pGSmxkbVZoYkU5d1pXNURiR0Z6YzJWeklpd2lZVzVwYldGMGFXOXVTVzRpTENKaFpuUmxja0Z1YVcxaGRHbHZiaUlzSW1adlkzVnpJaXdpZEhKaGNFWnZZM1Z6SWl3aVRXOTBhVzl1SWl3aVlXNXBiV0YwWlVsdUlpd2labTlqZFhOaFlteGxSV3hsYldWdWRITWlMQ0ptYVc1a1JtOWpkWE5oWW14bElpd2ljMmh2ZDBSbGJHRjVJaXdpWDJWNGRISmhTR0Z1Wkd4bGNuTWlMQ0pqYkc5elpVOXVSWE5qSWl3aWFHRnVaR3hsUzJWNUlpd2lhWE1pTENKaGJtbHRZWFJwYjI1UGRYUWlMQ0poYm1sdFlYUmxUM1YwSWl3aVptbHVhWE5vVlhBaUxDSm9hV1JsUkdWc1lYa2lMQ0p5WlcxdmRtVkRiR0Z6Y3lJc0luSmxiR1ZoYzJWR2IyTjFjeUlzSWw5bGJtRmliR1ZUWTNKdmJHd2lMQ0p5WlhObGRFOXVRMnh2YzJVaUxDSm9kRzFzSWl3aWRHbDBiR1VpTENKb2NtVm1JaXdpY21Wd2JHRmpaU0lzSW5KbGJXOTJaU0lzSWxCc2RXZHBiaUlzSW1KMGJVOW1abk5sZEZCamRDSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096dEJRVVZCT3pzN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPenM3T3pzN096czdRVUZGUVRzN096czdPenM3TzBsQlUwMUJMRTA3T3pzN096czdPenM3T3p0QlFVTktPenM3T3pzN096SkNRVTlQUXl4UExFVkJRVk5ETEU4c1JVRkJVenRCUVVOMlFpeFhRVUZMUXl4UlFVRk1MRWRCUVdkQ1JpeFBRVUZvUWp0QlFVTkJMRmRCUVV0RExFOUJRVXdzUjBGQlpVVXNhVUpCUVVWRExFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRk1MRTlCUVU5TkxGRkJRWEJDTEVWQlFUaENMRXRCUVV0SUxGRkJRVXdzUTBGQlkwa3NTVUZCWkN4RlFVRTVRaXhGUVVGdlJFd3NUMEZCY0VRc1EwRkJaanRCUVVOQkxGZEJRVXROTEZOQlFVd3NSMEZCYVVJc1VVRkJha0lzUTBGSWRVSXNRMEZIU1R0QlFVTXpRaXhYUVVGTFF5eExRVUZNT3p0QlFVVkJPMEZCUTBGRExHZERRVUZUUXl4SlFVRlVMRU5CUVdOUUxHZENRVUZrT3p0QlFVVkJVU3dyUWtGQlUwTXNVVUZCVkN4RFFVRnJRaXhSUVVGc1FpeEZRVUUwUWp0QlFVTXhRaXhyUWtGQlZUdEJRVVJuUWl4UFFVRTFRanRCUVVkRU96dEJRVVZFT3pzN096czdPelJDUVVsUk8wRkJRMDVETEd0RFFVRlhUQ3hMUVVGWU8wRkJRMEVzVjBGQlMwMHNSVUZCVEN4SFFVRlZMRXRCUVV0YUxGRkJRVXdzUTBGQlkyRXNTVUZCWkN4RFFVRnRRaXhKUVVGdVFpeERRVUZXTzBGQlEwRXNWMEZCUzBNc1VVRkJUQ3hIUVVGblFpeExRVUZvUWp0QlFVTkJMRmRCUVV0RExFMUJRVXdzUjBGQll5eEZRVUZEUXl4SlFVRkpUQ3cwUWtGQlYwMHNUMEZCYUVJc1JVRkJaRHM3UVVGRlFTeFhRVUZMUXl4UFFVRk1MRWRCUVdVc2RVTkJRV2xDTEV0QlFVdE9MRVZCUVhSQ0xGTkJRVGhDVHl4TlFVRTVRaXhIUVVGMVF5eDFRMEZCYVVJc1MwRkJTMUFzUlVGQmRFSXNVVUZCZGtNc1IwRkJkVVVzZVVOQlFXMUNMRXRCUVV0QkxFVkJRWGhDTEZGQlFYUkdPMEZCUTBFc1YwRkJTMDBzVDBGQlRDeERRVUZoVEN4SlFVRmlMRU5CUVd0Q08wRkJRMmhDTEhsQ1FVRnBRaXhMUVVGTFJDeEZRVVJPTzBGQlJXaENMSGxDUVVGcFFpeEpRVVpFTzBGQlIyaENMRzlDUVVGWk8wRkJTRWtzVDBGQmJFSTdPMEZCVFVFc1ZVRkJTU3hMUVVGTFlpeFBRVUZNTEVOQlFXRnhRaXhWUVVGaUxFbEJRVEpDTEV0QlFVdHdRaXhSUVVGTUxFTkJRV054UWl4UlFVRmtMRU5CUVhWQ0xFMUJRWFpDTEVOQlFTOUNMRVZCUVN0RU8wRkJRemRFTEdGQlFVdDBRaXhQUVVGTUxFTkJRV0Z4UWl4VlFVRmlMRWRCUVRCQ0xFbEJRVEZDTzBGQlEwRXNZVUZCUzNKQ0xFOUJRVXdzUTBGQllYVkNMRTlCUVdJc1IwRkJkVUlzUzBGQmRrSTdRVUZEUkR0QlFVTkVMRlZCUVVrc1MwRkJTM1pDTEU5QlFVd3NRMEZCWVhWQ0xFOUJRV0lzU1VGQmQwSXNRMEZCUXl4TFFVRkxReXhSUVVGc1F5eEZRVUUwUXp0QlFVTXhReXhoUVVGTFFTeFJRVUZNTEVkQlFXZENMRXRCUVV0RExGbEJRVXdzUTBGQmEwSXNTMEZCUzFvc1JVRkJka0lzUTBGQmFFSTdRVUZEUkRzN1FVRkZSQ3hYUVVGTFdpeFJRVUZNTEVOQlFXTmhMRWxCUVdRc1EwRkJiVUk3UVVGRFppeG5Ra0ZCVVN4UlFVUlBPMEZCUldZc2RVSkJRV1VzU1VGR1FUdEJRVWRtTEhsQ1FVRnBRaXhMUVVGTFJDeEZRVWhRTzBGQlNXWXNkVUpCUVdVc1MwRkJTMEU3UVVGS1RDeFBRVUZ1UWpzN1FVRlBRU3hWUVVGSExFdEJRVXRYTEZGQlFWSXNSVUZCYTBJN1FVRkRhRUlzWVVGQlMzWkNMRkZCUVV3c1EwRkJZM2xDTEUxQlFXUXNSMEZCZFVKRExGRkJRWFpDTEVOQlFXZERMRXRCUVV0SUxGRkJRWEpETzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1lVRkJTM1pDTEZGQlFVd3NRMEZCWTNsQ0xFMUJRV1FzUjBGQmRVSkRMRkZCUVhaQ0xFTkJRV2RETEhOQ1FVRkZMRXRCUVVzelFpeFBRVUZNTEVOQlFXRXlRaXhSUVVGbUxFTkJRV2hETzBGQlEwRXNZVUZCU3pGQ0xGRkJRVXdzUTBGQll6SkNMRkZCUVdRc1EwRkJkVUlzYVVKQlFYWkNPMEZCUTBRN1FVRkRSQ3hYUVVGTFF5eFBRVUZNTzBGQlEwRXNWVUZCU1N4TFFVRkxOMElzVDBGQlRDeERRVUZoT0VJc1VVRkJZaXhKUVVGNVFrTXNUMEZCVDBNc1VVRkJVQ3hEUVVGblFrTXNTVUZCYUVJc1YwRkJLMElzUzBGQlMzQkNMRVZCUVdwRkxFVkJRWGRGTzBGQlEzUkZMRGhDUVVGRmEwSXNUVUZCUml4RlFVRlZSeXhIUVVGV0xFTkJRV01zWjBKQlFXUXNSVUZCWjBNc1MwRkJTME1zU1VGQlRDeERRVUZWUXl4SlFVRldMRU5CUVdVc1NVRkJaaXhEUVVGb1F6dEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenM3YlVOQlNXVTdRVUZEWWl4VlFVRkpReXd5UWtGQk1rSXNSVUZCTDBJN08wRkJSVUVzVlVGQlNTeExRVUZMY2tNc1QwRkJUQ3hEUVVGaGNVTXNkMEpCUVdwQ0xFVkJRVEpETzBGQlEzcERRU3h0UTBGQk1rSXNUVUZCVFN4TFFVRkxja01zVDBGQlRDeERRVUZoY1VNc2QwSkJRVGxETzBGQlEwUTdPMEZCUlVRc1lVRkJUeXh6UWtGQlJTeGhRVUZHTEVWQlEwcFVMRkZCUkVrc1EwRkRTeXh0UWtGQmJVSlRMSGRDUVVSNFFpeEZRVVZLVml4UlFVWkpMRU5CUlVzc1MwRkJTek5DTEU5QlFVd3NRMEZCWVRKQ0xGRkJSbXhDTEVOQlFWQTdRVUZIUkRzN1FVRkZSRHM3T3pzN096czdjME5CUzJ0Q08wRkJRMmhDTEZWQlFVbFhMRkZCUVZFc1MwRkJTM0pETEZGQlFVd3NRMEZCWTNORExGVkJRV1FzUlVGQldqdEJRVU5CTEZWQlFVbEJMR0ZCUVdFc2MwSkJRVVZTTEUxQlFVWXNSVUZCVlU4c1MwRkJWaXhGUVVGcVFqdEJRVU5CTEZWQlFVbEZMRk5CUVZNc1MwRkJTM1pETEZGQlFVd3NRMEZCWTNkRExGZEJRV1FzUlVGQllqdEJRVU5CTEZWQlFVbEJMR05CUVdNc2MwSkJRVVZXTEUxQlFVWXNSVUZCVlZNc1RVRkJWaXhGUVVGc1FqdEJRVU5CTEZWQlFVbEZMRWxCUVVvN1FVRkJRU3hWUVVGVlF5eE5RVUZOTEVsQlFXaENPMEZCUTBFc1ZVRkJTU3hMUVVGTE0wTXNUMEZCVEN4RFFVRmhORU1zVDBGQllpeExRVUY1UWl4TlFVRTNRaXhGUVVGeFF6dEJRVU51UTBZc1pVRkJUMGNzVTBGQlV5eERRVUZEVGl4aFFVRmhSQ3hMUVVGa0xFbEJRWFZDTEVOQlFXaERMRVZCUVcxRExFVkJRVzVETEVOQlFWQTdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRURWtzWlVGQlQwY3NVMEZCVXl4TFFVRkxOME1zVDBGQlRDeERRVUZoTkVNc1QwRkJkRUlzUlVGQkswSXNSVUZCTDBJc1EwRkJVRHRCUVVORU8wRkJRMFFzVlVGQlNTeExRVUZMTlVNc1QwRkJUQ3hEUVVGaE9FTXNUMEZCWWl4TFFVRjVRaXhOUVVFM1FpeEZRVUZ4UXp0QlFVTnVReXhaUVVGSlRpeFRRVUZUUXl4WFFVRmlMRVZCUVRCQ08wRkJRM2hDUlN4blFrRkJUVVVzVTBGQlUwVXNTMEZCUzBNc1IwRkJUQ3hEUVVGVExFZEJRVlFzUlVGQlkxQXNZMEZCWXl4RlFVRTFRaXhEUVVGVUxFVkJRVEJETEVWQlFURkRMRU5CUVU0N1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRFVXNaMEpCUVUxRkxGTkJRVk1zUTBGQlEwb3NZMEZCWTBRc1RVRkJaaXhKUVVGNVFpeERRVUZzUXl4RlFVRnhReXhGUVVGeVF5eERRVUZPTzBGQlEwUTdRVUZEUml4UFFVNUVMRTFCVFU4c1NVRkJTU3hMUVVGTGVFTXNUMEZCVEN4RFFVRmhPRU1zVDBGQllpeExRVUY1UWl4SlFVRTNRaXhGUVVGdFF6dEJRVU40UTBnc1kwRkJUVVVzVTBGQlV5eExRVUZMTjBNc1QwRkJUQ3hEUVVGaE9FTXNUMEZCZEVJc1JVRkJLMElzUlVGQkwwSXNRMEZCVGp0QlFVTkVPenRCUVVWRUxGVkJRVWxJTEZGQlFWRXNTVUZCV2l4RlFVRnJRanRCUVVOb1FpeGhRVUZMTVVNc1VVRkJUQ3hEUVVGalowUXNSMEZCWkN4RFFVRnJRaXhGUVVGRFRpeExRVUZMUVN4TlFVRk5MRWxCUVZvc1JVRkJiRUk3UVVGRFJEczdRVUZGUkR0QlFVTkJPMEZCUTBFc1ZVRkJTU3hEUVVGRExFdEJRVXR1UWl4UlFVRk9MRWxCUVcxQ0xFdEJRVXQ0UWl4UFFVRk1MRU5CUVdFMFF5eFBRVUZpTEV0QlFYbENMRTFCUVdoRUxFVkJRWGxFTzBGQlEzWkVMR0ZCUVVzelF5eFJRVUZNTEVOQlFXTm5SQ3hIUVVGa0xFTkJRV3RDTEVWQlFVTlFMRTFCUVUxQkxFOUJRVThzU1VGQlpDeEZRVUZzUWp0QlFVTkJMR0ZCUVV0NlF5eFJRVUZNTEVOQlFXTm5SQ3hIUVVGa0xFTkJRV3RDTEVWQlFVTkRMRkZCUVZFc1MwRkJWQ3hGUVVGc1FqdEJRVU5FTzBGQlJVWTdPMEZCUlVRN096czdPenM3T0VKQlNWVTdRVUZCUVRzN1FVRkRVaXhWUVVGSlF5eFJRVUZSTEVsQlFWbzdPMEZCUlVFc1YwRkJTMnhFTEZGQlFVd3NRMEZCWTIxRUxFVkJRV1FzUTBGQmFVSTdRVUZEWml3eVFrRkJiVUlzUzBGQlMycENMRWxCUVV3c1EwRkJWVU1zU1VGQlZpeERRVUZsTEVsQlFXWXNRMEZFU2p0QlFVVm1MRFJDUVVGdlFpeDNRa0ZCUTJsQ0xFdEJRVVFzUlVGQlVYQkVMRkZCUVZJc1JVRkJjVUk3UVVGRGRrTXNZMEZCUzI5RUxFMUJRVTFETEUxQlFVNHNTMEZCYVVKSUxFMUJRVTFzUkN4UlFVRk9MRU5CUVdVc1EwRkJaaXhEUVVGc1FpeEpRVU5ETEhOQ1FVRkZiMFFzVFVGQlRVTXNUVUZCVWl4RlFVRm5Ra01zVDBGQmFFSXNRMEZCZDBJc2FVSkJRWGhDTEVWQlFUSkRMRU5CUVRORExFMUJRV3RFZEVRc1VVRkVka1FzUlVGRGEwVTdRVUZCUlR0QlFVTnNSU3h0UWtGQlR5eFBRVUZMZFVRc1MwRkJUQ3hEUVVGWFF5eExRVUZZTEVOQlFXbENMRTFCUVdwQ0xFTkJRVkE3UVVGRFJEdEJRVU5HTEZOQlVHTTdRVUZSWml3MlFrRkJjVUlzUzBGQlMwTXNUVUZCVEN4RFFVRlpkRUlzU1VGQldpeERRVUZwUWl4SlFVRnFRaXhEUVZKT08wRkJVMllzSzBKQlFYVkNMRFpDUVVGWE8wRkJRMmhEWlN4blFrRkJUVkVzWlVGQlRqdEJRVU5FTzBGQldHTXNUMEZCYWtJN08wRkJZMEVzVlVGQlNTeExRVUZMTTBRc1QwRkJUQ3hEUVVGaE5FUXNXVUZCWWl4SlFVRTJRaXhMUVVGTE5VUXNUMEZCVEN4RFFVRmhkVUlzVDBGQk9VTXNSVUZCZFVRN1FVRkRja1FzWVVGQlMwTXNVVUZCVEN4RFFVRmpjVU1zUjBGQlpDeERRVUZyUWl4WlFVRnNRaXhGUVVGblExUXNSVUZCYUVNc1EwRkJiVU1zYVVKQlFXNURMRVZCUVhORUxGVkJRVk5WTEVOQlFWUXNSVUZCV1R0QlFVTm9SU3hqUVVGSlFTeEZRVUZGVWl4TlFVRkdMRXRCUVdGSUxFMUJRVTFzUkN4UlFVRk9MRU5CUVdVc1EwRkJaaXhEUVVGaUxFbEJRMFpETEdsQ1FVRkZOa1FzVVVGQlJpeERRVUZYV2l4TlFVRk5iRVFzVVVGQlRpeERRVUZsTEVOQlFXWXNRMEZCV0N4RlFVRTRRalpFTEVWQlFVVlNMRTFCUVdoRExFTkJSRVVzU1VGRlFTeERRVUZEY0VRc2FVSkJRVVUyUkN4UlFVRkdMRU5CUVZkRExGRkJRVmdzUlVGQmNVSkdMRVZCUVVWU0xFMUJRWFpDTEVOQlJrd3NSVUZGY1VNN1FVRkRMMEk3UVVGRFREdEJRVU5FU0N4blFrRkJUVXNzUzBGQlRqdEJRVU5FTEZOQlVFUTdRVUZSUkR0QlFVTkVMRlZCUVVrc1MwRkJTM2hFTEU5QlFVd3NRMEZCWVRoQ0xGRkJRV3BDTEVWQlFUSkNPMEZCUTNwQ0xEaENRVUZGUXl4TlFVRkdMRVZCUVZWeFFpeEZRVUZXTEhsQ1FVRnRReXhMUVVGTGRrTXNSVUZCZUVNc1JVRkJPRU1zUzBGQlMyOUVMRmxCUVV3c1EwRkJhMEkzUWl4SlFVRnNRaXhEUVVGMVFpeEpRVUYyUWl4RFFVRTVRenRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN2FVTkJTV0V3UWl4RExFVkJRVWM3UVVGRFpDeFZRVUZITDBJc1QwRkJUME1zVVVGQlVDeERRVUZuUWtNc1NVRkJhRUlzUzBGQk1rSXNUVUZCVFN4TFFVRkxjRUlzUlVGQmRFTXNTVUZCTmtNc1EwRkJReXhMUVVGTFJTeFJRVUYwUkN4RlFVRXJSRHRCUVVGRkxHRkJRVXR2UWl4SlFVRk1PMEZCUVdNc1QwRkJMMFVzVFVGRFNUdEJRVUZGTEdGQlFVdHhRaXhMUVVGTU8wRkJRV1U3UVVGRGRFSTdPMEZCUlVRN096czdPenR4UTBGSFowSTdRVUZEWkN4VlFVRkpMSE5DUVVGRlVTeFJRVUZHTEVWQlFWbDRRaXhOUVVGYUxFdEJRWFZDTEhOQ1FVRkZWQ3hOUVVGR0xFVkJRVlZUTEUxQlFWWXNSVUZCTTBJc1JVRkJLME03UVVGRE4wTXNXVUZCU1RCQ0xGbEJRVmtzYzBKQlFVVnVReXhOUVVGR0xFVkJRVlZ0UXl4VFFVRldMRVZCUVdoQ08wRkJRMEVzT0VKQlFVVXNUVUZCUml4RlFVTkhha0lzUjBGRVNDeERRVU5QTEV0QlJGQXNSVUZEWXl4RFFVRkRhVUlzVTBGRVpqdEJRVVZFTzBGQlEwWTdPMEZCUlVRN096czdPenR2UTBGSFpUdEJRVU5pTEZWQlFVa3NjMEpCUVVWR0xGRkJRVVlzUlVGQldYaENMRTFCUVZvc1MwRkJkVUlzYzBKQlFVVlVMRTFCUVVZc1JVRkJWVk1zVFVGQlZpeEZRVUV6UWl4RlFVRXJRenRCUVVNM1F5eFpRVUZKTUVJc1dVRkJXWEpDTEZOQlFWTXNjMEpCUVVVc1RVRkJSaXhGUVVGVlNTeEhRVUZXTEVOQlFXTXNTMEZCWkN4RFFVRlVMRU5CUVdoQ08wRkJRMEVzT0VKQlFVVXNUVUZCUml4RlFVTkhRU3hIUVVSSUxFTkJRMDhzUzBGRVVDeEZRVU5qTEVWQlJHUTdRVUZGUVN3NFFrRkJSV3hDTEUxQlFVWXNSVUZCVlcxRExGTkJRVllzUTBGQmIwSXNRMEZCUTBFc1UwRkJja0k3UVVGRFJEdEJRVU5HT3p0QlFVZEVPenM3T3pzN096czdNa0pCVFU4N1FVRkJRVHM3UVVGRFREdEJRVU5CTEZWQlFVa3NTMEZCUzJ4RkxFOUJRVXdzUTBGQllUaENMRkZCUVdwQ0xFVkJRVEpDTzBGQlEzcENMRmxCUVVsSExHRkJRVmNzUzBGQlMzQkNMRVZCUVhCQ096dEJRVVZCTEZsQlFVbHJRaXhQUVVGUGIwTXNUMEZCVUN4RFFVRmxReXhUUVVGdVFpeEZRVUU0UWp0QlFVTTFRaXhqUVVGSkxFdEJRVXR3UlN4UFFVRk1MRU5CUVdGeFJTeGhRVUZxUWl4RlFVRm5RenRCUVVNNVFuUkRMRzFDUVVGUGIwTXNUMEZCVUN4RFFVRmxReXhUUVVGbUxFTkJRWGxDTEVWQlFYcENMRVZCUVRaQ0xFVkJRVGRDTEVWQlFXbERia01zU1VGQmFrTTdRVUZEUkN4WFFVWkVMRTFCUlU4N1FVRkRURVlzYlVKQlFVOXZReXhQUVVGUUxFTkJRV1ZITEZsQlFXWXNRMEZCTkVJc1JVRkJOVUlzUlVGQlowTXNSVUZCYUVNc1JVRkJiME55UXl4SlFVRndRenRCUVVORU8wRkJRMFlzVTBGT1JDeE5RVTFQTzBGQlEweEdMR2xDUVVGUFF5eFJRVUZRTEVOQlFXZENReXhKUVVGb1FpeEhRVUYxUWtFc1NVRkJka0k3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRmRCUVV0c1FpeFJRVUZNTEVkQlFXZENMRWxCUVdoQ096dEJRVVZCTzBGQlEwRXNWMEZCUzJRc1VVRkJUQ3hEUVVOTFowUXNSMEZFVEN4RFFVTlRMRVZCUVVVc1kwRkJZeXhSUVVGb1FpeEZRVVJVTEVWQlJVdHpRaXhKUVVaTUxFZEJSMHRNTEZOQlNFd3NRMEZIWlN4RFFVaG1PMEZCU1VFc1ZVRkJTU3hMUVVGTGJFVXNUMEZCVEN4RFFVRmhkVUlzVDBGQmFrSXNSVUZCTUVJN1FVRkRlRUlzWVVGQlMwTXNVVUZCVEN4RFFVRmplVUlzUjBGQlpDeERRVUZyUWl4RlFVRkRMR05CUVdNc1VVRkJaaXhGUVVGc1FpeEZRVUUwUTNOQ0xFbEJRVFZETzBGQlEwUTdPMEZCUlVRc1YwRkJTMW9zWlVGQlREczdRVUZGUVN4WFFVRkxNVVFzVVVGQlRDeERRVU5IZFVVc1NVRkVTQ3hIUVVWSGRrSXNSMEZHU0N4RFFVVlBMRVZCUVVVc1kwRkJZeXhGUVVGb1FpeEZRVVpRT3p0QlFVbEJMRlZCUVVjc1MwRkJTM3BDTEZGQlFWSXNSVUZCYTBJN1FVRkRhRUlzWVVGQlMwRXNVVUZCVEN4RFFVRmplVUlzUjBGQlpDeERRVUZyUWl4RlFVRkRMR05CUVdNc1JVRkJaaXhGUVVGc1FpeEZRVUZ6UTNWQ0xFbEJRWFJETzBGQlEwRXNXVUZCUnl4TFFVRkxka1VzVVVGQlRDeERRVUZqY1VJc1VVRkJaQ3hEUVVGMVFpeE5RVUYyUWl4RFFVRklMRVZCUVcxRE8wRkJRMnBETEdWQlFVdEZMRkZCUVV3c1EwRkJZMGtzVVVGQlpDeERRVUYxUWl4TlFVRjJRanRCUVVORUxGTkJSa1FzVFVGRlR5eEpRVUZKTEV0QlFVc3pRaXhSUVVGTUxFTkJRV054UWl4UlFVRmtMRU5CUVhWQ0xFMUJRWFpDTEVOQlFVb3NSVUZCYjBNN1FVRkRla01zWlVGQlMwVXNVVUZCVEN4RFFVRmpTU3hSUVVGa0xFTkJRWFZDTEUxQlFYWkNPMEZCUTBRN1FVRkRSanM3UVVGSFJDeFZRVUZKTEVOQlFVTXNTMEZCU3pWQ0xFOUJRVXdzUTBGQllYbEZMR05CUVd4Q0xFVkJRV3RETzBGQlEyaERPenM3T3p0QlFVdEJMR0ZCUVV0NFJTeFJRVUZNTEVOQlFXTjVSU3hQUVVGa0xFTkJRWE5DTEcxQ1FVRjBRaXhGUVVFeVF5eExRVUZMTjBRc1JVRkJhRVE3UVVGRFJEczdRVUZGUkN4WFFVRkxPRVFzWTBGQlREczdRVUZGUVN4VlFVRkplRUlzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR1ZCUVZONVFpeHZRa0ZCVkN4SFFVRm5RenM3UVVGRk9VSXNPRUpCUVVVc1RVRkJSaXhGUVVGVmFFUXNVVUZCVml4RFFVRnRRaXhuUWtGQmJrSTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxGVkJRVWtzUzBGQlN6VkNMRTlCUVV3c1EwRkJZVFpGTEZkQlFXcENMRVZCUVRoQ08wRkJRVUVzV1VGRGJrSkRMR05CUkcxQ0xFZEJRelZDTEZOQlFWTkJMR05CUVZRc1IwRkJlVUk3UVVGRGRrSXpRaXhuUWtGQlRXeEVMRkZCUVU0c1EwRkRSMkVzU1VGRVNDeERRVU5STzBGQlEwb3NNa0pCUVdVc1MwRkVXRHRCUVVWS0xIZENRVUZaTEVOQlFVTTdRVUZHVkN4WFFVUlNMRVZCUzBkcFJTeExRVXhJTzBGQlRVRklPMEZCUTBGc1JTeHRRMEZCVTNORkxGTkJRVlFzUTBGQmJVSTNRaXhOUVVGTmJFUXNVVUZCZWtJN1FVRkRSQ3hUUVZZeVFqczdRVUZYTlVJc1dVRkJTU3hMUVVGTFJDeFBRVUZNTEVOQlFXRjFRaXhQUVVGcVFpeEZRVUV3UWp0QlFVTjRRakJFTEd0RFFVRlBReXhUUVVGUUxFTkJRV2xDTEV0QlFVc3hSQ3hSUVVGMFFpeEZRVUZuUXl4VFFVRm9RenRCUVVORU8wRkJRMFI1UkN4blEwRkJUME1zVTBGQlVDeERRVUZwUWl4TFFVRkxha1lzVVVGQmRFSXNSVUZCWjBNc1MwRkJTMFFzVDBGQlRDeERRVUZoTmtVc1YwRkJOME1zUlVGQk1FUXNXVUZCVFR0QlFVTTVSQ3hqUVVGSExFOUJRVXMxUlN4UlFVRlNMRVZCUVd0Q08wRkJRVVU3UVVGRGJFSXNiVUpCUVV0clJpeHBRa0ZCVEN4SFFVRjVRbnBGTEhsQ1FVRlRNRVVzWVVGQlZDeERRVUYxUWl4UFFVRkxia1lzVVVGQk5VSXNRMEZCZWtJN1FVRkRRVFpGTzBGQlEwUTdRVUZEUml4VFFVeEVPMEZCVFVRN1FVRkRSRHRCUVhKQ1FTeFhRWE5DU3p0QlFVTklMR05CUVVrc1MwRkJTemxGTEU5QlFVd3NRMEZCWVhWQ0xFOUJRV3BDTEVWQlFUQkNPMEZCUTNoQ0xHbENRVUZMUXl4UlFVRk1MRU5CUVdNclF5eEpRVUZrTEVOQlFXMUNMRU5CUVc1Q08wRkJRMFE3UVVGRFJDeGxRVUZMZEVVc1VVRkJUQ3hEUVVGamMwVXNTVUZCWkN4RFFVRnRRaXhMUVVGTGRrVXNUMEZCVEN4RFFVRmhjVVlzVTBGQmFFTTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxGZEJRVXR3Uml4UlFVRk1MRU5CUTBkaExFbEJSRWdzUTBGRFVUdEJRVU5LTEhWQ1FVRmxMRXRCUkZnN1FVRkZTaXh2UWtGQldTeERRVUZETzBGQlJsUXNUMEZFVWl4RlFVdEhhVVVzUzBGTVNEdEJRVTFCY2tVc0swSkJRVk56UlN4VFFVRlVMRU5CUVcxQ0xFdEJRVXN2UlN4UlFVRjRRanM3UVVGRlFUSkZPenRCUVVWQkxGZEJRVXRWTEdOQlFVdzdPMEZCUlVFN096czdRVUZKUVN4WFFVRkxja1lzVVVGQlRDeERRVUZqZVVVc1QwRkJaQ3hEUVVGelFpeG5Ra0ZCZEVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0eFEwRkphVUk3UVVGRFppeFZRVUZKZGtJc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlJ5eERRVUZETEV0QlFVdHNSQ3hSUVVGVUxFVkJRVzFDTzBGQlFVVTdRVUZCVXl4UFFVWm1MRU5CUldkQ08wRkJReTlDTEZkQlFVdHJSaXhwUWtGQlRDeEhRVUY1UW5wRkxIbENRVUZUTUVVc1lVRkJWQ3hEUVVGMVFpeExRVUZMYmtZc1VVRkJOVUlzUTBGQmVrSTdPMEZCUlVFc1ZVRkJTU3hEUVVGRExFdEJRVXRFTEU5QlFVd3NRMEZCWVhWQ0xFOUJRV1FzU1VGQmVVSXNTMEZCUzNaQ0xFOUJRVXdzUTBGQllUUkVMRmxCUVhSRExFbEJRWE5FTEVOQlFVTXNTMEZCU3pWRUxFOUJRVXdzUTBGQllYRkNMRlZCUVhoRkxFVkJRVzlHTzBGQlEyeEdMRGhDUVVGRkxFMUJRVVlzUlVGQlZTdENMRVZCUVZZc1EwRkJZU3hwUWtGQllpeEZRVUZuUXl4VlFVRlRWU3hEUVVGVUxFVkJRVms3UVVGRE1VTXNZMEZCU1VFc1JVRkJSVklzVFVGQlJpeExRVUZoU0N4TlFVRk5iRVFzVVVGQlRpeERRVUZsTEVOQlFXWXNRMEZCWWl4SlFVTkdReXhwUWtGQlJUWkVMRkZCUVVZc1EwRkJWMW9zVFVGQlRXeEVMRkZCUVU0c1EwRkJaU3hEUVVGbUxFTkJRVmdzUlVGQk9FSTJSQ3hGUVVGRlVpeE5RVUZvUXl4RFFVUkZMRWxCUlVFc1EwRkJRM0JFTEdsQ1FVRkZOa1FzVVVGQlJpeERRVUZYUXl4UlFVRllMRVZCUVhGQ1JpeEZRVUZGVWl4TlFVRjJRaXhEUVVaTUxFVkJSWEZETzBGQlFVVTdRVUZCVXp0QlFVTm9SRWdzWjBKQlFVMUxMRXRCUVU0N1FVRkRSQ3hUUVV4RU8wRkJUVVE3TzBGQlJVUXNWVUZCU1N4TFFVRkxlRVFzVDBGQlRDeERRVUZoZFVZc1ZVRkJha0lzUlVGQk5rSTdRVUZETTBJc09FSkJRVVY0UkN4TlFVRkdMRVZCUVZWeFFpeEZRVUZXTEVOQlFXRXNiVUpCUVdJc1JVRkJhME1zVlVGQlUxVXNRMEZCVkN4RlFVRlpPMEZCUXpWRGNFUXNiVU5CUVZNNFJTeFRRVUZVTEVOQlFXMUNNVUlzUTBGQmJrSXNSVUZCYzBJc1VVRkJkRUlzUlVGQlowTTdRVUZET1VKT0xHMUNRVUZQTEdsQ1FVRlhPMEZCUTJoQ0xHdENRVUZKVEN4TlFVRk5ia1FzVDBGQlRpeERRVUZqZFVZc1ZVRkJiRUlzUlVGQk9FSTdRVUZETlVKd1F5eHpRa0ZCVFVzc1MwRkJUanRCUVVORU8wRkJRMFk3UVVGTU5rSXNWMEZCYUVNN1FVRlBSQ3hUUVZKRU8wRkJVMFE3UVVGRFJqczdRVUZGUkRzN096czdPenM3TkVKQlMxRTdRVUZEVGl4VlFVRkpMRU5CUVVNc1MwRkJTM3BETEZGQlFVNHNTVUZCYTBJc1EwRkJReXhMUVVGTFpDeFJRVUZNTEVOQlFXTjNSaXhGUVVGa0xFTkJRV2xDTEZWQlFXcENMRU5CUVhaQ0xFVkJRWEZFTzBGQlEyNUVMR1ZCUVU4c1MwRkJVRHRCUVVORU8wRkJRMFFzVlVGQlNYUkRMRkZCUVZFc1NVRkJXanM3UVVGRlFUdEJRVU5CTEZWQlFVa3NTMEZCUzI1RUxFOUJRVXdzUTBGQllUQkdMRmxCUVdwQ0xFVkJRU3RDTzBGQlF6ZENMRmxCUVVrc1MwRkJTekZHTEU5QlFVd3NRMEZCWVhWQ0xFOUJRV3BDTEVWQlFUQkNPMEZCUTNoQ01FUXNhME5CUVU5VkxGVkJRVkFzUTBGQmEwSXNTMEZCUzI1RkxGRkJRWFpDTEVWQlFXbERMRlZCUVdwRE8wRkJRMFE3TzBGQlJVUjVSQ3huUTBGQlQxVXNWVUZCVUN4RFFVRnJRaXhMUVVGTE1VWXNVVUZCZGtJc1JVRkJhVU1zUzBGQlMwUXNUMEZCVEN4RFFVRmhNRVlzV1VGQk9VTXNSVUZCTkVSRkxGRkJRVFZFTzBGQlEwUTdRVUZEUkR0QlFWQkJMRmRCVVVzN1FVRkRTQ3hsUVVGTE0wWXNVVUZCVEN4RFFVRmpkVVVzU1VGQlpDeERRVUZ0UWl4TFFVRkxlRVVzVDBGQlRDeERRVUZoTmtZc1UwRkJhRU03TzBGQlJVRXNZMEZCU1N4TFFVRkxOMFlzVDBGQlRDeERRVUZoZFVJc1QwRkJha0lzUlVGQk1FSTdRVUZEZUVJc2FVSkJRVXRETEZGQlFVd3NRMEZCWTJkRUxFbEJRV1FzUTBGQmJVSXNRMEZCYmtJc1JVRkJjMEp2UWl4UlFVRjBRanRCUVVORUxGZEJSa1FzVFVGSFN6dEJRVU5JUVR0QlFVTkVPMEZCUTBZN08wRkJSVVE3UVVGRFFTeFZRVUZKTEV0QlFVczFSaXhQUVVGTUxFTkJRV0YxUml4VlFVRnFRaXhGUVVFMlFqdEJRVU16UWl3NFFrRkJSWGhFTEUxQlFVWXNSVUZCVlRoQ0xFZEJRVllzUTBGQll5eHRRa0ZCWkR0QlFVTkVPenRCUVVWRUxGVkJRVWtzUTBGQlF5eExRVUZMTjBRc1QwRkJUQ3hEUVVGaGRVSXNUMEZCWkN4SlFVRjVRaXhMUVVGTGRrSXNUMEZCVEN4RFFVRmhORVFzV1VGQk1VTXNSVUZCZDBRN1FVRkRkRVFzT0VKQlFVVXNUVUZCUml4RlFVRlZReXhIUVVGV0xFTkJRV01zYVVKQlFXUTdRVUZEUkRzN1FVRkZSQ3hYUVVGTE5VUXNVVUZCVEN4RFFVRmpORVFzUjBGQlpDeERRVUZyUWl4dFFrRkJiRUk3TzBGQlJVRXNaVUZCVXl0Q0xGRkJRVlFzUjBGQmIwSTdPMEZCUld4Q0xGbEJRVWtzYzBKQlFVVXNhVUpCUVVZc1JVRkJjVUo0UlN4TlFVRnlRaXhMUVVGcFF5eERRVUZ5UXl4RlFVRjNRenRCUVVOMFF5eG5RMEZCUlN4TlFVRkdMRVZCUVZVd1JTeFhRVUZXTEVOQlFYTkNMR2RDUVVGMFFqdEJRVU5FT3p0QlFVVkVjRVlzYVVOQlFWTnhSaXhaUVVGVUxFTkJRWE5DTlVNc1RVRkJUV3hFTEZGQlFUVkNPenRCUVVWQmEwUXNZMEZCVFd4RUxGRkJRVTRzUTBGQlpXRXNTVUZCWml4RFFVRnZRaXhoUVVGd1FpeEZRVUZ0UXl4SlFVRnVRenM3UVVGRlFYRkRMR05CUVUwMlF5eGhRVUZPT3p0QlFVVkJPenM3TzBGQlNVRTNReXhqUVVGTmJFUXNVVUZCVGl4RFFVRmxlVVVzVDBGQlppeERRVUYxUWl4clFrRkJka0k3UVVGRFJEczdRVUZGUkRzN096dEJRVWxCTEZWQlFVa3NTMEZCU3pGRkxFOUJRVXdzUTBGQllXbEhMRmxCUVdwQ0xFVkJRU3RDTzBGQlF6ZENMR0ZCUVV0b1J5eFJRVUZNTEVOQlFXTnBSeXhKUVVGa0xFTkJRVzFDTEV0QlFVdHFSeXhSUVVGTUxFTkJRV05wUnl4SlFVRmtMRVZCUVc1Q08wRkJRMFE3TzBGQlJVUXNWMEZCUzI1R0xGRkJRVXdzUjBGQlowSXNTMEZCYUVJN1FVRkRReXhWUVVGSmIwTXNUVUZCVFc1RUxFOUJRVTRzUTBGQll6aENMRkZCUVd4Q0xFVkJRVFJDTzBGQlF6RkNMRmxCUVVsRExFOUJRVTl2UXl4UFFVRlFMRU5CUVdWSExGbEJRVzVDTEVWQlFXbERPMEZCUXk5Q2RrTXNhVUpCUVU5dlF5eFBRVUZRTEVOQlFXVkhMRmxCUVdZc1EwRkJORUlzUlVGQk5VSXNSVUZCWjBOT0xGTkJRVk50UXl4TFFVRjZReXhGUVVGblJIQkZMRTlCUVU5RExGRkJRVkFzUTBGQlowSnZSU3hKUVVGb1FpeERRVUZ4UWtNc1QwRkJja0lzVDBGQmFVTXNTMEZCUzNoR0xFVkJRWFJETEVWQlFUUkRMRVZCUVRWRExFTkJRV2hFTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB4clFpeHBRa0ZCVDBNc1VVRkJVQ3hEUVVGblFrTXNTVUZCYUVJc1IwRkJkVUlzUlVGQmRrSTdRVUZEUkR0QlFVTkdPenRCUVVWR0xGZEJRVXRrTEU5QlFVd3NRMEZCWVRSRUxFdEJRV0k3UVVGRFJEczdRVUZGUkRzN096czdPenMyUWtGSlV6dEJRVU5RTEZWQlFVa3NTMEZCUzJoRkxGRkJRVlFzUlVGQmJVSTdRVUZEYWtJc1lVRkJTM2xETEV0QlFVdzdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRUQ3hoUVVGTGNrSXNTVUZCVER0QlFVTkVPMEZCUTBZN096czdPMEZCUlVRN096czdLMEpCU1ZjN1FVRkRWQ3hWUVVGSkxFdEJRVXR1UXl4UFFVRk1MRU5CUVdGMVFpeFBRVUZxUWl4RlFVRXdRanRCUVVONFFpeGhRVUZMZEVJc1VVRkJUQ3hEUVVGak1FSXNVVUZCWkN4RFFVRjFRaXh6UWtGQlJTeExRVUZMTTBJc1QwRkJUQ3hEUVVGaE1rSXNVVUZCWml4RFFVRjJRaXhGUVVSM1FpeERRVU13UWp0QlFVTnNSQ3hoUVVGTFNDeFJRVUZNTEVOQlFXTm5SQ3hKUVVGa0xFZEJRWEZDV0N4SFFVRnlRaXhIUVVFeVFubERMRTFCUVROQ08wRkJRMFE3UVVGRFJDeFhRVUZMY2tjc1VVRkJUQ3hEUVVGamRVVXNTVUZCWkN4SFFVRnhRbGdzUjBGQmNrSTdRVUZEUVN4WFFVRkxNVU1zVDBGQlRDeERRVUZoTUVNc1IwRkJZaXhEUVVGcFFpeExRVUZxUWp0QlFVTkJMRFJDUVVGRk9VSXNUVUZCUml4RlFVRlZPRUlzUjBGQlZpeHBRa0ZCTkVJc1MwRkJTMmhFTEVWQlFXcERPMEZCUTBRN096czdSVUV6WW10Q01FWXNhMEk3TzBGQk9HSnlRbnBITEU5QlFVOU5MRkZCUVZBc1IwRkJhMEk3UVVGRGFFSTdPenM3T3p0QlFVMUJlVVVzWlVGQllTeEZRVkJITzBGQlVXaENPenM3T3pzN1FVRk5RV0VzWjBKQlFXTXNSVUZrUlR0QlFXVm9RanM3T3pzN08wRkJUVUZNTEdGQlFWY3NRMEZ5UWtzN1FVRnpRbWhDT3pzN096czdRVUZOUVZFc1lVRkJWeXhEUVRWQ1N6dEJRVFpDYUVJN096czdPenRCUVUxQmFrTXNaMEpCUVdNc1NVRnVRMFU3UVVGdlEyaENPenM3T3pzN1FVRk5RVEpDTEdOQlFWa3NTVUV4UTBrN1FVRXlRMmhDT3pzN096czdRVUZOUVdRc2EwSkJRV2RDTEV0QmFrUkJPMEZCYTBSb1FqczdPenM3TzBGQlRVRXpRaXhYUVVGVExFMUJlRVJQTzBGQmVVUm9RanM3T3pzN08wRkJUVUZHTEZkQlFWTXNUVUV2UkU4N1FVRm5SV2hDT3pzN096czdRVUZOUVhaQ0xHTkJRVmtzUzBGMFJVazdRVUYxUldoQ096czdPenM3UVVGTlFXMUdMR2RDUVVGakxFVkJOMFZGTzBGQk9FVm9RanM3T3pzN08wRkJUVUZxUml4WFFVRlRMRWxCY0VaUE8wRkJjVVpvUWpzN096czdPMEZCVFVFd1JTeG5Ra0ZCWXl4TFFUTkdSVHRCUVRSR2FFSTdPenM3T3p0QlFVMUJia1VzV1VGQlZTeExRV3hIVFR0QlFXMUhhRUk3T3pzN08wRkJTMEYxUXl4cFFrRkJaU3hMUVhoSFF6dEJRWGxIWkRzN096czdPMEZCVFVZeFF5eFpRVUZWTEUxQkwwZE5PMEZCWjBob1FqczdPenM3TzBGQlRVRlZMRFJDUVVFd1FqdEJRWFJJVml4RFFVRnNRanM3VVVGNVNGRjJReXhOTEVkQlFVRkJMRTBpTENKbWFXeGxJam9pWm05MWJtUmhkR2x2Ymk1eVpYWmxZV3d1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbHRjRzl5ZENBa0lHWnliMjBnSjJweGRXVnllU2M3WEc1cGJYQnZjblFnZXlCTFpYbGliMkZ5WkNCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG10bGVXSnZZWEprSnp0Y2JtbHRjRzl5ZENCN0lFMWxaR2xoVVhWbGNua2dmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNXRaV1JwWVZGMVpYSjVKenRjYm1sdGNHOXlkQ0I3SUUxdmRHbHZiaUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbTF2ZEdsdmJpYzdYRzVwYlhCdmNuUWdleUJRYkhWbmFXNGdmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1Y0d4MVoybHVKenRjYm1sdGNHOXlkQ0I3SUZSeWFXZG5aWEp6SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1ZEhKcFoyZGxjbk1uTzF4dVhHNHZLaXBjYmlBcUlGSmxkbVZoYkNCdGIyUjFiR1V1WEc0Z0tpQkFiVzlrZFd4bElHWnZkVzVrWVhScGIyNHVjbVYyWldGc1hHNGdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMbXRsZVdKdllYSmtYRzRnS2lCQWNtVnhkV2x5WlhNZ1ptOTFibVJoZEdsdmJpNTFkR2xzTG5SeWFXZG5aWEp6WEc0Z0tpQkFjbVZ4ZFdseVpYTWdabTkxYm1SaGRHbHZiaTUxZEdsc0xtMWxaR2xoVVhWbGNubGNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxuVjBhV3d1Ylc5MGFXOXVJR2xtSUhWemFXNW5JR0Z1YVcxaGRHbHZibk5jYmlBcUwxeHVYRzVqYkdGemN5QlNaWFpsWVd3Z1pYaDBaVzVrY3lCUWJIVm5hVzRnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQlNaWFpsWVd3dVhHNGdJQ0FxSUVCamJHRnpjMXh1SUNBZ0tpQkFibUZ0WlNCU1pYWmxZV3hjYmlBZ0lDb2dRSEJoY21GdElIdHFVWFZsY25sOUlHVnNaVzFsYm5RZ0xTQnFVWFZsY25rZ2IySnFaV04wSUhSdklIVnpaU0JtYjNJZ2RHaGxJRzF2WkdGc0xseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUc5d2RHbHZibUZzSUhCaGNtRnRaWFJsY25NdVhHNGdJQ0FxTDF4dUlDQmZjMlYwZFhBb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUWdQU0JsYkdWdFpXNTBPMXh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUNRdVpYaDBaVzVrS0h0OUxDQlNaWFpsWVd3dVpHVm1ZWFZzZEhNc0lIUm9hWE11SkdWc1pXMWxiblF1WkdGMFlTZ3BMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjBhR2x6TG1Oc1lYTnpUbUZ0WlNBOUlDZFNaWFpsWVd3bk95QXZMeUJwWlRrZ1ltRmpheUJqYjIxd1lYUmNiaUFnSUNCMGFHbHpMbDlwYm1sMEtDazdYRzVjYmlBZ0lDQXZMeUJVY21sbloyVnljeUJwYm1sMElHbHpJR2xrWlcxd2IzUmxiblFzSUdwMWMzUWdibVZsWkNCMGJ5QnRZV3RsSUhOMWNtVWdhWFFnYVhNZ2FXNXBkR2xoYkdsNlpXUmNiaUFnSUNCVWNtbG5aMlZ5Y3k1cGJtbDBLQ1FwTzF4dVhHNGdJQ0FnUzJWNVltOWhjbVF1Y21WbmFYTjBaWElvSjFKbGRtVmhiQ2NzSUh0Y2JpQWdJQ0FnSUNkRlUwTkJVRVVuT2lBblkyeHZjMlVuTEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCdGIyUmhiQ0JpZVNCaFpHUnBibWNnZEdobElHOTJaWEpzWVhrZ1lXNWtJR05zYjNObElHSjFkSFJ2Ym5Nc0lDaHBaaUJ6Wld4bFkzUmxaQ2t1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmYVc1cGRDZ3BJSHRjYmlBZ0lDQk5aV1JwWVZGMVpYSjVMbDlwYm1sMEtDazdYRzRnSUNBZ2RHaHBjeTVwWkNBOUlIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpZ25hV1FuS1R0Y2JpQWdJQ0IwYUdsekxtbHpRV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NWpZV05vWldRZ1BTQjdiWEU2SUUxbFpHbGhVWFZsY25rdVkzVnljbVZ1ZEgwN1hHNWNiaUFnSUNCMGFHbHpMaVJoYm1Ob2IzSWdQU0FrS0dCYlpHRjBZUzF2Y0dWdVBWd2lKSHQwYUdsekxtbGtmVndpWFdBcExteGxibWQwYUNBL0lDUW9ZRnRrWVhSaExXOXdaVzQ5WENJa2UzUm9hWE11YVdSOVhDSmRZQ2tnT2lBa0tHQmJaR0YwWVMxMGIyZG5iR1U5WENJa2UzUm9hWE11YVdSOVhDSmRZQ2s3WEc0Z0lDQWdkR2hwY3k0a1lXNWphRzl5TG1GMGRISW9lMXh1SUNBZ0lDQWdKMkZ5YVdFdFkyOXVkSEp2YkhNbk9pQjBhR2x6TG1sa0xGeHVJQ0FnSUNBZ0oyRnlhV0V0YUdGemNHOXdkWEFuT2lCMGNuVmxMRnh1SUNBZ0lDQWdKM1JoWW1sdVpHVjRKem9nTUZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVtZFd4c1UyTnlaV1Z1SUh4OElIUm9hWE11SkdWc1pXMWxiblF1YUdGelEyeGhjM01vSjJaMWJHd25LU2tnZTF4dUlDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxtWjFiR3hUWTNKbFpXNGdQU0IwY25WbE8xeHVJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbTkyWlhKc1lYa2dQU0JtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTV2ZG1WeWJHRjVJQ1ltSUNGMGFHbHpMaVJ2ZG1WeWJHRjVLU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUnZkbVZ5YkdGNUlEMGdkR2hwY3k1ZmJXRnJaVTkyWlhKc1lYa29kR2hwY3k1cFpDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzVoZEhSeUtIdGNiaUFnSUNBZ0lDQWdKM0p2YkdVbk9pQW5aR2xoYkc5bkp5eGNiaUFnSUNBZ0lDQWdKMkZ5YVdFdGFHbGtaR1Z1SnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSjJSaGRHRXRlV1YwYVMxaWIzZ25PaUIwYUdsekxtbGtMRnh1SUNBZ0lDQWdJQ0FuWkdGMFlTMXlaWE5wZW1Vbk9pQjBhR2x6TG1sa1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCcFppaDBhR2x6TGlSdmRtVnliR0Y1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbVJsZEdGamFDZ3BMbUZ3Y0dWdVpGUnZLSFJvYVhNdUpHOTJaWEpzWVhrcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtUmxkR0ZqYUNncExtRndjR1Z1WkZSdktDUW9kR2hwY3k1dmNIUnBiMjV6TG1Gd2NHVnVaRlJ2S1NrN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbUZrWkVOc1lYTnpLQ2QzYVhSb2IzVjBMVzkyWlhKc1lYa25LVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpLQ2s3WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWtaV1Z3VEdsdWF5QW1KaUIzYVc1a2IzY3ViRzlqWVhScGIyNHVhR0Z6YUNBOVBUMGdLQ0JnSXlSN2RHaHBjeTVwWkgxZ0tTa2dlMXh1SUNBZ0lDQWdKQ2gzYVc1a2IzY3BMbTl1WlNnbmJHOWhaQzU2Wmk1eVpYWmxZV3duTENCMGFHbHpMbTl3Wlc0dVltbHVaQ2gwYUdsektTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpYTWdZVzRnYjNabGNteGhlU0JrYVhZZ2RHOGdaR2x6Y0d4aGVTQmlaV2hwYm1RZ2RHaGxJRzF2WkdGc0xseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gyMWhhMlZQZG1WeWJHRjVLQ2tnZTF4dUlDQWdJSFpoY2lCaFpHUnBkR2x2Ym1Gc1QzWmxjbXhoZVVOc1lYTnpaWE1nUFNBbkp6dGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVlXUmthWFJwYjI1aGJFOTJaWEpzWVhsRGJHRnpjMlZ6S1NCN1hHNGdJQ0FnSUNCaFpHUnBkR2x2Ym1Gc1QzWmxjbXhoZVVOc1lYTnpaWE1nUFNBbklDY2dLeUIwYUdsekxtOXdkR2x2Ym5NdVlXUmthWFJwYjI1aGJFOTJaWEpzWVhsRGJHRnpjMlZ6TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQWtLQ2M4WkdsMlBqd3ZaR2wyUGljcFhHNGdJQ0FnSUNBdVlXUmtRMnhoYzNNb0ozSmxkbVZoYkMxdmRtVnliR0Y1SnlBcklHRmtaR2wwYVc5dVlXeFBkbVZ5YkdGNVEyeGhjM05sY3lsY2JpQWdJQ0FnSUM1aGNIQmxibVJVYnloMGFHbHpMbTl3ZEdsdmJuTXVZWEJ3Wlc1a1ZHOHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWd1pHRjBaWE1nY0c5emFYUnBiMjRnYjJZZ2JXOWtZV3hjYmlBZ0lDb2dWRTlFVHpvZ0lFWnBaM1Z5WlNCdmRYUWdhV1lnZDJVZ1lXTjBkV0ZzYkhrZ2JtVmxaQ0IwYnlCallXTm9aU0IwYUdWelpTQjJZV3gxWlhNZ2IzSWdhV1lnYVhRZ1pHOWxjMjRuZENCdFlYUjBaWEpjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjkxY0dSaGRHVlFiM05wZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnZDJsa2RHZ2dQU0IwYUdsekxpUmxiR1Z0Wlc1MExtOTFkR1Z5VjJsa2RHZ29LVHRjYmlBZ0lDQjJZWElnYjNWMFpYSlhhV1IwYUNBOUlDUW9kMmx1Wkc5M0tTNTNhV1IwYUNncE8xeHVJQ0FnSUhaaGNpQm9aV2xuYUhRZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG05MWRHVnlTR1ZwWjJoMEtDazdYRzRnSUNBZ2RtRnlJRzkxZEdWeVNHVnBaMmgwSUQwZ0pDaDNhVzVrYjNjcExtaGxhV2RvZENncE8xeHVJQ0FnSUhaaGNpQnNaV1owTENCMGIzQWdQU0J1ZFd4c08xeHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11YUU5bVpuTmxkQ0E5UFQwZ0oyRjFkRzhuS1NCN1hHNGdJQ0FnSUNCc1pXWjBJRDBnY0dGeWMyVkpiblFvS0c5MWRHVnlWMmxrZEdnZ0xTQjNhV1IwYUNrZ0x5QXlMQ0F4TUNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR3hsWm5RZ1BTQndZWEp6WlVsdWRDaDBhR2x6TG05d2RHbHZibk11YUU5bVpuTmxkQ3dnTVRBcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMblpQWm1aelpYUWdQVDA5SUNkaGRYUnZKeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHaGxhV2RvZENBK0lHOTFkR1Z5U0dWcFoyaDBLU0I3WEc0Z0lDQWdJQ0FnSUhSdmNDQTlJSEJoY25ObFNXNTBLRTFoZEdndWJXbHVLREV3TUN3Z2IzVjBaWEpJWldsbmFIUWdMeUF4TUNrc0lERXdLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJ2Y0NBOUlIQmhjbk5sU1c1MEtDaHZkWFJsY2tobGFXZG9kQ0F0SUdobGFXZG9kQ2tnTHlBMExDQXhNQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWRrOW1abk5sZENBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2RHOXdJRDBnY0dGeWMyVkpiblFvZEdocGN5NXZjSFJwYjI1ekxuWlBabVp6WlhRc0lERXdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEc5d0lDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG1OemN5aDdkRzl3T2lCMGIzQWdLeUFuY0hnbmZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdiMjVzZVNCM2IzSnllU0JoWW05MWRDQnNaV1owSUdsbUlIZGxJR1J2YmlkMElHaGhkbVVnWVc0Z2IzWmxjbXhoZVNCdmNpQjNaU0JvWVhabElHRWdhRzl5YVhwdmJuUmhiQ0J2Wm1aelpYUXNYRzRnSUNBZ0x5OGdiM1JvWlhKM2FYTmxJSGRsSjNKbElIQmxjbVpsWTNSc2VTQnBiaUIwYUdVZ2JXbGtaR3hsWEc0Z0lDQWdhV1lnS0NGMGFHbHpMaVJ2ZG1WeWJHRjVJSHg4SUNoMGFHbHpMbTl3ZEdsdmJuTXVhRTltWm5ObGRDQWhQVDBnSjJGMWRHOG5LU2tnZTF4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWpjM01vZTJ4bFpuUTZJR3hsWm5RZ0t5QW5jSGduZlNrN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbU56Y3loN2JXRnlaMmx1T2lBbk1IQjRKMzBwTzF4dUlDQWdJSDFjYmx4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nWlhabGJuUWdhR0Z1Wkd4bGNuTWdabTl5SUhSb1pTQnRiMlJoYkM1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5bGRtVnVkSE1vS1NCN1hHNGdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWIyNG9lMXh1SUNBZ0lDQWdKMjl3Wlc0dWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdWIzQmxiaTVpYVc1a0tIUm9hWE1wTEZ4dUlDQWdJQ0FnSjJOc2IzTmxMbnBtTG5SeWFXZG5aWEluT2lBb1pYWmxiblFzSUNSbGJHVnRaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNnb1pYWmxiblF1ZEdGeVoyVjBJRDA5UFNCZmRHaHBjeTRrWld4bGJXVnVkRnN3WFNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNna0tHVjJaVzUwTG5SaGNtZGxkQ2t1Y0dGeVpXNTBjeWduVzJSaGRHRXRZMnh2YzJGaWJHVmRKeWxiTUYwZ1BUMDlJQ1JsYkdWdFpXNTBLU2tnZXlBdkx5QnZibXg1SUdOc2IzTmxJSEpsZG1WaGJDQjNhR1Z1SUdsMEozTWdaWGh3YkdsamFYUnNlU0JqWVd4c1pXUmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHOXpaUzVoY0hCc2VTaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZDBiMmRuYkdVdWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdWRHOW5aMnhsTG1KcGJtUW9kR2hwY3lrc1hHNGdJQ0FnSUNBbmNtVnphWHBsYldVdWVtWXVkSEpwWjJkbGNpYzZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmZFhCa1lYUmxVRzl6YVhScGIyNG9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZMnh2YzJWUGJrTnNhV05ySUNZbUlIUm9hWE11YjNCMGFXOXVjeTV2ZG1WeWJHRjVLU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUnZkbVZ5YkdGNUxtOW1aaWduTG5wbUxuSmxkbVZoYkNjcExtOXVLQ2RqYkdsamF5NTZaaTV5WlhabFlXd25MQ0JtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hsTG5SaGNtZGxkQ0E5UFQwZ1gzUm9hWE11SkdWc1pXMWxiblJiTUYwZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FrTG1OdmJuUmhhVzV6S0Y5MGFHbHpMaVJsYkdWdFpXNTBXekJkTENCbExuUmhjbWRsZENrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNFa0xtTnZiblJoYVc1ektHUnZZM1Z0Wlc1MExDQmxMblJoY21kbGRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRjkwYUdsekxtTnNiM05sS0NrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVrWldWd1RHbHVheWtnZTF4dUlDQWdJQ0FnSkNoM2FXNWtiM2NwTG05dUtHQndiM0J6ZEdGMFpTNTZaaTV5WlhabFlXdzZKSHQwYUdsekxtbGtmV0FzSUhSb2FYTXVYMmhoYm1Sc1pWTjBZWFJsTG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQklZVzVrYkdWeklHMXZaR0ZzSUcxbGRHaHZaSE1nYjI0Z1ltRmpheTltYjNKM1lYSmtJR0oxZEhSdmJpQmpiR2xqYTNNZ2IzSWdZVzU1SUc5MGFHVnlJR1YyWlc1MElIUm9ZWFFnZEhKcFoyZGxjbk1nY0c5d2MzUmhkR1V1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmYUdGdVpHeGxVM1JoZEdVb1pTa2dlMXh1SUNBZ0lHbG1LSGRwYm1SdmR5NXNiMk5oZEdsdmJpNW9ZWE5vSUQwOVBTQW9JQ2NqSnlBcklIUm9hWE11YVdRcElDWW1JQ0YwYUdsekxtbHpRV04wYVhabEtYc2dkR2hwY3k1dmNHVnVLQ2s3SUgxY2JpQWdJQ0JsYkhObGV5QjBhR2x6TG1Oc2IzTmxLQ2s3SUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlFUnBjMkZpYkdWeklIUm9aU0J6WTNKdmJHd2dkMmhsYmlCU1pYWmxZV3dnYVhNZ2MyaHZkMjRnZEc4Z2NISmxkbVZ1ZENCMGFHVWdZbUZqYTJkeWIzVnVaQ0JtY205dElITm9hV1owYVc1blhHNGdJQ292WEc0Z0lGOWthWE5oWW14bFUyTnliMnhzS0NsN1hHNGdJQ0FnYVdZZ0tDUW9aRzlqZFcxbGJuUXBMbWhsYVdkb2RDZ3BJRDRnSkNoM2FXNWtiM2NwTG1obGFXZG9kQ2dwS1NCN1hHNGdJQ0FnSUNCMllYSWdjMk55YjJ4c1ZHOXdJRDBnSkNoM2FXNWtiM2NwTG5OamNtOXNiRlJ2Y0NncE8xeHVJQ0FnSUNBZ0pDaGNJbWgwYld4Y0lpbGNiaUFnSUNBZ0lDQWdMbU56Y3loY0luUnZjRndpTENBdGMyTnliMnhzVkc5d0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlNaV1Z1WVdKc1pYTWdkR2hsSUhOamNtOXNiQ0IzYUdWdUlGSmxkbVZoYkNCamJHOXpaWE5jYmlBZ0tpOWNiaUFnWDJWdVlXSnNaVk5qY205c2JDZ3BlMXh1SUNBZ0lHbG1JQ2drS0dSdlkzVnRaVzUwS1M1b1pXbG5hSFFvS1NBK0lDUW9kMmx1Wkc5M0tTNW9aV2xuYUhRb0tTa2dlMXh1SUNBZ0lDQWdkbUZ5SUhOamNtOXNiRlJ2Y0NBOUlIQmhjbk5sU1c1MEtDUW9YQ0pvZEcxc1hDSXBMbU56Y3loY0luUnZjRndpS1NrN1hHNGdJQ0FnSUNBa0tGd2lhSFJ0YkZ3aUtWeHVJQ0FnSUNBZ0lDQXVZM056S0Z3aWRHOXdYQ0lzSUZ3aVhDSXBPMXh1SUNBZ0lDQWdKQ2gzYVc1a2IzY3BMbk5qY205c2JGUnZjQ2d0YzJOeWIyeHNWRzl3S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlBjR1Z1Y3lCMGFHVWdiVzlrWVd3Z1kyOXVkSEp2Ykd4bFpDQmllU0JnZEdocGN5NGtZVzVqYUc5eVlDd2dZVzVrSUdOc2IzTmxjeUJoYkd3Z2IzUm9aWEp6SUdKNUlHUmxabUYxYkhRdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBWm1seVpYTWdVbVYyWldGc0kyTnNiM05sYldWY2JpQWdJQ29nUUdacGNtVnpJRkpsZG1WaGJDTnZjR1Z1WEc0Z0lDQXFMMXh1SUNCdmNHVnVLQ2tnZTF4dUlDQWdJQzh2SUdWcGRHaGxjaUIxY0dSaGRHVWdiM0lnY21Wd2JHRmpaU0JpY205M2MyVnlJR2hwYzNSdmNubGNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1SbFpYQk1hVzVyS1NCN1hHNGdJQ0FnSUNCMllYSWdhR0Z6YUNBOUlHQWpKSHQwYUdsekxtbGtmV0E3WEc1Y2JpQWdJQ0FnSUdsbUlDaDNhVzVrYjNjdWFHbHpkRzl5ZVM1d2RYTm9VM1JoZEdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NTFjR1JoZEdWSWFYTjBiM0o1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtaHBjM1J2Y25rdWNIVnphRk4wWVhSbEtIdDlMQ0FuSnl3Z2FHRnphQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG1ocGMzUnZjbmt1Y21Wd2JHRmpaVk4wWVhSbEtIdDlMQ0FuSnl3Z2FHRnphQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTVzYjJOaGRHbHZiaTVvWVhOb0lEMGdhR0Z6YUR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtbHpRV04wYVhabElEMGdkSEoxWlR0Y2JseHVJQ0FnSUM4dklFMWhhMlVnWld4bGJXVnVkSE1nYVc1MmFYTnBZbXhsTENCaWRYUWdjbVZ0YjNabElHUnBjM0JzWVhrNklHNXZibVVnYzI4Z2QyVWdZMkZ1SUdkbGRDQnphWHBsSUdGdVpDQndiM05wZEdsdmJtbHVaMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnTG1OemN5aDdJQ2QyYVhOcFltbHNhWFI1SnpvZ0oyaHBaR1JsYmljZ2ZTbGNiaUFnSUNBZ0lDQWdMbk5vYjNjb0tWeHVJQ0FnSUNBZ0lDQXVjMk55YjJ4c1ZHOXdLREFwTzF4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXViM1psY214aGVTa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a2IzWmxjbXhoZVM1amMzTW9leWQyYVhOcFltbHNhWFI1SnpvZ0oyaHBaR1JsYmlkOUtTNXphRzkzS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZkWEJrWVhSbFVHOXphWFJwYjI0b0tUdGNibHh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblJjYmlBZ0lDQWdJQzVvYVdSbEtDbGNiaUFnSUNBZ0lDNWpjM01vZXlBbmRtbHphV0pwYkdsMGVTYzZJQ2NuSUgwcE8xeHVYRzRnSUNBZ2FXWW9kR2hwY3k0a2IzWmxjbXhoZVNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrYjNabGNteGhlUzVqYzNNb2V5ZDJhWE5wWW1sc2FYUjVKem9nSnlkOUtTNW9hV1JsS0NrN1hHNGdJQ0FnSUNCcFppaDBhR2x6TGlSbGJHVnRaVzUwTG1oaGMwTnNZWE56S0NkbVlYTjBKeWtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTRrYjNabGNteGhlUzVoWkdSRGJHRnpjeWduWm1GemRDY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxpUmxiR1Z0Wlc1MExtaGhjME5zWVhOektDZHpiRzkzSnlrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a2IzWmxjbXhoZVM1aFpHUkRiR0Z6Y3lnbmMyeHZkeWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TG05d2RHbHZibk11YlhWc2RHbHdiR1ZQY0dWdVpXUXBJSHRjYmlBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNvZ1JtbHlaWE1nYVcxdFpXUnBZWFJsYkhrZ1ltVm1iM0psSUhSb1pTQnRiMlJoYkNCdmNHVnVjeTVjYmlBZ0lDQWdJQ0FxSUVOc2IzTmxjeUJoYm5rZ2IzUm9aWElnYlc5a1lXeHpJSFJvWVhRZ1lYSmxJR04xY25KbGJuUnNlU0J2Y0dWdVhHNGdJQ0FnSUNBZ0tpQkFaWFpsYm5RZ1VtVjJaV0ZzSTJOc2IzTmxiV1ZjYmlBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNTBjbWxuWjJWeUtDZGpiRzl6WlcxbExucG1MbkpsZG1WaGJDY3NJSFJvYVhNdWFXUXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDJScGMyRmliR1ZUWTNKdmJHd29LVHRjYmx4dUlDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQmhaR1JTWlhabFlXeFBjR1Z1UTJ4aGMzTmxjeWdwSUh0Y2JseHVJQ0FnSUNBZ0pDZ25hSFJ0YkNjcExtRmtaRU5zWVhOektDZHBjeTF5WlhabFlXd3RiM0JsYmljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFMXZkR2x2YmlCVlNTQnRaWFJvYjJRZ2IyWWdjbVYyWldGc1hHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVoYm1sdFlYUnBiMjVKYmlrZ2UxeHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z1lXWjBaWEpCYm1sdFlYUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11SkdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnSUNBdVlYUjBjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQW5ZWEpwWVMxb2FXUmtaVzRuT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZDBZV0pwYm1SbGVDYzZJQzB4WEc0Z0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0F1Wm05amRYTW9LVHRjYmlBZ0lDQWdJQ0FnWVdSa1VtVjJaV0ZzVDNCbGJrTnNZWE56WlhNb0tUdGNiaUFnSUNBZ0lDQWdTMlY1WW05aGNtUXVkSEpoY0VadlkzVnpLRjkwYUdsekxpUmxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWIzWmxjbXhoZVNrZ2UxeHVJQ0FnSUNBZ0lDQk5iM1JwYjI0dVlXNXBiV0YwWlVsdUtIUm9hWE11Skc5MlpYSnNZWGtzSUNkbVlXUmxMV2x1SnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCTmIzUnBiMjR1WVc1cGJXRjBaVWx1S0hSb2FYTXVKR1ZzWlcxbGJuUXNJSFJvYVhNdWIzQjBhVzl1Y3k1aGJtbHRZWFJwYjI1SmJpd2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdsekxpUmxiR1Z0Wlc1MEtTQjdJQzh2SUhCeWIzUmxZM1FnWVdkaGFXNXpkQ0J2WW1wbFkzUWdhR0YyYVc1bklHSmxaVzRnY21WdGIzWmxaRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVabTlqZFhOaFlteGxSV3hsYldWdWRITWdQU0JMWlhsaWIyRnlaQzVtYVc1a1JtOWpkWE5oWW14bEtIUm9hWE11SkdWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lHRm1kR1Z5UVc1cGJXRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnFVWFZsY25rZ2JXVjBhRzlrSUc5bUlISmxkbVZoYkZ4dUlDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1dmRtVnliR0Y1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Skc5MlpYSnNZWGt1YzJodmR5Z3dLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWMyaHZkeWgwYUdsekxtOXdkR2x2Ym5NdWMyaHZkMFJsYkdGNUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5Qm9ZVzVrYkdVZ1lXTmpaWE56YVdKcGJHbDBlVnh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblJjYmlBZ0lDQWdJQzVoZEhSeUtIdGNiaUFnSUNBZ0lDQWdKMkZ5YVdFdGFHbGtaR1Z1SnpvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNkMFlXSnBibVJsZUNjNklDMHhYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdMbVp2WTNWektDazdYRzRnSUNBZ1MyVjVZbTloY21RdWRISmhjRVp2WTNWektIUm9hWE11SkdWc1pXMWxiblFwTzF4dVhHNGdJQ0FnWVdSa1VtVjJaV0ZzVDNCbGJrTnNZWE56WlhNb0tUdGNibHh1SUNBZ0lIUm9hWE11WDJWNGRISmhTR0Z1Wkd4bGNuTW9LVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVacGNtVnpJSGRvWlc0Z2RHaGxJRzF2WkdGc0lHaGhjeUJ6ZFdOalpYTnpablZzYkhrZ2IzQmxibVZrTGx4dUlDQWdJQ0FxSUVCbGRtVnVkQ0JTWlhabFlXd2piM0JsYmx4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWRISnBaMmRsY2lnbmIzQmxiaTU2Wmk1eVpYWmxZV3duS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR1J6SUdWNGRISmhJR1YyWlc1MElHaGhibVJzWlhKeklHWnZjaUIwYUdVZ1ltOWtlU0JoYm1RZ2QybHVaRzkzSUdsbUlHNWxZMlZ6YzJGeWVTNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWxlSFJ5WVVoaGJtUnNaWEp6S0NrZ2UxeHVJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdhV1lvSVhSb2FYTXVKR1ZzWlcxbGJuUXBJSHNnY21WMGRYSnVPeUI5SUM4dklFbG1JSGRsSjNKbElHbHVJSFJvWlNCdGFXUmtiR1VnYjJZZ1kyeGxZVzUxY0N3Z1pHOXVKM1FnWm5KbFlXc2diM1YwWEc0Z0lDQWdkR2hwY3k1bWIyTjFjMkZpYkdWRmJHVnRaVzUwY3lBOUlFdGxlV0p2WVhKa0xtWnBibVJHYjJOMWMyRmliR1VvZEdocGN5NGtaV3hsYldWdWRDazdYRzVjYmlBZ0lDQnBaaUFvSVhSb2FYTXViM0IwYVc5dWN5NXZkbVZ5YkdGNUlDWW1JSFJvYVhNdWIzQjBhVzl1Y3k1amJHOXpaVTl1UTJ4cFkyc2dKaVlnSVhSb2FYTXViM0IwYVc5dWN5NW1kV3hzVTJOeVpXVnVLU0I3WEc0Z0lDQWdJQ0FrS0NkaWIyUjVKeWt1YjI0b0oyTnNhV05yTG5wbUxuSmxkbVZoYkNjc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVXVkR0Z5WjJWMElEMDlQU0JmZEdocGN5NGtaV3hsYldWdWRGc3dYU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDUXVZMjl1ZEdGcGJuTW9YM1JvYVhNdUpHVnNaVzFsYm5SYk1GMHNJR1V1ZEdGeVoyVjBLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJU1F1WTI5dWRHRnBibk1vWkc5amRXMWxiblFzSUdVdWRHRnlaMlYwS1NrZ2V5QnlaWFIxY200N0lIMWNiaUFnSUNBZ0lDQWdYM1JvYVhNdVkyeHZjMlVvS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WTJ4dmMyVlBia1Z6WXlrZ2UxeHVJQ0FnSUNBZ0pDaDNhVzVrYjNjcExtOXVLQ2RyWlhsa2IzZHVMbnBtTG5KbGRtVmhiQ2NzSUdaMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdTMlY1WW05aGNtUXVhR0Z1Wkd4bFMyVjVLR1VzSUNkU1pYWmxZV3duTENCN1hHNGdJQ0FnSUNBZ0lDQWdZMnh2YzJVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtOXdkR2x2Ym5NdVkyeHZjMlZQYmtWell5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amJHOXpaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJ4dmMyVnpJSFJvWlNCdGIyUmhiQzVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQm1hWEpsY3lCU1pYWmxZV3dqWTJ4dmMyVmtYRzRnSUNBcUwxeHVJQ0JqYkc5elpTZ3BJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhWE5CWTNScGRtVWdmSHdnSVhSb2FYTXVKR1ZzWlcxbGJuUXVhWE1vSnpwMmFYTnBZbXhsSnlrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dklFMXZkR2x2YmlCVlNTQnRaWFJvYjJRZ2IyWWdhR2xrYVc1blhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVoYm1sdFlYUnBiMjVQZFhRcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWIzWmxjbXhoZVNrZ2UxeHVJQ0FnSUNBZ0lDQk5iM1JwYjI0dVlXNXBiV0YwWlU5MWRDaDBhR2x6TGlSdmRtVnliR0Y1TENBblptRmtaUzF2ZFhRbktUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdUVzkwYVc5dUxtRnVhVzFoZEdWUGRYUW9kR2hwY3k0a1pXeGxiV1Z1ZEN3Z2RHaHBjeTV2Y0hScGIyNXpMbUZ1YVcxaGRHbHZiazkxZEN3Z1ptbHVhWE5vVlhBcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCcVVYVmxjbmtnYldWMGFHOWtJRzltSUdocFpHbHVaMXh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNW9hV1JsS0hSb2FYTXViM0IwYVc5dWN5NW9hV1JsUkdWc1lYa3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbTkyWlhKc1lYa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtiM1psY214aGVTNW9hV1JsS0RBc0lHWnBibWx6YUZWd0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCbWFXNXBjMmhWY0NncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFTnZibVJwZEdsdmJtRnNjeUIwYnlCeVpXMXZkbVVnWlhoMGNtRWdaWFpsYm5RZ2JHbHpkR1Z1WlhKeklHRmtaR1ZrSUc5dUlHOXdaVzVjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtTnNiM05sVDI1RmMyTXBJSHRjYmlBZ0lDQWdJQ1FvZDJsdVpHOTNLUzV2Wm1Zb0oydGxlV1J2ZDI0dWVtWXVjbVYyWldGc0p5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtOXdkR2x2Ym5NdWIzWmxjbXhoZVNBbUppQjBhR2x6TG05d2RHbHZibk11WTJ4dmMyVlBia05zYVdOcktTQjdYRzRnSUNBZ0lDQWtLQ2RpYjJSNUp5a3ViMlptS0NkamJHbGpheTU2Wmk1eVpYWmxZV3duS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1aaWduYTJWNVpHOTNiaTU2Wmk1eVpYWmxZV3duS1R0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdacGJtbHphRlZ3S0NrZ2UxeHVYRzRnSUNBZ0lDQnBaaUFvSkNnbkxuSmxkbVZoYkRwMmFYTnBZbXhsSnlrdWJHVnVaM1JvSUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBa0tDZG9kRzFzSnlrdWNtVnRiM1psUTJ4aGMzTW9KMmx6TFhKbGRtVmhiQzF2Y0dWdUp5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJRXRsZVdKdllYSmtMbkpsYkdWaGMyVkdiMk4xY3loZmRHaHBjeTRrWld4bGJXVnVkQ2s3WEc1Y2JpQWdJQ0FnSUY5MGFHbHpMaVJsYkdWdFpXNTBMbUYwZEhJb0oyRnlhV0V0YUdsa1pHVnVKeXdnZEhKMVpTazdYRzVjYmlBZ0lDQWdJRjkwYUdsekxsOWxibUZpYkdWVFkzSnZiR3dvS1R0Y2JseHVJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQXFJRVpwY21WeklIZG9aVzRnZEdobElHMXZaR0ZzSUdseklHUnZibVVnWTJ4dmMybHVaeTVjYmlBZ0lDQWdJQ29nUUdWMlpXNTBJRkpsZG1WaGJDTmpiRzl6WldSY2JpQWdJQ0FnSUNvdlhHNGdJQ0FnSUNCZmRHaHBjeTRrWld4bGJXVnVkQzUwY21sbloyVnlLQ2RqYkc5elpXUXVlbVl1Y21WMlpXRnNKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdLaUJTWlhObGRITWdkR2hsSUcxdlpHRnNJR052Ym5SbGJuUmNiaUFnSUNBcUlGUm9hWE1nY0hKbGRtVnVkSE1nWVNCeWRXNXVhVzVuSUhacFpHVnZJSFJ2SUd0bFpYQWdaMjlwYm1jZ2FXNGdkR2hsSUdKaFkydG5jbTkxYm1SY2JpQWdJQ0FxTDF4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVjbVZ6WlhSUGJrTnNiM05sS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbWgwYld3b2RHaHBjeTRrWld4bGJXVnVkQzVvZEcxc0tDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11YVhOQlkzUnBkbVVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdhV1lnS0Y5MGFHbHpMbTl3ZEdsdmJuTXVaR1ZsY0V4cGJtc3BJSHRjYmlBZ0lDQWdJQ0JwWmlBb2QybHVaRzkzTG1ocGMzUnZjbmt1Y21Wd2JHRmpaVk4wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0IzYVc1a2IzY3VhR2x6ZEc5eWVTNXlaWEJzWVdObFUzUmhkR1VvSnljc0lHUnZZM1Z0Wlc1MExuUnBkR3hsTENCM2FXNWtiM2N1Ykc5allYUnBiMjR1YUhKbFppNXlaWEJzWVdObEtHQWpKSHQwYUdsekxtbGtmV0FzSUNjbktTazdYRzRnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNW9ZWE5vSUQwZ0p5YzdYRzRnSUNBZ0lDQWdmVnh1SUNBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGlSaGJtTm9iM0l1Wm05amRYTW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWIyZG5iR1Z6SUhSb1pTQnZjR1Z1TDJOc2IzTmxaQ0J6ZEdGMFpTQnZaaUJoSUcxdlpHRnNMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvdlhHNGdJSFJ2WjJkc1pTZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXBjMEZqZEdsMlpTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1amJHOXpaU2dwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TG05d1pXNG9LVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbGMzUnliM2x6SUdGdUlHbHVjM1JoYm1ObElHOW1JR0VnYlc5a1lXd3VYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2k5Y2JpQWdYMlJsYzNSeWIza29LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXZkbVZ5YkdGNUtTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG1Gd2NHVnVaRlJ2S0NRb2RHaHBjeTV2Y0hScGIyNXpMbUZ3Y0dWdVpGUnZLU2s3SUM4dklHMXZkbVVnSkdWc1pXMWxiblFnYjNWMGMybGtaU0J2WmlBa2IzWmxjbXhoZVNCMGJ5QndjbVYyWlc1MElHVnljbTl5SUhWdWNtVm5hWE4wWlhKUWJIVm5hVzRvS1Z4dUlDQWdJQ0FnZEdocGN5NGtiM1psY214aGVTNW9hV1JsS0NrdWIyWm1LQ2t1Y21WdGIzWmxLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YUdsa1pTZ3BMbTltWmlncE8xeHVJQ0FnSUhSb2FYTXVKR0Z1WTJodmNpNXZabVlvSnk1NlppY3BPMXh1SUNBZ0lDUW9kMmx1Wkc5M0tTNXZabVlvWUM1NlppNXlaWFpsWVd3NkpIdDBhR2x6TG1sa2ZXQXBPMXh1SUNCOU8xeHVmVnh1WEc1U1pYWmxZV3d1WkdWbVlYVnNkSE1nUFNCN1hHNGdJQzhxS2x4dUlDQWdLaUJOYjNScGIyNHRWVWtnWTJ4aGMzTWdkRzhnZFhObElHWnZjaUJoYm1sdFlYUmxaQ0JsYkdWdFpXNTBjeTRnU1dZZ2JtOXVaU0IxYzJWa0xDQmtaV1poZFd4MGN5QjBieUJ6YVcxd2JHVWdjMmh2ZHk5b2FXUmxMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYRzRnSUNBcUlFQmtaV1poZFd4MElDY25YRzRnSUNBcUwxeHVJQ0JoYm1sdFlYUnBiMjVKYmpvZ0p5Y3NYRzRnSUM4cUtseHVJQ0FnS2lCTmIzUnBiMjR0VlVrZ1kyeGhjM01nZEc4Z2RYTmxJR1p2Y2lCaGJtbHRZWFJsWkNCbGJHVnRaVzUwY3k0Z1NXWWdibTl1WlNCMWMyVmtMQ0JrWldaaGRXeDBjeUIwYnlCemFXMXdiR1VnYzJodmR5OW9hV1JsTGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQXFJRUJrWldaaGRXeDBJQ2NuWEc0Z0lDQXFMMXh1SUNCaGJtbHRZWFJwYjI1UGRYUTZJQ2NuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dWR2x0WlN3Z2FXNGdiWE1zSUhSdklHUmxiR0Y1SUhSb1pTQnZjR1Z1YVc1bklHOW1JR0VnYlc5a1lXd2dZV1owWlhJZ1lTQmpiR2xqYXlCcFppQnVieUJoYm1sdFlYUnBiMjRnZFhObFpDNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FxTDF4dUlDQnphRzkzUkdWc1lYazZJREFzWEc0Z0lDOHFLbHh1SUNBZ0tpQlVhVzFsTENCcGJpQnRjeXdnZEc4Z1pHVnNZWGtnZEdobElHTnNiM05wYm1jZ2IyWWdZU0J0YjJSaGJDQmhablJsY2lCaElHTnNhV05ySUdsbUlHNXZJR0Z1YVcxaGRHbHZiaUIxYzJWa0xseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSURCY2JpQWdJQ292WEc0Z0lHaHBaR1ZFWld4aGVUb2dNQ3hjYmlBZ0x5b3FYRzRnSUNBcUlFRnNiRzkzY3lCaElHTnNhV05ySUc5dUlIUm9aU0JpYjJSNUwyOTJaWEpzWVhrZ2RHOGdZMnh2YzJVZ2RHaGxJRzF2WkdGc0xseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCMGNuVmxYRzRnSUNBcUwxeHVJQ0JqYkc5elpVOXVRMnhwWTJzNklIUnlkV1VzWEc0Z0lDOHFLbHh1SUNBZ0tpQkJiR3h2ZDNNZ2RHaGxJRzF2WkdGc0lIUnZJR05zYjNObElHbG1JSFJvWlNCMWMyVnlJSEJ5WlhOelpYTWdkR2hsSUdCRlUwTkJVRVZnSUd0bGVTNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ2RISjFaVnh1SUNBZ0tpOWNiaUFnWTJ4dmMyVlBia1Z6WXpvZ2RISjFaU3hjYmlBZ0x5b3FYRzRnSUNBcUlFbG1JSFJ5ZFdVc0lHRnNiRzkzY3lCdGRXeDBhWEJzWlNCdGIyUmhiSE1nZEc4Z1ltVWdaR2x6Y0d4aGVXVmtJR0YwSUc5dVkyVXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCdGRXeDBhWEJzWlU5d1pXNWxaRG9nWm1Gc2MyVXNYRzRnSUM4cUtseHVJQ0FnS2lCRWFYTjBZVzVqWlN3Z2FXNGdjR2w0Wld4ekxDQjBhR1VnYlc5a1lXd2djMmh2ZFd4a0lIQjFjMmdnWkc5M2JpQm1jbTl0SUhSb1pTQjBiM0FnYjJZZ2RHaGxJSE5qY21WbGJpNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZITjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnWVhWMGIxeHVJQ0FnS2k5Y2JpQWdkazltWm5ObGREb2dKMkYxZEc4bkxGeHVJQ0F2S2lwY2JpQWdJQ29nUkdsemRHRnVZMlVzSUdsdUlIQnBlR1ZzY3l3Z2RHaGxJRzF2WkdGc0lITm9iM1ZzWkNCd2RYTm9JR2x1SUdaeWIyMGdkR2hsSUhOcFpHVWdiMllnZEdobElITmpjbVZsYmk1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZkhOMGNtbHVaMzFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdZWFYwYjF4dUlDQWdLaTljYmlBZ2FFOW1abk5sZERvZ0oyRjFkRzhuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNkeklIUm9aU0J0YjJSaGJDQjBieUJpWlNCbWRXeHNjMk55WldWdUxDQmpiMjF3YkdWMFpXeDVJR0pzYjJOcmFXNW5JRzkxZENCMGFHVWdjbVZ6ZENCdlppQjBhR1VnZG1sbGR5NGdTbE1nWTJobFkydHpJR1p2Y2lCMGFHbHpJR0Z6SUhkbGJHd3VYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCbWRXeHNVMk55WldWdU9pQm1ZV3h6WlN4Y2JpQWdMeW9xWEc0Z0lDQXFJRkJsY21ObGJuUmhaMlVnYjJZZ2MyTnlaV1Z1SUdobGFXZG9kQ0IwYUdVZ2JXOWtZV3dnYzJodmRXeGtJSEIxYzJnZ2RYQWdabkp2YlNCMGFHVWdZbTkwZEc5dElHOW1JSFJvWlNCMmFXVjNMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYRzRnSUNBcUlFQmtaV1poZFd4MElERXdYRzRnSUNBcUwxeHVJQ0JpZEcxUFptWnpaWFJRWTNRNklERXdMRnh1SUNBdktpcGNiaUFnSUNvZ1FXeHNiM2R6SUhSb1pTQnRiMlJoYkNCMGJ5Qm5aVzVsY21GMFpTQmhiaUJ2ZG1WeWJHRjVJR1JwZGl3Z2QyaHBZMmdnZDJsc2JDQmpiM1psY2lCMGFHVWdkbWxsZHlCM2FHVnVJRzF2WkdGc0lHOXdaVzV6TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0IwY25WbFhHNGdJQ0FxTDF4dUlDQnZkbVZ5YkdGNU9pQjBjblZsTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNkeklIUm9aU0J0YjJSaGJDQjBieUJ5WlcxdmRtVWdZVzVrSUhKbGFXNXFaV04wSUcxaGNtdDFjQ0J2YmlCamJHOXpaUzRnVTJodmRXeGtJR0psSUhSeWRXVWdhV1lnZFhOcGJtY2dkbWxrWlc4Z1pXeGxiV1Z1ZEhNZ2R5OXZJSFZ6YVc1bklIQnliM1pwWkdWeUozTWdZWEJwTENCdmRHaGxjbmRwYzJVc0lIWnBaR1Z2Y3lCM2FXeHNJR052Ym5ScGJuVmxJSFJ2SUhCc1lYa2dhVzRnZEdobElHSmhZMnRuY205MWJtUXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCeVpYTmxkRTl1UTJ4dmMyVTZJR1poYkhObExGeHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzZHpJSFJvWlNCdGIyUmhiQ0IwYnlCaGJIUmxjaUIwYUdVZ2RYSnNJRzl1SUc5d1pXNHZZMnh2YzJVc0lHRnVaQ0JoYkd4dmQzTWdkR2hsSUhWelpTQnZaaUIwYUdVZ1lHSmhZMnRnSUdKMWRIUnZiaUIwYnlCamJHOXpaU0J0YjJSaGJITXVJRUZNVTA4c0lHRnNiRzkzY3lCaElHMXZaR0ZzSUhSdklHRjFkRzh0YldGdWFXRmpZV3hzZVNCdmNHVnVJRzl1SUhCaFoyVWdiRzloWkNCSlJpQjBhR1VnYUdGemFDQTlQVDBnZEdobElHMXZaR0ZzSjNNZ2RYTmxjaTF6WlhRZ2FXUXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCa1pXVndUR2x1YXpvZ1ptRnNjMlVzWEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdVZ2RHaGxJR0p5YjNkelpYSWdhR2x6ZEc5eWVTQjNhWFJvSUhSb1pTQnZjR1Z1SUcxdlpHRnNYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUdSbFptRjFiSFFnWm1Gc2MyVmNiaUFnSUNvdlhHNGdJSFZ3WkdGMFpVaHBjM1J2Y25rNklHWmhiSE5sTEZ4dUlDQWdJQzhxS2x4dUlDQWdLaUJCYkd4dmQzTWdkR2hsSUcxdlpHRnNJSFJ2SUdGd2NHVnVaQ0IwYnlCamRYTjBiMjBnWkdsMkxseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSUZ3aVltOWtlVndpWEc0Z0lDQXFMMXh1SUNCaGNIQmxibVJVYnpvZ1hDSmliMlI1WENJc1hHNGdJQzhxS2x4dUlDQWdLaUJCYkd4dmQzTWdZV1JrYVc1bklHRmtaR2wwYVc5dVlXd2dZMnhoYzNNZ2JtRnRaWE1nZEc4Z2RHaGxJSEpsZG1WaGJDQnZkbVZ5YkdGNUxseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSUNjblhHNGdJQ0FxTDF4dUlDQmhaR1JwZEdsdmJtRnNUM1psY214aGVVTnNZWE56WlhNNklDY25YRzU5TzF4dVhHNWxlSEJ2Y25RZ2UxSmxkbVZoYkgwN1hHNGlYWDA9XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24ucmV2ZWFsLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNsaWRlciA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmtleWJvYXJkJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubW90aW9uJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwzID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWw0ID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwudG91Y2gnKTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbDUgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC50cmlnZ2VycycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogU2xpZGVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zbGlkZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRvdWNoXG4gKi9cblxudmFyIFNsaWRlciA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhTbGlkZXIsIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIFNsaWRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2xpZGVyKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2xpZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2xpZGVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2xpZGVyLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc2xpZGVyIGNvbnRyb2wuXG4gICAgICogQGNsYXNzXG4gICAgICogQG5hbWUgU2xpZGVyXG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIHNsaWRlciBjb250cm9sLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX2pxdWVyeTIuZGVmYXVsdC5leHRlbmQoe30sIFNsaWRlci5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnU2xpZGVyJzsgLy8gaWU5IGJhY2sgY29tcGF0XG5cbiAgICAgIC8vIFRvdWNoIGFuZCBUcmlnZ2VycyBpbml0cyBhcmUgaWRlbXBvdGVudCwgd2UganVzdCBuZWVkIHRvIG1ha2Ugc3VyZSBpdCdzIGluaXRpYWxpZWQuXG4gICAgICBfZm91bmRhdGlvblV0aWw0LlRvdWNoLmluaXQoX2pxdWVyeTIuZGVmYXVsdCk7XG4gICAgICBfZm91bmRhdGlvblV0aWw1LlRyaWdnZXJzLmluaXQoX2pxdWVyeTIuZGVmYXVsdCk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcblxuICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLnJlZ2lzdGVyKCdTbGlkZXInLCB7XG4gICAgICAgICdsdHInOiB7XG4gICAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ2luY3JlYXNlJyxcbiAgICAgICAgICAnQVJST1dfVVAnOiAnaW5jcmVhc2UnLFxuICAgICAgICAgICdBUlJPV19ET1dOJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgICAnQVJST1dfTEVGVCc6ICdkZWNyZWFzZScsXG4gICAgICAgICAgJ1NISUZUX0FSUk9XX1JJR0hUJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAgICdTSElGVF9BUlJPV19VUCc6ICdpbmNyZWFzZV9mYXN0JyxcbiAgICAgICAgICAnU0hJRlRfQVJST1dfRE9XTic6ICdkZWNyZWFzZV9mYXN0JyxcbiAgICAgICAgICAnU0hJRlRfQVJST1dfTEVGVCc6ICdkZWNyZWFzZV9mYXN0JyxcbiAgICAgICAgICAnSE9NRSc6ICdtaW4nLFxuICAgICAgICAgICdFTkQnOiAnbWF4J1xuICAgICAgICB9LFxuICAgICAgICAncnRsJzoge1xuICAgICAgICAgICdBUlJPV19MRUZUJzogJ2luY3JlYXNlJyxcbiAgICAgICAgICAnQVJST1dfUklHSFQnOiAnZGVjcmVhc2UnLFxuICAgICAgICAgICdTSElGVF9BUlJPV19MRUZUJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAgICdTSElGVF9BUlJPV19SSUdIVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWxpemVzIHRoZSBwbHVnaW4gYnkgcmVhZGluZy9zZXR0aW5nIGF0dHJpYnV0ZXMsIGNyZWF0aW5nIGNvbGxlY3Rpb25zIGFuZCBzZXR0aW5nIHRoZSBpbml0aWFsIHBvc2l0aW9uIG9mIHRoZSBoYW5kbGUocykuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuICAgICAgdGhpcy5oYW5kbGVzID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpO1xuXG4gICAgICB0aGlzLiRoYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoMCk7XG4gICAgICB0aGlzLiRpbnB1dCA9IHRoaXMuaW5wdXRzLmxlbmd0aCA/IHRoaXMuaW5wdXRzLmVxKDApIDogKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArIHRoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLWNvbnRyb2xzJykpO1xuICAgICAgdGhpcy4kZmlsbCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc2xpZGVyLWZpbGxdJykuY3NzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJywgMCk7XG5cbiAgICAgIHZhciBpc0RibCA9IGZhbHNlLFxuICAgICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmlucHV0cyA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgpLmFkZCh0aGlzLiRpbnB1dCk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5iaW5kaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0SW5pdEF0dHIoMCk7XG5cbiAgICAgIGlmICh0aGlzLmhhbmRsZXNbMV0pIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4kaGFuZGxlMiA9IHRoaXMuaGFuZGxlcy5lcSgxKTtcbiAgICAgICAgdGhpcy4kaW5wdXQyID0gdGhpcy5pbnB1dHMubGVuZ3RoID4gMSA/IHRoaXMuaW5wdXRzLmVxKDEpIDogKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArIHRoaXMuJGhhbmRsZTIuYXR0cignYXJpYS1jb250cm9scycpKTtcblxuICAgICAgICBpZiAoIXRoaXMuaW5wdXRzWzFdKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHMgPSB0aGlzLmlucHV0cy5hZGQodGhpcy4kaW5wdXQyKTtcbiAgICAgICAgfVxuICAgICAgICBpc0RibCA9IHRydWU7XG5cbiAgICAgICAgLy8gdGhpcy4kaGFuZGxlLnRyaWdnZXJIYW5kbGVyKCdjbGljay56Zi5zbGlkZXInKTtcbiAgICAgICAgdGhpcy5fc2V0SW5pdEF0dHIoMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBoYW5kbGUgcG9zaXRpb25zXG4gICAgICB0aGlzLnNldEhhbmRsZXMoKTtcblxuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0SGFuZGxlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhhbmRsZXMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuaGFuZGxlc1sxXSkge1xuICAgICAgICB0aGlzLl9zZXRIYW5kbGVQb3ModGhpcy4kaGFuZGxlLCB0aGlzLmlucHV0cy5lcSgwKS52YWwoKSwgdHJ1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5fc2V0SGFuZGxlUG9zKF90aGlzMy4kaGFuZGxlMiwgX3RoaXMzLmlucHV0cy5lcSgxKS52YWwoKSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZSwgdGhpcy5pbnB1dHMuZXEoMCkudmFsKCksIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19yZWZsb3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVmbG93KCkge1xuICAgICAgdGhpcy5zZXRIYW5kbGVzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gZmxvYXRpbmcgcG9pbnQgKHRoZSB2YWx1ZSkgdG8gYmUgdHJhbnNmb3JtZWQgdXNpbmcgdG8gYSByZWxhdGl2ZSBwb3NpdGlvbiBvbiB0aGUgc2xpZGVyICh0aGUgaW52ZXJzZSBvZiBfdmFsdWUpXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3BjdE9mQmFyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BjdE9mQmFyKHZhbHVlKSB7XG4gICAgICB2YXIgcGN0T2ZCYXIgPSBwZXJjZW50KHZhbHVlIC0gdGhpcy5vcHRpb25zLnN0YXJ0LCB0aGlzLm9wdGlvbnMuZW5kIC0gdGhpcy5vcHRpb25zLnN0YXJ0KTtcblxuICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMucG9zaXRpb25WYWx1ZUZ1bmN0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJwb3dcIjpcbiAgICAgICAgICBwY3RPZkJhciA9IHRoaXMuX2xvZ1RyYW5zZm9ybShwY3RPZkJhcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJsb2dcIjpcbiAgICAgICAgICBwY3RPZkJhciA9IHRoaXMuX3Bvd1RyYW5zZm9ybShwY3RPZkJhcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwY3RPZkJhci50b0ZpeGVkKDIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQGZ1bmN0aW9uXG4gICAgKiBAcHJpdmF0ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHBjdE9mQmFyIC0gZmxvYXRpbmcgcG9pbnQsIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgc2xpZGVyICh0eXBpY2FsbHkgYmV0d2VlbiAwLTEpIHRvIGJlIHRyYW5zZm9ybWVkIHRvIGEgdmFsdWVcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfdmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdmFsdWUocGN0T2ZCYXIpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLnBvc2l0aW9uVmFsdWVGdW5jdGlvbikge1xuICAgICAgICBjYXNlIFwicG93XCI6XG4gICAgICAgICAgcGN0T2ZCYXIgPSB0aGlzLl9wb3dUcmFuc2Zvcm0ocGN0T2ZCYXIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibG9nXCI6XG4gICAgICAgICAgcGN0T2ZCYXIgPSB0aGlzLl9sb2dUcmFuc2Zvcm0ocGN0T2ZCYXIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gKHRoaXMub3B0aW9ucy5lbmQgLSB0aGlzLm9wdGlvbnMuc3RhcnQpICogcGN0T2ZCYXIgKyBwYXJzZUZsb2F0KHRoaXMub3B0aW9ucy5zdGFydCk7XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBmdW5jdGlvblxuICAgICogQHByaXZhdGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIGZsb2F0aW5nIHBvaW50ICh0eXBpY2FsbHkgYmV0d2VlbiAwLTEpIHRvIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRoZSBsb2cgZnVuY3Rpb25cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfbG9nVHJhbnNmb3JtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2xvZ1RyYW5zZm9ybSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VMb2codGhpcy5vcHRpb25zLm5vbkxpbmVhckJhc2UsIHZhbHVlICogKHRoaXMub3B0aW9ucy5ub25MaW5lYXJCYXNlIC0gMSkgKyAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBmdW5jdGlvblxuICAgICogQHByaXZhdGVcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIGZsb2F0aW5nIHBvaW50ICh0eXBpY2FsbHkgYmV0d2VlbiAwLTEpIHRvIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRoZSBwb3dlciBmdW5jdGlvblxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19wb3dUcmFuc2Zvcm0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcG93VHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgICByZXR1cm4gKE1hdGgucG93KHRoaXMub3B0aW9ucy5ub25MaW5lYXJCYXNlLCB2YWx1ZSkgLSAxKSAvICh0aGlzLm9wdGlvbnMubm9uTGluZWFyQmFzZSAtIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWxlY3RlZCBoYW5kbGUgYW5kIGZpbGwgYmFyLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRobmRsIC0gdGhlIHNlbGVjdGVkIGhhbmRsZSB0byBtb3ZlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsb2NhdGlvbiAtIGZsb2F0aW5nIHBvaW50IGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzIG9mIHRoZSBzbGlkZXIgYmFyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBvbiBjb21wbGV0aW9uLlxuICAgICAqIEBmaXJlcyBTbGlkZXIjbW92ZWRcbiAgICAgKiBAZmlyZXMgU2xpZGVyI2NoYW5nZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldEhhbmRsZVBvcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRIYW5kbGVQb3MoJGhuZGwsIGxvY2F0aW9uLCBub0ludmVydCwgY2IpIHtcbiAgICAgIC8vIGRvbid0IG1vdmUgaWYgdGhlIHNsaWRlciBoYXMgYmVlbiBkaXNhYmxlZCBzaW5jZSBpdHMgaW5pdGlhbGl6YXRpb25cbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvL21pZ2h0IG5lZWQgdG8gYWx0ZXIgdGhhdCBzbGlnaHRseSBmb3IgYmFycyB0aGF0IHdpbGwgaGF2ZSBvZGQgbnVtYmVyIHNlbGVjdGlvbnMuXG4gICAgICBsb2NhdGlvbiA9IHBhcnNlRmxvYXQobG9jYXRpb24pOyAvL29uIGlucHV0IGNoYW5nZSBldmVudHMsIGNvbnZlcnQgc3RyaW5nIHRvIG51bWJlci4uLmdydW1ibGUuXG5cbiAgICAgIC8vIHByZXZlbnQgc2xpZGVyIGZyb20gcnVubmluZyBvdXQgb2YgYm91bmRzLCBpZiB2YWx1ZSBleGNlZWRzIHRoZSBsaW1pdHMgc2V0IHRocm91Z2ggb3B0aW9ucywgb3ZlcnJpZGUgdGhlIHZhbHVlIHRvIG1pbi9tYXhcbiAgICAgIGlmIChsb2NhdGlvbiA8IHRoaXMub3B0aW9ucy5zdGFydCkge1xuICAgICAgICBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5zdGFydDtcbiAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gPiB0aGlzLm9wdGlvbnMuZW5kKSB7XG4gICAgICAgIGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRGJsID0gdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkO1xuXG4gICAgICAvL3RoaXMgaXMgZm9yIHNpbmdsZS1oYW5kbGVkIHZlcnRpY2FsIHNsaWRlcnMsIGl0IGFkanVzdHMgdGhlIHZhbHVlIHRvIGFjY291bnQgZm9yIHRoZSBzbGlkZXIgYmVpbmcgXCJ1cHNpZGUtZG93blwiXG4gICAgICAvL2ZvciBjbGljayBhbmQgZHJhZyBldmVudHMsIGl0J3Mgd2VpcmQgZHVlIHRvIHRoZSBzY2FsZSgtMSwgMSkgY3NzIHByb3BlcnR5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZlcnRpY2FsICYmICFub0ludmVydCkge1xuICAgICAgICBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5lbmQgLSBsb2NhdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGJsKSB7XG4gICAgICAgIC8vdGhpcyBibG9jayBpcyB0byBwcmV2ZW50IDIgaGFuZGxlcyBmcm9tIGNyb3NzaW5nIGVhY2hvdGhlci4gQ291bGQvc2hvdWxkIGJlIGltcHJvdmVkLlxuICAgICAgICBpZiAodGhpcy5oYW5kbGVzLmluZGV4KCRobmRsKSA9PT0gMCkge1xuICAgICAgICAgIHZhciBoMlZhbCA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlMi5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24gPj0gaDJWYWwgPyBoMlZhbCAtIHRoaXMub3B0aW9ucy5zdGVwIDogbG9jYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGgxVmFsID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUuYXR0cignYXJpYS12YWx1ZW5vdycpKTtcbiAgICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uIDw9IGgxVmFsID8gaDFWYWwgKyB0aGlzLm9wdGlvbnMuc3RlcCA6IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgdmVydCA9IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCxcbiAgICAgICAgICBoT3JXID0gdmVydCA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgICBsT3JUID0gdmVydCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICAgIGhhbmRsZURpbSA9ICRobmRsWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2hPclddLFxuICAgICAgICAgIGVsZW1EaW0gPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2hPclddLFxuXG4gICAgICAvL3BlcmNlbnRhZ2Ugb2YgYmFyIG1pbi9tYXggdmFsdWUgYmFzZWQgb24gY2xpY2sgb3IgZHJhZyBwb2ludFxuICAgICAgcGN0T2ZCYXIgPSB0aGlzLl9wY3RPZkJhcihsb2NhdGlvbiksXG5cbiAgICAgIC8vbnVtYmVyIG9mIGFjdHVhbCBwaXhlbHMgdG8gc2hpZnQgdGhlIGhhbmRsZSwgYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2Ugb2J0YWluZWQgYWJvdmVcbiAgICAgIHB4VG9Nb3ZlID0gKGVsZW1EaW0gLSBoYW5kbGVEaW0pICogcGN0T2ZCYXIsXG5cbiAgICAgIC8vcGVyY2VudGFnZSBvZiBiYXIgdG8gc2hpZnQgdGhlIGhhbmRsZVxuICAgICAgbW92ZW1lbnQgPSAocGVyY2VudChweFRvTW92ZSwgZWxlbURpbSkgKiAxMDApLnRvRml4ZWQodGhpcy5vcHRpb25zLmRlY2ltYWwpO1xuICAgICAgLy9maXhpbmcgdGhlIGRlY2ltYWwgdmFsdWUgZm9yIHRoZSBsb2NhdGlvbiBudW1iZXIsIGlzIHBhc3NlZCB0byBvdGhlciBtZXRob2RzIGFzIGEgZml4ZWQgZmxvYXRpbmctcG9pbnQgdmFsdWVcbiAgICAgIGxvY2F0aW9uID0gcGFyc2VGbG9hdChsb2NhdGlvbi50b0ZpeGVkKHRoaXMub3B0aW9ucy5kZWNpbWFsKSk7XG4gICAgICAvLyBkZWNsYXJlIGVtcHR5IG9iamVjdCBmb3IgY3NzIGFkanVzdG1lbnRzLCBvbmx5IHVzZWQgd2l0aCAyIGhhbmRsZWQtc2xpZGVyc1xuICAgICAgdmFyIGNzcyA9IHt9O1xuXG4gICAgICB0aGlzLl9zZXRWYWx1ZXMoJGhuZGwsIGxvY2F0aW9uKTtcblxuICAgICAgLy8gVE9ETyB1cGRhdGUgdG8gY2FsY3VsYXRlIGJhc2VkIG9uIHZhbHVlcyBzZXQgdG8gcmVzcGVjdGl2ZSBpbnB1dHM/P1xuICAgICAgaWYgKGlzRGJsKSB7XG4gICAgICAgIHZhciBpc0xlZnRIbmRsID0gdGhpcy5oYW5kbGVzLmluZGV4KCRobmRsKSA9PT0gMCxcblxuICAgICAgICAvL2VtcHR5IHZhcmlhYmxlLCB3aWxsIGJlIHVzZWQgZm9yIG1pbi1oZWlnaHQvd2lkdGggZm9yIGZpbGwgYmFyXG4gICAgICAgIGRpbSxcblxuICAgICAgICAvL3BlcmNlbnRhZ2Ugdy9oIG9mIHRoZSBoYW5kbGUgY29tcGFyZWQgdG8gdGhlIHNsaWRlciBiYXJcbiAgICAgICAgaGFuZGxlUGN0ID0gfn4ocGVyY2VudChoYW5kbGVEaW0sIGVsZW1EaW0pICogMTAwKTtcbiAgICAgICAgLy9pZiBsZWZ0IGhhbmRsZSwgdGhlIG1hdGggaXMgc2xpZ2h0bHkgZGlmZmVyZW50IHRoYW4gaWYgaXQncyB0aGUgcmlnaHQgaGFuZGxlLCBhbmQgdGhlIGxlZnQvdG9wIHByb3BlcnR5IG5lZWRzIHRvIGJlIGNoYW5nZWQgZm9yIHRoZSBmaWxsIGJhclxuICAgICAgICBpZiAoaXNMZWZ0SG5kbCkge1xuICAgICAgICAgIC8vbGVmdCBvciB0b3AgcGVyY2VudGFnZSB2YWx1ZSB0byBhcHBseSB0byB0aGUgZmlsbCBiYXIuXG4gICAgICAgICAgY3NzW2xPclRdID0gbW92ZW1lbnQgKyAnJSc7XG4gICAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuXG4gICAgICAgICAgZGltID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUyWzBdLnN0eWxlW2xPclRdKSAtIG1vdmVtZW50ICsgaGFuZGxlUGN0O1xuICAgICAgICAgIC8vdGhpcyBjYWxsYmFjayBpcyBuZWNlc3NhcnkgdG8gcHJldmVudCBlcnJvcnMgYW5kIGFsbG93IHRoZSBwcm9wZXIgcGxhY2VtZW50IGFuZCBpbml0aWFsaXphdGlvbiBvZiBhIDItaGFuZGxlZCBzbGlkZXJcbiAgICAgICAgICAvL3BsdXMsIGl0IG1lYW5zIHdlIGRvbid0IGNhcmUgaWYgJ2RpbScgaXNOYU4gb24gaW5pdCwgaXQgd29uJ3QgYmUgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYigpO1xuICAgICAgICAgIH0gLy90aGlzIGlzIG9ubHkgbmVlZGVkIGZvciB0aGUgaW5pdGlhbGl6YXRpb24gb2YgMiBoYW5kbGVkIHNsaWRlcnNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2p1c3QgY2FjaGluZyB0aGUgdmFsdWUgb2YgdGhlIGxlZnQvYm90dG9tIGhhbmRsZSdzIGxlZnQvdG9wIHByb3BlcnR5XG4gICAgICAgICAgdmFyIGhhbmRsZVBvcyA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlWzBdLnN0eWxlW2xPclRdKTtcbiAgICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgbmV3IG1pbi1oZWlnaHQvd2lkdGggZm9yIHRoZSBmaWxsIGJhci4gVXNlIGlzTmFOIHRvIHByZXZlbnQgZmFsc2UgcG9zaXRpdmVzIGZvciBudW1iZXJzIDw9IDBcbiAgICAgICAgICAvL2Jhc2VkIG9uIHRoZSBwZXJjZW50YWdlIG9mIG1vdmVtZW50IG9mIHRoZSBoYW5kbGUgYmVpbmcgbWFuaXB1bGF0ZWQsIGxlc3MgdGhlIG9wcG9zaW5nIGhhbmRsZSdzIGxlZnQvdG9wIHBvc2l0aW9uLCBwbHVzIHRoZSBwZXJjZW50YWdlIHcvaCBvZiB0aGUgaGFuZGxlIGl0c2VsZlxuICAgICAgICAgIGRpbSA9IG1vdmVtZW50IC0gKGlzTmFOKGhhbmRsZVBvcykgPyAodGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCAtIHRoaXMub3B0aW9ucy5zdGFydCkgLyAoKHRoaXMub3B0aW9ucy5lbmQgLSB0aGlzLm9wdGlvbnMuc3RhcnQpIC8gMTAwKSA6IGhhbmRsZVBvcykgKyBoYW5kbGVQY3Q7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXNzaWduIHRoZSBtaW4taGVpZ2h0L3dpZHRoIHRvIG91ciBjc3Mgb2JqZWN0XG4gICAgICAgIGNzc1snbWluLScgKyBoT3JXXSA9IGRpbSArICclJztcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5vbmUoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoYW5kbGUgaXMgZG9uZSBtb3ZpbmcuXG4gICAgICAgICAqIEBldmVudCBTbGlkZXIjbW92ZWRcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ21vdmVkLnpmLnNsaWRlcicsIFskaG5kbF0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vYmVjYXVzZSB3ZSBkb24ndCBrbm93IGV4YWN0bHkgaG93IHRoZSBoYW5kbGUgd2lsbCBiZSBtb3ZlZCwgY2hlY2sgdGhlIGFtb3VudCBvZiB0aW1lIGl0IHNob3VsZCB0YWtlIHRvIG1vdmUuXG4gICAgICB2YXIgbW92ZVRpbWUgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykgPyAxMDAwIC8gNjAgOiB0aGlzLm9wdGlvbnMubW92ZVRpbWU7XG5cbiAgICAgICgwLCBfZm91bmRhdGlvblV0aWwyLk1vdmUpKG1vdmVUaW1lLCAkaG5kbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBhZGp1c3RpbmcgdGhlIGxlZnQvdG9wIHByb3BlcnR5IG9mIHRoZSBoYW5kbGUsIGJhc2VkIG9uIHRoZSBwZXJjZW50YWdlIGNhbGN1bGF0ZWQgYWJvdmVcbiAgICAgICAgLy8gaWYgbW92ZW1lbnQgaXNOYU4sIHRoYXQgaXMgYmVjYXVzZSB0aGUgc2xpZGVyIGlzIGhpZGRlbiBhbmQgd2UgY2Fubm90IGRldGVybWluZSBoYW5kbGUgd2lkdGgsXG4gICAgICAgIC8vIGZhbGwgYmFjayB0byBuZXh0IGJlc3QgZ3Vlc3MuXG4gICAgICAgIGlmIChpc05hTihtb3ZlbWVudCkpIHtcbiAgICAgICAgICAkaG5kbC5jc3MobE9yVCwgcGN0T2ZCYXIgKiAxMDAgKyAnJScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRobmRsLmNzcyhsT3JULCBtb3ZlbWVudCArICclJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQpIHtcbiAgICAgICAgICAvL2lmIHNpbmdsZS1oYW5kbGVkLCBhIHNpbXBsZSBtZXRob2QgdG8gZXhwYW5kIHRoZSBmaWxsIGJhclxuICAgICAgICAgIF90aGlzLiRmaWxsLmNzcyhoT3JXLCBwY3RPZkJhciAqIDEwMCArICclJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9vdGhlcndpc2UsIHVzZSB0aGUgY3NzIG9iamVjdCB3ZSBjcmVhdGVkIGFib3ZlXG4gICAgICAgICAgX3RoaXMuJGZpbGwuY3NzKGNzcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHZhbHVlIGhhcyBub3QgYmVlbiBjaGFuZ2UgZm9yIGEgZ2l2ZW4gdGltZS5cbiAgICAgICAqIEBldmVudCBTbGlkZXIjY2hhbmdlZFxuICAgICAgICovXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgICB9LCBfdGhpcy5vcHRpb25zLmNoYW5nZWREZWxheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5pdGlhbCBhdHRyaWJ1dGUgZm9yIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSBpbmRleCBvZiB0aGUgY3VycmVudCBoYW5kbGUvaW5wdXQgdG8gdXNlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0SW5pdEF0dHInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SW5pdEF0dHIoaWR4KSB7XG4gICAgICB2YXIgaW5pdFZhbCA9IGlkeCA9PT0gMCA/IHRoaXMub3B0aW9ucy5pbml0aWFsU3RhcnQgOiB0aGlzLm9wdGlvbnMuaW5pdGlhbEVuZDtcbiAgICAgIHZhciBpZCA9IHRoaXMuaW5wdXRzLmVxKGlkeCkuYXR0cignaWQnKSB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsMy5HZXRZb0RpZ2l0cykoNiwgJ3NsaWRlcicpO1xuICAgICAgdGhpcy5pbnB1dHMuZXEoaWR4KS5hdHRyKHtcbiAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICdtYXgnOiB0aGlzLm9wdGlvbnMuZW5kLFxuICAgICAgICAnbWluJzogdGhpcy5vcHRpb25zLnN0YXJ0LFxuICAgICAgICAnc3RlcCc6IHRoaXMub3B0aW9ucy5zdGVwXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaW5wdXRzLmVxKGlkeCkudmFsKGluaXRWYWwpO1xuICAgICAgdGhpcy5oYW5kbGVzLmVxKGlkeCkuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3NsaWRlcicsXG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAgICdhcmlhLXZhbHVlbWF4JzogdGhpcy5vcHRpb25zLmVuZCxcbiAgICAgICAgJ2FyaWEtdmFsdWVtaW4nOiB0aGlzLm9wdGlvbnMuc3RhcnQsXG4gICAgICAgICdhcmlhLXZhbHVlbm93JzogaW5pdFZhbCxcbiAgICAgICAgJ2FyaWEtb3JpZW50YXRpb24nOiB0aGlzLm9wdGlvbnMudmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLFxuICAgICAgICAndGFiaW5kZXgnOiAwXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbnB1dCBhbmQgYGFyaWEtdmFsdWVub3dgIHZhbHVlcyBmb3IgdGhlIHNsaWRlciBlbGVtZW50LlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGhhbmRsZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsIC0gZmxvYXRpbmcgcG9pbnQgb2YgdGhlIG5ldyB2YWx1ZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldFZhbHVlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRWYWx1ZXMoJGhhbmRsZSwgdmFsKSB7XG4gICAgICB2YXIgaWR4ID0gdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID8gdGhpcy5oYW5kbGVzLmluZGV4KCRoYW5kbGUpIDogMDtcbiAgICAgIHRoaXMuaW5wdXRzLmVxKGlkeCkudmFsKHZhbCk7XG4gICAgICAkaGFuZGxlLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCB2YWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgZXZlbnRzIG9uIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBuZXcgbG9jYXRpb24gb2YgdGhlIGN1cnJlbnQgaGFuZGxlLlxuICAgICAqIElmIHRoZXJlIGFyZSB0d28gaGFuZGxlcyBhbmQgdGhlIGJhciB3YXMgY2xpY2tlZCwgaXQgZGV0ZXJtaW5lcyB3aGljaCBoYW5kbGUgdG8gbW92ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIC0gdGhlIGBldmVudGAgb2JqZWN0IHBhc3NlZCBmcm9tIHRoZSBsaXN0ZW5lci5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50IGhhbmRsZSB0byBjYWxjdWxhdGUgZm9yLCBpZiBzZWxlY3RlZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsIC0gZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGZvciB0aGUgbmV3IHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAgICogVE9ETyBjbGVhbiB0aGlzIHVwLCB0aGVyZSdzIGEgbG90IG9mIHJlcGVhdGVkIGNvZGUgYmV0d2VlbiB0aGlzIGFuZCB0aGUgX3NldEhhbmRsZVBvcyBmbi5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hhbmRsZUV2ZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUV2ZW50KGUsICRoYW5kbGUsIHZhbCkge1xuICAgICAgdmFyIHZhbHVlLCBoYXNWYWw7XG4gICAgICBpZiAoIXZhbCkge1xuICAgICAgICAvL2NsaWNrIG9yIGRyYWcgZXZlbnRzXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIHZlcnRpY2FsID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsLFxuICAgICAgICAgICAgcGFyYW0gPSB2ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgICBldmVudE9mZnNldCA9IHZlcnRpY2FsID8gZS5wYWdlWSA6IGUucGFnZVgsXG4gICAgICAgICAgICBoYWxmT2ZIYW5kbGUgPSB0aGlzLiRoYW5kbGVbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcGFyYW1dIC8gMixcbiAgICAgICAgICAgIGJhckRpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcGFyYW1dLFxuICAgICAgICAgICAgd2luZG93U2Nyb2xsID0gdmVydGljYWwgPyAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5zY3JvbGxUb3AoKSA6ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLnNjcm9sbExlZnQoKTtcblxuICAgICAgICB2YXIgZWxlbU9mZnNldCA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClbZGlyZWN0aW9uXTtcblxuICAgICAgICAvLyB0b3VjaCBldmVudHMgZW11bGF0ZWQgYnkgdGhlIHRvdWNoIHV0aWwgZ2l2ZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBzY3JlZW4sIGFkZCB3aW5kb3cuc2Nyb2xsIHRvIGV2ZW50IGNvb3JkaW5hdGVzLi4uXG4gICAgICAgIC8vIGJlc3Qgd2F5IHRvIGd1ZXNzIHRoaXMgaXMgc2ltdWxhdGVkIGlzIGlmIGNsaWVudFkgPT0gcGFnZVlcbiAgICAgICAgaWYgKGUuY2xpZW50WSA9PT0gZS5wYWdlWSkge1xuICAgICAgICAgIGV2ZW50T2Zmc2V0ID0gZXZlbnRPZmZzZXQgKyB3aW5kb3dTY3JvbGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV2ZW50RnJvbUJhciA9IGV2ZW50T2Zmc2V0IC0gZWxlbU9mZnNldDtcbiAgICAgICAgdmFyIGJhclhZO1xuICAgICAgICBpZiAoZXZlbnRGcm9tQmFyIDwgMCkge1xuICAgICAgICAgIGJhclhZID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudEZyb21CYXIgPiBiYXJEaW0pIHtcbiAgICAgICAgICBiYXJYWSA9IGJhckRpbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiYXJYWSA9IGV2ZW50RnJvbUJhcjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2Zmc2V0UGN0ID0gcGVyY2VudChiYXJYWSwgYmFyRGltKTtcblxuICAgICAgICB2YWx1ZSA9IHRoaXMuX3ZhbHVlKG9mZnNldFBjdCk7XG5cbiAgICAgICAgLy8gdHVybiBldmVyeXRoaW5nIGFyb3VuZCBmb3IgUlRMLCB5YXkgbWF0aCFcbiAgICAgICAgaWYgKCgwLCBfZm91bmRhdGlvblV0aWwzLnJ0bCkoKSAmJiAhdGhpcy5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLm9wdGlvbnMuZW5kIC0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9IF90aGlzLl9hZGp1c3RWYWx1ZShudWxsLCB2YWx1ZSk7XG4gICAgICAgIC8vYm9vbGVhbiBmbGFnIGZvciB0aGUgc2V0SGFuZGxlUG9zIGZuLCBzcGVjaWZpY2FsbHkgZm9yIHZlcnRpY2FsIHNsaWRlcnNcbiAgICAgICAgaGFzVmFsID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCEkaGFuZGxlKSB7XG4gICAgICAgICAgLy9maWd1cmUgb3V0IHdoaWNoIGhhbmRsZSBpdCBpcywgcGFzcyBpdCB0byB0aGUgbmV4dCBmdW5jdGlvbi5cbiAgICAgICAgICB2YXIgZmlyc3RIbmRsUG9zID0gYWJzUG9zaXRpb24odGhpcy4kaGFuZGxlLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSksXG4gICAgICAgICAgICAgIHNlY25kSG5kbFBvcyA9IGFic1Bvc2l0aW9uKHRoaXMuJGhhbmRsZTIsIGRpcmVjdGlvbiwgYmFyWFksIHBhcmFtKTtcbiAgICAgICAgICAkaGFuZGxlID0gZmlyc3RIbmRsUG9zIDw9IHNlY25kSG5kbFBvcyA/IHRoaXMuJGhhbmRsZSA6IHRoaXMuJGhhbmRsZTI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vY2hhbmdlIGV2ZW50IG9uIGlucHV0XG4gICAgICAgIHZhbHVlID0gdGhpcy5fYWRqdXN0VmFsdWUobnVsbCwgdmFsKTtcbiAgICAgICAgaGFzVmFsID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKCRoYW5kbGUsIHZhbHVlLCBoYXNWYWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdGVzIHZhbHVlIGZvciBoYW5kbGUgaW4gcmVnYXJkIHRvIHN0ZXAgdmFsdWUuIHJldHVybnMgYWRqdXN0ZWQgdmFsdWVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIHNlbGVjdGVkIGhhbmRsZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBhZGp1c3QuIHVzZWQgaWYgJGhhbmRsZSBpcyBmYWxzeVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRqdXN0VmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRqdXN0VmFsdWUoJGhhbmRsZSwgdmFsdWUpIHtcbiAgICAgIHZhciB2YWwsXG4gICAgICAgICAgc3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwLFxuICAgICAgICAgIGRpdiA9IHBhcnNlRmxvYXQoc3RlcCAvIDIpLFxuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgcHJldl92YWwsXG4gICAgICAgICAgbmV4dF92YWw7XG4gICAgICBpZiAoISEkaGFuZGxlKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQoJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBsZWZ0ID0gdmFsICUgc3RlcDtcbiAgICAgIHByZXZfdmFsID0gdmFsIC0gbGVmdDtcbiAgICAgIG5leHRfdmFsID0gcHJldl92YWwgKyBzdGVwO1xuICAgICAgaWYgKGxlZnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICAgIHZhbCA9IHZhbCA+PSBwcmV2X3ZhbCArIGRpdiA/IG5leHRfdmFsIDogcHJldl92YWw7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzbGlkZXIgZWxlbWVudHMuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB0aGlzLl9ldmVudHNGb3JIYW5kbGUodGhpcy4kaGFuZGxlKTtcbiAgICAgIGlmICh0aGlzLmhhbmRsZXNbMV0pIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzRm9ySGFuZGxlKHRoaXMuJGhhbmRsZTIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIGEgcGFydGljdWxhciBoYW5kbGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIGN1cnJlbnQgaGFuZGxlIHRvIGFwcGx5IGxpc3RlbmVycyB0by5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50c0ZvckhhbmRsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHNGb3JIYW5kbGUoJGhhbmRsZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBjdXJIYW5kbGUsXG4gICAgICAgICAgdGltZXI7XG5cbiAgICAgIHRoaXMuaW5wdXRzLm9mZignY2hhbmdlLnpmLnNsaWRlcicpLm9uKCdjaGFuZ2UuemYuc2xpZGVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGlkeCA9IF90aGlzLmlucHV0cy5pbmRleCgoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykpO1xuICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuaGFuZGxlcy5lcShpZHgpLCAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykudmFsKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tTZWxlY3QpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2NsaWNrLnpmLnNsaWRlcicpLm9uKCdjbGljay56Zi5zbGlkZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCEoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZS50YXJnZXQpLmlzKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuJGhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcmFnZ2FibGUpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVzLmFkZFRvdWNoKCk7XG5cbiAgICAgICAgdmFyICRib2R5ID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdib2R5Jyk7XG4gICAgICAgICRoYW5kbGUub2ZmKCdtb3VzZWRvd24uemYuc2xpZGVyJykub24oJ21vdXNlZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICRoYW5kbGUuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgX3RoaXMuJGZpbGwuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7IC8vXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuZGF0YSgnZHJhZ2dpbmcnLCB0cnVlKTtcblxuICAgICAgICAgIGN1ckhhbmRsZSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShlLmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICAgJGJvZHkub24oJ21vdXNlbW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZUV2ZW50KGUsIGN1ckhhbmRsZSk7XG4gICAgICAgICAgfSkub24oJ21vdXNldXAuemYuc2xpZGVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBjdXJIYW5kbGUpO1xuXG4gICAgICAgICAgICAkaGFuZGxlLnJlbW92ZUNsYXNzKCdpcy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgX3RoaXMuJGZpbGwucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIGZhbHNlKTtcblxuICAgICAgICAgICAgJGJvZHkub2ZmKCdtb3VzZW1vdmUuemYuc2xpZGVyIG1vdXNldXAuemYuc2xpZGVyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIHByZXZlbnQgZXZlbnRzIHRyaWdnZXJlZCBieSB0b3VjaFxuICAgICAgICAub24oJ3NlbGVjdHN0YXJ0LnpmLnNsaWRlciB0b3VjaG1vdmUuemYuc2xpZGVyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAkaGFuZGxlLm9mZigna2V5ZG93bi56Zi5zbGlkZXInKS5vbigna2V5ZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgXyRoYW5kbGUgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksXG4gICAgICAgICAgICBpZHggPSBfdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID8gX3RoaXMuaGFuZGxlcy5pbmRleChfJGhhbmRsZSkgOiAwLFxuICAgICAgICAgICAgb2xkVmFsdWUgPSBwYXJzZUZsb2F0KF90aGlzLmlucHV0cy5lcShpZHgpLnZhbCgpKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlO1xuXG4gICAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLmhhbmRsZUtleShlLCAnU2xpZGVyJywge1xuICAgICAgICAgIGRlY3JlYXNlOiBmdW5jdGlvbiBkZWNyZWFzZSgpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbmNyZWFzZTogZnVuY3Rpb24gaW5jcmVhc2UoKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlICsgX3RoaXMub3B0aW9ucy5zdGVwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVjcmVhc2VfZmFzdDogZnVuY3Rpb24gZGVjcmVhc2VfZmFzdCgpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGluY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uIGluY3JlYXNlX2Zhc3QoKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlICsgX3RoaXMub3B0aW9ucy5zdGVwICogMTA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBtaW46IGZ1bmN0aW9uIG1pbigpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gX3RoaXMub3B0aW9ucy5zdGFydDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1heDogZnVuY3Rpb24gbWF4KCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBfdGhpcy5vcHRpb25zLmVuZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uIGhhbmRsZWQoKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHNldCBoYW5kbGUgcG9zIHdoZW4gZXZlbnQgd2FzIGhhbmRsZWQgc3BlY2lhbGx5XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLyppZiAobmV3VmFsdWUpIHsgLy8gaWYgcHJlc3NlZCBrZXkgaGFzIHNwZWNpYWwgZnVuY3Rpb24sIHVwZGF0ZSB2YWx1ZVxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0qL1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHNsaWRlciBwbHVnaW4uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLmhhbmRsZXMub2ZmKCcuemYuc2xpZGVyJyk7XG4gICAgICB0aGlzLmlucHV0cy5vZmYoJy56Zi5zbGlkZXInKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYuc2xpZGVyJyk7XG5cbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTbGlkZXI7XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cblNsaWRlci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIE1pbmltdW0gdmFsdWUgZm9yIHRoZSBzbGlkZXIgc2NhbGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc3RhcnQ6IDAsXG4gIC8qKlxuICAgKiBNYXhpbXVtIHZhbHVlIGZvciB0aGUgc2xpZGVyIHNjYWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgZW5kOiAxMDAsXG4gIC8qKlxuICAgKiBNaW5pbXVtIHZhbHVlIGNoYW5nZSBwZXIgY2hhbmdlIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHN0ZXA6IDEsXG4gIC8qKlxuICAgKiBWYWx1ZSBhdCB3aGljaCB0aGUgaGFuZGxlL2lucHV0ICoobGVmdCBoYW5kbGUvZmlyc3QgaW5wdXQpKiBzaG91bGQgYmUgc2V0IHRvIG9uIGluaXRpYWxpemF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGluaXRpYWxTdGFydDogMCxcbiAgLyoqXG4gICAqIFZhbHVlIGF0IHdoaWNoIHRoZSByaWdodCBoYW5kbGUvc2Vjb25kIGlucHV0IHNob3VsZCBiZSBzZXQgdG8gb24gaW5pdGlhbGl6YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTAwXG4gICAqL1xuICBpbml0aWFsRW5kOiAxMDAsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIGlucHV0IHRvIGJlIGxvY2F0ZWQgb3V0c2lkZSB0aGUgY29udGFpbmVyIGFuZCB2aXNpYmxlLiBTZXQgdG8gYnkgdGhlIEpTXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBiaW5kaW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdXNlciB0byBjbGljay90YXAgb24gdGhlIHNsaWRlciBiYXIgdG8gc2VsZWN0IGEgdmFsdWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsaWNrU2VsZWN0OiB0cnVlLFxuICAvKipcbiAgICogU2V0IHRvIHRydWUgYW5kIHVzZSB0aGUgYHZlcnRpY2FsYCBjbGFzcyB0byBjaGFuZ2UgYWxpZ25tZW50IHRvIHZlcnRpY2FsLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmVydGljYWw6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2VyIHRvIGRyYWcgdGhlIHNsaWRlciBoYW5kbGUocykgdG8gc2VsZWN0IGEgdmFsdWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGRyYWdnYWJsZTogdHJ1ZSxcbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBzbGlkZXIgYW5kIHByZXZlbnRzIGV2ZW50IGxpc3RlbmVycyBmcm9tIGJlaW5nIGFwcGxpZWQuIERvdWJsZSBjaGVja2VkIGJ5IEpTIHdpdGggYGRpc2FibGVkQ2xhc3NgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2Ugb2YgdHdvIGhhbmRsZXMuIERvdWJsZSBjaGVja2VkIGJ5IHRoZSBKUy4gQ2hhbmdlcyBzb21lIGxvZ2ljIGhhbmRsaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZG91YmxlU2lkZWQ6IGZhbHNlLFxuICAvKipcbiAgICogUG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlLlxuICAgKi9cbiAgLy8gc3RlcHM6IDEwMCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0aGUgcGx1Z2luIHNob3VsZCBnbyB0byBmb3IgZmxvYXRpbmcgcG9pbnQgcHJlY2lzaW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDJcbiAgICovXG4gIGRlY2ltYWw6IDIsXG4gIC8qKlxuICAgKiBUaW1lIGRlbGF5IGZvciBkcmFnZ2VkIGVsZW1lbnRzLlxuICAgKi9cbiAgLy8gZHJhZ0RlbGF5OiAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIHRvIGFuaW1hdGUgdGhlIG1vdmVtZW50IG9mIGEgc2xpZGVyIGhhbmRsZSBpZiB1c2VyIGNsaWNrcy90YXBzIG9uIHRoZSBiYXIuIE5lZWRzIHRvIGJlIG1hbnVhbGx5IHNldCBpZiB1cGRhdGluZyB0aGUgdHJhbnNpdGlvbiB0aW1lIGluIHRoZSBTYXNzIHNldHRpbmdzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDIwMFxuICAgKi9cbiAgbW92ZVRpbWU6IDIwMCwgLy91cGRhdGUgdGhpcyBpZiBjaGFuZ2luZyB0aGUgdHJhbnNpdGlvbiB0aW1lIGluIHRoZSBzYXNzXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGRpc2FibGVkIHNsaWRlcnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2Rpc2FibGVkJ1xuICAgKi9cbiAgZGlzYWJsZWRDbGFzczogJ2Rpc2FibGVkJyxcbiAgLyoqXG4gICAqIFdpbGwgaW52ZXJ0IHRoZSBkZWZhdWx0IGxheW91dCBmb3IgYSB2ZXJ0aWNhbDxzcGFuIGRhdGEtdG9vbHRpcCB0aXRsZT1cIndobyB3b3VsZCBkbyB0aGlzPz8/XCI+IDwvc3Bhbj5zbGlkZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZlcnRWZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBgY2hhbmdlZC56Zi1zbGlkZXJgIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTAwXG4gICAqL1xuICBjaGFuZ2VkRGVsYXk6IDUwMCxcbiAgLyoqXG4gICogQmFzZXZhbHVlIGZvciBub24tbGluZWFyIHNsaWRlcnNcbiAgKiBAb3B0aW9uXG4gICogQHR5cGUge251bWJlcn1cbiAgKiBAZGVmYXVsdCA1XG4gICovXG4gIG5vbkxpbmVhckJhc2U6IDUsXG4gIC8qKlxuICAqIEJhc2V2YWx1ZSBmb3Igbm9uLWxpbmVhciBzbGlkZXJzLCBwb3NzaWJsZSB2YWx1ZXMgYXJlOiBgJ2xpbmVhcidgLCBgJ3BvdydgICYgYCdsb2cnYC4gUG93IGFuZCBMb2cgdXNlIHRoZSBub25MaW5lYXJCYXNlIHNldHRpbmcuXG4gICogQG9wdGlvblxuICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ2xpbmVhcidcbiAgKi9cbiAgcG9zaXRpb25WYWx1ZUZ1bmN0aW9uOiAnbGluZWFyJ1xufTtcblxuZnVuY3Rpb24gcGVyY2VudChmcmFjLCBudW0pIHtcbiAgcmV0dXJuIGZyYWMgLyBudW07XG59XG5mdW5jdGlvbiBhYnNQb3NpdGlvbigkaGFuZGxlLCBkaXIsIGNsaWNrUG9zLCBwYXJhbSkge1xuICByZXR1cm4gTWF0aC5hYnMoJGhhbmRsZS5wb3NpdGlvbigpW2Rpcl0gKyAkaGFuZGxlW3BhcmFtXSgpIC8gMiAtIGNsaWNrUG9zKTtcbn1cbmZ1bmN0aW9uIGJhc2VMb2coYmFzZSwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHZhbHVlKSAvIE1hdGgubG9nKGJhc2UpO1xufVxuXG5leHBvcnRzLlNsaWRlciA9IFNsaWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVjMnhwWkdWeUxtcHpJbDBzSW01aGJXVnpJanBiSWxOc2FXUmxjaUlzSW1Wc1pXMWxiblFpTENKdmNIUnBiMjV6SWl3aUpHVnNaVzFsYm5RaUxDSWtJaXdpWlhoMFpXNWtJaXdpWkdWbVlYVnNkSE1pTENKa1lYUmhJaXdpWTJ4aGMzTk9ZVzFsSWl3aVZHOTFZMmdpTENKcGJtbDBJaXdpVkhKcFoyZGxjbk1pTENKZmFXNXBkQ0lzSWt0bGVXSnZZWEprSWl3aWNtVm5hWE4wWlhJaUxDSnBibkIxZEhNaUxDSm1hVzVrSWl3aWFHRnVaR3hsY3lJc0lpUm9ZVzVrYkdVaUxDSmxjU0lzSWlScGJuQjFkQ0lzSW14bGJtZDBhQ0lzSW1GMGRISWlMQ0lrWm1sc2JDSXNJbU56Y3lJc0luWmxjblJwWTJGc0lpd2lhWE5FWW13aUxDSmZkR2hwY3lJc0ltUnBjMkZpYkdWa0lpd2lhR0Z6UTJ4aGMzTWlMQ0prYVhOaFlteGxaRU5zWVhOeklpd2lZV1JrUTJ4aGMzTWlMQ0poWkdRaUxDSmlhVzVrYVc1bklpd2lYM05sZEVsdWFYUkJkSFJ5SWl3aVpHOTFZbXhsVTJsa1pXUWlMQ0lrYUdGdVpHeGxNaUlzSWlScGJuQjFkRElpTENKelpYUklZVzVrYkdWeklpd2lYMlYyWlc1MGN5SXNJbDl6WlhSSVlXNWtiR1ZRYjNNaUxDSjJZV3dpTENKMllXeDFaU0lzSW5CamRFOW1RbUZ5SWl3aWNHVnlZMlZ1ZENJc0luTjBZWEowSWl3aVpXNWtJaXdpY0c5emFYUnBiMjVXWVd4MVpVWjFibU4wYVc5dUlpd2lYMnh2WjFSeVlXNXpabTl5YlNJc0lsOXdiM2RVY21GdWMyWnZjbTBpTENKMGIwWnBlR1ZrSWl3aWNHRnljMlZHYkc5aGRDSXNJbUpoYzJWTWIyY2lMQ0p1YjI1TWFXNWxZWEpDWVhObElpd2lUV0YwYUNJc0luQnZkeUlzSWlSb2JtUnNJaXdpYkc5allYUnBiMjRpTENKdWIwbHVkbVZ5ZENJc0ltTmlJaXdpYVc1a1pYZ2lMQ0pvTWxaaGJDSXNJbk4wWlhBaUxDSm9NVlpoYkNJc0luWmxjblFpTENKb1QzSlhJaXdpYkU5eVZDSXNJbWhoYm1Sc1pVUnBiU0lzSW1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDSXNJbVZzWlcxRWFXMGlMQ0pmY0dOMFQyWkNZWElpTENKd2VGUnZUVzkyWlNJc0ltMXZkbVZ0Wlc1MElpd2laR1ZqYVcxaGJDSXNJbDl6WlhSV1lXeDFaWE1pTENKcGMweGxablJJYm1Sc0lpd2laR2x0SWl3aWFHRnVaR3hsVUdOMElpd2ljM1I1YkdVaUxDSm9ZVzVrYkdWUWIzTWlMQ0pwYzA1aFRpSXNJbWx1YVhScFlXeFRkR0Z5ZENJc0ltOXVaU0lzSW5SeWFXZG5aWElpTENKdGIzWmxWR2x0WlNJc0ltTnNaV0Z5VkdsdFpXOTFkQ0lzSW5ScGJXVnZkWFFpTENKelpYUlVhVzFsYjNWMElpd2lZMmhoYm1kbFpFUmxiR0Y1SWl3aWFXUjRJaXdpYVc1cGRGWmhiQ0lzSW1sdWFYUnBZV3hGYm1RaUxDSnBaQ0lzSW1VaUxDSm9ZWE5XWVd3aUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0luQmhjbUZ0SWl3aVpHbHlaV04wYVc5dUlpd2laWFpsYm5SUFptWnpaWFFpTENKd1lXZGxXU0lzSW5CaFoyVllJaXdpYUdGc1prOW1TR0Z1Wkd4bElpd2lZbUZ5UkdsdElpd2lkMmx1Wkc5M1UyTnliMnhzSWl3aWQybHVaRzkzSWl3aWMyTnliMnhzVkc5d0lpd2ljMk55YjJ4c1RHVm1kQ0lzSW1Wc1pXMVBabVp6WlhRaUxDSnZabVp6WlhRaUxDSmpiR2xsYm5SWklpd2laWFpsYm5SR2NtOXRRbUZ5SWl3aVltRnlXRmtpTENKdlptWnpaWFJRWTNRaUxDSmZkbUZzZFdVaUxDSmZZV1JxZFhOMFZtRnNkV1VpTENKbWFYSnpkRWh1Wkd4UWIzTWlMQ0poWW5OUWIzTnBkR2x2YmlJc0luTmxZMjVrU0c1a2JGQnZjeUlzSW1ScGRpSXNJbXhsWm5RaUxDSndjbVYyWDNaaGJDSXNJbTVsZUhSZmRtRnNJaXdpWDJWMlpXNTBjMFp2Y2toaGJtUnNaU0lzSW1OMWNraGhibVJzWlNJc0luUnBiV1Z5SWl3aWIyWm1JaXdpYjI0aUxDSmZhR0Z1Wkd4bFJYWmxiblFpTENKamJHbGphMU5sYkdWamRDSXNJblJoY21kbGRDSXNJbWx6SWl3aVpISmhaMmRoWW14bElpd2lZV1JrVkc5MVkyZ2lMQ0lrWW05a2VTSXNJbU4xY25KbGJuUlVZWEpuWlhRaUxDSnlaVzF2ZG1WRGJHRnpjeUlzSWw4a2FHRnVaR3hsSWl3aWIyeGtWbUZzZFdVaUxDSnVaWGRXWVd4MVpTSXNJbWhoYm1Sc1pVdGxlU0lzSW1SbFkzSmxZWE5sSWl3aWFXNWpjbVZoYzJVaUxDSmtaV055WldGelpWOW1ZWE4wSWl3aWFXNWpjbVZoYzJWZlptRnpkQ0lzSW0xcGJpSXNJbTFoZUNJc0ltaGhibVJzWldRaUxDSlFiSFZuYVc0aUxDSnBiblpsY25SV1pYSjBhV05oYkNJc0ltWnlZV01pTENKdWRXMGlMQ0prYVhJaUxDSmpiR2xqYTFCdmN5SXNJbUZpY3lJc0luQnZjMmwwYVc5dUlpd2lZbUZ6WlNJc0lteHZaeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdPenRCUVVWQk96czdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRTdPenM3T3pzN096czdRVUZEUVRzN096czdPenM3TzBsQlUwMUJMRTA3T3pzN096czdPenM3T3p0QlFVTktPenM3T3pzN096SkNRVTlQUXl4UExFVkJRVk5ETEU4c1JVRkJVenRCUVVOMlFpeFhRVUZMUXl4UlFVRk1MRWRCUVdkQ1JpeFBRVUZvUWp0QlFVTkJMRmRCUVV0RExFOUJRVXdzUjBGQlpVVXNhVUpCUVVWRExFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRk1MRTlCUVU5TkxGRkJRWEJDTEVWQlFUaENMRXRCUVV0SUxGRkJRVXdzUTBGQlkwa3NTVUZCWkN4RlFVRTVRaXhGUVVGdlJFd3NUMEZCY0VRc1EwRkJaanRCUVVOQkxGZEJRVXROTEZOQlFVd3NSMEZCYVVJc1VVRkJha0lzUTBGSWRVSXNRMEZIU1RzN1FVRkZOMEk3UVVGRFJVTXNOa0pCUVUxRExFbEJRVTRzUTBGQlYwNHNaMEpCUVZnN1FVRkRRVThzWjBOQlFWTkVMRWxCUVZRc1EwRkJZMDRzWjBKQlFXUTdPMEZCUlVFc1YwRkJTMUVzUzBGQlREczdRVUZGUVVNc0swSkJRVk5ETEZGQlFWUXNRMEZCYTBJc1VVRkJiRUlzUlVGQk5FSTdRVUZETVVJc1pVRkJUenRCUVVOTUxIbENRVUZsTEZWQlJGWTdRVUZGVEN4elFrRkJXU3hWUVVaUU8wRkJSMHdzZDBKQlFXTXNWVUZJVkR0QlFVbE1MSGRDUVVGakxGVkJTbFE3UVVGTFRDd3JRa0ZCY1VJc1pVRk1hRUk3UVVGTlRDdzBRa0ZCYTBJc1pVRk9ZanRCUVU5TUxEaENRVUZ2UWl4bFFWQm1PMEZCVVV3c09FSkJRVzlDTEdWQlVtWTdRVUZUVEN4clFrRkJVU3hMUVZSSU8wRkJWVXdzYVVKQlFVODdRVUZXUml4VFFVUnRRanRCUVdFeFFpeGxRVUZQTzBGQlEwd3NkMEpCUVdNc1ZVRkVWRHRCUVVWTUxIbENRVUZsTEZWQlJsWTdRVUZIVEN3NFFrRkJiMElzWlVGSVpqdEJRVWxNTEN0Q1FVRnhRanRCUVVwb1FqdEJRV0p0UWl4UFFVRTFRanRCUVc5Q1JEczdRVUZGUkRzN096czdPenM3TkVKQlMxRTdRVUZEVGl4WFFVRkxReXhOUVVGTUxFZEJRV01zUzBGQlMxb3NVVUZCVEN4RFFVRmpZU3hKUVVGa0xFTkJRVzFDTEU5QlFXNUNMRU5CUVdRN1FVRkRRU3hYUVVGTFF5eFBRVUZNTEVkQlFXVXNTMEZCUzJRc1VVRkJUQ3hEUVVGallTeEpRVUZrTEVOQlFXMUNMSE5DUVVGdVFpeERRVUZtT3p0QlFVVkJMRmRCUVV0RkxFOUJRVXdzUjBGQlpTeExRVUZMUkN4UFFVRk1MRU5CUVdGRkxFVkJRV0lzUTBGQlowSXNRMEZCYUVJc1EwRkJaanRCUVVOQkxGZEJRVXRETEUxQlFVd3NSMEZCWXl4TFFVRkxUQ3hOUVVGTUxFTkJRVmxOTEUxQlFWb3NSMEZCY1VJc1MwRkJTMDRzVFVGQlRDeERRVUZaU1N4RlFVRmFMRU5CUVdVc1EwRkJaaXhEUVVGeVFpeEhRVUY1UXl3MFFrRkJUU3hMUVVGTFJDeFBRVUZNTEVOQlFXRkpMRWxCUVdJc1EwRkJhMElzWlVGQmJFSXNRMEZCVGl4RFFVRjJSRHRCUVVOQkxGZEJRVXRETEV0QlFVd3NSMEZCWVN4TFFVRkxjRUlzVVVGQlRDeERRVUZqWVN4SlFVRmtMRU5CUVcxQ0xHOUNRVUZ1UWl4RlFVRjVRMUVzUjBGQmVrTXNRMEZCTmtNc1MwRkJTM1JDTEU5QlFVd3NRMEZCWVhWQ0xGRkJRV0lzUjBGQmQwSXNVVUZCZUVJc1IwRkJiVU1zVDBGQmFFWXNSVUZCZVVZc1EwRkJla1lzUTBGQllqczdRVUZGUVN4VlFVRkpReXhSUVVGUkxFdEJRVm83UVVGQlFTeFZRVU5KUXl4UlFVRlJMRWxCUkZvN1FVRkZRU3hWUVVGSkxFdEJRVXQ2UWl4UFFVRk1MRU5CUVdFd1FpeFJRVUZpTEVsQlFYbENMRXRCUVV0NlFpeFJRVUZNTEVOQlFXTXdRaXhSUVVGa0xFTkJRWFZDTEV0QlFVc3pRaXhQUVVGTUxFTkJRV0UwUWl4aFFVRndReXhEUVVFM1FpeEZRVUZwUmp0QlFVTXZSU3hoUVVGTE5VSXNUMEZCVEN4RFFVRmhNRUlzVVVGQllpeEhRVUYzUWl4SlFVRjRRanRCUVVOQkxHRkJRVXQ2UWl4UlFVRk1MRU5CUVdNMFFpeFJRVUZrTEVOQlFYVkNMRXRCUVVzM1FpeFBRVUZNTEVOQlFXRTBRaXhoUVVGd1F6dEJRVU5FTzBGQlEwUXNWVUZCU1N4RFFVRkRMRXRCUVV0bUxFMUJRVXdzUTBGQldVMHNUVUZCYWtJc1JVRkJlVUk3UVVGRGRrSXNZVUZCUzA0c1RVRkJUQ3hIUVVGakxIZENRVUZKYVVJc1IwRkJTaXhEUVVGUkxFdEJRVXRhTEUxQlFXSXNRMEZCWkR0QlFVTkJMR0ZCUVV0c1FpeFBRVUZNTEVOQlFXRXJRaXhQUVVGaUxFZEJRWFZDTEVsQlFYWkNPMEZCUTBRN08wRkJSVVFzVjBGQlMwTXNXVUZCVEN4RFFVRnJRaXhEUVVGc1FqczdRVUZGUVN4VlFVRkpMRXRCUVV0cVFpeFBRVUZNTEVOQlFXRXNRMEZCWWl4RFFVRktMRVZCUVhGQ08wRkJRMjVDTEdGQlFVdG1MRTlCUVV3c1EwRkJZV2xETEZkQlFXSXNSMEZCTWtJc1NVRkJNMEk3UVVGRFFTeGhRVUZMUXl4UlFVRk1MRWRCUVdkQ0xFdEJRVXR1UWl4UFFVRk1MRU5CUVdGRkxFVkJRV0lzUTBGQlowSXNRMEZCYUVJc1EwRkJhRUk3UVVGRFFTeGhRVUZMYTBJc1QwRkJUQ3hIUVVGbExFdEJRVXQwUWl4TlFVRk1MRU5CUVZsTkxFMUJRVm9zUjBGQmNVSXNRMEZCY2tJc1IwRkJlVUlzUzBGQlMwNHNUVUZCVEN4RFFVRlpTU3hGUVVGYUxFTkJRV1VzUTBGQlppeERRVUY2UWl4SFFVRTJReXcwUWtGQlRTeExRVUZMYVVJc1VVRkJUQ3hEUVVGalpDeEpRVUZrTEVOQlFXMUNMR1ZCUVc1Q0xFTkJRVTRzUTBGQk5VUTdPMEZCUlVFc1dVRkJTU3hEUVVGRExFdEJRVXRRTEUxQlFVd3NRMEZCV1N4RFFVRmFMRU5CUVV3c1JVRkJjVUk3UVVGRGJrSXNaVUZCUzBFc1RVRkJUQ3hIUVVGakxFdEJRVXRCTEUxQlFVd3NRMEZCV1dsQ0xFZEJRVm9zUTBGQlowSXNTMEZCUzBzc1QwRkJja0lzUTBGQlpEdEJRVU5FTzBGQlEwUllMR2RDUVVGUkxFbEJRVkk3TzBGQlJVRTdRVUZEUVN4aFFVRkxVU3haUVVGTUxFTkJRV3RDTEVOQlFXeENPMEZCUTBRN08wRkJSVVE3UVVGRFFTeFhRVUZMU1N4VlFVRk1PenRCUVVWQkxGZEJRVXRETEU5QlFVdzdRVUZEUkRzN08ybERRVVZaTzBGQlFVRTdPMEZCUTFnc1ZVRkJSeXhMUVVGTGRFSXNUMEZCVEN4RFFVRmhMRU5CUVdJc1EwRkJTQ3hGUVVGdlFqdEJRVU5zUWl4aFFVRkxkVUlzWVVGQlRDeERRVUZ0UWl4TFFVRkxkRUlzVDBGQmVFSXNSVUZCYVVNc1MwRkJTMGdzVFVGQlRDeERRVUZaU1N4RlFVRmFMRU5CUVdVc1EwRkJaaXhGUVVGclFuTkNMRWRCUVd4Q0xFVkJRV3BETEVWQlFUQkVMRWxCUVRGRUxFVkJRV2RGTEZsQlFVMDdRVUZEY0VVc2FVSkJRVXRFTEdGQlFVd3NRMEZCYlVJc1QwRkJTMG9zVVVGQmVFSXNSVUZCYTBNc1QwRkJTM0pDTEUxQlFVd3NRMEZCV1Vrc1JVRkJXaXhEUVVGbExFTkJRV1lzUlVGQmEwSnpRaXhIUVVGc1FpeEZRVUZzUXl4RlFVRXlSQ3hKUVVFelJEdEJRVU5FTEZOQlJrUTdRVUZIUkN4UFFVcEVMRTFCU1U4N1FVRkRUQ3hoUVVGTFJDeGhRVUZNTEVOQlFXMUNMRXRCUVV0MFFpeFBRVUY0UWl4RlFVRnBReXhMUVVGTFNDeE5RVUZNTEVOQlFWbEpMRVZCUVZvc1EwRkJaU3hEUVVGbUxFVkJRV3RDYzBJc1IwRkJiRUlzUlVGQmFrTXNSVUZCTUVRc1NVRkJNVVE3UVVGRFJEdEJRVU5HT3pzN09FSkJSVk03UVVGRFVpeFhRVUZMU0N4VlFVRk1PMEZCUTBRN1FVRkRSRHM3T3pzN096czdPRUpCUzFWSkxFc3NSVUZCVHp0QlFVTm1MRlZCUVVsRExGZEJRVmRETEZGQlFWRkdMRkZCUVZFc1MwRkJTM2hETEU5QlFVd3NRMEZCWVRKRExFdEJRVGRDTEVWQlFXOURMRXRCUVVzelF5eFBRVUZNTEVOQlFXRTBReXhIUVVGaUxFZEJRVzFDTEV0QlFVczFReXhQUVVGTUxFTkJRV0V5UXl4TFFVRndSU3hEUVVGbU96dEJRVVZCTEdOQlFVOHNTMEZCU3pORExFOUJRVXdzUTBGQllUWkRMSEZDUVVGd1FqdEJRVU5CTEdGQlFVc3NTMEZCVER0QlFVTkZTaXh4UWtGQlZ5eExRVUZMU3l4aFFVRk1MRU5CUVcxQ1RDeFJRVUZ1UWl4RFFVRllPMEZCUTBFN1FVRkRSaXhoUVVGTExFdEJRVXc3UVVGRFJVRXNjVUpCUVZjc1MwRkJTMDBzWVVGQlRDeERRVUZ0UWs0c1VVRkJia0lzUTBGQldEdEJRVU5CTzBGQlRrWTdPMEZCVTBFc1lVRkJUMEVzVTBGQlUwOHNUMEZCVkN4RFFVRnBRaXhEUVVGcVFpeERRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pKQ1FVdFBVQ3hSTEVWQlFWVTdRVUZEWml4alFVRlBMRXRCUVV0NlF5eFBRVUZNTEVOQlFXRTJReXh4UWtGQmNFSTdRVUZEUVN4aFFVRkxMRXRCUVV3N1FVRkRSVW9zY1VKQlFWY3NTMEZCUzAwc1lVRkJUQ3hEUVVGdFFrNHNVVUZCYmtJc1EwRkJXRHRCUVVOQk8wRkJRMFlzWVVGQlN5eExRVUZNTzBGQlEwVkJMSEZDUVVGWExFdEJRVXRMTEdGQlFVd3NRMEZCYlVKTUxGRkJRVzVDTEVOQlFWZzdRVUZEUVR0QlFVNUdPMEZCVVVFc1ZVRkJTVVFzVVVGQlVTeERRVUZETEV0QlFVdDRReXhQUVVGTUxFTkJRV0UwUXl4SFFVRmlMRWRCUVcxQ0xFdEJRVXMxUXl4UFFVRk1MRU5CUVdFeVF5eExRVUZxUXl4SlFVRXdRMFlzVVVGQk1VTXNSMEZCY1VSUkxGZEJRVmNzUzBGQlMycEVMRTlCUVV3c1EwRkJZVEpETEV0QlFYaENMRU5CUVdwRk96dEJRVVZCTEdGQlFVOUlMRXRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN2EwTkJTMk5CTEVzc1JVRkJUenRCUVVOdVFpeGhRVUZQVlN4UlFVRlJMRXRCUVV0c1JDeFBRVUZNTEVOQlFXRnRSQ3hoUVVGeVFpeEZRVUZ6UTFnc1UwRkJUeXhMUVVGTGVFTXNUMEZCVEN4RFFVRmhiVVFzWVVGQllpeEhRVUV5UWl4RFFVRnNReXhEUVVGRUxFZEJRWFZETEVOQlFUVkZMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN2EwTkJTMk5ZTEVzc1JVRkJUenRCUVVOdVFpeGhRVUZQTEVOQlFVTlpMRXRCUVV0RExFZEJRVXdzUTBGQlV5eExRVUZMY2tRc1QwRkJUQ3hEUVVGaGJVUXNZVUZCZEVJc1JVRkJjVU5ZTEV0QlFYSkRMRWxCUVRoRExFTkJRUzlETEV0QlFYRkVMRXRCUVV0NFF5eFBRVUZNTEVOQlFXRnRSQ3hoUVVGaUxFZEJRVFpDTEVOQlFXeEdMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096czdPenRyUTBGVlkwY3NTeXhGUVVGUFF5eFJMRVZCUVZWRExGRXNSVUZCVlVNc1JTeEZRVUZKTzBGQlF6TkRPMEZCUTBFc1ZVRkJTU3hMUVVGTGVFUXNVVUZCVEN4RFFVRmpNRUlzVVVGQlpDeERRVUYxUWl4TFFVRkxNMElzVDBGQlRDeERRVUZoTkVJc1lVRkJjRU1zUTBGQlNpeEZRVUYzUkR0QlFVTjBSRHRCUVVORU8wRkJRMFE3UVVGRFFUSkNMR2xDUVVGWFRpeFhRVUZYVFN4UlFVRllMRU5CUVZnc1EwRk9Na01zUTBGTldEczdRVUZGYUVNN1FVRkRRU3hWUVVGSlFTeFhRVUZYTEV0QlFVdDJSQ3hQUVVGTUxFTkJRV0V5UXl4TFFVRTFRaXhGUVVGdFF6dEJRVUZGV1N4dFFrRkJWeXhMUVVGTGRrUXNUMEZCVEN4RFFVRmhNa01zUzBGQmVFSTdRVUZCWjBNc1QwRkJja1VzVFVGRFN5eEpRVUZKV1N4WFFVRlhMRXRCUVV0MlJDeFBRVUZNTEVOQlFXRTBReXhIUVVFMVFpeEZRVUZwUXp0QlFVRkZWeXh0UWtGQlZ5eExRVUZMZGtRc1QwRkJUQ3hEUVVGaE5FTXNSMEZCZUVJN1FVRkJPRUk3TzBGQlJYUkZMRlZCUVVsd1FpeFJRVUZSTEV0QlFVdDRRaXhQUVVGTUxFTkJRV0ZwUXl4WFFVRjZRanM3UVVGRlFUdEJRVU5CTzBGQlEwRXNWVUZCU1N4TFFVRkxha01zVDBGQlRDeERRVUZoZFVJc1VVRkJZaXhKUVVGNVFpeERRVUZEYVVNc1VVRkJPVUlzUlVGQmQwTTdRVUZEZEVORUxHMUNRVUZYTEV0QlFVdDJSQ3hQUVVGTUxFTkJRV0UwUXl4SFFVRmlMRWRCUVcxQ1Z5eFJRVUU1UWp0QlFVTkVPenRCUVVWRUxGVkJRVWt2UWl4TFFVRktMRVZCUVZjN1FVRkJSVHRCUVVOWUxGbEJRVWtzUzBGQlMxUXNUMEZCVEN4RFFVRmhNa01zUzBGQllpeERRVUZ0UWtvc1MwRkJia0lzVFVGQk9FSXNRMEZCYkVNc1JVRkJjVU03UVVGRGJrTXNZMEZCU1Vzc1VVRkJVVllzVjBGQlZ5eExRVUZMWml4UlFVRk1MRU5CUVdOa0xFbEJRV1FzUTBGQmJVSXNaVUZCYmtJc1EwRkJXQ3hEUVVGYU8wRkJRMEZ0UXl4eFFrRkJWMEVzV1VGQldVa3NTMEZCV2l4SFFVRnZRa0VzVVVGQlVTeExRVUZMTTBRc1QwRkJUQ3hEUVVGaE5FUXNTVUZCZWtNc1IwRkJaMFJNTEZGQlFUTkVPMEZCUTBRc1UwRklSQ3hOUVVkUE8wRkJRMHdzWTBGQlNVMHNVVUZCVVZvc1YwRkJWeXhMUVVGTGFrTXNUMEZCVEN4RFFVRmhTU3hKUVVGaUxFTkJRV3RDTEdWQlFXeENMRU5CUVZnc1EwRkJXanRCUVVOQmJVTXNjVUpCUVZkQkxGbEJRVmxOTEV0QlFWb3NSMEZCYjBKQkxGRkJRVkVzUzBGQlN6ZEVMRTlCUVV3c1EwRkJZVFJFTEVsQlFYcERMRWRCUVdkRVRDeFJRVUV6UkR0QlFVTkVPMEZCUTBZN08wRkJSVVFzVlVGQlNUbENMRkZCUVZFc1NVRkJXanRCUVVGQkxGVkJRMGx4UXl4UFFVRlBMRXRCUVVzNVJDeFBRVUZNTEVOQlFXRjFRaXhSUVVSNFFqdEJRVUZCTEZWQlJVbDNReXhQUVVGUFJDeFBRVUZQTEZGQlFWQXNSMEZCYTBJc1QwRkdOMEk3UVVGQlFTeFZRVWRKUlN4UFFVRlBSaXhQUVVGUExFdEJRVkFzUjBGQlpTeE5RVWd4UWp0QlFVRkJMRlZCU1VsSExGbEJRVmxZTEUxQlFVMHNRMEZCVGl4RlFVRlRXU3h4UWtGQlZDeEhRVUZwUTBnc1NVRkJha01zUTBGS2FFSTdRVUZCUVN4VlFVdEpTU3hWUVVGVkxFdEJRVXRzUlN4UlFVRk1MRU5CUVdNc1EwRkJaQ3hGUVVGcFFtbEZMSEZDUVVGcVFpeEhRVUY1UTBnc1NVRkJla01zUTBGTVpEczdRVUZOU1R0QlFVTkJkRUlzYVVKQlFWY3NTMEZCU3pKQ0xGTkJRVXdzUTBGQlpXSXNVVUZCWml4RFFWQm1PenRCUVZGSk8wRkJRMEZqTEdsQ1FVRlhMRU5CUVVOR0xGVkJRVlZHTEZOQlFWZ3NTVUZCZDBKNFFpeFJRVlIyUXpzN1FVRlZTVHRCUVVOQk5rSXNhVUpCUVZjc1EwRkJRelZDTEZGQlFWRXlRaXhSUVVGU0xFVkJRV3RDUml4UFFVRnNRaXhKUVVFMlFpeEhRVUU1UWl4RlFVRnRRMjVDTEU5QlFXNURMRU5CUVRKRExFdEJRVXRvUkN4UFFVRk1MRU5CUVdGMVJTeFBRVUY0UkN4RFFWaG1PMEZCV1VrN1FVRkRRV2hDTEdsQ1FVRlhUaXhYUVVGWFRTeFRRVUZUVUN4UFFVRlVMRU5CUVdsQ0xFdEJRVXRvUkN4UFFVRk1MRU5CUVdGMVJTeFBRVUU1UWl4RFFVRllMRU5CUVZnN1FVRkRRVHRCUVVOS0xGVkJRVWxxUkN4TlFVRk5MRVZCUVZZN08wRkJSVUVzVjBGQlMydEVMRlZCUVV3c1EwRkJaMEpzUWl4TFFVRm9RaXhGUVVGMVFrTXNVVUZCZGtJN08wRkJSVUU3UVVGRFFTeFZRVUZKTDBJc1MwRkJTaXhGUVVGWE8wRkJRMVFzV1VGQlNXbEVMR0ZCUVdFc1MwRkJTekZFTEU5QlFVd3NRMEZCWVRKRExFdEJRV0lzUTBGQmJVSktMRXRCUVc1Q0xFMUJRVGhDTEVOQlFTOURPenRCUVVOSk8wRkJRMEZ2UWl4WFFVWktPenRCUVVkSk8wRkJRMEZETEc5Q1FVRmhMRU5CUVVNc1JVRkJSV3BETEZGQlFWRjFRaXhUUVVGU0xFVkJRVzFDUlN4UFFVRnVRaXhKUVVFNFFpeEhRVUZvUXl4RFFVcHNRanRCUVV0Qk8wRkJRMEVzV1VGQlNVMHNWVUZCU2l4RlFVRm5RanRCUVVOa08wRkJRMEZ1UkN4alFVRkpNRU1zU1VGQlNpeEpRVUZsVFN4UlFVRm1PMEZCUTBFN1FVRkRRVWtzWjBKQlFVMTZRaXhYUVVGWExFdEJRVXRtTEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ01FTXNTMEZCYWtJc1EwRkJkVUphTEVsQlFYWkNMRU5CUVZnc1NVRkJNa05OTEZGQlFUTkRMRWRCUVhORVN5eFRRVUUxUkR0QlFVTkJPMEZCUTBFN1FVRkRRU3hqUVVGSmJFSXNUVUZCVFN4UFFVRlBRU3hGUVVGUUxFdEJRV01zVlVGQmVFSXNSVUZCYjBNN1FVRkJSVUU3UVVGQlR5eFhRVkF2UWl4RFFVOHJRanRCUVVNNVF5eFRRVkpFTEUxQlVVODdRVUZEVER0QlFVTkJMR05CUVVsdlFpeFpRVUZaTlVJc1YwRkJWeXhMUVVGTGFrTXNUMEZCVEN4RFFVRmhMRU5CUVdJc1JVRkJaMEkwUkN4TFFVRm9RaXhEUVVGelFsb3NTVUZCZEVJc1EwRkJXQ3hEUVVGb1FqdEJRVU5CTzBGQlEwRTdRVUZEUVZVc1owSkJRVTFLTEZsQlFWbFJMRTFCUVUxRUxGTkJRVTRzU1VGQmJVSXNRMEZCUXl4TFFVRkxOMFVzVDBGQlRDeERRVUZoSzBVc1dVRkJZaXhIUVVFMFFpeExRVUZMTDBVc1QwRkJUQ3hEUVVGaE1rTXNTMEZCTVVNc1MwRkJhMFFzUTBGQlF5eExRVUZMTTBNc1QwRkJUQ3hEUVVGaE5FTXNSMEZCWWl4SFFVRnBRaXhMUVVGTE5VTXNUMEZCVEN4RFFVRmhNa01zUzBGQkwwSXNTVUZCYzBNc1IwRkJlRVlzUTBGQmJrSXNSMEZCYTBoclF5eFRRVUU1U0N4SlFVRXlTVVlzVTBGQmFrbzdRVUZEUkR0QlFVTkVPMEZCUTBGeVJDeHhRa0ZCVjNsRExFbEJRVmdzU1VGQmQwSlhMRWRCUVhoQ08wRkJRMFE3TzBGQlJVUXNWMEZCUzNwRkxGRkJRVXdzUTBGQll5dEZMRWRCUVdRc1EwRkJhMElzY1VKQlFXeENMRVZCUVhsRExGbEJRVmM3UVVGRGNFTTdPenM3UVVGSlFYWkVMR05CUVUxNFFpeFJRVUZPTEVOQlFXVm5SaXhQUVVGbUxFTkJRWFZDTEdsQ1FVRjJRaXhGUVVFd1F5eERRVUZETTBJc1MwRkJSQ3hEUVVFeFF6dEJRVU5JTEU5QlRtSTdPMEZCVVVFN1FVRkRRU3hWUVVGSk5FSXNWMEZCVnl4TFFVRkxha1lzVVVGQlRDeERRVUZqU1N4SlFVRmtMRU5CUVcxQ0xGVkJRVzVDTEVsQlFXbERMRTlCUVVzc1JVRkJkRU1zUjBGQk1rTXNTMEZCUzB3c1QwRkJUQ3hEUVVGaGEwWXNVVUZCZGtVN08wRkJSVUVzYVVOQlFVdEJMRkZCUVV3c1JVRkJaVFZDTEV0QlFXWXNSVUZCYzBJc1dVRkJWenRCUVVNdlFqdEJRVU5CTzBGQlEwRTdRVUZEUVN4WlFVRkpkMElzVFVGQlRWSXNVVUZCVGl4RFFVRktMRVZCUVhGQ08wRkJRMjVDYUVJc1owSkJRVTFvUXl4SFFVRk9MRU5CUVZVd1F5eEpRVUZXTEVWQlFXMUNka0lzVjBGQlZ5eEhRVUU1UWp0QlFVTkVMRk5CUmtRc1RVRkhTenRCUVVOSVlTeG5Ra0ZCVFdoRExFZEJRVTRzUTBGQlZUQkRMRWxCUVZZc1JVRkJiVUpOTEZGQlFXNUNPMEZCUTBRN08wRkJSVVFzV1VGQlNTeERRVUZETjBNc1RVRkJUWHBDTEU5QlFVNHNRMEZCWTJsRExGZEJRVzVDTEVWQlFXZERPMEZCUXpsQ08wRkJRMEZTTEdkQ1FVRk5TaXhMUVVGT0xFTkJRVmxETEVkQlFWb3NRMEZCWjBKNVF5eEpRVUZvUWl4RlFVRjVRblJDTEZkQlFWY3NSMEZCY0VNN1FVRkRSQ3hUUVVoRUxFMUJSMDg3UVVGRFREdEJRVU5CYUVJc1owSkJRVTFLTEV0QlFVNHNRMEZCV1VNc1IwRkJXaXhEUVVGblFrRXNSMEZCYUVJN1FVRkRSRHRCUVVOR0xFOUJiRUpFT3p0QlFYRkNRVHM3T3p0QlFVbEJOa1FzYlVKQlFXRXhSQ3hOUVVGTk1rUXNUMEZCYmtJN1FVRkRRVE5FTEZsQlFVMHlSQ3hQUVVGT0xFZEJRV2RDUXl4WFFVRlhMRmxCUVZVN1FVRkRia00xUkN4alFVRk5lRUlzVVVGQlRpeERRVUZsWjBZc1QwRkJaaXhEUVVGMVFpeHRRa0ZCZGtJc1JVRkJORU1zUTBGQlF6TkNMRXRCUVVRc1EwRkJOVU03UVVGRFJDeFBRVVpsTEVWQlJXSTNRaXhOUVVGTmVrSXNUMEZCVGl4RFFVRmpjMFlzV1VGR1JDeERRVUZvUWp0QlFVZEVPenRCUVVWRU96czdPenM3T3pzN2FVTkJUV0ZETEVjc1JVRkJTenRCUVVOb1FpeFZRVUZKUXl4VlFVRlhSQ3hSUVVGUkxFTkJRVklzUjBGQldTeExRVUZMZGtZc1QwRkJUQ3hEUVVGaEswVXNXVUZCZWtJc1IwRkJkME1zUzBGQlN5OUZMRTlCUVV3c1EwRkJZWGxHTEZWQlFYQkZPMEZCUTBFc1ZVRkJTVU1zUzBGQlN5eExRVUZMTjBVc1RVRkJUQ3hEUVVGWlNTeEZRVUZhTEVOQlFXVnpSU3hIUVVGbUxFVkJRVzlDYmtVc1NVRkJjRUlzUTBGQmVVSXNTVUZCZWtJc1MwRkJhME1zYTBOQlFWa3NRMEZCV2l4RlFVRmxMRkZCUVdZc1EwRkJNME03UVVGRFFTeFhRVUZMVUN4TlFVRk1MRU5CUVZsSkxFVkJRVm9zUTBGQlpYTkZMRWRCUVdZc1JVRkJiMEp1UlN4SlFVRndRaXhEUVVGNVFqdEJRVU4yUWl4alFVRk5jMFVzUlVGRWFVSTdRVUZGZGtJc1pVRkJUeXhMUVVGTE1VWXNUMEZCVEN4RFFVRmhORU1zUjBGR1J6dEJRVWQyUWl4bFFVRlBMRXRCUVVzMVF5eFBRVUZNTEVOQlFXRXlReXhMUVVoSE8wRkJTWFpDTEdkQ1FVRlJMRXRCUVVzelF5eFBRVUZNTEVOQlFXRTBSRHRCUVVwRkxFOUJRWHBDTzBGQlRVRXNWMEZCU3k5RExFMUJRVXdzUTBGQldVa3NSVUZCV2l4RFFVRmxjMFVzUjBGQlppeEZRVUZ2UW1oRUxFZEJRWEJDTEVOQlFYZENhVVFzVDBGQmVFSTdRVUZEUVN4WFFVRkxla1VzVDBGQlRDeERRVUZoUlN4RlFVRmlMRU5CUVdkQ2MwVXNSMEZCYUVJc1JVRkJjVUp1UlN4SlFVRnlRaXhEUVVFd1FqdEJRVU40UWl4blFrRkJVU3hSUVVSblFqdEJRVVY0UWl4NVFrRkJhVUp6UlN4RlFVWlBPMEZCUjNoQ0xIbENRVUZwUWl4TFFVRkxNVVlzVDBGQlRDeERRVUZoTkVNc1IwRklUanRCUVVsNFFpeDVRa0ZCYVVJc1MwRkJTelZETEU5QlFVd3NRMEZCWVRKRExFdEJTazQ3UVVGTGVFSXNlVUpCUVdsQ05rTXNUMEZNVHp0QlFVMTRRaXcwUWtGQmIwSXNTMEZCUzNoR0xFOUJRVXdzUTBGQllYVkNMRkZCUVdJc1IwRkJkMElzVlVGQmVFSXNSMEZCY1VNc1dVRk9ha003UVVGUGVFSXNiMEpCUVZrN1FVRlFXU3hQUVVFeFFqdEJRVk5FT3p0QlFVVkVPenM3T3pzN096czdPeXRDUVU5WFVDeFBMRVZCUVZOMVFpeEhMRVZCUVVzN1FVRkRka0lzVlVGQlNXZEVMRTFCUVUwc1MwRkJTM1pHTEU5QlFVd3NRMEZCWVdsRExGZEJRV0lzUjBGQk1rSXNTMEZCUzJ4Q0xFOUJRVXdzUTBGQllUSkRMRXRCUVdJc1EwRkJiVUl4UXl4UFFVRnVRaXhEUVVFelFpeEhRVUY1UkN4RFFVRnVSVHRCUVVOQkxGZEJRVXRJTEUxQlFVd3NRMEZCV1Vrc1JVRkJXaXhEUVVGbGMwVXNSMEZCWml4RlFVRnZRbWhFTEVkQlFYQkNMRU5CUVhkQ1FTeEhRVUY0UWp0QlFVTkJka0lzWTBGQlVVa3NTVUZCVWl4RFFVRmhMR1ZCUVdJc1JVRkJPRUp0UWl4SFFVRTVRanRCUVVORU96dEJRVVZFT3pzN096czdPenM3T3pzN096dHBRMEZYWVc5RUxFTXNSVUZCUnpORkxFOHNSVUZCVTNWQ0xFY3NSVUZCU3p0QlFVTTFRaXhWUVVGSlF5eExRVUZLTEVWQlFWZHZSQ3hOUVVGWU8wRkJRMEVzVlVGQlNTeERRVUZEY2tRc1IwRkJUQ3hGUVVGVk8wRkJRVU03UVVGRFZHOUVMRlZCUVVWRkxHTkJRVVk3UVVGRFFTeFpRVUZKY0VVc1VVRkJVU3hKUVVGYU8wRkJRVUVzV1VGRFNVWXNWMEZCVnl4TFFVRkxka0lzVDBGQlRDeERRVUZoZFVJc1VVRkVOVUk3UVVGQlFTeFpRVVZKZFVVc1VVRkJVWFpGTEZkQlFWY3NVVUZCV0N4SFFVRnpRaXhQUVVac1F6dEJRVUZCTEZsQlIwbDNSU3haUVVGWmVFVXNWMEZCVnl4TFFVRllMRWRCUVcxQ0xFMUJTRzVETzBGQlFVRXNXVUZKU1hsRkxHTkJRV042UlN4WFFVRlhiMFVzUlVGQlJVMHNTMEZCWWl4SFFVRnhRazRzUlVGQlJVOHNTMEZLZWtNN1FVRkJRU3haUVV0SlF5eGxRVUZsTEV0QlFVdHVSaXhQUVVGTUxFTkJRV0VzUTBGQllpeEZRVUZuUW10RUxIRkNRVUZvUWl4SFFVRjNRelJDTEV0QlFYaERMRWxCUVdsRUxFTkJUSEJGTzBGQlFVRXNXVUZOU1Uwc1UwRkJVeXhMUVVGTGJrY3NVVUZCVEN4RFFVRmpMRU5CUVdRc1JVRkJhVUpwUlN4eFFrRkJha0lzUjBGQmVVTTBRaXhMUVVGNlF5eERRVTVpTzBGQlFVRXNXVUZQU1U4c1pVRkJaVGxGTEZkQlFWY3NjMEpCUVVVclJTeE5RVUZHTEVWQlFWVkRMRk5CUVZZc1JVRkJXQ3hIUVVGdFF5eHpRa0ZCUlVRc1RVRkJSaXhGUVVGVlJTeFZRVUZXTEVWQlVIUkVPenRCUVZWQkxGbEJRVWxETEdGQlFXRXNTMEZCUzNoSExGRkJRVXdzUTBGQlkzbEhMRTFCUVdRc1IwRkJkVUpZTEZOQlFYWkNMRU5CUVdwQ096dEJRVVZCTzBGQlEwRTdRVUZEUVN4WlFVRkpTaXhGUVVGRlowSXNUMEZCUml4TFFVRmphRUlzUlVGQlJVMHNTMEZCY0VJc1JVRkJNa0k3UVVGQlJVUXNkMEpCUVdOQkxHTkJRV05MTEZsQlFUVkNPMEZCUVRKRE8wRkJRM2hGTEZsQlFVbFBMR1ZCUVdWYUxHTkJRV05UTEZWQlFXcERPMEZCUTBFc1dVRkJTVWtzUzBGQlNqdEJRVU5CTEZsQlFVbEVMR1ZCUVdVc1EwRkJia0lzUlVGQmMwSTdRVUZEY0VKRExHdENRVUZSTEVOQlFWSTdRVUZEUkN4VFFVWkVMRTFCUlU4c1NVRkJTVVFzWlVGQlpWSXNUVUZCYmtJc1JVRkJNa0k3UVVGRGFFTlRMR3RDUVVGUlZDeE5RVUZTTzBGQlEwUXNVMEZHVFN4TlFVVkJPMEZCUTB4VExHdENRVUZSUkN4WlFVRlNPMEZCUTBRN1FVRkRSQ3haUVVGSlJTeFpRVUZaY0VVc1VVRkJVVzFGTEV0QlFWSXNSVUZCWlZRc1RVRkJaaXhEUVVGb1FqczdRVUZGUVRWRUxHZENRVUZSTEV0QlFVdDFSU3hOUVVGTUxFTkJRVmxFTEZOQlFWb3NRMEZCVWpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzSzBKQlFWTXNRMEZCUXl4TFFVRkxPVWNzVDBGQlRDeERRVUZoZFVJc1VVRkJNMElzUlVGQmNVTTdRVUZCUTJsQ0xHdENRVUZSTEV0QlFVdDRReXhQUVVGTUxFTkJRV0UwUXl4SFFVRmlMRWRCUVcxQ1NpeExRVUV6UWp0QlFVRnJRenM3UVVGRmVFVkJMR2RDUVVGUlppeE5RVUZOZFVZc1dVRkJUaXhEUVVGdFFpeEpRVUZ1UWl4RlFVRjVRbmhGTEV0QlFYcENMRU5CUVZJN1FVRkRRVHRCUVVOQmIwUXNhVUpCUVZNc1MwRkJWRHM3UVVGRlFTeFpRVUZKTEVOQlFVTTFSU3hQUVVGTUxFVkJRV003UVVGQlF6dEJRVU5pTEdOQlFVbHBSeXhsUVVGbFF5eFpRVUZaTEV0QlFVdHNSeXhQUVVGcVFpeEZRVUV3UWl0RkxGTkJRVEZDTEVWQlFYRkRZeXhMUVVGeVF5eEZRVUUwUTJZc1MwRkJOVU1zUTBGQmJrSTdRVUZCUVN4alFVTkpjVUlzWlVGQlpVUXNXVUZCV1N4TFFVRkxhRVlzVVVGQmFrSXNSVUZCTWtJMlJDeFRRVUV6UWl4RlFVRnpRMk1zUzBGQmRFTXNSVUZCTmtObUxFdEJRVGRETEVOQlJHNUNPMEZCUlVrNVJTeHZRa0ZCVldsSExHZENRVUZuUWtVc1dVRkJhRUlzUjBGQkswSXNTMEZCUzI1SExFOUJRWEJETEVkQlFUaERMRXRCUVV0clFpeFJRVUUzUkR0QlFVTk1PMEZCUlVZc1QwRXpRMFFzVFVFeVEwODdRVUZCUXp0QlFVTk9UU3huUWtGQlVTeExRVUZMZDBVc1dVRkJUQ3hEUVVGclFpeEpRVUZzUWl4RlFVRjNRbnBGTEVkQlFYaENMRU5CUVZJN1FVRkRRWEZFTEdsQ1FVRlRMRWxCUVZRN1FVRkRSRHM3UVVGRlJDeFhRVUZMZEVRc1lVRkJUQ3hEUVVGdFFuUkNMRTlCUVc1Q0xFVkJRVFJDZDBJc1MwRkJOVUlzUlVGQmJVTnZSQ3hOUVVGdVF6dEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPMmxEUVU5aE5VVXNUeXhGUVVGVGQwSXNTeXhGUVVGUE8wRkJRek5DTEZWQlFVbEVMRWRCUVVvN1FVRkJRU3hWUVVORmNVSXNUMEZCVHl4TFFVRkxOVVFzVDBGQlRDeERRVUZoTkVRc1NVRkVkRUk3UVVGQlFTeFZRVVZGZDBRc1RVRkJUVzVGTEZkQlFWZFhMRTlCUVVzc1EwRkJhRUlzUTBGR1VqdEJRVUZCTEZWQlIwVjVSQ3hKUVVoR08wRkJRVUVzVlVGSFVVTXNVVUZJVWp0QlFVRkJMRlZCUjJ0Q1F5eFJRVWhzUWp0QlFVbEJMRlZCUVVrc1EwRkJReXhEUVVGRGRrY3NUMEZCVGl4RlFVRmxPMEZCUTJKMVFpeGpRVUZOVlN4WFFVRlhha01zVVVGQlVVa3NTVUZCVWl4RFFVRmhMR1ZCUVdJc1EwRkJXQ3hEUVVGT08wRkJRMFFzVDBGR1JDeE5RVWRMTzBGQlEwaHRRaXhqUVVGTlF5eExRVUZPTzBGQlEwUTdRVUZEUkRaRkxHRkJRVTg1UlN4TlFVRk5jVUlzU1VGQllqdEJRVU5CTUVRc2FVSkJRVmN2UlN4TlFVRk5PRVVzU1VGQmFrSTdRVUZEUVVVc2FVSkJRVmRFTEZkQlFWY3hSQ3hKUVVGMFFqdEJRVU5CTEZWQlFVbDVSQ3hUUVVGVExFTkJRV0lzUlVGQlowSTdRVUZEWkN4bFFVRlBPVVVzUjBGQlVEdEJRVU5FTzBGQlEwUkJMRmxCUVUxQkxFOUJRVThyUlN4WFFVRlhSaXhIUVVGc1FpeEhRVUYzUWtjc1VVRkJlRUlzUjBGQmJVTkVMRkZCUVhwRE8wRkJRMEVzWVVGQlR5OUZMRWRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN09FSkJTMVU3UVVGRFVpeFhRVUZMYVVZc1owSkJRVXdzUTBGQmMwSXNTMEZCUzNoSExFOUJRVE5DTzBGQlEwRXNWVUZCUnl4TFFVRkxSQ3hQUVVGTUxFTkJRV0VzUTBGQllpeERRVUZJTEVWQlFXOUNPMEZCUTJ4Q0xHRkJRVXQ1Unl4blFrRkJUQ3hEUVVGelFpeExRVUZMZEVZc1VVRkJNMEk3UVVGRFJEdEJRVU5HT3p0QlFVZEVPenM3T3pzN096czdjVU5CVFdsQ2JFSXNUeXhGUVVGVE8wRkJRM2hDTEZWQlFVbFRMRkZCUVZFc1NVRkJXanRCUVVGQkxGVkJRMGxuUnl4VFFVUktPMEZCUVVFc1ZVRkZTVU1zUzBGR1NqczdRVUZKUlN4WFFVRkxOMGNzVFVGQlRDeERRVUZaT0Vjc1IwRkJXaXhEUVVGblFpeHJRa0ZCYUVJc1JVRkJiME5ETEVWQlFYQkRMRU5CUVhWRExHdENRVUYyUXl4RlFVRXlSQ3hWUVVGVGFrTXNRMEZCVkN4RlFVRlpPMEZCUTNKRkxGbEJRVWxLTEUxQlFVMDVSQ3hOUVVGTldpeE5RVUZPTEVOQlFXRTJReXhMUVVGaUxFTkJRVzFDTEhOQ1FVRkZMRWxCUVVZc1EwRkJia0lzUTBGQlZqdEJRVU5CYWtNc1kwRkJUVzlITEZsQlFVNHNRMEZCYlVKc1F5eERRVUZ1UWl4RlFVRnpRbXhGTEUxQlFVMVdMRTlCUVU0c1EwRkJZMFVzUlVGQlpDeERRVUZwUW5ORkxFZEJRV3BDTEVOQlFYUkNMRVZCUVRaRExITkNRVUZGTEVsQlFVWXNSVUZCVVdoRUxFZEJRVklzUlVGQk4wTTdRVUZEUkN4UFFVaEVPenRCUVV0QkxGVkJRVWtzUzBGQlMzWkRMRTlCUVV3c1EwRkJZVGhJTEZkQlFXcENMRVZCUVRoQ08wRkJRelZDTEdGQlFVczNTQ3hSUVVGTUxFTkJRV013U0N4SFFVRmtMRU5CUVd0Q0xHbENRVUZzUWl4RlFVRnhRME1zUlVGQmNrTXNRMEZCZDBNc2FVSkJRWGhETEVWQlFUSkVMRlZCUVZOcVF5eERRVUZVTEVWQlFWazdRVUZEY2tVc1kwRkJTV3hGTEUxQlFVMTRRaXhSUVVGT0xFTkJRV1ZKTEVsQlFXWXNRMEZCYjBJc1ZVRkJjRUlzUTBGQlNpeEZRVUZ4UXp0QlFVRkZMRzFDUVVGUExFdEJRVkE3UVVGQlpUczdRVUZGZEVRc1kwRkJTU3hEUVVGRExITkNRVUZGYzBZc1JVRkJSVzlETEUxQlFVb3NSVUZCV1VNc1JVRkJXaXhEUVVGbExITkNRVUZtTEVOQlFVd3NSVUZCTmtNN1FVRkRNME1zWjBKQlFVbDJSeXhOUVVGTmVrSXNUMEZCVGl4RFFVRmphVU1zVjBGQmJFSXNSVUZCSzBJN1FVRkROMEpTTEc5Q1FVRk5iMGNzV1VGQlRpeERRVUZ0UW14RExFTkJRVzVDTzBGQlEwUXNZVUZHUkN4TlFVVlBPMEZCUTB4c1JTeHZRa0ZCVFc5SExGbEJRVTRzUTBGQmJVSnNReXhEUVVGdVFpeEZRVUZ6UW14RkxFMUJRVTFVTEU5QlFUVkNPMEZCUTBRN1FVRkRSanRCUVVOR0xGTkJWa1E3UVVGWFJEczdRVUZGU0N4VlFVRkpMRXRCUVV0b1FpeFBRVUZNTEVOQlFXRnBTU3hUUVVGcVFpeEZRVUUwUWp0QlFVTXhRaXhoUVVGTGJFZ3NUMEZCVEN4RFFVRmhiVWdzVVVGQllqczdRVUZGUVN4WlFVRkpReXhSUVVGUkxITkNRVUZGTEUxQlFVWXNRMEZCV2p0QlFVTkJia2dzWjBKQlEwY3lSeXhIUVVSSUxFTkJRMDhzY1VKQlJGQXNSVUZGUjBNc1JVRkdTQ3hEUVVWTkxIRkNRVVpPTEVWQlJUWkNMRlZCUVZOcVF5eERRVUZVTEVWQlFWazdRVUZEY2tNelJTeHJRa0ZCVVdFc1VVRkJVaXhEUVVGcFFpeGhRVUZxUWp0QlFVTkJTaXhuUWtGQlRVb3NTMEZCVGl4RFFVRlpVU3hSUVVGYUxFTkJRWEZDTEdGQlFYSkNMRVZCUm5GRExFTkJSVVE3UVVGRGNFTktMR2RDUVVGTmVFSXNVVUZCVGl4RFFVRmxTU3hKUVVGbUxFTkJRVzlDTEZWQlFYQkNMRVZCUVdkRExFbEJRV2hET3p0QlFVVkJiMGdzYzBKQlFWa3NjMEpCUVVVNVFpeEZRVUZGZVVNc1lVRkJTaXhEUVVGYU96dEJRVVZCUkN4blFrRkJUVkFzUlVGQlRpeERRVUZUTEhGQ1FVRlVMRVZCUVdkRExGVkJRVk5xUXl4RFFVRlVMRVZCUVZrN1FVRkRNVU5CTEdOQlFVVkZMR05CUVVZN1FVRkRRWEJGTEd0Q1FVRk5iMGNzV1VGQlRpeERRVUZ0UW14RExFTkJRVzVDTEVWQlFYTkNPRUlzVTBGQmRFSTdRVUZGUkN4WFFVcEVMRVZCU1VkSExFVkJTa2dzUTBGSlRTeHRRa0ZLVGl4RlFVa3lRaXhWUVVGVGFrTXNRMEZCVkN4RlFVRlpPMEZCUTNKRGJFVXNhMEpCUVUxdlJ5eFpRVUZPTEVOQlFXMUNiRU1zUTBGQmJrSXNSVUZCYzBJNFFpeFRRVUYwUWpzN1FVRkZRWHBITEc5Q1FVRlJjVWdzVjBGQlVpeERRVUZ2UWl4aFFVRndRanRCUVVOQk5VY3NhMEpCUVUxS0xFdEJRVTRzUTBGQldXZElMRmRCUVZvc1EwRkJkMElzWVVGQmVFSTdRVUZEUVRWSExHdENRVUZOZUVJc1VVRkJUaXhEUVVGbFNTeEpRVUZtTEVOQlFXOUNMRlZCUVhCQ0xFVkJRV2RETEV0QlFXaERPenRCUVVWQk9FZ3NhMEpCUVUxU0xFZEJRVTRzUTBGQlZTeDFRMEZCVmp0QlFVTkVMRmRCV2tRN1FVRmhTQ3hUUVhSQ1JEdEJRWFZDUVR0QlFYWkNRU3hUUVhkQ1EwTXNSVUY0UWtRc1EwRjNRa2tzTWtOQmVFSktMRVZCZDBKcFJDeFZRVUZUYWtNc1EwRkJWQ3hGUVVGWk8wRkJRek5FUVN4WlFVRkZSU3hqUVVGR08wRkJRMFFzVTBFeFFrUTdRVUV5UWtRN08wRkJSVVEzUlN4alFVRlJNa2NzUjBGQlVpeERRVUZaTEcxQ1FVRmFMRVZCUVdsRFF5eEZRVUZxUXl4RFFVRnZReXh0UWtGQmNFTXNSVUZCZVVRc1ZVRkJVMnBETEVOQlFWUXNSVUZCV1R0QlFVTnVSU3haUVVGSk1rTXNWMEZCVnl4elFrRkJSU3hKUVVGR0xFTkJRV1k3UVVGQlFTeFpRVU5KTDBNc1RVRkJUVGxFTEUxQlFVMTZRaXhQUVVGT0xFTkJRV05wUXl4WFFVRmtMRWRCUVRSQ1VpeE5RVUZOVml4UFFVRk9MRU5CUVdNeVF5eExRVUZrTEVOQlFXOUNORVVzVVVGQmNFSXNRMEZCTlVJc1IwRkJORVFzUTBGRWRFVTdRVUZCUVN4WlFVVkpReXhYUVVGWGRFWXNWMEZCVjNoQ0xFMUJRVTFhTEUxQlFVNHNRMEZCWVVrc1JVRkJZaXhEUVVGblFuTkZMRWRCUVdoQ0xFVkJRWEZDYUVRc1IwRkJja0lzUlVGQldDeERRVVptTzBGQlFVRXNXVUZIU1dsSExGRkJTRW83TzBGQlMwRTdRVUZEUVRkSUxHbERRVUZUT0Vnc1UwRkJWQ3hEUVVGdFFqbERMRU5CUVc1Q0xFVkJRWE5DTEZGQlFYUkNMRVZCUVdkRE8wRkJRemxDSzBNc2IwSkJRVlVzYjBKQlFWYzdRVUZEYmtKR0xIVkNRVUZYUkN4WFFVRlhPVWNzVFVGQlRYcENMRTlCUVU0c1EwRkJZelJFTEVsQlFYQkRPMEZCUTBRc1YwRklOa0k3UVVGSk9VSXJSU3h2UWtGQlZTeHZRa0ZCVnp0QlFVTnVRa2dzZFVKQlFWZEVMRmRCUVZjNVJ5eE5RVUZOZWtJc1QwRkJUaXhEUVVGak5FUXNTVUZCY0VNN1FVRkRSQ3hYUVU0MlFqdEJRVTg1UW1kR0xIbENRVUZsTEhsQ1FVRlhPMEZCUTNoQ1NpeDFRa0ZCVjBRc1YwRkJWemxITEUxQlFVMTZRaXhQUVVGT0xFTkJRV00wUkN4SlFVRmtMRWRCUVhGQ0xFVkJRVE5ETzBGQlEwUXNWMEZVTmtJN1FVRlZPVUpwUml4NVFrRkJaU3g1UWtGQlZ6dEJRVU40UWt3c2RVSkJRVmRFTEZkQlFWYzVSeXhOUVVGTmVrSXNUMEZCVGl4RFFVRmpORVFzU1VGQlpDeEhRVUZ4UWl4RlFVRXpRenRCUVVORUxGZEJXalpDTzBGQllUbENhMFlzWlVGQlN5eGxRVUZYTzBGQlEyUk9MSFZDUVVGWEwwY3NUVUZCVFhwQ0xFOUJRVTRzUTBGQll6SkRMRXRCUVhwQ08wRkJRMFFzVjBGbU5rSTdRVUZuUWpsQ2IwY3NaVUZCU3l4bFFVRlhPMEZCUTJSUUxIVkNRVUZYTDBjc1RVRkJUWHBDTEU5QlFVNHNRMEZCWXpSRExFZEJRWHBDTzBGQlEwUXNWMEZzUWpaQ08wRkJiVUk1UW05SExHMUNRVUZUTEcxQ1FVRlhPMEZCUVVVN1FVRkRjRUp5UkN4alFVRkZSU3hqUVVGR08wRkJRMEZ3UlN4clFrRkJUV0VzWVVGQlRpeERRVUZ2UW1kSExGRkJRWEJDTEVWQlFUaENSU3hSUVVFNVFpeEZRVUYzUXl4SlFVRjRRenRCUVVORU8wRkJkRUkyUWl4VFFVRm9RenRCUVhkQ1FUczdPenRCUVVsRUxFOUJia05FTzBGQmIwTkVPenRCUVVWRU96czdPenM3SzBKQlIxYzdRVUZEVkN4WFFVRkxla2dzVDBGQlRDeERRVUZoTkVjc1IwRkJZaXhEUVVGcFFpeFpRVUZxUWp0QlFVTkJMRmRCUVVzNVJ5eE5RVUZNTEVOQlFWazRSeXhIUVVGYUxFTkJRV2RDTEZsQlFXaENPMEZCUTBFc1YwRkJTekZJTEZGQlFVd3NRMEZCWXpCSUxFZEJRV1FzUTBGQmEwSXNXVUZCYkVJN08wRkJSVUY0UXl4dFFrRkJZU3hMUVVGTFF5eFBRVUZzUWp0QlFVTkVPenM3TzBWQk5XaENhMEkyUkN4clFqczdRVUVyYUVKeVFtNUtMRTlCUVU5TkxGRkJRVkFzUjBGQmEwSTdRVUZEYUVJN096czdPenRCUVUxQmRVTXNVMEZCVHl4RFFWQlRPMEZCVVdoQ096czdPenM3UVVGTlFVTXNUMEZCU3l4SFFXUlhPMEZCWldoQ096czdPenM3UVVGTlFXZENMRkZCUVUwc1EwRnlRbFU3UVVGelFtaENPenM3T3pzN1FVRk5RVzFDTEdkQ1FVRmpMRU5CTlVKRk8wRkJOa0pvUWpzN096czdPMEZCVFVGVkxHTkJRVmtzUjBGdVEwazdRVUZ2UTJoQ096czdPenM3UVVGTlFURkVMRmRCUVZNc1MwRXhRMDg3UVVFeVEyaENPenM3T3pzN1FVRk5RU3RHTEdWQlFXRXNTVUZxUkVjN1FVRnJSR2hDT3pzN096czdRVUZOUVhaSExGbEJRVlVzUzBGNFJFMDdRVUY1UkdoQ096czdPenM3UVVGTlFUQkhMR0ZCUVZjc1NVRXZSRXM3UVVGblJXaENPenM3T3pzN1FVRk5RWFpITEZsQlFWVXNTMEYwUlUwN1FVRjFSV2hDT3pzN096czdRVUZOUVU4c1pVRkJZU3hMUVRkRlJ6dEJRVGhGYUVJN096dEJRVWRCTzBGQlEwRTdPenM3T3p0QlFVMUJjME1zVjBGQlV5eERRWGhHVHp0QlFYbEdhRUk3T3p0QlFVZEJPMEZCUTBFN096czdPenRCUVUxQlZ5eFpRVUZWTEVkQmJrZE5MRVZCYlVkR08wRkJRMlE3T3pzN096dEJRVTFCZEVRc2FVSkJRV1VzVlVFeFIwTTdRVUV5UjJoQ096czdPenM3UVVGTlFYTklMR3RDUVVGblFpeExRV3BJUVR0QlFXdElhRUk3T3pzN096dEJRVTFCTlVRc1owSkJRV01zUjBGNFNFVTdRVUY1U0doQ096czdPenM3UVVGTlFXNURMR2xDUVVGbExFTkJMMGhETzBGQlowbG9RanM3T3pzN08wRkJUVUZPTEhsQ1FVRjFRanRCUVhSSlVDeERRVUZzUWpzN1FVRjVTVUVzVTBGQlUwZ3NUMEZCVkN4RFFVRnBRbmxITEVsQlFXcENMRVZCUVhWQ1F5eEhRVUYyUWl4RlFVRTBRanRCUVVNeFFpeFRRVUZSUkN4UFFVRlBReXhIUVVGbU8wRkJRMFE3UVVGRFJDeFRRVUZUYkVNc1YwRkJWQ3hEUVVGeFFteEhMRTlCUVhKQ0xFVkJRVGhDY1Vrc1IwRkJPVUlzUlVGQmJVTkRMRkZCUVc1RExFVkJRVFpEZUVRc1MwRkJOME1zUlVGQmIwUTdRVUZEYkVRc1UwRkJUekZETEV0QlFVdHRSeXhIUVVGTUxFTkJRVlYyU1N4UlFVRlJkMGtzVVVGQlVpeEhRVUZ0UWtnc1IwRkJia0lzU1VGQk1rSnlTU3hSUVVGUk9FVXNTMEZCVWl4TlFVRnRRaXhEUVVFdlF5eEhRVUZ4UkhkRUxGRkJRVGxFTEVOQlFWQTdRVUZEUkR0QlFVTkVMRk5CUVZOd1J5eFBRVUZVTEVOQlFXbENkVWNzU1VGQmFrSXNSVUZCZFVKcVNDeExRVUYyUWl4RlFVRTRRanRCUVVNMVFpeFRRVUZQV1N4TFFVRkxjMGNzUjBGQlRDeERRVUZUYkVnc1MwRkJWQ3hKUVVGblFsa3NTMEZCUzNOSExFZEJRVXdzUTBGQlUwUXNTVUZCVkN4RFFVRjJRanRCUVVORU96dFJRVVZQTTBvc1RTeEhRVUZCUVN4Tklpd2labWxzWlNJNkltWnZkVzVrWVhScGIyNHVjMnhwWkdWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwYlhCdmNuUWdKQ0JtY205dElDZHFjWFZsY25rbk8xeHVhVzF3YjNKMElIc2dTMlY1WW05aGNtUWdmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNXJaWGxpYjJGeVpDYzdYRzVwYlhCdmNuUWdleUJOYjNabElIMGdabkp2YlNBbkxpOW1iM1Z1WkdGMGFXOXVMblYwYVd3dWJXOTBhVzl1Snp0Y2JtbHRjRzl5ZENCN0lFZGxkRmx2UkdsbmFYUnpMQ0J5ZEd3Z1lYTWdVblJzSUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1WTI5eVpTYzdYRzVjYm1sdGNHOXlkQ0I3SUZCc2RXZHBiaUI5SUdaeWIyMGdKeTR2Wm05MWJtUmhkR2x2Ymk1d2JIVm5hVzRuTzF4dVhHNXBiWEJ2Y25RZ2V5QlViM1ZqYUNCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG5SdmRXTm9KenRjYmx4dWFXMXdiM0owSUhzZ1ZISnBaMmRsY25NZ2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVkWFJwYkM1MGNtbG5aMlZ5Y3ljN1hHNHZLaXBjYmlBcUlGTnNhV1JsY2lCdGIyUjFiR1V1WEc0Z0tpQkFiVzlrZFd4bElHWnZkVzVrWVhScGIyNHVjMnhwWkdWeVhHNGdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMbTF2ZEdsdmJseHVJQ29nUUhKbGNYVnBjbVZ6SUdadmRXNWtZWFJwYjI0dWRYUnBiQzUwY21sbloyVnljMXh1SUNvZ1FISmxjWFZwY21WeklHWnZkVzVrWVhScGIyNHVkWFJwYkM1clpYbGliMkZ5WkZ4dUlDb2dRSEpsY1hWcGNtVnpJR1p2ZFc1a1lYUnBiMjR1ZFhScGJDNTBiM1ZqYUZ4dUlDb3ZYRzVjYm1Oc1lYTnpJRk5zYVdSbGNpQmxlSFJsYm1SeklGQnNkV2RwYmlCN1hHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JR0VnYzJ4cFpHVnlJR052Ym5SeWIyd3VYRzRnSUNBcUlFQmpiR0Z6YzF4dUlDQWdLaUJBYm1GdFpTQlRiR2xrWlhKY2JpQWdJQ29nUUhCaGNtRnRJSHRxVVhWbGNubDlJR1ZzWlcxbGJuUWdMU0JxVVhWbGNua2diMkpxWldOMElIUnZJRzFoYTJVZ2FXNTBieUJoSUhOc2FXUmxjaUJqYjI1MGNtOXNMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElFOTJaWEp5YVdSbGN5QjBieUIwYUdVZ1pHVm1ZWFZzZENCd2JIVm5hVzRnYzJWMGRHbHVaM011WEc0Z0lDQXFMMXh1SUNCZmMyVjBkWEFvWld4bGJXVnVkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJQ1F1WlhoMFpXNWtLSHQ5TENCVGJHbGtaWEl1WkdWbVlYVnNkSE1zSUhSb2FYTXVKR1ZzWlcxbGJuUXVaR0YwWVNncExDQnZjSFJwYjI1ektUdGNiaUFnSUNCMGFHbHpMbU5zWVhOelRtRnRaU0E5SUNkVGJHbGtaWEluT3lBdkx5QnBaVGtnWW1GamF5QmpiMjF3WVhSY2JseHVJQ0F2THlCVWIzVmphQ0JoYm1RZ1ZISnBaMmRsY25NZ2FXNXBkSE1nWVhKbElHbGtaVzF3YjNSbGJuUXNJSGRsSUdwMWMzUWdibVZsWkNCMGJ5QnRZV3RsSUhOMWNtVWdhWFFuY3lCcGJtbDBhV0ZzYVdWa0xseHVJQ0FnSUZSdmRXTm9MbWx1YVhRb0pDazdYRzRnSUNBZ1ZISnBaMmRsY25NdWFXNXBkQ2drS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMmx1YVhRb0tUdGNibHh1SUNBZ0lFdGxlV0p2WVhKa0xuSmxaMmx6ZEdWeUtDZFRiR2xrWlhJbkxDQjdYRzRnSUNBZ0lDQW5iSFJ5SnpvZ2UxeHVJQ0FnSUNBZ0lDQW5RVkpTVDFkZlVrbEhTRlFuT2lBbmFXNWpjbVZoYzJVbkxGeHVJQ0FnSUNBZ0lDQW5RVkpTVDFkZlZWQW5PaUFuYVc1amNtVmhjMlVuTEZ4dUlDQWdJQ0FnSUNBblFWSlNUMWRmUkU5WFRpYzZJQ2RrWldOeVpXRnpaU2NzWEc0Z0lDQWdJQ0FnSUNkQlVsSlBWMTlNUlVaVUp6b2dKMlJsWTNKbFlYTmxKeXhjYmlBZ0lDQWdJQ0FnSjFOSVNVWlVYMEZTVWs5WFgxSkpSMGhVSnpvZ0oybHVZM0psWVhObFgyWmhjM1FuTEZ4dUlDQWdJQ0FnSUNBblUwaEpSbFJmUVZKU1QxZGZWVkFuT2lBbmFXNWpjbVZoYzJWZlptRnpkQ2NzWEc0Z0lDQWdJQ0FnSUNkVFNFbEdWRjlCVWxKUFYxOUVUMWRPSnpvZ0oyUmxZM0psWVhObFgyWmhjM1FuTEZ4dUlDQWdJQ0FnSUNBblUwaEpSbFJmUVZKU1QxZGZURVZHVkNjNklDZGtaV055WldGelpWOW1ZWE4wSnl4Y2JpQWdJQ0FnSUNBZ0owaFBUVVVuT2lBbmJXbHVKeXhjYmlBZ0lDQWdJQ0FnSjBWT1JDYzZJQ2R0WVhnblhHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0ozSjBiQ2M2SUh0Y2JpQWdJQ0FnSUNBZ0owRlNVazlYWDB4RlJsUW5PaUFuYVc1amNtVmhjMlVuTEZ4dUlDQWdJQ0FnSUNBblFWSlNUMWRmVWtsSFNGUW5PaUFuWkdWamNtVmhjMlVuTEZ4dUlDQWdJQ0FnSUNBblUwaEpSbFJmUVZKU1QxZGZURVZHVkNjNklDZHBibU55WldGelpWOW1ZWE4wSnl4Y2JpQWdJQ0FnSUNBZ0oxTklTVVpVWDBGU1VrOVhYMUpKUjBoVUp6b2dKMlJsWTNKbFlYTmxYMlpoYzNRblhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzVwZEdsc2FYcGxjeUIwYUdVZ2NHeDFaMmx1SUdKNUlISmxZV1JwYm1jdmMyVjBkR2x1WnlCaGRIUnlhV0oxZEdWekxDQmpjbVZoZEdsdVp5QmpiMnhzWldOMGFXOXVjeUJoYm1RZ2MyVjBkR2x1WnlCMGFHVWdhVzVwZEdsaGJDQndiM05wZEdsdmJpQnZaaUIwYUdVZ2FHRnVaR3hsS0hNcExseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5cGJtbDBLQ2tnZTF4dUlDQWdJSFJvYVhNdWFXNXdkWFJ6SUQwZ2RHaHBjeTRrWld4bGJXVnVkQzVtYVc1a0tDZHBibkIxZENjcE8xeHVJQ0FnSUhSb2FYTXVhR0Z1Wkd4bGN5QTlJSFJvYVhNdUpHVnNaVzFsYm5RdVptbHVaQ2duVzJSaGRHRXRjMnhwWkdWeUxXaGhibVJzWlYwbktUdGNibHh1SUNBZ0lIUm9hWE11SkdoaGJtUnNaU0E5SUhSb2FYTXVhR0Z1Wkd4bGN5NWxjU2d3S1R0Y2JpQWdJQ0IwYUdsekxpUnBibkIxZENBOUlIUm9hWE11YVc1d2RYUnpMbXhsYm1kMGFDQS9JSFJvYVhNdWFXNXdkWFJ6TG1WeEtEQXBJRG9nSkNoZ0l5UjdkR2hwY3k0a2FHRnVaR3hsTG1GMGRISW9KMkZ5YVdFdFkyOXVkSEp2YkhNbktYMWdLVHRjYmlBZ0lDQjBhR2x6TGlSbWFXeHNJRDBnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0NkYlpHRjBZUzF6Ykdsa1pYSXRabWxzYkYwbktTNWpjM01vZEdocGN5NXZjSFJwYjI1ekxuWmxjblJwWTJGc0lEOGdKMmhsYVdkb2RDY2dPaUFuZDJsa2RHZ25MQ0F3S1R0Y2JseHVJQ0FnSUhaaGNpQnBjMFJpYkNBOUlHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1a2FYTmhZbXhsWkNCOGZDQjBhR2x6TGlSbGJHVnRaVzUwTG1oaGMwTnNZWE56S0hSb2FYTXViM0IwYVc5dWN5NWthWE5oWW14bFpFTnNZWE56S1NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbVJwYzJGaWJHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1WVdSa1EyeGhjM01vZEdocGN5NXZjSFJwYjI1ekxtUnBjMkZpYkdWa1EyeGhjM01wTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhVzV3ZFhSekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVwYm5CMWRITWdQU0FrS0NrdVlXUmtLSFJvYVhNdUpHbHVjSFYwS1R0Y2JpQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NWlhVzVrYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOXpaWFJKYm1sMFFYUjBjaWd3S1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1oaGJtUnNaWE5iTVYwcElIdGNiaUFnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeTVrYjNWaWJHVlRhV1JsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0IwYUdsekxpUm9ZVzVrYkdVeUlEMGdkR2hwY3k1b1lXNWtiR1Z6TG1WeEtERXBPMXh1SUNBZ0lDQWdkR2hwY3k0a2FXNXdkWFF5SUQwZ2RHaHBjeTVwYm5CMWRITXViR1Z1WjNSb0lENGdNU0EvSUhSb2FYTXVhVzV3ZFhSekxtVnhLREVwSURvZ0pDaGdJeVI3ZEdocGN5NGthR0Z1Wkd4bE1pNWhkSFJ5S0NkaGNtbGhMV052Ym5SeWIyeHpKeWw5WUNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2doZEdocGN5NXBibkIxZEhOYk1WMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibkIxZEhNZ1BTQjBhR2x6TG1sdWNIVjBjeTVoWkdRb2RHaHBjeTRrYVc1d2RYUXlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2x6UkdKc0lEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0x5OGdkR2hwY3k0a2FHRnVaR3hsTG5SeWFXZG5aWEpJWVc1a2JHVnlLQ2RqYkdsamF5NTZaaTV6Ykdsa1pYSW5LVHRjYmlBZ0lDQWdJSFJvYVhNdVgzTmxkRWx1YVhSQmRIUnlLREVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZObGRDQm9ZVzVrYkdVZ2NHOXphWFJwYjI1elhHNGdJQ0FnZEdocGN5NXpaWFJJWVc1a2JHVnpLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxsOWxkbVZ1ZEhNb0tUdGNiaUFnZlZ4dVhHNGdJSE5sZEVoaGJtUnNaWE1vS1NCN1hHNGdJQ0FnYVdZb2RHaHBjeTVvWVc1a2JHVnpXekZkS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDl6WlhSSVlXNWtiR1ZRYjNNb2RHaHBjeTRrYUdGdVpHeGxMQ0IwYUdsekxtbHVjSFYwY3k1bGNTZ3dLUzUyWVd3b0tTd2dkSEoxWlN3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6WlhSSVlXNWtiR1ZRYjNNb2RHaHBjeTRrYUdGdVpHeGxNaXdnZEdocGN5NXBibkIxZEhNdVpYRW9NU2t1ZG1Gc0tDa3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM05sZEVoaGJtUnNaVkJ2Y3loMGFHbHpMaVJvWVc1a2JHVXNJSFJvYVhNdWFXNXdkWFJ6TG1WeEtEQXBMblpoYkNncExDQjBjblZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCZmNtVm1iRzkzS0NrZ2UxeHVJQ0FnSUhSb2FYTXVjMlYwU0dGdVpHeGxjeWdwTzF4dUlDQjlYRzRnSUM4cUtseHVJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQXFJRUJ3Y21sMllYUmxYRzRnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhaaGJIVmxJQzBnWm14dllYUnBibWNnY0c5cGJuUWdLSFJvWlNCMllXeDFaU2tnZEc4Z1ltVWdkSEpoYm5ObWIzSnRaV1FnZFhOcGJtY2dkRzhnWVNCeVpXeGhkR2wyWlNCd2IzTnBkR2x2YmlCdmJpQjBhR1VnYzJ4cFpHVnlJQ2gwYUdVZ2FXNTJaWEp6WlNCdlppQmZkbUZzZFdVcFhHNGdJQ292WEc0Z0lGOXdZM1JQWmtKaGNpaDJZV3gxWlNrZ2UxeHVJQ0FnSUhaaGNpQndZM1JQWmtKaGNpQTlJSEJsY21ObGJuUW9kbUZzZFdVZ0xTQjBhR2x6TG05d2RHbHZibk11YzNSaGNuUXNJSFJvYVhNdWIzQjBhVzl1Y3k1bGJtUWdMU0IwYUdsekxtOXdkR2x2Ym5NdWMzUmhjblFwWEc1Y2JpQWdJQ0J6ZDJsMFkyZ29kR2hwY3k1dmNIUnBiMjV6TG5CdmMybDBhVzl1Vm1Gc2RXVkdkVzVqZEdsdmJpa2dlMXh1SUNBZ0lHTmhjMlVnWENKd2IzZGNJanBjYmlBZ0lDQWdJSEJqZEU5bVFtRnlJRDBnZEdocGN5NWZiRzluVkhKaGJuTm1iM0p0S0hCamRFOW1RbUZ5S1R0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnWENKc2IyZGNJanBjYmlBZ0lDQWdJSEJqZEU5bVFtRnlJRDBnZEdocGN5NWZjRzkzVkhKaGJuTm1iM0p0S0hCamRFOW1RbUZ5S1R0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCd1kzUlBaa0poY2k1MGIwWnBlR1ZrS0RJcFhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQkFablZ1WTNScGIyNWNiaUFnS2lCQWNISnBkbUYwWlZ4dUlDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQndZM1JQWmtKaGNpQXRJR1pzYjJGMGFXNW5JSEJ2YVc1MExDQjBhR1VnY21Wc1lYUnBkbVVnY0c5emFYUnBiMjRnYjJZZ2RHaGxJSE5zYVdSbGNpQW9kSGx3YVdOaGJHeDVJR0psZEhkbFpXNGdNQzB4S1NCMGJ5QmlaU0IwY21GdWMyWnZjbTFsWkNCMGJ5QmhJSFpoYkhWbFhHNGdJQ292WEc0Z0lGOTJZV3gxWlNod1kzUlBaa0poY2lrZ2UxeHVJQ0FnSUhOM2FYUmphQ2gwYUdsekxtOXdkR2x2Ym5NdWNHOXphWFJwYjI1V1lXeDFaVVoxYm1OMGFXOXVLU0I3WEc0Z0lDQWdZMkZ6WlNCY0luQnZkMXdpT2x4dUlDQWdJQ0FnY0dOMFQyWkNZWElnUFNCMGFHbHpMbDl3YjNkVWNtRnVjMlp2Y20wb2NHTjBUMlpDWVhJcE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNCY0lteHZaMXdpT2x4dUlDQWdJQ0FnY0dOMFQyWkNZWElnUFNCMGFHbHpMbDlzYjJkVWNtRnVjMlp2Y20wb2NHTjBUMlpDWVhJcE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUIyWVd4MVpTQTlJQ2gwYUdsekxtOXdkR2x2Ym5NdVpXNWtJQzBnZEdocGN5NXZjSFJwYjI1ekxuTjBZWEowS1NBcUlIQmpkRTltUW1GeUlDc2djR0Z5YzJWR2JHOWhkQ2gwYUdsekxtOXdkR2x2Ym5NdWMzUmhjblFwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbFhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQkFablZ1WTNScGIyNWNiaUFnS2lCQWNISnBkbUYwWlZ4dUlDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjJZV3gxWlNBdElHWnNiMkYwYVc1bklIQnZhVzUwSUNoMGVYQnBZMkZzYkhrZ1ltVjBkMlZsYmlBd0xURXBJSFJ2SUdKbElIUnlZVzV6Wm05eWJXVmtJSFZ6YVc1bklIUm9aU0JzYjJjZ1puVnVZM1JwYjI1Y2JpQWdLaTljYmlBZ1gyeHZaMVJ5WVc1elptOXliU2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCaVlYTmxURzluS0hSb2FYTXViM0IwYVc5dWN5NXViMjVNYVc1bFlYSkNZWE5sTENBb0tIWmhiSFZsS2loMGFHbHpMbTl3ZEdsdmJuTXVibTl1VEdsdVpXRnlRbUZ6WlMweEtTa3JNU2twWEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCQVpuVnVZM1JwYjI1Y2JpQWdLaUJBY0hKcGRtRjBaVnh1SUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMllXeDFaU0F0SUdac2IyRjBhVzVuSUhCdmFXNTBJQ2gwZVhCcFkyRnNiSGtnWW1WMGQyVmxiaUF3TFRFcElIUnZJR0psSUhSeVlXNXpabTl5YldWa0lIVnphVzVuSUhSb1pTQndiM2RsY2lCbWRXNWpkR2x2Ymx4dUlDQXFMMXh1SUNCZmNHOTNWSEpoYm5ObWIzSnRLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoTllYUm9MbkJ2ZHloMGFHbHpMbTl3ZEdsdmJuTXVibTl1VEdsdVpXRnlRbUZ6WlN3Z2RtRnNkV1VwSUMwZ01Ta2dMeUFvZEdocGN5NXZjSFJwYjI1ekxtNXZia3hwYm1WaGNrSmhjMlVnTFNBeEtWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhNZ2RHaGxJSEJ2YzJsMGFXOXVJRzltSUhSb1pTQnpaV3hsWTNSbFpDQm9ZVzVrYkdVZ1lXNWtJR1pwYkd3Z1ltRnlMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHRxVVhWbGNubDlJQ1JvYm1Sc0lDMGdkR2hsSUhObGJHVmpkR1ZrSUdoaGJtUnNaU0IwYnlCdGIzWmxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2JHOWpZWFJwYjI0Z0xTQm1iRzloZEdsdVp5QndiMmx1ZENCaVpYUjNaV1Z1SUhSb1pTQnpkR0Z5ZENCaGJtUWdaVzVrSUhaaGJIVmxjeUJ2WmlCMGFHVWdjMnhwWkdWeUlHSmhjaTVjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMklnTFNCallXeHNZbUZqYXlCbWRXNWpkR2x2YmlCMGJ5Qm1hWEpsSUc5dUlHTnZiWEJzWlhScGIyNHVYRzRnSUNBcUlFQm1hWEpsY3lCVGJHbGtaWElqYlc5MlpXUmNiaUFnSUNvZ1FHWnBjbVZ6SUZOc2FXUmxjaU5qYUdGdVoyVmtYRzRnSUNBcUwxeHVJQ0JmYzJWMFNHRnVaR3hsVUc5ektDUm9ibVJzTENCc2IyTmhkR2x2Yml3Z2JtOUpiblpsY25Rc0lHTmlLU0I3WEc0Z0lDQWdMeThnWkc5dUozUWdiVzkyWlNCcFppQjBhR1VnYzJ4cFpHVnlJR2hoY3lCaVpXVnVJR1JwYzJGaWJHVmtJSE5wYm1ObElHbDBjeUJwYm1sMGFXRnNhWHBoZEdsdmJseHVJQ0FnSUdsbUlDaDBhR2x6TGlSbGJHVnRaVzUwTG1oaGMwTnNZWE56S0hSb2FYTXViM0IwYVc5dWN5NWthWE5oWW14bFpFTnNZWE56S1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQXZMMjFwWjJoMElHNWxaV1FnZEc4Z1lXeDBaWElnZEdoaGRDQnpiR2xuYUhSc2VTQm1iM0lnWW1GeWN5QjBhR0YwSUhkcGJHd2dhR0YyWlNCdlpHUWdiblZ0WW1WeUlITmxiR1ZqZEdsdmJuTXVYRzRnSUNBZ2JHOWpZWFJwYjI0Z1BTQndZWEp6WlVac2IyRjBLR3h2WTJGMGFXOXVLVHN2TDI5dUlHbHVjSFYwSUdOb1lXNW5aU0JsZG1WdWRITXNJR052Ym5abGNuUWdjM1J5YVc1bklIUnZJRzUxYldKbGNpNHVMbWR5ZFcxaWJHVXVYRzVjYmlBZ0lDQXZMeUJ3Y21WMlpXNTBJSE5zYVdSbGNpQm1jbTl0SUhKMWJtNXBibWNnYjNWMElHOW1JR0p2ZFc1a2N5d2dhV1lnZG1Gc2RXVWdaWGhqWldWa2N5QjBhR1VnYkdsdGFYUnpJSE5sZENCMGFISnZkV2RvSUc5d2RHbHZibk1zSUc5MlpYSnlhV1JsSUhSb1pTQjJZV3gxWlNCMGJ5QnRhVzR2YldGNFhHNGdJQ0FnYVdZZ0tHeHZZMkYwYVc5dUlEd2dkR2hwY3k1dmNIUnBiMjV6TG5OMFlYSjBLU0I3SUd4dlkyRjBhVzl1SUQwZ2RHaHBjeTV2Y0hScGIyNXpMbk4wWVhKME95QjlYRzRnSUNBZ1pXeHpaU0JwWmlBb2JHOWpZWFJwYjI0Z1BpQjBhR2x6TG05d2RHbHZibk11Wlc1a0tTQjdJR3h2WTJGMGFXOXVJRDBnZEdocGN5NXZjSFJwYjI1ekxtVnVaRHNnZlZ4dVhHNGdJQ0FnZG1GeUlHbHpSR0pzSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbVJ2ZFdKc1pWTnBaR1ZrTzF4dVhHNGdJQ0FnTHk5MGFHbHpJR2x6SUdadmNpQnphVzVuYkdVdGFHRnVaR3hsWkNCMlpYSjBhV05oYkNCemJHbGtaWEp6TENCcGRDQmhaR3AxYzNSeklIUm9aU0IyWVd4MVpTQjBieUJoWTJOdmRXNTBJR1p2Y2lCMGFHVWdjMnhwWkdWeUlHSmxhVzVuSUZ3aWRYQnphV1JsTFdSdmQyNWNJbHh1SUNBZ0lDOHZabTl5SUdOc2FXTnJJR0Z1WkNCa2NtRm5JR1YyWlc1MGN5d2dhWFFuY3lCM1pXbHlaQ0JrZFdVZ2RHOGdkR2hsSUhOallXeGxLQzB4TENBeEtTQmpjM01nY0hKdmNHVnlkSGxjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxuWmxjblJwWTJGc0lDWW1JQ0Z1YjBsdWRtVnlkQ2tnZTF4dUlDQWdJQ0FnYkc5allYUnBiMjRnUFNCMGFHbHpMbTl3ZEdsdmJuTXVaVzVrSUMwZ2JHOWpZWFJwYjI0N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHbHpSR0pzS1NCN0lDOHZkR2hwY3lCaWJHOWpheUJwY3lCMGJ5QndjbVYyWlc1MElESWdhR0Z1Wkd4bGN5Qm1jbTl0SUdOeWIzTnphVzVuSUdWaFkyaHZkR2hsY2k0Z1EyOTFiR1F2YzJodmRXeGtJR0psSUdsdGNISnZkbVZrTGx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGdVpHeGxjeTVwYm1SbGVDZ2thRzVrYkNrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2d5Vm1Gc0lEMGdjR0Z5YzJWR2JHOWhkQ2gwYUdsekxpUm9ZVzVrYkdVeUxtRjBkSElvSjJGeWFXRXRkbUZzZFdWdWIzY25LU2s3WEc0Z0lDQWdJQ0FnSUd4dlkyRjBhVzl1SUQwZ2JHOWpZWFJwYjI0Z1BqMGdhREpXWVd3Z1B5Qm9NbFpoYkNBdElIUm9hWE11YjNCMGFXOXVjeTV6ZEdWd0lEb2diRzlqWVhScGIyNDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYURGV1lXd2dQU0J3WVhKelpVWnNiMkYwS0hSb2FYTXVKR2hoYm1Sc1pTNWhkSFJ5S0NkaGNtbGhMWFpoYkhWbGJtOTNKeWtwTzF4dUlDQWdJQ0FnSUNCc2IyTmhkR2x2YmlBOUlHeHZZMkYwYVc5dUlEdzlJR2d4Vm1Gc0lEOGdhREZXWVd3Z0t5QjBhR2x6TG05d2RHbHZibk11YzNSbGNDQTZJR3h2WTJGMGFXOXVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lIWmxjblFnUFNCMGFHbHpMbTl3ZEdsdmJuTXVkbVZ5ZEdsallXd3NYRzRnSUNBZ0lDQWdJR2hQY2xjZ1BTQjJaWEowSUQ4Z0oyaGxhV2RvZENjZ09pQW5kMmxrZEdnbkxGeHVJQ0FnSUNBZ0lDQnNUM0pVSUQwZ2RtVnlkQ0EvSUNkMGIzQW5JRG9nSjJ4bFpuUW5MRnh1SUNBZ0lDQWdJQ0JvWVc1a2JHVkVhVzBnUFNBa2FHNWtiRnN3WFM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LVnRvVDNKWFhTeGNiaUFnSUNBZ0lDQWdaV3hsYlVScGJTQTlJSFJvYVhNdUpHVnNaVzFsYm5SYk1GMHVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NsYmFFOXlWMTBzWEc0Z0lDQWdJQ0FnSUM4dmNHVnlZMlZ1ZEdGblpTQnZaaUJpWVhJZ2JXbHVMMjFoZUNCMllXeDFaU0JpWVhObFpDQnZiaUJqYkdsamF5QnZjaUJrY21GbklIQnZhVzUwWEc0Z0lDQWdJQ0FnSUhCamRFOW1RbUZ5SUQwZ2RHaHBjeTVmY0dOMFQyWkNZWElvYkc5allYUnBiMjRwTEZ4dUlDQWdJQ0FnSUNBdkwyNTFiV0psY2lCdlppQmhZM1IxWVd3Z2NHbDRaV3h6SUhSdklITm9hV1owSUhSb1pTQm9ZVzVrYkdVc0lHSmhjMlZrSUc5dUlIUm9aU0J3WlhKalpXNTBZV2RsSUc5aWRHRnBibVZrSUdGaWIzWmxYRzRnSUNBZ0lDQWdJSEI0Vkc5TmIzWmxJRDBnS0dWc1pXMUVhVzBnTFNCb1lXNWtiR1ZFYVcwcElDb2djR04wVDJaQ1lYSXNYRzRnSUNBZ0lDQWdJQzh2Y0dWeVkyVnVkR0ZuWlNCdlppQmlZWElnZEc4Z2MyaHBablFnZEdobElHaGhibVJzWlZ4dUlDQWdJQ0FnSUNCdGIzWmxiV1Z1ZENBOUlDaHdaWEpqWlc1MEtIQjRWRzlOYjNabExDQmxiR1Z0UkdsdEtTQXFJREV3TUNrdWRHOUdhWGhsWkNoMGFHbHpMbTl3ZEdsdmJuTXVaR1ZqYVcxaGJDazdYRzRnSUNBZ0lDQWdJQzh2Wm1sNGFXNW5JSFJvWlNCa1pXTnBiV0ZzSUhaaGJIVmxJR1p2Y2lCMGFHVWdiRzlqWVhScGIyNGdiblZ0WW1WeUxDQnBjeUJ3WVhOelpXUWdkRzhnYjNSb1pYSWdiV1YwYUc5a2N5QmhjeUJoSUdacGVHVmtJR1pzYjJGMGFXNW5MWEJ2YVc1MElIWmhiSFZsWEc0Z0lDQWdJQ0FnSUd4dlkyRjBhVzl1SUQwZ2NHRnljMlZHYkc5aGRDaHNiMk5oZEdsdmJpNTBiMFpwZUdWa0tIUm9hWE11YjNCMGFXOXVjeTVrWldOcGJXRnNLU2s3WEc0Z0lDQWdJQ0FnSUM4dklHUmxZMnhoY21VZ1pXMXdkSGtnYjJKcVpXTjBJR1p2Y2lCamMzTWdZV1JxZFhOMGJXVnVkSE1zSUc5dWJIa2dkWE5sWkNCM2FYUm9JRElnYUdGdVpHeGxaQzF6Ykdsa1pYSnpYRzRnSUNBZ2RtRnlJR056Y3lBOUlIdDlPMXh1WEc0Z0lDQWdkR2hwY3k1ZmMyVjBWbUZzZFdWektDUm9ibVJzTENCc2IyTmhkR2x2YmlrN1hHNWNiaUFnSUNBdkx5QlVUMFJQSUhWd1pHRjBaU0IwYnlCallXeGpkV3hoZEdVZ1ltRnpaV1FnYjI0Z2RtRnNkV1Z6SUhObGRDQjBieUJ5WlhOd1pXTjBhWFpsSUdsdWNIVjBjejgvWEc0Z0lDQWdhV1lnS0dselJHSnNLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FYTk1aV1owU0c1a2JDQTlJSFJvYVhNdWFHRnVaR3hsY3k1cGJtUmxlQ2drYUc1a2JDa2dQVDA5SURBc1hHNGdJQ0FnSUNBZ0lDQWdMeTlsYlhCMGVTQjJZWEpwWVdKc1pTd2dkMmxzYkNCaVpTQjFjMlZrSUdadmNpQnRhVzR0YUdWcFoyaDBMM2RwWkhSb0lHWnZjaUJtYVd4c0lHSmhjbHh1SUNBZ0lDQWdJQ0FnSUdScGJTeGNiaUFnSUNBZ0lDQWdJQ0F2TDNCbGNtTmxiblJoWjJVZ2R5OW9JRzltSUhSb1pTQm9ZVzVrYkdVZ1kyOXRjR0Z5WldRZ2RHOGdkR2hsSUhOc2FXUmxjaUJpWVhKY2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWUVkzUWdQU0FnZm40b2NHVnlZMlZ1ZENob1lXNWtiR1ZFYVcwc0lHVnNaVzFFYVcwcElDb2dNVEF3S1R0Y2JpQWdJQ0FnSUM4dmFXWWdiR1ZtZENCb1lXNWtiR1VzSUhSb1pTQnRZWFJvSUdseklITnNhV2RvZEd4NUlHUnBabVpsY21WdWRDQjBhR0Z1SUdsbUlHbDBKM01nZEdobElISnBaMmgwSUdoaGJtUnNaU3dnWVc1a0lIUm9aU0JzWldaMEwzUnZjQ0J3Y205d1pYSjBlU0J1WldWa2N5QjBieUJpWlNCamFHRnVaMlZrSUdadmNpQjBhR1VnWm1sc2JDQmlZWEpjYmlBZ0lDQWdJR2xtSUNocGMweGxablJJYm1Sc0tTQjdYRzRnSUNBZ0lDQWdJQzh2YkdWbWRDQnZjaUIwYjNBZ2NHVnlZMlZ1ZEdGblpTQjJZV3gxWlNCMGJ5QmhjSEJzZVNCMGJ5QjBhR1VnWm1sc2JDQmlZWEl1WEc0Z0lDQWdJQ0FnSUdOemMxdHNUM0pVWFNBOUlHQWtlMjF2ZG1WdFpXNTBmU1ZnTzF4dUlDQWdJQ0FnSUNBdkwyTmhiR04xYkdGMFpTQjBhR1VnYm1WM0lHMXBiaTFvWldsbmFIUXZkMmxrZEdnZ1ptOXlJSFJvWlNCbWFXeHNJR0poY2k1Y2JpQWdJQ0FnSUNBZ1pHbHRJRDBnY0dGeWMyVkdiRzloZENoMGFHbHpMaVJvWVc1a2JHVXlXekJkTG5OMGVXeGxXMnhQY2xSZEtTQXRJRzF2ZG1WdFpXNTBJQ3NnYUdGdVpHeGxVR04wTzF4dUlDQWdJQ0FnSUNBdkwzUm9hWE1nWTJGc2JHSmhZMnNnYVhNZ2JtVmpaWE56WVhKNUlIUnZJSEJ5WlhabGJuUWdaWEp5YjNKeklHRnVaQ0JoYkd4dmR5QjBhR1VnY0hKdmNHVnlJSEJzWVdObGJXVnVkQ0JoYm1RZ2FXNXBkR2xoYkdsNllYUnBiMjRnYjJZZ1lTQXlMV2hoYm1Sc1pXUWdjMnhwWkdWeVhHNGdJQ0FnSUNBZ0lDOHZjR3gxY3l3Z2FYUWdiV1ZoYm5NZ2QyVWdaRzl1SjNRZ1kyRnlaU0JwWmlBblpHbHRKeUJwYzA1aFRpQnZiaUJwYm1sMExDQnBkQ0IzYjI0bmRDQmlaU0JwYmlCMGFHVWdablYwZFhKbExseHVJQ0FnSUNBZ0lDQnBaaUFvWTJJZ0ppWWdkSGx3Wlc5bUlHTmlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdJR05pS0NrN0lIMHZMM1JvYVhNZ2FYTWdiMjVzZVNCdVpXVmtaV1FnWm05eUlIUm9aU0JwYm1sMGFXRnNhWHBoZEdsdmJpQnZaaUF5SUdoaGJtUnNaV1FnYzJ4cFpHVnljMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdMeTlxZFhOMElHTmhZMmhwYm1jZ2RHaGxJSFpoYkhWbElHOW1JSFJvWlNCc1pXWjBMMkp2ZEhSdmJTQm9ZVzVrYkdVbmN5QnNaV1owTDNSdmNDQndjbTl3WlhKMGVWeHVJQ0FnSUNBZ0lDQjJZWElnYUdGdVpHeGxVRzl6SUQwZ2NHRnljMlZHYkc5aGRDaDBhR2x6TGlSb1lXNWtiR1ZiTUYwdWMzUjViR1ZiYkU5eVZGMHBPMXh1SUNBZ0lDQWdJQ0F2TDJOaGJHTjFiR0YwWlNCMGFHVWdibVYzSUcxcGJpMW9aV2xuYUhRdmQybGtkR2dnWm05eUlIUm9aU0JtYVd4c0lHSmhjaTRnVlhObElHbHpUbUZPSUhSdklIQnlaWFpsYm5RZ1ptRnNjMlVnY0c5emFYUnBkbVZ6SUdadmNpQnVkVzFpWlhKeklEdzlJREJjYmlBZ0lDQWdJQ0FnTHk5aVlYTmxaQ0J2YmlCMGFHVWdjR1Z5WTJWdWRHRm5aU0J2WmlCdGIzWmxiV1Z1ZENCdlppQjBhR1VnYUdGdVpHeGxJR0psYVc1bklHMWhibWx3ZFd4aGRHVmtMQ0JzWlhOeklIUm9aU0J2Y0hCdmMybHVaeUJvWVc1a2JHVW5jeUJzWldaMEwzUnZjQ0J3YjNOcGRHbHZiaXdnY0d4MWN5QjBhR1VnY0dWeVkyVnVkR0ZuWlNCM0wyZ2diMllnZEdobElHaGhibVJzWlNCcGRITmxiR1pjYmlBZ0lDQWdJQ0FnWkdsdElEMGdiVzkyWlcxbGJuUWdMU0FvYVhOT1lVNG9hR0Z1Wkd4bFVHOXpLU0EvSUNoMGFHbHpMbTl3ZEdsdmJuTXVhVzVwZEdsaGJGTjBZWEowSUMwZ2RHaHBjeTV2Y0hScGIyNXpMbk4wWVhKMEtTOG9LSFJvYVhNdWIzQjBhVzl1Y3k1bGJtUXRkR2hwY3k1dmNIUnBiMjV6TG5OMFlYSjBLUzh4TURBcElEb2dhR0Z1Wkd4bFVHOXpLU0FySUdoaGJtUnNaVkJqZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklHRnpjMmxuYmlCMGFHVWdiV2x1TFdobGFXZG9kQzkzYVdSMGFDQjBieUJ2ZFhJZ1kzTnpJRzlpYW1WamRGeHVJQ0FnSUNBZ1kzTnpXMkJ0YVc0dEpIdG9UM0pYZldCZElEMGdZQ1I3WkdsdGZTVmdPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1YjI1bEtDZG1hVzVwYzJobFpDNTZaaTVoYm1sdFlYUmxKeXdnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLaUJHYVhKbGN5QjNhR1Z1SUhSb1pTQm9ZVzVrYkdVZ2FYTWdaRzl1WlNCdGIzWnBibWN1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXFJRUJsZG1WdWRDQlRiR2xrWlhJamJXOTJaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KMjF2ZG1Wa0xucG1Mbk5zYVdSbGNpY3NJRnNrYUc1a2JGMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnTHk5aVpXTmhkWE5sSUhkbElHUnZiaWQwSUd0dWIzY2daWGhoWTNSc2VTQm9iM2NnZEdobElHaGhibVJzWlNCM2FXeHNJR0psSUcxdmRtVmtMQ0JqYUdWamF5QjBhR1VnWVcxdmRXNTBJRzltSUhScGJXVWdhWFFnYzJodmRXeGtJSFJoYTJVZ2RHOGdiVzkyWlM1Y2JpQWdJQ0IyWVhJZ2JXOTJaVlJwYldVZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9KMlJ5WVdkbmFXNW5KeWtnUHlBeE1EQXdMell3SURvZ2RHaHBjeTV2Y0hScGIyNXpMbTF2ZG1WVWFXMWxPMXh1WEc0Z0lDQWdUVzkyWlNodGIzWmxWR2x0WlN3Z0pHaHVaR3dzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0x5OGdZV1JxZFhOMGFXNW5JSFJvWlNCc1pXWjBMM1J2Y0NCd2NtOXdaWEowZVNCdlppQjBhR1VnYUdGdVpHeGxMQ0JpWVhObFpDQnZiaUIwYUdVZ2NHVnlZMlZ1ZEdGblpTQmpZV3hqZFd4aGRHVmtJR0ZpYjNabFhHNGdJQ0FnSUNBdkx5QnBaaUJ0YjNabGJXVnVkQ0JwYzA1aFRpd2dkR2hoZENCcGN5QmlaV05oZFhObElIUm9aU0J6Ykdsa1pYSWdhWE1nYUdsa1pHVnVJR0Z1WkNCM1pTQmpZVzV1YjNRZ1pHVjBaWEp0YVc1bElHaGhibVJzWlNCM2FXUjBhQ3hjYmlBZ0lDQWdJQzh2SUdaaGJHd2dZbUZqYXlCMGJ5QnVaWGgwSUdKbGMzUWdaM1ZsYzNNdVhHNGdJQ0FnSUNCcFppQW9hWE5PWVU0b2JXOTJaVzFsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJQ1JvYm1Sc0xtTnpjeWhzVDNKVUxDQmdKSHR3WTNSUFprSmhjaUFxSURFd01IMGxZQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdKR2h1Wkd3dVkzTnpLR3hQY2xRc0lHQWtlMjF2ZG1WdFpXNTBmU1ZnS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0ZmZEdocGN5NXZjSFJwYjI1ekxtUnZkV0pzWlZOcFpHVmtLU0I3WEc0Z0lDQWdJQ0FnSUM4dmFXWWdjMmx1WjJ4bExXaGhibVJzWldRc0lHRWdjMmx0Y0d4bElHMWxkR2h2WkNCMGJ5QmxlSEJoYm1RZ2RHaGxJR1pwYkd3Z1ltRnlYRzRnSUNBZ0lDQWdJRjkwYUdsekxpUm1hV3hzTG1OemN5aG9UM0pYTENCZ0pIdHdZM1JQWmtKaGNpQXFJREV3TUgwbFlDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMMjkwYUdWeWQybHpaU3dnZFhObElIUm9aU0JqYzNNZ2IySnFaV04wSUhkbElHTnlaV0YwWldRZ1lXSnZkbVZjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVKR1pwYkd3dVkzTnpLR056Y3lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVpwY21WeklIZG9aVzRnZEdobElIWmhiSFZsSUdoaGN5QnViM1FnWW1WbGJpQmphR0Z1WjJVZ1ptOXlJR0VnWjJsMlpXNGdkR2x0WlM1Y2JpQWdJQ0FnS2lCQVpYWmxiblFnVTJ4cFpHVnlJMk5vWVc1blpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCamJHVmhjbFJwYldWdmRYUW9YM1JvYVhNdWRHbHRaVzkxZENrN1hHNGdJQ0FnWDNSb2FYTXVkR2x0Wlc5MWRDQTlJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUY5MGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KMk5vWVc1blpXUXVlbVl1YzJ4cFpHVnlKeXdnV3lSb2JtUnNYU2s3WEc0Z0lDQWdmU3dnWDNSb2FYTXViM0IwYVc5dWN5NWphR0Z1WjJWa1JHVnNZWGtwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkSE1nZEdobElHbHVhWFJwWVd3Z1lYUjBjbWxpZFhSbElHWnZjaUIwYUdVZ2MyeHBaR1Z5SUdWc1pXMWxiblF1WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYVdSNElDMGdhVzVrWlhnZ2IyWWdkR2hsSUdOMWNuSmxiblFnYUdGdVpHeGxMMmx1Y0hWMElIUnZJSFZ6WlM1Y2JpQWdJQ292WEc0Z0lGOXpaWFJKYm1sMFFYUjBjaWhwWkhncElIdGNiaUFnSUNCMllYSWdhVzVwZEZaaGJDQTlJQ2hwWkhnZ1BUMDlJREFnUHlCMGFHbHpMbTl3ZEdsdmJuTXVhVzVwZEdsaGJGTjBZWEowSURvZ2RHaHBjeTV2Y0hScGIyNXpMbWx1YVhScFlXeEZibVFwWEc0Z0lDQWdkbUZ5SUdsa0lEMGdkR2hwY3k1cGJuQjFkSE11WlhFb2FXUjRLUzVoZEhSeUtDZHBaQ2NwSUh4OElFZGxkRmx2UkdsbmFYUnpLRFlzSUNkemJHbGtaWEluS1R0Y2JpQWdJQ0IwYUdsekxtbHVjSFYwY3k1bGNTaHBaSGdwTG1GMGRISW9lMXh1SUNBZ0lDQWdKMmxrSnpvZ2FXUXNYRzRnSUNBZ0lDQW5iV0Y0SnpvZ2RHaHBjeTV2Y0hScGIyNXpMbVZ1WkN4Y2JpQWdJQ0FnSUNkdGFXNG5PaUIwYUdsekxtOXdkR2x2Ym5NdWMzUmhjblFzWEc0Z0lDQWdJQ0FuYzNSbGNDYzZJSFJvYVhNdWIzQjBhVzl1Y3k1emRHVndYRzRnSUNBZ2ZTazdYRzRnSUNBZ2RHaHBjeTVwYm5CMWRITXVaWEVvYVdSNEtTNTJZV3dvYVc1cGRGWmhiQ2s3WEc0Z0lDQWdkR2hwY3k1b1lXNWtiR1Z6TG1WeEtHbGtlQ2t1WVhSMGNpaDdYRzRnSUNBZ0lDQW5jbTlzWlNjNklDZHpiR2xrWlhJbkxGeHVJQ0FnSUNBZ0oyRnlhV0V0WTI5dWRISnZiSE1uT2lCcFpDeGNiaUFnSUNBZ0lDZGhjbWxoTFhaaGJIVmxiV0Y0SnpvZ2RHaHBjeTV2Y0hScGIyNXpMbVZ1WkN4Y2JpQWdJQ0FnSUNkaGNtbGhMWFpoYkhWbGJXbHVKem9nZEdocGN5NXZjSFJwYjI1ekxuTjBZWEowTEZ4dUlDQWdJQ0FnSjJGeWFXRXRkbUZzZFdWdWIzY25PaUJwYm1sMFZtRnNMRnh1SUNBZ0lDQWdKMkZ5YVdFdGIzSnBaVzUwWVhScGIyNG5PaUIwYUdsekxtOXdkR2x2Ym5NdWRtVnlkR2xqWVd3Z1B5QW5kbVZ5ZEdsallXd25JRG9nSjJodmNtbDZiMjUwWVd3bkxGeHVJQ0FnSUNBZ0ozUmhZbWx1WkdWNEp6b2dNRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRITWdkR2hsSUdsdWNIVjBJR0Z1WkNCZ1lYSnBZUzEyWVd4MVpXNXZkMkFnZG1Gc2RXVnpJR1p2Y2lCMGFHVWdjMnhwWkdWeUlHVnNaVzFsYm5RdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ0pHaGhibVJzWlNBdElIUm9aU0JqZFhKeVpXNTBiSGtnYzJWc1pXTjBaV1FnYUdGdVpHeGxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2RtRnNJQzBnWm14dllYUnBibWNnY0c5cGJuUWdiMllnZEdobElHNWxkeUIyWVd4MVpTNWNiaUFnSUNvdlhHNGdJRjl6WlhSV1lXeDFaWE1vSkdoaGJtUnNaU3dnZG1Gc0tTQjdYRzRnSUNBZ2RtRnlJR2xrZUNBOUlIUm9hWE11YjNCMGFXOXVjeTVrYjNWaWJHVlRhV1JsWkNBL0lIUm9hWE11YUdGdVpHeGxjeTVwYm1SbGVDZ2thR0Z1Wkd4bEtTQTZJREE3WEc0Z0lDQWdkR2hwY3k1cGJuQjFkSE11WlhFb2FXUjRLUzUyWVd3b2RtRnNLVHRjYmlBZ0lDQWthR0Z1Wkd4bExtRjBkSElvSjJGeWFXRXRkbUZzZFdWdWIzY25MQ0IyWVd3cE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWhoYm1Sc1pYTWdaWFpsYm5SeklHOXVJSFJvWlNCemJHbGtaWElnWld4bGJXVnVkQzVjYmlBZ0lDb2dRMkZzWTNWc1lYUmxjeUIwYUdVZ2JtVjNJR3h2WTJGMGFXOXVJRzltSUhSb1pTQmpkWEp5Wlc1MElHaGhibVJzWlM1Y2JpQWdJQ29nU1dZZ2RHaGxjbVVnWVhKbElIUjNieUJvWVc1a2JHVnpJR0Z1WkNCMGFHVWdZbUZ5SUhkaGN5QmpiR2xqYTJWa0xDQnBkQ0JrWlhSbGNtMXBibVZ6SUhkb2FXTm9JR2hoYm1Sc1pTQjBieUJ0YjNabExseHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHVWdMU0IwYUdVZ1lHVjJaVzUwWUNCdlltcGxZM1FnY0dGemMyVmtJR1p5YjIwZ2RHaGxJR3hwYzNSbGJtVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ0pHaGhibVJzWlNBdElIUm9aU0JqZFhKeVpXNTBJR2hoYm1Sc1pTQjBieUJqWVd4amRXeGhkR1VnWm05eUxDQnBaaUJ6Wld4bFkzUmxaQzVjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIWmhiQ0F0SUdac2IyRjBhVzVuSUhCdmFXNTBJRzUxYldKbGNpQm1iM0lnZEdobElHNWxkeUIyWVd4MVpTQnZaaUIwYUdVZ2MyeHBaR1Z5TGx4dUlDQWdLaUJVVDBSUElHTnNaV0Z1SUhSb2FYTWdkWEFzSUhSb1pYSmxKM01nWVNCc2IzUWdiMllnY21Wd1pXRjBaV1FnWTI5a1pTQmlaWFIzWldWdUlIUm9hWE1nWVc1a0lIUm9aU0JmYzJWMFNHRnVaR3hsVUc5eklHWnVMbHh1SUNBZ0tpOWNiaUFnWDJoaGJtUnNaVVYyWlc1MEtHVXNJQ1JvWVc1a2JHVXNJSFpoYkNrZ2UxeHVJQ0FnSUhaaGNpQjJZV3gxWlN3Z2FHRnpWbUZzTzF4dUlDQWdJR2xtSUNnaGRtRnNLU0I3THk5amJHbGpheUJ2Y2lCa2NtRm5JR1YyWlc1MGMxeHVJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3l4Y2JpQWdJQ0FnSUNBZ0lDQjJaWEowYVdOaGJDQTlJSFJvYVhNdWIzQjBhVzl1Y3k1MlpYSjBhV05oYkN4Y2JpQWdJQ0FnSUNBZ0lDQndZWEpoYlNBOUlIWmxjblJwWTJGc0lEOGdKMmhsYVdkb2RDY2dPaUFuZDJsa2RHZ25MRnh1SUNBZ0lDQWdJQ0FnSUdScGNtVmpkR2x2YmlBOUlIWmxjblJwWTJGc0lEOGdKM1J2Y0NjZ09pQW5iR1ZtZENjc1hHNGdJQ0FnSUNBZ0lDQWdaWFpsYm5SUFptWnpaWFFnUFNCMlpYSjBhV05oYkNBL0lHVXVjR0ZuWlZrZ09pQmxMbkJoWjJWWUxGeHVJQ0FnSUNBZ0lDQWdJR2hoYkdaUFpraGhibVJzWlNBOUlIUm9hWE11SkdoaGJtUnNaVnN3WFM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LVnR3WVhKaGJWMGdMeUF5TEZ4dUlDQWdJQ0FnSUNBZ0lHSmhja1JwYlNBOUlIUm9hWE11SkdWc1pXMWxiblJiTUYwdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2xiY0dGeVlXMWRMRnh1SUNBZ0lDQWdJQ0FnSUhkcGJtUnZkMU5qY205c2JDQTlJSFpsY25ScFkyRnNJRDhnSkNoM2FXNWtiM2NwTG5OamNtOXNiRlJ2Y0NncElEb2dKQ2gzYVc1a2IzY3BMbk5qY205c2JFeGxablFvS1R0Y2JseHVYRzRnSUNBZ0lDQjJZWElnWld4bGJVOW1abk5sZENBOUlIUm9hWE11SkdWc1pXMWxiblF1YjJabWMyVjBLQ2xiWkdseVpXTjBhVzl1WFR0Y2JseHVJQ0FnSUNBZ0x5OGdkRzkxWTJnZ1pYWmxiblJ6SUdWdGRXeGhkR1ZrSUdKNUlIUm9aU0IwYjNWamFDQjFkR2xzSUdkcGRtVWdjRzl6YVhScGIyNGdjbVZzWVhScGRtVWdkRzhnYzJOeVpXVnVMQ0JoWkdRZ2QybHVaRzkzTG5OamNtOXNiQ0IwYnlCbGRtVnVkQ0JqYjI5eVpHbHVZWFJsY3k0dUxseHVJQ0FnSUNBZ0x5OGdZbVZ6ZENCM1lYa2dkRzhnWjNWbGMzTWdkR2hwY3lCcGN5QnphVzExYkdGMFpXUWdhWE1nYVdZZ1kyeHBaVzUwV1NBOVBTQndZV2RsV1Z4dUlDQWdJQ0FnYVdZZ0tHVXVZMnhwWlc1MFdTQTlQVDBnWlM1d1lXZGxXU2tnZXlCbGRtVnVkRTltWm5ObGRDQTlJR1YyWlc1MFQyWm1jMlYwSUNzZ2QybHVaRzkzVTJOeWIyeHNPeUI5WEc0Z0lDQWdJQ0IyWVhJZ1pYWmxiblJHY205dFFtRnlJRDBnWlhabGJuUlBabVp6WlhRZ0xTQmxiR1Z0VDJabWMyVjBPMXh1SUNBZ0lDQWdkbUZ5SUdKaGNsaFpPMXh1SUNBZ0lDQWdhV1lnS0dWMlpXNTBSbkp2YlVKaGNpQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ1ltRnlXRmtnUFNBd08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGxkbVZ1ZEVaeWIyMUNZWElnUGlCaVlYSkVhVzBwSUh0Y2JpQWdJQ0FnSUNBZ1ltRnlXRmtnUFNCaVlYSkVhVzA3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JpWVhKWVdTQTlJR1YyWlc1MFJuSnZiVUpoY2p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhaaGNpQnZabVp6WlhSUVkzUWdQU0J3WlhKalpXNTBLR0poY2xoWkxDQmlZWEpFYVcwcE8xeHVYRzRnSUNBZ0lDQjJZV3gxWlNBOUlIUm9hWE11WDNaaGJIVmxLRzltWm5ObGRGQmpkQ2s3WEc1Y2JpQWdJQ0FnSUM4dklIUjFjbTRnWlhabGNubDBhR2x1WnlCaGNtOTFibVFnWm05eUlGSlVUQ3dnZVdGNUlHMWhkR2doWEc0Z0lDQWdJQ0JwWmlBb1VuUnNLQ2tnSmlZZ0lYUm9hWE11YjNCMGFXOXVjeTUyWlhKMGFXTmhiQ2tnZTNaaGJIVmxJRDBnZEdocGN5NXZjSFJwYjI1ekxtVnVaQ0F0SUhaaGJIVmxPMzFjYmx4dUlDQWdJQ0FnZG1Gc2RXVWdQU0JmZEdocGN5NWZZV1JxZFhOMFZtRnNkV1VvYm5Wc2JDd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0x5OWliMjlzWldGdUlHWnNZV2NnWm05eUlIUm9aU0J6WlhSSVlXNWtiR1ZRYjNNZ1ptNHNJSE53WldOcFptbGpZV3hzZVNCbWIzSWdkbVZ5ZEdsallXd2djMnhwWkdWeWMxeHVJQ0FnSUNBZ2FHRnpWbUZzSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUdsbUlDZ2hKR2hoYm1Sc1pTa2dleTh2Wm1sbmRYSmxJRzkxZENCM2FHbGphQ0JvWVc1a2JHVWdhWFFnYVhNc0lIQmhjM01nYVhRZ2RHOGdkR2hsSUc1bGVIUWdablZ1WTNScGIyNHVYRzRnSUNBZ0lDQWdJSFpoY2lCbWFYSnpkRWh1Wkd4UWIzTWdQU0JoWW5OUWIzTnBkR2x2YmloMGFHbHpMaVJvWVc1a2JHVXNJR1JwY21WamRHbHZiaXdnWW1GeVdGa3NJSEJoY21GdEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObFkyNWtTRzVrYkZCdmN5QTlJR0ZpYzFCdmMybDBhVzl1S0hSb2FYTXVKR2hoYm1Sc1pUSXNJR1JwY21WamRHbHZiaXdnWW1GeVdGa3NJSEJoY21GdEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNSb1lXNWtiR1VnUFNCbWFYSnpkRWh1Wkd4UWIzTWdQRDBnYzJWamJtUklibVJzVUc5eklEOGdkR2hwY3k0a2FHRnVaR3hsSURvZ2RHaHBjeTRrYUdGdVpHeGxNanRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJSDBnWld4elpTQjdMeTlqYUdGdVoyVWdaWFpsYm5RZ2IyNGdhVzV3ZFhSY2JpQWdJQ0FnSUhaaGJIVmxJRDBnZEdocGN5NWZZV1JxZFhOMFZtRnNkV1VvYm5Wc2JDd2dkbUZzS1R0Y2JpQWdJQ0FnSUdoaGMxWmhiQ0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVmYzJWMFNHRnVaR3hsVUc5ektDUm9ZVzVrYkdVc0lIWmhiSFZsTENCb1lYTldZV3dwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmthblZ6ZEdWeklIWmhiSFZsSUdadmNpQm9ZVzVrYkdVZ2FXNGdjbVZuWVhKa0lIUnZJSE4wWlhBZ2RtRnNkV1V1SUhKbGRIVnlibk1nWVdScWRYTjBaV1FnZG1Gc2RXVmNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdhbEYxWlhKNWZTQWthR0Z1Wkd4bElDMGdkR2hsSUhObGJHVmpkR1ZrSUdoaGJtUnNaUzVjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIWmhiSFZsSUMwZ2RtRnNkV1VnZEc4Z1lXUnFkWE4wTGlCMWMyVmtJR2xtSUNSb1lXNWtiR1VnYVhNZ1ptRnNjM2xjYmlBZ0lDb3ZYRzRnSUY5aFpHcDFjM1JXWVd4MVpTZ2thR0Z1Wkd4bExDQjJZV3gxWlNrZ2UxeHVJQ0FnSUhaaGNpQjJZV3dzWEc0Z0lDQWdJQ0J6ZEdWd0lEMGdkR2hwY3k1dmNIUnBiMjV6TG5OMFpYQXNYRzRnSUNBZ0lDQmthWFlnUFNCd1lYSnpaVVpzYjJGMEtITjBaWEF2TWlrc1hHNGdJQ0FnSUNCc1pXWjBMQ0J3Y21WMlgzWmhiQ3dnYm1WNGRGOTJZV3c3WEc0Z0lDQWdhV1lnS0NFaEpHaGhibVJzWlNrZ2UxeHVJQ0FnSUNBZ2RtRnNJRDBnY0dGeWMyVkdiRzloZENna2FHRnVaR3hsTG1GMGRISW9KMkZ5YVdFdGRtRnNkV1Z1YjNjbktTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZzSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lHeGxablFnUFNCMllXd2dKU0J6ZEdWd08xeHVJQ0FnSUhCeVpYWmZkbUZzSUQwZ2RtRnNJQzBnYkdWbWREdGNiaUFnSUNCdVpYaDBYM1poYkNBOUlIQnlaWFpmZG1Gc0lDc2djM1JsY0R0Y2JpQWdJQ0JwWmlBb2JHVm1kQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiRHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnNJRDBnZG1Gc0lENDlJSEJ5WlhaZmRtRnNJQ3NnWkdsMklEOGdibVY0ZEY5MllXd2dPaUJ3Y21WMlgzWmhiRHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGa1pITWdaWFpsYm5RZ2JHbHpkR1Z1WlhKeklIUnZJSFJvWlNCemJHbGtaWElnWld4bGJXVnVkSE11WEc0Z0lDQXFJRUJtZFc1amRHbHZibHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMlYyWlc1MGN5Z3BJSHRjYmlBZ0lDQjBhR2x6TGw5bGRtVnVkSE5HYjNKSVlXNWtiR1VvZEdocGN5NGthR0Z1Wkd4bEtUdGNiaUFnSUNCcFppaDBhR2x6TG1oaGJtUnNaWE5iTVYwcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJWMlpXNTBjMFp2Y2toaGJtUnNaU2gwYUdsekxpUm9ZVzVrYkdVeUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dVhHNGdJQzhxS2x4dUlDQWdLaUJCWkdSeklHVjJaVzUwSUd4cGMzUmxibVZ5Y3lCaElIQmhjblJwWTNWc1lYSWdhR0Z1Wkd4bFhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ0pHaGhibVJzWlNBdElIUm9aU0JqZFhKeVpXNTBJR2hoYm1Sc1pTQjBieUJoY0hCc2VTQnNhWE4wWlc1bGNuTWdkRzh1WEc0Z0lDQXFMMXh1SUNCZlpYWmxiblJ6Um05eVNHRnVaR3hsS0NSb1lXNWtiR1VwSUh0Y2JpQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0JqZFhKSVlXNWtiR1VzWEc0Z0lDQWdJQ0FnSUhScGJXVnlPMXh1WEc0Z0lDQWdJQ0IwYUdsekxtbHVjSFYwY3k1dlptWW9KMk5vWVc1blpTNTZaaTV6Ykdsa1pYSW5LUzV2YmlnblkyaGhibWRsTG5wbUxuTnNhV1JsY2ljc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbGtlQ0E5SUY5MGFHbHpMbWx1Y0hWMGN5NXBibVJsZUNna0tIUm9hWE1wS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDJoaGJtUnNaVVYyWlc1MEtHVXNJRjkwYUdsekxtaGhibVJzWlhNdVpYRW9hV1I0S1N3Z0pDaDBhR2x6S1M1MllXd29LU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1amJHbGphMU5sYkdWamRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1aaWduWTJ4cFkyc3VlbVl1YzJ4cFpHVnlKeWt1YjI0b0oyTnNhV05yTG5wbUxuTnNhV1JsY2ljc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdUpHVnNaVzFsYm5RdVpHRjBZU2duWkhKaFoyZHBibWNuS1NrZ2V5QnlaWFIxY200Z1ptRnNjMlU3SUgxY2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaEpDaGxMblJoY21kbGRDa3VhWE1vSjF0a1lYUmhMWE5zYVdSbGNpMW9ZVzVrYkdWZEp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmZEdocGN5NXZjSFJwYjI1ekxtUnZkV0pzWlZOcFpHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOW9ZVzVrYkdWRmRtVnVkQ2hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5b1lXNWtiR1ZGZG1WdWRDaGxMQ0JmZEdocGN5NGthR0Z1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVrY21GbloyRmliR1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bGN5NWhaR1JVYjNWamFDZ3BPMXh1WEc0Z0lDQWdJQ0IyWVhJZ0pHSnZaSGtnUFNBa0tDZGliMlI1SnlrN1hHNGdJQ0FnSUNBa2FHRnVaR3hsWEc0Z0lDQWdJQ0FnSUM1dlptWW9KMjF2ZFhObFpHOTNiaTU2Wmk1emJHbGtaWEluS1Z4dUlDQWdJQ0FnSUNBdWIyNG9KMjF2ZFhObFpHOTNiaTU2Wmk1emJHbGtaWEluTENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSkdoaGJtUnNaUzVoWkdSRGJHRnpjeWduYVhNdFpISmhaMmRwYm1jbktUdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NGtabWxzYkM1aFpHUkRiR0Z6Y3lnbmFYTXRaSEpoWjJkcGJtY25LVHN2TDF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9KMlJ5WVdkbmFXNW5KeXdnZEhKMVpTazdYRzVjYmlBZ0lDQWdJQ0FnSUNCamRYSklZVzVrYkdVZ1BTQWtLR1V1WTNWeWNtVnVkRlJoY21kbGRDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBa1ltOWtlUzV2YmlnbmJXOTFjMlZ0YjNabExucG1Mbk5zYVdSbGNpY3NJR1oxYm1OMGFXOXVLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5b1lXNWtiR1ZGZG1WdWRDaGxMQ0JqZFhKSVlXNWtiR1VwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdmU2t1YjI0b0oyMXZkWE5sZFhBdWVtWXVjMnhwWkdWeUp5d2dablZ1WTNScGIyNG9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyaGhibVJzWlVWMlpXNTBLR1VzSUdOMWNraGhibVJzWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNSb1lXNWtiR1V1Y21WdGIzWmxRMnhoYzNNb0oybHpMV1J5WVdkbmFXNW5KeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k0a1ptbHNiQzV5WlcxdmRtVkRiR0Z6Y3lnbmFYTXRaSEpoWjJkcGJtY25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9KMlJ5WVdkbmFXNW5KeXdnWm1Gc2MyVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtZbTlrZVM1dlptWW9KMjF2ZFhObGJXOTJaUzU2Wmk1emJHbGtaWElnYlc5MWMyVjFjQzU2Wmk1emJHbGtaWEluS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F2THlCd2NtVjJaVzUwSUdWMlpXNTBjeUIwY21sbloyVnlaV1FnWW5rZ2RHOTFZMmhjYmlBZ0lDQWdJQzV2YmlnbmMyVnNaV04wYzNSaGNuUXVlbVl1YzJ4cFpHVnlJSFJ2ZFdOb2JXOTJaUzU2Wmk1emJHbGtaWEluTENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQ1JvWVc1a2JHVXViMlptS0NkclpYbGtiM2R1TG5wbUxuTnNhV1JsY2ljcExtOXVLQ2RyWlhsa2IzZHVMbnBtTG5Oc2FXUmxjaWNzSUdaMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lIWmhjaUJmSkdoaGJtUnNaU0E5SUNRb2RHaHBjeWtzWEc0Z0lDQWdJQ0FnSUNBZ2FXUjRJRDBnWDNSb2FYTXViM0IwYVc5dWN5NWtiM1ZpYkdWVGFXUmxaQ0EvSUY5MGFHbHpMbWhoYm1Sc1pYTXVhVzVrWlhnb1h5Um9ZVzVrYkdVcElEb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNCdmJHUldZV3gxWlNBOUlIQmhjbk5sUm14dllYUW9YM1JvYVhNdWFXNXdkWFJ6TG1WeEtHbGtlQ2t1ZG1Gc0tDa3BMRnh1SUNBZ0lDQWdJQ0FnSUc1bGQxWmhiSFZsTzF4dVhHNGdJQ0FnSUNBdkx5Qm9ZVzVrYkdVZ2EyVjVZbTloY21RZ1pYWmxiblFnZDJsMGFDQnJaWGxpYjJGeVpDQjFkR2xzWEc0Z0lDQWdJQ0JMWlhsaWIyRnlaQzVvWVc1a2JHVkxaWGtvWlN3Z0oxTnNhV1JsY2ljc0lIdGNiaUFnSUNBZ0lDQWdaR1ZqY21WaGMyVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHNWxkMVpoYkhWbElEMGdiMnhrVm1Gc2RXVWdMU0JmZEdocGN5NXZjSFJwYjI1ekxuTjBaWEE3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHbHVZM0psWVhObE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCdVpYZFdZV3gxWlNBOUlHOXNaRlpoYkhWbElDc2dYM1JvYVhNdWIzQjBhVzl1Y3k1emRHVndPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCa1pXTnlaV0Z6WlY5bVlYTjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGRXWVd4MVpTQTlJRzlzWkZaaGJIVmxJQzBnWDNSb2FYTXViM0IwYVc5dWN5NXpkR1Z3SUNvZ01UQTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdsdVkzSmxZWE5sWDJaaGMzUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHNWxkMVpoYkhWbElEMGdiMnhrVm1Gc2RXVWdLeUJmZEdocGN5NXZjSFJwYjI1ekxuTjBaWEFnS2lBeE1EdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYldsdU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCdVpYZFdZV3gxWlNBOUlGOTBhR2x6TG05d2RHbHZibk11YzNSaGNuUTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUcxaGVEb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjNWbUZzZFdVZ1BTQmZkR2hwY3k1dmNIUnBiMjV6TG1WdVpEdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYUdGdVpHeGxaRG9nWm5WdVkzUnBiMjRvS1NCN0lDOHZJRzl1YkhrZ2MyVjBJR2hoYm1Sc1pTQndiM01nZDJobGJpQmxkbVZ1ZENCM1lYTWdhR0Z1Wkd4bFpDQnpjR1ZqYVdGc2JIbGNiaUFnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDNObGRFaGhibVJzWlZCdmN5aGZKR2hoYm1Sc1pTd2dibVYzVm1Gc2RXVXNJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQzhxYVdZZ0tHNWxkMVpoYkhWbEtTQjdJQzh2SUdsbUlIQnlaWE56WldRZ2EyVjVJR2hoY3lCemNHVmphV0ZzSUdaMWJtTjBhVzl1TENCMWNHUmhkR1VnZG1Gc2RXVmNiaUFnSUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZjMlYwU0dGdVpHeGxVRzl6S0Y4a2FHRnVaR3hsTENCdVpYZFdZV3gxWlNrN1hHNGdJQ0FnSUNCOUtpOWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJFWlhOMGNtOTVjeUIwYUdVZ2MyeHBaR1Z5SUhCc2RXZHBiaTVjYmlBZ0lDb3ZYRzRnSUY5a1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVhR0Z1Wkd4bGN5NXZabVlvSnk1NlppNXpiR2xrWlhJbktUdGNiaUFnSUNCMGFHbHpMbWx1Y0hWMGN5NXZabVlvSnk1NlppNXpiR2xrWlhJbktUdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbTltWmlnbkxucG1Mbk5zYVdSbGNpY3BPMXh1WEc0Z0lDQWdZMnhsWVhKVWFXMWxiM1YwS0hSb2FYTXVkR2x0Wlc5MWRDazdYRzRnSUgxY2JuMWNibHh1VTJ4cFpHVnlMbVJsWm1GMWJIUnpJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dUV2x1YVcxMWJTQjJZV3gxWlNCbWIzSWdkR2hsSUhOc2FXUmxjaUJ6WTJGc1pTNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FxTDF4dUlDQnpkR0Z5ZERvZ01DeGNiaUFnTHlvcVhHNGdJQ0FxSUUxaGVHbHRkVzBnZG1Gc2RXVWdabTl5SUhSb1pTQnpiR2xrWlhJZ2MyTmhiR1V1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdNVEF3WEc0Z0lDQXFMMXh1SUNCbGJtUTZJREV3TUN4Y2JpQWdMeW9xWEc0Z0lDQXFJRTFwYm1sdGRXMGdkbUZzZFdVZ1kyaGhibWRsSUhCbGNpQmphR0Z1WjJVZ1pYWmxiblF1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdNVnh1SUNBZ0tpOWNiaUFnYzNSbGNEb2dNU3hjYmlBZ0x5b3FYRzRnSUNBcUlGWmhiSFZsSUdGMElIZG9hV05vSUhSb1pTQm9ZVzVrYkdVdmFXNXdkWFFnS2loc1pXWjBJR2hoYm1Sc1pTOW1hWEp6ZENCcGJuQjFkQ2txSUhOb2IzVnNaQ0JpWlNCelpYUWdkRzhnYjI0Z2FXNXBkR2xoYkdsNllYUnBiMjR1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdNRnh1SUNBZ0tpOWNiaUFnYVc1cGRHbGhiRk4wWVhKME9pQXdMRnh1SUNBdktpcGNiaUFnSUNvZ1ZtRnNkV1VnWVhRZ2QyaHBZMmdnZEdobElISnBaMmgwSUdoaGJtUnNaUzl6WldOdmJtUWdhVzV3ZFhRZ2MyaHZkV3hrSUdKbElITmxkQ0IwYnlCdmJpQnBibWwwYVdGc2FYcGhkR2x2Ymk1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0F4TURCY2JpQWdJQ292WEc0Z0lHbHVhWFJwWVd4RmJtUTZJREV3TUN4Y2JpQWdMeW9xWEc0Z0lDQXFJRUZzYkc5M2N5QjBhR1VnYVc1d2RYUWdkRzhnWW1VZ2JHOWpZWFJsWkNCdmRYUnphV1JsSUhSb1pTQmpiMjUwWVdsdVpYSWdZVzVrSUhacGMybGliR1V1SUZObGRDQjBieUJpZVNCMGFHVWdTbE5jYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ292WEc0Z0lHSnBibVJwYm1jNklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNkeklIUm9aU0IxYzJWeUlIUnZJR05zYVdOckwzUmhjQ0J2YmlCMGFHVWdjMnhwWkdWeUlHSmhjaUIwYnlCelpXeGxZM1FnWVNCMllXeDFaUzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdkSEoxWlZ4dUlDQWdLaTljYmlBZ1kyeHBZMnRUWld4bFkzUTZJSFJ5ZFdVc1hHNGdJQzhxS2x4dUlDQWdLaUJUWlhRZ2RHOGdkSEoxWlNCaGJtUWdkWE5sSUhSb1pTQmdkbVZ5ZEdsallXeGdJR05zWVhOeklIUnZJR05vWVc1blpTQmhiR2xuYm0xbGJuUWdkRzhnZG1WeWRHbGpZV3d1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQjJaWEowYVdOaGJEb2dabUZzYzJVc1hHNGdJQzhxS2x4dUlDQWdLaUJCYkd4dmQzTWdkR2hsSUhWelpYSWdkRzhnWkhKaFp5QjBhR1VnYzJ4cFpHVnlJR2hoYm1Sc1pTaHpLU0IwYnlCelpXeGxZM1FnWVNCMllXeDFaUzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdkSEoxWlZ4dUlDQWdLaTljYmlBZ1pISmhaMmRoWW14bE9pQjBjblZsTEZ4dUlDQXZLaXBjYmlBZ0lDb2dSR2x6WVdKc1pYTWdkR2hsSUhOc2FXUmxjaUJoYm1RZ2NISmxkbVZ1ZEhNZ1pYWmxiblFnYkdsemRHVnVaWEp6SUdaeWIyMGdZbVZwYm1jZ1lYQndiR2xsWkM0Z1JHOTFZbXhsSUdOb1pXTnJaV1FnWW5rZ1NsTWdkMmwwYUNCZ1pHbHpZV0pzWldSRGJHRnpjMkF1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQmthWE5oWW14bFpEb2dabUZzYzJVc1hHNGdJQzhxS2x4dUlDQWdLaUJCYkd4dmQzTWdkR2hsSUhWelpTQnZaaUIwZDI4Z2FHRnVaR3hsY3k0Z1JHOTFZbXhsSUdOb1pXTnJaV1FnWW5rZ2RHaGxJRXBUTGlCRGFHRnVaMlZ6SUhOdmJXVWdiRzluYVdNZ2FHRnVaR3hwYm1jdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UySnZiMnhsWVc1OVhHNGdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnSUNBcUwxeHVJQ0JrYjNWaWJHVlRhV1JsWkRvZ1ptRnNjMlVzWEc0Z0lDOHFLbHh1SUNBZ0tpQlFiM1JsYm5ScFlXd2dablYwZFhKbElHWmxZWFIxY21VdVhHNGdJQ0FxTDF4dUlDQXZMeUJ6ZEdWd2N6b2dNVEF3TEZ4dUlDQXZLaXBjYmlBZ0lDb2dUblZ0WW1WeUlHOW1JR1JsWTJsdFlXd2djR3hoWTJWeklIUm9aU0J3YkhWbmFXNGdjMmh2ZFd4a0lHZHZJSFJ2SUdadmNpQm1iRzloZEdsdVp5QndiMmx1ZENCd2NtVmphWE5wYjI0dVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ29nUUdSbFptRjFiSFFnTWx4dUlDQWdLaTljYmlBZ1pHVmphVzFoYkRvZ01peGNiaUFnTHlvcVhHNGdJQ0FxSUZScGJXVWdaR1ZzWVhrZ1ptOXlJR1J5WVdkblpXUWdaV3hsYldWdWRITXVYRzRnSUNBcUwxeHVJQ0F2THlCa2NtRm5SR1ZzWVhrNklEQXNYRzRnSUM4cUtseHVJQ0FnS2lCVWFXMWxMQ0JwYmlCdGN5d2dkRzhnWVc1cGJXRjBaU0IwYUdVZ2JXOTJaVzFsYm5RZ2IyWWdZU0J6Ykdsa1pYSWdhR0Z1Wkd4bElHbG1JSFZ6WlhJZ1kyeHBZMnR6TDNSaGNITWdiMjRnZEdobElHSmhjaTRnVG1WbFpITWdkRzhnWW1VZ2JXRnVkV0ZzYkhrZ2MyVjBJR2xtSUhWd1pHRjBhVzVuSUhSb1pTQjBjbUZ1YzJsMGFXOXVJSFJwYldVZ2FXNGdkR2hsSUZOaGMzTWdjMlYwZEdsdVozTXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ01qQXdYRzRnSUNBcUwxeHVJQ0J0YjNabFZHbHRaVG9nTWpBd0xDOHZkWEJrWVhSbElIUm9hWE1nYVdZZ1kyaGhibWRwYm1jZ2RHaGxJSFJ5WVc1emFYUnBiMjRnZEdsdFpTQnBiaUIwYUdVZ2MyRnpjMXh1SUNBdktpcGNiaUFnSUNvZ1EyeGhjM01nWVhCd2JHbGxaQ0IwYnlCa2FYTmhZbXhsWkNCemJHbGtaWEp6TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQXFJRUJrWldaaGRXeDBJQ2RrYVhOaFlteGxaQ2RjYmlBZ0lDb3ZYRzRnSUdScGMyRmliR1ZrUTJ4aGMzTTZJQ2RrYVhOaFlteGxaQ2NzWEc0Z0lDOHFLbHh1SUNBZ0tpQlhhV3hzSUdsdWRtVnlkQ0IwYUdVZ1pHVm1ZWFZzZENCc1lYbHZkWFFnWm05eUlHRWdkbVZ5ZEdsallXdzhjM0JoYmlCa1lYUmhMWFJ2YjJ4MGFYQWdkR2wwYkdVOVhDSjNhRzhnZDI5MWJHUWdaRzhnZEdocGN6OC9QMXdpUGlBOEwzTndZVzQrYzJ4cFpHVnlMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQm1ZV3h6WlZ4dUlDQWdLaTljYmlBZ2FXNTJaWEowVm1WeWRHbGpZV3c2SUdaaGJITmxMRnh1SUNBdktpcGNiaUFnSUNvZ1RXbHNiR2x6WldOdmJtUnpJR0psWm05eVpTQjBhR1VnWUdOb1lXNW5aV1F1ZW1ZdGMyeHBaR1Z5WUNCbGRtVnVkQ0JwY3lCMGNtbG5aMlZ5WldRZ1lXWjBaWElnZG1Gc2RXVWdZMmhoYm1kbExseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSURVd01GeHVJQ0FnS2k5Y2JpQWdZMmhoYm1kbFpFUmxiR0Y1T2lBMU1EQXNYRzRnSUM4cUtseHVJQ0FxSUVKaGMyVjJZV3gxWlNCbWIzSWdibTl1TFd4cGJtVmhjaUJ6Ykdsa1pYSnpYRzRnSUNvZ1FHOXdkR2x2Ymx4dUlDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ29nUUdSbFptRjFiSFFnTlZ4dUlDQXFMMXh1SUNCdWIyNU1hVzVsWVhKQ1lYTmxPaUExTEZ4dUlDQXZLaXBjYmlBZ0tpQkNZWE5sZG1Gc2RXVWdabTl5SUc1dmJpMXNhVzVsWVhJZ2MyeHBaR1Z5Y3l3Z2NHOXpjMmxpYkdVZ2RtRnNkV1Z6SUdGeVpUb2dZQ2RzYVc1bFlYSW5ZQ3dnWUNkd2IzY25ZQ0FtSUdBbmJHOW5KMkF1SUZCdmR5QmhibVFnVEc5bklIVnpaU0IwYUdVZ2JtOXVUR2x1WldGeVFtRnpaU0J6WlhSMGFXNW5MbHh1SUNBcUlFQnZjSFJwYjI1Y2JpQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FxSUVCa1pXWmhkV3gwSUNkc2FXNWxZWEluWEc0Z0lDb3ZYRzRnSUhCdmMybDBhVzl1Vm1Gc2RXVkdkVzVqZEdsdmJqb2dKMnhwYm1WaGNpY3NYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQndaWEpqWlc1MEtHWnlZV01zSUc1MWJTa2dlMXh1SUNCeVpYUjFjbTRnS0daeVlXTWdMeUJ1ZFcwcE8xeHVmVnh1Wm5WdVkzUnBiMjRnWVdKelVHOXphWFJwYjI0b0pHaGhibVJzWlN3Z1pHbHlMQ0JqYkdsamExQnZjeXdnY0dGeVlXMHBJSHRjYmlBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0Nna2FHRnVaR3hsTG5CdmMybDBhVzl1S0NsYlpHbHlYU0FySUNna2FHRnVaR3hsVzNCaGNtRnRYU2dwSUM4Z01pa3BJQzBnWTJ4cFkydFFiM01wTzF4dWZWeHVablZ1WTNScGIyNGdZbUZ6WlV4dlp5aGlZWE5sTENCMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z1RXRjBhQzVzYjJjb2RtRnNkV1VwTDAxaGRHZ3ViRzluS0dKaGMyVXBYRzU5WEc1Y2JtVjRjRzl5ZENCN1UyeHBaR1Z5ZlR0Y2JpSmRmUT09XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uc2xpZGVyLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU21vb3RoU2Nyb2xsID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBTbW9vdGhTY3JvbGwgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnNtb290aC1zY3JvbGxcbiAqL1xudmFyIFNtb290aFNjcm9sbCA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gICAgX2luaGVyaXRzKFNtb290aFNjcm9sbCwgX1BsdWdpbik7XG5cbiAgICBmdW5jdGlvbiBTbW9vdGhTY3JvbGwoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbW9vdGhTY3JvbGwpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU21vb3RoU2Nyb2xsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU21vb3RoU2Nyb2xsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNtb290aFNjcm9sbCwgW3tcbiAgICAgICAga2V5OiAnX3NldHVwJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBTbW9vdGhTY3JvbGwuXG4gICAgICAgICAqIEBjbGFzc1xuICAgICAgICAgKiBAbmFtZSBTbW9vdGhTY3JvbGxcbiAgICAgICAgICogQGZpcmVzIFNtb290aFNjcm9sbCNpbml0XG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgU21vb3RoU2Nyb2xsLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdTbW9vdGhTY3JvbGwnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemUgdGhlIFNtb290aFNjcm9sbCBwbHVnaW5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19pbml0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICAgICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsLkdldFlvRGlnaXRzKSg2LCAnc21vb3RoLXNjcm9sbCcpO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIFNtb290aFNjcm9sbC5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19ldmVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50cygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIGNsaWNrIGhhbmRsZXIgZnVuY3Rpb24uXG4gICAgICAgICAgICB2YXIgaGFuZGxlTGlua0NsaWNrID0gZnVuY3Rpb24gaGFuZGxlTGlua0NsaWNrKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBleGl0IGZ1bmN0aW9uIGlmIHRoZSBldmVudCBzb3VyY2UgaXNuJ3QgY29taW5nIGZyb20gYW4gYW5jaG9yIHdpdGggaHJlZiBhdHRyaWJ1dGUgc3RhcnRzIHdpdGggJyMnXG4gICAgICAgICAgICAgICAgaWYgKCEoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuaXMoJ2FbaHJlZl49XCIjXCJdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBhcnJpdmFsID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLl9pblRyYW5zaXRpb24gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgU21vb3RoU2Nyb2xsLnNjcm9sbFRvTG9jKGFycml2YWwsIF90aGlzLm9wdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suemYuc21vb3RoU2Nyb2xsJywgaGFuZGxlTGlua0NsaWNrKTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLnpmLnNtb290aFNjcm9sbCcsICdhW2hyZWZePVwiI1wiXScsIGhhbmRsZUxpbmtDbGljayk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gbG9jYXRpb24gb24gdGhlIHBhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsb2MgLSBBIHByb3Blcmx5IGZvcm1hdHRlZCBqUXVlcnkgaWQgc2VsZWN0b3IuIEV4YW1wbGU6ICcjZm9vJ1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIHVzZS5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqL1xuXG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ3Njcm9sbFRvTG9jJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbFRvTG9jKGxvYykge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFNtb290aFNjcm9sbC5kZWZhdWx0cztcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiB0YXJnZXQgZG9lcyBub3QgZXhpc3QgdG8gcHJldmVudCBlcnJvcnNcbiAgICAgICAgICAgIGlmICghKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGxvYykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2Nyb2xsUG9zID0gTWF0aC5yb3VuZCgoMCwgX2pxdWVyeTIuZGVmYXVsdCkobG9jKS5vZmZzZXQoKS50b3AgLSBvcHRpb25zLnRocmVzaG9sZCAvIDIgLSBvcHRpb25zLm9mZnNldCk7XG5cbiAgICAgICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSkuYW5pbWF0ZSh7IHNjcm9sbFRvcDogc2Nyb2xsUG9zIH0sIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sIG9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTbW9vdGhTY3JvbGw7XG59KF9mb3VuZGF0aW9uLlBsdWdpbik7XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luLlxuICovXG5cblxuU21vb3RoU2Nyb2xsLmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgdGhlIGFuaW1hdGVkIHNjcm9sbGluZyBzaG91bGQgdGFrZSBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCA1MDBcbiAgICAgKi9cbiAgICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAgIC8qKlxuICAgICAqIEFuaW1hdGlvbiBzdHlsZSB0byB1c2Ugd2hlbiBzY3JvbGxpbmcgYmV0d2VlbiBsb2NhdGlvbnMuIENhbiBiZSBgJ3N3aW5nJ2Agb3IgYCdsaW5lYXInYC5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAZGVmYXVsdCAnbGluZWFyJ1xuICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vYW5pbWF0ZXxKcXVlcnkgYW5pbWF0ZX1cbiAgICAgKi9cbiAgICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBwaXhlbHMgdG8gdXNlIGFzIGEgbWFya2VyIGZvciBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgICAqIEBvcHRpb25cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDUwXG4gICAgICovXG4gICAgdGhyZXNob2xkOiA1MCxcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRvIG9mZnNldCB0aGUgc2Nyb2xsIG9mIHRoZSBwYWdlIG9uIGl0ZW0gY2xpY2sgaWYgdXNpbmcgYSBzdGlja3kgbmF2IGJhci5cbiAgICAgKiBAb3B0aW9uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG59O1xuXG5leHBvcnRzLlNtb290aFNjcm9sbCA9IFNtb290aFNjcm9sbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVjMjF2YjNSb1UyTnliMnhzTG1weklsMHNJbTVoYldWeklqcGJJbE50YjI5MGFGTmpjbTlzYkNJc0ltVnNaVzFsYm5RaUxDSnZjSFJwYjI1eklpd2lKR1ZzWlcxbGJuUWlMQ0lrSWl3aVpYaDBaVzVrSWl3aVpHVm1ZWFZzZEhNaUxDSmtZWFJoSWl3aVkyeGhjM05PWVcxbElpd2lYMmx1YVhRaUxDSnBaQ0lzSWw5MGFHbHpJaXdpWVhSMGNpSXNJbDlsZG1WdWRITWlMQ0pvWVc1a2JHVk1hVzVyUTJ4cFkyc2lMQ0psSWl3aWFYTWlMQ0poY25KcGRtRnNJaXdpWjJWMFFYUjBjbWxpZFhSbElpd2lYMmx1VkhKaGJuTnBkR2x2YmlJc0luTmpjbTlzYkZSdlRHOWpJaXdpY0hKbGRtVnVkRVJsWm1GMWJIUWlMQ0p2YmlJc0lteHZZeUlzSW1OaGJHeGlZV05ySWl3aWJHVnVaM1JvSWl3aWMyTnliMnhzVUc5eklpd2lUV0YwYUNJc0luSnZkVzVrSWl3aWIyWm1jMlYwSWl3aWRHOXdJaXdpZEdoeVpYTm9iMnhrSWl3aWMzUnZjQ0lzSW1GdWFXMWhkR1VpTENKelkzSnZiR3hVYjNBaUxDSmhibWx0WVhScGIyNUVkWEpoZEdsdmJpSXNJbUZ1YVcxaGRHbHZia1ZoYzJsdVp5SXNJbEJzZFdkcGJpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096dEJRVVZCT3pzN08wRkJRMEU3TzBGQlEwRTdPenM3T3pzN096czdRVUZGUVRzN096dEpRVWxOUVN4Wk96czdPenM3T3pzN096czdRVUZEU2pzN096czdPenM3SzBKQlVWTkRMRThzUlVGQlUwTXNUeXhGUVVGVE8wRkJRM0pDTEdsQ1FVRkxReXhSUVVGTUxFZEJRV2RDUml4UFFVRm9RanRCUVVOQkxHbENRVUZMUXl4UFFVRk1MRWRCUVdWRkxHbENRVUZGUXl4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaFRDeGhRVUZoVFN4UlFVRXhRaXhGUVVGdlF5eExRVUZMU0N4UlFVRk1MRU5CUVdOSkxFbEJRV1FzUlVGQmNFTXNSVUZCTUVSTUxFOUJRVEZFTEVOQlFXWTdRVUZEUVN4cFFrRkJTMDBzVTBGQlRDeEhRVUZwUWl4alFVRnFRaXhEUVVoeFFpeERRVWRaT3p0QlFVVnFReXhwUWtGQlMwTXNTMEZCVER0QlFVTklPenRCUVVWRU96czdPenM3TzJkRFFVbFJPMEZCUTBvc1owSkJRVWxETEV0QlFVc3NTMEZCUzFBc1VVRkJUQ3hEUVVGakxFTkJRV1FzUlVGQmFVSlBMRVZCUVdwQ0xFbEJRWFZDTEdsRFFVRlpMRU5CUVZvc1JVRkJaU3hsUVVGbUxFTkJRV2hETzBGQlEwRXNaMEpCUVVsRExGRkJRVkVzU1VGQldqdEJRVU5CTEdsQ1FVRkxVaXhSUVVGTUxFTkJRV05UTEVsQlFXUXNRMEZCYlVJN1FVRkRaaXh6UWtGQlRVWTdRVUZFVXl4aFFVRnVRanM3UVVGSlFTeHBRa0ZCUzBjc1QwRkJURHRCUVVOSU96dEJRVVZFT3pzN096czdPMnREUVVsVk8wRkJRMDRzWjBKQlFVbEdMRkZCUVZFc1NVRkJXanM3UVVGRlFUdEJRVU5CTEdkQ1FVRkpSeXhyUWtGQmEwSXNVMEZCYkVKQkxHVkJRV3RDTEVOQlFWTkRMRU5CUVZRc1JVRkJXVHRCUVVNNVFqdEJRVU5CTEc5Q1FVRkhMRU5CUVVNc2MwSkJRVVVzU1VGQlJpeEZRVUZSUXl4RlFVRlNMRU5CUVZjc1kwRkJXQ3hEUVVGS0xFVkJRV2xETzBGQlF6ZENMREpDUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN4dlFrRkJTVU1zVlVGQlZTeExRVUZMUXl4WlFVRk1MRU5CUVd0Q0xFMUJRV3hDTEVOQlFXUTdPMEZCUlVGUUxITkNRVUZOVVN4aFFVRk9MRWRCUVhOQ0xFbEJRWFJDT3p0QlFVVkJia0lzTmtKQlFXRnZRaXhYUVVGaUxFTkJRWGxDU0N4UFFVRjZRaXhGUVVGclEwNHNUVUZCVFZRc1QwRkJlRU1zUlVGQmFVUXNXVUZCVnp0QlFVTjRSRk1zTUVKQlFVMVJMR0ZCUVU0c1IwRkJjMElzUzBGQmRFSTdRVUZEU0N4cFFrRkdSRHM3UVVGSlFVb3NhMEpCUVVWTkxHTkJRVVk3UVVGRFNDeGhRV1pFT3p0QlFXbENRU3hwUWtGQlMyeENMRkZCUVV3c1EwRkJZMjFDTEVWQlFXUXNRMEZCYVVJc2RVSkJRV3BDTEVWQlFUQkRVaXhsUVVFeFF6dEJRVU5CTEdsQ1FVRkxXQ3hSUVVGTUxFTkJRV050UWl4RlFVRmtMRU5CUVdsQ0xIVkNRVUZxUWl4RlFVRXdReXhqUVVFeFF5eEZRVUV3UkZJc1pVRkJNVVE3UVVGRFNEczdRVUZGUkRzN096czdPenM3T3pzN2IwTkJVVzFDVXl4SExFVkJRV2RFTzBGQlFVRXNaMEpCUVRORGNrSXNUMEZCTWtNc2RVVkJRV3BEUml4aFFVRmhUU3hSUVVGdlFqdEJRVUZCTEdkQ1FVRldhMElzVVVGQlZUczdRVUZETDBRN1FVRkRRU3huUWtGQlNTeERRVUZETEhOQ1FVRkZSQ3hIUVVGR0xFVkJRVTlGTEUxQlFWb3NSVUZCYjBJN1FVRkRhRUlzZFVKQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxHZENRVUZKUXl4WlFVRlpReXhMUVVGTFF5eExRVUZNTEVOQlFWY3NjMEpCUVVWTUxFZEJRVVlzUlVGQlQwMHNUVUZCVUN4SFFVRm5Ra01zUjBGQmFFSXNSMEZCYzBJMVFpeFJRVUZSTmtJc1UwRkJVaXhIUVVGdlFpeERRVUV4UXl4SFFVRTRRemRDTEZGQlFWRXlRaXhOUVVGcVJTeERRVUZvUWpzN1FVRkZRU3hyUTBGQlJTeFpRVUZHTEVWQlFXZENSeXhKUVVGb1FpeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFrTXNUMEZCTTBJc1EwRkRTU3hGUVVGRlF5eFhRVUZYVWl4VFFVRmlMRVZCUkVvc1JVRkZTWGhDTEZGQlFWRnBReXhwUWtGR1dpeEZRVWRKYWtNc1VVRkJVV3RETEdWQlNGb3NSVUZKU1N4WlFVRlhPMEZCUTFBc2IwSkJRVWRhTEZsQlFWa3NUMEZCVDBFc1VVRkJVQ3hKUVVGdFFpeFZRVUZzUXl4RlFVRTJRenRCUVVONlEwRTdRVUZEU0R0QlFVTktMR0ZCVWt3N1FVRlZTRHM3T3p0RlFYUkdjMEpoTEd0Q096dEJRWGxHTTBJN096czdPMEZCUjBGeVF5eGhRVUZoVFN4UlFVRmlMRWRCUVhkQ08wRkJRM1JDT3pzN096czdRVUZOUVRaQ0xIVkNRVUZ0UWl4SFFWQkhPMEZCVVhSQ096czdPenM3TzBGQlQwRkRMSEZDUVVGcFFpeFJRV1pMTzBGQlowSjBRanM3T3pzN08wRkJUVUZNTEdWQlFWY3NSVUYwUWxjN1FVRjFRblJDT3pzN096czdRVUZOUVVZc1dVRkJVVHRCUVRkQ1l5eERRVUY0UWpzN1VVRm5RMUUzUWl4WkxFZEJRVUZCTEZraUxDSm1hV3hsSWpvaVptOTFibVJoZEdsdmJpNXpiVzl2ZEdoVFkzSnZiR3d1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbHRjRzl5ZENBa0lHWnliMjBnSjJweGRXVnllU2M3WEc1cGJYQnZjblFnZXlCSFpYUlpiMFJwWjJsMGN5QjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xtTnZjbVVuTzF4dWFXMXdiM0owSUhzZ1VHeDFaMmx1SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuQnNkV2RwYmljN1hHNWNiaThxS2x4dUlDb2dVMjF2YjNSb1UyTnliMnhzSUcxdlpIVnNaUzVjYmlBcUlFQnRiMlIxYkdVZ1ptOTFibVJoZEdsdmJpNXpiVzl2ZEdndGMyTnliMnhzWEc0Z0tpOWNibU5zWVhOeklGTnRiMjkwYUZOamNtOXNiQ0JsZUhSbGJtUnpJRkJzZFdkcGJpQjdYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJR2x1YzNSaGJtTmxJRzltSUZOdGIyOTBhRk5qY205c2JDNWNiaUFnSUNvZ1FHTnNZWE56WEc0Z0lDQXFJRUJ1WVcxbElGTnRiMjkwYUZOamNtOXNiRnh1SUNBZ0tpQkFabWx5WlhNZ1UyMXZiM1JvVTJOeWIyeHNJMmx1YVhSY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1ZzWlcxbGJuUWdMU0JxVVhWbGNua2diMkpxWldOMElIUnZJR0ZrWkNCMGFHVWdkSEpwWjJkbGNpQjBieTVjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQlBkbVZ5Y21sa1pYTWdkRzhnZEdobElHUmxabUYxYkhRZ2NHeDFaMmx1SUhObGRIUnBibWR6TGx4dUlDQWdLaTljYmlBZ0lDQmZjMlYwZFhBb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwSUQwZ1pXeGxiV1Z1ZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnSkM1bGVIUmxibVFvZTMwc0lGTnRiMjkwYUZOamNtOXNiQzVrWldaaGRXeDBjeXdnZEdocGN5NGtaV3hsYldWdWRDNWtZWFJoS0Nrc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Oc1lYTnpUbUZ0WlNBOUlDZFRiVzl2ZEdoVFkzSnZiR3duT3lBdkx5QnBaVGtnWW1GamF5QmpiMjF3WVhSY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtbDBLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1c1cGRHbGhiR2w2WlNCMGFHVWdVMjF2YjNSb1UyTnliMnhzSUhCc2RXZHBibHh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gybHVhWFFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwWkNBOUlIUm9hWE11SkdWc1pXMWxiblJiTUYwdWFXUWdmSHdnUjJWMFdXOUVhV2RwZEhNb05pd2dKM050YjI5MGFDMXpZM0p2Ykd3bktUdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1aGRIUnlLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDZHBaQ2M2SUdsa1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MGN5Z3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx1YVhScFlXeHBlbVZ6SUdWMlpXNTBjeUJtYjNJZ1UyMXZiM1JvVTJOeWIyeHNMbHh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyVjJaVzUwY3lncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdJQ0F2THlCamJHbGpheUJvWVc1a2JHVnlJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQWdJQ0IyWVhJZ2FHRnVaR3hsVEdsdWEwTnNhV05ySUQwZ1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaWGhwZENCbWRXNWpkR2x2YmlCcFppQjBhR1VnWlhabGJuUWdjMjkxY21ObElHbHpiaWQwSUdOdmJXbHVaeUJtY205dElHRnVJR0Z1WTJodmNpQjNhWFJvSUdoeVpXWWdZWFIwY21saWRYUmxJSE4wWVhKMGN5QjNhWFJvSUNjakoxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb0lTUW9kR2hwY3lrdWFYTW9KMkZiYUhKbFpsNDlYQ0lqWENKZEp5a3BJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lYSnlhWFpoYkNBOUlIUm9hWE11WjJWMFFYUjBjbWxpZFhSbEtDZG9jbVZtSnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDlwYmxSeVlXNXphWFJwYjI0Z1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JUYlc5dmRHaFRZM0p2Ykd3dWMyTnliMnhzVkc5TWIyTW9ZWEp5YVhaaGJDd2dYM1JvYVhNdWIzQjBhVzl1Y3l3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgybHVWSEpoYm5OcGRHbHZiaUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbTl1S0NkamJHbGpheTU2Wmk1emJXOXZkR2hUWTNKdmJHd25MQ0JvWVc1a2JHVk1hVzVyUTJ4cFkyc3BYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWIyNG9KMk5zYVdOckxucG1Mbk50YjI5MGFGTmpjbTlzYkNjc0lDZGhXMmh5WldaZVBWd2lJMXdpWFNjc0lHaGhibVJzWlV4cGJtdERiR2xqYXlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdjMk55YjJ4c0lIUnZJR0VnWjJsMlpXNGdiRzlqWVhScGIyNGdiMjRnZEdobElIQmhaMlV1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR3h2WXlBdElFRWdjSEp2Y0dWeWJIa2dabTl5YldGMGRHVmtJR3BSZFdWeWVTQnBaQ0J6Wld4bFkzUnZjaTRnUlhoaGJYQnNaVG9nSnlObWIyOG5YRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQlVhR1VnYjNCMGFXOXVjeUIwYnlCMWMyVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMkZzYkdKaFkyc2dMU0JVYUdVZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0dVhHNGdJQ0FnSUNvZ1FITjBZWFJwWTF4dUlDQWdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wWVhScFl5QnpZM0p2Ykd4VWIweHZZeWhzYjJNc0lHOXdkR2x2Ym5NZ1BTQlRiVzl2ZEdoVFkzSnZiR3d1WkdWbVlYVnNkSE1zSUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVJ2SUc1dmRHaHBibWNnYVdZZ2RHRnlaMlYwSUdSdlpYTWdibTkwSUdWNGFYTjBJSFJ2SUhCeVpYWmxiblFnWlhKeWIzSnpYRzRnSUNBZ0lDQWdJR2xtSUNnaEpDaHNiMk1wTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhOamNtOXNiRkJ2Y3lBOUlFMWhkR2d1Y205MWJtUW9KQ2hzYjJNcExtOW1abk5sZENncExuUnZjQ0F0SUc5d2RHbHZibk11ZEdoeVpYTm9iMnhrSUM4Z01pQXRJRzl3ZEdsdmJuTXViMlptYzJWMEtUdGNibHh1SUNBZ0lDQWdJQ0FrS0Nkb2RHMXNMQ0JpYjJSNUp5a3VjM1J2Y0NoMGNuVmxLUzVoYm1sdFlYUmxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2V5QnpZM0p2Ykd4VWIzQTZJSE5qY205c2JGQnZjeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NWhibWx0WVhScGIyNUVkWEpoZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11WVc1cGJXRjBhVzl1UldGemFXNW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvWTJGc2JHSmhZMnNnSmlZZ2RIbHdaVzltSUdOaGJHeGlZV05ySUQwOUlGd2lablZ1WTNScGIyNWNJaWw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOcktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCRVpXWmhkV3gwSUhObGRIUnBibWR6SUdadmNpQndiSFZuYVc0dVhHNGdLaTljYmxOdGIyOTBhRk5qY205c2JDNWtaV1poZFd4MGN5QTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFRnRiM1Z1ZENCdlppQjBhVzFsTENCcGJpQnRjeXdnZEdobElHRnVhVzFoZEdWa0lITmpjbTlzYkdsdVp5QnphRzkxYkdRZ2RHRnJaU0JpWlhSM1pXVnVJR3h2WTJGMGFXOXVjeTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQTFNREJjYmlBZ0lDb3ZYRzRnSUdGdWFXMWhkR2x2YmtSMWNtRjBhVzl1T2lBMU1EQXNYRzRnSUM4cUtseHVJQ0FnS2lCQmJtbHRZWFJwYjI0Z2MzUjViR1VnZEc4Z2RYTmxJSGRvWlc0Z2MyTnliMnhzYVc1bklHSmxkSGRsWlc0Z2JHOWpZWFJwYjI1ekxpQkRZVzRnWW1VZ1lDZHpkMmx1WnlkZ0lHOXlJR0FuYkdsdVpXRnlKMkF1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdKMnhwYm1WaGNpZGNiaUFnSUNvZ1FITmxaU0I3UUd4cGJtc2dhSFIwY0hNNkx5OWhjR2t1YW5GMVpYSjVMbU52YlM5aGJtbHRZWFJsZkVweGRXVnllU0JoYm1sdFlYUmxmVnh1SUNBZ0tpOWNiaUFnWVc1cGJXRjBhVzl1UldGemFXNW5PaUFuYkdsdVpXRnlKeXhjYmlBZ0x5b3FYRzRnSUNBcUlFNTFiV0psY2lCdlppQndhWGhsYkhNZ2RHOGdkWE5sSUdGeklHRWdiV0Z5YTJWeUlHWnZjaUJzYjJOaGRHbHZiaUJqYUdGdVoyVnpMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYRzRnSUNBcUlFQmtaV1poZFd4MElEVXdYRzRnSUNBcUwxeHVJQ0IwYUhKbGMyaHZiR1E2SURVd0xGeHVJQ0F2S2lwY2JpQWdJQ29nVG5WdFltVnlJRzltSUhCcGVHVnNjeUIwYnlCdlptWnpaWFFnZEdobElITmpjbTlzYkNCdlppQjBhR1VnY0dGblpTQnZiaUJwZEdWdElHTnNhV05ySUdsbUlIVnphVzVuSUdFZ2MzUnBZMnQ1SUc1aGRpQmlZWEl1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdNRnh1SUNBZ0tpOWNiaUFnYjJabWMyVjBPaUF3WEc1OVhHNWNibVY0Y0c5eWRDQjdVMjF2YjNSb1UyTnliMnhzZlZ4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi5zbW9vdGhTY3JvbGwuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU3RpY2t5ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnknKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMyA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBTdGlja3kgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnN0aWNreVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxudmFyIFN0aWNreSA9IGZ1bmN0aW9uIChfUGx1Z2luKSB7XG4gIF9pbmhlcml0cyhTdGlja3ksIF9QbHVnaW4pO1xuXG4gIGZ1bmN0aW9uIFN0aWNreSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RpY2t5KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU3RpY2t5Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3RpY2t5KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RpY2t5LCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc3RpY2t5IHRoaW5nLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFN0aWNreVxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIHN0aWNreS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB3aGVuIGNyZWF0aW5nIHRoZSBlbGVtZW50IHByb2dyYW1tYXRpY2FsbHkuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKHt9LCBTdGlja3kuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1N0aWNreSc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICAvLyBUcmlnZ2VycyBpbml0IGlzIGlkZW1wb3RlbnQsIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgIF9mb3VuZGF0aW9uVXRpbDMuVHJpZ2dlcnMuaW5pdChfanF1ZXJ5Mi5kZWZhdWx0KTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBzdGlja3kgZWxlbWVudCBieSBhZGRpbmcgY2xhc3NlcywgZ2V0dGluZy9zZXR0aW5nIGRpbWVuc2lvbnMsIGJyZWFrcG9pbnRzIGFuZCBhdHRyaWJ1dGVzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIF9mb3VuZGF0aW9uVXRpbDIuTWVkaWFRdWVyeS5faW5pdCgpO1xuXG4gICAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdGlja3ktY29udGFpbmVyXScpLFxuICAgICAgICAgIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsLkdldFlvRGlnaXRzKSg2LCAnc3RpY2t5JyksXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4kY29udGFpbmVyID0gJHBhcmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud2FzV3JhcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQud3JhcCh0aGlzLm9wdGlvbnMuY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy4kY29udGFpbmVyID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5zdGlja3lDbGFzcykuYXR0cih7ICdkYXRhLXJlc2l6ZSc6IGlkLCAnZGF0YS1tdXRhdGUnOiBpZCB9KTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5jaG9yICE9PSAnJykge1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyMnICsgX3RoaXMub3B0aW9ucy5hbmNob3IpLmF0dHIoeyAnZGF0YS1tdXRhdGUnOiBpZCB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxDb3VudCA9IHRoaXMub3B0aW9ucy5jaGVja0V2ZXJ5O1xuICAgICAgdGhpcy5pc1N0dWNrID0gZmFsc2U7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvL1dlIGNhbGN1bGF0ZSB0aGUgY29udGFpbmVyIGhlaWdodCB0byBoYXZlIGNvcnJlY3QgdmFsdWVzIGZvciBhbmNob3IgcG9pbnRzIG9mZnNldCBjYWxjdWxhdGlvbi5cbiAgICAgICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gX3RoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA/IDAgOiBfdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIF90aGlzLiRjb250YWluZXIuY3NzKCdoZWlnaHQnLCBfdGhpcy5jb250YWluZXJIZWlnaHQpO1xuICAgICAgICBfdGhpcy5lbGVtSGVpZ2h0ID0gX3RoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hbmNob3IgIT09ICcnKSB7XG4gICAgICAgICAgX3RoaXMuJGFuY2hvciA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBzY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHNjcm9sbCk7XG4gICAgICAgICAgLy9VbnN0aWNrIHRoZSBlbGVtZW50IHdpbGwgZW5zdXJlIHRoYXQgcHJvcGVyIGNsYXNzZXMgYXJlIHNldC5cbiAgICAgICAgICBpZiAoIV90aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICAgIF90aGlzLl9yZW1vdmVTdGlja3koc2Nyb2xsID49IF90aGlzLnRvcFBvaW50ID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fZXZlbnRzKGlkLnNwbGl0KCctJykucmV2ZXJzZSgpLmpvaW4oJy0nKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB1c2luZyBtdWx0aXBsZSBlbGVtZW50cyBhcyBhbmNob3JzLCBjYWxjdWxhdGVzIHRoZSB0b3AgYW5kIGJvdHRvbSBwaXhlbCB2YWx1ZXMgdGhlIHN0aWNreSB0aGluZyBzaG91bGQgc3RpY2sgYW5kIHVuc3RpY2sgb24uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3BhcnNlUG9pbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BhcnNlUG9pbnRzKCkge1xuICAgICAgdmFyIHRvcCA9IHRoaXMub3B0aW9ucy50b3BBbmNob3IgPT0gXCJcIiA/IDEgOiB0aGlzLm9wdGlvbnMudG9wQW5jaG9yLFxuICAgICAgICAgIGJ0bSA9IHRoaXMub3B0aW9ucy5idG1BbmNob3IgPT0gXCJcIiA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgOiB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yLFxuICAgICAgICAgIHB0cyA9IFt0b3AsIGJ0bV0sXG4gICAgICAgICAgYnJlYWtzID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcHRzLmxlbmd0aDsgaSA8IGxlbiAmJiBwdHNbaV07IGkrKykge1xuICAgICAgICB2YXIgcHQ7XG4gICAgICAgIGlmICh0eXBlb2YgcHRzW2ldID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHB0ID0gcHRzW2ldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwbGFjZSA9IHB0c1tpXS5zcGxpdCgnOicpLFxuICAgICAgICAgICAgICBhbmNob3IgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyMnICsgcGxhY2VbMF0pO1xuXG4gICAgICAgICAgcHQgPSBhbmNob3Iub2Zmc2V0KCkudG9wO1xuICAgICAgICAgIGlmIChwbGFjZVsxXSAmJiBwbGFjZVsxXS50b0xvd2VyQ2FzZSgpID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgcHQgKz0gYW5jaG9yWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtzW2ldID0gcHQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9pbnRzID0gYnJlYWtzO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBzY3JvbGxpbmcgZWxlbWVudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzZXVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKGlkKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIHNjcm9sbExpc3RlbmVyID0gdGhpcy5zY3JvbGxMaXN0ZW5lciA9ICdzY3JvbGwuemYuJyArIGlkO1xuICAgICAgaWYgKHRoaXMuaXNPbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jYW5TdGljaykge1xuICAgICAgICB0aGlzLmlzT24gPSB0cnVlO1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpLm9uKHNjcm9sbExpc3RlbmVyLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmIChfdGhpcy5zY3JvbGxDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudC0tO1xuICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uIChlLCBlbCkge1xuICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignbXV0YXRlbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uIChlLCBlbCkge1xuICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuJGFuY2hvcikge1xuICAgICAgICB0aGlzLiRhbmNob3Iub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgZm9yIGV2ZW50cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzZXVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHNIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2V2ZW50c0hhbmRsZXIoaWQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gJ3Njcm9sbC56Zi4nICsgaWQ7XG5cbiAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICBfdGhpcy5fZXZlbnRzKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuaXNPbikge1xuICAgICAgICAgIF90aGlzLl9wYXVzZUxpc3RlbmVycyhzY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZm9yIHNjcm9sbCBhbmQgY2hhbmdlIGV2ZW50cyBvbiBhbmNob3IuXG4gICAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzY3JvbGxMaXN0ZW5lciAtIHVuaXF1ZSwgbmFtZXNwYWNlZCBzY3JvbGwgbGlzdGVuZXIgYXR0YWNoZWQgdG8gYHdpbmRvd2BcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3BhdXNlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9mZihzY3JvbGxMaXN0ZW5lcik7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGlzIHBhdXNlZCBkdWUgdG8gcmVzaXplIGV2ZW50IHNocmlua2luZyB0aGUgdmlldy5cbiAgICAgICAqIEBldmVudCBTdGlja3kjcGF1c2VcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncGF1c2UuemYuc3RpY2t5Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIG9uIGV2ZXJ5IGBzY3JvbGxgIGV2ZW50IGFuZCBvbiBgX2luaXRgXG4gICAgICogZmlyZXMgZnVuY3Rpb25zIGJhc2VkIG9uIGJvb2xlYW5zIGFuZCBjYWNoZWQgdmFsdWVzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBjaGVja1NpemVzIC0gdHJ1ZSBpZiBwbHVnaW4gc2hvdWxkIHJlY2FsY3VsYXRlIHNpemVzIGFuZCBicmVha3BvaW50cy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2Nyb2xsIC0gY3VycmVudCBzY3JvbGwgcG9zaXRpb24gcGFzc2VkIGZyb20gc2Nyb2xsIGV2ZW50IGNiIGZ1bmN0aW9uLiBJZiBub3QgcGFzc2VkLCBkZWZhdWx0cyB0byBgd2luZG93LnBhZ2VZT2Zmc2V0YC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2NhbGMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2FsYyhjaGVja1NpemVzLCBzY3JvbGwpIHtcbiAgICAgIGlmIChjaGVja1NpemVzKSB7XG4gICAgICAgIHRoaXMuX3NldFNpemVzKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzY3JvbGwpIHtcbiAgICAgICAgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAoc2Nyb2xsID49IHRoaXMudG9wUG9pbnQpIHtcbiAgICAgICAgaWYgKHNjcm9sbCA8PSB0aGlzLmJvdHRvbVBvaW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFN0aWNreSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3koZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHN0dWNrLlxuICAgICAqIEFkZHMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAgICogQGZpcmVzIFN0aWNreSNzdHVja3RvXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldFN0aWNreScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRTdGlja3koKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgICBtcmduID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICAgIG5vdFN0dWNrVG8gPSBzdGlja1RvID09PSAndG9wJyA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgICAgY3NzID0ge307XG5cbiAgICAgIGNzc1ttcmduXSA9IHRoaXMub3B0aW9uc1ttcmduXSArICdlbSc7XG4gICAgICBjc3Nbc3RpY2tUb10gPSAwO1xuICAgICAgY3NzW25vdFN0dWNrVG9dID0gJ2F1dG8nO1xuICAgICAgdGhpcy5pc1N0dWNrID0gdHJ1ZTtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLWFuY2hvcmVkIGlzLWF0LScgKyBub3RTdHVja1RvKS5hZGRDbGFzcygnaXMtc3R1Y2sgaXMtYXQtJyArIHN0aWNrVG8pLmNzcyhjc3MpXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYHBvc2l0aW9uOiBmaXhlZDtgXG4gICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYuc3R1Y2t0bzp0b3BgXG4gICAgICAgKiBAZXZlbnQgU3RpY2t5I3N0dWNrdG9cbiAgICAgICAqL1xuICAgICAgLnRyaWdnZXIoJ3N0aWNreS56Zi5zdHVja3RvOicgKyBzdGlja1RvKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oXCJ0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQgTVNUcmFuc2l0aW9uRW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX3NldFNpemVzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXVzZXMgdGhlICRlbGVtZW50IHRvIGJlY29tZSB1bnN0dWNrLlxuICAgICAqIFJlbW92ZXMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAgICogQWRkcyBvdGhlciBoZWxwZXIgY2xhc3Nlcy5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzVG9wIC0gdGVsbHMgdGhlIGZ1bmN0aW9uIGlmIHRoZSAkZWxlbWVudCBzaG91bGQgYW5jaG9yIHRvIHRoZSB0b3Agb3IgYm90dG9tIG9mIGl0cyAkYW5jaG9yIGVsZW1lbnQuXG4gICAgICogQGZpcmVzIFN0aWNreSN1bnN0dWNrZnJvbVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19yZW1vdmVTdGlja3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlU3RpY2t5KGlzVG9wKSB7XG4gICAgICB2YXIgc3RpY2tUbyA9IHRoaXMub3B0aW9ucy5zdGlja1RvLFxuICAgICAgICAgIHN0aWNrVG9Ub3AgPSBzdGlja1RvID09PSAndG9wJyxcbiAgICAgICAgICBjc3MgPSB7fSxcbiAgICAgICAgICBhbmNob3JQdCA9ICh0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIC0gdGhpcy5wb2ludHNbMF0gOiB0aGlzLmFuY2hvckhlaWdodCkgLSB0aGlzLmVsZW1IZWlnaHQsXG4gICAgICAgICAgbXJnbiA9IHN0aWNrVG9Ub3AgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICAgIG5vdFN0dWNrVG8gPSBzdGlja1RvVG9wID8gJ2JvdHRvbScgOiAndG9wJyxcbiAgICAgICAgICB0b3BPckJvdHRvbSA9IGlzVG9wID8gJ3RvcCcgOiAnYm90dG9tJztcblxuICAgICAgY3NzW21yZ25dID0gMDtcblxuICAgICAgY3NzWydib3R0b20nXSA9ICdhdXRvJztcbiAgICAgIGlmIChpc1RvcCkge1xuICAgICAgICBjc3NbJ3RvcCddID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNzc1sndG9wJ10gPSBhbmNob3JQdDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pc1N0dWNrID0gZmFsc2U7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1zdHVjayBpcy1hdC0nICsgc3RpY2tUbykuYWRkQ2xhc3MoJ2lzLWFuY2hvcmVkIGlzLWF0LScgKyB0b3BPckJvdHRvbSkuY3NzKGNzcylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgJGVsZW1lbnQgaGFzIGJlY29tZSBhbmNob3JlZC5cbiAgICAgICAqIE5hbWVzcGFjZWQgdG8gYHRvcGAgb3IgYGJvdHRvbWAsIGUuZy4gYHN0aWNreS56Zi51bnN0dWNrZnJvbTpib3R0b21gXG4gICAgICAgKiBAZXZlbnQgU3RpY2t5I3Vuc3R1Y2tmcm9tXG4gICAgICAgKi9cbiAgICAgIC50cmlnZ2VyKCdzdGlja3kuemYudW5zdHVja2Zyb206JyArIHRvcE9yQm90dG9tKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSAkZWxlbWVudCBhbmQgJGNvbnRhaW5lciBzaXplcyBmb3IgcGx1Z2luLlxuICAgICAqIENhbGxzIGBfc2V0QnJlYWtQb2ludHNgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBvbiBjb21wbGV0aW9uIG9mIGBfc2V0QnJlYWtQb2ludHNgLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19zZXRTaXplcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRTaXplcyhjYikge1xuICAgICAgdGhpcy5jYW5TdGljayA9IF9mb3VuZGF0aW9uVXRpbDIuTWVkaWFRdWVyeS5pcyh0aGlzLm9wdGlvbnMuc3RpY2t5T24pO1xuICAgICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIG5ld0VsZW1XaWR0aCA9IHRoaXMuJGNvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxcbiAgICAgICAgICBjb21wID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kY29udGFpbmVyWzBdKSxcbiAgICAgICAgICBwZG5nbCA9IHBhcnNlSW50KGNvbXBbJ3BhZGRpbmctbGVmdCddLCAxMCksXG4gICAgICAgICAgcGRuZ3IgPSBwYXJzZUludChjb21wWydwYWRkaW5nLXJpZ2h0J10sIDEwKTtcblxuICAgICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYW5jaG9ySGVpZ2h0ID0gdGhpcy4kYW5jaG9yWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgICAgJ21heC13aWR0aCc6IG5ld0VsZW1XaWR0aCAtIHBkbmdsIC0gcGRuZ3IgKyAncHgnXG4gICAgICB9KTtcblxuICAgICAgdmFyIG5ld0NvbnRhaW5lckhlaWdodCA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IHx8IHRoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgICAgaWYgKHRoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIikge1xuICAgICAgICBuZXdDb250YWluZXJIZWlnaHQgPSAwO1xuICAgICAgfVxuICAgICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG4gICAgICB0aGlzLiRjb250YWluZXIuY3NzKHtcbiAgICAgICAgaGVpZ2h0OiBuZXdDb250YWluZXJIZWlnaHRcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbGVtSGVpZ2h0ID0gbmV3Q29udGFpbmVySGVpZ2h0O1xuXG4gICAgICBpZiAoIXRoaXMuaXNTdHVjaykge1xuICAgICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtYXQtYm90dG9tJykpIHtcbiAgICAgICAgICB2YXIgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKS50b3AgOiB0aGlzLmFuY2hvckhlaWdodCkgLSB0aGlzLmVsZW1IZWlnaHQ7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoJ3RvcCcsIGFuY2hvclB0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9zZXRCcmVha1BvaW50cyhuZXdDb250YWluZXJIZWlnaHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHVwcGVyIGFuZCBsb3dlciBicmVha3BvaW50cyBmb3IgdGhlIGVsZW1lbnQgdG8gYmVjb21lIHN0aWNreS91bnN0aWNreS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZWxlbUhlaWdodCAtIHB4IHZhbHVlIGZvciBzdGlja3kuJGVsZW1lbnQgaGVpZ2h0LCBjYWxjdWxhdGVkIGJ5IGBfc2V0U2l6ZXNgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX3NldEJyZWFrUG9pbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEJyZWFrUG9pbnRzKGVsZW1IZWlnaHQsIGNiKSB7XG4gICAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNiKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbVRvcCA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luVG9wKSxcbiAgICAgICAgICBtQnRtID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Cb3R0b20pLFxuICAgICAgICAgIHRvcFBvaW50ID0gdGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1swXSA6IHRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3AsXG4gICAgICAgICAgYm90dG9tUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIDogdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCxcblxuICAgICAgLy8gdG9wUG9pbnQgPSB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wIHx8IHRoaXMucG9pbnRzWzBdLFxuICAgICAgLy8gYm90dG9tUG9pbnQgPSB0b3BQb2ludCArIHRoaXMuYW5jaG9ySGVpZ2h0IHx8IHRoaXMucG9pbnRzWzFdLFxuICAgICAgd2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICd0b3AnKSB7XG4gICAgICAgIHRvcFBvaW50IC09IG1Ub3A7XG4gICAgICAgIGJvdHRvbVBvaW50IC09IGVsZW1IZWlnaHQgKyBtVG9wO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgdG9wUG9pbnQgLT0gd2luSGVpZ2h0IC0gKGVsZW1IZWlnaHQgKyBtQnRtKTtcbiAgICAgICAgYm90dG9tUG9pbnQgLT0gd2luSGVpZ2h0IC0gbUJ0bTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vdGhpcyB3b3VsZCBiZSB0aGUgc3RpY2tUbzogYm90aCBvcHRpb24uLi4gdHJpY2t5XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9wUG9pbnQgPSB0b3BQb2ludDtcbiAgICAgIHRoaXMuYm90dG9tUG9pbnQgPSBib3R0b21Qb2ludDtcblxuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBjdXJyZW50IHN0aWNreSBlbGVtZW50LlxuICAgICAqIFJlc2V0cyB0aGUgZWxlbWVudCB0byB0aGUgdG9wIHBvc2l0aW9uIGZpcnN0LlxuICAgICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzLCBKUy1hZGRlZCBjc3MgcHJvcGVydGllcyBhbmQgY2xhc3NlcywgYW5kIHVud3JhcHMgdGhlICRlbGVtZW50IGlmIHRoZSBKUyBhZGRlZCB0aGUgJGNvbnRhaW5lci5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MgKyAnIGlzLWFuY2hvcmVkIGlzLWF0LXRvcCcpLmNzcyh7XG4gICAgICAgIGhlaWdodDogJycsXG4gICAgICAgIHRvcDogJycsXG4gICAgICAgIGJvdHRvbTogJycsXG4gICAgICAgICdtYXgtd2lkdGgnOiAnJ1xuICAgICAgfSkub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJykub2ZmKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICBpZiAodGhpcy4kYW5jaG9yICYmIHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4kYW5jaG9yLm9mZignY2hhbmdlLnpmLnN0aWNreScpO1xuICAgICAgfVxuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKHRoaXMuc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgICBpZiAodGhpcy53YXNXcmFwcGVkKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKS5jc3Moe1xuICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0aWNreTtcbn0oX2ZvdW5kYXRpb24uUGx1Z2luKTtcblxuU3RpY2t5LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ3VzdG9taXphYmxlIGNvbnRhaW5lciB0ZW1wbGF0ZS4gQWRkIHlvdXIgb3duIGNsYXNzZXMgZm9yIHN0eWxpbmcgYW5kIHNpemluZy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJmx0O2RpdiBkYXRhLXN0aWNreS1jb250YWluZXImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgY29udGFpbmVyOiAnPGRpdiBkYXRhLXN0aWNreS1jb250YWluZXI+PC9kaXY+JyxcbiAgLyoqXG4gICAqIExvY2F0aW9uIGluIHRoZSB2aWV3IHRoZSBlbGVtZW50IHN0aWNrcyB0by4gQ2FuIGJlIGAndG9wJ2Agb3IgYCdib3R0b20nYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndG9wJ1xuICAgKi9cbiAgc3RpY2tUbzogJ3RvcCcsXG4gIC8qKlxuICAgKiBJZiBhbmNob3JlZCB0byBhIHNpbmdsZSBlbGVtZW50LCB0aGUgaWQgb2YgdGhhdCBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBhbmNob3I6ICcnLFxuICAvKipcbiAgICogSWYgdXNpbmcgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGFzIGFuY2hvciBwb2ludHMsIHRoZSBpZCBvZiB0aGUgdG9wIGFuY2hvci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdG9wQW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIGJvdHRvbSBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGJ0bUFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBNYXJnaW4sIGluIGBlbWAncyB0byBhcHBseSB0byB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgbWFyZ2luVG9wOiAxLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIGJvdHRvbSBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIG1hcmdpbkJvdHRvbTogMSxcbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgc3RyaW5nIHRoYXQgaXMgdGhlIG1pbmltdW0gc2NyZWVuIHNpemUgYW4gZWxlbWVudCBzaG91bGQgYmVjb21lIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc3RpY2t5T246ICdtZWRpdW0nLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBzdGlja3kgZWxlbWVudCwgYW5kIHJlbW92ZWQgb24gZGVzdHJ1Y3Rpb24uIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreWAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3N0aWNreSdcbiAgICovXG4gIHN0aWNreUNsYXNzOiAnc3RpY2t5JyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGNvbnRhaW5lci4gRm91bmRhdGlvbiBkZWZhdWx0cyB0byBgc3RpY2t5LWNvbnRhaW5lcmAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3N0aWNreS1jb250YWluZXInXG4gICAqL1xuICBjb250YWluZXJDbGFzczogJ3N0aWNreS1jb250YWluZXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHNjcm9sbCBldmVudHMgYmV0d2VlbiB0aGUgcGx1Z2luJ3MgcmVjYWxjdWxhdGluZyBzdGlja3kgcG9pbnRzLiBTZXR0aW5nIGl0IHRvIGAwYCB3aWxsIGNhdXNlIGl0IHRvIHJlY2FsYyBldmVyeSBzY3JvbGwgZXZlbnQsIHNldHRpbmcgaXQgdG8gYC0xYCB3aWxsIHByZXZlbnQgcmVjYWxjIG9uIHNjcm9sbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAtMVxuICAgKi9cbiAgY2hlY2tFdmVyeTogLTFcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBlbSB2YWx1ZXNcbiAqIEBwYXJhbSBOdW1iZXIge2VtfSAtIG51bWJlciBvZiBlbSdzIHRvIGNhbGN1bGF0ZSBpbnRvIHBpeGVsc1xuICovXG5mdW5jdGlvbiBlbUNhbGMoZW0pIHtcbiAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHksIG51bGwpLmZvbnRTaXplLCAxMCkgKiBlbTtcbn1cblxuZXhwb3J0cy5TdGlja3kgPSBTdGlja3k7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1YzNScFkydDVMbXB6SWwwc0ltNWhiV1Z6SWpwYklsTjBhV05yZVNJc0ltVnNaVzFsYm5RaUxDSnZjSFJwYjI1eklpd2lKR1ZzWlcxbGJuUWlMQ0lrSWl3aVpYaDBaVzVrSWl3aVpHVm1ZWFZzZEhNaUxDSmtZWFJoSWl3aVkyeGhjM05PWVcxbElpd2lWSEpwWjJkbGNuTWlMQ0pwYm1sMElpd2lYMmx1YVhRaUxDSk5aV1JwWVZGMVpYSjVJaXdpSkhCaGNtVnVkQ0lzSW5CaGNtVnVkQ0lzSW1sa0lpd2lYM1JvYVhNaUxDSnNaVzVuZEdnaUxDSWtZMjl1ZEdGcGJtVnlJaXdpZDJGelYzSmhjSEJsWkNJc0luZHlZWEFpTENKamIyNTBZV2x1WlhJaUxDSmhaR1JEYkdGemN5SXNJbU52Ym5SaGFXNWxja05zWVhOeklpd2ljM1JwWTJ0NVEyeGhjM01pTENKaGRIUnlJaXdpWVc1amFHOXlJaXdpYzJOeWIyeHNRMjkxYm5RaUxDSmphR1ZqYTBWMlpYSjVJaXdpYVhOVGRIVmpheUlzSW5kcGJtUnZkeUlzSW05dVpTSXNJbU52Ym5SaGFXNWxja2hsYVdkb2RDSXNJbU56Y3lJc0ltZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ0lzSW1obGFXZG9kQ0lzSW1Wc1pXMUlaV2xuYUhRaUxDSWtZVzVqYUc5eUlpd2lYM0JoY25ObFVHOXBiblJ6SWl3aVgzTmxkRk5wZW1Weklpd2ljMk55YjJ4c0lpd2ljR0ZuWlZsUFptWnpaWFFpTENKZlkyRnNZeUlzSWw5eVpXMXZkbVZUZEdsamEza2lMQ0owYjNCUWIybHVkQ0lzSWw5bGRtVnVkSE1pTENKemNHeHBkQ0lzSW5KbGRtVnljMlVpTENKcWIybHVJaXdpZEc5d0lpd2lkRzl3UVc1amFHOXlJaXdpWW5SdElpd2lZblJ0UVc1amFHOXlJaXdpWkc5amRXMWxiblFpTENKa2IyTjFiV1Z1ZEVWc1pXMWxiblFpTENKelkzSnZiR3hJWldsbmFIUWlMQ0p3ZEhNaUxDSmljbVZoYTNNaUxDSnBJaXdpYkdWdUlpd2ljSFFpTENKd2JHRmpaU0lzSW05bVpuTmxkQ0lzSW5SdlRHOTNaWEpEWVhObElpd2ljRzlwYm5Seklpd2ljMk55YjJ4c1RHbHpkR1Z1WlhJaUxDSnBjMDl1SWl3aVkyRnVVM1JwWTJzaUxDSnZabVlpTENKdmJpSXNJbVVpTENKbGJDSXNJbDlsZG1WdWRITklZVzVrYkdWeUlpd2lYM0JoZFhObFRHbHpkR1Z1WlhKeklpd2lkSEpwWjJkbGNpSXNJbU5vWldOclUybDZaWE1pTENKaWIzUjBiMjFRYjJsdWRDSXNJbDl6WlhSVGRHbGphM2tpTENKemRHbGphMVJ2SWl3aWJYSm5iaUlzSW01dmRGTjBkV05yVkc4aUxDSnlaVzF2ZG1WRGJHRnpjeUlzSW1selZHOXdJaXdpYzNScFkydFViMVJ2Y0NJc0ltRnVZMmh2Y2xCMElpd2lZVzVqYUc5eVNHVnBaMmgwSWl3aWRHOXdUM0pDYjNSMGIyMGlMQ0pqWWlJc0ltbHpJaXdpYzNScFkydDVUMjRpTENKdVpYZEZiR1Z0VjJsa2RHZ2lMQ0ozYVdSMGFDSXNJbU52YlhBaUxDSm5aWFJEYjIxd2RYUmxaRk4wZVd4bElpd2ljR1J1WjJ3aUxDSndZWEp6WlVsdWRDSXNJbkJrYm1keUlpd2libVYzUTI5dWRHRnBibVZ5U0dWcFoyaDBJaXdpYUdGelEyeGhjM01pTENKZmMyVjBRbkpsWVd0UWIybHVkSE1pTENKdFZHOXdJaXdpWlcxRFlXeGpJaXdpYldGeVoybHVWRzl3SWl3aWJVSjBiU0lzSW0xaGNtZHBia0p2ZEhSdmJTSXNJbmRwYmtobGFXZG9kQ0lzSW1sdWJtVnlTR1ZwWjJoMElpd2lZbTkwZEc5dElpd2lkVzUzY21Gd0lpd2lVR3gxWjJsdUlpd2laVzBpTENKaWIyUjVJaXdpWm05dWRGTnBlbVVpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPenM3UVVGRlFUczdPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenRCUVVOQk96czdPenM3T3pzN08wRkJSVUU3T3pzN096czdTVUZQVFVFc1RUczdPenM3T3pzN096czdPMEZCUTBvN096czdPenM3TWtKQlQwOURMRThzUlVGQlUwTXNUeXhGUVVGVE8wRkJRM1pDTEZkQlFVdERMRkZCUVV3c1IwRkJaMEpHTEU5QlFXaENPMEZCUTBFc1YwRkJTME1zVDBGQlRDeEhRVUZsUlN4cFFrRkJSVU1zVFVGQlJpeERRVUZUTEVWQlFWUXNSVUZCWVV3c1QwRkJUMDBzVVVGQmNFSXNSVUZCT0VJc1MwRkJTMGdzVVVGQlRDeERRVUZqU1N4SlFVRmtMRVZCUVRsQ0xFVkJRVzlFVEN4UFFVRndSQ3hEUVVGbU8wRkJRMEVzVjBGQlMwMHNVMEZCVEN4SFFVRnBRaXhSUVVGcVFpeERRVWgxUWl4RFFVZEpPenRCUVVVelFqdEJRVU5CUXl4blEwRkJVME1zU1VGQlZDeERRVUZqVGl4blFrRkJaRHM3UVVGRlFTeFhRVUZMVHl4TFFVRk1PMEZCUTBRN08wRkJSVVE3T3pzN096czdPelJDUVV0Uk8wRkJRMDVETEd0RFFVRlhSQ3hMUVVGWU96dEJRVVZCTEZWQlFVbEZMRlZCUVZVc1MwRkJTMVlzVVVGQlRDeERRVUZqVnl4TlFVRmtMRU5CUVhGQ0xIbENRVUZ5UWl4RFFVRmtPMEZCUVVFc1ZVRkRTVU1zUzBGQlN5eExRVUZMV2l4UlFVRk1MRU5CUVdNc1EwRkJaQ3hGUVVGcFFsa3NSVUZCYWtJc1NVRkJkVUlzYVVOQlFWa3NRMEZCV2l4RlFVRmxMRkZCUVdZc1EwRkVhRU03UVVGQlFTeFZRVVZKUXl4UlFVRlJMRWxCUmxvN08wRkJTVUVzVlVGQlIwZ3NVVUZCVVVrc1RVRkJXQ3hGUVVGclFqdEJRVU5vUWl4aFFVRkxReXhWUVVGTUxFZEJRV3RDVEN4UFFVRnNRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdGQlFVdE5MRlZCUVV3c1IwRkJhMElzU1VGQmJFSTdRVUZEUVN4aFFVRkxhRUlzVVVGQlRDeERRVUZqYVVJc1NVRkJaQ3hEUVVGdFFpeExRVUZMYkVJc1QwRkJUQ3hEUVVGaGJVSXNVMEZCYUVNN1FVRkRRU3hoUVVGTFNDeFZRVUZNTEVkQlFXdENMRXRCUVV0bUxGRkJRVXdzUTBGQlkxY3NUVUZCWkN4RlFVRnNRanRCUVVORU8wRkJRMFFzVjBGQlMwa3NWVUZCVEN4RFFVRm5Ra2tzVVVGQmFFSXNRMEZCZVVJc1MwRkJTM0JDTEU5QlFVd3NRMEZCWVhGQ0xHTkJRWFJET3p0QlFVVkJMRmRCUVV0d1FpeFJRVUZNTEVOQlFXTnRRaXhSUVVGa0xFTkJRWFZDTEV0QlFVdHdRaXhQUVVGTUxFTkJRV0Z6UWl4WFFVRndReXhGUVVGcFJFTXNTVUZCYWtRc1EwRkJjMFFzUlVGQlJTeGxRVUZsVml4RlFVRnFRaXhGUVVGeFFpeGxRVUZsUVN4RlFVRndReXhGUVVGMFJEdEJRVU5CTEZWQlFVa3NTMEZCUzJJc1QwRkJUQ3hEUVVGaGQwSXNUVUZCWWl4TFFVRjNRaXhGUVVFMVFpeEZRVUZuUXp0QlFVTTFRaXc0UWtGQlJTeE5RVUZOVml4TlFVRk5aQ3hQUVVGT0xFTkJRV04zUWl4TlFVRjBRaXhGUVVFNFFrUXNTVUZCT1VJc1EwRkJiVU1zUlVGQlJTeGxRVUZsVml4RlFVRnFRaXhGUVVGdVF6dEJRVU5JT3p0QlFVVkVMRmRCUVV0WkxGZEJRVXdzUjBGQmJVSXNTMEZCUzNwQ0xFOUJRVXdzUTBGQllUQkNMRlZCUVdoRE8wRkJRMEVzVjBGQlMwTXNUMEZCVEN4SFFVRmxMRXRCUVdZN1FVRkRRU3cwUWtGQlJVTXNUVUZCUml4RlFVRlZReXhIUVVGV0xFTkJRV01zWjBKQlFXUXNSVUZCWjBNc1dVRkJWVHRCUVVONFF6dEJRVU5CWml4alFVRk5aMElzWlVGQlRpeEhRVUYzUW1oQ0xFMUJRVTFpTEZGQlFVNHNRMEZCWlRoQ0xFZEJRV1lzUTBGQmJVSXNVMEZCYmtJc1MwRkJhVU1zVFVGQmFrTXNSMEZCTUVNc1EwRkJNVU1zUjBGQk9FTnFRaXhOUVVGTllpeFJRVUZPTEVOQlFXVXNRMEZCWml4RlFVRnJRaXRDTEhGQ1FVRnNRaXhIUVVFd1EwTXNUVUZCYUVnN1FVRkRRVzVDTEdOQlFVMUZMRlZCUVU0c1EwRkJhVUpsTEVkQlFXcENMRU5CUVhGQ0xGRkJRWEpDTEVWQlFTdENha0lzVFVGQlRXZENMR1ZCUVhKRE8wRkJRMEZvUWl4alFVRk5iMElzVlVGQlRpeEhRVUZ0UW5CQ0xFMUJRVTFuUWl4bFFVRjZRanRCUVVOQkxGbEJRVWRvUWl4TlFVRk5aQ3hQUVVGT0xFTkJRV04zUWl4TlFVRmtMRXRCUVhsQ0xFVkJRVFZDTEVWQlFTdENPMEZCUXpkQ1ZpeG5Ra0ZCVFhGQ0xFOUJRVTRzUjBGQlowSXNjMEpCUVVVc1RVRkJUWEpDTEUxQlFVMWtMRTlCUVU0c1EwRkJZM2RDTEUxQlFYUkNMRU5CUVdoQ08wRkJRMFFzVTBGR1JDeE5RVVZMTzBGQlEwaFdMR2RDUVVGTmMwSXNXVUZCVGp0QlFVTkVPenRCUVVWRWRFSXNZMEZCVFhWQ0xGTkJRVTRzUTBGQlowSXNXVUZCVlR0QlFVTjRRaXhqUVVGSlF5eFRRVUZUVml4UFFVRlBWeXhYUVVGd1FqdEJRVU5CZWtJc1owSkJRVTB3UWl4TFFVRk9MRU5CUVZrc1MwRkJXaXhGUVVGdFFrWXNUVUZCYmtJN1FVRkRRVHRCUVVOQkxHTkJRVWtzUTBGQlEzaENMRTFCUVUxaExFOUJRVmdzUlVGQmIwSTdRVUZEYkVKaUxHdENRVUZOTWtJc1lVRkJUaXhEUVVGeFFrZ3NWVUZCVlhoQ0xFMUJRVTAwUWl4UlFVRnFRaXhIUVVFMlFpeExRVUUzUWl4SFFVRnhReXhKUVVGNlJEdEJRVU5FTzBGQlEwWXNVMEZRUkR0QlFWRkJOVUlzWTBGQlRUWkNMRTlCUVU0c1EwRkJZemxDTEVkQlFVY3JRaXhMUVVGSUxFTkJRVk1zUjBGQlZDeEZRVUZqUXl4UFFVRmtMRWRCUVhkQ1F5eEpRVUY0UWl4RFFVRTJRaXhIUVVFM1FpeERRVUZrTzBGQlEwUXNUMEZ3UWtRN1FVRnhRa1E3TzBGQlJVUTdPenM3T3pzN08yMURRVXRsTzBGQlEySXNWVUZCU1VNc1RVRkJUU3hMUVVGTEwwTXNUMEZCVEN4RFFVRmhaMFFzVTBGQllpeEpRVUV3UWl4RlFVRXhRaXhIUVVFclFpeERRVUV2UWl4SFFVRnRReXhMUVVGTGFFUXNUMEZCVEN4RFFVRmhaMFFzVTBGQk1VUTdRVUZCUVN4VlFVTkpReXhOUVVGTkxFdEJRVXRxUkN4UFFVRk1MRU5CUVdGclJDeFRRVUZpTEVsQlFYbENMRVZCUVhwQ0xFZEJRVGhDUXl4VFFVRlRReXhsUVVGVUxFTkJRWGxDUXl4WlFVRjJSQ3hIUVVGelJTeExRVUZMY2tRc1QwRkJUQ3hEUVVGaGEwUXNVMEZFTjBZN1FVRkJRU3hWUVVWSlNTeE5RVUZOTEVOQlFVTlFMRWRCUVVRc1JVRkJUVVVzUjBGQlRpeERRVVpXTzBGQlFVRXNWVUZIU1Uwc1UwRkJVeXhGUVVoaU8wRkJTVUVzVjBGQlN5eEpRVUZKUXl4SlFVRkpMRU5CUVZJc1JVRkJWME1zVFVGQlRVZ3NTVUZCU1haRExFMUJRVEZDTEVWQlFXdERlVU1zU1VGQlNVTXNSMEZCU2l4SlFVRlhTQ3hKUVVGSlJTeERRVUZLTEVOQlFUZERMRVZCUVhGRVFTeEhRVUZ5UkN4RlFVRXdSRHRCUVVONFJDeFpRVUZKUlN4RlFVRktPMEZCUTBFc1dVRkJTU3hQUVVGUFNpeEpRVUZKUlN4RFFVRktMRU5CUVZBc1MwRkJhMElzVVVGQmRFSXNSVUZCWjBNN1FVRkRPVUpGTEdWQlFVdEtMRWxCUVVsRkxFTkJRVW9zUTBGQlREdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1MR05CUVVsSExGRkJRVkZNTEVsQlFVbEZMRU5CUVVvc1JVRkJUMW9zUzBGQlVDeERRVUZoTEVkQlFXSXNRMEZCV2p0QlFVRkJMR05CUTBsd1FpeFRRVUZUTERSQ1FVRk5iVU1zVFVGQlRTeERRVUZPTEVOQlFVNHNRMEZFWWpzN1FVRkhRVVFzWlVGQlMyeERMRTlCUVU5dlF5eE5RVUZRTEVkQlFXZENZaXhIUVVGeVFqdEJRVU5CTEdOQlFVbFpMRTFCUVUwc1EwRkJUaXhMUVVGWlFTeE5RVUZOTEVOQlFVNHNSVUZCVTBVc1YwRkJWQ3hQUVVFeVFpeFJRVUV6UXl4RlFVRnhSRHRCUVVOdVJFZ3NhMEpCUVUxc1F5eFBRVUZQTEVOQlFWQXNSVUZCVlZFc2NVSkJRVllzUjBGQmEwTkRMRTFCUVhoRE8wRkJRMFE3UVVGRFJqdEJRVU5FYzBJc1pVRkJUME1zUTBGQlVDeEpRVUZaUlN4RlFVRmFPMEZCUTBRN08wRkJSMFFzVjBGQlMwa3NUVUZCVEN4SFFVRmpVQ3hOUVVGa08wRkJRMEU3UVVGRFJEczdRVUZGUkRzN096czdPenM3TkVKQlMxRXhReXhGTEVWQlFVazdRVUZEVml4VlFVRkpReXhSUVVGUkxFbEJRVm83UVVGQlFTeFZRVU5KYVVRc2FVSkJRV2xDTEV0QlFVdEJMR05CUVV3c2EwSkJRVzFEYkVRc1JVRkVlRVE3UVVGRlFTeFZRVUZKTEV0QlFVdHRSQ3hKUVVGVUxFVkJRV1U3UVVGQlJUdEJRVUZUTzBGQlF6RkNMRlZCUVVrc1MwRkJTME1zVVVGQlZDeEZRVUZ0UWp0QlFVTnFRaXhoUVVGTFJDeEpRVUZNTEVkQlFWa3NTVUZCV2p0QlFVTkJMRGhDUVVGRmNFTXNUVUZCUml4RlFVRlZjME1zUjBGQlZpeERRVUZqU0N4alFVRmtMRVZCUTFWSkxFVkJSRllzUTBGRFlVb3NZMEZFWWl4RlFVTTJRaXhWUVVGVFN5eERRVUZVTEVWQlFWazdRVUZET1VJc1kwRkJTWFJFTEUxQlFVMVhMRmRCUVU0c1MwRkJjMElzUTBGQk1VSXNSVUZCTmtJN1FVRkRNMEpZTEd0Q1FVRk5WeXhYUVVGT0xFZEJRVzlDV0N4TlFVRk5aQ3hQUVVGT0xFTkJRV013UWl4VlFVRnNRenRCUVVOQldpeHJRa0ZCVFhWQ0xGTkJRVTRzUTBGQlowSXNXVUZCVnp0QlFVTjZRblpDTEc5Q1FVRk5NRUlzUzBGQlRpeERRVUZaTEV0QlFWb3NSVUZCYlVKYUxFOUJRVTlYTEZkQlFURkNPMEZCUTBRc1lVRkdSRHRCUVVkRUxGZEJURVFzVFVGTFR6dEJRVU5NZWtJc2EwSkJRVTFYTEZkQlFVNDdRVUZEUVZnc2EwSkJRVTB3UWl4TFFVRk9MRU5CUVZrc1MwRkJXaXhGUVVGdFFsb3NUMEZCVDFjc1YwRkJNVUk3UVVGRFJEdEJRVU5JTEZOQldGUTdRVUZaUkRzN1FVRkZSQ3hYUVVGTGRFTXNVVUZCVEN4RFFVRmphVVVzUjBGQlpDeERRVUZyUWl4eFFrRkJiRUlzUlVGRFkwTXNSVUZFWkN4RFFVTnBRaXh4UWtGRWFrSXNSVUZEZDBNc1ZVRkJVME1zUTBGQlZDeEZRVUZaUXl4RlFVRmFMRVZCUVdkQ08wRkJRM2hEZGtRc1kwRkJUWGRFTEdOQlFVNHNRMEZCY1VKNlJDeEZRVUZ5UWp0QlFVTm1MRTlCU0VRN08wRkJTMEVzVjBGQlMxb3NVVUZCVEN4RFFVRmphMFVzUlVGQlpDeERRVUZwUWl4eFFrRkJha0lzUlVGQmQwTXNWVUZCVlVNc1EwRkJWaXhGUVVGaFF5eEZRVUZpTEVWQlFXbENPMEZCUTNKRWRrUXNZMEZCVFhkRUxHTkJRVTRzUTBGQmNVSjZSQ3hGUVVGeVFqdEJRVU5JTEU5QlJrUTdPMEZCU1VFc1ZVRkJSeXhMUVVGTGMwSXNUMEZCVWl4RlFVRnBRanRCUVVObUxHRkJRVXRCTEU5QlFVd3NRMEZCWVdkRExFVkJRV0lzUTBGQlowSXNjVUpCUVdoQ0xFVkJRWFZETEZWQlFWVkRMRU5CUVZZc1JVRkJZVU1zUlVGQllpeEZRVUZwUWp0QlFVTndSSFpFTEdkQ1FVRk5kMFFzWTBGQlRpeERRVUZ4UW5wRUxFVkJRWEpDTzBGQlEwZ3NVMEZHUkR0QlFVZEVPMEZCUTBZN08wRkJSVVE3T3pzN096czdPMjFEUVV0bFFTeEZMRVZCUVVrN1FVRkRaQ3hWUVVGSlF5eFJRVUZSTEVsQlFWbzdRVUZCUVN4VlFVTkRhVVFzYVVKQlFXbENMRXRCUVV0QkxHTkJRVXdzYTBKQlFXMURiRVFzUlVGRWNrUTdPMEZCUjBGRExGbEJRVTExUWl4VFFVRk9MRU5CUVdkQ0xGbEJRVmM3UVVGRE0wSjJRaXhqUVVGTk1FSXNTMEZCVGl4RFFVRlpMRXRCUVZvN1FVRkRRU3haUVVGSk1VSXNUVUZCVFcxRUxGRkJRVllzUlVGQmIwSTdRVUZEYkVJc1kwRkJTU3hEUVVGRGJrUXNUVUZCVFd0RUxFbEJRVmdzUlVGQmFVSTdRVUZEWm14RUxHdENRVUZOTmtJc1QwRkJUaXhEUVVGak9VSXNSVUZCWkR0QlFVTkVPMEZCUTBZc1UwRktSQ3hOUVVsUExFbEJRVWxETEUxQlFVMXJSQ3hKUVVGV0xFVkJRV2RDTzBGQlEzSkNiRVFzWjBKQlFVMTVSQ3hsUVVGT0xFTkJRWE5DVWl4alFVRjBRanRCUVVORU8wRkJRMFlzVDBGVVF6dEJRVlZLT3p0QlFVVkVPenM3T3pzN096dHZRMEZMWjBKQkxHTXNSVUZCWjBJN1FVRkRPVUlzVjBGQlMwTXNTVUZCVEN4SFFVRlpMRXRCUVZvN1FVRkRRU3cwUWtGQlJYQkRMRTFCUVVZc1JVRkJWWE5ETEVkQlFWWXNRMEZCWTBnc1kwRkJaRHM3UVVGRlFUczdPenM3UVVGTFF5eFhRVUZMT1VRc1VVRkJUQ3hEUVVGamRVVXNUMEZCWkN4RFFVRnpRaXhwUWtGQmRFSTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPekJDUVUxTlF5eFZMRVZCUVZsdVF5eE5MRVZCUVZFN1FVRkRlRUlzVlVGQlNXMURMRlZCUVVvc1JVRkJaMEk3UVVGQlJTeGhRVUZMY0VNc1UwRkJURHRCUVVGdFFqczdRVUZGY2tNc1ZVRkJTU3hEUVVGRExFdEJRVXMwUWl4UlFVRldMRVZCUVc5Q08wRkJRMnhDTEZsQlFVa3NTMEZCUzNSRExFOUJRVlFzUlVGQmEwSTdRVUZEYUVJc1pVRkJTMk1zWVVGQlRDeERRVUZ0UWl4SlFVRnVRanRCUVVORU8wRkJRMFFzWlVGQlR5eExRVUZRTzBGQlEwUTdPMEZCUlVRc1ZVRkJTU3hEUVVGRFNDeE5RVUZNTEVWQlFXRTdRVUZCUlVFc2FVSkJRVk5XTEU5QlFVOVhMRmRCUVdoQ08wRkJRVGhDT3p0QlFVVTNReXhWUVVGSlJDeFZRVUZWTEV0QlFVdEpMRkZCUVc1Q0xFVkJRVFpDTzBGQlF6TkNMRmxCUVVsS0xGVkJRVlVzUzBGQlMyOURMRmRCUVc1Q0xFVkJRV2RETzBGQlF6bENMR05CUVVrc1EwRkJReXhMUVVGTEwwTXNUMEZCVml4RlFVRnRRanRCUVVOcVFpeHBRa0ZCUzJkRUxGVkJRVXc3UVVGRFJEdEJRVU5HTEZOQlNrUXNUVUZKVHp0QlFVTk1MR05CUVVrc1MwRkJTMmhFTEU5QlFWUXNSVUZCYTBJN1FVRkRhRUlzYVVKQlFVdGpMR0ZCUVV3c1EwRkJiVUlzUzBGQmJrSTdRVUZEUkR0QlFVTkdPMEZCUTBZc1QwRldSQ3hOUVZWUE8wRkJRMHdzV1VGQlNTeExRVUZMWkN4UFFVRlVMRVZCUVd0Q08wRkJRMmhDTEdWQlFVdGpMR0ZCUVV3c1EwRkJiVUlzU1VGQmJrSTdRVUZEUkR0QlFVTkdPMEZCUTBZN08wRkJSVVE3T3pzN096czdPenM3YVVOQlQyRTdRVUZEV0N4VlFVRkpNMElzVVVGQlVTeEpRVUZhTzBGQlFVRXNWVUZEU1RoRUxGVkJRVlVzUzBGQlN6VkZMRTlCUVV3c1EwRkJZVFJGTEU5QlJETkNPMEZCUVVFc1ZVRkZTVU1zVDBGQlQwUXNXVUZCV1N4TFFVRmFMRWRCUVc5Q0xGZEJRWEJDTEVkQlFXdERMR05CUmpkRE8wRkJRVUVzVlVGSFNVVXNZVUZCWVVZc1dVRkJXU3hMUVVGYUxFZEJRVzlDTEZGQlFYQkNMRWRCUVN0Q0xFdEJTR2hFTzBGQlFVRXNWVUZKU1RkRExFMUJRVTBzUlVGS1ZqczdRVUZOUVVFc1ZVRkJTVGhETEVsQlFVb3NTVUZCWlN4TFFVRkxOMFVzVDBGQlRDeERRVUZoTmtVc1NVRkJZaXhEUVVGbU8wRkJRMEU1UXl4VlFVRkpOa01zVDBGQlNpeEpRVUZsTEVOQlFXWTdRVUZEUVRkRExGVkJRVWtyUXl4VlFVRktMRWxCUVd0Q0xFMUJRV3hDTzBGQlEwRXNWMEZCUzI1RUxFOUJRVXdzUjBGQlpTeEpRVUZtTzBGQlEwRXNWMEZCU3pGQ0xGRkJRVXdzUTBGQll6aEZMRmRCUVdRc2QwSkJRU3REUkN4VlFVRXZReXhGUVVOak1VUXNVVUZFWkN4eFFrRkRlVU4zUkN4UFFVUjZReXhGUVVWak4wTXNSMEZHWkN4RFFVVnJRa0VzUjBGR2JFSTdRVUZIWVRzN096czdRVUZJWWl4UFFWRmplVU1zVDBGU1pDeDNRa0ZSTWtOSkxFOUJVak5ETzBGQlUwRXNWMEZCU3pORkxGRkJRVXdzUTBGQlkydEZMRVZCUVdRc1EwRkJhVUlzYVVaQlFXcENMRVZCUVc5SExGbEJRVmM3UVVGRE4wZHlSQ3hqUVVGTmRVSXNVMEZCVGp0QlFVTkVMRTlCUmtRN1FVRkhSRHM3UVVGRlJEczdPenM3T3pzN096czdhME5CVVdNeVF5eExMRVZCUVU4N1FVRkRia0lzVlVGQlNVb3NWVUZCVlN4TFFVRkxOVVVzVDBGQlRDeERRVUZoTkVVc1QwRkJNMEk3UVVGQlFTeFZRVU5KU3l4aFFVRmhUQ3haUVVGWkxFdEJSRGRDTzBGQlFVRXNWVUZGU1RkRExFMUJRVTBzUlVGR1ZqdEJRVUZCTEZWQlIwbHRSQ3hYUVVGWExFTkJRVU1zUzBGQlMzQkNMRTFCUVV3c1IwRkJZeXhMUVVGTFFTeE5RVUZNTEVOQlFWa3NRMEZCV2l4SlFVRnBRaXhMUVVGTFFTeE5RVUZNTEVOQlFWa3NRMEZCV2l4RFFVRXZRaXhIUVVGblJDeExRVUZMY1VJc1dVRkJkRVFzU1VGQmMwVXNTMEZCUzJwRUxGVkJTREZHTzBGQlFVRXNWVUZKU1RKRExFOUJRVTlKTEdGQlFXRXNWMEZCWWl4SFFVRXlRaXhqUVVwMFF6dEJRVUZCTEZWQlMwbElMR0ZCUVdGSExHRkJRV0VzVVVGQllpeEhRVUYzUWl4TFFVeDZRenRCUVVGQkxGVkJUVWxITEdOQlFXTktMRkZCUVZFc1MwRkJVaXhIUVVGblFpeFJRVTVzUXpzN1FVRlJRV3BFTEZWQlFVazRReXhKUVVGS0xFbEJRVmtzUTBGQldqczdRVUZGUVRsRExGVkJRVWtzVVVGQlNpeEpRVUZuUWl4TlFVRm9RanRCUVVOQkxGVkJRVWRwUkN4TFFVRklMRVZCUVZVN1FVRkRVbXBFTEZsQlFVa3NTMEZCU2l4SlFVRmhMRU5CUVdJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRFRXNXVUZCU1N4TFFVRktMRWxCUVdGdFJDeFJRVUZpTzBGQlEwUTdPMEZCUlVRc1YwRkJTM1pFTEU5QlFVd3NSMEZCWlN4TFFVRm1PMEZCUTBFc1YwRkJTekZDTEZGQlFVd3NRMEZCWXpoRkxGZEJRV1FzY1VKQlFUUkRTQ3hQUVVFMVF5eEZRVU5qZUVRc1VVRkVaQ3gzUWtGRE5FTm5SU3hYUVVRMVF5eEZRVVZqY2tRc1IwRkdaQ3hEUVVWclFrRXNSMEZHYkVJN1FVRkhZVHM3T3pzN1FVRklZaXhQUVZGamVVTXNUMEZTWkN3MFFrRlJLME5aTEZkQlVpOURPMEZCVTBRN08wRkJSVVE3T3pzN096czdPenM0UWtGTlZVTXNSU3hGUVVGSk8wRkJRMW9zVjBGQlMzQkNMRkZCUVV3c1IwRkJaMEoyUkN3MFFrRkJWelJGTEVWQlFWZ3NRMEZCWXl4TFFVRkxkRVlzVDBGQlRDeERRVUZoZFVZc1VVRkJNMElzUTBGQmFFSTdRVUZEUVN4VlFVRkpMRU5CUVVNc1MwRkJTM1JDTEZGQlFWWXNSVUZCYjBJN1FVRkRiRUlzV1VGQlNXOUNMRTFCUVUwc1QwRkJUMEVzUlVGQlVDeExRVUZqTEZWQlFYaENMRVZCUVc5RE8wRkJRVVZCTzBGQlFVODdRVUZET1VNN1FVRkRSQ3hWUVVGSmRrVXNVVUZCVVN4SlFVRmFPMEZCUVVFc1ZVRkRTVEJGTEdWQlFXVXNTMEZCUzNoRkxGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUpuUWl4eFFrRkJia0lzUjBGQk1rTjVSQ3hMUVVRNVJEdEJRVUZCTEZWQlJVbERMRTlCUVU4NVJDeFBRVUZQSzBRc1owSkJRVkFzUTBGQmQwSXNTMEZCU3pORkxGVkJRVXdzUTBGQlowSXNRMEZCYUVJc1EwRkJlRUlzUTBGR1dEdEJRVUZCTEZWQlIwazBSU3hSUVVGUlF5eFRRVUZUU0N4TFFVRkxMR05CUVV3c1EwRkJWQ3hGUVVFclFpeEZRVUV2UWl4RFFVaGFPMEZCUVVFc1ZVRkpTVWtzVVVGQlVVUXNVMEZCVTBnc1MwRkJTeXhsUVVGTUxFTkJRVlFzUlVGQlowTXNSVUZCYUVNc1EwRktXanM3UVVGTlFTeFZRVUZKTEV0QlFVdDJSQ3hQUVVGTUxFbEJRV2RDTEV0QlFVdEJMRTlCUVV3c1EwRkJZWEJDTEUxQlFXcERMRVZCUVhsRE8wRkJRM1pETEdGQlFVdHZSU3haUVVGTUxFZEJRVzlDTEV0QlFVdG9SQ3hQUVVGTUxFTkJRV0VzUTBGQllpeEZRVUZuUWtnc2NVSkJRV2hDTEVkQlFYZERReXhOUVVFMVJEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MR0ZCUVV0SExGbEJRVXc3UVVGRFJEczdRVUZGUkN4WFFVRkxia01zVVVGQlRDeERRVUZqT0VJc1IwRkJaQ3hEUVVGclFqdEJRVU5vUWl4eFFrRkJaMEo1UkN4bFFVRmxTU3hMUVVGbUxFZEJRWFZDUlN4TFFVRjJRenRCUVVSblFpeFBRVUZzUWpzN1FVRkpRU3hWUVVGSlF5eHhRa0ZCY1VJc1MwRkJTemxHTEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ0swSXNjVUpCUVdwQ0xFZEJRWGxEUXl4TlFVRjZReXhKUVVGdFJDeExRVUZMU0N4bFFVRnFSanRCUVVOQkxGVkJRVWtzUzBGQlN6ZENMRkZCUVV3c1EwRkJZemhDTEVkQlFXUXNRMEZCYTBJc1UwRkJiRUlzUzBGQlowTXNUVUZCY0VNc1JVRkJORU03UVVGRE1VTm5SU3cyUWtGQmNVSXNRMEZCY2tJN1FVRkRSRHRCUVVORUxGZEJRVXRxUlN4bFFVRk1MRWRCUVhWQ2FVVXNhMEpCUVhaQ08wRkJRMEVzVjBGQlN5OUZMRlZCUVV3c1EwRkJaMEpsTEVkQlFXaENMRU5CUVc5Q08wRkJRMnhDUlN4blFrRkJVVGhFTzBGQlJGVXNUMEZCY0VJN1FVRkhRU3hYUVVGTE4wUXNWVUZCVEN4SFFVRnJRalpFTEd0Q1FVRnNRanM3UVVGRlFTeFZRVUZKTEVOQlFVTXNTMEZCUzNCRkxFOUJRVllzUlVGQmJVSTdRVUZEYWtJc1dVRkJTU3hMUVVGTE1VSXNVVUZCVEN4RFFVRmpLMFlzVVVGQlpDeERRVUYxUWl4alFVRjJRaXhEUVVGS0xFVkJRVFJETzBGQlF6RkRMR05CUVVsa0xGZEJRVmNzUTBGQlF5eExRVUZMY0VJc1RVRkJUQ3hIUVVGakxFdEJRVXRCTEUxQlFVd3NRMEZCV1N4RFFVRmFMRWxCUVdsQ0xFdEJRVXM1UXl4VlFVRk1MRU5CUVdkQ05FTXNUVUZCYUVJc1IwRkJlVUppTEVkQlFYaEVMRWRCUVRoRUxFdEJRVXR2UXl4WlFVRndSU3hKUVVGdlJpeExRVUZMYWtRc1ZVRkJlRWM3UVVGRFFTeGxRVUZMYWtNc1VVRkJUQ3hEUVVGak9FSXNSMEZCWkN4RFFVRnJRaXhMUVVGc1FpeEZRVUY1UW0xRUxGRkJRWHBDTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hYUVVGTFpTeGxRVUZNTEVOQlFYRkNSaXhyUWtGQmNrSXNSVUZCZVVNc1dVRkJWenRCUVVOc1JDeFpRVUZKVml4TlFVRk5MRTlCUVU5QkxFVkJRVkFzUzBGQll5eFZRVUY0UWl4RlFVRnZRenRCUVVGRlFUdEJRVUZQTzBGQlF6bERMRTlCUmtRN1FVRkhSRHM3UVVGRlJEczdPenM3T3pzN08yOURRVTFuUW01RUxGVXNSVUZCV1cxRUxFVXNSVUZCU1R0QlFVTTVRaXhWUVVGSkxFTkJRVU1zUzBGQlMzQkNMRkZCUVZZc1JVRkJiMEk3UVVGRGJFSXNXVUZCU1c5Q0xFMUJRVTBzVDBGQlQwRXNSVUZCVUN4TFFVRmpMRlZCUVhoQ0xFVkJRVzlETzBGQlFVVkJPMEZCUVU4c1UwRkJOME1zVFVGRFN6dEJRVUZGTEdsQ1FVRlBMRXRCUVZBN1FVRkJaVHRCUVVOMlFqdEJRVU5FTEZWQlFVbGhMRTlCUVU5RExFOUJRVThzUzBGQlMyNUhMRTlCUVV3c1EwRkJZVzlITEZOQlFYQkNMRU5CUVZnN1FVRkJRU3hWUVVOSlF5eFBRVUZQUml4UFFVRlBMRXRCUVV0dVJ5eFBRVUZNTEVOQlFXRnpSeXhaUVVGd1FpeERRVVJZTzBGQlFVRXNWVUZGU1RWRUxGZEJRVmNzUzBGQlMyOUNMRTFCUVV3c1IwRkJZeXhMUVVGTFFTeE5RVUZNTEVOQlFWa3NRMEZCV2l4RFFVRmtMRWRCUVN0Q0xFdEJRVXN6UWl4UFFVRk1MRU5CUVdGNVFpeE5RVUZpTEVkQlFYTkNZaXhIUVVad1JUdEJRVUZCTEZWQlIwa3lRaXhqUVVGakxFdEJRVXRhTEUxQlFVd3NSMEZCWXl4TFFVRkxRU3hOUVVGTUxFTkJRVmtzUTBGQldpeERRVUZrTEVkQlFTdENjRUlzVjBGQlZ5eExRVUZMZVVNc1dVRklha1U3TzBGQlNVazdRVUZEUVR0QlFVTkJiMElzYTBKQlFWa3pSU3hQUVVGUE5FVXNWMEZPZGtJN08wRkJVVUVzVlVGQlNTeExRVUZMZUVjc1QwRkJUQ3hEUVVGaE5FVXNUMEZCWWl4TFFVRjVRaXhMUVVFM1FpeEZRVUZ2UXp0QlFVTnNRMnhETEc5Q1FVRlpkMFFzU1VGQldqdEJRVU5CZUVJc2RVSkJRV2RDZUVNc1lVRkJZV2RGTEVsQlFUZENPMEZCUTBRc1QwRklSQ3hOUVVkUExFbEJRVWtzUzBGQlMyeEhMRTlCUVV3c1EwRkJZVFJGTEU5QlFXSXNTMEZCZVVJc1VVRkJOMElzUlVGQmRVTTdRVUZETlVOc1F5eHZRa0ZCWVRaRUxHRkJRV0Z5UlN4aFFVRmhiVVVzU1VGQk1VSXNRMEZCWWp0QlFVTkJNMElzZFVKQlFXZENOa0lzV1VGQldVWXNTVUZCTlVJN1FVRkRSQ3hQUVVoTkxFMUJSMEU3UVVGRFREdEJRVU5FT3p0QlFVVkVMRmRCUVVzelJDeFJRVUZNTEVkQlFXZENRU3hSUVVGb1FqdEJRVU5CTEZkQlFVdG5ReXhYUVVGTUxFZEJRVzFDUVN4WFFVRnVRanM3UVVGRlFTeFZRVUZKVnl4TlFVRk5MRTlCUVU5QkxFVkJRVkFzUzBGQll5eFZRVUY0UWl4RlFVRnZRenRCUVVGRlFUdEJRVUZQTzBGQlF6bERPenRCUVVWRU96czdPenM3T3pzN0swSkJUVmM3UVVGRFZDeFhRVUZMTlVNc1lVRkJUQ3hEUVVGdFFpeEpRVUZ1UWpzN1FVRkZRU3hYUVVGTGVFTXNVVUZCVEN4RFFVRmpPRVVzVjBGQlpDeERRVUUyUWl4TFFVRkxMMFVzVDBGQlRDeERRVUZoYzBJc1YwRkJNVU1zTmtKQlEyTlRMRWRCUkdRc1EwRkRhMEk3UVVGRFNFVXNaMEpCUVZFc1JVRkVURHRCUVVWSVl5eGhRVUZMTEVWQlJrWTdRVUZIU0RCRUxHZENRVUZSTEVWQlNFdzdRVUZKU0N4eFFrRkJZVHRCUVVwV0xFOUJSR3hDTEVWQlQyTjJReXhIUVZCa0xFTkJUMnRDTEhGQ1FWQnNRaXhGUVZGalFTeEhRVkprTEVOQlVXdENMSEZDUVZKc1FqdEJRVk5CTEZWQlFVa3NTMEZCU3k5Q0xFOUJRVXdzU1VGQlowSXNTMEZCUzBFc1QwRkJUQ3hEUVVGaGNFSXNUVUZCYWtNc1JVRkJlVU03UVVGRGRrTXNZVUZCUzI5Q0xFOUJRVXdzUTBGQllTdENMRWRCUVdJc1EwRkJhVUlzYTBKQlFXcENPMEZCUTBRN1FVRkRSQ3cwUWtGQlJYUkRMRTFCUVVZc1JVRkJWWE5ETEVkQlFWWXNRMEZCWXl4TFFVRkxTQ3hqUVVGdVFqczdRVUZGUVN4VlFVRkpMRXRCUVVzNVF5eFZRVUZVTEVWQlFYRkNPMEZCUTI1Q0xHRkJRVXRvUWl4UlFVRk1MRU5CUVdONVJ5eE5RVUZrTzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1lVRkJTekZHTEZWQlFVd3NRMEZCWjBJclJDeFhRVUZvUWl4RFFVRTBRaXhMUVVGTEwwVXNUMEZCVEN4RFFVRmhjVUlzWTBGQmVrTXNSVUZEWjBKVkxFZEJSR2hDTEVOQlEyOUNPMEZCUTBoRkxHdENRVUZSTzBGQlJFd3NVMEZFY0VJN1FVRkpSRHRCUVVOR096czdPMFZCYUZwclFqQkZMR3RDT3p0QlFXMWFja0kzUnl4UFFVRlBUU3hSUVVGUUxFZEJRV3RDTzBGQlEyaENPenM3T3pzN1FVRk5RV1VzWVVGQlZ5eHRRMEZRU3p0QlFWRm9RanM3T3pzN08wRkJUVUY1UkN4WFFVRlRMRXRCWkU4N1FVRmxhRUk3T3pzN096dEJRVTFCY0VRc1ZVRkJVU3hGUVhKQ1VUdEJRWE5DYUVJN096czdPenRCUVUxQmQwSXNZVUZCVnl4RlFUVkNTenRCUVRaQ2FFSTdPenM3T3p0QlFVMUJSU3hoUVVGWExFVkJia05MTzBGQmIwTm9RanM3T3pzN08wRkJUVUZyUkN4aFFVRlhMRU5CTVVOTE8wRkJNa05vUWpzN096czdPMEZCVFVGRkxHZENRVUZqTEVOQmFrUkZPMEZCYTBSb1FqczdPenM3TzBGQlRVRm1MRmxCUVZVc1VVRjRSRTA3UVVGNVJHaENPenM3T3pzN1FVRk5RV3BGTEdWQlFXRXNVVUV2UkVjN1FVRm5SV2hDT3pzN096czdRVUZOUVVRc2EwSkJRV2RDTEd0Q1FYUkZRVHRCUVhWRmFFSTdPenM3T3p0QlFVMUJTeXhqUVVGWkxFTkJRVU03UVVFM1JVY3NRMEZCYkVJN08wRkJaMFpCT3pzN08wRkJTVUVzVTBGQlUzbEZMRTFCUVZRc1EwRkJaMEpUTEVWQlFXaENMRVZCUVc5Q08wRkJRMnhDTEZOQlFVOW1MRk5CUVZOcVJTeFBRVUZQSzBRc1owSkJRVkFzUTBGQmQwSjRReXhUUVVGVE1FUXNTVUZCYWtNc1JVRkJkVU1zU1VGQmRrTXNSVUZCTmtORExGRkJRWFJFTEVWQlFXZEZMRVZCUVdoRkxFbEJRWE5GUml4RlFVRTNSVHRCUVVORU96dFJRVVZQT1Vjc1RTeEhRVUZCUVN4Tklpd2labWxzWlNJNkltWnZkVzVrWVhScGIyNHVjM1JwWTJ0NUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwYlhCdmNuUWdKQ0JtY205dElDZHFjWFZsY25rbk8xeHVhVzF3YjNKMElIc2dSMlYwV1c5RWFXZHBkSE1nZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzVqYjNKbEp6dGNibWx0Y0c5eWRDQjdJRTFsWkdsaFVYVmxjbmtnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzV0WldScFlWRjFaWEo1Snp0Y2JtbHRjRzl5ZENCN0lGQnNkV2RwYmlCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNXdiSFZuYVc0bk8xeHVhVzF3YjNKMElIc2dWSEpwWjJkbGNuTWdmU0JtY205dElDY3VMMlp2ZFc1a1lYUnBiMjR1ZFhScGJDNTBjbWxuWjJWeWN5YzdYRzVjYmk4cUtseHVJQ29nVTNScFkydDVJRzF2WkhWc1pTNWNiaUFxSUVCdGIyUjFiR1VnWm05MWJtUmhkR2x2Ymk1emRHbGphM2xjYmlBcUlFQnlaWEYxYVhKbGN5Qm1iM1Z1WkdGMGFXOXVMblYwYVd3dWRISnBaMmRsY25OY2JpQXFJRUJ5WlhGMWFYSmxjeUJtYjNWdVpHRjBhVzl1TG5WMGFXd3ViV1ZrYVdGUmRXVnllVnh1SUNvdlhHNWNibU5zWVhOeklGTjBhV05yZVNCbGVIUmxibVJ6SUZCc2RXZHBiaUI3WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdWeklHRWdibVYzSUdsdWMzUmhibU5sSUc5bUlHRWdjM1JwWTJ0NUlIUm9hVzVuTGx4dUlDQWdLaUJBWTJ4aGMzTmNiaUFnSUNvZ1FHNWhiV1VnVTNScFkydDVYRzRnSUNBcUlFQndZWEpoYlNCN2FsRjFaWEo1ZlNCbGJHVnRaVzUwSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCdFlXdGxJSE4wYVdOcmVTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nTFNCdmNIUnBiMjV6SUc5aWFtVmpkQ0J3WVhOelpXUWdkMmhsYmlCamNtVmhkR2x1WnlCMGFHVWdaV3hsYldWdWRDQndjbTluY21GdGJXRjBhV05oYkd4NUxseHVJQ0FnS2k5Y2JpQWdYM05sZEhWd0tHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBJRDBnWld4bGJXVnVkRHRjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNBa0xtVjRkR1Z1WkNoN2ZTd2dVM1JwWTJ0NUxtUmxabUYxYkhSekxDQjBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9LU3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdkR2hwY3k1amJHRnpjMDVoYldVZ1BTQW5VM1JwWTJ0NUp6c2dMeThnYVdVNUlHSmhZMnNnWTI5dGNHRjBYRzVjYmlBZ0lDQXZMeUJVY21sbloyVnljeUJwYm1sMElHbHpJR2xrWlcxd2IzUmxiblFzSUdwMWMzUWdibVZsWkNCMGJ5QnRZV3RsSUhOMWNtVWdhWFFnYVhNZ2FXNXBkR2xoYkdsNlpXUmNiaUFnSUNCVWNtbG5aMlZ5Y3k1cGJtbDBLQ1FwTzF4dVhHNGdJQ0FnZEdocGN5NWZhVzVwZENncE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YVhScFlXeHBlbVZ6SUhSb1pTQnpkR2xqYTNrZ1pXeGxiV1Z1ZENCaWVTQmhaR1JwYm1jZ1kyeGhjM05sY3l3Z1oyVjBkR2x1Wnk5elpYUjBhVzVuSUdScGJXVnVjMmx2Ym5Nc0lHSnlaV0ZyY0c5cGJuUnpJR0Z1WkNCaGRIUnlhV0oxZEdWelhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJsdWFYUW9LU0I3WEc0Z0lDQWdUV1ZrYVdGUmRXVnllUzVmYVc1cGRDZ3BPMXh1WEc0Z0lDQWdkbUZ5SUNSd1lYSmxiblFnUFNCMGFHbHpMaVJsYkdWdFpXNTBMbkJoY21WdWRDZ25XMlJoZEdFdGMzUnBZMnQ1TFdOdmJuUmhhVzVsY2wwbktTeGNiaUFnSUNBZ0lDQWdhV1FnUFNCMGFHbHpMaVJsYkdWdFpXNTBXekJkTG1sa0lIeDhJRWRsZEZsdlJHbG5hWFJ6S0RZc0lDZHpkR2xqYTNrbktTeGNiaUFnSUNBZ0lDQWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYVdZb0pIQmhjbVZ1ZEM1c1pXNW5kR2dwZTF4dUlDQWdJQ0FnZEdocGN5NGtZMjl1ZEdGcGJtVnlJRDBnSkhCaGNtVnVkRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzWVhOWGNtRndjR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWQzSmhjQ2gwYUdsekxtOXdkR2x2Ym5NdVkyOXVkR0ZwYm1WeUtUdGNiaUFnSUNBZ0lIUm9hWE11SkdOdmJuUmhhVzVsY2lBOUlIUm9hWE11SkdWc1pXMWxiblF1Y0dGeVpXNTBLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11SkdOdmJuUmhhVzVsY2k1aFpHUkRiR0Z6Y3loMGFHbHpMbTl3ZEdsdmJuTXVZMjl1ZEdGcGJtVnlRMnhoYzNNcE8xeHVYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzVoWkdSRGJHRnpjeWgwYUdsekxtOXdkR2x2Ym5NdWMzUnBZMnQ1UTJ4aGMzTXBMbUYwZEhJb2V5QW5aR0YwWVMxeVpYTnBlbVVuT2lCcFpDd2dKMlJoZEdFdGJYVjBZWFJsSnpvZ2FXUWdmU2s3WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWhibU5vYjNJZ0lUMDlJQ2NuS1NCN1hHNGdJQ0FnSUNBZ0lDUW9KeU1uSUNzZ1gzUm9hWE11YjNCMGFXOXVjeTVoYm1Ob2IzSXBMbUYwZEhJb2V5QW5aR0YwWVMxdGRYUmhkR1VuT2lCcFpDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5OamNtOXNiRU52ZFc1MElEMGdkR2hwY3k1dmNIUnBiMjV6TG1Ob1pXTnJSWFpsY25rN1hHNGdJQ0FnZEdocGN5NXBjMU4wZFdOcklEMGdabUZzYzJVN1hHNGdJQ0FnSkNoM2FXNWtiM2NwTG05dVpTZ25iRzloWkM1NlppNXpkR2xqYTNrbkxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdMeTlYWlNCallXeGpkV3hoZEdVZ2RHaGxJR052Ym5SaGFXNWxjaUJvWldsbmFIUWdkRzhnYUdGMlpTQmpiM0p5WldOMElIWmhiSFZsY3lCbWIzSWdZVzVqYUc5eUlIQnZhVzUwY3lCdlptWnpaWFFnWTJGc1kzVnNZWFJwYjI0dVhHNGdJQ0FnSUNCZmRHaHBjeTVqYjI1MFlXbHVaWEpJWldsbmFIUWdQU0JmZEdocGN5NGtaV3hsYldWdWRDNWpjM01vWENKa2FYTndiR0Y1WENJcElEMDlJRndpYm05dVpWd2lJRDhnTUNBNklGOTBhR2x6TGlSbGJHVnRaVzUwV3pCZExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG1obGFXZG9kRHRjYmlBZ0lDQWdJRjkwYUdsekxpUmpiMjUwWVdsdVpYSXVZM056S0Nkb1pXbG5hSFFuTENCZmRHaHBjeTVqYjI1MFlXbHVaWEpJWldsbmFIUXBPMXh1SUNBZ0lDQWdYM1JvYVhNdVpXeGxiVWhsYVdkb2RDQTlJRjkwYUdsekxtTnZiblJoYVc1bGNraGxhV2RvZER0Y2JpQWdJQ0FnSUdsbUtGOTBhR2x6TG05d2RHbHZibk11WVc1amFHOXlJQ0U5UFNBbkp5bDdYRzRnSUNBZ0lDQWdJRjkwYUdsekxpUmhibU5vYjNJZ1BTQWtLQ2NqSnlBcklGOTBhR2x6TG05d2RHbHZibk11WVc1amFHOXlLVHRjYmlBZ0lDQWdJSDFsYkhObGUxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNHRnljMlZRYjJsdWRITW9LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWDNSb2FYTXVYM05sZEZOcGVtVnpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpZM0p2Ykd3Z1BTQjNhVzVrYjNjdWNHRm5aVmxQWm1aelpYUTdYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOWpZV3hqS0daaGJITmxMQ0J6WTNKdmJHd3BPMXh1SUNBZ0lDQWdJQ0F2TDFWdWMzUnBZMnNnZEdobElHVnNaVzFsYm5RZ2QybHNiQ0JsYm5OMWNtVWdkR2hoZENCd2NtOXdaWElnWTJ4aGMzTmxjeUJoY21VZ2MyVjBMbHh1SUNBZ0lDQWdJQ0JwWmlBb0lWOTBhR2x6TG1selUzUjFZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNtVnRiM1psVTNScFkydDVLQ2h6WTNKdmJHd2dQajBnWDNSb2FYTXVkRzl3VUc5cGJuUXBJRDhnWm1Gc2MyVWdPaUIwY25WbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0JmZEdocGN5NWZaWFpsYm5SektHbGtMbk53YkdsMEtDY3RKeWt1Y21WMlpYSnpaU2dwTG1wdmFXNG9KeTBuS1NrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTV1lnZFhOcGJtY2diWFZzZEdsd2JHVWdaV3hsYldWdWRITWdZWE1nWVc1amFHOXljeXdnWTJGc1kzVnNZWFJsY3lCMGFHVWdkRzl3SUdGdVpDQmliM1IwYjIwZ2NHbDRaV3dnZG1Gc2RXVnpJSFJvWlNCemRHbGphM2tnZEdocGJtY2djMmh2ZFd4a0lITjBhV05ySUdGdVpDQjFibk4wYVdOcklHOXVMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOXdZWEp6WlZCdmFXNTBjeWdwSUh0Y2JpQWdJQ0IyWVhJZ2RHOXdJRDBnZEdocGN5NXZjSFJwYjI1ekxuUnZjRUZ1WTJodmNpQTlQU0JjSWx3aUlEOGdNU0E2SUhSb2FYTXViM0IwYVc5dWN5NTBiM0JCYm1Ob2IzSXNYRzRnSUNBZ0lDQWdJR0owYlNBOUlIUm9hWE11YjNCMGFXOXVjeTVpZEcxQmJtTm9iM0k5UFNCY0lsd2lJRDhnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbk5qY205c2JFaGxhV2RvZENBNklIUm9hWE11YjNCMGFXOXVjeTVpZEcxQmJtTm9iM0lzWEc0Z0lDQWdJQ0FnSUhCMGN5QTlJRnQwYjNBc0lHSjBiVjBzWEc0Z0lDQWdJQ0FnSUdKeVpXRnJjeUE5SUh0OU8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzWlc0Z1BTQndkSE11YkdWdVozUm9PeUJwSUR3Z2JHVnVJQ1ltSUhCMGMxdHBYVHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnY0hRN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIQjBjMXRwWFNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnY0hRZ1BTQndkSE5iYVYwN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMllYSWdjR3hoWTJVZ1BTQndkSE5iYVYwdWMzQnNhWFFvSnpvbktTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdVkyaHZjaUE5SUNRb1lDTWtlM0JzWVdObFd6QmRmV0FwTzF4dVhHNGdJQ0FnSUNBZ0lIQjBJRDBnWVc1amFHOXlMbTltWm5ObGRDZ3BMblJ2Y0R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJzWVdObFd6RmRJQ1ltSUhCc1lXTmxXekZkTG5SdlRHOTNaWEpEWVhObEtDa2dQVDA5SUNkaWIzUjBiMjBuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjSFFnS3owZ1lXNWphRzl5V3pCZExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG1obGFXZG9kRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWW5KbFlXdHpXMmxkSUQwZ2NIUTdYRzRnSUNBZ2ZWeHVYRzVjYmlBZ0lDQjBhR2x6TG5CdmFXNTBjeUE5SUdKeVpXRnJjenRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrY3lCbGRtVnVkQ0JvWVc1a2JHVnljeUJtYjNJZ2RHaGxJSE5qY205c2JHbHVaeUJsYkdWdFpXNTBMbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYVdRZ0xTQndjMlYxWkc4dGNtRnVaRzl0SUdsa0lHWnZjaUIxYm1seGRXVWdjMk55YjJ4c0lHVjJaVzUwSUd4cGMzUmxibVZ5TGx4dUlDQWdLaTljYmlBZ1gyVjJaVzUwY3locFpDa2dlMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lITmpjbTlzYkV4cGMzUmxibVZ5SUQwZ2RHaHBjeTV6WTNKdmJHeE1hWE4wWlc1bGNpQTlJR0J6WTNKdmJHd3VlbVl1Skh0cFpIMWdPMXh1SUNBZ0lHbG1JQ2gwYUdsekxtbHpUMjRwSUhzZ2NtVjBkWEp1T3lCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11WTJGdVUzUnBZMnNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhWE5QYmlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FrS0hkcGJtUnZkeWt1YjJabUtITmpjbTlzYkV4cGMzUmxibVZ5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG05dUtITmpjbTlzYkV4cGMzUmxibVZ5TENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTV6WTNKdmJHeERiM1Z1ZENBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5OamNtOXNiRU52ZFc1MElEMGdYM1JvYVhNdWIzQjBhVzl1Y3k1amFHVmphMFYyWlhKNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOXpaWFJUYVhwbGN5aG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5allXeGpLR1poYkhObExDQjNhVzVrYjNjdWNHRm5aVmxQWm1aelpYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuTmpjbTlzYkVOdmRXNTBMUzA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJOaGJHTW9abUZzYzJVc0lIZHBibVJ2ZHk1d1lXZGxXVTltWm5ObGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1dlptWW9KM0psYzJsNlpXMWxMbnBtTG5SeWFXZG5aWEluS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWIyNG9KM0psYzJsNlpXMWxMbnBtTG5SeWFXZG5aWEluTENCbWRXNWpkR2x2YmlobExDQmxiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlpYWmxiblJ6U0dGdVpHeGxjaWhwWkNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbTl1S0NkdGRYUmhkR1Z0WlM1NlppNTBjbWxuWjJWeUp5d2dablZ1WTNScGIyNGdLR1VzSUdWc0tTQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOWxkbVZ1ZEhOSVlXNWtiR1Z5S0dsa0tUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHbG1LSFJvYVhNdUpHRnVZMmh2Y2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrWVc1amFHOXlMbTl1S0NkdGRYUmhkR1Z0WlM1NlppNTBjbWxuWjJWeUp5d2dablZ1WTNScGIyNGdLR1VzSUdWc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMlYyWlc1MGMwaGhibVJzWlhJb2FXUXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVoaGJtUnNaWElnWm05eUlHVjJaVzUwY3k1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHbGtJQzBnY0hObGRXUnZMWEpoYm1SdmJTQnBaQ0JtYjNJZ2RXNXBjWFZsSUhOamNtOXNiQ0JsZG1WdWRDQnNhWE4wWlc1bGNpNWNiaUFnSUNvdlhHNGdJRjlsZG1WdWRITklZVzVrYkdWeUtHbGtLU0I3WEc0Z0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjeXhjYmlBZ0lDQWdJQ0FnYzJOeWIyeHNUR2x6ZEdWdVpYSWdQU0IwYUdsekxuTmpjbTlzYkV4cGMzUmxibVZ5SUQwZ1lITmpjbTlzYkM1NlppNGtlMmxrZldBN1hHNWNiaUFnSUNBZ0lDQmZkR2hwY3k1ZmMyVjBVMmw2WlhNb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdYM1JvYVhNdVgyTmhiR01vWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTVqWVc1VGRHbGpheWtnZTF4dUlDQWdJQ0FnSUNBZ2FXWWdLQ0ZmZEdocGN5NXBjMDl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWxkbVZ1ZEhNb2FXUXBPMXh1SUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1gzUm9hWE11YVhOUGJpa2dlMXh1SUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM0JoZFhObFRHbHpkR1Z1WlhKektITmpjbTlzYkV4cGMzUmxibVZ5S1R0Y2JpQWdJQ0FnSUNCOVhHNGdJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsYlc5MlpYTWdaWFpsYm5RZ2FHRnVaR3hsY25NZ1ptOXlJSE5qY205c2JDQmhibVFnWTJoaGJtZGxJR1YyWlc1MGN5QnZiaUJoYm1Ob2IzSXVYRzRnSUNBcUlFQm1hWEpsY3lCVGRHbGphM2tqY0dGMWMyVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhOamNtOXNiRXhwYzNSbGJtVnlJQzBnZFc1cGNYVmxMQ0J1WVcxbGMzQmhZMlZrSUhOamNtOXNiQ0JzYVhOMFpXNWxjaUJoZEhSaFkyaGxaQ0IwYnlCZ2QybHVaRzkzWUZ4dUlDQWdLaTljYmlBZ1gzQmhkWE5sVEdsemRHVnVaWEp6S0hOamNtOXNiRXhwYzNSbGJtVnlLU0I3WEc0Z0lDQWdkR2hwY3k1cGMwOXVJRDBnWm1Gc2MyVTdYRzRnSUNBZ0pDaDNhVzVrYjNjcExtOW1aaWh6WTNKdmJHeE1hWE4wWlc1bGNpazdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJHYVhKbGN5QjNhR1Z1SUhSb1pTQndiSFZuYVc0Z2FYTWdjR0YxYzJWa0lHUjFaU0IwYnlCeVpYTnBlbVVnWlhabGJuUWdjMmh5YVc1cmFXNW5JSFJvWlNCMmFXVjNMbHh1SUNBZ0lDQXFJRUJsZG1WdWRDQlRkR2xqYTNramNHRjFjMlZjYmlBZ0lDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG5SeWFXZG5aWElvSjNCaGRYTmxMbnBtTG5OMGFXTnJlU2NwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTmhiR3hsWkNCdmJpQmxkbVZ5ZVNCZ2MyTnliMnhzWUNCbGRtVnVkQ0JoYm1RZ2IyNGdZRjlwYm1sMFlGeHVJQ0FnS2lCbWFYSmxjeUJtZFc1amRHbHZibk1nWW1GelpXUWdiMjRnWW05dmJHVmhibk1nWVc1a0lHTmhZMmhsWkNCMllXeDFaWE5jYmlBZ0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmphR1ZqYTFOcGVtVnpJQzBnZEhKMVpTQnBaaUJ3YkhWbmFXNGdjMmh2ZFd4a0lISmxZMkZzWTNWc1lYUmxJSE5wZW1WeklHRnVaQ0JpY21WaGEzQnZhVzUwY3k1Y2JpQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSE5qY205c2JDQXRJR04xY25KbGJuUWdjMk55YjJ4c0lIQnZjMmwwYVc5dUlIQmhjM05sWkNCbWNtOXRJSE5qY205c2JDQmxkbVZ1ZENCallpQm1kVzVqZEdsdmJpNGdTV1lnYm05MElIQmhjM05sWkN3Z1pHVm1ZWFZzZEhNZ2RHOGdZSGRwYm1SdmR5NXdZV2RsV1U5bVpuTmxkR0F1WEc0Z0lDQXFMMXh1SUNCZlkyRnNZeWhqYUdWamExTnBlbVZ6TENCelkzSnZiR3dwSUh0Y2JpQWdJQ0JwWmlBb1kyaGxZMnRUYVhwbGN5a2dleUIwYUdsekxsOXpaWFJUYVhwbGN5Z3BPeUI5WEc1Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WTJGdVUzUnBZMnNwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1selUzUjFZMnNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdGIzWmxVM1JwWTJ0NUtIUnlkV1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hjMk55YjJ4c0tTQjdJSE5qY205c2JDQTlJSGRwYm1SdmR5NXdZV2RsV1U5bVpuTmxkRHNnZlZ4dVhHNGdJQ0FnYVdZZ0tITmpjbTlzYkNBK1BTQjBhR2x6TG5SdmNGQnZhVzUwS1NCN1hHNGdJQ0FnSUNCcFppQW9jMk55YjJ4c0lEdzlJSFJvYVhNdVltOTBkRzl0VUc5cGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1selUzUjFZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5elpYUlRkR2xqYTNrb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhWE5UZEhWamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0psYlc5MlpWTjBhV05yZVNobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVhWE5UZEhWamF5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaVzF2ZG1WVGRHbGphM2tvZEhKMVpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU5oZFhObGN5QjBhR1VnSkdWc1pXMWxiblFnZEc4Z1ltVmpiMjFsSUhOMGRXTnJMbHh1SUNBZ0tpQkJaR1J6SUdCd2IzTnBkR2x2YmpvZ1ptbDRaV1E3WUN3Z1lXNWtJR2hsYkhCbGNpQmpiR0Z6YzJWekxseHVJQ0FnS2lCQVptbHlaWE1nVTNScFkydDVJM04wZFdOcmRHOWNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFMMXh1SUNCZmMyVjBVM1JwWTJ0NUtDa2dlMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lITjBhV05yVkc4Z1BTQjBhR2x6TG05d2RHbHZibk11YzNScFkydFVieXhjYmlBZ0lDQWdJQ0FnYlhKbmJpQTlJSE4wYVdOclZHOGdQVDA5SUNkMGIzQW5JRDhnSjIxaGNtZHBibFJ2Y0NjZ09pQW5iV0Z5WjJsdVFtOTBkRzl0Snl4Y2JpQWdJQ0FnSUNBZ2JtOTBVM1IxWTJ0VWJ5QTlJSE4wYVdOclZHOGdQVDA5SUNkMGIzQW5JRDhnSjJKdmRIUnZiU2NnT2lBbmRHOXdKeXhjYmlBZ0lDQWdJQ0FnWTNOeklEMGdlMzA3WEc1Y2JpQWdJQ0JqYzNOYmJYSm5ibDBnUFNCZ0pIdDBhR2x6TG05d2RHbHZibk5iYlhKbmJsMTlaVzFnTzF4dUlDQWdJR056YzF0emRHbGphMVJ2WFNBOUlEQTdYRzRnSUNBZ1kzTnpXMjV2ZEZOMGRXTnJWRzlkSUQwZ0oyRjFkRzhuTzF4dUlDQWdJSFJvYVhNdWFYTlRkSFZqYXlBOUlIUnlkV1U3WEc0Z0lDQWdkR2hwY3k0a1pXeGxiV1Z1ZEM1eVpXMXZkbVZEYkdGemN5aGdhWE10WVc1amFHOXlaV1FnYVhNdFlYUXRKSHR1YjNSVGRIVmphMVJ2ZldBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWhaR1JEYkdGemN5aGdhWE10YzNSMVkyc2dhWE10WVhRdEpIdHpkR2xqYTFSdmZXQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVqYzNNb1kzTnpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDb2dSbWx5WlhNZ2QyaGxiaUIwYUdVZ0pHVnNaVzFsYm5RZ2FHRnpJR0psWTI5dFpTQmdjRzl6YVhScGIyNDZJR1pwZUdWa08yQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ29nVG1GdFpYTndZV05sWkNCMGJ5QmdkRzl3WUNCdmNpQmdZbTkwZEc5dFlDd2daUzVuTGlCZ2MzUnBZMnQ1TG5wbUxuTjBkV05yZEc4NmRHOXdZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lCQVpYWmxiblFnVTNScFkydDVJM04wZFdOcmRHOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1MGNtbG5aMlZ5S0dCemRHbGphM2t1ZW1ZdWMzUjFZMnQwYnpva2UzTjBhV05yVkc5OVlDazdYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzV2YmloY0luUnlZVzV6YVhScGIyNWxibVFnZDJWaWEybDBWSEpoYm5OcGRHbHZia1Z1WkNCdlZISmhibk5wZEdsdmJrVnVaQ0J2ZEhKaGJuTnBkR2x2Ym1WdVpDQk5VMVJ5WVc1emFYUnBiMjVGYm1SY0lpd2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NWZjMlYwVTJsNlpYTW9LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRFlYVnpaWE1nZEdobElDUmxiR1Z0Wlc1MElIUnZJR0psWTI5dFpTQjFibk4wZFdOckxseHVJQ0FnS2lCU1pXMXZkbVZ6SUdCd2IzTnBkR2x2YmpvZ1ptbDRaV1E3WUN3Z1lXNWtJR2hsYkhCbGNpQmpiR0Z6YzJWekxseHVJQ0FnS2lCQlpHUnpJRzkwYUdWeUlHaGxiSEJsY2lCamJHRnpjMlZ6TGx4dUlDQWdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJR2x6Vkc5d0lDMGdkR1ZzYkhNZ2RHaGxJR1oxYm1OMGFXOXVJR2xtSUhSb1pTQWtaV3hsYldWdWRDQnphRzkxYkdRZ1lXNWphRzl5SUhSdklIUm9aU0IwYjNBZ2IzSWdZbTkwZEc5dElHOW1JR2wwY3lBa1lXNWphRzl5SUdWc1pXMWxiblF1WEc0Z0lDQXFJRUJtYVhKbGN5QlRkR2xqYTNramRXNXpkSFZqYTJaeWIyMWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOXlaVzF2ZG1WVGRHbGphM2tvYVhOVWIzQXBJSHRjYmlBZ0lDQjJZWElnYzNScFkydFVieUE5SUhSb2FYTXViM0IwYVc5dWN5NXpkR2xqYTFSdkxGeHVJQ0FnSUNBZ0lDQnpkR2xqYTFSdlZHOXdJRDBnYzNScFkydFVieUE5UFQwZ0ozUnZjQ2NzWEc0Z0lDQWdJQ0FnSUdOemN5QTlJSHQ5TEZ4dUlDQWdJQ0FnSUNCaGJtTm9iM0pRZENBOUlDaDBhR2x6TG5CdmFXNTBjeUEvSUhSb2FYTXVjRzlwYm5Seld6RmRJQzBnZEdocGN5NXdiMmx1ZEhOYk1GMGdPaUIwYUdsekxtRnVZMmh2Y2tobGFXZG9kQ2tnTFNCMGFHbHpMbVZzWlcxSVpXbG5hSFFzWEc0Z0lDQWdJQ0FnSUcxeVoyNGdQU0J6ZEdsamExUnZWRzl3SUQ4Z0oyMWhjbWRwYmxSdmNDY2dPaUFuYldGeVoybHVRbTkwZEc5dEp5eGNiaUFnSUNBZ0lDQWdibTkwVTNSMVkydFVieUE5SUhOMGFXTnJWRzlVYjNBZ1B5QW5ZbTkwZEc5dEp5QTZJQ2QwYjNBbkxGeHVJQ0FnSUNBZ0lDQjBiM0JQY2tKdmRIUnZiU0E5SUdselZHOXdJRDhnSjNSdmNDY2dPaUFuWW05MGRHOXRKenRjYmx4dUlDQWdJR056YzF0dGNtZHVYU0E5SURBN1hHNWNiaUFnSUNCamMzTmJKMkp2ZEhSdmJTZGRJRDBnSjJGMWRHOG5PMXh1SUNBZ0lHbG1LR2x6Vkc5d0tTQjdYRzRnSUNBZ0lDQmpjM05iSjNSdmNDZGRJRDBnTUR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZM056V3lkMGIzQW5YU0E5SUdGdVkyaHZjbEIwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWFYTlRkSFZqYXlBOUlHWmhiSE5sTzF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWNtVnRiM1psUTJ4aGMzTW9ZR2x6TFhOMGRXTnJJR2x6TFdGMExTUjdjM1JwWTJ0VWIzMWdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WVdSa1EyeGhjM01vWUdsekxXRnVZMmh2Y21Wa0lHbHpMV0YwTFNSN2RHOXdUM0pDYjNSMGIyMTlZQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1OemN5aGpjM01wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLaUJHYVhKbGN5QjNhR1Z1SUhSb1pTQWtaV3hsYldWdWRDQm9ZWE1nWW1WamIyMWxJR0Z1WTJodmNtVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lCT1lXMWxjM0JoWTJWa0lIUnZJR0IwYjNCZ0lHOXlJR0JpYjNSMGIyMWdMQ0JsTG1jdUlHQnpkR2xqYTNrdWVtWXVkVzV6ZEhWamEyWnliMjA2WW05MGRHOXRZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lCQVpYWmxiblFnVTNScFkydDVJM1Z1YzNSMVkydG1jbTl0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVkSEpwWjJkbGNpaGdjM1JwWTJ0NUxucG1MblZ1YzNSMVkydG1jbTl0T2lSN2RHOXdUM0pDYjNSMGIyMTlZQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBjeUIwYUdVZ0pHVnNaVzFsYm5RZ1lXNWtJQ1JqYjI1MFlXbHVaWElnYzJsNlpYTWdabTl5SUhCc2RXZHBiaTVjYmlBZ0lDb2dRMkZzYkhNZ1lGOXpaWFJDY21WaGExQnZhVzUwYzJBdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaUlDMGdiM0IwYVc5dVlXd2dZMkZzYkdKaFkyc2dablZ1WTNScGIyNGdkRzhnWm1seVpTQnZiaUJqYjIxd2JHVjBhVzl1SUc5bUlHQmZjMlYwUW5KbFlXdFFiMmx1ZEhOZ0xseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gzTmxkRk5wZW1WektHTmlLU0I3WEc0Z0lDQWdkR2hwY3k1allXNVRkR2xqYXlBOUlFMWxaR2xoVVhWbGNua3VhWE1vZEdocGN5NXZjSFJwYjI1ekxuTjBhV05yZVU5dUtUdGNiaUFnSUNCcFppQW9JWFJvYVhNdVkyRnVVM1JwWTJzcElIdGNiaUFnSUNBZ0lHbG1JQ2hqWWlBbUppQjBlWEJsYjJZZ1kySWdQVDA5SUNkbWRXNWpkR2x2YmljcElIc2dZMklvS1RzZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0J1WlhkRmJHVnRWMmxrZEdnZ1BTQjBhR2x6TGlSamIyNTBZV2x1WlhKYk1GMHVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrdWQybGtkR2dzWEc0Z0lDQWdJQ0FnSUdOdmJYQWdQU0IzYVc1a2IzY3VaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaDBhR2x6TGlSamIyNTBZV2x1WlhKYk1GMHBMRnh1SUNBZ0lDQWdJQ0J3Wkc1bmJDQTlJSEJoY25ObFNXNTBLR052YlhCYkozQmhaR1JwYm1jdGJHVm1kQ2RkTENBeE1Da3NYRzRnSUNBZ0lDQWdJSEJrYm1keUlEMGdjR0Z5YzJWSmJuUW9ZMjl0Y0ZzbmNHRmtaR2x1WnkxeWFXZG9kQ2RkTENBeE1DazdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NGtZVzVqYUc5eUlDWW1JSFJvYVhNdUpHRnVZMmh2Y2k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZVzVqYUc5eVNHVnBaMmgwSUQwZ2RHaHBjeTRrWVc1amFHOXlXekJkTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMbWhsYVdkb2REdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NWZjR0Z5YzJWUWIybHVkSE1vS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtTnpjeWg3WEc0Z0lDQWdJQ0FuYldGNExYZHBaSFJvSnpvZ1lDUjdibVYzUld4bGJWZHBaSFJvSUMwZ2NHUnVaMndnTFNCd1pHNW5jbjF3ZUdCY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhaaGNpQnVaWGREYjI1MFlXbHVaWEpJWldsbmFIUWdQU0IwYUdsekxpUmxiR1Z0Wlc1MFd6QmRMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncExtaGxhV2RvZENCOGZDQjBhR2x6TG1OdmJuUmhhVzVsY2tobGFXZG9kRHRjYmlBZ0lDQnBaaUFvZEdocGN5NGtaV3hsYldWdWRDNWpjM01vWENKa2FYTndiR0Y1WENJcElEMDlJRndpYm05dVpWd2lLU0I3WEc0Z0lDQWdJQ0J1WlhkRGIyNTBZV2x1WlhKSVpXbG5hSFFnUFNBd08xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtTnZiblJoYVc1bGNraGxhV2RvZENBOUlHNWxkME52Ym5SaGFXNWxja2hsYVdkb2REdGNiaUFnSUNCMGFHbHpMaVJqYjI1MFlXbHVaWEl1WTNOektIdGNiaUFnSUNBZ0lHaGxhV2RvZERvZ2JtVjNRMjl1ZEdGcGJtVnlTR1ZwWjJoMFhHNGdJQ0FnZlNrN1hHNGdJQ0FnZEdocGN5NWxiR1Z0U0dWcFoyaDBJRDBnYm1WM1EyOXVkR0ZwYm1WeVNHVnBaMmgwTzF4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TG1selUzUjFZMnNwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGlSbGJHVnRaVzUwTG1oaGMwTnNZWE56S0NkcGN5MWhkQzFpYjNSMGIyMG5LU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZVzVqYUc5eVVIUWdQU0FvZEdocGN5NXdiMmx1ZEhNZ1B5QjBhR2x6TG5CdmFXNTBjMXN4WFNBdElIUm9hWE11SkdOdmJuUmhhVzVsY2k1dlptWnpaWFFvS1M1MGIzQWdPaUIwYUdsekxtRnVZMmh2Y2tobGFXZG9kQ2tnTFNCMGFHbHpMbVZzWlcxSVpXbG5hSFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVZM056S0NkMGIzQW5MQ0JoYm1Ob2IzSlFkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1ZmMyVjBRbkpsWVd0UWIybHVkSE1vYm1WM1EyOXVkR0ZwYm1WeVNHVnBaMmgwTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lHbG1JQ2hqWWlBbUppQjBlWEJsYjJZZ1kySWdQVDA5SUNkbWRXNWpkR2x2YmljcElIc2dZMklvS1RzZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhNZ2RHaGxJSFZ3Y0dWeUlHRnVaQ0JzYjNkbGNpQmljbVZoYTNCdmFXNTBjeUJtYjNJZ2RHaGxJR1ZzWlcxbGJuUWdkRzhnWW1WamIyMWxJSE4wYVdOcmVTOTFibk4wYVdOcmVTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdWc1pXMUlaV2xuYUhRZ0xTQndlQ0IyWVd4MVpTQm1iM0lnYzNScFkydDVMaVJsYkdWdFpXNTBJR2hsYVdkb2RDd2dZMkZzWTNWc1lYUmxaQ0JpZVNCZ1gzTmxkRk5wZW1WellDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1kySWdMU0J2Y0hScGIyNWhiQ0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIwYnlCaVpTQmpZV3hzWldRZ2IyNGdZMjl0Y0d4bGRHbHZiaTVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjl6WlhSQ2NtVmhhMUJ2YVc1MGN5aGxiR1Z0U0dWcFoyaDBMQ0JqWWlrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1allXNVRkR2xqYXlrZ2UxeHVJQ0FnSUNBZ2FXWWdLR05pSUNZbUlIUjVjR1Z2WmlCallpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2V5QmpZaWdwT3lCOVhHNGdJQ0FnSUNCbGJITmxJSHNnY21WMGRYSnVJR1poYkhObE95QjlYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQnRWRzl3SUQwZ1pXMURZV3hqS0hSb2FYTXViM0IwYVc5dWN5NXRZWEpuYVc1VWIzQXBMRnh1SUNBZ0lDQWdJQ0J0UW5SdElEMGdaVzFEWVd4aktIUm9hWE11YjNCMGFXOXVjeTV0WVhKbmFXNUNiM1IwYjIwcExGeHVJQ0FnSUNBZ0lDQjBiM0JRYjJsdWRDQTlJSFJvYVhNdWNHOXBiblJ6SUQ4Z2RHaHBjeTV3YjJsdWRITmJNRjBnT2lCMGFHbHpMaVJoYm1Ob2IzSXViMlptYzJWMEtDa3VkRzl3TEZ4dUlDQWdJQ0FnSUNCaWIzUjBiMjFRYjJsdWRDQTlJSFJvYVhNdWNHOXBiblJ6SUQ4Z2RHaHBjeTV3YjJsdWRITmJNVjBnT2lCMGIzQlFiMmx1ZENBcklIUm9hWE11WVc1amFHOXlTR1ZwWjJoMExGeHVJQ0FnSUNBZ0lDQXZMeUIwYjNCUWIybHVkQ0E5SUhSb2FYTXVKR0Z1WTJodmNpNXZabVp6WlhRb0tTNTBiM0FnZkh3Z2RHaHBjeTV3YjJsdWRITmJNRjBzWEc0Z0lDQWdJQ0FnSUM4dklHSnZkSFJ2YlZCdmFXNTBJRDBnZEc5d1VHOXBiblFnS3lCMGFHbHpMbUZ1WTJodmNraGxhV2RvZENCOGZDQjBhR2x6TG5CdmFXNTBjMXN4WFN4Y2JpQWdJQ0FnSUNBZ2QybHVTR1ZwWjJoMElEMGdkMmx1Wkc5M0xtbHVibVZ5U0dWcFoyaDBPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXpkR2xqYTFSdklEMDlQU0FuZEc5d0p5a2dlMXh1SUNBZ0lDQWdkRzl3VUc5cGJuUWdMVDBnYlZSdmNEdGNiaUFnSUNBZ0lHSnZkSFJ2YlZCdmFXNTBJQzA5SUNobGJHVnRTR1ZwWjJoMElDc2diVlJ2Y0NrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVjM1JwWTJ0VWJ5QTlQVDBnSjJKdmRIUnZiU2NwSUh0Y2JpQWdJQ0FnSUhSdmNGQnZhVzUwSUMwOUlDaDNhVzVJWldsbmFIUWdMU0FvWld4bGJVaGxhV2RvZENBcklHMUNkRzBwS1R0Y2JpQWdJQ0FnSUdKdmRIUnZiVkJ2YVc1MElDMDlJQ2gzYVc1SVpXbG5hSFFnTFNCdFFuUnRLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OTBhR2x6SUhkdmRXeGtJR0psSUhSb1pTQnpkR2xqYTFSdk9pQmliM1JvSUc5d2RHbHZiaTR1TGlCMGNtbGphM2xjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5SdmNGQnZhVzUwSUQwZ2RHOXdVRzlwYm5RN1hHNGdJQ0FnZEdocGN5NWliM1IwYjIxUWIybHVkQ0E5SUdKdmRIUnZiVkJ2YVc1ME8xeHVYRzRnSUNBZ2FXWWdLR05pSUNZbUlIUjVjR1Z2WmlCallpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2V5QmpZaWdwT3lCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1Z6ZEhKdmVYTWdkR2hsSUdOMWNuSmxiblFnYzNScFkydDVJR1ZzWlcxbGJuUXVYRzRnSUNBcUlGSmxjMlYwY3lCMGFHVWdaV3hsYldWdWRDQjBieUIwYUdVZ2RHOXdJSEJ2YzJsMGFXOXVJR1pwY25OMExseHVJQ0FnS2lCU1pXMXZkbVZ6SUdWMlpXNTBJR3hwYzNSbGJtVnljeXdnU2xNdFlXUmtaV1FnWTNOeklIQnliM0JsY25ScFpYTWdZVzVrSUdOc1lYTnpaWE1zSUdGdVpDQjFibmR5WVhCeklIUm9aU0FrWld4bGJXVnVkQ0JwWmlCMGFHVWdTbE1nWVdSa1pXUWdkR2hsSUNSamIyNTBZV2x1WlhJdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaTljYmlBZ1gyUmxjM1J5YjNrb0tTQjdYRzRnSUNBZ2RHaHBjeTVmY21WdGIzWmxVM1JwWTJ0NUtIUnlkV1VwTzF4dVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNXlaVzF2ZG1WRGJHRnpjeWhnSkh0MGFHbHpMbTl3ZEdsdmJuTXVjM1JwWTJ0NVEyeGhjM045SUdsekxXRnVZMmh2Y21Wa0lHbHpMV0YwTFhSdmNHQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVqYzNNb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2dKeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOXdPaUFuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliM1IwYjIwNklDY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkdFlYZ3RkMmxrZEdnbk9pQW5KMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWIyWm1LQ2R5WlhOcGVtVnRaUzU2Wmk1MGNtbG5aMlZ5SnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtOW1aaWduYlhWMFlYUmxiV1V1ZW1ZdWRISnBaMmRsY2ljcE8xeHVJQ0FnSUdsbUlDaDBhR2x6TGlSaGJtTm9iM0lnSmlZZ2RHaHBjeTRrWVc1amFHOXlMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a1lXNWphRzl5TG05bVppZ25ZMmhoYm1kbExucG1Mbk4wYVdOcmVTY3BPMXh1SUNBZ0lIMWNiaUFnSUNBa0tIZHBibVJ2ZHlrdWIyWm1LSFJvYVhNdWMyTnliMnhzVEdsemRHVnVaWElwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZDJGelYzSmhjSEJsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzUxYm5keVlYQW9LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrWTI5dWRHRnBibVZ5TG5KbGJXOTJaVU5zWVhOektIUm9hWE11YjNCMGFXOXVjeTVqYjI1MFlXbHVaWEpEYkdGemN5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1amMzTW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklDY25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVVM1JwWTJ0NUxtUmxabUYxYkhSeklEMGdlMXh1SUNBdktpcGNiaUFnSUNvZ1EzVnpkRzl0YVhwaFlteGxJR052Ym5SaGFXNWxjaUIwWlcxd2JHRjBaUzRnUVdSa0lIbHZkWElnYjNkdUlHTnNZWE56WlhNZ1ptOXlJSE4wZVd4cGJtY2dZVzVrSUhOcGVtbHVaeTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5KbXgwTzJScGRpQmtZWFJoTFhOMGFXTnJlUzFqYjI1MFlXbHVaWEltWjNRN0pteDBPeTlrYVhZbVozUTdKMXh1SUNBZ0tpOWNiaUFnWTI5dWRHRnBibVZ5T2lBblBHUnBkaUJrWVhSaExYTjBhV05yZVMxamIyNTBZV2x1WlhJK1BDOWthWFkrSnl4Y2JpQWdMeW9xWEc0Z0lDQXFJRXh2WTJGMGFXOXVJR2x1SUhSb1pTQjJhV1YzSUhSb1pTQmxiR1Z0Wlc1MElITjBhV05yY3lCMGJ5NGdRMkZ1SUdKbElHQW5kRzl3SjJBZ2IzSWdZQ2RpYjNSMGIyMG5ZQzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5kRzl3SjF4dUlDQWdLaTljYmlBZ2MzUnBZMnRVYnpvZ0ozUnZjQ2NzWEc0Z0lDOHFLbHh1SUNBZ0tpQkpaaUJoYm1Ob2IzSmxaQ0IwYnlCaElITnBibWRzWlNCbGJHVnRaVzUwTENCMGFHVWdhV1FnYjJZZ2RHaGhkQ0JsYkdWdFpXNTBMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYRzRnSUNBcUlFQmtaV1poZFd4MElDY25YRzRnSUNBcUwxeHVJQ0JoYm1Ob2IzSTZJQ2NuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dTV1lnZFhOcGJtY2diVzl5WlNCMGFHRnVJRzl1WlNCbGJHVnRaVzUwSUdGeklHRnVZMmh2Y2lCd2IybHVkSE1zSUhSb1pTQnBaQ0J2WmlCMGFHVWdkRzl3SUdGdVkyaHZjaTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5KMXh1SUNBZ0tpOWNiaUFnZEc5d1FXNWphRzl5T2lBbkp5eGNiaUFnTHlvcVhHNGdJQ0FxSUVsbUlIVnphVzVuSUcxdmNtVWdkR2hoYmlCdmJtVWdaV3hsYldWdWRDQmhjeUJoYm1Ob2IzSWdjRzlwYm5SekxDQjBhR1VnYVdRZ2IyWWdkR2hsSUdKdmRIUnZiU0JoYm1Ob2IzSXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ0p5ZGNiaUFnSUNvdlhHNGdJR0owYlVGdVkyaHZjam9nSnljc1hHNGdJQzhxS2x4dUlDQWdLaUJOWVhKbmFXNHNJR2x1SUdCbGJXQW5jeUIwYnlCaGNIQnNlU0IwYnlCMGFHVWdkRzl3SUc5bUlIUm9aU0JsYkdWdFpXNTBJSGRvWlc0Z2FYUWdZbVZqYjIxbGN5QnpkR2xqYTNrdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ29nUUdSbFptRjFiSFFnTVZ4dUlDQWdLaTljYmlBZ2JXRnlaMmx1Vkc5d09pQXhMRnh1SUNBdktpcGNiaUFnSUNvZ1RXRnlaMmx1TENCcGJpQmdaVzFnSjNNZ2RHOGdZWEJ3YkhrZ2RHOGdkR2hsSUdKdmRIUnZiU0J2WmlCMGFHVWdaV3hsYldWdWRDQjNhR1Z1SUdsMElHSmxZMjl0WlhNZ2MzUnBZMnQ1TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0dWRXMWlaWEo5WEc0Z0lDQXFJRUJrWldaaGRXeDBJREZjYmlBZ0lDb3ZYRzRnSUcxaGNtZHBia0p2ZEhSdmJUb2dNU3hjYmlBZ0x5b3FYRzRnSUNBcUlFSnlaV0ZyY0c5cGJuUWdjM1J5YVc1bklIUm9ZWFFnYVhNZ2RHaGxJRzFwYm1sdGRXMGdjMk55WldWdUlITnBlbVVnWVc0Z1pXeGxiV1Z1ZENCemFHOTFiR1FnWW1WamIyMWxJSE4wYVdOcmVTNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBbmJXVmthWFZ0SjF4dUlDQWdLaTljYmlBZ2MzUnBZMnQ1VDI0NklDZHRaV1JwZFcwbkxGeHVJQ0F2S2lwY2JpQWdJQ29nUTJ4aGMzTWdZWEJ3YkdsbFpDQjBieUJ6ZEdsamEza2daV3hsYldWdWRDd2dZVzVrSUhKbGJXOTJaV1FnYjI0Z1pHVnpkSEoxWTNScGIyNHVJRVp2ZFc1a1lYUnBiMjRnWkdWbVlYVnNkSE1nZEc4Z1lITjBhV05yZVdBdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSjNOMGFXTnJlU2RjYmlBZ0lDb3ZYRzRnSUhOMGFXTnJlVU5zWVhOek9pQW5jM1JwWTJ0NUp5eGNiaUFnTHlvcVhHNGdJQ0FxSUVOc1lYTnpJR0Z3Y0d4cFpXUWdkRzhnYzNScFkydDVJR052Ym5SaGFXNWxjaTRnUm05MWJtUmhkR2x2YmlCa1pXWmhkV3gwY3lCMGJ5QmdjM1JwWTJ0NUxXTnZiblJoYVc1bGNtQXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ0ozTjBhV05yZVMxamIyNTBZV2x1WlhJblhHNGdJQ0FxTDF4dUlDQmpiMjUwWVdsdVpYSkRiR0Z6Y3pvZ0ozTjBhV05yZVMxamIyNTBZV2x1WlhJbkxGeHVJQ0F2S2lwY2JpQWdJQ29nVG5WdFltVnlJRzltSUhOamNtOXNiQ0JsZG1WdWRITWdZbVYwZDJWbGJpQjBhR1VnY0d4MVoybHVKM01nY21WallXeGpkV3hoZEdsdVp5QnpkR2xqYTNrZ2NHOXBiblJ6TGlCVFpYUjBhVzVuSUdsMElIUnZJR0F3WUNCM2FXeHNJR05oZFhObElHbDBJSFJ2SUhKbFkyRnNZeUJsZG1WeWVTQnpZM0p2Ykd3Z1pYWmxiblFzSUhObGRIUnBibWNnYVhRZ2RHOGdZQzB4WUNCM2FXeHNJSEJ5WlhabGJuUWdjbVZqWVd4aklHOXVJSE5qY205c2JDNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBdE1WeHVJQ0FnS2k5Y2JpQWdZMmhsWTJ0RmRtVnllVG9nTFRGY2JuMDdYRzVjYmk4cUtseHVJQ29nU0dWc2NHVnlJR1oxYm1OMGFXOXVJSFJ2SUdOaGJHTjFiR0YwWlNCbGJTQjJZV3gxWlhOY2JpQXFJRUJ3WVhKaGJTQk9kVzFpWlhJZ2UyVnRmU0F0SUc1MWJXSmxjaUJ2WmlCbGJTZHpJSFJ2SUdOaGJHTjFiR0YwWlNCcGJuUnZJSEJwZUdWc2MxeHVJQ292WEc1bWRXNWpkR2x2YmlCbGJVTmhiR01vWlcwcElIdGNiaUFnY21WMGRYSnVJSEJoY25ObFNXNTBLSGRwYm1SdmR5NW5aWFJEYjIxd2RYUmxaRk4wZVd4bEtHUnZZM1Z0Wlc1MExtSnZaSGtzSUc1MWJHd3BMbVp2Ym5SVGFYcGxMQ0F4TUNrZ0tpQmxiVHRjYm4xY2JseHVaWGh3YjNKMElIdFRkR2xqYTNsOU8xeHVJbDE5XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24uc3RpY2t5LmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhYnMgPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLmtleWJvYXJkJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuaW1hZ2VMb2FkZXInKTtcblxudmFyIF9mb3VuZGF0aW9uID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnBsdWdpbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogVGFicyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udGFic1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5pbWFnZUxvYWRlciBpZiB0YWJzIGNvbnRhaW4gaW1hZ2VzXG4gKi9cblxudmFyIFRhYnMgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoVGFicywgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gVGFicygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFicyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhYnMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJzKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFicywgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0YWJzLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFRhYnNcbiAgICAgKiBAZmlyZXMgVGFicyNpbml0XG4gICAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byB0YWJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gX2pxdWVyeTIuZGVmYXVsdC5leHRlbmQoe30sIFRhYnMuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1RhYnMnOyAvLyBpZTkgYmFjayBjb21wYXRcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgX2ZvdW5kYXRpb25VdGlsLktleWJvYXJkLnJlZ2lzdGVyKCdUYWJzJywge1xuICAgICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfVVAnOiAncHJldmlvdXMnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnXG4gICAgICAgIC8vICdUQUInOiAnbmV4dCcsXG4gICAgICAgIC8vICdTSElGVF9UQUInOiAncHJldmlvdXMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgdGFicyBieSBzaG93aW5nIGFuZCBmb2N1c2luZyAoaWYgYXV0b0ZvY3VzPXRydWUpIHRoZSBwcmVzZXQgYWN0aXZlIHRhYi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfaW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7ICdyb2xlJzogJ3RhYmxpc3QnIH0pO1xuICAgICAgdGhpcy4kdGFiVGl0bGVzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuJyArIHRoaXMub3B0aW9ucy5saW5rQ2xhc3MpO1xuICAgICAgdGhpcy4kdGFiQ29udGVudCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtdGFicy1jb250ZW50PVwiJyArIHRoaXMuJGVsZW1lbnRbMF0uaWQgKyAnXCJdJyk7XG5cbiAgICAgIHRoaXMuJHRhYlRpdGxlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLFxuICAgICAgICAgICAgJGxpbmsgPSAkZWxlbS5maW5kKCdhJyksXG4gICAgICAgICAgICBpc0FjdGl2ZSA9ICRlbGVtLmhhc0NsYXNzKCcnICsgX3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpLFxuICAgICAgICAgICAgaGFzaCA9ICRsaW5rLmF0dHIoJ2RhdGEtdGFicy10YXJnZXQnKSB8fCAkbGlua1swXS5oYXNoLnNsaWNlKDEpLFxuICAgICAgICAgICAgbGlua0lkID0gJGxpbmtbMF0uaWQgPyAkbGlua1swXS5pZCA6IGhhc2ggKyAnLWxhYmVsJyxcbiAgICAgICAgICAgICR0YWJDb250ZW50ID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArIGhhc2gpO1xuXG4gICAgICAgICRlbGVtLmF0dHIoeyAncm9sZSc6ICdwcmVzZW50YXRpb24nIH0pO1xuXG4gICAgICAgICRsaW5rLmF0dHIoe1xuICAgICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBoYXNoLFxuICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogaXNBY3RpdmUsXG4gICAgICAgICAgJ2lkJzogbGlua0lkLFxuICAgICAgICAgICd0YWJpbmRleCc6IGlzQWN0aXZlID8gJzAnIDogJy0xJ1xuICAgICAgICB9KTtcblxuICAgICAgICAkdGFiQ29udGVudC5hdHRyKHtcbiAgICAgICAgICAncm9sZSc6ICd0YWJwYW5lbCcsXG4gICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgJHRhYkNvbnRlbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQWN0aXZlICYmIF90aGlzLm9wdGlvbnMuYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykubG9hZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAkZWxlbS5vZmZzZXQoKS50b3AgfSwgX3RoaXMub3B0aW9ucy5kZWVwTGlua1NtdWRnZURlbGF5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICRsaW5rLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCdpbWcnKTtcblxuICAgICAgICBpZiAoJGltYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAoMCwgX2ZvdW5kYXRpb25VdGlsMi5vbkltYWdlc0xvYWRlZCkoJGltYWdlcywgdGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3NldEhlaWdodCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vY3VycmVudCBjb250ZXh0LWJvdW5kIGZ1bmN0aW9uIHRvIG9wZW4gdGFicyBvbiBwYWdlIGxvYWQgb3IgaGlzdG9yeSBwb3BzdGF0ZVxuICAgICAgdGhpcy5fY2hlY2tEZWVwTGluayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFuY2hvciA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAvL25lZWQgYSBoYXNoIGFuZCBhIHJlbGV2YW50IGFuY2hvciBpbiB0aGlzIHRhYnNldFxuICAgICAgICBpZiAoYW5jaG9yLmxlbmd0aCkge1xuICAgICAgICAgIHZhciAkbGluayA9IF90aGlzMy4kZWxlbWVudC5maW5kKCdbaHJlZiQ9XCInICsgYW5jaG9yICsgJ1wiXScpO1xuICAgICAgICAgIGlmICgkbGluay5sZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzMy5zZWxlY3RUYWIoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGFuY2hvciksIHRydWUpO1xuXG4gICAgICAgICAgICAvL3JvbGwgdXAgYSBsaXR0bGUgdG8gc2hvdyB0aGUgdGl0bGVzXG4gICAgICAgICAgICBpZiAoX3RoaXMzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IF90aGlzMy4kZWxlbWVudC5vZmZzZXQoKTtcbiAgICAgICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogb2Zmc2V0LnRvcCB9LCBfdGhpczMub3B0aW9ucy5kZWVwTGlua1NtdWRnZURlbGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgenBsdWdpbiBoYXMgZGVlcGxpbmtlZCBhdCBwYWdlbG9hZFxuICAgICAgICAgICAgICAqIEBldmVudCBUYWJzI2RlZXBsaW5rXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfdGhpczMuJGVsZW1lbnQudHJpZ2dlcignZGVlcGxpbmsuemYudGFicycsIFskbGluaywgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKGFuY2hvcildKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vdXNlIGJyb3dzZXIgdG8gb3BlbiBhIHRhYiwgaWYgaXQgZXhpc3RzIGluIHRoaXMgdGFic2V0XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrRGVlcExpbmsoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdGhpcy5fYWRkS2V5SGFuZGxlcigpO1xuICAgICAgdGhpcy5fYWRkQ2xpY2tIYW5kbGVyKCk7XG4gICAgICB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciA9IHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpO1xuXG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRoaXMuX2NoZWNrRGVlcExpbmspO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgY2xpY2sgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkQ2xpY2tIYW5kbGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZENsaWNrSGFuZGxlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdjbGljay56Zi50YWJzJykub24oJ2NsaWNrLnpmLnRhYnMnLCAnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMga2V5Ym9hcmQgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfYWRkS2V5SGFuZGxlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRLZXlIYW5kbGVyKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy4kdGFiVGl0bGVzLm9mZigna2V5ZG93bi56Zi50YWJzJykub24oJ2tleWRvd24uemYudGFicycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLndoaWNoID09PSA5KSByZXR1cm47XG5cbiAgICAgICAgdmFyICRlbGVtZW50ID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLFxuICAgICAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLmNoaWxkcmVuKCdsaScpLFxuICAgICAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgaWYgKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLndyYXBPbktleXMpIHtcbiAgICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gaSA9PT0gMCA/ICRlbGVtZW50cy5sYXN0KCkgOiAkZWxlbWVudHMuZXEoaSAtIDEpO1xuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSBpID09PSAkZWxlbWVudHMubGVuZ3RoIC0gMSA/ICRlbGVtZW50cy5maXJzdCgpIDogJGVsZW1lbnRzLmVxKGkgKyAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpIC0gMSkpO1xuICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSArIDEsICRlbGVtZW50cy5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICAgIF9mb3VuZGF0aW9uVXRpbC5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1RhYnMnLCB7XG4gICAgICAgICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJGVsZW1lbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uIHByZXZpb3VzKCkge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJHByZXZFbGVtZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkbmV4dEVsZW1lbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24gaGFuZGxlZCgpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC4gQ29sbGFwc2VzIGFjdGl2ZSB0YWIuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gb3Blbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpc3RvcnlIYW5kbGVkIC0gYnJvd3NlciBoYXMgYWxyZWFkeSBoYW5kbGVkIGEgaGlzdG9yeSB1cGRhdGVcbiAgICAgKiBAZmlyZXMgVGFicyNjaGFuZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2hhbmRsZVRhYkNoYW5nZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCwgaGlzdG9yeUhhbmRsZWQpIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBmb3IgYWN0aXZlIGNsYXNzIG9uIHRhcmdldC4gQ29sbGFwc2UgaWYgZXhpc3RzLlxuICAgICAgICovXG4gICAgICBpZiAoJHRhcmdldC5oYXNDbGFzcygnJyArIHRoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWN0aXZlQ29sbGFwc2UpIHtcbiAgICAgICAgICB0aGlzLl9jb2xsYXBzZVRhYigkdGFyZ2V0KTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHpwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjb2xsYXBzZWQgdGFicy5cbiAgICAgICAgICAgKiBAZXZlbnQgVGFicyNjb2xsYXBzZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY29sbGFwc2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgJG9sZFRhYiA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubGlua0NsYXNzICsgJy4nICsgdGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcyksXG4gICAgICAgICAgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgICAgaGFzaCA9ICR0YWJMaW5rLmF0dHIoJ2RhdGEtdGFicy10YXJnZXQnKSB8fCAkdGFiTGlua1swXS5oYXNoLnNsaWNlKDEpLFxuICAgICAgICAgICR0YXJnZXRDb250ZW50ID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCcjJyArIGhhc2gpO1xuXG4gICAgICAvL2Nsb3NlIG9sZCB0YWJcbiAgICAgIHRoaXMuX2NvbGxhcHNlVGFiKCRvbGRUYWIpO1xuXG4gICAgICAvL29wZW4gbmV3IHRhYlxuICAgICAgdGhpcy5fb3BlblRhYigkdGFyZ2V0KTtcblxuICAgICAgLy9laXRoZXIgcmVwbGFjZSBvciB1cGRhdGUgYnJvd3NlciBoaXN0b3J5XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rICYmICFoaXN0b3J5SGFuZGxlZCkge1xuICAgICAgICB2YXIgYW5jaG9yID0gJHRhcmdldC5maW5kKCdhJykuYXR0cignaHJlZicpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBkYXRlSGlzdG9yeSkge1xuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkIHRhYnMuXG4gICAgICAgKiBAZXZlbnQgVGFicyNjaGFuZ2VcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UuemYudGFicycsIFskdGFyZ2V0LCAkdGFyZ2V0Q29udGVudF0pO1xuXG4gICAgICAvL2ZpcmUgdG8gY2hpbGRyZW4gYSBtdXRhdGlvbiBldmVudFxuICAgICAgJHRhcmdldENvbnRlbnQuZmluZChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHRhYiBgJHRhcmdldENvbnRlbnRgIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIE9wZW4uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19vcGVuVGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29wZW5UYWIoJHRhcmdldCkge1xuICAgICAgdmFyICR0YWJMaW5rID0gJHRhcmdldC5maW5kKCdbcm9sZT1cInRhYlwiXScpLFxuICAgICAgICAgIGhhc2ggPSAkdGFiTGluay5hdHRyKCdkYXRhLXRhYnMtdGFyZ2V0JykgfHwgJHRhYkxpbmtbMF0uaGFzaC5zbGljZSgxKSxcbiAgICAgICAgICAkdGFyZ2V0Q29udGVudCA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZCgnIycgKyBoYXNoKTtcblxuICAgICAgJHRhcmdldC5hZGRDbGFzcygnJyArIHRoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpO1xuXG4gICAgICAkdGFiTGluay5hdHRyKHtcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXG4gICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgfSk7XG5cbiAgICAgICR0YXJnZXRDb250ZW50LmFkZENsYXNzKCcnICsgdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29sbGFwc2VzIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gT3Blbi5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2NvbGxhcHNlVGFiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbGxhcHNlVGFiKCR0YXJnZXQpIHtcbiAgICAgIHZhciAkdGFyZ2V0X2FuY2hvciA9ICR0YXJnZXQucmVtb3ZlQ2xhc3MoJycgKyB0aGlzLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzKS5maW5kKCdbcm9sZT1cInRhYlwiXScpLmF0dHIoe1xuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScsXG4gICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICB9KTtcblxuICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArICR0YXJnZXRfYW5jaG9yLmF0dHIoJ2FyaWEtY29udHJvbHMnKSkucmVtb3ZlQ2xhc3MoJycgKyB0aGlzLm9wdGlvbnMucGFuZWxBY3RpdmVDbGFzcykuYXR0cih7ICdhcmlhLWhpZGRlbic6ICd0cnVlJyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaWMgbWV0aG9kIGZvciBzZWxlY3RpbmcgYSBjb250ZW50IHBhbmUgdG8gZGlzcGxheS5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeSB8IFN0cmluZ30gZWxlbSAtIGpRdWVyeSBvYmplY3Qgb3Igc3RyaW5nIG9mIHRoZSBpZCBvZiB0aGUgcGFuZSB0byBkaXNwbGF5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlzdG9yeUhhbmRsZWQgLSBicm93c2VyIGhhcyBhbHJlYWR5IGhhbmRsZWQgYSBoaXN0b3J5IHVwZGF0ZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZWxlY3RUYWInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RUYWIoZWxlbSwgaGlzdG9yeUhhbmRsZWQpIHtcbiAgICAgIHZhciBpZFN0cjtcblxuICAgICAgaWYgKCh0eXBlb2YgZWxlbSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZWxlbSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZFN0ciA9IGVsZW1bMF0uaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZFN0ciA9IGVsZW07XG4gICAgICB9XG5cbiAgICAgIGlmIChpZFN0ci5pbmRleE9mKCcjJykgPCAwKSB7XG4gICAgICAgIGlkU3RyID0gJyMnICsgaWRTdHI7XG4gICAgICB9XG5cbiAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy4kdGFiVGl0bGVzLmZpbmQoJ1tocmVmJD1cIicgKyBpZFN0ciArICdcIl0nKS5wYXJlbnQoJy4nICsgdGhpcy5vcHRpb25zLmxpbmtDbGFzcyk7XG5cbiAgICAgIHRoaXMuX2hhbmRsZVRhYkNoYW5nZSgkdGFyZ2V0LCBoaXN0b3J5SGFuZGxlZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NldEhlaWdodCcsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgZWFjaCBwYW5lbCB0byB0aGUgaGVpZ2h0IG9mIHRoZSB0YWxsZXN0IHBhbmVsLlxuICAgICAqIElmIGVuYWJsZWQgaW4gb3B0aW9ucywgZ2V0cyBjYWxsZWQgb24gbWVkaWEgcXVlcnkgY2hhbmdlLlxuICAgICAqIElmIGxvYWRpbmcgY29udGVudCB2aWEgZXh0ZXJuYWwgc291cmNlLCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IG9yIHdpdGggX3JlZmxvdy5cbiAgICAgKiBJZiBlbmFibGVkIHdpdGggYGRhdGEtbWF0Y2gtaGVpZ2h0PVwidHJ1ZVwiYCwgdGFicyBzZXRzIHRvIGVxdWFsIGhlaWdodFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRIZWlnaHQoKSB7XG4gICAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7IC8vIExvY2sgZG93biB0aGUgYHRoaXNgIHZhbHVlIGZvciB0aGUgcm9vdCB0YWJzIG9iamVjdFxuXG4gICAgICB0aGlzLiR0YWJDb250ZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLnBhbmVsQ2xhc3MpLmNzcygnaGVpZ2h0JywgJycpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBwYW5lbCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSxcbiAgICAgICAgICAgIGlzQWN0aXZlID0gcGFuZWwuaGFzQ2xhc3MoJycgKyBfdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpOyAvLyBnZXQgdGhlIG9wdGlvbnMgZnJvbSB0aGUgcGFyZW50IGluc3RlYWQgb2YgdHJ5aW5nIHRvIGdldCB0aGVtIGZyb20gdGhlIGNoaWxkXG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgIHBhbmVsLmNzcyh7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicsICdkaXNwbGF5JzogJ2Jsb2NrJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZW1wID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgIHBhbmVsLmNzcyh7XG4gICAgICAgICAgICAndmlzaWJpbGl0eSc6ICcnLFxuICAgICAgICAgICAgJ2Rpc3BsYXknOiAnJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF4ID0gdGVtcCA+IG1heCA/IHRlbXAgOiBtYXg7XG4gICAgICB9KS5jc3MoJ2hlaWdodCcsIG1heCArICdweCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIHRhYnMuXG4gICAgICogQGZpcmVzIFRhYnMjZGVzdHJveWVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLmxpbmtDbGFzcykub2ZmKCcuemYudGFicycpLmhpZGUoKS5lbmQoKS5maW5kKCcuJyArIHRoaXMub3B0aW9ucy5wYW5lbENsYXNzKS5oaWRlKCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuX2NoZWNrRGVlcExpbmspO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUYWJzO1xufShfZm91bmRhdGlvbi5QbHVnaW4pO1xuXG5UYWJzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3dzIHRoZSB3aW5kb3cgdG8gc2Nyb2xsIHRvIGNvbnRlbnQgb2YgcGFuZSBzcGVjaWZpZWQgYnkgaGFzaCBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZSxcblxuICAvKipcbiAgICogQWRqdXN0IHRoZSBkZWVwIGxpbmsgc2Nyb2xsIHRvIG1ha2Ugc3VyZSB0aGUgdG9wIG9mIHRoZSB0YWIgcGFuZWwgaXMgdmlzaWJsZVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbmltYXRpb24gdGltZSAobXMpIGZvciB0aGUgZGVlcCBsaW5rIGFkanVzdG1lbnRcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAzMDBcbiAgICovXG4gIGRlZXBMaW5rU211ZGdlRGVsYXk6IDMwMCxcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBicm93c2VyIGhpc3Rvcnkgd2l0aCB0aGUgb3BlbiB0YWJcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHVwZGF0ZUhpc3Rvcnk6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBhY3RpdmUgcGFuZSBvbiBsb2FkIGlmIHNldCB0byB0cnVlLlxuICAgKiBOb3QgcmVjb21tZW5kZWQgaWYgbW9yZSB0aGFuIG9uZSB0YWIgcGFuZWwgcGVyIHBhZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3Mga2V5Ym9hcmQgaW5wdXQgdG8gJ3dyYXAnIGFyb3VuZCB0aGUgdGFiIGxpbmtzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB3cmFwT25LZXlzOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHRhYiBjb250ZW50IHBhbmVzIHRvIG1hdGNoIGhlaWdodHMgaWYgc2V0IHRvIHRydWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXRjaEhlaWdodDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFsbG93cyBhY3RpdmUgdGFicyB0byBjb2xsYXBzZSB3aGVuIGNsaWNrZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhY3RpdmVDb2xsYXBzZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYGxpYCdzIGluIHRhYiBsaW5rIGxpc3QuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3RhYnMtdGl0bGUnXG4gICAqL1xuICBsaW5rQ2xhc3M6ICd0YWJzLXRpdGxlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGBsaWAgaW4gdGFiIGxpbmsgbGlzdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtYWN0aXZlJ1xuICAgKi9cbiAgbGlua0FjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGVudCBjb250YWluZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICd0YWJzLXBhbmVsJ1xuICAgKi9cbiAgcGFuZWxDbGFzczogJ3RhYnMtcGFuZWwnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgY29udGVudCBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIHBhbmVsQWN0aXZlQ2xhc3M6ICdpcy1hY3RpdmUnXG59O1xuXG5leHBvcnRzLlRhYnMgPSBUYWJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWRHRmljeTVxY3lKZExDSnVZVzFsY3lJNld5SlVZV0p6SWl3aVpXeGxiV1Z1ZENJc0ltOXdkR2x2Ym5NaUxDSWtaV3hsYldWdWRDSXNJaVFpTENKbGVIUmxibVFpTENKa1pXWmhkV3gwY3lJc0ltUmhkR0VpTENKamJHRnpjMDVoYldVaUxDSmZhVzVwZENJc0lrdGxlV0p2WVhKa0lpd2ljbVZuYVhOMFpYSWlMQ0pmZEdocGN5SXNJbUYwZEhJaUxDSWtkR0ZpVkdsMGJHVnpJaXdpWm1sdVpDSXNJbXhwYm10RGJHRnpjeUlzSWlSMFlXSkRiMjUwWlc1MElpd2lhV1FpTENKbFlXTm9JaXdpSkdWc1pXMGlMQ0lrYkdsdWF5SXNJbWx6UVdOMGFYWmxJaXdpYUdGelEyeGhjM01pTENKc2FXNXJRV04wYVhabFEyeGhjM01pTENKb1lYTm9JaXdpYzJ4cFkyVWlMQ0pzYVc1clNXUWlMQ0poZFhSdlJtOWpkWE1pTENKM2FXNWtiM2NpTENKc2IyRmtJaXdpWVc1cGJXRjBaU0lzSW5OamNtOXNiRlJ2Y0NJc0ltOW1abk5sZENJc0luUnZjQ0lzSW1SbFpYQk1hVzVyVTIxMVpHZGxSR1ZzWVhraUxDSm1iMk4xY3lJc0ltMWhkR05vU0dWcFoyaDBJaXdpSkdsdFlXZGxjeUlzSW14bGJtZDBhQ0lzSWw5elpYUklaV2xuYUhRaUxDSmlhVzVrSWl3aVgyTm9aV05yUkdWbGNFeHBibXNpTENKaGJtTm9iM0lpTENKc2IyTmhkR2x2YmlJc0luTmxiR1ZqZEZSaFlpSXNJbVJsWlhCTWFXNXJVMjExWkdkbElpd2lkSEpwWjJkbGNpSXNJbVJsWlhCTWFXNXJJaXdpWDJWMlpXNTBjeUlzSWw5aFpHUkxaWGxJWVc1a2JHVnlJaXdpWDJGa1pFTnNhV05yU0dGdVpHeGxjaUlzSWw5elpYUklaV2xuYUhSTmNVaGhibVJzWlhJaUxDSnZiaUlzSW05bVppSXNJbVVpTENKd2NtVjJaVzUwUkdWbVlYVnNkQ0lzSW5OMGIzQlFjbTl3WVdkaGRHbHZiaUlzSWw5b1lXNWtiR1ZVWVdKRGFHRnVaMlVpTENKM2FHbGphQ0lzSWlSbGJHVnRaVzUwY3lJc0luQmhjbVZ1ZENJc0ltTm9hV3hrY21WdUlpd2lKSEJ5WlhaRmJHVnRaVzUwSWl3aUpHNWxlSFJGYkdWdFpXNTBJaXdpYVNJc0ltbHpJaXdpZDNKaGNFOXVTMlY1Y3lJc0lteGhjM1FpTENKbGNTSXNJbVpwY25OMElpd2lUV0YwYUNJc0ltMWhlQ0lzSW0xcGJpSXNJbWhoYm1Sc1pVdGxlU0lzSW05d1pXNGlMQ0p3Y21WMmFXOTFjeUlzSW01bGVIUWlMQ0pvWVc1a2JHVmtJaXdpSkhSaGNtZGxkQ0lzSW1ocGMzUnZjbmxJWVc1a2JHVmtJaXdpWVdOMGFYWmxRMjlzYkdGd2MyVWlMQ0pmWTI5c2JHRndjMlZVWVdJaUxDSWtiMnhrVkdGaUlpd2lKSFJoWWt4cGJtc2lMQ0lrZEdGeVoyVjBRMjl1ZEdWdWRDSXNJbDl2Y0dWdVZHRmlJaXdpZFhCa1lYUmxTR2x6ZEc5eWVTSXNJbWhwYzNSdmNua2lMQ0p3ZFhOb1UzUmhkR1VpTENKeVpYQnNZV05sVTNSaGRHVWlMQ0poWkdSRGJHRnpjeUlzSW5CaGJtVnNRV04wYVhabFEyeGhjM01pTENKeVpXMXZkbVZCZEhSeUlpd2lKSFJoY21kbGRGOWhibU5vYjNJaUxDSnlaVzF2ZG1WRGJHRnpjeUlzSW1Wc1pXMGlMQ0pwWkZOMGNpSXNJbWx1WkdWNFQyWWlMQ0p3WVc1bGJFTnNZWE56SWl3aVkzTnpJaXdpY0dGdVpXd2lMQ0owWlcxd0lpd2laMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wSWl3aWFHVnBaMmgwSWl3aWFHbGtaU0lzSW1WdVpDSXNJbEJzZFdkcGJpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdPenM3T3pzN096czdPMEZCUlVFN096czdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdPenM3T3pzN096dEJRVU5CT3pzN096czdPMGxCVDAxQkxFazdPenM3T3pzN096czdPenRCUVVOS096czdPenM3T3pzeVFrRlJUME1zVHl4RlFVRlRReXhQTEVWQlFWTTdRVUZEZGtJc1YwRkJTME1zVVVGQlRDeEhRVUZuUWtZc1QwRkJhRUk3UVVGRFFTeFhRVUZMUXl4UFFVRk1MRWRCUVdWRkxHbENRVUZGUXl4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaFRDeExRVUZMVFN4UlFVRnNRaXhGUVVFMFFpeExRVUZMU0N4UlFVRk1MRU5CUVdOSkxFbEJRV1FzUlVGQk5VSXNSVUZCYTBSTUxFOUJRV3hFTEVOQlFXWTdRVUZEUVN4WFFVRkxUU3hUUVVGTUxFZEJRV2xDTEUxQlFXcENMRU5CU0hWQ0xFTkJSMFU3TzBGQlJYcENMRmRCUVV0RExFdEJRVXc3UVVGRFFVTXNLMEpCUVZORExGRkJRVlFzUTBGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRGVFSXNhVUpCUVZNc1RVRkVaVHRCUVVWNFFpeHBRa0ZCVXl4TlFVWmxPMEZCUjNoQ0xIVkNRVUZsTEUxQlNGTTdRVUZKZUVJc2IwSkJRVmtzVlVGS1dUdEJRVXQ0UWl4elFrRkJZeXhOUVV4Vk8wRkJUWGhDTEhOQ1FVRmpPMEZCUTJRN1FVRkRRVHRCUVZKM1FpeFBRVUV4UWp0QlFWVkVPenRCUVVWRU96czdPenM3T3pSQ1FVbFJPMEZCUVVFN08wRkJRMDRzVlVGQlNVTXNVVUZCVVN4SlFVRmFPenRCUVVWQkxGZEJRVXRVTEZGQlFVd3NRMEZCWTFVc1NVRkJaQ3hEUVVGdFFpeEZRVUZETEZGQlFWRXNVMEZCVkN4RlFVRnVRanRCUVVOQkxGZEJRVXRETEZWQlFVd3NSMEZCYTBJc1MwRkJTMWdzVVVGQlRDeERRVUZqV1N4SlFVRmtMRTlCUVhWQ0xFdEJRVXRpTEU5QlFVd3NRMEZCWVdNc1UwRkJjRU1zUTBGQmJFSTdRVUZEUVN4WFFVRkxReXhYUVVGTUxFZEJRVzFDTEN0RFFVRjVRaXhMUVVGTFpDeFJRVUZNTEVOQlFXTXNRMEZCWkN4RlFVRnBRbVVzUlVGQk1VTXNVVUZCYmtJN08wRkJSVUVzVjBGQlMwb3NWVUZCVEN4RFFVRm5Ra3NzU1VGQmFFSXNRMEZCY1VJc1dVRkJWVHRCUVVNM1FpeFpRVUZKUXl4UlFVRlJMSE5DUVVGRkxFbEJRVVlzUTBGQldqdEJRVUZCTEZsQlEwbERMRkZCUVZGRUxFMUJRVTFNTEVsQlFVNHNRMEZCVnl4SFFVRllMRU5CUkZvN1FVRkJRU3haUVVWSlR5eFhRVUZYUml4TlFVRk5SeXhSUVVGT0xFMUJRV3RDV0N4TlFVRk5WaXhQUVVGT0xFTkJRV056UWl4bFFVRm9ReXhEUVVabU8wRkJRVUVzV1VGSFNVTXNUMEZCVDBvc1RVRkJUVklzU1VGQlRpeERRVUZYTEd0Q1FVRllMRXRCUVd0RFVTeE5RVUZOTEVOQlFVNHNSVUZCVTBrc1NVRkJWQ3hEUVVGalF5eExRVUZrTEVOQlFXOUNMRU5CUVhCQ0xFTkJTRGRETzBGQlFVRXNXVUZKU1VNc1UwRkJVMDRzVFVGQlRTeERRVUZPTEVWQlFWTklMRVZCUVZRc1IwRkJZMGNzVFVGQlRTeERRVUZPTEVWQlFWTklMRVZCUVhaQ0xFZEJRU3RDVHl4SlFVRXZRaXhYUVVwaU8wRkJRVUVzV1VGTFNWSXNZMEZCWXl3MFFrRkJUVkVzU1VGQlRpeERRVXhzUWpzN1FVRlBRVXdzWTBGQlRWQXNTVUZCVGl4RFFVRlhMRVZCUVVNc1VVRkJVU3hqUVVGVUxFVkJRVmc3TzBGQlJVRlJMR05CUVUxU0xFbEJRVTRzUTBGQlZ6dEJRVU5VTEd0Q1FVRlJMRXRCUkVNN1FVRkZWQ3d5UWtGQmFVSlpMRWxCUmxJN1FVRkhWQ3d5UWtGQmFVSklMRkZCU0ZJN1FVRkpWQ3huUWtGQlRVc3NUVUZLUnp0QlFVdFVMSE5DUVVGWlRDeFhRVUZYTEVkQlFWZ3NSMEZCYVVJN1FVRk1jRUlzVTBGQldEczdRVUZSUVV3c2IwSkJRVmxLTEVsQlFWb3NRMEZCYVVJN1FVRkRaaXhyUWtGQlVTeFZRVVJQTzBGQlJXWXNOa0pCUVcxQ1l6dEJRVVpLTEZOQlFXcENPenRCUVV0QkxGbEJRVWNzUTBGQlEwd3NVVUZCU2l4RlFVRmpPMEZCUTFwTUxITkNRVUZaU2l4SlFVRmFMRU5CUVdsQ0xHRkJRV3BDTEVWQlFXZERMRTFCUVdoRE8wRkJRMFE3TzBGQlJVUXNXVUZCUjFNc1dVRkJXVllzVFVGQlRWWXNUMEZCVGl4RFFVRmpNRUlzVTBGQk4wSXNSVUZCZFVNN1FVRkRja01zWjBOQlFVVkRMRTFCUVVZc1JVRkJWVU1zU1VGQlZpeERRVUZsTEZsQlFWYzdRVUZEZUVJc2EwTkJRVVVzV1VGQlJpeEZRVUZuUWtNc1QwRkJhRUlzUTBGQmQwSXNSVUZCUlVNc1YwRkJWMW9zVFVGQlRXRXNUVUZCVGl4SFFVRmxReXhIUVVFMVFpeEZRVUY0UWl4RlFVRXlSSFJDTEUxQlFVMVdMRTlCUVU0c1EwRkJZMmxETEcxQ1FVRjZSU3hGUVVFNFJpeFpRVUZOTzBGQlEyeEhaQ3h2UWtGQlRXVXNTMEZCVGp0QlFVTkVMR0ZCUmtRN1FVRkhSQ3hYUVVwRU8wRkJTMFE3UVVGRFJpeFBRV3hEUkR0QlFXMURRU3hWUVVGSExFdEJRVXRzUXl4UFFVRk1MRU5CUVdGdFF5eFhRVUZvUWl4RlFVRTJRanRCUVVNelFpeFpRVUZKUXl4VlFVRlZMRXRCUVV0eVFpeFhRVUZNTEVOQlFXbENSaXhKUVVGcVFpeERRVUZ6UWl4TFFVRjBRaXhEUVVGa096dEJRVVZCTEZsQlFVbDFRaXhSUVVGUlF5eE5RVUZhTEVWQlFXOUNPMEZCUTJ4Q0xDdERRVUZsUkN4UFFVRm1MRVZCUVhkQ0xFdEJRVXRGTEZWQlFVd3NRMEZCWjBKRExFbEJRV2hDTEVOQlFYRkNMRWxCUVhKQ0xFTkJRWGhDTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c1pVRkJTMFFzVlVGQlREdEJRVU5FTzBGQlEwWTdPMEZCUlVFN1FVRkRSQ3hYUVVGTFJTeGpRVUZNTEVkQlFYTkNMRmxCUVUwN1FVRkRNVUlzV1VGQlNVTXNVMEZCVTJRc1QwRkJUMlVzVVVGQlVDeERRVUZuUW01Q0xFbEJRVGRDTzBGQlEwRTdRVUZEUVN4WlFVRkhhMElzVDBGQlQwb3NUVUZCVml4RlFVRnJRanRCUVVOb1FpeGpRVUZKYkVJc1VVRkJVU3hQUVVGTGJFSXNVVUZCVEN4RFFVRmpXU3hKUVVGa0xFTkJRVzFDTEdGQlFWYzBRaXhOUVVGWUxFZEJRV3RDTEVsQlFYSkRMRU5CUVZvN1FVRkRRU3hqUVVGSmRFSXNUVUZCVFd0Q0xFMUJRVllzUlVGQmEwSTdRVUZEYUVJc2JVSkJRVXROTEZOQlFVd3NRMEZCWlN4elFrRkJSVVlzVFVGQlJpeERRVUZtTEVWQlFUQkNMRWxCUVRGQ096dEJRVVZCTzBGQlEwRXNaMEpCUVVrc1QwRkJTM3BETEU5QlFVd3NRMEZCWVRSRExHTkJRV3BDTEVWQlFXbERPMEZCUXk5Q0xHdENRVUZKWWl4VFFVRlRMRTlCUVVzNVFpeFJRVUZNTEVOQlFXTTRRaXhOUVVGa0xFVkJRV0k3UVVGRFFTeHZRMEZCUlN4WlFVRkdMRVZCUVdkQ1JpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRlF5eFhRVUZYUXl4UFFVRlBReXhIUVVGd1FpeEZRVUY0UWl4RlFVRnRSQ3hQUVVGTGFFTXNUMEZCVEN4RFFVRmhhVU1zYlVKQlFXaEZPMEZCUTBRN08wRkJSVVE3T3pzN1FVRkpReXh0UWtGQlMyaERMRkZCUVV3c1EwRkJZelJETEU5QlFXUXNRMEZCYzBJc2EwSkJRWFJDTEVWQlFUQkRMRU5CUVVNeFFpeExRVUZFTEVWQlFWRXNjMEpCUVVWelFpeE5RVUZHTEVOQlFWSXNRMEZCTVVNN1FVRkRSRHRCUVVOR08wRkJRMFlzVDBGeVFrWTdPMEZCZFVKQk8wRkJRMEVzVlVGQlNTeExRVUZMZWtNc1QwRkJUQ3hEUVVGaE9FTXNVVUZCYWtJc1JVRkJNa0k3UVVGRGVrSXNZVUZCUzA0c1kwRkJURHRCUVVORU96dEJRVVZFTEZkQlFVdFBMRTlCUVV3N1FVRkRSRHM3UVVGRlJEczdPenM3T3pzNFFrRkpWVHRCUVVOU0xGZEJRVXRETEdOQlFVdzdRVUZEUVN4WFFVRkxReXhuUWtGQlREdEJRVU5CTEZkQlFVdERMRzFDUVVGTUxFZEJRVEpDTEVsQlFUTkNPenRCUVVWQkxGVkJRVWtzUzBGQlMyeEVMRTlCUVV3c1EwRkJZVzFETEZkQlFXcENMRVZCUVRoQ08wRkJRelZDTEdGQlFVdGxMRzFDUVVGTUxFZEJRVEpDTEV0QlFVdGFMRlZCUVV3c1EwRkJaMEpETEVsQlFXaENMRU5CUVhGQ0xFbEJRWEpDTEVOQlFUTkNPenRCUVVWQkxEaENRVUZGV2l4TlFVRkdMRVZCUVZWM1FpeEZRVUZXTEVOQlFXRXNkVUpCUVdJc1JVRkJjME1zUzBGQlMwUXNiVUpCUVRORE8wRkJRMFE3TzBGQlJVUXNWVUZCUnl4TFFVRkxiRVFzVDBGQlRDeERRVUZoT0VNc1VVRkJhRUlzUlVGQk1FSTdRVUZEZUVJc09FSkJRVVZ1UWl4TlFVRkdMRVZCUVZWM1FpeEZRVUZXTEVOQlFXRXNWVUZCWWl4RlFVRjVRaXhMUVVGTFdDeGpRVUU1UWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdkVU5CU1cxQ08wRkJRMnBDTEZWQlFVazVRaXhSUVVGUkxFbEJRVm83TzBGQlJVRXNWMEZCUzFRc1VVRkJUQ3hEUVVOSGJVUXNSMEZFU0N4RFFVTlBMR1ZCUkZBc1JVRkZSMFFzUlVGR1NDeERRVVZOTEdWQlJrNHNVVUZGTWtJc1MwRkJTMjVFTEU5QlFVd3NRMEZCWVdNc1UwRkdlRU1zUlVGRmNVUXNWVUZCVTNWRExFTkJRVlFzUlVGQlZ6dEJRVU0xUkVFc1ZVRkJSVU1zWTBGQlJqdEJRVU5CUkN4VlFVRkZSU3hsUVVGR08wRkJRMEUzUXl4alFVRk5PRU1zWjBKQlFVNHNRMEZCZFVJc2MwSkJRVVVzU1VGQlJpeERRVUYyUWp0QlFVTkVMRTlCVGtnN1FVRlBSRHM3UVVGRlJEczdPenM3T3p0eFEwRkphVUk3UVVGRFppeFZRVUZKT1VNc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZkQlFVdEZMRlZCUVV3c1EwRkJaMEozUXl4SFFVRm9RaXhEUVVGdlFpeHBRa0ZCY0VJc1JVRkJkVU5FTEVWQlFYWkRMRU5CUVRCRExHbENRVUV4UXl4RlFVRTJSQ3hWUVVGVFJTeERRVUZVTEVWQlFWYzdRVUZEZEVVc1dVRkJTVUVzUlVGQlJVa3NTMEZCUml4TFFVRlpMRU5CUVdoQ0xFVkJRVzFDT3p0QlFVZHVRaXhaUVVGSmVFUXNWMEZCVnl4elFrRkJSU3hKUVVGR0xFTkJRV1k3UVVGQlFTeFpRVU5GZVVRc1dVRkJXWHBFTEZOQlFWTXdSQ3hOUVVGVUxFTkJRV2RDTEVsQlFXaENMRVZCUVhOQ1F5eFJRVUYwUWl4RFFVRXJRaXhKUVVFdlFpeERRVVJrTzBGQlFVRXNXVUZGUlVNc1dVRkdSanRCUVVGQkxGbEJSMFZETEZsQlNFWTdPMEZCUzBGS0xHdENRVUZWZWtNc1NVRkJWaXhEUVVGbExGVkJRVk00UXl4RFFVRlVMRVZCUVZrN1FVRkRla0lzWTBGQlNTeHpRa0ZCUlN4SlFVRkdMRVZCUVZGRExFVkJRVklzUTBGQlZ5OUVMRkZCUVZnc1EwRkJTaXhGUVVFd1FqdEJRVU40UWl4blFrRkJTVk1zVFVGQlRWWXNUMEZCVGl4RFFVRmphVVVzVlVGQmJFSXNSVUZCT0VJN1FVRkROVUpLTERaQ1FVRmxSU3hOUVVGTkxFTkJRVTRzUjBGQlZVd3NWVUZCVlZFc1NVRkJWaXhGUVVGV0xFZEJRVFpDVWl4VlFVRlZVeXhGUVVGV0xFTkJRV0ZLTEVsQlFVVXNRMEZCWml4RFFVRTFRenRCUVVOQlJDdzJRa0ZCWlVNc1RVRkJUVXdzVlVGQlZYSkNMRTFCUVZZc1IwRkJhMElzUTBGQmVFSXNSMEZCTkVKeFFpeFZRVUZWVlN4TFFVRldMRVZCUVRWQ0xFZEJRV2RFVml4VlFVRlZVeXhGUVVGV0xFTkJRV0ZLTEVsQlFVVXNRMEZCWml4RFFVRXZSRHRCUVVORUxHRkJTRVFzVFVGSFR6dEJRVU5NUml3MlFrRkJaVWdzVlVGQlZWTXNSVUZCVml4RFFVRmhSU3hMUVVGTFF5eEhRVUZNTEVOQlFWTXNRMEZCVkN4RlFVRlpVQ3hKUVVGRkxFTkJRV1FzUTBGQllpeERRVUZtTzBGQlEwRkVMRFpDUVVGbFNpeFZRVUZWVXl4RlFVRldMRU5CUVdGRkxFdEJRVXRGTEVkQlFVd3NRMEZCVTFJc1NVRkJSU3hEUVVGWUxFVkJRV05NTEZWQlFWVnlRaXhOUVVGV0xFZEJRV2xDTEVOQlFTOUNMRU5CUVdJc1EwRkJaanRCUVVORU8wRkJRMFE3UVVGRFJEdEJRVU5HTEZOQldFUTdPMEZCWVVFN1FVRkRRVGRDTEdsRFFVRlRaMFVzVTBGQlZDeERRVUZ0UW01Q0xFTkJRVzVDTEVWQlFYTkNMRTFCUVhSQ0xFVkJRVGhDTzBGQlF6VkNiMElzWjBKQlFVMHNaMEpCUVZjN1FVRkRabmhGTEhGQ1FVRlRXU3hKUVVGVUxFTkJRV01zWTBGQlpDeEZRVUU0UW5GQ0xFdEJRVGxDTzBGQlEwRjRRaXhyUWtGQlRUaERMR2RDUVVGT0xFTkJRWFZDZGtRc1VVRkJka0k3UVVGRFJDeFhRVW95UWp0QlFVczFRbmxGTEc5Q1FVRlZMRzlDUVVGWE8wRkJRMjVDWWl4NVFrRkJZV2hFTEVsQlFXSXNRMEZCYTBJc1kwRkJiRUlzUlVGQmEwTnhRaXhMUVVGc1F6dEJRVU5CZUVJc2EwSkJRVTA0UXl4blFrRkJUaXhEUVVGMVFrc3NXVUZCZGtJN1FVRkRSQ3hYUVZJeVFqdEJRVk0xUW1Nc1owSkJRVTBzWjBKQlFWYzdRVUZEWm1Jc2VVSkJRV0ZxUkN4SlFVRmlMRU5CUVd0Q0xHTkJRV3hDTEVWQlFXdERjVUlzUzBGQmJFTTdRVUZEUVhoQ0xHdENRVUZOT0VNc1owSkJRVTRzUTBGQmRVSk5MRmxCUVhaQ08wRkJRMFFzVjBGYU1rSTdRVUZoTlVKakxHMUNRVUZUTEcxQ1FVRlhPMEZCUTJ4Q2RrSXNZMEZCUlVVc1pVRkJSanRCUVVOQlJpeGpRVUZGUXl4alFVRkdPMEZCUTBRN1FVRm9RakpDTEZOQlFUbENPMEZCYTBKRUxFOUJla05FTzBGQk1FTkVPenRCUVVWRU96czdPenM3T3pzN08zRkRRVTlwUW5WQ0xFOHNSVUZCVTBNc1l5eEZRVUZuUWpzN1FVRkZlRU03T3p0QlFVZEJMRlZCUVVsRUxGRkJRVkY0UkN4UlFVRlNMRTFCUVc5Q0xFdEJRVXR5UWl4UFFVRk1MRU5CUVdGelFpeGxRVUZxUXl4RFFVRktMRVZCUVhsRU8wRkJRM0pFTEZsQlFVY3NTMEZCUzNSQ0xFOUJRVXdzUTBGQllTdEZMR05CUVdoQ0xFVkJRV2RETzBGQlF6VkNMR1ZCUVV0RExGbEJRVXdzUTBGQmEwSklMRTlCUVd4Q096dEJRVVZFT3pzN08wRkJTVU1zWlVGQlN6VkZMRkZCUVV3c1EwRkJZelJETEU5QlFXUXNRMEZCYzBJc2EwSkJRWFJDTEVWQlFUQkRMRU5CUVVOblF5eFBRVUZFTEVOQlFURkRPMEZCUTBnN1FVRkRSRHRCUVVOSU96dEJRVVZFTEZWQlFVbEpMRlZCUVZVc1MwRkJTMmhHTEZGQlFVd3NRMEZEVWxrc1NVRkVVU3hQUVVORExFdEJRVXRpTEU5QlFVd3NRMEZCWVdNc1UwRkVaQ3hUUVVNeVFpeExRVUZMWkN4UFFVRk1MRU5CUVdGelFpeGxRVVI0UXl4RFFVRmtPMEZCUVVFc1ZVRkZUVFJFTEZkQlFWZE1MRkZCUVZGb1JTeEpRVUZTTEVOQlFXRXNZMEZCWWl4RFFVWnFRanRCUVVGQkxGVkJSMDFWTEU5QlFVOHlSQ3hUUVVGVGRrVXNTVUZCVkN4RFFVRmpMR3RDUVVGa0xFdEJRWEZEZFVVc1UwRkJVeXhEUVVGVUxFVkJRVmt6UkN4SlFVRmFMRU5CUVdsQ1F5eExRVUZxUWl4RFFVRjFRaXhEUVVGMlFpeERRVWhzUkR0QlFVRkJMRlZCU1UweVJDeHBRa0ZCYVVJc1MwRkJTM0JGTEZkQlFVd3NRMEZCYVVKR0xFbEJRV3BDTEU5QlFUQkNWU3hKUVVFeFFpeERRVXAyUWpzN1FVRk5RVHRCUVVOQkxGZEJRVXQ1UkN4WlFVRk1MRU5CUVd0Q1F5eFBRVUZzUWpzN1FVRkZRVHRCUVVOQkxGZEJRVXRITEZGQlFVd3NRMEZCWTFBc1QwRkJaRHM3UVVGRlFUdEJRVU5CTEZWQlFVa3NTMEZCU3pkRkxFOUJRVXdzUTBGQllUaERMRkZCUVdJc1NVRkJlVUlzUTBGQlEyZERMR05CUVRsQ0xFVkJRVGhETzBGQlF6VkRMRmxCUVVseVF5eFRRVUZUYjBNc1VVRkJVV2hGTEVsQlFWSXNRMEZCWVN4SFFVRmlMRVZCUVd0Q1JpeEpRVUZzUWl4RFFVRjFRaXhOUVVGMlFpeERRVUZpT3p0QlFVVkJMRmxCUVVrc1MwRkJTMWdzVDBGQlRDeERRVUZoY1VZc1lVRkJha0lzUlVGQlowTTdRVUZET1VKRExHdENRVUZSUXl4VFFVRlNMRU5CUVd0Q0xFVkJRV3hDTEVWQlFYTkNMRVZCUVhSQ0xFVkJRVEJDT1VNc1RVRkJNVUk3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVERaRExHdENRVUZSUlN4WlFVRlNMRU5CUVhGQ0xFVkJRWEpDTEVWQlFYbENMRVZCUVhwQ0xFVkJRVFpDTDBNc1RVRkJOMEk3UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3TzBGQlNVRXNWMEZCUzNoRExGRkJRVXdzUTBGQll6UkRMRTlCUVdRc1EwRkJjMElzWjBKQlFYUkNMRVZCUVhkRExFTkJRVU5uUXl4UFFVRkVMRVZCUVZWTkxHTkJRVllzUTBGQmVFTTdPMEZCUlVFN1FVRkRRVUVzY1VKQlFXVjBSU3hKUVVGbUxFTkJRVzlDTEdWQlFYQkNMRVZCUVhGRFowTXNUMEZCY2tNc1EwRkJOa01zY1VKQlFUZERPMEZCUTBRN08wRkJSVVE3T3pzN096czdPelpDUVV0VFowTXNUeXhGUVVGVE8wRkJRMlFzVlVGQlNVc3NWMEZCVjB3c1VVRkJVV2hGTEVsQlFWSXNRMEZCWVN4alFVRmlMRU5CUVdZN1FVRkJRU3hWUVVOSlZTeFBRVUZQTWtRc1UwRkJVM1pGTEVsQlFWUXNRMEZCWXl4clFrRkJaQ3hMUVVGeFEzVkZMRk5CUVZNc1EwRkJWQ3hGUVVGWk0wUXNTVUZCV2l4RFFVRnBRa01zUzBGQmFrSXNRMEZCZFVJc1EwRkJka0lzUTBGRWFFUTdRVUZCUVN4VlFVVkpNa1FzYVVKQlFXbENMRXRCUVV0d1JTeFhRVUZNTEVOQlFXbENSaXhKUVVGcVFpeFBRVUV3UWxVc1NVRkJNVUlzUTBGR2NrSTdPMEZCU1VGelJDeGpRVUZSV1N4UlFVRlNMRTFCUVc5Q0xFdEJRVXQ2Uml4UFFVRk1MRU5CUVdGelFpeGxRVUZxUXpzN1FVRkZRVFJFTEdWQlFWTjJSU3hKUVVGVUxFTkJRV003UVVGRFdpeDVRa0ZCYVVJc1RVRkVURHRCUVVWYUxHOUNRVUZaTzBGQlJrRXNUMEZCWkRzN1FVRkxRWGRGTEhGQ1FVTkhUU3hSUVVSSUxFMUJRMlVzUzBGQlMzcEdMRTlCUVV3c1EwRkJZVEJHTEdkQ1FVUTFRaXhGUVVOblJFTXNWVUZFYUVRc1EwRkRNa1FzWVVGRU0wUTdRVUZGU0RzN1FVRkZSRHM3T3pzN096czdhVU5CUzJGa0xFOHNSVUZCVXp0QlFVTndRaXhWUVVGSlpTeHBRa0ZCYVVKbUxGRkJRMnhDWjBJc1YwRkVhMElzVFVGRFNDeExRVUZMTjBZc1QwRkJUQ3hEUVVGaGMwSXNaVUZFVml4RlFVVnNRbFFzU1VGR2EwSXNRMEZGWWl4alFVWmhMRVZCUjJ4Q1JpeEpRVWhyUWl4RFFVZGlPMEZCUTBvc2VVSkJRV2xDTEU5QlJHSTdRVUZGU2l4dlFrRkJXU3hEUVVGRE8wRkJSbFFzVDBGSVlTeERRVUZ5UWpzN1FVRlJRU3hyUTBGQlRXbEdMR1ZCUVdWcVJpeEpRVUZtTEVOQlFXOUNMR1ZCUVhCQ0xFTkJRVTRzUlVGRFIydEdMRmRCUkVnc1RVRkRhMElzUzBGQlN6ZEdMRTlCUVV3c1EwRkJZVEJHTEdkQ1FVUXZRaXhGUVVWSEwwVXNTVUZHU0N4RFFVVlJMRVZCUVVVc1pVRkJaU3hOUVVGcVFpeEZRVVpTTzBGQlIwUTdPMEZCUlVRN096czdPenM3T3pzNFFrRk5WVzFHTEVrc1JVRkJUV2hDTEdNc1JVRkJaMEk3UVVGRE9VSXNWVUZCU1dsQ0xFdEJRVW83TzBGQlJVRXNWVUZCU1N4UlFVRlBSQ3hKUVVGUUxIbERRVUZQUVN4SlFVRlFMRTlCUVdkQ0xGRkJRWEJDTEVWQlFUaENPMEZCUXpWQ1F5eG5Ra0ZCVVVRc1MwRkJTeXhEUVVGTUxFVkJRVkU1UlN4RlFVRm9RanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NSzBVc1owSkJRVkZFTEVsQlFWSTdRVUZEUkRzN1FVRkZSQ3hWUVVGSlF5eE5RVUZOUXl4UFFVRk9MRU5CUVdNc1IwRkJaQ3hKUVVGeFFpeERRVUY2UWl4RlFVRTBRanRCUVVNeFFrUXNjMEpCUVZsQkxFdEJRVm83UVVGRFJEczdRVUZGUkN4VlFVRkpiRUlzVlVGQlZTeExRVUZMYWtVc1ZVRkJUQ3hEUVVGblFrTXNTVUZCYUVJc1kwRkJaME5yUml4TFFVRm9ReXhUUVVFeVEzQkRMRTFCUVRORExFOUJRWE5FTEV0QlFVc3pSQ3hQUVVGTUxFTkJRV0ZqTEZOQlFXNUZMRU5CUVdRN08wRkJSVUVzVjBGQlN6QkRMR2RDUVVGTUxFTkJRWE5DY1VJc1QwRkJkRUlzUlVGQkswSkRMR05CUVM5Q08wRkJRMFE3T3pzN1FVRkRSRHM3T3pzN096czdhVU5CVVdFN1FVRkRXQ3hWUVVGSlVpeE5RVUZOTEVOQlFWWTdRVUZCUVN4VlFVTkpOVVFzVVVGQlVTeEpRVVJhTEVOQlJGY3NRMEZGVHpzN1FVRkZiRUlzVjBGQlMwc3NWMEZCVEN4RFFVTkhSaXhKUVVSSUxFOUJRMWtzUzBGQlMySXNUMEZCVEN4RFFVRmhhVWNzVlVGRWVrSXNSVUZGUjBNc1IwRkdTQ3hEUVVWUExGRkJSbEFzUlVGRmFVSXNSVUZHYWtJc1JVRkhSMnBHTEVsQlNFZ3NRMEZIVVN4WlFVRlhPenRCUVVWbUxGbEJRVWxyUml4UlFVRlJMSE5DUVVGRkxFbEJRVVlzUTBGQldqdEJRVUZCTEZsQlEwa3ZSU3hYUVVGWEswVXNUVUZCVFRsRkxGRkJRVTRzVFVGQmEwSllMRTFCUVUxV0xFOUJRVTRzUTBGQll6QkdMR2RDUVVGb1F5eERRVVJtTEVOQlJtVXNRMEZIY1VRN08wRkJSWEJGTEZsQlFVa3NRMEZCUTNSRkxGRkJRVXdzUlVGQlpUdEJRVU5pSzBVc1owSkJRVTFFTEVkQlFVNHNRMEZCVlN4RlFVRkRMR05CUVdNc1VVRkJaaXhGUVVGNVFpeFhRVUZYTEU5QlFYQkRMRVZCUVZZN1FVRkRSRHM3UVVGRlJDeFpRVUZKUlN4UFFVRlBMRXRCUVV0RExIRkNRVUZNTEVkQlFUWkNReXhOUVVGNFF6czdRVUZGUVN4WlFVRkpMRU5CUVVOc1JpeFJRVUZNTEVWQlFXVTdRVUZEWWl0RkxHZENRVUZOUkN4SFFVRk9MRU5CUVZVN1FVRkRVaXd3UWtGQll5eEZRVVJPTzBGQlJWSXNkVUpCUVZjN1FVRkdTQ3hYUVVGV08wRkJTVVE3TzBGQlJVUTFRaXhqUVVGTk9FSXNUMEZCVHpsQ0xFZEJRVkFzUjBGQllUaENMRWxCUVdJc1IwRkJiMEk1UWl4SFFVRXhRanRCUVVORUxFOUJkRUpJTEVWQmRVSkhORUlzUjBGMlFrZ3NRMEYxUWs4c1VVRjJRbEFzUlVGMVFtOUNOVUlzUjBGMlFuQkNPMEZCZDBKRU96dEJRVVZFT3pzN096czdPeXRDUVVsWE8wRkJRMVFzVjBGQlMzSkZMRkZCUVV3c1EwRkRSMWtzU1VGRVNDeFBRVU5aTEV0QlFVdGlMRTlCUVV3c1EwRkJZV01zVTBGRWVrSXNSVUZGUjNORExFZEJSa2dzUTBGRlR5eFZRVVpRTEVWQlJXMUNiVVFzU1VGR2JrSXNSMEZGTUVKRExFZEJSakZDTEVkQlIwY3pSaXhKUVVoSUxFOUJSMWtzUzBGQlMySXNUMEZCVEN4RFFVRmhhVWNzVlVGSWVrSXNSVUZKUjAwc1NVRktTRHM3UVVGTlFTeFZRVUZKTEV0QlFVdDJSeXhQUVVGTUxFTkJRV0Z0UXl4WFFVRnFRaXhGUVVFNFFqdEJRVU0xUWl4WlFVRkpMRXRCUVV0bExHMUNRVUZNTEVsQlFUUkNMRWxCUVdoRExFVkJRWE5ETzBGQlEyNURMR2REUVVGRmRrSXNUVUZCUml4RlFVRlZlVUlzUjBGQlZpeERRVUZqTEhWQ1FVRmtMRVZCUVhWRExFdEJRVXRHTEcxQ1FVRTFRenRCUVVOR08wRkJRMFk3TzBGQlJVUXNWVUZCU1N4TFFVRkxiRVFzVDBGQlRDeERRVUZoT0VNc1VVRkJha0lzUlVGQk1rSTdRVUZEZWtJc09FSkJRVVZ1UWl4TlFVRkdMRVZCUVZWNVFpeEhRVUZXTEVOQlFXTXNWVUZCWkN4RlFVRXdRaXhMUVVGTFdpeGpRVUV2UWp0QlFVTkVPMEZCUlVZN096czdSVUU1V0dkQ2FVVXNhMEk3TzBGQmFWbHVRak5ITEV0QlFVdE5MRkZCUVV3c1IwRkJaMEk3UVVGRFpEczdPenM3TzBGQlRVRXdReXhaUVVGVkxFdEJVRWs3TzBGQlUyUTdPenM3T3p0QlFVMUJSaXhyUWtGQlowSXNTMEZtUmpzN1FVRnBRbVE3T3pzN096dEJRVTFCV0N4MVFrRkJjVUlzUjBGMlFsQTdPMEZCZVVKa096czdPenM3UVVGTlFXOUVMR2xDUVVGbExFdEJMMEpFT3p0QlFXbERaRHM3T3pzN096dEJRVTlCTTBRc1lVRkJWeXhMUVhoRFJ6czdRVUV3UTJRN096czdPenRCUVUxQmRVTXNZMEZCV1N4SlFXaEVSVHM3UVVGclJHUTdPenM3T3p0QlFVMUJPVUlzWlVGQllTeExRWGhFUXpzN1FVRXdSR1E3T3pzN096dEJRVTFCTkVNc2EwSkJRV2RDTEV0QmFFVkdPenRCUVd0RlpEczdPenM3TzBGQlRVRnFSU3hoUVVGWExGbEJlRVZIT3p0QlFUQkZaRHM3T3pzN08wRkJUVUZSTEcxQ1FVRnBRaXhYUVdoR1NEczdRVUZyUm1RN096czdPenRCUVUxQk1rVXNZMEZCV1N4WlFYaEdSVHM3UVVFd1JtUTdPenM3T3p0QlFVMUJVQ3h2UWtGQmEwSTdRVUZvUjBvc1EwRkJhRUk3TzFGQmJVZFJOVVlzU1N4SFFVRkJRU3hKSWl3aVptbHNaU0k2SW1admRXNWtZWFJwYjI0dWRHRmljeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXMXdiM0owSUNRZ1puSnZiU0FuYW5GMVpYSjVKenRjYm1sdGNHOXlkQ0I3SUV0bGVXSnZZWEprSUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1YTJWNVltOWhjbVFuTzF4dWFXMXdiM0owSUhzZ2IyNUpiV0ZuWlhOTWIyRmtaV1FnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzVwYldGblpVeHZZV1JsY2ljN1hHNXBiWEJ2Y25RZ2V5QlFiSFZuYVc0Z2ZTQm1jbTl0SUNjdUwyWnZkVzVrWVhScGIyNHVjR3gxWjJsdUp6dGNiaThxS2x4dUlDb2dWR0ZpY3lCdGIyUjFiR1V1WEc0Z0tpQkFiVzlrZFd4bElHWnZkVzVrWVhScGIyNHVkR0ZpYzF4dUlDb2dRSEpsY1hWcGNtVnpJR1p2ZFc1a1lYUnBiMjR1ZFhScGJDNXJaWGxpYjJGeVpGeHVJQ29nUUhKbGNYVnBjbVZ6SUdadmRXNWtZWFJwYjI0dWRYUnBiQzVwYldGblpVeHZZV1JsY2lCcFppQjBZV0p6SUdOdmJuUmhhVzRnYVcxaFoyVnpYRzRnS2k5Y2JseHVZMnhoYzNNZ1ZHRmljeUJsZUhSbGJtUnpJRkJzZFdkcGJpQjdYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJR2x1YzNSaGJtTmxJRzltSUhSaFluTXVYRzRnSUNBcUlFQmpiR0Z6YzF4dUlDQWdLaUJBYm1GdFpTQlVZV0p6WEc0Z0lDQXFJRUJtYVhKbGN5QlVZV0p6STJsdWFYUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0cVVYVmxjbmw5SUdWc1pXMWxiblFnTFNCcVVYVmxjbmtnYjJKcVpXTjBJSFJ2SUcxaGEyVWdhVzUwYnlCMFlXSnpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElFOTJaWEp5YVdSbGN5QjBieUIwYUdVZ1pHVm1ZWFZzZENCd2JIVm5hVzRnYzJWMGRHbHVaM011WEc0Z0lDQXFMMXh1SUNCZmMyVjBkWEFvWld4bGJXVnVkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJQ1F1WlhoMFpXNWtLSHQ5TENCVVlXSnpMbVJsWm1GMWJIUnpMQ0IwYUdsekxpUmxiR1Z0Wlc1MExtUmhkR0VvS1N3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZEdocGN5NWpiR0Z6YzA1aGJXVWdQU0FuVkdGaWN5YzdJQzh2SUdsbE9TQmlZV05ySUdOdmJYQmhkRnh1WEc0Z0lDQWdkR2hwY3k1ZmFXNXBkQ2dwTzF4dUlDQWdJRXRsZVdKdllYSmtMbkpsWjJsemRHVnlLQ2RVWVdKekp5d2dlMXh1SUNBZ0lDQWdKMFZPVkVWU0p6b2dKMjl3Wlc0bkxGeHVJQ0FnSUNBZ0oxTlFRVU5GSnpvZ0oyOXdaVzRuTEZ4dUlDQWdJQ0FnSjBGU1VrOVhYMUpKUjBoVUp6b2dKMjVsZUhRbkxGeHVJQ0FnSUNBZ0owRlNVazlYWDFWUUp6b2dKM0J5WlhacGIzVnpKeXhjYmlBZ0lDQWdJQ2RCVWxKUFYxOUVUMWRPSnpvZ0oyNWxlSFFuTEZ4dUlDQWdJQ0FnSjBGU1VrOVhYMHhGUmxRbk9pQW5jSEpsZG1sdmRYTW5YRzRnSUNBZ0lDQXZMeUFuVkVGQ0p6b2dKMjVsZUhRbkxGeHVJQ0FnSUNBZ0x5OGdKMU5JU1VaVVgxUkJRaWM2SUNkd2NtVjJhVzkxY3lkY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibWwwYVdGc2FYcGxjeUIwYUdVZ2RHRmljeUJpZVNCemFHOTNhVzVuSUdGdVpDQm1iMk4xYzJsdVp5QW9hV1lnWVhWMGIwWnZZM1Z6UFhSeWRXVXBJSFJvWlNCd2NtVnpaWFFnWVdOMGFYWmxJSFJoWWk1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5cGJtbDBLQ2tnZTF4dUlDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQjBhR2x6TGlSbGJHVnRaVzUwTG1GMGRISW9leWR5YjJ4bEp6b2dKM1JoWW14cGMzUW5mU2s3WEc0Z0lDQWdkR2hwY3k0a2RHRmlWR2wwYkdWeklEMGdkR2hwY3k0a1pXeGxiV1Z1ZEM1bWFXNWtLR0F1Skh0MGFHbHpMbTl3ZEdsdmJuTXViR2x1YTBOc1lYTnpmV0FwTzF4dUlDQWdJSFJvYVhNdUpIUmhZa052Ym5SbGJuUWdQU0FrS0dCYlpHRjBZUzEwWVdKekxXTnZiblJsYm5ROVhDSWtlM1JvYVhNdUpHVnNaVzFsYm5SYk1GMHVhV1I5WENKZFlDazdYRzVjYmlBZ0lDQjBhR2x6TGlSMFlXSlVhWFJzWlhNdVpXRmphQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnZG1GeUlDUmxiR1Z0SUQwZ0pDaDBhR2x6S1N4Y2JpQWdJQ0FnSUNBZ0lDQWtiR2x1YXlBOUlDUmxiR1Z0TG1acGJtUW9KMkVuS1N4Y2JpQWdJQ0FnSUNBZ0lDQnBjMEZqZEdsMlpTQTlJQ1JsYkdWdExtaGhjME5zWVhOektHQWtlMTkwYUdsekxtOXdkR2x2Ym5NdWJHbHVhMEZqZEdsMlpVTnNZWE56ZldBcExGeHVJQ0FnSUNBZ0lDQWdJR2hoYzJnZ1BTQWtiR2x1YXk1aGRIUnlLQ2RrWVhSaExYUmhZbk10ZEdGeVoyVjBKeWtnZkh3Z0pHeHBibXRiTUYwdWFHRnphQzV6YkdsalpTZ3hLU3hjYmlBZ0lDQWdJQ0FnSUNCc2FXNXJTV1FnUFNBa2JHbHVhMXN3WFM1cFpDQS9JQ1JzYVc1cld6QmRMbWxrSURvZ1lDUjdhR0Z6YUgwdGJHRmlaV3hnTEZ4dUlDQWdJQ0FnSUNBZ0lDUjBZV0pEYjI1MFpXNTBJRDBnSkNoZ0l5UjdhR0Z6YUgxZ0tUdGNibHh1SUNBZ0lDQWdKR1ZzWlcwdVlYUjBjaWg3SjNKdmJHVW5PaUFuY0hKbGMyVnVkR0YwYVc5dUozMHBPMXh1WEc0Z0lDQWdJQ0FrYkdsdWF5NWhkSFJ5S0h0Y2JpQWdJQ0FnSUNBZ0ozSnZiR1VuT2lBbmRHRmlKeXhjYmlBZ0lDQWdJQ0FnSjJGeWFXRXRZMjl1ZEhKdmJITW5PaUJvWVhOb0xGeHVJQ0FnSUNBZ0lDQW5ZWEpwWVMxelpXeGxZM1JsWkNjNklHbHpRV04wYVhabExGeHVJQ0FnSUNBZ0lDQW5hV1FuT2lCc2FXNXJTV1FzWEc0Z0lDQWdJQ0FnSUNkMFlXSnBibVJsZUNjNklHbHpRV04wYVhabElEOGdKekFuSURvZ0p5MHhKMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNSMFlXSkRiMjUwWlc1MExtRjBkSElvZTF4dUlDQWdJQ0FnSUNBbmNtOXNaU2M2SUNkMFlXSndZVzVsYkNjc1hHNGdJQ0FnSUNBZ0lDZGhjbWxoTFd4aFltVnNiR1ZrWW5rbk9pQnNhVzVyU1dSY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQnBaaWdoYVhOQlkzUnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ0pIUmhZa052Ym5SbGJuUXVZWFIwY2lnbllYSnBZUzFvYVdSa1pXNG5MQ0FuZEhKMVpTY3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlocGMwRmpkR2wyWlNBbUppQmZkR2hwY3k1dmNIUnBiMjV6TG1GMWRHOUdiMk4xY3lsN1hHNGdJQ0FnSUNBZ0lDUW9kMmx1Wkc5M0tTNXNiMkZrS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ1FvSjJoMGJXd3NJR0p2WkhrbktTNWhibWx0WVhSbEtIc2djMk55YjJ4c1ZHOXdPaUFrWld4bGJTNXZabVp6WlhRb0tTNTBiM0FnZlN3Z1gzUm9hWE11YjNCMGFXOXVjeTVrWldWd1RHbHVhMU50ZFdSblpVUmxiR0Y1TENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtiR2x1YXk1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JwWmloMGFHbHpMbTl3ZEdsdmJuTXViV0YwWTJoSVpXbG5hSFFwSUh0Y2JpQWdJQ0FnSUhaaGNpQWthVzFoWjJWeklEMGdkR2hwY3k0a2RHRmlRMjl1ZEdWdWRDNW1hVzVrS0NkcGJXY25LVHRjYmx4dUlDQWdJQ0FnYVdZZ0tDUnBiV0ZuWlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lHOXVTVzFoWjJWelRHOWhaR1ZrS0NScGJXRm5aWE1zSUhSb2FYTXVYM05sZEVobGFXZG9kQzVpYVc1a0tIUm9hWE1wS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05sZEVobGFXZG9kQ2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQ0F2TDJOMWNuSmxiblFnWTI5dWRHVjRkQzFpYjNWdVpDQm1kVzVqZEdsdmJpQjBieUJ2Y0dWdUlIUmhZbk1nYjI0Z2NHRm5aU0JzYjJGa0lHOXlJR2hwYzNSdmNua2djRzl3YzNSaGRHVmNiaUFnSUNCMGFHbHpMbDlqYUdWamEwUmxaWEJNYVc1cklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RtRnlJR0Z1WTJodmNpQTlJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNW9ZWE5vTzF4dUlDQWdJQ0FnTHk5dVpXVmtJR0VnYUdGemFDQmhibVFnWVNCeVpXeGxkbUZ1ZENCaGJtTm9iM0lnYVc0Z2RHaHBjeUIwWVdKelpYUmNiaUFnSUNBZ0lHbG1LR0Z1WTJodmNpNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUNSc2FXNXJJRDBnZEdocGN5NGtaV3hsYldWdWRDNW1hVzVrS0NkYmFISmxaaVE5WENJbksyRnVZMmh2Y2lzblhDSmRKeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2tiR2x1YXk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJHVmpkRlJoWWlna0tHRnVZMmh2Y2lrc0lIUnlkV1VwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeTl5YjJ4c0lIVndJR0VnYkdsMGRHeGxJSFJ2SUhOb2IzY2dkR2hsSUhScGRHeGxjMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WkdWbGNFeHBibXRUYlhWa1oyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2Wm1aelpYUWdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1abk5sZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbmFIUnRiQ3dnWW05a2VTY3BMbUZ1YVcxaGRHVW9leUJ6WTNKdmJHeFViM0E2SUc5bVpuTmxkQzUwYjNBZ2ZTd2dkR2hwY3k1dmNIUnBiMjV6TG1SbFpYQk1hVzVyVTIxMVpHZGxSR1ZzWVhrcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tpQkdhWEpsY3lCM2FHVnVJSFJvWlNCNmNHeDFaMmx1SUdoaGN5QmtaV1Z3YkdsdWEyVmtJR0YwSUhCaFoyVnNiMkZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXFJRUJsZG1WdWRDQlVZV0p6STJSbFpYQnNhVzVyWEc0Z0lDQWdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KMlJsWlhCc2FXNXJMbnBtTG5SaFluTW5MQ0JiSkd4cGJtc3NJQ1FvWVc1amFHOXlLVjBwTzF4dUlDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lIMWNiaUFnSUNBZ2ZWeHVYRzRnSUNBZ0x5OTFjMlVnWW5KdmQzTmxjaUIwYnlCdmNHVnVJR0VnZEdGaUxDQnBaaUJwZENCbGVHbHpkSE1nYVc0Z2RHaHBjeUIwWVdKelpYUmNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1SbFpYQk1hVzVyS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlqYUdWamEwUmxaWEJNYVc1cktDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXUmtjeUJsZG1WdWRDQm9ZVzVrYkdWeWN5Qm1iM0lnYVhSbGJYTWdkMmwwYUdsdUlIUm9aU0IwWVdKekxseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gyVjJaVzUwY3lncElIdGNiaUFnSUNCMGFHbHpMbDloWkdSTFpYbElZVzVrYkdWeUtDazdYRzRnSUNBZ2RHaHBjeTVmWVdSa1EyeHBZMnRJWVc1a2JHVnlLQ2s3WEc0Z0lDQWdkR2hwY3k1ZmMyVjBTR1ZwWjJoMFRYRklZVzVrYkdWeUlEMGdiblZzYkR0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11YldGMFkyaElaV2xuYUhRcElIdGNiaUFnSUNBZ0lIUm9hWE11WDNObGRFaGxhV2RvZEUxeFNHRnVaR3hsY2lBOUlIUm9hWE11WDNObGRFaGxhV2RvZEM1aWFXNWtLSFJvYVhNcE8xeHVYRzRnSUNBZ0lDQWtLSGRwYm1SdmR5a3ViMjRvSjJOb1lXNW5aV1F1ZW1ZdWJXVmthV0Z4ZFdWeWVTY3NJSFJvYVhNdVgzTmxkRWhsYVdkb2RFMXhTR0Z1Wkd4bGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWW9kR2hwY3k1dmNIUnBiMjV6TG1SbFpYQk1hVzVyS1NCN1hHNGdJQ0FnSUNBa0tIZHBibVJ2ZHlrdWIyNG9KM0J2Y0hOMFlYUmxKeXdnZEdocGN5NWZZMmhsWTJ0RVpXVndUR2x1YXlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nWTJ4cFkyc2dhR0Z1Wkd4bGNuTWdabTl5SUdsMFpXMXpJSGRwZEdocGJpQjBhR1VnZEdGaWN5NWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWhaR1JEYkdsamEwaGhibVJzWlhJb0tTQjdYRzRnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUmNiaUFnSUNBZ0lDNXZabVlvSjJOc2FXTnJMbnBtTG5SaFluTW5LVnh1SUNBZ0lDQWdMbTl1S0NkamJHbGpheTU2Wmk1MFlXSnpKeXdnWUM0a2UzUm9hWE11YjNCMGFXOXVjeTVzYVc1clEyeGhjM045WUN3Z1puVnVZM1JwYjI0b1pTbDdYRzRnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnWlM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDJoaGJtUnNaVlJoWWtOb1lXNW5aU2drS0hSb2FYTXBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nYTJWNVltOWhjbVFnWlhabGJuUWdhR0Z1Wkd4bGNuTWdabTl5SUdsMFpXMXpJSGRwZEdocGJpQjBhR1VnZEdGaWN5NWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOWhaR1JMWlhsSVlXNWtiR1Z5S0NrZ2UxeHVJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0IwYUdsekxpUjBZV0pVYVhSc1pYTXViMlptS0NkclpYbGtiM2R1TG5wbUxuUmhZbk1uS1M1dmJpZ25hMlY1Wkc5M2JpNTZaaTUwWVdKekp5d2dablZ1WTNScGIyNG9aU2w3WEc0Z0lDQWdJQ0JwWmlBb1pTNTNhR2xqYUNBOVBUMGdPU2tnY21WMGRYSnVPMXh1WEc1Y2JpQWdJQ0FnSUhaaGNpQWtaV3hsYldWdWRDQTlJQ1FvZEdocGN5a3NYRzRnSUNBZ0lDQWdJQ1JsYkdWdFpXNTBjeUE5SUNSbGJHVnRaVzUwTG5CaGNtVnVkQ2duZFd3bktTNWphR2xzWkhKbGJpZ25iR2tuS1N4Y2JpQWdJQ0FnSUNBZ0pIQnlaWFpGYkdWdFpXNTBMRnh1SUNBZ0lDQWdJQ0FrYm1WNGRFVnNaVzFsYm5RN1hHNWNiaUFnSUNBZ0lDUmxiR1Z0Wlc1MGN5NWxZV05vS0daMWJtTjBhVzl1S0drcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NRb2RHaHBjeWt1YVhNb0pHVnNaVzFsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TG05d2RHbHZibk11ZDNKaGNFOXVTMlY1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSkhCeVpYWkZiR1Z0Wlc1MElEMGdhU0E5UFQwZ01DQS9JQ1JsYkdWdFpXNTBjeTVzWVhOMEtDa2dPaUFrWld4bGJXVnVkSE11WlhFb2FTMHhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUnVaWGgwUld4bGJXVnVkQ0E5SUdrZ1BUMDlJQ1JsYkdWdFpXNTBjeTVzWlc1bmRHZ2dMVEVnUHlBa1pXeGxiV1Z1ZEhNdVptbHljM1FvS1NBNklDUmxiR1Z0Wlc1MGN5NWxjU2hwS3pFcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa2NISmxka1ZzWlcxbGJuUWdQU0FrWld4bGJXVnVkSE11WlhFb1RXRjBhQzV0WVhnb01Dd2dhUzB4S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrYm1WNGRFVnNaVzFsYm5RZ1BTQWtaV3hsYldWdWRITXVaWEVvVFdGMGFDNXRhVzRvYVNzeExDQWtaV3hsYldWdWRITXViR1Z1WjNSb0xURXBLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnTHk4Z2FHRnVaR3hsSUd0bGVXSnZZWEprSUdWMlpXNTBJSGRwZEdnZ2EyVjVZbTloY21RZ2RYUnBiRnh1SUNBZ0lDQWdTMlY1WW05aGNtUXVhR0Z1Wkd4bFMyVjVLR1VzSUNkVVlXSnpKeXdnZTF4dUlDQWdJQ0FnSUNCdmNHVnVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWtaV3hsYldWdWRDNW1hVzVrS0NkYmNtOXNaVDFjSW5SaFlsd2lYU2NwTG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJoaGJtUnNaVlJoWWtOb1lXNW5aU2drWld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIQnlaWFpwYjNWek9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBa2NISmxka1ZzWlcxbGJuUXVabWx1WkNnblczSnZiR1U5WENKMFlXSmNJbDBuS1M1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5b1lXNWtiR1ZVWVdKRGFHRnVaMlVvSkhCeVpYWkZiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYm1WNGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0pHNWxlSFJGYkdWdFpXNTBMbVpwYm1Rb0oxdHliMnhsUFZ3aWRHRmlYQ0pkSnlrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmFHRnVaR3hsVkdGaVEyaGhibWRsS0NSdVpYaDBSV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdoaGJtUnNaV1E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1V1YzNSdmNGQnliM0JoWjJGMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCUGNHVnVjeUIwYUdVZ2RHRmlJR0FrZEdGeVoyVjBRMjl1ZEdWdWRHQWdaR1ZtYVc1bFpDQmllU0JnSkhSaGNtZGxkR0F1SUVOdmJHeGhjSE5sY3lCaFkzUnBkbVVnZEdGaUxseHVJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnSkhSaGNtZGxkQ0F0SUZSaFlpQjBieUJ2Y0dWdUxseHVJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUdocGMzUnZjbmxJWVc1a2JHVmtJQzBnWW5KdmQzTmxjaUJvWVhNZ1lXeHlaV0ZrZVNCb1lXNWtiR1ZrSUdFZ2FHbHpkRzl5ZVNCMWNHUmhkR1ZjYmlBZ0lDb2dRR1pwY21WeklGUmhZbk1qWTJoaGJtZGxYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2k5Y2JpQWdYMmhoYm1Sc1pWUmhZa05vWVc1blpTZ2tkR0Z5WjJWMExDQm9hWE4wYjNKNVNHRnVaR3hsWkNrZ2UxeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMmhsWTJzZ1ptOXlJR0ZqZEdsMlpTQmpiR0Z6Y3lCdmJpQjBZWEpuWlhRdUlFTnZiR3hoY0hObElHbG1JR1Y0YVhOMGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCcFppQW9KSFJoY21kbGRDNW9ZWE5EYkdGemN5aGdKSHQwYUdsekxtOXdkR2x2Ym5NdWJHbHVhMEZqZEdsMlpVTnNZWE56ZldBcEtTQjdYRzRnSUNBZ0lDQWdJR2xtS0hSb2FYTXViM0IwYVc5dWN5NWhZM1JwZG1WRGIyeHNZWEJ6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZMjlzYkdGd2MyVlVZV0lvSkhSaGNtZGxkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBZ0lDQXFJRVpwY21WeklIZG9aVzRnZEdobElIcHdiSFZuYVc0Z2FHRnpJSE4xWTJObGMzTm1kV3hzZVNCamIyeHNZWEJ6WldRZ2RHRmljeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDb2dRR1YyWlc1MElGUmhZbk1qWTI5c2JHRndjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMaVJsYkdWdFpXNTBMblJ5YVdkblpYSW9KMk52Ykd4aGNITmxMbnBtTG5SaFluTW5MQ0JiSkhSaGNtZGxkRjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ0pHOXNaRlJoWWlBOUlIUm9hWE11SkdWc1pXMWxiblF1WEc0Z0lDQWdJQ0FnSUNBZ1ptbHVaQ2hnTGlSN2RHaHBjeTV2Y0hScGIyNXpMbXhwYm10RGJHRnpjMzB1Skh0MGFHbHpMbTl3ZEdsdmJuTXViR2x1YTBGamRHbDJaVU5zWVhOemZXQXBMRnh1SUNBZ0lDQWdJQ0FnSUNSMFlXSk1hVzVySUQwZ0pIUmhjbWRsZEM1bWFXNWtLQ2RiY205c1pUMWNJblJoWWx3aVhTY3BMRnh1SUNBZ0lDQWdJQ0FnSUdoaGMyZ2dQU0FrZEdGaVRHbHVheTVoZEhSeUtDZGtZWFJoTFhSaFluTXRkR0Z5WjJWMEp5a2dmSHdnSkhSaFlreHBibXRiTUYwdWFHRnphQzV6YkdsalpTZ3hLU3hjYmlBZ0lDQWdJQ0FnSUNBa2RHRnlaMlYwUTI5dWRHVnVkQ0E5SUhSb2FYTXVKSFJoWWtOdmJuUmxiblF1Wm1sdVpDaGdJeVI3YUdGemFIMWdLVHRjYmx4dUlDQWdJQzh2WTJ4dmMyVWdiMnhrSUhSaFlseHVJQ0FnSUhSb2FYTXVYMk52Ykd4aGNITmxWR0ZpS0NSdmJHUlVZV0lwTzF4dVhHNGdJQ0FnTHk5dmNHVnVJRzVsZHlCMFlXSmNiaUFnSUNCMGFHbHpMbDl2Y0dWdVZHRmlLQ1IwWVhKblpYUXBPMXh1WEc0Z0lDQWdMeTlsYVhSb1pYSWdjbVZ3YkdGalpTQnZjaUIxY0dSaGRHVWdZbkp2ZDNObGNpQm9hWE4wYjNKNVhHNGdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVrWldWd1RHbHVheUFtSmlBaGFHbHpkRzl5ZVVoaGJtUnNaV1FwSUh0Y2JpQWdJQ0FnSUhaaGNpQmhibU5vYjNJZ1BTQWtkR0Z5WjJWMExtWnBibVFvSjJFbktTNWhkSFJ5S0Nkb2NtVm1KeWs3WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11ZFhCa1lYUmxTR2x6ZEc5eWVTa2dlMXh1SUNBZ0lDQWdJQ0JvYVhOMGIzSjVMbkIxYzJoVGRHRjBaU2g3ZlN3Z0p5Y3NJR0Z1WTJodmNpazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQm9hWE4wYjNKNUxuSmxjR3hoWTJWVGRHRjBaU2g3ZlN3Z0p5Y3NJR0Z1WTJodmNpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbWx5WlhNZ2QyaGxiaUIwYUdVZ2NHeDFaMmx1SUdoaGN5QnpkV05qWlhOelpuVnNiSGtnWTJoaGJtZGxaQ0IwWVdKekxseHVJQ0FnSUNBcUlFQmxkbVZ1ZENCVVlXSnpJMk5vWVc1blpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25ZMmhoYm1kbExucG1MblJoWW5NbkxDQmJKSFJoY21kbGRDd2dKSFJoY21kbGRFTnZiblJsYm5SZEtUdGNibHh1SUNBZ0lDOHZabWx5WlNCMGJ5QmphR2xzWkhKbGJpQmhJRzExZEdGMGFXOXVJR1YyWlc1MFhHNGdJQ0FnSkhSaGNtZGxkRU52Ym5SbGJuUXVabWx1WkNoY0lsdGtZWFJoTFcxMWRHRjBaVjFjSWlrdWRISnBaMmRsY2loY0ltMTFkR0YwWlcxbExucG1MblJ5YVdkblpYSmNJaWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1QzQmxibk1nZEdobElIUmhZaUJnSkhSaGNtZGxkRU52Ym5SbGJuUmdJR1JsWm1sdVpXUWdZbmtnWUNSMFlYSm5aWFJnTGx4dUlDQWdLaUJBY0dGeVlXMGdlMnBSZFdWeWVYMGdKSFJoY21kbGRDQXRJRlJoWWlCMGJ5QlBjR1Z1TGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb3ZYRzRnSUY5dmNHVnVWR0ZpS0NSMFlYSm5aWFFwSUh0Y2JpQWdJQ0FnSUhaaGNpQWtkR0ZpVEdsdWF5QTlJQ1IwWVhKblpYUXVabWx1WkNnblczSnZiR1U5WENKMFlXSmNJbDBuS1N4Y2JpQWdJQ0FnSUNBZ0lDQm9ZWE5vSUQwZ0pIUmhZa3hwYm1zdVlYUjBjaWduWkdGMFlTMTBZV0p6TFhSaGNtZGxkQ2NwSUh4OElDUjBZV0pNYVc1cld6QmRMbWhoYzJndWMyeHBZMlVvTVNrc1hHNGdJQ0FnSUNBZ0lDQWdKSFJoY21kbGRFTnZiblJsYm5RZ1BTQjBhR2x6TGlSMFlXSkRiMjUwWlc1MExtWnBibVFvWUNNa2UyaGhjMmg5WUNrN1hHNWNiaUFnSUNBZ0lDUjBZWEpuWlhRdVlXUmtRMnhoYzNNb1lDUjdkR2hwY3k1dmNIUnBiMjV6TG14cGJtdEJZM1JwZG1WRGJHRnpjMzFnS1R0Y2JseHVJQ0FnSUNBZ0pIUmhZa3hwYm1zdVlYUjBjaWg3WEc0Z0lDQWdJQ0FnSUNkaGNtbGhMWE5sYkdWamRHVmtKem9nSjNSeWRXVW5MRnh1SUNBZ0lDQWdJQ0FuZEdGaWFXNWtaWGduT2lBbk1DZGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FrZEdGeVoyVjBRMjl1ZEdWdWRGeHVJQ0FnSUNBZ0lDQXVZV1JrUTJ4aGMzTW9ZQ1I3ZEdocGN5NXZjSFJwYjI1ekxuQmhibVZzUVdOMGFYWmxRMnhoYzNOOVlDa3VjbVZ0YjNabFFYUjBjaWduWVhKcFlTMW9hV1JrWlc0bktUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYjJ4c1lYQnpaWE1nWUNSMFlYSm5aWFJEYjI1MFpXNTBZQ0JrWldacGJtVmtJR0o1SUdBa2RHRnlaMlYwWUM1Y2JpQWdJQ29nUUhCaGNtRnRJSHRxVVhWbGNubDlJQ1IwWVhKblpYUWdMU0JVWVdJZ2RHOGdUM0JsYmk1Y2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFMMXh1SUNCZlkyOXNiR0Z3YzJWVVlXSW9KSFJoY21kbGRDa2dlMXh1SUNBZ0lIWmhjaUFrZEdGeVoyVjBYMkZ1WTJodmNpQTlJQ1IwWVhKblpYUmNiaUFnSUNBZ0lDNXlaVzF2ZG1WRGJHRnpjeWhnSkh0MGFHbHpMbTl3ZEdsdmJuTXViR2x1YTBGamRHbDJaVU5zWVhOemZXQXBYRzRnSUNBZ0lDQXVabWx1WkNnblczSnZiR1U5WENKMFlXSmNJbDBuS1Z4dUlDQWdJQ0FnTG1GMGRISW9lMXh1SUNBZ0lDQWdJQ0FuWVhKcFlTMXpaV3hsWTNSbFpDYzZJQ2RtWVd4elpTY3NYRzRnSUNBZ0lDQWdJQ2QwWVdKcGJtUmxlQ2M2SUMweFhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDUW9ZQ01rZXlSMFlYSm5aWFJmWVc1amFHOXlMbUYwZEhJb0oyRnlhV0V0WTI5dWRISnZiSE1uS1gxZ0tWeHVJQ0FnSUNBZ0xuSmxiVzkyWlVOc1lYTnpLR0FrZTNSb2FYTXViM0IwYVc5dWN5NXdZVzVsYkVGamRHbDJaVU5zWVhOemZXQXBYRzRnSUNBZ0lDQXVZWFIwY2loN0lDZGhjbWxoTFdocFpHUmxiaWM2SUNkMGNuVmxKeUI5S1Z4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQjFZbXhwWXlCdFpYUm9iMlFnWm05eUlITmxiR1ZqZEdsdVp5QmhJR052Ym5SbGJuUWdjR0Z1WlNCMGJ5QmthWE53YkdGNUxseHVJQ0FnS2lCQWNHRnlZVzBnZTJwUmRXVnllU0I4SUZOMGNtbHVaMzBnWld4bGJTQXRJR3BSZFdWeWVTQnZZbXBsWTNRZ2IzSWdjM1J5YVc1bklHOW1JSFJvWlNCcFpDQnZaaUIwYUdVZ2NHRnVaU0IwYnlCa2FYTndiR0Y1TGx4dUlDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJR2hwYzNSdmNubElZVzVrYkdWa0lDMGdZbkp2ZDNObGNpQm9ZWE1nWVd4eVpXRmtlU0JvWVc1a2JHVmtJR0VnYUdsemRHOXllU0IxY0dSaGRHVmNiaUFnSUNvZ1FHWjFibU4wYVc5dVhHNGdJQ0FxTDF4dUlDQnpaV3hsWTNSVVlXSW9aV3hsYlN3Z2FHbHpkRzl5ZVVoaGJtUnNaV1FwSUh0Y2JpQWdJQ0IyWVhJZ2FXUlRkSEk3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWc1pXMGdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNCcFpGTjBjaUE5SUdWc1pXMWJNRjB1YVdRN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xrVTNSeUlEMGdaV3hsYlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FXUlRkSEl1YVc1a1pYaFBaaWduSXljcElEd2dNQ2tnZTF4dUlDQWdJQ0FnYVdSVGRISWdQU0JnSXlSN2FXUlRkSEo5WUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ0pIUmhjbWRsZENBOUlIUm9hWE11SkhSaFlsUnBkR3hsY3k1bWFXNWtLR0JiYUhKbFppUTlYQ0lrZTJsa1UzUnlmVndpWFdBcExuQmhjbVZ1ZENoZ0xpUjdkR2hwY3k1dmNIUnBiMjV6TG14cGJtdERiR0Z6YzMxZ0tUdGNibHh1SUNBZ0lIUm9hWE11WDJoaGJtUnNaVlJoWWtOb1lXNW5aU2drZEdGeVoyVjBMQ0JvYVhOMGIzSjVTR0Z1Wkd4bFpDazdYRzRnSUgwN1hHNGdJQzhxS2x4dUlDQWdLaUJUWlhSeklIUm9aU0JvWldsbmFIUWdiMllnWldGamFDQndZVzVsYkNCMGJ5QjBhR1VnYUdWcFoyaDBJRzltSUhSb1pTQjBZV3hzWlhOMElIQmhibVZzTGx4dUlDQWdLaUJKWmlCbGJtRmliR1ZrSUdsdUlHOXdkR2x2Ym5Nc0lHZGxkSE1nWTJGc2JHVmtJRzl1SUcxbFpHbGhJSEYxWlhKNUlHTm9ZVzVuWlM1Y2JpQWdJQ29nU1dZZ2JHOWhaR2x1WnlCamIyNTBaVzUwSUhacFlTQmxlSFJsY201aGJDQnpiM1Z5WTJVc0lHTmhiaUJpWlNCallXeHNaV1FnWkdseVpXTjBiSGtnYjNJZ2QybDBhQ0JmY21WbWJHOTNMbHh1SUNBZ0tpQkpaaUJsYm1GaWJHVmtJSGRwZEdnZ1lHUmhkR0V0YldGMFkyZ3RhR1ZwWjJoMFBWd2lkSEoxWlZ3aVlDd2dkR0ZpY3lCelpYUnpJSFJ2SUdWeGRXRnNJR2hsYVdkb2RGeHVJQ0FnS2lCQVpuVnVZM1JwYjI1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5elpYUklaV2xuYUhRb0tTQjdYRzRnSUNBZ2RtRnlJRzFoZUNBOUlEQXNYRzRnSUNBZ0lDQWdJRjkwYUdseklEMGdkR2hwY3pzZ0x5OGdURzlqYXlCa2IzZHVJSFJvWlNCZ2RHaHBjMkFnZG1Gc2RXVWdabTl5SUhSb1pTQnliMjkwSUhSaFluTWdiMkpxWldOMFhHNWNiaUFnSUNCMGFHbHpMaVIwWVdKRGIyNTBaVzUwWEc0Z0lDQWdJQ0F1Wm1sdVpDaGdMaVI3ZEdocGN5NXZjSFJwYjI1ekxuQmhibVZzUTJ4aGMzTjlZQ2xjYmlBZ0lDQWdJQzVqYzNNb0oyaGxhV2RvZENjc0lDY25LVnh1SUNBZ0lDQWdMbVZoWTJnb1puVnVZM1JwYjI0b0tTQjdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhibVZzSUQwZ0pDaDBhR2x6S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6UVdOMGFYWmxJRDBnY0dGdVpXd3VhR0Z6UTJ4aGMzTW9ZQ1I3WDNSb2FYTXViM0IwYVc5dWN5NXdZVzVsYkVGamRHbDJaVU5zWVhOemZXQXBPeUF2THlCblpYUWdkR2hsSUc5d2RHbHZibk1nWm5KdmJTQjBhR1VnY0dGeVpXNTBJR2x1YzNSbFlXUWdiMllnZEhKNWFXNW5JSFJ2SUdkbGRDQjBhR1Z0SUdaeWIyMGdkR2hsSUdOb2FXeGtYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBjMEZqZEdsMlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhCaGJtVnNMbU56Y3loN0ozWnBjMmxpYVd4cGRIa25PaUFuYUdsa1pHVnVKeXdnSjJScGMzQnNZWGtuT2lBbllteHZZMnNuZlNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2RHVnRjQ0E5SUhSb2FYTXVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrdWFHVnBaMmgwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYVhOQlkzUnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQndZVzVsYkM1amMzTW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0ozWnBjMmxpYVd4cGRIa25PaUFuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RrYVhOd2JHRjVKem9nSnlkY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHMWhlQ0E5SUhSbGJYQWdQaUJ0WVhnZ1B5QjBaVzF3SURvZ2JXRjRPMXh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQzVqYzNNb0oyaGxhV2RvZENjc0lHQWtlMjFoZUgxd2VHQXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbGMzUnliM2x6SUdGdUlHbHVjM1JoYm1ObElHOW1JR0Z1SUhSaFluTXVYRzRnSUNBcUlFQm1hWEpsY3lCVVlXSnpJMlJsYzNSeWIzbGxaRnh1SUNBZ0tpOWNiaUFnWDJSbGMzUnliM2tvS1NCN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRGeHVJQ0FnSUNBZ0xtWnBibVFvWUM0a2UzUm9hWE11YjNCMGFXOXVjeTVzYVc1clEyeGhjM045WUNsY2JpQWdJQ0FnSUM1dlptWW9KeTU2Wmk1MFlXSnpKeWt1YUdsa1pTZ3BMbVZ1WkNncFhHNGdJQ0FnSUNBdVptbHVaQ2hnTGlSN2RHaHBjeTV2Y0hScGIyNXpMbkJoYm1Wc1EyeGhjM045WUNsY2JpQWdJQ0FnSUM1b2FXUmxLQ2s3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbTFoZEdOb1NHVnBaMmgwS1NCN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMyVjBTR1ZwWjJoMFRYRklZVzVrYkdWeUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ1FvZDJsdVpHOTNLUzV2Wm1Zb0oyTm9ZVzVuWldRdWVtWXViV1ZrYVdGeGRXVnllU2NzSUhSb2FYTXVYM05sZEVobGFXZG9kRTF4U0dGdVpHeGxjaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWtaV1Z3VEdsdWF5a2dlMXh1SUNBZ0lDQWdKQ2gzYVc1a2IzY3BMbTltWmlnbmNHOXdjM1JoZEdVbkxDQjBhR2x6TGw5amFHVmphMFJsWlhCTWFXNXJLVHRjYmlBZ0lDQjlYRzVjYmlBZ2ZWeHVmVnh1WEc1VVlXSnpMbVJsWm1GMWJIUnpJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNkeklIUm9aU0IzYVc1a2IzY2dkRzhnYzJOeWIyeHNJSFJ2SUdOdmJuUmxiblFnYjJZZ2NHRnVaU0J6Y0dWamFXWnBaV1FnWW5rZ2FHRnphQ0JoYm1Ob2IzSmNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ1ptRnNjMlZjYmlBZ0lDb3ZYRzRnSUdSbFpYQk1hVzVyT2lCbVlXeHpaU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRV1JxZFhOMElIUm9aU0JrWldWd0lHeHBibXNnYzJOeWIyeHNJSFJ2SUcxaGEyVWdjM1Z5WlNCMGFHVWdkRzl3SUc5bUlIUm9aU0IwWVdJZ2NHRnVaV3dnYVhNZ2RtbHphV0pzWlZ4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnS2k5Y2JpQWdaR1ZsY0V4cGJtdFRiWFZrWjJVNklHWmhiSE5sTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYm1sdFlYUnBiMjRnZEdsdFpTQW9iWE1wSUdadmNpQjBhR1VnWkdWbGNDQnNhVzVySUdGa2FuVnpkRzFsYm5SY2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0F6TURCY2JpQWdJQ292WEc0Z0lHUmxaWEJNYVc1clUyMTFaR2RsUkdWc1lYazZJRE13TUN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxJSFJvWlNCaWNtOTNjMlZ5SUdocGMzUnZjbmtnZDJsMGFDQjBhR1VnYjNCbGJpQjBZV0pjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdabUZzYzJWY2JpQWdJQ292WEc0Z0lIVndaR0YwWlVocGMzUnZjbms2SUdaaGJITmxMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJiR3h2ZDNNZ2RHaGxJSGRwYm1SdmR5QjBieUJ6WTNKdmJHd2dkRzhnWTI5dWRHVnVkQ0J2WmlCaFkzUnBkbVVnY0dGdVpTQnZiaUJzYjJGa0lHbG1JSE5sZENCMGJ5QjBjblZsTGx4dUlDQWdLaUJPYjNRZ2NtVmpiMjF0Wlc1a1pXUWdhV1lnYlc5eVpTQjBhR0Z1SUc5dVpTQjBZV0lnY0dGdVpXd2djR1Z5SUhCaFoyVXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCaGRYUnZSbTlqZFhNNklHWmhiSE5sTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYkd4dmQzTWdhMlY1WW05aGNtUWdhVzV3ZFhRZ2RHOGdKM2R5WVhBbklHRnliM1Z1WkNCMGFHVWdkR0ZpSUd4cGJtdHpMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDQXFMMXh1SUNCM2NtRndUMjVMWlhsek9pQjBjblZsTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYkd4dmQzTWdkR2hsSUhSaFlpQmpiMjUwWlc1MElIQmhibVZ6SUhSdklHMWhkR05vSUdobGFXZG9kSE1nYVdZZ2MyVjBJSFJ2SUhSeWRXVXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCdFlYUmphRWhsYVdkb2REb2dabUZzYzJVc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGc2JHOTNjeUJoWTNScGRtVWdkR0ZpY3lCMGJ5QmpiMnhzWVhCelpTQjNhR1Z1SUdOc2FXTnJaV1F1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FxTDF4dUlDQmhZM1JwZG1WRGIyeHNZWEJ6WlRvZ1ptRnNjMlVzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU5zWVhOeklHRndjR3hwWldRZ2RHOGdZR3hwWUNkeklHbHVJSFJoWWlCc2FXNXJJR3hwYzNRdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSjNSaFluTXRkR2wwYkdVblhHNGdJQ0FxTDF4dUlDQnNhVzVyUTJ4aGMzTTZJQ2QwWVdKekxYUnBkR3hsSnl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJ4aGMzTWdZWEJ3YkdsbFpDQjBieUIwYUdVZ1lXTjBhWFpsSUdCc2FXQWdhVzRnZEdGaUlHeHBibXNnYkdsemRDNWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBbmFYTXRZV04wYVhabEoxeHVJQ0FnS2k5Y2JpQWdiR2x1YTBGamRHbDJaVU5zWVhOek9pQW5hWE10WVdOMGFYWmxKeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMnhoYzNNZ1lYQndiR2xsWkNCMGJ5QjBhR1VnWTI5dWRHVnVkQ0JqYjI1MFlXbHVaWEp6TGx4dUlDQWdLaUJBYjNCMGFXOXVYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQXFJRUJrWldaaGRXeDBJQ2QwWVdKekxYQmhibVZzSjF4dUlDQWdLaTljYmlBZ2NHRnVaV3hEYkdGemN6b2dKM1JoWW5NdGNHRnVaV3duTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYkdGemN5QmhjSEJzYVdWa0lIUnZJSFJvWlNCaFkzUnBkbVVnWTI5dWRHVnVkQ0JqYjI1MFlXbHVaWEl1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdKMmx6TFdGamRHbDJaU2RjYmlBZ0lDb3ZYRzRnSUhCaGJtVnNRV04wYVhabFEyeGhjM002SUNkcGN5MWhZM1JwZG1VblhHNTlPMXh1WEc1bGVIQnZjblFnZTFSaFluTjlPMXh1SWwxOVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uLnRhYnMuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVG9nZ2xlciA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9qcXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcblxudmFyIF9qcXVlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfanF1ZXJ5KTtcblxudmFyIF9mb3VuZGF0aW9uVXRpbCA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLm1vdGlvbicpO1xuXG52YXIgX2ZvdW5kYXRpb24gPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24ucGx1Z2luJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRvZ2dsZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvZ2dsZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxudmFyIFRvZ2dsZXIgPSBmdW5jdGlvbiAoX1BsdWdpbikge1xuICBfaW5oZXJpdHMoVG9nZ2xlciwgX1BsdWdpbik7XG5cbiAgZnVuY3Rpb24gVG9nZ2xlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9nZ2xlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRvZ2dsZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUb2dnbGVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG9nZ2xlciwgW3tcbiAgICBrZXk6ICdfc2V0dXAnLFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBUb2dnbGVyLlxuICAgICAqIEBjbGFzc1xuICAgICAqIEBuYW1lIFRvZ2dsZXJcbiAgICAgKiBAZmlyZXMgVG9nZ2xlciNpbml0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9qcXVlcnkyLmRlZmF1bHQuZXh0ZW5kKHt9LCBUb2dnbGVyLmRlZmF1bHRzLCBlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9ICcnO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnVG9nZ2xlcic7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICAvLyBUcmlnZ2VycyBpbml0IGlzIGlkZW1wb3RlbnQsIGp1c3QgbmVlZCB0byBtYWtlIHN1cmUgaXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgIF9mb3VuZGF0aW9uVXRpbDIuVHJpZ2dlcnMuaW5pdChfanF1ZXJ5Mi5kZWZhdWx0KTtcblxuICAgICAgdGhpcy5faW5pdCgpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIFRvZ2dsZXIgcGx1Z2luIGJ5IHBhcnNpbmcgdGhlIHRvZ2dsZSBjbGFzcyBmcm9tIGRhdGEtdG9nZ2xlciwgb3IgYW5pbWF0aW9uIGNsYXNzZXMgZnJvbSBkYXRhLWFuaW1hdGUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciBpbnB1dDtcbiAgICAgIC8vIFBhcnNlIGFuaW1hdGlvbiBjbGFzc2VzIGlmIHRoZXkgd2VyZSBzZXRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgICBpbnB1dCA9IHRoaXMub3B0aW9ucy5hbmltYXRlLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2UsIHBhcnNlIHRvZ2dsZSBjbGFzc1xuICAgICAgZWxzZSB7XG4gICAgICAgICAgaW5wdXQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3RvZ2dsZXInKTtcbiAgICAgICAgICAvLyBBbGxvdyBmb3IgYSAuIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN0cmluZ1xuICAgICAgICAgIHRoaXMuY2xhc3NOYW1lID0gaW5wdXRbMF0gPT09ICcuJyA/IGlucHV0LnNsaWNlKDEpIDogaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgLy8gQWRkIEFSSUEgYXR0cmlidXRlcyB0byB0cmlnZ2Vyc1xuICAgICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZDtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtb3Blbj1cIicgKyBpZCArICdcIl0sIFtkYXRhLWNsb3NlPVwiJyArIGlkICsgJ1wiXSwgW2RhdGEtdG9nZ2xlPVwiJyArIGlkICsgJ1wiXScpLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG4gICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGhpZGRlbiwgYWRkIGFyaWEtaGlkZGVuXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykgPyBmYWxzZSA6IHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIHRvZ2dsZSB0cmlnZ2VyLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19ldmVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRzKCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3RvZ2dsZS56Zi50cmlnZ2VyJykub24oJ3RvZ2dsZS56Zi50cmlnZ2VyJywgdGhpcy50b2dnbGUuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgdGFyZ2V0IGNsYXNzIG9uIHRoZSB0YXJnZXQgZWxlbWVudC4gQW4gZXZlbnQgaXMgZmlyZWQgZnJvbSB0aGUgb3JpZ2luYWwgdHJpZ2dlciBkZXBlbmRpbmcgb24gaWYgdGhlIHJlc3VsdGFudCBzdGF0ZSB3YXMgXCJvblwiIG9yIFwib2ZmXCIuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGZpcmVzIFRvZ2dsZXIjb25cbiAgICAgKiBAZmlyZXMgVG9nZ2xlciNvZmZcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9nZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgdGhpc1t0aGlzLm9wdGlvbnMuYW5pbWF0ZSA/ICdfdG9nZ2xlQW5pbWF0ZScgOiAnX3RvZ2dsZUNsYXNzJ10oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfdG9nZ2xlQ2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlQ2xhc3MoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuY2xhc3NOYW1lKTtcblxuICAgICAgdmFyIGlzT24gPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICAgIGlmIChpc09uKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBkb2VzIG5vdCBoYXZlIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb2ZmXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZUFSSUEoaXNPbik7XG4gICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3RvZ2dsZUFuaW1hdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9nZ2xlQW5pbWF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgX2ZvdW5kYXRpb25VdGlsLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25JbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLl91cGRhdGVBUklBKHRydWUpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgICAgIHRoaXMuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfZm91bmRhdGlvblV0aWwuTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25PdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fdXBkYXRlQVJJQShmYWxzZSk7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgICAgICAgIHRoaXMuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZUFSSUEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlQVJJQShpc09uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09uID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgVG9nZ2xlciBvbiB0aGUgZWxlbWVudC5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudG9nZ2xlcicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUb2dnbGVyO1xufShfZm91bmRhdGlvbi5QbHVnaW4pO1xuXG5Ub2dnbGVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGVsbHMgdGhlIHBsdWdpbiBpZiB0aGUgZWxlbWVudCBzaG91bGQgYW5pbWF0ZWQgd2hlbiB0b2dnbGVkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZTogZmFsc2Vcbn07XG5cbmV4cG9ydHMuVG9nZ2xlciA9IFRvZ2dsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1ZEc5bloyeGxjaTVxY3lKZExDSnVZVzFsY3lJNld5SlViMmRuYkdWeUlpd2laV3hsYldWdWRDSXNJbTl3ZEdsdmJuTWlMQ0lrWld4bGJXVnVkQ0lzSWlRaUxDSmxlSFJsYm1RaUxDSmtaV1poZFd4MGN5SXNJbVJoZEdFaUxDSmpiR0Z6YzA1aGJXVWlMQ0pVY21sbloyVnljeUlzSW1sdWFYUWlMQ0pmYVc1cGRDSXNJbDlsZG1WdWRITWlMQ0pwYm5CMWRDSXNJbUZ1YVcxaGRHVWlMQ0p6Y0d4cGRDSXNJbUZ1YVcxaGRHbHZia2x1SWl3aVlXNXBiV0YwYVc5dVQzVjBJaXdpYzJ4cFkyVWlMQ0pwWkNJc0ltRjBkSElpTENKcGN5SXNJbTltWmlJc0ltOXVJaXdpZEc5bloyeGxJaXdpWW1sdVpDSXNJblJ2WjJkc1pVTnNZWE56SWl3aWFYTlBiaUlzSW1oaGMwTnNZWE56SWl3aWRISnBaMmRsY2lJc0lsOTFjR1JoZEdWQlVrbEJJaXdpWm1sdVpDSXNJbDkwYUdseklpd2lUVzkwYVc5dUlpd2lZVzVwYldGMFpVbHVJaXdpWVc1cGJXRjBaVTkxZENJc0lsQnNkV2RwYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3T3p0QlFVVkJPenM3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPenM3UVVGRlFUczdPenM3T3p0SlFVOU5RU3hQT3pzN096czdPenM3T3pzN1FVRkRTanM3T3pzN096czdNa0pCVVU5RExFOHNSVUZCVTBNc1R5eEZRVUZUTzBGQlEzWkNMRmRCUVV0RExGRkJRVXdzUjBGQlowSkdMRTlCUVdoQ08wRkJRMEVzVjBGQlMwTXNUMEZCVEN4SFFVRmxSU3hwUWtGQlJVTXNUVUZCUml4RFFVRlRMRVZCUVZRc1JVRkJZVXdzVVVGQlVVMHNVVUZCY2tJc1JVRkJLMEpNTEZGQlFWRk5MRWxCUVZJc1JVRkJMMElzUlVGQkswTk1MRTlCUVM5RExFTkJRV1k3UVVGRFFTeFhRVUZMVFN4VFFVRk1MRWRCUVdsQ0xFVkJRV3BDTzBGQlEwRXNWMEZCUzBFc1UwRkJUQ3hIUVVGcFFpeFRRVUZxUWl4RFFVcDFRaXhEUVVsTE96dEJRVVUxUWp0QlFVTkJReXhuUTBGQlUwTXNTVUZCVkN4RFFVRmpUaXhuUWtGQlpEczdRVUZGUVN4WFFVRkxUeXhMUVVGTU8wRkJRMEVzVjBGQlMwTXNUMEZCVER0QlFVTkVPenRCUVVWRU96czdPenM3T3pzMFFrRkxVVHRCUVVOT0xGVkJRVWxETEV0QlFVbzdRVUZEUVR0QlFVTkJMRlZCUVVrc1MwRkJTMWdzVDBGQlRDeERRVUZoV1N4UFFVRnFRaXhGUVVFd1FqdEJRVU40UWtRc1owSkJRVkVzUzBGQlMxZ3NUMEZCVEN4RFFVRmhXU3hQUVVGaUxFTkJRWEZDUXl4TFFVRnlRaXhEUVVFeVFpeEhRVUV6UWl4RFFVRlNPenRCUVVWQkxHRkJRVXRETEZkQlFVd3NSMEZCYlVKSUxFMUJRVTBzUTBGQlRpeERRVUZ1UWp0QlFVTkJMR0ZCUVV0SkxGbEJRVXdzUjBGQmIwSktMRTFCUVUwc1EwRkJUaXhMUVVGWkxFbEJRV2hETzBGQlEwUTdRVUZEUkR0QlFVNUJMRmRCVDBzN1FVRkRTRUVzYTBKQlFWRXNTMEZCUzFZc1VVRkJUQ3hEUVVGalNTeEpRVUZrTEVOQlFXMUNMRk5CUVc1Q0xFTkJRVkk3UVVGRFFUdEJRVU5CTEdWQlFVdERMRk5CUVV3c1IwRkJhVUpMTEUxQlFVMHNRMEZCVGl4TlFVRmhMRWRCUVdJc1IwRkJiVUpCTEUxQlFVMUxMRXRCUVU0c1EwRkJXU3hEUVVGYUxFTkJRVzVDTEVkQlFXOURUQ3hMUVVGeVJEdEJRVU5FT3p0QlFVVkVPMEZCUTBFc1ZVRkJTVTBzUzBGQlN5eExRVUZMYUVJc1VVRkJUQ3hEUVVGakxFTkJRV1FzUlVGQmFVSm5RaXhGUVVFeFFqdEJRVU5CTERaRFFVRnBRa0VzUlVGQmFrSXNlVUpCUVhWRFFTeEZRVUYyUXl3d1FrRkJPRVJCTEVWQlFUbEVMRk5CUTBkRExFbEJSRWdzUTBGRFVTeGxRVVJTTEVWQlEzbENSQ3hGUVVSNlFqdEJRVVZCTzBGQlEwRXNWMEZCUzJoQ0xGRkJRVXdzUTBGQlkybENMRWxCUVdRc1EwRkJiVUlzWlVGQmJrSXNSVUZCYjBNc1MwRkJTMnBDTEZGQlFVd3NRMEZCWTJ0Q0xFVkJRV1FzUTBGQmFVSXNVMEZCYWtJc1NVRkJPRUlzUzBGQk9VSXNSMEZCYzBNc1NVRkJNVVU3UVVGRFJEczdRVUZGUkRzN096czdPenM3T0VKQlMxVTdRVUZEVWl4WFFVRkxiRUlzVVVGQlRDeERRVUZqYlVJc1IwRkJaQ3hEUVVGclFpeHRRa0ZCYkVJc1JVRkJkVU5ETEVWQlFYWkRMRU5CUVRCRExHMUNRVUV4UXl4RlFVRXJSQ3hMUVVGTFF5eE5RVUZNTEVOQlFWbERMRWxCUVZvc1EwRkJhVUlzU1VGQmFrSXNRMEZCTDBRN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096WkNRVTFUTzBGQlExQXNWMEZCVFN4TFFVRkxka0lzVDBGQlRDeERRVUZoV1N4UFFVRmlMRWRCUVhWQ0xHZENRVUYyUWl4SFFVRXdReXhqUVVGb1JEdEJRVU5FT3pzN2JVTkJSV003UVVGRFlpeFhRVUZMV0N4UlFVRk1MRU5CUVdOMVFpeFhRVUZrTEVOQlFUQkNMRXRCUVV0c1FpeFRRVUV2UWpzN1FVRkZRU3hWUVVGSmJVSXNUMEZCVHl4TFFVRkxlRUlzVVVGQlRDeERRVUZqZVVJc1VVRkJaQ3hEUVVGMVFpeExRVUZMY0VJc1UwRkJOVUlzUTBGQldEdEJRVU5CTEZWQlFVbHRRaXhKUVVGS0xFVkJRVlU3UVVGRFVqczdPenRCUVVsQkxHRkJRVXQ0UWl4UlFVRk1MRU5CUVdNd1FpeFBRVUZrTEVOQlFYTkNMR1ZCUVhSQ08wRkJRMFFzVDBGT1JDeE5RVTlMTzBGQlEwZzdPenM3UVVGSlFTeGhRVUZMTVVJc1VVRkJUQ3hEUVVGak1FSXNUMEZCWkN4RFFVRnpRaXhuUWtGQmRFSTdRVUZEUkRzN1FVRkZSQ3hYUVVGTFF5eFhRVUZNTEVOQlFXbENTQ3hKUVVGcVFqdEJRVU5CTEZkQlFVdDRRaXhSUVVGTUxFTkJRV00wUWl4SlFVRmtMRU5CUVcxQ0xHVkJRVzVDTEVWQlFXOURSaXhQUVVGd1F5eERRVUUwUXl4eFFrRkJOVU03UVVGRFJEczdPM0ZEUVVWblFqdEJRVU5tTEZWQlFVbEhMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEV0QlFVczNRaXhSUVVGTUxFTkJRV05yUWl4RlFVRmtMRU5CUVdsQ0xGTkJRV3BDTEVOQlFVb3NSVUZCYVVNN1FVRkRMMEpaTEN0Q1FVRlBReXhUUVVGUUxFTkJRV2xDTEV0QlFVc3ZRaXhSUVVGMFFpeEZRVUZuUXl4TFFVRkxZU3hYUVVGeVF5eEZRVUZyUkN4WlFVRlhPMEZCUXpORVowSXNaMEpCUVUxR0xGZEJRVTRzUTBGQmEwSXNTVUZCYkVJN1FVRkRRU3hsUVVGTFJDeFBRVUZNTEVOQlFXRXNaVUZCWWp0QlFVTkJMR1ZCUVV0RkxFbEJRVXdzUTBGQlZTeGxRVUZXTEVWQlFUSkNSaXhQUVVFelFpeERRVUZ0UXl4eFFrRkJia003UVVGRFJDeFRRVXBFTzBGQlMwUXNUMEZPUkN4TlFVOUxPMEZCUTBoSkxDdENRVUZQUlN4VlFVRlFMRU5CUVd0Q0xFdEJRVXRvUXl4UlFVRjJRaXhGUVVGcFF5eExRVUZMWXl4WlFVRjBReXhGUVVGdlJDeFpRVUZYTzBGQlF6ZEVaU3huUWtGQlRVWXNWMEZCVGl4RFFVRnJRaXhMUVVGc1FqdEJRVU5CTEdWQlFVdEVMRTlCUVV3c1EwRkJZU3huUWtGQllqdEJRVU5CTEdWQlFVdEZMRWxCUVV3c1EwRkJWU3hsUVVGV0xFVkJRVEpDUml4UFFVRXpRaXhEUVVGdFF5eHhRa0ZCYmtNN1FVRkRSQ3hUUVVwRU8wRkJTMFE3UVVGRFJqczdPMmREUVVWWFJpeEpMRVZCUVUwN1FVRkRhRUlzVjBGQlMzaENMRkZCUVV3c1EwRkJZMmxDTEVsQlFXUXNRMEZCYlVJc1pVRkJia0lzUlVGQmIwTlBMRTlCUVU4c1NVRkJVQ3hIUVVGakxFdEJRV3hFTzBGQlEwUTdPMEZCUlVRN096czdPenM3SzBKQlNWYzdRVUZEVkN4WFFVRkxlRUlzVVVGQlRDeERRVUZqYlVJc1IwRkJaQ3hEUVVGclFpeGhRVUZzUWp0QlFVTkVPenM3TzBWQk1VaHRRbU1zYTBJN08wRkJOa2gwUW5CRExGRkJRVkZOTEZGQlFWSXNSMEZCYlVJN1FVRkRha0k3T3pzN096dEJRVTFCVVN4WFFVRlRPMEZCVUZFc1EwRkJia0k3TzFGQlZWRmtMRThzUjBGQlFVRXNUeUlzSW1acGJHVWlPaUptYjNWdVpHRjBhVzl1TG5SdloyZHNaWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbHRjRzl5ZENBa0lHWnliMjBnSjJweGRXVnllU2M3WEc1cGJYQnZjblFnZXlCTmIzUnBiMjRnZlNCbWNtOXRJQ2N1TDJadmRXNWtZWFJwYjI0dWRYUnBiQzV0YjNScGIyNG5PMXh1YVcxd2IzSjBJSHNnVUd4MVoybHVJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5Cc2RXZHBiaWM3WEc1cGJYQnZjblFnZXlCVWNtbG5aMlZ5Y3lCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG5SeWFXZG5aWEp6Snp0Y2JseHVMeW9xWEc0Z0tpQlViMmRuYkdWeUlHMXZaSFZzWlM1Y2JpQXFJRUJ0YjJSMWJHVWdabTkxYm1SaGRHbHZiaTUwYjJkbmJHVnlYRzRnS2lCQWNtVnhkV2x5WlhNZ1ptOTFibVJoZEdsdmJpNTFkR2xzTG0xdmRHbHZibHh1SUNvZ1FISmxjWFZwY21WeklHWnZkVzVrWVhScGIyNHVkWFJwYkM1MGNtbG5aMlZ5YzF4dUlDb3ZYRzVjYm1Oc1lYTnpJRlJ2WjJkc1pYSWdaWGgwWlc1a2N5QlFiSFZuYVc0Z2UxeHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUc1bGR5QnBibk4wWVc1alpTQnZaaUJVYjJkbmJHVnlMbHh1SUNBZ0tpQkFZMnhoYzNOY2JpQWdJQ29nUUc1aGJXVWdWRzluWjJ4bGNseHVJQ0FnS2lCQVptbHlaWE1nVkc5bloyeGxjaU5wYm1sMFhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JsYkdWdFpXNTBJQzBnYWxGMVpYSjVJRzlpYW1WamRDQjBieUJoWkdRZ2RHaGxJSFJ5YVdkblpYSWdkRzh1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdUM1psY25KcFpHVnpJSFJ2SUhSb1pTQmtaV1poZFd4MElIQnNkV2RwYmlCelpYUjBhVzVuY3k1Y2JpQWdJQ292WEc0Z0lGOXpaWFIxY0NobGJHVnRaVzUwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDQTlJR1ZzWlcxbGJuUTdYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnSkM1bGVIUmxibVFvZTMwc0lGUnZaMmRzWlhJdVpHVm1ZWFZzZEhNc0lHVnNaVzFsYm5RdVpHRjBZU2dwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0IwYUdsekxtTnNZWE56VG1GdFpTQTlJQ2NuTzF4dUlDQWdJSFJvYVhNdVkyeGhjM05PWVcxbElEMGdKMVJ2WjJkc1pYSW5PeUF2THlCcFpUa2dZbUZqYXlCamIyMXdZWFJjYmx4dUlDQWdJQzh2SUZSeWFXZG5aWEp6SUdsdWFYUWdhWE1nYVdSbGJYQnZkR1Z1ZEN3Z2FuVnpkQ0J1WldWa0lIUnZJRzFoYTJVZ2MzVnlaU0JwZENCcGN5QnBibWwwYVdGc2FYcGxaRnh1SUNBZ0lGUnlhV2RuWlhKekxtbHVhWFFvSkNrN1hHNWNiaUFnSUNCMGFHbHpMbDlwYm1sMEtDazdYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpYTWdkR2hsSUZSdloyZHNaWElnY0d4MVoybHVJR0o1SUhCaGNuTnBibWNnZEdobElIUnZaMmRzWlNCamJHRnpjeUJtY205dElHUmhkR0V0ZEc5bloyeGxjaXdnYjNJZ1lXNXBiV0YwYVc5dUlHTnNZWE56WlhNZ1puSnZiU0JrWVhSaExXRnVhVzFoZEdVdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDJsdWFYUW9LU0I3WEc0Z0lDQWdkbUZ5SUdsdWNIVjBPMXh1SUNBZ0lDOHZJRkJoY25ObElHRnVhVzFoZEdsdmJpQmpiR0Z6YzJWeklHbG1JSFJvWlhrZ2QyVnlaU0J6WlhSY2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbUZ1YVcxaGRHVXBJSHRjYmlBZ0lDQWdJR2x1Y0hWMElEMGdkR2hwY3k1dmNIUnBiMjV6TG1GdWFXMWhkR1V1YzNCc2FYUW9KeUFuS1R0Y2JseHVJQ0FnSUNBZ2RHaHBjeTVoYm1sdFlYUnBiMjVKYmlBOUlHbHVjSFYwV3pCZE8xeHVJQ0FnSUNBZ2RHaHBjeTVoYm1sdFlYUnBiMjVQZFhRZ1BTQnBibkIxZEZzeFhTQjhmQ0J1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCUGRHaGxjbmRwYzJVc0lIQmhjbk5sSUhSdloyZHNaU0JqYkdGemMxeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdhVzV3ZFhRZ1BTQjBhR2x6TGlSbGJHVnRaVzUwTG1SaGRHRW9KM1J2WjJkc1pYSW5LVHRjYmlBZ0lDQWdJQzh2SUVGc2JHOTNJR1p2Y2lCaElDNGdZWFFnZEdobElHSmxaMmx1Ym1sdVp5QnZaaUIwYUdVZ2MzUnlhVzVuWEc0Z0lDQWdJQ0IwYUdsekxtTnNZWE56VG1GdFpTQTlJR2x1Y0hWMFd6QmRJRDA5UFNBbkxpY2dQeUJwYm5CMWRDNXpiR2xqWlNneEtTQTZJR2x1Y0hWME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFRmtaQ0JCVWtsQklHRjBkSEpwWW5WMFpYTWdkRzhnZEhKcFoyZGxjbk5jYmlBZ0lDQjJZWElnYVdRZ1BTQjBhR2x6TGlSbGJHVnRaVzUwV3pCZExtbGtPMXh1SUNBZ0lDUW9ZRnRrWVhSaExXOXdaVzQ5WENJa2UybGtmVndpWFN3Z1cyUmhkR0V0WTJ4dmMyVTlYQ0lrZTJsa2ZWd2lYU3dnVzJSaGRHRXRkRzluWjJ4bFBWd2lKSHRwWkgxY0lsMWdLVnh1SUNBZ0lDQWdMbUYwZEhJb0oyRnlhV0V0WTI5dWRISnZiSE1uTENCcFpDazdYRzRnSUNBZ0x5OGdTV1lnZEdobElIUmhjbWRsZENCcGN5Qm9hV1JrWlc0c0lHRmtaQ0JoY21saExXaHBaR1JsYmx4dUlDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdVlYUjBjaWduWVhKcFlTMWxlSEJoYm1SbFpDY3NJSFJvYVhNdUpHVnNaVzFsYm5RdWFYTW9KenBvYVdSa1pXNG5LU0EvSUdaaGJITmxJRG9nZEhKMVpTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1cGRHbGhiR2w2WlhNZ1pYWmxiblJ6SUdadmNpQjBhR1VnZEc5bloyeGxJSFJ5YVdkblpYSXVYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gyVjJaVzUwY3lncElIdGNiaUFnSUNCMGFHbHpMaVJsYkdWdFpXNTBMbTltWmlnbmRHOW5aMnhsTG5wbUxuUnlhV2RuWlhJbktTNXZiaWduZEc5bloyeGxMbnBtTG5SeWFXZG5aWEluTENCMGFHbHpMblJ2WjJkc1pTNWlhVzVrS0hSb2FYTXBLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWIyZG5iR1Z6SUhSb1pTQjBZWEpuWlhRZ1kyeGhjM01nYjI0Z2RHaGxJSFJoY21kbGRDQmxiR1Z0Wlc1MExpQkJiaUJsZG1WdWRDQnBjeUJtYVhKbFpDQm1jbTl0SUhSb1pTQnZjbWxuYVc1aGJDQjBjbWxuWjJWeUlHUmxjR1Z1WkdsdVp5QnZiaUJwWmlCMGFHVWdjbVZ6ZFd4MFlXNTBJSE4wWVhSbElIZGhjeUJjSW05dVhDSWdiM0lnWENKdlptWmNJaTVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUlFQm1hWEpsY3lCVWIyZG5iR1Z5STI5dVhHNGdJQ0FxSUVCbWFYSmxjeUJVYjJkbmJHVnlJMjltWmx4dUlDQWdLaTljYmlBZ2RHOW5aMnhsS0NrZ2UxeHVJQ0FnSUhSb2FYTmJJSFJvYVhNdWIzQjBhVzl1Y3k1aGJtbHRZWFJsSUQ4Z0oxOTBiMmRuYkdWQmJtbHRZWFJsSnlBNklDZGZkRzluWjJ4bFEyeGhjM01uWFNncE8xeHVJQ0I5WEc1Y2JpQWdYM1J2WjJkc1pVTnNZWE56S0NrZ2UxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkRzluWjJ4bFEyeGhjM01vZEdocGN5NWpiR0Z6YzA1aGJXVXBPMXh1WEc0Z0lDQWdkbUZ5SUdselQyNGdQU0IwYUdsekxpUmxiR1Z0Wlc1MExtaGhjME5zWVhOektIUm9hWE11WTJ4aGMzTk9ZVzFsS1R0Y2JpQWdJQ0JwWmlBb2FYTlBiaWtnZTF4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQkdhWEpsY3lCcFppQjBhR1VnZEdGeVoyVjBJR1ZzWlcxbGJuUWdhR0Z6SUhSb1pTQmpiR0Z6Y3lCaFpuUmxjaUJoSUhSdloyZHNaUzVjYmlBZ0lDQWdJQ0FxSUVCbGRtVnVkQ0JVYjJkbmJHVnlJMjl1WEc0Z0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25iMjR1ZW1ZdWRHOW5aMnhsY2ljcE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ29nUm1seVpYTWdhV1lnZEdobElIUmhjbWRsZENCbGJHVnRaVzUwSUdSdlpYTWdibTkwSUdoaGRtVWdkR2hsSUdOc1lYTnpJR0ZtZEdWeUlHRWdkRzluWjJ4bExseHVJQ0FnSUNBZ0lDb2dRR1YyWlc1MElGUnZaMmRzWlhJamIyWm1YRzRnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWRISnBaMmRsY2lnbmIyWm1MbnBtTG5SdloyZHNaWEluS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOTFjR1JoZEdWQlVrbEJLR2x6VDI0cE8xeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVabWx1WkNnblcyUmhkR0V0YlhWMFlYUmxYU2NwTG5SeWFXZG5aWElvSjIxMWRHRjBaVzFsTG5wbUxuUnlhV2RuWlhJbktUdGNiaUFnZlZ4dVhHNGdJRjkwYjJkbmJHVkJibWx0WVhSbEtDa2dlMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k0a1pXeGxiV1Z1ZEM1cGN5Z25PbWhwWkdSbGJpY3BLU0I3WEc0Z0lDQWdJQ0JOYjNScGIyNHVZVzVwYldGMFpVbHVLSFJvYVhNdUpHVnNaVzFsYm5Rc0lIUm9hWE11WVc1cGJXRjBhVzl1U1c0c0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZkWEJrWVhSbFFWSkpRU2gwY25WbEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGNtbG5aMlZ5S0NkdmJpNTZaaTUwYjJkbmJHVnlKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabWx1WkNnblcyUmhkR0V0YlhWMFlYUmxYU2NwTG5SeWFXZG5aWElvSjIxMWRHRjBaVzFsTG5wbUxuUnlhV2RuWlhJbktUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJRTF2ZEdsdmJpNWhibWx0WVhSbFQzVjBLSFJvYVhNdUpHVnNaVzFsYm5Rc0lIUm9hWE11WVc1cGJXRjBhVzl1VDNWMExDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYM1Z3WkdGMFpVRlNTVUVvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnlhV2RuWlhJb0oyOW1aaTU2Wmk1MGIyZG5iR1Z5SnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm1sdVpDZ25XMlJoZEdFdGJYVjBZWFJsWFNjcExuUnlhV2RuWlhJb0oyMTFkR0YwWlcxbExucG1MblJ5YVdkblpYSW5LVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUY5MWNHUmhkR1ZCVWtsQktHbHpUMjRwSUh0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtRjBkSElvSjJGeWFXRXRaWGh3WVc1a1pXUW5MQ0JwYzA5dUlEOGdkSEoxWlNBNklHWmhiSE5sS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaWE4wY205NWN5QjBhR1VnYVc1emRHRnVZMlVnYjJZZ1ZHOW5aMnhsY2lCdmJpQjBhR1VnWld4bGJXVnVkQzVjYmlBZ0lDb2dRR1oxYm1OMGFXOXVYRzRnSUNBcUwxeHVJQ0JmWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOW1aaWduTG5wbUxuUnZaMmRzWlhJbktUdGNiaUFnZlZ4dWZWeHVYRzVVYjJkbmJHVnlMbVJsWm1GMWJIUnpJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dWR1ZzYkhNZ2RHaGxJSEJzZFdkcGJpQnBaaUIwYUdVZ1pXeGxiV1Z1ZENCemFHOTFiR1FnWVc1cGJXRjBaV1FnZDJobGJpQjBiMmRuYkdWa0xseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENCbVlXeHpaVnh1SUNBZ0tpOWNiaUFnWVc1cGJXRjBaVG9nWm1Gc2MyVmNibjA3WEc1Y2JtVjRjRzl5ZENCN1ZHOW5aMnhsY24wN1hHNGlYWDA9XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udG9nZ2xlci5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Ub29sdGlwID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7IH0gfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH07XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5jb3JlJyk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwyID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeScpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsMyA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzJyk7XG5cbnZhciBfZm91bmRhdGlvbiA9IHJlcXVpcmUoJy4vZm91bmRhdGlvbi5wb3NpdGlvbmFibGUnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFRvb2x0aXAgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvb2x0aXBcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChfUG9zaXRpb25hYmxlKSB7XG4gIF9pbmhlcml0cyhUb29sdGlwLCBfUG9zaXRpb25hYmxlKTtcblxuICBmdW5jdGlvbiBUb29sdGlwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb29sdGlwKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVG9vbHRpcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRvb2x0aXApKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUb29sdGlwLCBbe1xuICAgIGtleTogJ19zZXR1cCcsXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgVG9vbHRpcC5cbiAgICAgKiBAY2xhc3NcbiAgICAgKiBAbmFtZSBUb29sdGlwXG4gICAgICogQGZpcmVzIFRvb2x0aXAjaW5pdFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggYSB0b29sdGlwIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb2JqZWN0IHRvIGV4dGVuZCB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgVG9vbHRpcC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSAnVG9vbHRpcCc7IC8vIGllOSBiYWNrIGNvbXBhdFxuXG4gICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLmlzQ2xpY2sgPSBmYWxzZTtcblxuICAgICAgLy8gVHJpZ2dlcnMgaW5pdCBpcyBpZGVtcG90ZW50LCBqdXN0IG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIGluaXRpYWxpemVkXG4gICAgICBfZm91bmRhdGlvblV0aWwzLlRyaWdnZXJzLmluaXQoX2pxdWVyeTIuZGVmYXVsdCk7XG5cbiAgICAgIHRoaXMuX2luaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgdG9vbHRpcCBieSBzZXR0aW5nIHRoZSBjcmVhdGluZyB0aGUgdGlwIGVsZW1lbnQsIGFkZGluZyBpdCdzIHRleHQsIHNldHRpbmcgcHJpdmF0ZSB2YXJpYWJsZXMgYW5kIHNldHRpbmcgYXR0cmlidXRlcyBvbiB0aGUgYW5jaG9yLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19pbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICBfZm91bmRhdGlvblV0aWwyLk1lZGlhUXVlcnkuX2luaXQoKTtcbiAgICAgIHZhciBlbGVtSWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKSB8fCAoMCwgX2ZvdW5kYXRpb25VdGlsLkdldFlvRGlnaXRzKSg2LCAndG9vbHRpcCcpO1xuXG4gICAgICB0aGlzLm9wdGlvbnMudGlwVGV4dCA9IHRoaXMub3B0aW9ucy50aXBUZXh0IHx8IHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnKTtcbiAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUgPyAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcy5vcHRpb25zLnRlbXBsYXRlKSA6IHRoaXMuX2J1aWxkVGVtcGxhdGUoZWxlbUlkKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGxvd0h0bWwpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS5odG1sKHRoaXMub3B0aW9ucy50aXBUZXh0KS5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRlbXBsYXRlLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpLnRleHQodGhpcy5vcHRpb25zLnRpcFRleHQpLmhpZGUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ3RpdGxlJzogJycsXG4gICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZWxlbUlkLFxuICAgICAgICAnZGF0YS15ZXRpLWJveCc6IGVsZW1JZCxcbiAgICAgICAgJ2RhdGEtdG9nZ2xlJzogZWxlbUlkLFxuICAgICAgICAnZGF0YS1yZXNpemUnOiBlbGVtSWRcbiAgICAgIH0pLmFkZENsYXNzKHRoaXMub3B0aW9ucy50cmlnZ2VyQ2xhc3MpO1xuXG4gICAgICBfZ2V0KFRvb2x0aXAucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9vbHRpcC5wcm90b3R5cGUpLCAnX2luaXQnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldERlZmF1bHRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREZWZhdWx0UG9zaXRpb24oKSB7XG4gICAgICAvLyBoYW5kbGUgbGVnYWN5IGNsYXNzbmFtZXNcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC9cXGIodG9wfGxlZnR8cmlnaHR8Ym90dG9tKVxcYi9nKTtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA/IHBvc2l0aW9uWzBdIDogJ3RvcCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldERlZmF1bHRBbGlnbm1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVmYXVsdEFsaWdubWVudCgpIHtcbiAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZ2V0SE9mZnNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRIT2Zmc2V0KCkge1xuICAgICAgaWYgKHRoaXMucG9zaXRpb24gPT09ICdsZWZ0JyB8fCB0aGlzLnBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaE9mZnNldCArIHRoaXMub3B0aW9ucy50b29sdGlwV2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhPZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2dldFZPZmZzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Vk9mZnNldCgpIHtcbiAgICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSAndG9wJyB8fCB0aGlzLnBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZPZmZzZXQgKyB0aGlzLm9wdGlvbnMudG9vbHRpcEhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMudk9mZnNldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBidWlsZHMgdGhlIHRvb2x0aXAgZWxlbWVudCwgYWRkcyBhdHRyaWJ1dGVzLCBhbmQgcmV0dXJucyB0aGUgdGVtcGxhdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2J1aWxkVGVtcGxhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYnVpbGRUZW1wbGF0ZShpZCkge1xuICAgICAgdmFyIHRlbXBsYXRlQ2xhc3NlcyA9ICh0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzICsgJyAnICsgdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgKyAnICcgKyB0aGlzLm9wdGlvbnMudGVtcGxhdGVDbGFzc2VzKS50cmltKCk7XG4gICAgICB2YXIgJHRlbXBsYXRlID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKHRlbXBsYXRlQ2xhc3NlcykuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3Rvb2x0aXAnLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAnZGF0YS1pcy1hY3RpdmUnOiBmYWxzZSxcbiAgICAgICAgJ2RhdGEtaXMtZm9jdXMnOiBmYWxzZSxcbiAgICAgICAgJ2lkJzogaWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICR0ZW1wbGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXRzIHRoZSBwb3NpdGlvbiBjbGFzcyBvZiBhbiBlbGVtZW50IGFuZCByZWN1cnNpdmVseSBjYWxscyBpdHNlbGYgdW50aWwgdGhlcmUgYXJlIG5vIG1vcmUgcG9zc2libGUgcG9zaXRpb25zIHRvIGF0dGVtcHQsIG9yIHRoZSB0b29sdGlwIGVsZW1lbnQgaXMgbm8gbG9uZ2VyIGNvbGxpZGluZy5cbiAgICAgKiBpZiB0aGUgdG9vbHRpcCBpcyBsYXJnZXIgdGhhbiB0aGUgc2NyZWVuIHdpZHRoLCBkZWZhdWx0IHRvIGZ1bGwgd2lkdGggLSBhbnkgdXNlciBzZWxlY3RlZCBtYXJnaW5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UG9zaXRpb24oKSB7XG4gICAgICBfZ2V0KFRvb2x0aXAucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9vbHRpcC5wcm90b3R5cGUpLCAnX3NldFBvc2l0aW9uJywgdGhpcykuY2FsbCh0aGlzLCB0aGlzLiRlbGVtZW50LCB0aGlzLnRlbXBsYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXZlYWxzIHRoZSB0b29sdGlwLCBhbmQgZmlyZXMgYW4gZXZlbnQgdG8gY2xvc2UgYW55IG90aGVyIG9wZW4gdG9vbHRpcHMgb24gdGhlIHBhZ2VcbiAgICAgKiBAZmlyZXMgVG9vbHRpcCNjbG9zZW1lXG4gICAgICogQGZpcmVzIFRvb2x0aXAjc2hvd1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd09uICE9PSAnYWxsJyAmJiAhX2ZvdW5kYXRpb25VdGlsMi5NZWRpYVF1ZXJ5LmlzKHRoaXMub3B0aW9ucy5zaG93T24pKSB7XG4gICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1RoZSBzY3JlZW4gaXMgdG9vIHNtYWxsIHRvIGRpc3BsYXkgdGhpcyB0b29sdGlwJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMudGVtcGxhdGUuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLnNob3coKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKCd0b3AgYm90dG9tIGxlZnQgcmlnaHQnKS5hZGRDbGFzcyh0aGlzLnBvc2l0aW9uKTtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ2FsaWduLXRvcCBhbGlnbi1ib3R0b20gYWxpZ24tbGVmdCBhbGlnbi1yaWdodCBhbGlnbi1jZW50ZXInKS5hZGRDbGFzcygnYWxpZ24tJyArIHRoaXMuYWxpZ25tZW50KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB0byBjbG9zZSBhbGwgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgICAgICogQGV2ZW50IENsb3NlbWUjdG9vbHRpcFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYudG9vbHRpcCcsIHRoaXMudGVtcGxhdGUuYXR0cignaWQnKSk7XG5cbiAgICAgIHRoaXMudGVtcGxhdGUuYXR0cih7XG4gICAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IHRydWUsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIF90aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGVtcGxhdGUpO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5zdG9wKCkuaGlkZSgpLmNzcygndmlzaWJpbGl0eScsICcnKS5mYWRlSW4odGhpcy5vcHRpb25zLmZhZGVJbkR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vbWF5YmUgZG8gc3R1ZmY/XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgdG9vbHRpcCBpcyBzaG93blxuICAgICAgICogQGV2ZW50IFRvb2x0aXAjc2hvd1xuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYudG9vbHRpcCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBjdXJyZW50IHRvb2x0aXAsIGFuZCByZXNldHMgdGhlIHBvc2l0aW9uaW5nIGNsYXNzIGlmIGl0IHdhcyBjaGFuZ2VkIGR1ZSB0byBjb2xsaXNpb25cbiAgICAgKiBAZmlyZXMgVG9vbHRpcCNoaWRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hpZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIHRoaXMuJGVsZW1lbnQuZGF0YSgneWV0aS1ib3gnKSk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5zdG9wKCkuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlXG4gICAgICB9KS5mYWRlT3V0KHRoaXMub3B0aW9ucy5mYWRlT3V0RHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIGZpcmVzIHdoZW4gdGhlIHRvb2x0aXAgaXMgaGlkZGVuXG4gICAgICAgKiBAZXZlbnQgVG9vbHRpcCNoaWRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaGlkZS56Zi50b29sdGlwJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkcyBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSB0b29sdGlwIGFuZCBpdHMgYW5jaG9yXG4gICAgICogVE9ETyBjb21iaW5lIHNvbWUgb2YgdGhlIGxpc3RlbmVycyBsaWtlIGZvY3VzIGFuZCBtb3VzZWVudGVyLCBldGMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnX2V2ZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ldmVudHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyICR0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG4gICAgICB2YXIgaXNGb2N1cyA9IGZhbHNlO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcblxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWVudGVyLnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGlmICghX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICBpZiAoIWlzRm9jdXMgfHwgX3RoaXMuaXNDbGljayAmJiAhX3RoaXMub3B0aW9ucy5jbGlja09wZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWRvd24uemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBpZiAoX3RoaXMuaXNDbGljaykge1xuICAgICAgICAgICAgLy9fdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAvLyBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmlzQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKChfdGhpcy5vcHRpb25zLmRpc2FibGVIb3ZlciB8fCAhX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSkgJiYgIV90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgIF90aGlzLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2Vkb3duLnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgX3RoaXMuaXNDbGljayA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlRm9yVG91Y2gpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbigndGFwLnpmLnRvb2x0aXAgdG91Y2hlbmQuemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgX3RoaXMuaXNBY3RpdmUgPyBfdGhpcy5oaWRlKCkgOiBfdGhpcy5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgLy8gJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICAgLy8gJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmhpZGUuYmluZCh0aGlzKVxuICAgICAgICAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuaGlkZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignZm9jdXMuemYudG9vbHRpcCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlzRm9jdXMgPSB0cnVlO1xuICAgICAgICBpZiAoX3RoaXMuaXNDbGljaykge1xuICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBzaG93aW5nIG9wZW4gb24gY2xpY2tzLCB3ZSBuZWVkIHRvIHByZXRlbmQgYSBjbGljay1sYXVuY2hlZCBmb2N1cyBpc24ndFxuICAgICAgICAgIC8vIGEgcmVhbCBmb2N1cywgb3RoZXJ3aXNlIG9uIGhvdmVyIGFuZCBjb21lIGJhY2sgd2UgZ2V0IGJhZCBiZWhhdmlvclxuICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5jbGlja09wZW4pIHtcbiAgICAgICAgICAgIGlzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ2ZvY3Vzb3V0LnpmLnRvb2x0aXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpc0ZvY3VzID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgfSkub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgIF90aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhZGRzIGEgdG9nZ2xlIG1ldGhvZCwgaW4gYWRkaXRpb24gdG8gdGhlIHN0YXRpYyBzaG93KCkgJiBoaWRlKCkgZnVuY3Rpb25zXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvZ2dsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgdG9vbHRpcCwgcmVtb3ZlcyB0ZW1wbGF0ZSBlbGVtZW50IGZyb20gdGhlIHZpZXcuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19kZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3RpdGxlJywgdGhpcy50ZW1wbGF0ZS50ZXh0KCkpLm9mZignLnpmLnRyaWdnZXIgLnpmLnRvb2x0aXAnKS5yZW1vdmVDbGFzcygnaGFzLXRpcCB0b3AgcmlnaHQgbGVmdCcpLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnkgYXJpYS1oYXNwb3B1cCBkYXRhLWRpc2FibGUtaG92ZXIgZGF0YS1yZXNpemUgZGF0YS10b2dnbGUgZGF0YS10b29sdGlwIGRhdGEteWV0aS1ib3gnKTtcblxuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmUoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVG9vbHRpcDtcbn0oX2ZvdW5kYXRpb24uUG9zaXRpb25hYmxlKTtcblxuVG9vbHRpcC5kZWZhdWx0cyA9IHtcbiAgZGlzYWJsZUZvclRvdWNoOiBmYWxzZSxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBiZWZvcmUgYSB0b29sdGlwIHNob3VsZCBvcGVuIG9uIGhvdmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDIwMFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGEgdG9vbHRpcCBzaG91bGQgdGFrZSB0byBmYWRlIGludG8gdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxNTBcbiAgICovXG4gIGZhZGVJbkR1cmF0aW9uOiAxNTAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgb3V0IG9mIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTUwXG4gICAqL1xuICBmYWRlT3V0RHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIERpc2FibGVzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgdGhlIHRvb2x0aXAgaWYgc2V0IHRvIHRydWVcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVIb3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBPcHRpb25hbCBhZGR0aW9uYWwgY2xhc3NlcyB0byBhcHBseSB0byB0aGUgdG9vbHRpcCB0ZW1wbGF0ZSBvbiBpbml0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICB0ZW1wbGF0ZUNsYXNzZXM6ICcnLFxuICAvKipcbiAgICogTm9uLW9wdGlvbmFsIGNsYXNzIGFkZGVkIHRvIHRvb2x0aXAgdGVtcGxhdGVzLiBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgJ3Rvb2x0aXAnLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICd0b29sdGlwJ1xuICAgKi9cbiAgdG9vbHRpcENsYXNzOiAndG9vbHRpcCcsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIGFuY2hvciBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdoYXMtdGlwJ1xuICAgKi9cbiAgdHJpZ2dlckNsYXNzOiAnaGFzLXRpcCcsXG4gIC8qKlxuICAgKiBNaW5pbXVtIGJyZWFrcG9pbnQgc2l6ZSBhdCB3aGljaCB0byBvcGVuIHRoZSB0b29sdGlwLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzbWFsbCdcbiAgICovXG4gIHNob3dPbjogJ3NtYWxsJyxcbiAgLyoqXG4gICAqIEN1c3RvbSB0ZW1wbGF0ZSB0byBiZSB1c2VkIHRvIGdlbmVyYXRlIG1hcmt1cCBmb3IgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdGVtcGxhdGU6ICcnLFxuICAvKipcbiAgICogVGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdGlwVGV4dDogJycsXG4gIHRvdWNoQ2xvc2VUZXh0OiAnVGFwIHRvIGNsb3NlLicsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHRvb2x0aXAgdG8gcmVtYWluIG9wZW4gaWYgdHJpZ2dlcmVkIHdpdGggYSBjbGljayBvciB0b3VjaCBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xpY2tPcGVuOiB0cnVlLFxuICAvKipcbiAgICogREVQUkVDQVRFRCBBZGRpdGlvbmFsIHBvc2l0aW9uaW5nIGNsYXNzZXMsIHNldCBieSB0aGUgSlNcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgcG9zaXRpb25DbGFzczogJycsXG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiB0b29sdGlwLiBDYW4gYmUgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBvciBhdXRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgcG9zaXRpb246ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsaWdubWVudCBvZiB0b29sdGlwIHJlbGF0aXZlIHRvIGFuY2hvci4gQ2FuIGJlIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgY2VudGVyLCBvciBhdXRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgYWxpZ25tZW50OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIGNvbnRhaW5lci93aW5kb3cuIElmIGZhbHNlLCB0b29sdGlwIHdpbGwgZmlyc3QgdHJ5IHRvXG4gICAqIHBvc2l0aW9uIGFzIGRlZmluZWQgYnkgZGF0YS1wb3NpdGlvbiBhbmQgZGF0YS1hbGlnbm1lbnQsIGJ1dCByZXBvc2l0aW9uIGlmXG4gICAqIGl0IHdvdWxkIGNhdXNlIGFuIG92ZXJmbG93LiAgQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFsbG93T3ZlcmxhcDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVybGFwIG9mIG9ubHkgdGhlIGJvdHRvbSBvZiB0aGUgY29udGFpbmVyLiBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vblxuICAgKiBiZWhhdmlvciBmb3IgZHJvcGRvd25zLCBhbGxvd2luZyB0aGUgZHJvcGRvd24gdG8gZXh0ZW5kIHRoZSBib3R0b20gb2YgdGhlXG4gICAqIHNjcmVlbiBidXQgbm90IG90aGVyd2lzZSBpbmZsdWVuY2Ugb3IgYnJlYWsgb3V0IG9mIHRoZSBjb250YWluZXIuXG4gICAqIExlc3MgY29tbW9uIGZvciB0b29sdGlwcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFsbG93Qm90dG9tT3ZlcmxhcDogZmFsc2UsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgdGVtcGxhdGUgc2hvdWxkIHB1c2ggYXdheSBmcm9tIHRoZSBhbmNob3Igb24gdGhlIFkgYXhpcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB2T2Zmc2V0OiAwLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNob3VsZCBwdXNoIGF3YXkgZnJvbSB0aGUgYW5jaG9yIG9uIHRoZSBYIGF4aXNcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBoT2Zmc2V0OiAwLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNwYWNpbmcgYXV0by1hZGp1c3QgZm9yIGEgdmVydGljYWwgdG9vbHRpcFxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDE0XG4gICAqL1xuICB0b29sdGlwSGVpZ2h0OiAxNCxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzcGFjaW5nIGF1dG8tYWRqdXN0IGZvciBhIGhvcml6b250YWwgdG9vbHRpcFxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDEyXG4gICAqL1xuICB0b29sdGlwV2lkdGg6IDEyLFxuICAvKipcbiAgKiBBbGxvdyBIVE1MIGluIHRvb2x0aXAuIFdhcm5pbmc6IElmIHlvdSBhcmUgbG9hZGluZyB1c2VyLWdlbmVyYXRlZCBjb250ZW50IGludG8gdG9vbHRpcHMsXG4gICogYWxsb3dpbmcgSFRNTCBtYXkgb3BlbiB5b3Vyc2VsZiB1cCB0byBYU1MgYXR0YWNrcy5cbiAgKiBAb3B0aW9uXG4gICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgZmFsc2VcbiAgKi9cbiAgYWxsb3dIdG1sOiBmYWxzZVxufTtcblxuLyoqXG4gKiBUT0RPIHV0aWxpemUgcmVzaXplIGV2ZW50IHRyaWdnZXJcbiAqL1xuXG5leHBvcnRzLlRvb2x0aXAgPSBUb29sdGlwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWRHOXZiSFJwY0M1cWN5SmRMQ0p1WVcxbGN5STZXeUpVYjI5c2RHbHdJaXdpWld4bGJXVnVkQ0lzSW05d2RHbHZibk1pTENJa1pXeGxiV1Z1ZENJc0lpUWlMQ0psZUhSbGJtUWlMQ0prWldaaGRXeDBjeUlzSW1SaGRHRWlMQ0pqYkdGemMwNWhiV1VpTENKcGMwRmpkR2wyWlNJc0ltbHpRMnhwWTJzaUxDSlVjbWxuWjJWeWN5SXNJbWx1YVhRaUxDSmZhVzVwZENJc0lrMWxaR2xoVVhWbGNua2lMQ0psYkdWdFNXUWlMQ0poZEhSeUlpd2lkR2x3VkdWNGRDSXNJblJsYlhCc1lYUmxJaXdpWDJKMWFXeGtWR1Z0Y0d4aGRHVWlMQ0poYkd4dmQwaDBiV3dpTENKaGNIQmxibVJVYnlJc0ltUnZZM1Z0Wlc1MElpd2lZbTlrZVNJc0ltaDBiV3dpTENKb2FXUmxJaXdpZEdWNGRDSXNJbUZrWkVOc1lYTnpJaXdpZEhKcFoyZGxja05zWVhOeklpd2lYMlYyWlc1MGN5SXNJbkJ2YzJsMGFXOXVJaXdpYldGMFkyZ2lMQ0pvVDJabWMyVjBJaXdpZEc5dmJIUnBjRmRwWkhSb0lpd2lkazltWm5ObGRDSXNJblJ2YjJ4MGFYQklaV2xuYUhRaUxDSnBaQ0lzSW5SbGJYQnNZWFJsUTJ4aGMzTmxjeUlzSW5SdmIyeDBhWEJEYkdGemN5SXNJbkJ2YzJsMGFXOXVRMnhoYzNNaUxDSjBjbWx0SWl3aUpIUmxiWEJzWVhSbElpd2ljMmh2ZDA5dUlpd2lhWE1pTENKZmRHaHBjeUlzSW1OemN5SXNJbk5vYjNjaUxDSmZjMlYwVUc5emFYUnBiMjRpTENKeVpXMXZkbVZEYkdGemN5SXNJbUZzYVdkdWJXVnVkQ0lzSW5SeWFXZG5aWElpTENKemRHOXdJaXdpWm1Ga1pVbHVJaXdpWm1Ga1pVbHVSSFZ5WVhScGIyNGlMQ0ptWVdSbFQzVjBJaXdpWm1Ga1pVOTFkRVIxY21GMGFXOXVJaXdpYVhOR2IyTjFjeUlzSW1ScGMyRmliR1ZJYjNabGNpSXNJbTl1SWl3aVpTSXNJblJwYldWdmRYUWlMQ0p6WlhSVWFXMWxiM1YwSWl3aWFHOTJaWEpFWld4aGVTSXNJbU5zWldGeVZHbHRaVzkxZENJc0ltTnNhV05yVDNCbGJpSXNJbk4wYjNCSmJXMWxaR2xoZEdWUWNtOXdZV2RoZEdsdmJpSXNJbVJwYzJGaWJHVkdiM0pVYjNWamFDSXNJbUpwYm1RaUxDSnZabVlpTENKeVpXMXZkbVZCZEhSeUlpd2ljbVZ0YjNabElpd2lVRzl6YVhScGIyNWhZbXhsSWl3aWRHOTFZMmhEYkc5elpWUmxlSFFpTENKaGJHeHZkMDkyWlhKc1lYQWlMQ0poYkd4dmQwSnZkSFJ2YlU5MlpYSnNZWEFpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPenM3T3p0QlFVVkJPenM3TzBGQlJVRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPenM3T3pzN096czdRVUZGUVRzN096czdPenM3U1VGUlRVRXNUenM3T3pzN096czdPenM3TzBGQlEwbzdPenM3T3pzN096SkNRVkZQUXl4UExFVkJRVk5ETEU4c1JVRkJVenRCUVVOMlFpeFhRVUZMUXl4UlFVRk1MRWRCUVdkQ1JpeFBRVUZvUWp0QlFVTkJMRmRCUVV0RExFOUJRVXdzUjBGQlpVVXNhVUpCUVVWRExFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRk1MRkZCUVZGTkxGRkJRWEpDTEVWQlFTdENMRXRCUVV0SUxGRkJRVXdzUTBGQlkwa3NTVUZCWkN4RlFVRXZRaXhGUVVGeFJFd3NUMEZCY2tRc1EwRkJaanRCUVVOQkxGZEJRVXROTEZOQlFVd3NSMEZCYVVJc1UwRkJha0lzUTBGSWRVSXNRMEZIU3pzN1FVRkZOVUlzVjBGQlMwTXNVVUZCVEN4SFFVRm5RaXhMUVVGb1FqdEJRVU5CTEZkQlFVdERMRTlCUVV3c1IwRkJaU3hMUVVGbU96dEJRVVZCTzBGQlEwRkRMR2REUVVGVFF5eEpRVUZVTEVOQlFXTlNMR2RDUVVGa096dEJRVVZCTEZkQlFVdFRMRXRCUVV3N1FVRkRSRHM3UVVGRlJEczdPenM3T3pzMFFrRkpVVHRCUVVOT1F5eHJRMEZCVjBRc1MwRkJXRHRCUVVOQkxGVkJRVWxGTEZOQlFWTXNTMEZCUzFvc1VVRkJUQ3hEUVVGallTeEpRVUZrTEVOQlFXMUNMR3RDUVVGdVFpeExRVUV3UXl4cFEwRkJXU3hEUVVGYUxFVkJRV1VzVTBGQlppeERRVUYyUkRzN1FVRkZRU3hYUVVGTFpDeFBRVUZNTEVOQlFXRmxMRTlCUVdJc1IwRkJkVUlzUzBGQlMyWXNUMEZCVEN4RFFVRmhaU3hQUVVGaUxFbEJRWGRDTEV0QlFVdGtMRkZCUVV3c1EwRkJZMkVzU1VGQlpDeERRVUZ0UWl4UFFVRnVRaXhEUVVFdlF6dEJRVU5CTEZkQlFVdEZMRkZCUVV3c1IwRkJaMElzUzBGQlMyaENMRTlCUVV3c1EwRkJZV2RDTEZGQlFXSXNSMEZCZDBJc2MwSkJRVVVzUzBGQlMyaENMRTlCUVV3c1EwRkJZV2RDTEZGQlFXWXNRMEZCZUVJc1IwRkJiVVFzUzBGQlMwTXNZMEZCVEN4RFFVRnZRa29zVFVGQmNFSXNRMEZCYmtVN08wRkJSVUVzVlVGQlNTeExRVUZMWWl4UFFVRk1MRU5CUVdGclFpeFRRVUZxUWl4RlFVRTBRanRCUVVNeFFpeGhRVUZMUml4UlFVRk1MRU5CUVdOSExGRkJRV1FzUTBGQmRVSkRMRk5CUVZORExFbEJRV2hETEVWQlEwZERMRWxCUkVnc1EwRkRVU3hMUVVGTGRFSXNUMEZCVEN4RFFVRmhaU3hQUVVSeVFpeEZRVVZIVVN4SlFVWklPMEZCUjBRc1QwRktSQ3hOUVVsUE8wRkJRMHdzWVVGQlMxQXNVVUZCVEN4RFFVRmpSeXhSUVVGa0xFTkJRWFZDUXl4VFFVRlRReXhKUVVGb1F5eEZRVU5IUnl4SlFVUklMRU5CUTFFc1MwRkJTM2hDTEU5QlFVd3NRMEZCWVdVc1QwRkVja0lzUlVGRlIxRXNTVUZHU0R0QlFVZEVPenRCUVVWRUxGZEJRVXQwUWl4UlFVRk1MRU5CUVdOaExFbEJRV1FzUTBGQmJVSTdRVUZEYWtJc2FVSkJRVk1zUlVGRVVUdEJRVVZxUWl3MFFrRkJiMEpFTEUxQlJrZzdRVUZIYWtJc2VVSkJRV2xDUVN4TlFVaEJPMEZCU1dwQ0xIVkNRVUZsUVN4TlFVcEZPMEZCUzJwQ0xIVkNRVUZsUVR0QlFVeEZMRTlCUVc1Q0xFVkJUVWRaTEZGQlRrZ3NRMEZOV1N4TFFVRkxla0lzVDBGQlRDeERRVUZoTUVJc1dVRk9la0k3TzBGQlVVRTdRVUZEUVN4WFFVRkxReXhQUVVGTU8wRkJRMFE3T3pzd1EwRkZjVUk3UVVGRGNFSTdRVUZEUVN4VlFVRkpReXhYUVVGWExFdEJRVXN6UWl4UlFVRk1MRU5CUVdNc1EwRkJaQ3hGUVVGcFFrc3NVMEZCYWtJc1EwRkJNa0oxUWl4TFFVRXpRaXhEUVVGcFF5dzRRa0ZCYWtNc1EwRkJaanRCUVVOQkxHRkJRVTlFTEZkQlFWZEJMRk5CUVZNc1EwRkJWQ3hEUVVGWUxFZEJRWGxDTEV0QlFXaERPMEZCUTBRN096c3lRMEZGYzBJN1FVRkRja0lzWVVGQlR5eFJRVUZRTzBGQlEwUTdPenRyUTBGRllUdEJRVU5hTEZWQlFVY3NTMEZCUzBFc1VVRkJUQ3hMUVVGclFpeE5RVUZzUWl4SlFVRTBRaXhMUVVGTFFTeFJRVUZNTEV0QlFXdENMRTlCUVdwRUxFVkJRVEJFTzBGQlEzaEVMR1ZCUVU4c1MwRkJTelZDTEU5QlFVd3NRMEZCWVRoQ0xFOUJRV0lzUjBGQmRVSXNTMEZCU3psQ0xFOUJRVXdzUTBGQllTdENMRmxCUVRORE8wRkJRMFFzVDBGR1JDeE5RVVZQTzBGQlEwd3NaVUZCVHl4TFFVRkxMMElzVDBGQlRDeERRVUZoT0VJc1QwRkJjRUk3UVVGRFJEdEJRVU5HT3pzN2EwTkJSV0U3UVVGRFdpeFZRVUZITEV0QlFVdEdMRkZCUVV3c1MwRkJhMElzUzBGQmJFSXNTVUZCTWtJc1MwRkJTMEVzVVVGQlRDeExRVUZyUWl4UlFVRm9SQ3hGUVVFd1JEdEJRVU40UkN4bFFVRlBMRXRCUVVzMVFpeFBRVUZNTEVOQlFXRm5ReXhQUVVGaUxFZEJRWFZDTEV0QlFVdG9ReXhQUVVGTUxFTkJRV0ZwUXl4aFFVRXpRenRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdWQlFVOHNTMEZCUzJwRExFOUJRVXdzUTBGQllXZERMRTlCUVhCQ08wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096czdPenR0UTBGSlpVVXNSU3hGUVVGSk8wRkJRMnBDTEZWQlFVbERMR3RDUVVGclFpeERRVUZKTEV0QlFVdHVReXhQUVVGTUxFTkJRV0Z2UXl4WlFVRnFRaXhUUVVGcFF5eExRVUZMY0VNc1QwRkJUQ3hEUVVGaGNVTXNZVUZCT1VNc1UwRkJLMFFzUzBGQlMzSkRMRTlCUVV3c1EwRkJZVzFETEdWQlFUVkZMRVZCUVN0R1J5eEpRVUV2Uml4RlFVRjBRanRCUVVOQkxGVkJRVWxETEZsQlFXRXNjMEpCUVVVc1lVRkJSaXhGUVVGcFFtUXNVVUZCYWtJc1EwRkJNRUpWTEdWQlFURkNMRVZCUVRKRGNrSXNTVUZCTTBNc1EwRkJaMFE3UVVGREwwUXNaMEpCUVZFc1UwRkVkVVE3UVVGRkwwUXNkVUpCUVdVc1NVRkdaMFE3UVVGSEwwUXNNRUpCUVd0Q0xFdEJTRFpETzBGQlNTOUVMSGxDUVVGcFFpeExRVW80UXp0QlFVc3ZSQ3hqUVVGTmIwSTdRVUZNZVVRc1QwRkJhRVFzUTBGQmFrSTdRVUZQUVN4aFFVRlBTeXhUUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN08yMURRVXRsTzBGQlEySXNjVWhCUVcxQ0xFdEJRVXQwUXl4UlFVRjRRaXhGUVVGclF5eExRVUZMWlN4UlFVRjJRenRCUVVORU96dEJRVVZFT3pzN096czdPenM3TWtKQlRVODdRVUZEVEN4VlFVRkpMRXRCUVV0b1FpeFBRVUZNTEVOQlFXRjNReXhOUVVGaUxFdEJRWGRDTEV0QlFYaENMRWxCUVdsRExFTkJRVU0xUWl3MFFrRkJWelpDTEVWQlFWZ3NRMEZCWXl4TFFVRkxla01zVDBGQlRDeERRVUZoZDBNc1RVRkJNMElzUTBGQmRFTXNSVUZCTUVVN1FVRkRlRVU3UVVGRFFTeGxRVUZQTEV0QlFWQTdRVUZEUkRzN1FVRkZSQ3hWUVVGSlJTeFJRVUZSTEVsQlFWbzdRVUZEUVN4WFFVRkxNVUlzVVVGQlRDeERRVUZqTWtJc1IwRkJaQ3hEUVVGclFpeFpRVUZzUWl4RlFVRm5ReXhSUVVGb1F5eEZRVUV3UTBNc1NVRkJNVU03UVVGRFFTeFhRVUZMUXl4WlFVRk1PMEZCUTBFc1YwRkJTemRDTEZGQlFVd3NRMEZCWXpoQ0xGZEJRV1FzUTBGQk1FSXNkVUpCUVRGQ0xFVkJRVzFFY2tJc1VVRkJia1FzUTBGQk5FUXNTMEZCUzBjc1VVRkJha1U3UVVGRFFTeFhRVUZMV2l4UlFVRk1MRU5CUVdNNFFpeFhRVUZrTEVOQlFUQkNMRFJFUVVFeFFpeEZRVUYzUm5KQ0xGRkJRWGhHTEVOQlFXbEhMRmRCUVZjc1MwRkJTM05DTEZOQlFXcElPenRCUVVWQk96czdPMEZCU1VFc1YwRkJTemxETEZGQlFVd3NRMEZCWXl0RExFOUJRV1FzUTBGQmMwSXNiMEpCUVhSQ0xFVkJRVFJETEV0QlFVdG9ReXhSUVVGTUxFTkJRV05HTEVsQlFXUXNRMEZCYlVJc1NVRkJia0lzUTBGQk5VTTdPMEZCUjBFc1YwRkJTMFVzVVVGQlRDeERRVUZqUml4SlFVRmtMRU5CUVcxQ08wRkJRMnBDTERCQ1FVRnJRaXhKUVVSRU8wRkJSV3BDTEhWQ1FVRmxPMEZCUmtVc1QwRkJia0k3UVVGSlFUUkNMRmxCUVUxdVF5eFJRVUZPTEVkQlFXbENMRWxCUVdwQ08wRkJRMEU3UVVGRFFTeFhRVUZMVXl4UlFVRk1MRU5CUVdOcFF5eEpRVUZrTEVkQlFYRkNNVUlzU1VGQmNrSXNSMEZCTkVKdlFpeEhRVUUxUWl4RFFVRm5ReXhaUVVGb1F5eEZRVUU0UXl4RlFVRTVReXhGUVVGclJFOHNUVUZCYkVRc1EwRkJlVVFzUzBGQlMyeEVMRTlCUVV3c1EwRkJZVzFFTEdOQlFYUkZMRVZCUVhOR0xGbEJRVmM3UVVGREwwWTdRVUZEUkN4UFFVWkVPMEZCUjBFN096czdRVUZKUVN4WFFVRkxiRVFzVVVGQlRDeERRVUZqSzBNc1QwRkJaQ3hEUVVGelFpeHBRa0ZCZEVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN01rSkJTMDg3UVVGRFREdEJRVU5CTEZWQlFVbE9MRkZCUVZFc1NVRkJXanRCUVVOQkxGZEJRVXN4UWl4UlFVRk1MRU5CUVdOcFF5eEpRVUZrTEVkQlFYRkNia01zU1VGQmNrSXNRMEZCTUVJN1FVRkRlRUlzZFVKQlFXVXNTVUZFVXp0QlFVVjRRaXd3UWtGQmEwSTdRVUZHVFN4UFFVRXhRaXhGUVVkSGMwTXNUMEZJU0N4RFFVZFhMRXRCUVV0d1JDeFBRVUZNTEVOQlFXRnhSQ3hsUVVoNFFpeEZRVWQ1UXl4WlFVRlhPMEZCUTJ4RVdDeGpRVUZOYmtNc1VVRkJUaXhIUVVGcFFpeExRVUZxUWp0QlFVTkJiVU1zWTBGQlRXeERMRTlCUVU0c1IwRkJaMElzUzBGQmFFSTdRVUZEUkN4UFFVNUVPMEZCVDBFN096czdRVUZKUVN4WFFVRkxVQ3hSUVVGTUxFTkJRV01yUXl4UFFVRmtMRU5CUVhOQ0xHbENRVUYwUWp0QlFVTkVPenRCUVVWRU96czdPenM3T3pzNFFrRkxWVHRCUVVOU0xGVkJRVWxPTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVsSUxGbEJRVmtzUzBGQlMzWkNMRkZCUVhKQ08wRkJRMEVzVlVGQlNYTkRMRlZCUVZVc1MwRkJaRHM3UVVGRlFTeFZRVUZKTEVOQlFVTXNTMEZCUzNSRUxFOUJRVXdzUTBGQllYVkVMRmxCUVd4Q0xFVkJRV2RET3p0QlFVVTVRaXhoUVVGTGRFUXNVVUZCVEN4RFFVTkRkVVFzUlVGRVJDeERRVU5KTEhWQ1FVUktMRVZCUXpaQ0xGVkJRVk5ETEVOQlFWUXNSVUZCV1R0QlFVTjJReXhqUVVGSkxFTkJRVU5tTEUxQlFVMXVReXhSUVVGWUxFVkJRWEZDTzBGQlEyNUNiVU1zYTBKQlFVMW5RaXhQUVVGT0xFZEJRV2RDUXl4WFFVRlhMRmxCUVZjN1FVRkRjRU5xUWl4dlFrRkJUVVVzU1VGQlRqdEJRVU5FTEdGQlJtVXNSVUZGWWtZc1RVRkJUVEZETEU5QlFVNHNRMEZCWXpSRUxGVkJSa1FzUTBGQmFFSTdRVUZIUkR0QlFVTkdMRk5CVUVRc1JVRlJRMG9zUlVGU1JDeERRVkZKTEhWQ1FWSktMRVZCVVRaQ0xGVkJRVk5ETEVOQlFWUXNSVUZCV1R0QlFVTjJRMGtzZFVKQlFXRnVRaXhOUVVGTlowSXNUMEZCYmtJN1FVRkRRU3hqUVVGSkxFTkJRVU5LTEU5QlFVUXNTVUZCWVZvc1RVRkJUV3hETEU5QlFVNHNTVUZCYVVJc1EwRkJRMnRETEUxQlFVMHhReXhQUVVGT0xFTkJRV000UkN4VFFVRnFSQ3hGUVVFMlJEdEJRVU16UkhCQ0xHdENRVUZOYmtJc1NVRkJUanRCUVVORU8wRkJRMFlzVTBGaVJEdEJRV05FT3p0QlFVVkVMRlZCUVVrc1MwRkJTM1pDTEU5QlFVd3NRMEZCWVRoRUxGTkJRV3BDTEVWQlFUUkNPMEZCUXpGQ0xHRkJRVXMzUkN4UlFVRk1MRU5CUVdOMVJDeEZRVUZrTEVOQlFXbENMSE5DUVVGcVFpeEZRVUY1UXl4VlFVRlRReXhEUVVGVUxFVkJRVms3UVVGRGJrUkJMRmxCUVVWTkxIZENRVUZHTzBGQlEwRXNZMEZCU1hKQ0xFMUJRVTFzUXl4UFFVRldMRVZCUVcxQ08wRkJRMnBDTzBGQlEwRTdRVUZEUkN4WFFVaEVMRTFCUjA4N1FVRkRUR3RETEd0Q1FVRk5iRU1zVDBGQlRpeEhRVUZuUWl4SlFVRm9RanRCUVVOQkxHZENRVUZKTEVOQlFVTnJReXhOUVVGTk1VTXNUMEZCVGl4RFFVRmpkVVFzV1VGQlpDeEpRVUU0UWl4RFFVRkRZaXhOUVVGTmVrTXNVVUZCVGl4RFFVRmxZU3hKUVVGbUxFTkJRVzlDTEZWQlFYQkNMRU5CUVdoRExFdEJRVzlGTEVOQlFVTTBRaXhOUVVGTmJrTXNVVUZCTDBVc1JVRkJlVVk3UVVGRGRrWnRReXh2UWtGQlRVVXNTVUZCVGp0QlFVTkVPMEZCUTBZN1FVRkRSaXhUUVZoRU8wRkJXVVFzVDBGaVJDeE5RV0ZQTzBGQlEwd3NZVUZCU3pORExGRkJRVXdzUTBGQlkzVkVMRVZCUVdRc1EwRkJhVUlzYzBKQlFXcENMRVZCUVhsRExGVkJRVk5ETEVOQlFWUXNSVUZCV1R0QlFVTnVSRUVzV1VGQlJVMHNkMEpCUVVZN1FVRkRRWEpDTEdkQ1FVRk5iRU1zVDBGQlRpeEhRVUZuUWl4SlFVRm9RanRCUVVORUxGTkJTRVE3UVVGSlJEczdRVUZGUkN4VlFVRkpMRU5CUVVNc1MwRkJTMUlzVDBGQlRDeERRVUZoWjBVc1pVRkJiRUlzUlVGQmJVTTdRVUZEYWtNc1lVRkJTeTlFTEZGQlFVd3NRMEZEUTNWRUxFVkJSRVFzUTBGRFNTeHZRMEZFU2l4RlFVTXdReXhWUVVGVFF5eERRVUZVTEVWQlFWazdRVUZEY0VSbUxHZENRVUZOYmtNc1VVRkJUaXhIUVVGcFFtMURMRTFCUVUxdVFpeEpRVUZPTEVWQlFXcENMRWRCUVdkRGJVSXNUVUZCVFVVc1NVRkJUaXhGUVVGb1F6dEJRVU5FTEZOQlNFUTdRVUZKUkRzN1FVRkZSQ3hYUVVGTE0wTXNVVUZCVEN4RFFVRmpkVVFzUlVGQlpDeERRVUZwUWp0QlFVTm1PMEZCUTBFN1FVRkRRU3cwUWtGQmIwSXNTMEZCUzJwRExFbEJRVXdzUTBGQlZUQkRMRWxCUVZZc1EwRkJaU3hKUVVGbU8wRkJTRXdzVDBGQmFrSTdPMEZCVFVFc1YwRkJTMmhGTEZGQlFVd3NRMEZEUjNWRUxFVkJSRWdzUTBGRFRTeHJRa0ZFVGl4RlFVTXdRaXhWUVVGVFF5eERRVUZVTEVWQlFWazdRVUZEYkVOSUxHdENRVUZWTEVsQlFWWTdRVUZEUVN4WlFVRkpXaXhOUVVGTmJFTXNUMEZCVml4RlFVRnRRanRCUVVOcVFqdEJRVU5CTzBGQlEwRXNZMEZCUnl4RFFVRkRhME1zVFVGQlRURkRMRTlCUVU0c1EwRkJZemhFTEZOQlFXeENMRVZCUVRaQ08wRkJRVVZTTEhOQ1FVRlZMRXRCUVZZN1FVRkJhMEk3UVVGRGFrUXNhVUpCUVU4c1MwRkJVRHRCUVVORUxGTkJURVFzVFVGTFR6dEJRVU5NV2l4blFrRkJUVVVzU1VGQlRqdEJRVU5FTzBGQlEwWXNUMEZZU0N4RlFXRkhXU3hGUVdKSUxFTkJZVTBzY1VKQllrNHNSVUZoTmtJc1ZVRkJVME1zUTBGQlZDeEZRVUZaTzBGQlEzSkRTQ3hyUWtGQlZTeExRVUZXTzBGQlEwRmFMR05CUVUxc1F5eFBRVUZPTEVkQlFXZENMRXRCUVdoQ08wRkJRMEZyUXl4alFVRk5ia0lzU1VGQlRqdEJRVU5FTEU5QmFrSklMRVZCYlVKSGFVTXNSVUZ1UWtnc1EwRnRRazBzY1VKQmJrSk9MRVZCYlVJMlFpeFpRVUZYTzBGQlEzQkRMRmxCUVVsa0xFMUJRVTF1UXl4UlFVRldMRVZCUVc5Q08wRkJRMnhDYlVNc1owSkJRVTFITEZsQlFVNDdRVUZEUkR0QlFVTkdMRTlCZGtKSU8wRkJkMEpFT3p0QlFVVkVPenM3T3pzN096WkNRVWxUTzBGQlExQXNWVUZCU1N4TFFVRkxkRU1zVVVGQlZDeEZRVUZ0UWp0QlFVTnFRaXhoUVVGTFowSXNTVUZCVER0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxHRkJRVXR4UWl4SlFVRk1PMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzclFrRkpWenRCUVVOVUxGZEJRVXN6UXl4UlFVRk1MRU5CUVdOaExFbEJRV1FzUTBGQmJVSXNUMEZCYmtJc1JVRkJORUlzUzBGQlMwVXNVVUZCVEN4RFFVRmpVU3hKUVVGa0xFVkJRVFZDTEVWQlEyTXdReXhIUVVSa0xFTkJRMnRDTEhsQ1FVUnNRaXhGUVVWamNFSXNWMEZHWkN4RFFVVXdRaXgzUWtGR01VSXNSVUZIWTNGQ0xGVkJTR1FzUTBGSGVVSXNjMGRCU0hwQ096dEJRVXRCTEZkQlFVdHVSQ3hSUVVGTUxFTkJRV052UkN4TlFVRmtPMEZCUTBRN096czdSVUY0VW0xQ1F5eDNRanM3UVVFeVVuUkNka1VzVVVGQlVVMHNVVUZCVWl4SFFVRnRRanRCUVVOcVFqUkVMRzFDUVVGcFFpeExRVVJCTzBGQlJXcENPenM3T3pzN1FVRk5RVW9zWTBGQldTeEhRVkpMTzBGQlUycENPenM3T3pzN1FVRk5RVlFzYTBKQlFXZENMRWRCWmtNN1FVRm5RbXBDT3pzN096czdRVUZOUVVVc2JVSkJRV2xDTEVkQmRFSkJPMEZCZFVKcVFqczdPenM3TzBGQlRVRkZMR2RDUVVGakxFdEJOMEpITzBGQk9FSnFRanM3T3pzN08wRkJUVUZ3UWl4dFFrRkJhVUlzUlVGd1EwRTdRVUZ4UTJwQ096czdPenM3UVVGTlFVTXNaMEpCUVdNc1UwRXpRMGM3UVVFMFEycENPenM3T3pzN1FVRk5RVllzWjBKQlFXTXNVMEZzUkVjN1FVRnRSR3BDT3pzN096czdRVUZOUVdNc1ZVRkJVU3hQUVhwRVV6dEJRVEJFYWtJN096czdPenRCUVUxQmVFSXNXVUZCVlN4RlFXaEZUenRCUVdsRmFrSTdPenM3T3p0QlFVMUJSQ3hYUVVGVExFVkJka1ZSTzBGQmQwVnFRblZFTEd0Q1FVRm5RaXhsUVhoRlF6dEJRWGxGYWtJN096czdPenRCUVUxQlVpeGhRVUZYTEVsQkwwVk5PMEZCWjBacVFqczdPenM3TzBGQlRVRjZRaXhwUWtGQlpTeEZRWFJHUlR0QlFYVkdha0k3T3pzN096dEJRVTFCVkN4WlFVRlZMRTFCTjBaUE8wRkJPRVpxUWpzN096czdPMEZCVFVGdFFpeGhRVUZYTEUxQmNFZE5PMEZCY1VkcVFqczdPenM3T3p0QlFVOUJkMElzWjBKQlFXTXNTMEUxUjBjN1FVRTJSMnBDT3pzN096czdPenM3UVVGVFFVTXNjMEpCUVc5Q0xFdEJkRWhJTzBGQmRVaHFRanM3T3pzN08wRkJUVUY0UXl4WFFVRlRMRU5CTjBoUk8wRkJPRWhxUWpzN096czdPMEZCVFVGR0xGZEJRVk1zUTBGd1NWRTdRVUZ4U1dwQ096czdPenM3UVVGTlFVY3NhVUpCUVdVc1JVRXpTVVU3UVVFMFNXcENPenM3T3pzN1FVRk5RVVlzWjBKQlFXTXNSVUZzU2tjN1FVRnRTbVk3T3pzN096czdRVUZQUm1Jc1lVRkJWenRCUVRGS1RTeERRVUZ1UWpzN1FVRTJTa0U3T3pzN1VVRkpVWEJDTEU4c1IwRkJRVUVzVHlJc0ltWnBiR1VpT2lKbWIzVnVaR0YwYVc5dUxuUnZiMngwYVhBdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNibWx0Y0c5eWRDQWtJR1p5YjIwZ0oycHhkV1Z5ZVNjN1hHNWNibWx0Y0c5eWRDQjdJRWRsZEZsdlJHbG5hWFJ6SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1WTI5eVpTYzdYRzVwYlhCdmNuUWdleUJOWldScFlWRjFaWEo1SUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1YldWa2FXRlJkV1Z5ZVNjN1hHNXBiWEJ2Y25RZ2V5QlVjbWxuWjJWeWN5QjlJR1p5YjIwZ0p5NHZabTkxYm1SaGRHbHZiaTUxZEdsc0xuUnlhV2RuWlhKekp6dGNibWx0Y0c5eWRDQjdJRkJ2YzJsMGFXOXVZV0pzWlNCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNXdiM05wZEdsdmJtRmliR1VuTzF4dVhHNHZLaXBjYmlBcUlGUnZiMngwYVhBZ2JXOWtkV3hsTGx4dUlDb2dRRzF2WkhWc1pTQm1iM1Z1WkdGMGFXOXVMblJ2YjJ4MGFYQmNiaUFxSUVCeVpYRjFhWEpsY3lCbWIzVnVaR0YwYVc5dUxuVjBhV3d1WW05NFhHNGdLaUJBY21WeGRXbHlaWE1nWm05MWJtUmhkR2x2Ymk1MWRHbHNMbTFsWkdsaFVYVmxjbmxjYmlBcUlFQnlaWEYxYVhKbGN5Qm1iM1Z1WkdGMGFXOXVMblYwYVd3dWRISnBaMmRsY25OY2JpQXFMMXh1WEc1amJHRnpjeUJVYjI5c2RHbHdJR1Y0ZEdWdVpITWdVRzl6YVhScGIyNWhZbXhsSUh0Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpYTWdZU0J1WlhjZ2FXNXpkR0Z1WTJVZ2IyWWdZU0JVYjI5c2RHbHdMbHh1SUNBZ0tpQkFZMnhoYzNOY2JpQWdJQ29nUUc1aGJXVWdWRzl2YkhScGNGeHVJQ0FnS2lCQVptbHlaWE1nVkc5dmJIUnBjQ05wYm1sMFhHNGdJQ0FxSUVCd1lYSmhiU0I3YWxGMVpYSjVmU0JsYkdWdFpXNTBJQzBnYWxGMVpYSjVJRzlpYW1WamRDQjBieUJoZEhSaFkyZ2dZU0IwYjI5c2RHbHdJSFJ2TGx4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJRzlpYW1WamRDQjBieUJsZUhSbGJtUWdkR2hsSUdSbFptRjFiSFFnWTI5dVptbG5kWEpoZEdsdmJpNWNiaUFnSUNvdlhHNGdJRjl6WlhSMWNDaGxiR1Z0Wlc1MExDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQ0E5SUdWc1pXMWxiblE3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ0pDNWxlSFJsYm1Rb2UzMHNJRlJ2YjJ4MGFYQXVaR1ZtWVhWc2RITXNJSFJvYVhNdUpHVnNaVzFsYm5RdVpHRjBZU2dwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0IwYUdsekxtTnNZWE56VG1GdFpTQTlJQ2RVYjI5c2RHbHdKenNnTHk4Z2FXVTVJR0poWTJzZ1kyOXRjR0YwWEc1Y2JpQWdJQ0IwYUdsekxtbHpRV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NXBjME5zYVdOcklEMGdabUZzYzJVN1hHNWNiaUFnSUNBdkx5QlVjbWxuWjJWeWN5QnBibWwwSUdseklHbGtaVzF3YjNSbGJuUXNJR3AxYzNRZ2JtVmxaQ0IwYnlCdFlXdGxJSE4xY21VZ2FYUWdhWE1nYVc1cGRHbGhiR2w2WldSY2JpQWdJQ0JVY21sbloyVnljeTVwYm1sMEtDUXBPMXh1WEc0Z0lDQWdkR2hwY3k1ZmFXNXBkQ2dwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhWFJwWVd4cGVtVnpJSFJvWlNCMGIyOXNkR2x3SUdKNUlITmxkSFJwYm1jZ2RHaGxJR055WldGMGFXNW5JSFJvWlNCMGFYQWdaV3hsYldWdWRDd2dZV1JrYVc1bklHbDBKM01nZEdWNGRDd2djMlYwZEdsdVp5QndjbWwyWVhSbElIWmhjbWxoWW14bGN5QmhibVFnYzJWMGRHbHVaeUJoZEhSeWFXSjFkR1Z6SUc5dUlIUm9aU0JoYm1Ob2IzSXVYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZhVzVwZENncElIdGNiaUFnSUNCTlpXUnBZVkYxWlhKNUxsOXBibWwwS0NrN1hHNGdJQ0FnZG1GeUlHVnNaVzFKWkNBOUlIUm9hWE11SkdWc1pXMWxiblF1WVhSMGNpZ25ZWEpwWVMxa1pYTmpjbWxpWldSaWVTY3BJSHg4SUVkbGRGbHZSR2xuYVhSektEWXNJQ2QwYjI5c2RHbHdKeWs3WEc1Y2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdWRHbHdWR1Y0ZENBOUlIUm9hWE11YjNCMGFXOXVjeTUwYVhCVVpYaDBJSHg4SUhSb2FYTXVKR1ZzWlcxbGJuUXVZWFIwY2lnbmRHbDBiR1VuS1R0Y2JpQWdJQ0IwYUdsekxuUmxiWEJzWVhSbElEMGdkR2hwY3k1dmNIUnBiMjV6TG5SbGJYQnNZWFJsSUQ4Z0pDaDBhR2x6TG05d2RHbHZibk11ZEdWdGNHeGhkR1VwSURvZ2RHaHBjeTVmWW5WcGJHUlVaVzF3YkdGMFpTaGxiR1Z0U1dRcE8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aGJHeHZkMGgwYld3cElIdGNiaUFnSUNBZ0lIUm9hWE11ZEdWdGNHeGhkR1V1WVhCd1pXNWtWRzhvWkc5amRXMWxiblF1WW05a2VTbGNiaUFnSUNBZ0lDQWdMbWgwYld3b2RHaHBjeTV2Y0hScGIyNXpMblJwY0ZSbGVIUXBYRzRnSUNBZ0lDQWdJQzVvYVdSbEtDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkR1Z0Y0d4aGRHVXVZWEJ3Wlc1a1ZHOG9aRzlqZFcxbGJuUXVZbTlrZVNsY2JpQWdJQ0FnSUNBZ0xuUmxlSFFvZEdocGN5NXZjSFJwYjI1ekxuUnBjRlJsZUhRcFhHNGdJQ0FnSUNBZ0lDNW9hV1JsS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNWhkSFJ5S0h0Y2JpQWdJQ0FnSUNkMGFYUnNaU2M2SUNjbkxGeHVJQ0FnSUNBZ0oyRnlhV0V0WkdWelkzSnBZbVZrWW5rbk9pQmxiR1Z0U1dRc1hHNGdJQ0FnSUNBblpHRjBZUzE1WlhScExXSnZlQ2M2SUdWc1pXMUpaQ3hjYmlBZ0lDQWdJQ2RrWVhSaExYUnZaMmRzWlNjNklHVnNaVzFKWkN4Y2JpQWdJQ0FnSUNka1lYUmhMWEpsYzJsNlpTYzZJR1ZzWlcxSlpGeHVJQ0FnSUgwcExtRmtaRU5zWVhOektIUm9hWE11YjNCMGFXOXVjeTUwY21sbloyVnlRMnhoYzNNcE8xeHVYRzRnSUNBZ2MzVndaWEl1WDJsdWFYUW9LVHRjYmlBZ0lDQjBhR2x6TGw5bGRtVnVkSE1vS1R0Y2JpQWdmVnh1WEc0Z0lGOW5aWFJFWldaaGRXeDBVRzl6YVhScGIyNG9LU0I3WEc0Z0lDQWdMeThnYUdGdVpHeGxJR3hsWjJGamVTQmpiR0Z6YzI1aGJXVnpYRzRnSUNBZ2RtRnlJSEJ2YzJsMGFXOXVJRDBnZEdocGN5NGtaV3hsYldWdWRGc3dYUzVqYkdGemMwNWhiV1V1YldGMFkyZ29MMXhjWWloMGIzQjhiR1ZtZEh4eWFXZG9kSHhpYjNSMGIyMHBYRnhpTDJjcE8xeHVJQ0FnSUhKbGRIVnliaUJ3YjNOcGRHbHZiaUEvSUhCdmMybDBhVzl1V3pCZElEb2dKM1J2Y0NjN1hHNGdJSDFjYmx4dUlDQmZaMlYwUkdWbVlYVnNkRUZzYVdkdWJXVnVkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMk5sYm5SbGNpYzdYRzRnSUgxY2JseHVJQ0JmWjJWMFNFOW1abk5sZENncElIdGNiaUFnSUNCcFppaDBhR2x6TG5CdmMybDBhVzl1SUQwOVBTQW5iR1ZtZENjZ2ZId2dkR2hwY3k1d2IzTnBkR2x2YmlBOVBUMGdKM0pwWjJoMEp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YjNCMGFXOXVjeTVvVDJabWMyVjBJQ3NnZEdocGN5NXZjSFJwYjI1ekxuUnZiMngwYVhCWGFXUjBhRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViM0IwYVc5dWN5NW9UMlptYzJWMFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1gyZGxkRlpQWm1aelpYUW9LU0I3WEc0Z0lDQWdhV1lvZEdocGN5NXdiM05wZEdsdmJpQTlQVDBnSjNSdmNDY2dmSHdnZEdocGN5NXdiM05wZEdsdmJpQTlQVDBnSjJKdmRIUnZiU2NwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtOXdkR2x2Ym5NdWRrOW1abk5sZENBcklIUm9hWE11YjNCMGFXOXVjeTUwYjI5c2RHbHdTR1ZwWjJoME8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmNIUnBiMjV6TG5aUFptWnpaWFJjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nWW5WcGJHUnpJSFJvWlNCMGIyOXNkR2x3SUdWc1pXMWxiblFzSUdGa1pITWdZWFIwY21saWRYUmxjeXdnWVc1a0lISmxkSFZ5Ym5NZ2RHaGxJSFJsYlhCc1lYUmxMbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMkoxYVd4a1ZHVnRjR3hoZEdVb2FXUXBJSHRjYmlBZ0lDQjJZWElnZEdWdGNHeGhkR1ZEYkdGemMyVnpJRDBnS0dBa2UzUm9hWE11YjNCMGFXOXVjeTUwYjI5c2RHbHdRMnhoYzNOOUlDUjdkR2hwY3k1dmNIUnBiMjV6TG5CdmMybDBhVzl1UTJ4aGMzTjlJQ1I3ZEdocGN5NXZjSFJwYjI1ekxuUmxiWEJzWVhSbFEyeGhjM05sYzMxZ0tTNTBjbWx0S0NrN1hHNGdJQ0FnZG1GeUlDUjBaVzF3YkdGMFpTQTlJQ0FrS0NjOFpHbDJQand2WkdsMlBpY3BMbUZrWkVOc1lYTnpLSFJsYlhCc1lYUmxRMnhoYzNObGN5a3VZWFIwY2loN1hHNGdJQ0FnSUNBbmNtOXNaU2M2SUNkMGIyOXNkR2x3Snl4Y2JpQWdJQ0FnSUNkaGNtbGhMV2hwWkdSbGJpYzZJSFJ5ZFdVc1hHNGdJQ0FnSUNBblpHRjBZUzFwY3kxaFkzUnBkbVVuT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ2RrWVhSaExXbHpMV1p2WTNWekp6b2dabUZzYzJVc1hHNGdJQ0FnSUNBbmFXUW5PaUJwWkZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQWtkR1Z0Y0d4aGRHVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nYzJWMGN5QjBhR1VnY0c5emFYUnBiMjRnWTJ4aGMzTWdiMllnWVc0Z1pXeGxiV1Z1ZENCaGJtUWdjbVZqZFhKemFYWmxiSGtnWTJGc2JITWdhWFJ6Wld4bUlIVnVkR2xzSUhSb1pYSmxJR0Z5WlNCdWJ5QnRiM0psSUhCdmMzTnBZbXhsSUhCdmMybDBhVzl1Y3lCMGJ5QmhkSFJsYlhCMExDQnZjaUIwYUdVZ2RHOXZiSFJwY0NCbGJHVnRaVzUwSUdseklHNXZJR3h2Ym1kbGNpQmpiMnhzYVdScGJtY3VYRzRnSUNBcUlHbG1JSFJvWlNCMGIyOXNkR2x3SUdseklHeGhjbWRsY2lCMGFHRnVJSFJvWlNCelkzSmxaVzRnZDJsa2RHZ3NJR1JsWm1GMWJIUWdkRzhnWm5Wc2JDQjNhV1IwYUNBdElHRnVlU0IxYzJWeUlITmxiR1ZqZEdWa0lHMWhjbWRwYmx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDNObGRGQnZjMmwwYVc5dUtDa2dlMXh1SUNBZ0lITjFjR1Z5TGw5elpYUlFiM05wZEdsdmJpaDBhR2x6TGlSbGJHVnRaVzUwTENCMGFHbHpMblJsYlhCc1lYUmxLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCeVpYWmxZV3h6SUhSb1pTQjBiMjlzZEdsd0xDQmhibVFnWm1seVpYTWdZVzRnWlhabGJuUWdkRzhnWTJ4dmMyVWdZVzU1SUc5MGFHVnlJRzl3Wlc0Z2RHOXZiSFJwY0hNZ2IyNGdkR2hsSUhCaFoyVmNiaUFnSUNvZ1FHWnBjbVZ6SUZSdmIyeDBhWEFqWTJ4dmMyVnRaVnh1SUNBZ0tpQkFabWx5WlhNZ1ZHOXZiSFJwY0NOemFHOTNYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2k5Y2JpQWdjMmh2ZHlncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG5Ob2IzZFBiaUFoUFQwZ0oyRnNiQ2NnSmlZZ0lVMWxaR2xoVVhWbGNua3VhWE1vZEdocGN5NXZjSFJwYjI1ekxuTm9iM2RQYmlrcElIdGNiaUFnSUNBZ0lDOHZJR052Ym5OdmJHVXVaWEp5YjNJb0oxUm9aU0J6WTNKbFpXNGdhWE1nZEc5dklITnRZV3hzSUhSdklHUnBjM0JzWVhrZ2RHaHBjeUIwYjI5c2RHbHdKeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQjBhR2x6TG5SbGJYQnNZWFJsTG1OemN5Z25kbWx6YVdKcGJHbDBlU2NzSUNkb2FXUmtaVzRuS1M1emFHOTNLQ2s3WEc0Z0lDQWdkR2hwY3k1ZmMyVjBVRzl6YVhScGIyNG9LVHRjYmlBZ0lDQjBhR2x6TG5SbGJYQnNZWFJsTG5KbGJXOTJaVU5zWVhOektDZDBiM0FnWW05MGRHOXRJR3hsWm5RZ2NtbG5hSFFuS1M1aFpHUkRiR0Z6Y3loMGFHbHpMbkJ2YzJsMGFXOXVLVnh1SUNBZ0lIUm9hWE11ZEdWdGNHeGhkR1V1Y21WdGIzWmxRMnhoYzNNb0oyRnNhV2R1TFhSdmNDQmhiR2xuYmkxaWIzUjBiMjBnWVd4cFoyNHRiR1ZtZENCaGJHbG5iaTF5YVdkb2RDQmhiR2xuYmkxalpXNTBaWEluS1M1aFpHUkRiR0Z6Y3lnbllXeHBaMjR0SnlBcklIUm9hWE11WVd4cFoyNXRaVzUwS1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFWnBjbVZ6SUhSdklHTnNiM05sSUdGc2JDQnZkR2hsY2lCdmNHVnVJSFJ2YjJ4MGFYQnpJRzl1SUhSb1pTQndZV2RsWEc0Z0lDQWdJQ29nUUdWMlpXNTBJRU5zYjNObGJXVWpkRzl2YkhScGNGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVKR1ZzWlcxbGJuUXVkSEpwWjJkbGNpZ25ZMnh2YzJWdFpTNTZaaTUwYjI5c2RHbHdKeXdnZEdocGN5NTBaVzF3YkdGMFpTNWhkSFJ5S0NkcFpDY3BLVHRjYmx4dVhHNGdJQ0FnZEdocGN5NTBaVzF3YkdGMFpTNWhkSFJ5S0h0Y2JpQWdJQ0FnSUNka1lYUmhMV2x6TFdGamRHbDJaU2M2SUhSeWRXVXNYRzRnSUNBZ0lDQW5ZWEpwWVMxb2FXUmtaVzRuT2lCbVlXeHpaVnh1SUNBZ0lIMHBPMXh1SUNBZ0lGOTBhR2x6TG1selFXTjBhWFpsSUQwZ2RISjFaVHRjYmlBZ0lDQXZMeUJqYjI1emIyeGxMbXh2WnloMGFHbHpMblJsYlhCc1lYUmxLVHRjYmlBZ0lDQjBhR2x6TG5SbGJYQnNZWFJsTG5OMGIzQW9LUzVvYVdSbEtDa3VZM056S0NkMmFYTnBZbWxzYVhSNUp5d2dKeWNwTG1aaFpHVkpiaWgwYUdsekxtOXdkR2x2Ym5NdVptRmtaVWx1UkhWeVlYUnBiMjRzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0x5OXRZWGxpWlNCa2J5QnpkSFZtWmo5Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCR2FYSmxjeUIzYUdWdUlIUm9aU0IwYjI5c2RHbHdJR2x6SUhOb2IzZHVYRzRnSUNBZ0lDb2dRR1YyWlc1MElGUnZiMngwYVhBamMyaHZkMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11SkdWc1pXMWxiblF1ZEhKcFoyZGxjaWduYzJodmR5NTZaaTUwYjI5c2RHbHdKeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NHbGtaWE1nZEdobElHTjFjbkpsYm5RZ2RHOXZiSFJwY0N3Z1lXNWtJSEpsYzJWMGN5QjBhR1VnY0c5emFYUnBiMjVwYm1jZ1kyeGhjM01nYVdZZ2FYUWdkMkZ6SUdOb1lXNW5aV1FnWkhWbElIUnZJR052Ykd4cGMybHZibHh1SUNBZ0tpQkFabWx5WlhNZ1ZHOXZiSFJwY0NOb2FXUmxYRzRnSUNBcUlFQm1kVzVqZEdsdmJseHVJQ0FnS2k5Y2JpQWdhR2xrWlNncElIdGNiaUFnSUNBdkx5QmpiMjV6YjJ4bExteHZaeWduYUdsa2FXNW5KeXdnZEdocGN5NGtaV3hsYldWdWRDNWtZWFJoS0NkNVpYUnBMV0p2ZUNjcEtUdGNiaUFnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJSFJvYVhNdWRHVnRjR3hoZEdVdWMzUnZjQ2dwTG1GMGRISW9lMXh1SUNBZ0lDQWdKMkZ5YVdFdGFHbGtaR1Z1SnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ2RrWVhSaExXbHpMV0ZqZEdsMlpTYzZJR1poYkhObFhHNGdJQ0FnZlNrdVptRmtaVTkxZENoMGFHbHpMbTl3ZEdsdmJuTXVabUZrWlU5MWRFUjFjbUYwYVc5dUxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJRjkwYUdsekxtbHpRV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnSUNCZmRHaHBjeTVwYzBOc2FXTnJJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZTazdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dabWx5WlhNZ2QyaGxiaUIwYUdVZ2RHOXZiSFJwY0NCcGN5Qm9hV1JrWlc1Y2JpQWdJQ0FnS2lCQVpYWmxiblFnVkc5dmJIUnBjQ05vYVdSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NGtaV3hsYldWdWRDNTBjbWxuWjJWeUtDZG9hV1JsTG5wbUxuUnZiMngwYVhBbktUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJoWkdSeklHVjJaVzUwSUd4cGMzUmxibVZ5Y3lCbWIzSWdkR2hsSUhSdmIyeDBhWEFnWVc1a0lHbDBjeUJoYm1Ob2IzSmNiaUFnSUNvZ1ZFOUVUeUJqYjIxaWFXNWxJSE52YldVZ2IyWWdkR2hsSUd4cGMzUmxibVZ5Y3lCc2FXdGxJR1p2WTNWeklHRnVaQ0J0YjNWelpXVnVkR1Z5TENCbGRHTXVYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmZaWFpsYm5SektDa2dlMXh1SUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnZG1GeUlDUjBaVzF3YkdGMFpTQTlJSFJvYVhNdWRHVnRjR3hoZEdVN1hHNGdJQ0FnZG1GeUlHbHpSbTlqZFhNZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1dmNIUnBiMjV6TG1ScGMyRmliR1ZJYjNabGNpa2dlMXh1WEc0Z0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MFhHNGdJQ0FnSUNBdWIyNG9KMjF2ZFhObFpXNTBaWEl1ZW1ZdWRHOXZiSFJwY0Njc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmZkR2hwY3k1cGMwRmpkR2wyWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWMyaHZkeWdwTzF4dUlDQWdJQ0FnSUNBZ0lIMHNJRjkwYUdsekxtOXdkR2x2Ym5NdWFHOTJaWEpFWld4aGVTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1YjI0b0oyMXZkWE5sYkdWaGRtVXVlbVl1ZEc5dmJIUnBjQ2NzSUdaMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0Y5MGFHbHpMblJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXbHpSbTlqZFhNZ2ZId2dLRjkwYUdsekxtbHpRMnhwWTJzZ0ppWWdJVjkwYUdsekxtOXdkR2x2Ym5NdVkyeHBZMnRQY0dWdUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbWhwWkdVb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWpiR2xqYTA5d1pXNHBJSHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNaVzFsYm5RdWIyNG9KMjF2ZFhObFpHOTNiaTU2Wmk1MGIyOXNkR2x3Snl3Z1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdJQ0JsTG5OMGIzQkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdWFYTkRiR2xqYXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2WDNSb2FYTXVhR2xrWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQzh2SUY5MGFHbHpMbWx6UTJ4cFkyc2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NXBjME5zYVdOcklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvS0Y5MGFHbHpMbTl3ZEdsdmJuTXVaR2x6WVdKc1pVaHZkbVZ5SUh4OElDRmZkR2hwY3k0a1pXeGxiV1Z1ZEM1aGRIUnlLQ2QwWVdKcGJtUmxlQ2NwS1NBbUppQWhYM1JvYVhNdWFYTkJZM1JwZG1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbk5vYjNjb0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOXVLQ2R0YjNWelpXUnZkMjR1ZW1ZdWRHOXZiSFJwY0Njc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnWlM1emRHOXdTVzF0WldScFlYUmxVSEp2Y0dGbllYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11YVhORGJHbGpheUE5SUhSeWRXVTdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSVhSb2FYTXViM0IwYVc5dWN5NWthWE5oWW14bFJtOXlWRzkxWTJncElIdGNiaUFnSUNBZ0lIUm9hWE11SkdWc1pXMWxiblJjYmlBZ0lDQWdJQzV2YmlnbmRHRndMbnBtTG5SdmIyeDBhWEFnZEc5MVkyaGxibVF1ZW1ZdWRHOXZiSFJwY0Njc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVhWE5CWTNScGRtVWdQeUJmZEdocGN5NW9hV1JsS0NrZ09pQmZkR2hwY3k1emFHOTNLQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MExtOXVLSHRjYmlBZ0lDQWdJQzh2SUNkMGIyZG5iR1V1ZW1ZdWRISnBaMmRsY2ljNklIUm9hWE11ZEc5bloyeGxMbUpwYm1Rb2RHaHBjeWtzWEc0Z0lDQWdJQ0F2THlBblkyeHZjMlV1ZW1ZdWRISnBaMmRsY2ljNklIUm9hWE11YUdsa1pTNWlhVzVrS0hSb2FYTXBYRzRnSUNBZ0lDQW5ZMnh2YzJVdWVtWXVkSEpwWjJkbGNpYzZJSFJvYVhNdWFHbGtaUzVpYVc1a0tIUm9hWE1wWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IwYUdsekxpUmxiR1Z0Wlc1MFhHNGdJQ0FnSUNBdWIyNG9KMlp2WTNWekxucG1MblJ2YjJ4MGFYQW5MQ0JtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ0lHbHpSbTlqZFhNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdWFYTkRiR2xqYXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIZGxKM0psSUc1dmRDQnphRzkzYVc1bklHOXdaVzRnYjI0Z1kyeHBZMnR6TENCM1pTQnVaV1ZrSUhSdklIQnlaWFJsYm1RZ1lTQmpiR2xqYXkxc1lYVnVZMmhsWkNCbWIyTjFjeUJwYzI0bmRGeHVJQ0FnSUNBZ0lDQWdJQzh2SUdFZ2NtVmhiQ0JtYjJOMWN5d2diM1JvWlhKM2FYTmxJRzl1SUdodmRtVnlJR0Z1WkNCamIyMWxJR0poWTJzZ2QyVWdaMlYwSUdKaFpDQmlaV2hoZG1sdmNseHVJQ0FnSUNBZ0lDQWdJR2xtS0NGZmRHaHBjeTV2Y0hScGIyNXpMbU5zYVdOclQzQmxiaWtnZXlCcGMwWnZZM1Z6SUQwZ1ptRnNjMlU3SUgxY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11YzJodmR5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1Z4dVhHNGdJQ0FnSUNBdWIyNG9KMlp2WTNWemIzVjBMbnBtTG5SdmIyeDBhWEFuTENCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJR2x6Um05amRYTWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWFYTkRiR2xqYXlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVvYVdSbEtDazdYRzRnSUNBZ0lDQjlLVnh1WEc0Z0lDQWdJQ0F1YjI0b0ozSmxjMmw2WlcxbExucG1MblJ5YVdkblpYSW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtbHpRV04wYVhabEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM05sZEZCdmMybDBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUdGa1pITWdZU0IwYjJkbmJHVWdiV1YwYUc5a0xDQnBiaUJoWkdScGRHbHZiaUIwYnlCMGFHVWdjM1JoZEdsaklITm9iM2NvS1NBbUlHaHBaR1VvS1NCbWRXNWpkR2x2Ym5OY2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFMMXh1SUNCMGIyZG5iR1VvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YVhOQlkzUnBkbVVwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhR2xrWlNncE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTm9iM2NvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVnpkSEp2ZVhNZ1lXNGdhVzV6ZEdGdVkyVWdiMllnZEc5dmJIUnBjQ3dnY21WdGIzWmxjeUIwWlcxd2JHRjBaU0JsYkdWdFpXNTBJR1p5YjIwZ2RHaGxJSFpwWlhjdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaTljYmlBZ1gyUmxjM1J5YjNrb0tTQjdYRzRnSUNBZ2RHaHBjeTRrWld4bGJXVnVkQzVoZEhSeUtDZDBhWFJzWlNjc0lIUm9hWE11ZEdWdGNHeGhkR1V1ZEdWNGRDZ3BLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YjJabUtDY3VlbVl1ZEhKcFoyZGxjaUF1ZW1ZdWRHOXZiSFJwY0NjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaVzF2ZG1WRGJHRnpjeWduYUdGekxYUnBjQ0IwYjNBZ2NtbG5hSFFnYkdWbWRDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV5WlcxdmRtVkJkSFJ5S0NkaGNtbGhMV1JsYzJOeWFXSmxaR0o1SUdGeWFXRXRhR0Z6Y0c5d2RYQWdaR0YwWVMxa2FYTmhZbXhsTFdodmRtVnlJR1JoZEdFdGNtVnphWHBsSUdSaGRHRXRkRzluWjJ4bElHUmhkR0V0ZEc5dmJIUnBjQ0JrWVhSaExYbGxkR2t0WW05NEp5azdYRzVjYmlBZ0lDQjBhR2x6TG5SbGJYQnNZWFJsTG5KbGJXOTJaU2dwTzF4dUlDQjlYRzU5WEc1Y2JsUnZiMngwYVhBdVpHVm1ZWFZzZEhNZ1BTQjdYRzRnSUdScGMyRmliR1ZHYjNKVWIzVmphRG9nWm1Gc2MyVXNYRzRnSUM4cUtseHVJQ0FnS2lCVWFXMWxMQ0JwYmlCdGN5d2dZbVZtYjNKbElHRWdkRzl2YkhScGNDQnphRzkxYkdRZ2IzQmxiaUJ2YmlCb2IzWmxjaTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQXlNREJjYmlBZ0lDb3ZYRzRnSUdodmRtVnlSR1ZzWVhrNklESXdNQ3hjYmlBZ0x5b3FYRzRnSUNBcUlGUnBiV1VzSUdsdUlHMXpMQ0JoSUhSdmIyeDBhWEFnYzJodmRXeGtJSFJoYTJVZ2RHOGdabUZrWlNCcGJuUnZJSFpwWlhjdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ29nUUdSbFptRjFiSFFnTVRVd1hHNGdJQ0FxTDF4dUlDQm1ZV1JsU1c1RWRYSmhkR2x2YmpvZ01UVXdMRnh1SUNBdktpcGNiaUFnSUNvZ1ZHbHRaU3dnYVc0Z2JYTXNJR0VnZEc5dmJIUnBjQ0J6YUc5MWJHUWdkR0ZyWlNCMGJ5Qm1ZV1JsSUc5MWRDQnZaaUIyYVdWM0xseHVJQ0FnS2lCQWIzQjBhVzl1WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhHNGdJQ0FxSUVCa1pXWmhkV3gwSURFMU1GeHVJQ0FnS2k5Y2JpQWdabUZrWlU5MWRFUjFjbUYwYVc5dU9pQXhOVEFzWEc0Z0lDOHFLbHh1SUNBZ0tpQkVhWE5oWW14bGN5Qm9iM1psY2lCbGRtVnVkSE1nWm5KdmJTQnZjR1Z1YVc1bklIUm9aU0IwYjI5c2RHbHdJR2xtSUhObGRDQjBieUIwY25WbFhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UySnZiMnhsWVc1OVhHNGdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnSUNBcUwxeHVJQ0JrYVhOaFlteGxTRzkyWlhJNklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dUM0IwYVc5dVlXd2dZV1JrZEdsdmJtRnNJR05zWVhOelpYTWdkRzhnWVhCd2JIa2dkRzhnZEdobElIUnZiMngwYVhBZ2RHVnRjR3hoZEdVZ2IyNGdhVzVwZEM1Y2JpQWdJQ29nUUc5d2RHbHZibHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQWdLaUJBWkdWbVlYVnNkQ0FuSjF4dUlDQWdLaTljYmlBZ2RHVnRjR3hoZEdWRGJHRnpjMlZ6T2lBbkp5eGNiaUFnTHlvcVhHNGdJQ0FxSUU1dmJpMXZjSFJwYjI1aGJDQmpiR0Z6Y3lCaFpHUmxaQ0IwYnlCMGIyOXNkR2x3SUhSbGJYQnNZWFJsY3k0Z1JtOTFibVJoZEdsdmJpQmtaV1poZFd4MElHbHpJQ2QwYjI5c2RHbHdKeTVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5kRzl2YkhScGNDZGNiaUFnSUNvdlhHNGdJSFJ2YjJ4MGFYQkRiR0Z6Y3pvZ0ozUnZiMngwYVhBbkxGeHVJQ0F2S2lwY2JpQWdJQ29nUTJ4aGMzTWdZWEJ3YkdsbFpDQjBieUIwYUdVZ2RHOXZiSFJwY0NCaGJtTm9iM0lnWld4bGJXVnVkQzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5hR0Z6TFhScGNDZGNiaUFnSUNvdlhHNGdJSFJ5YVdkblpYSkRiR0Z6Y3pvZ0oyaGhjeTEwYVhBbkxGeHVJQ0F2S2lwY2JpQWdJQ29nVFdsdWFXMTFiU0JpY21WaGEzQnZhVzUwSUhOcGVtVWdZWFFnZDJocFkyZ2dkRzhnYjNCbGJpQjBhR1VnZEc5dmJIUnBjQzVjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQW5jMjFoYkd3blhHNGdJQ0FxTDF4dUlDQnphRzkzVDI0NklDZHpiV0ZzYkNjc1hHNGdJQzhxS2x4dUlDQWdLaUJEZFhOMGIyMGdkR1Z0Y0d4aGRHVWdkRzhnWW1VZ2RYTmxaQ0IwYnlCblpXNWxjbUYwWlNCdFlYSnJkWEFnWm05eUlIUnZiMngwYVhBdVhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ29nUUdSbFptRjFiSFFnSnlkY2JpQWdJQ292WEc0Z0lIUmxiWEJzWVhSbE9pQW5KeXhjYmlBZ0x5b3FYRzRnSUNBcUlGUmxlSFFnWkdsemNHeGhlV1ZrSUdsdUlIUm9aU0IwYjI5c2RHbHdJSFJsYlhCc1lYUmxJRzl1SUc5d1pXNHVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ0p5ZGNiaUFnSUNvdlhHNGdJSFJwY0ZSbGVIUTZJQ2NuTEZ4dUlDQjBiM1ZqYUVOc2IzTmxWR1Y0ZERvZ0oxUmhjQ0IwYnlCamJHOXpaUzRuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNkeklIUm9aU0IwYjI5c2RHbHdJSFJ2SUhKbGJXRnBiaUJ2Y0dWdUlHbG1JSFJ5YVdkblpYSmxaQ0IzYVhSb0lHRWdZMnhwWTJzZ2IzSWdkRzkxWTJnZ1pYWmxiblF1WEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEc0Z0lDQXFJRUJrWldaaGRXeDBJSFJ5ZFdWY2JpQWdJQ292WEc0Z0lHTnNhV05yVDNCbGJqb2dkSEoxWlN4Y2JpQWdMeW9xWEc0Z0lDQXFJRVJGVUZKRlEwRlVSVVFnUVdSa2FYUnBiMjVoYkNCd2IzTnBkR2x2Ym1sdVp5QmpiR0Z6YzJWekxDQnpaWFFnWW5rZ2RHaGxJRXBUWEc0Z0lDQXFJRUJ2Y0hScGIyNWNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDb2dRR1JsWm1GMWJIUWdKeWRjYmlBZ0lDb3ZYRzRnSUhCdmMybDBhVzl1UTJ4aGMzTTZJQ2NuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dVRzl6YVhScGIyNGdiMllnZEc5dmJIUnBjQzRnUTJGdUlHSmxJR3hsWm5Rc0lISnBaMmgwTENCaWIzUjBiMjBzSUhSdmNDd2diM0lnWVhWMGJ5NWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBbllYVjBieWRjYmlBZ0lDb3ZYRzRnSUhCdmMybDBhVzl1T2lBbllYVjBieWNzWEc0Z0lDOHFLbHh1SUNBZ0tpQkJiR2xuYm0xbGJuUWdiMllnZEc5dmJIUnBjQ0J5Wld4aGRHbDJaU0IwYnlCaGJtTm9iM0l1SUVOaGJpQmlaU0JzWldaMExDQnlhV2RvZEN3Z1ltOTBkRzl0TENCMGIzQXNJR05sYm5SbGNpd2diM0lnWVhWMGJ5NWNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBbllYVjBieWRjYmlBZ0lDb3ZYRzRnSUdGc2FXZHViV1Z1ZERvZ0oyRjFkRzhuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dRV3hzYjNjZ2IzWmxjbXhoY0NCdlppQmpiMjUwWVdsdVpYSXZkMmx1Wkc5M0xpQkpaaUJtWVd4elpTd2dkRzl2YkhScGNDQjNhV3hzSUdacGNuTjBJSFJ5ZVNCMGIxeHVJQ0FnS2lCd2IzTnBkR2x2YmlCaGN5QmtaV1pwYm1Wa0lHSjVJR1JoZEdFdGNHOXphWFJwYjI0Z1lXNWtJR1JoZEdFdFlXeHBaMjV0Wlc1MExDQmlkWFFnY21Wd2IzTnBkR2x2YmlCcFpseHVJQ0FnS2lCcGRDQjNiM1ZzWkNCallYVnpaU0JoYmlCdmRtVnlabXh2ZHk0Z0lFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCaGJHeHZkMDkyWlhKc1lYQTZJR1poYkhObExGeHVJQ0F2S2lwY2JpQWdJQ29nUVd4c2IzY2diM1psY214aGNDQnZaaUJ2Ym14NUlIUm9aU0JpYjNSMGIyMGdiMllnZEdobElHTnZiblJoYVc1bGNpNGdWR2hwY3lCcGN5QjBhR1VnYlc5emRDQmpiMjF0YjI1Y2JpQWdJQ29nWW1Wb1lYWnBiM0lnWm05eUlHUnliM0JrYjNkdWN5d2dZV3hzYjNkcGJtY2dkR2hsSUdSeWIzQmtiM2R1SUhSdklHVjRkR1Z1WkNCMGFHVWdZbTkwZEc5dElHOW1JSFJvWlZ4dUlDQWdLaUJ6WTNKbFpXNGdZblYwSUc1dmRDQnZkR2hsY25kcGMyVWdhVzVtYkhWbGJtTmxJRzl5SUdKeVpXRnJJRzkxZENCdlppQjBhR1VnWTI5dWRHRnBibVZ5TGx4dUlDQWdLaUJNWlhOeklHTnZiVzF2YmlCbWIzSWdkRzl2YkhScGNITXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQXFMMXh1SUNCaGJHeHZkMEp2ZEhSdmJVOTJaWEpzWVhBNklHWmhiSE5sTEZ4dUlDQXZLaXBjYmlBZ0lDb2dSR2x6ZEdGdVkyVXNJR2x1SUhCcGVHVnNjeXdnZEdobElIUmxiWEJzWVhSbElITm9iM1ZzWkNCd2RYTm9JR0YzWVhrZ1puSnZiU0IwYUdVZ1lXNWphRzl5SUc5dUlIUm9aU0JaSUdGNGFYTXVYRzRnSUNBcUlFQnZjSFJwYjI1Y2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNiaUFnSUNvZ1FHUmxabUYxYkhRZ01GeHVJQ0FnS2k5Y2JpQWdkazltWm5ObGREb2dNQ3hjYmlBZ0x5b3FYRzRnSUNBcUlFUnBjM1JoYm1ObExDQnBiaUJ3YVhobGJITXNJSFJvWlNCMFpXMXdiR0YwWlNCemFHOTFiR1FnY0hWemFDQmhkMkY1SUdaeWIyMGdkR2hsSUdGdVkyaHZjaUJ2YmlCMGFHVWdXQ0JoZUdselhHNGdJQ0FxSUVCdmNIUnBiMjVjYmlBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdLaTljYmlBZ2FFOW1abk5sZERvZ01DeGNiaUFnTHlvcVhHNGdJQ0FxSUVScGMzUmhibU5sTENCcGJpQndhWGhsYkhNc0lIUm9aU0IwWlcxd2JHRjBaU0J6Y0dGamFXNW5JR0YxZEc4dFlXUnFkWE4wSUdadmNpQmhJSFpsY25ScFkyRnNJSFJ2YjJ4MGFYQmNiaUFnSUNvZ1FHOXdkR2x2Ymx4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnS2lCQVpHVm1ZWFZzZENBeE5GeHVJQ0FnS2k5Y2JpQWdkRzl2YkhScGNFaGxhV2RvZERvZ01UUXNYRzRnSUM4cUtseHVJQ0FnS2lCRWFYTjBZVzVqWlN3Z2FXNGdjR2w0Wld4ekxDQjBhR1VnZEdWdGNHeGhkR1VnYzNCaFkybHVaeUJoZFhSdkxXRmthblZ6ZENCbWIzSWdZU0JvYjNKcGVtOXVkR0ZzSUhSdmIyeDBhWEJjYmlBZ0lDb2dRRzl3ZEdsdmJseHVJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQXhNbHh1SUNBZ0tpOWNiaUFnZEc5dmJIUnBjRmRwWkhSb09pQXhNaXhjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dRV3hzYjNjZ1NGUk5UQ0JwYmlCMGIyOXNkR2x3TGlCWFlYSnVhVzVuT2lCSlppQjViM1VnWVhKbElHeHZZV1JwYm1jZ2RYTmxjaTFuWlc1bGNtRjBaV1FnWTI5dWRHVnVkQ0JwYm5SdklIUnZiMngwYVhCekxGeHVJQ0FnS2lCaGJHeHZkMmx1WnlCSVZFMU1JRzFoZVNCdmNHVnVJSGx2ZFhKelpXeG1JSFZ3SUhSdklGaFRVeUJoZEhSaFkydHpMbHh1SUNBZ0tpQkFiM0IwYVc5dVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh1SUNBZ0tpQkFaR1ZtWVhWc2RDQm1ZV3h6WlZ4dUlDQWdLaTljYmlBZ1lXeHNiM2RJZEcxc09pQm1ZV3h6WlZ4dWZUdGNibHh1THlvcVhHNGdLaUJVVDBSUElIVjBhV3hwZW1VZ2NtVnphWHBsSUdWMlpXNTBJSFJ5YVdkblpYSmNiaUFxTDF4dVhHNWxlSEJ2Y25RZ2UxUnZiMngwYVhCOU8xeHVJbDE5XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udG9vbHRpcC5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Cb3ggPSB1bmRlZmluZWQ7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKFwiLi9mb3VuZGF0aW9uLnV0aWwuY29yZVwiKTtcblxudmFyIEJveCA9IHtcbiAgSW1Ob3RUb3VjaGluZ1lvdTogSW1Ob3RUb3VjaGluZ1lvdSxcbiAgT3ZlcmxhcEFyZWE6IE92ZXJsYXBBcmVhLFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzLFxuICBHZXRFeHBsaWNpdE9mZnNldHM6IEdldEV4cGxpY2l0T2Zmc2V0c1xuXG4gIC8qKlxuICAgKiBDb21wYXJlcyB0aGUgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50IHRvIGEgY29udGFpbmVyIGFuZCBkZXRlcm1pbmVzIGNvbGxpc2lvbiBldmVudHMgd2l0aCBjb250YWluZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdGVzdCBmb3IgY29sbGlzaW9ucy5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHBhcmVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIGJvdW5kaW5nIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIHtCb29sZWFufSBsck9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayBsZWZ0IGFuZCByaWdodCB2YWx1ZXMgb25seS5cbiAgICogQHBhcmFtIHtCb29sZWFufSB0Yk9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgb25seS5cbiAgICogQGRlZmF1bHQgaWYgbm8gcGFyZW50IG9iamVjdCBwYXNzZWQsIGRldGVjdHMgY29sbGlzaW9ucyB3aXRoIGB3aW5kb3dgLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIGNvbGxpc2lvbiBmcmVlLCBmYWxzZSBpZiBhIGNvbGxpc2lvbiBpbiBhbnkgZGlyZWN0aW9uLlxuICAgKi9cbn07ZnVuY3Rpb24gSW1Ob3RUb3VjaGluZ1lvdShlbGVtZW50LCBwYXJlbnQsIGxyT25seSwgdGJPbmx5LCBpZ25vcmVCb3R0b20pIHtcbiAgcmV0dXJuIE92ZXJsYXBBcmVhKGVsZW1lbnQsIHBhcmVudCwgbHJPbmx5LCB0Yk9ubHksIGlnbm9yZUJvdHRvbSkgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBPdmVybGFwQXJlYShlbGVtZW50LCBwYXJlbnQsIGxyT25seSwgdGJPbmx5LCBpZ25vcmVCb3R0b20pIHtcbiAgdmFyIGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgdG9wT3ZlcixcbiAgICAgIGJvdHRvbU92ZXIsXG4gICAgICBsZWZ0T3ZlcixcbiAgICAgIHJpZ2h0T3ZlcjtcbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tT3ZlciA9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wIC0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0KTtcbiAgICB0b3BPdmVyID0gZWxlRGltcy5vZmZzZXQudG9wIC0gcGFyRGltcy5vZmZzZXQudG9wO1xuICAgIGxlZnRPdmVyID0gZWxlRGltcy5vZmZzZXQubGVmdCAtIHBhckRpbXMub2Zmc2V0LmxlZnQ7XG4gICAgcmlnaHRPdmVyID0gcGFyRGltcy53aWR0aCArIHBhckRpbXMub2Zmc2V0LmxlZnQgLSAoZWxlRGltcy5vZmZzZXQubGVmdCArIGVsZURpbXMud2lkdGgpO1xuICB9IGVsc2Uge1xuICAgIGJvdHRvbU92ZXIgPSBlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0ICsgZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgLSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQpO1xuICAgIHRvcE92ZXIgPSBlbGVEaW1zLm9mZnNldC50b3AgLSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcDtcbiAgICBsZWZ0T3ZlciA9IGVsZURpbXMub2Zmc2V0LmxlZnQgLSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQ7XG4gICAgcmlnaHRPdmVyID0gZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoKTtcbiAgfVxuXG4gIGJvdHRvbU92ZXIgPSBpZ25vcmVCb3R0b20gPyAwIDogTWF0aC5taW4oYm90dG9tT3ZlciwgMCk7XG4gIHRvcE92ZXIgPSBNYXRoLm1pbih0b3BPdmVyLCAwKTtcbiAgbGVmdE92ZXIgPSBNYXRoLm1pbihsZWZ0T3ZlciwgMCk7XG4gIHJpZ2h0T3ZlciA9IE1hdGgubWluKHJpZ2h0T3ZlciwgMCk7XG5cbiAgaWYgKGxyT25seSkge1xuICAgIHJldHVybiBsZWZ0T3ZlciArIHJpZ2h0T3ZlcjtcbiAgfVxuICBpZiAodGJPbmx5KSB7XG4gICAgcmV0dXJuIHRvcE92ZXIgKyBib3R0b21PdmVyO1xuICB9XG5cbiAgLy8gdXNlIHN1bSBvZiBzcXVhcmVzIGIvYyB3ZSBjYXJlIGFib3V0IG92ZXJsYXAgYXJlYS5cbiAgcmV0dXJuIE1hdGguc3FydCh0b3BPdmVyICogdG9wT3ZlciArIGJvdHRvbU92ZXIgKiBib3R0b21PdmVyICsgbGVmdE92ZXIgKiBsZWZ0T3ZlciArIHJpZ2h0T3ZlciAqIHJpZ2h0T3Zlcik7XG59XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSkge1xuICBlbGVtID0gZWxlbS5sZW5ndGggPyBlbGVtWzBdIDogZWxlbTtcblxuICBpZiAoZWxlbSA9PT0gd2luZG93IHx8IGVsZW0gPT09IGRvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwYXJSZWN0ID0gZWxlbS5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2luUmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5ZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgd2luWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luWSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpblhcbiAgICB9LFxuICAgIHBhcmVudERpbXM6IHtcbiAgICAgIHdpZHRoOiBwYXJSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiBwYXJSZWN0LmhlaWdodCxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB0b3A6IHBhclJlY3QudG9wICsgd2luWSxcbiAgICAgICAgbGVmdDogcGFyUmVjdC5sZWZ0ICsgd2luWFxuICAgICAgfVxuICAgIH0sXG4gICAgd2luZG93RGltczoge1xuICAgICAgd2lkdGg6IHdpblJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpblJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogd2luWSxcbiAgICAgICAgbGVmdDogd2luWFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB0b3AgYW5kIGxlZnQgaW50ZWdlciBwaXhlbCB2YWx1ZXMgZm9yIGR5bmFtaWNhbGx5IHJlbmRlcmVkIGVsZW1lbnRzLFxuICogc3VjaCBhczogVG9vbHRpcCwgUmV2ZWFsLCBhbmQgRHJvcGRvd24uIE1haW50YWluZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBhbmQgd2hlcmVcbiAqIHlvdSBkb24ndCBrbm93IGFsaWdubWVudCwgYnV0IGdlbmVyYWxseSBmcm9tXG4gKiA2LjQgZm9yd2FyZCB5b3Ugc2hvdWxkIHVzZSBHZXRFeHBsaWNpdE9mZnNldHMsIGFzIEdldE9mZnNldHMgY29uZmxhdGVzIHBvc2l0aW9uIGFuZCBhbGlnbm1lbnQuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICBjb25zb2xlLmxvZyhcIk5PVEU6IEdldE9mZnNldHMgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBHZXRFeHBsaWNpdE9mZnNldHMgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiA2LjVcIik7XG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuICgwLCBfZm91bmRhdGlvblV0aWwucnRsKSgpID8gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ3RvcCcsICdsZWZ0Jywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykgOiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAndG9wJywgJ3JpZ2h0Jywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHJldHVybiAoMCwgX2ZvdW5kYXRpb25VdGlsLnJ0bCkoKSA/IEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICdib3R0b20nLCAnbGVmdCcsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpIDogR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ2JvdHRvbScsICdyaWdodCcsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIGNhc2UgJ2NlbnRlciB0b3AnOlxuICAgICAgcmV0dXJuIEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICd0b3AnLCAnY2VudGVyJywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgY2FzZSAnY2VudGVyIGJvdHRvbSc6XG4gICAgICByZXR1cm4gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ2JvdHRvbScsICdjZW50ZXInLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KTtcbiAgICBjYXNlICdjZW50ZXIgbGVmdCc6XG4gICAgICByZXR1cm4gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ2xlZnQnLCAnY2VudGVyJywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgY2FzZSAnY2VudGVyIHJpZ2h0JzpcbiAgICAgIHJldHVybiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCAncmlnaHQnLCAnY2VudGVyJywgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdyk7XG4gICAgY2FzZSAnbGVmdCBib3R0b20nOlxuICAgICAgcmV0dXJuIEdldEV4cGxpY2l0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsICdib3R0b20nLCAnbGVmdCcsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIGNhc2UgJ3JpZ2h0IGJvdHRvbSc6XG4gICAgICByZXR1cm4gR2V0RXhwbGljaXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgJ2JvdHRvbScsICdyaWdodCcsIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpO1xuICAgIC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5Li4uIHRoaXMgYWxvbmcgd2l0aCB0aGUgcmV2ZWFsIGFuZCByZXZlYWwgZnVsbFxuICAgIC8vIGNsYXNzZXMgYXJlIHRoZSBvbmx5IG9uZXMgdGhhdCBkaWRuJ3QgcmVmZXJlbmNlIGFuY2hvclxuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0ICsgJGVsZURpbXMud2luZG93RGltcy53aWR0aCAvIDIgLSAkZWxlRGltcy53aWR0aCAvIDIgKyBoT2Zmc2V0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArICRlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0IC8gMiAtICgkZWxlRGltcy5oZWlnaHQgLyAyICsgdk9mZnNldClcbiAgICAgIH07XG4gICAgY2FzZSAncmV2ZWFsJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gJGVsZURpbXMud2lkdGgpIC8gMiArIGhPZmZzZXQsXG4gICAgICAgIHRvcDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgdk9mZnNldFxuICAgICAgfTtcbiAgICBjYXNlICdyZXZlYWwgZnVsbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoMCwgX2ZvdW5kYXRpb25VdGlsLnJ0bCkoKSA/ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCAtIGhPZmZzZXQgOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH07XG5cbiAgfVxufVxuXG5mdW5jdGlvbiBHZXRFeHBsaWNpdE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgYWxpZ25tZW50LCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KSB7XG4gIHZhciAkZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICAkYW5jaG9yRGltcyA9IGFuY2hvciA/IEdldERpbWVuc2lvbnMoYW5jaG9yKSA6IG51bGw7XG5cbiAgdmFyIHRvcFZhbCwgbGVmdFZhbDtcblxuICAvLyBzZXQgcG9zaXRpb24gcmVsYXRlZCBhdHRyaWJ1dGVcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHRvcFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgdG9wVmFsID0gJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIGxlZnRWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgbGVmdFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICAvLyBzZXQgYWxpZ25tZW50IHJlbGF0ZWQgYXR0cmlidXRlXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICBzd2l0Y2ggKGFsaWdubWVudCkge1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICBsZWZ0VmFsID0gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyBoT2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgbGVmdFZhbCA9ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCAtIGhPZmZzZXQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgbGVmdFZhbCA9IGlzT3ZlcmZsb3cgPyBoT2Zmc2V0IDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCAvIDIgLSAkZWxlRGltcy53aWR0aCAvIDIgKyBoT2Zmc2V0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wIC0gdk9mZnNldCArICRhbmNob3JEaW1zLmhlaWdodCAtICRlbGVEaW1zLmhlaWdodDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgdk9mZnNldDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICB0b3BWYWwgPSAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgdk9mZnNldCArICRhbmNob3JEaW1zLmhlaWdodCAvIDIgLSAkZWxlRGltcy5oZWlnaHQgLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHsgdG9wOiB0b3BWYWwsIGxlZnQ6IGxlZnRWYWwgfTtcbn1cblxuZXhwb3J0cy5Cb3ggPSBCb3g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1ZFhScGJDNWliM2d1YW5NaVhTd2libUZ0WlhNaU9sc2lRbTk0SWl3aVNXMU9iM1JVYjNWamFHbHVaMWx2ZFNJc0lrOTJaWEpzWVhCQmNtVmhJaXdpUjJWMFJHbHRaVzV6YVc5dWN5SXNJa2RsZEU5bVpuTmxkSE1pTENKSFpYUkZlSEJzYVdOcGRFOW1abk5sZEhNaUxDSmxiR1Z0Wlc1MElpd2ljR0Z5Wlc1MElpd2liSEpQYm14NUlpd2lkR0pQYm14NUlpd2lhV2R1YjNKbFFtOTBkRzl0SWl3aVpXeGxSR2x0Y3lJc0luUnZjRTkyWlhJaUxDSmliM1IwYjIxUGRtVnlJaXdpYkdWbWRFOTJaWElpTENKeWFXZG9kRTkyWlhJaUxDSndZWEpFYVcxeklpd2lhR1ZwWjJoMElpd2liMlptYzJWMElpd2lkRzl3SWl3aWJHVm1kQ0lzSW5kcFpIUm9JaXdpZDJsdVpHOTNSR2x0Y3lJc0lrMWhkR2dpTENKdGFXNGlMQ0p6Y1hKMElpd2laV3hsYlNJc0lteGxibWQwYUNJc0luZHBibVJ2ZHlJc0ltUnZZM1Z0Wlc1MElpd2lSWEp5YjNJaUxDSnlaV04wSWl3aVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBJaXdpY0dGeVVtVmpkQ0lzSW5CaGNtVnVkRTV2WkdVaUxDSjNhVzVTWldOMElpd2lZbTlrZVNJc0luZHBibGtpTENKd1lXZGxXVTltWm5ObGRDSXNJbmRwYmxnaUxDSndZV2RsV0U5bVpuTmxkQ0lzSW5CaGNtVnVkRVJwYlhNaUxDSmhibU5vYjNJaUxDSndiM05wZEdsdmJpSXNJblpQWm1aelpYUWlMQ0pvVDJabWMyVjBJaXdpYVhOUGRtVnlabXh2ZHlJc0ltTnZibk52YkdVaUxDSnNiMmNpTENJa1pXeGxSR2x0Y3lJc0lpUmhibU5vYjNKRWFXMXpJaXdpWVd4cFoyNXRaVzUwSWl3aWRHOXdWbUZzSWl3aWJHVm1kRlpoYkNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPenM3UVVGSFFUczdRVUZGUVN4SlFVRkpRU3hOUVVGTk8wRkJRMUpETEc5Q1FVRnJRa0VzWjBKQlJGWTdRVUZGVWtNc1pVRkJZVUVzVjBGR1REdEJRVWRTUXl4cFFrRkJaVUVzWVVGSVVEdEJRVWxTUXl4alFVRlpRU3hWUVVwS08wRkJTMUpETEhOQ1FVRnZRa0U3TzBGQlIzUkNPenM3T3pzN096czdPMEZCVWxVc1EwRkJWaXhEUVd0Q1FTeFRRVUZUU2l4blFrRkJWQ3hEUVVFd1Frc3NUMEZCTVVJc1JVRkJiVU5ETEUxQlFXNURMRVZCUVRKRFF5eE5RVUV6UXl4RlFVRnRSRU1zVFVGQmJrUXNSVUZCTWtSRExGbEJRVE5FTEVWQlFYbEZPMEZCUTNaRkxGTkJRVTlTTEZsQlFWbEpMRTlCUVZvc1JVRkJjVUpETEUxQlFYSkNMRVZCUVRaQ1F5eE5RVUUzUWl4RlFVRnhRME1zVFVGQmNrTXNSVUZCTmtORExGbEJRVGRETEUxQlFTdEVMRU5CUVhSRk8wRkJRMFE3TzBGQlJVUXNVMEZCVTFJc1YwRkJWQ3hEUVVGeFFra3NUMEZCY2tJc1JVRkJPRUpETEUxQlFUbENMRVZCUVhORFF5eE5RVUYwUXl4RlFVRTRRME1zVFVGQk9VTXNSVUZCYzBSRExGbEJRWFJFTEVWQlFXOUZPMEZCUTJ4RkxFMUJRVWxETEZWQlFWVlNMR05CUVdOSExFOUJRV1FzUTBGQlpEdEJRVUZCTEUxQlEwRk5MRTlCUkVFN1FVRkJRU3hOUVVOVFF5eFZRVVJVTzBGQlFVRXNUVUZEY1VKRExGRkJSSEpDTzBGQlFVRXNUVUZESzBKRExGTkJSQzlDTzBGQlJVRXNUVUZCU1ZJc1RVRkJTaXhGUVVGWk8wRkJRMVlzVVVGQlNWTXNWVUZCVldJc1kwRkJZMGtzVFVGQlpDeERRVUZrT3p0QlFVVkJUU3hwUWtGQlkwY3NVVUZCVVVNc1RVRkJVaXhIUVVGcFFrUXNVVUZCVVVVc1RVRkJVaXhEUVVGbFF5eEhRVUZxUXl4SlFVRjVRMUlzVVVGQlVVOHNUVUZCVWl4RFFVRmxReXhIUVVGbUxFZEJRWEZDVWl4UlFVRlJUU3hOUVVGMFJTeERRVUZpTzBGQlEwRk1MR05CUVdGRUxGRkJRVkZQTEUxQlFWSXNRMEZCWlVNc1IwRkJaaXhIUVVGeFFrZ3NVVUZCVVVVc1RVRkJVaXhEUVVGbFF5eEhRVUZxUkR0QlFVTkJUQ3hsUVVGaFNDeFJRVUZSVHl4TlFVRlNMRU5CUVdWRkxFbEJRV1lzUjBGQmMwSktMRkZCUVZGRkxFMUJRVklzUTBGQlpVVXNTVUZCYkVRN1FVRkRRVXdzWjBKQlFXTkRMRkZCUVZGTExFdEJRVklzUjBGQlowSk1MRkZCUVZGRkxFMUJRVklzUTBGQlpVVXNTVUZCYUVNc1NVRkJlVU5VTEZGQlFWRlBMRTFCUVZJc1EwRkJaVVVzU1VGQlppeEhRVUZ6UWxRc1VVRkJVVlVzUzBGQmRrVXNRMEZCWWp0QlFVTkVMRWRCVUVRc1RVRlJTenRCUVVOSVVpeHBRa0ZCWTBZc1VVRkJVVmNzVlVGQlVpeERRVUZ0UWt3c1RVRkJia0lzUjBGQk5FSk9MRkZCUVZGWExGVkJRVklzUTBGQmJVSktMRTFCUVc1Q0xFTkJRVEJDUXl4SFFVRjJSQ3hKUVVFclJGSXNVVUZCVVU4c1RVRkJVaXhEUVVGbFF5eEhRVUZtTEVkQlFYRkNVaXhSUVVGUlRTeE5RVUUxUml4RFFVRmlPMEZCUTBGTUxHTkJRV0ZFTEZGQlFWRlBMRTFCUVZJc1EwRkJaVU1zUjBGQlppeEhRVUZ4UWxJc1VVRkJVVmNzVlVGQlVpeERRVUZ0UWtvc1RVRkJia0lzUTBGQk1FSkRMRWRCUVRWRU8wRkJRMEZNTEdWQlFXRklMRkZCUVZGUExFMUJRVklzUTBGQlpVVXNTVUZCWml4SFFVRnpRbFFzVVVGQlVWY3NWVUZCVWl4RFFVRnRRa29zVFVGQmJrSXNRMEZCTUVKRkxFbEJRVGRFTzBGQlEwRk1MR2RDUVVGaFNpeFJRVUZSVnl4VlFVRlNMRU5CUVcxQ1JDeExRVUZ1UWl4SlFVRTBRbFlzVVVGQlVVOHNUVUZCVWl4RFFVRmxSU3hKUVVGbUxFZEJRWE5DVkN4UlFVRlJWU3hMUVVFeFJDeERRVUZpTzBGQlEwUTdPMEZCUlVSU0xHVkJRV0ZJTEdWQlFXVXNRMEZCWml4SFFVRnRRbUVzUzBGQlMwTXNSMEZCVEN4RFFVRlRXQ3hWUVVGVUxFVkJRWEZDTEVOQlFYSkNMRU5CUVdoRE8wRkJRMEZFTEZsQlFXRlhMRXRCUVV0RExFZEJRVXdzUTBGQlUxb3NUMEZCVkN4RlFVRnJRaXhEUVVGc1FpeERRVUZpTzBGQlEwRkZMR0ZCUVdGVExFdEJRVXRETEVkQlFVd3NRMEZCVTFZc1VVRkJWQ3hGUVVGdFFpeERRVUZ1UWl4RFFVRmlPMEZCUTBGRExHTkJRV0ZSTEV0QlFVdERMRWRCUVV3c1EwRkJVMVFzVTBGQlZDeEZRVUZ2UWl4RFFVRndRaXhEUVVGaU96dEJRVVZCTEUxQlFVbFFMRTFCUVVvc1JVRkJXVHRCUVVOV0xGZEJRVTlOTEZkQlFWZERMRk5CUVd4Q08wRkJRMFE3UVVGRFJDeE5RVUZKVGl4TlFVRktMRVZCUVZrN1FVRkRWaXhYUVVGUFJ5eFZRVUZWUXl4VlFVRnFRanRCUVVORU96dEJRVVZFTzBGQlEwRXNVMEZCVDFVc1MwRkJTMFVzU1VGQlRDeERRVUZYWWl4VlFVRlZRU3hQUVVGWUxFZEJRWFZDUXl4aFFVRmhRU3hWUVVGd1F5eEhRVUZ0UkVNc1YwRkJWMEVzVVVGQk9VUXNSMEZCTWtWRExGbEJRVmxCTEZOQlFXcEhMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0QlFVOUJMRk5CUVZOYUxHRkJRVlFzUTBGQmRVSjFRaXhKUVVGMlFpeEZRVUUwUWp0QlFVTXhRa0VzVTBGQlQwRXNTMEZCUzBNc1RVRkJUQ3hIUVVGalJDeExRVUZMTEVOQlFVd3NRMEZCWkN4SFFVRjNRa0VzU1VGQkwwSTdPMEZCUlVFc1RVRkJTVUVzVTBGQlUwVXNUVUZCVkN4SlFVRnRRa1lzVTBGQlUwY3NVVUZCYUVNc1JVRkJNRU03UVVGRGVFTXNWVUZCVFN4SlFVRkpReXhMUVVGS0xFTkJRVlVzT0VOQlFWWXNRMEZCVGp0QlFVTkVPenRCUVVWRUxFMUJRVWxETEU5QlFVOU1MRXRCUVV0TkxIRkNRVUZNTEVWQlFWZzdRVUZCUVN4TlFVTkpReXhWUVVGVlVDeExRVUZMVVN4VlFVRk1MRU5CUVdkQ1JpeHhRa0ZCYUVJc1JVRkVaRHRCUVVGQkxFMUJSVWxITEZWQlFWVk9MRk5CUVZOUExFbEJRVlFzUTBGQlkwb3NjVUpCUVdRc1JVRkdaRHRCUVVGQkxFMUJSMGxMTEU5QlFVOVVMRTlCUVU5VkxGZEJTR3hDTzBGQlFVRXNUVUZKU1VNc1QwRkJUMWdzVDBGQlQxa3NWMEZLYkVJN08wRkJUVUVzVTBGQlR6dEJRVU5NYmtJc1YwRkJUMVVzUzBGQlMxWXNTMEZFVUR0QlFVVk1TaXhaUVVGUll5eExRVUZMWkN4TlFVWlNPMEZCUjB4RExGbEJRVkU3UVVGRFRrTXNWMEZCUzFrc1MwRkJTMW9zUjBGQlRDeEhRVUZYYTBJc1NVRkVWanRCUVVWT2FrSXNXVUZCVFZjc1MwRkJTMWdzU1VGQlRDeEhRVUZaYlVJN1FVRkdXaXhMUVVoSU8wRkJUMHhGTEdkQ1FVRlpPMEZCUTFad1FpeGhRVUZQV1N4UlFVRlJXaXhMUVVSTU8wRkJSVlpLTEdOQlFWRm5RaXhSUVVGUmFFSXNUVUZHVGp0QlFVZFdReXhqUVVGUk8wRkJRMDVETEdGQlFVdGpMRkZCUVZGa0xFZEJRVklzUjBGQlkydENMRWxCUkdJN1FVRkZUbXBDTEdOQlFVMWhMRkZCUVZGaUxFbEJRVklzUjBGQlpXMUNPMEZCUm1ZN1FVRklSU3hMUVZCUU8wRkJaVXhxUWl4blFrRkJXVHRCUVVOV1JDeGhRVUZQWXl4UlFVRlJaQ3hMUVVSTU8wRkJSVlpLTEdOQlFWRnJRaXhSUVVGUmJFSXNUVUZHVGp0QlFVZFdReXhqUVVGUk8wRkJRMDVETEdGQlFVdHJRaXhKUVVSRE8wRkJSVTVxUWl4alFVRk5iVUk3UVVGR1FUdEJRVWhGTzBGQlpsQXNSMEZCVUR0QlFYZENSRHM3UVVGRlJEczdPenM3T3pzN096czdPenM3UVVGalFTeFRRVUZUYmtNc1ZVRkJWQ3hEUVVGdlFrVXNUMEZCY0VJc1JVRkJOa0p2UXl4TlFVRTNRaXhGUVVGeFEwTXNVVUZCY2tNc1JVRkJLME5ETEU5QlFTOURMRVZCUVhkRVF5eFBRVUY0UkN4RlFVRnBSVU1zVlVGQmFrVXNSVUZCTmtVN1FVRkRNMFZETEZWQlFWRkRMRWRCUVZJc1EwRkJXU3d3UmtGQldqdEJRVU5CTEZWQlFWRk1MRkZCUVZJN1FVRkRSU3hUUVVGTExFdEJRVXc3UVVGRFJTeGhRVUZQTERaQ1FVTk1kRU1zYlVKQlFXMUNReXhQUVVGdVFpeEZRVUUwUW05RExFMUJRVFZDTEVWQlFXOURMRXRCUVhCRExFVkJRVEpETEUxQlFUTkRMRVZCUVcxRVJTeFBRVUZ1UkN4RlFVRTBSRU1zVDBGQk5VUXNSVUZCY1VWRExGVkJRWEpGTEVOQlJFc3NSMEZGVEhwRExHMUNRVUZ0UWtNc1QwRkJia0lzUlVGQk5FSnZReXhOUVVFMVFpeEZRVUZ2UXl4TFFVRndReXhGUVVFeVF5eFBRVUV6UXl4RlFVRnZSRVVzVDBGQmNFUXNSVUZCTmtSRExFOUJRVGRFTEVWQlFYTkZReXhWUVVGMFJTeERRVVpHTzBGQlIwWXNVMEZCU3l4UlFVRk1PMEZCUTBVc1lVRkJUeXcyUWtGRFRIcERMRzFDUVVGdFFrTXNUMEZCYmtJc1JVRkJORUp2UXl4TlFVRTFRaXhGUVVGdlF5eFJRVUZ3UXl4RlFVRTRReXhOUVVFNVF5eEZRVUZ6UkVVc1QwRkJkRVFzUlVGQkswUkRMRTlCUVM5RUxFVkJRWGRGUXl4VlFVRjRSU3hEUVVSTExFZEJSVXg2UXl4dFFrRkJiVUpETEU5QlFXNUNMRVZCUVRSQ2IwTXNUVUZCTlVJc1JVRkJiME1zVVVGQmNFTXNSVUZCT0VNc1QwRkJPVU1zUlVGQmRVUkZMRTlCUVhaRUxFVkJRV2RGUXl4UFFVRm9SU3hGUVVGNVJVTXNWVUZCZWtVc1EwRkdSanRCUVVkR0xGTkJRVXNzV1VGQlREdEJRVU5GTEdGQlFVOTZReXh0UWtGQmJVSkRMRTlCUVc1Q0xFVkJRVFJDYjBNc1RVRkJOVUlzUlVGQmIwTXNTMEZCY0VNc1JVRkJNa01zVVVGQk0wTXNSVUZCY1VSRkxFOUJRWEpFTEVWQlFUaEVReXhQUVVFNVJDeEZRVUYxUlVNc1ZVRkJka1VzUTBGQlVEdEJRVU5HTEZOQlFVc3NaVUZCVER0QlFVTkZMR0ZCUVU5NlF5eHRRa0ZCYlVKRExFOUJRVzVDTEVWQlFUUkNiME1zVFVGQk5VSXNSVUZCYjBNc1VVRkJjRU1zUlVGQk9FTXNVVUZCT1VNc1JVRkJkMFJGTEU5QlFYaEVMRVZCUVdsRlF5eFBRVUZxUlN4RlFVRXdSVU1zVlVGQk1VVXNRMEZCVUR0QlFVTkdMRk5CUVVzc1lVRkJURHRCUVVORkxHRkJRVTk2UXl4dFFrRkJiVUpETEU5QlFXNUNMRVZCUVRSQ2IwTXNUVUZCTlVJc1JVRkJiME1zVFVGQmNFTXNSVUZCTkVNc1VVRkJOVU1zUlVGQmMwUkZMRTlCUVhSRUxFVkJRU3RFUXl4UFFVRXZSQ3hGUVVGM1JVTXNWVUZCZUVVc1EwRkJVRHRCUVVOR0xGTkJRVXNzWTBGQlREdEJRVU5GTEdGQlFVOTZReXh0UWtGQmJVSkRMRTlCUVc1Q0xFVkJRVFJDYjBNc1RVRkJOVUlzUlVGQmIwTXNUMEZCY0VNc1JVRkJOa01zVVVGQk4wTXNSVUZCZFVSRkxFOUJRWFpFTEVWQlFXZEZReXhQUVVGb1JTeEZRVUY1UlVNc1ZVRkJla1VzUTBGQlVEdEJRVU5HTEZOQlFVc3NZVUZCVER0QlFVTkZMR0ZCUVU5NlF5eHRRa0ZCYlVKRExFOUJRVzVDTEVWQlFUUkNiME1zVFVGQk5VSXNSVUZCYjBNc1VVRkJjRU1zUlVGQk9FTXNUVUZCT1VNc1JVRkJjMFJGTEU5QlFYUkVMRVZCUVN0RVF5eFBRVUV2UkN4RlFVRjNSVU1zVlVGQmVFVXNRMEZCVUR0QlFVTkdMRk5CUVVzc1kwRkJURHRCUVVORkxHRkJRVTk2UXl4dFFrRkJiVUpETEU5QlFXNUNMRVZCUVRSQ2IwTXNUVUZCTlVJc1JVRkJiME1zVVVGQmNFTXNSVUZCT0VNc1QwRkJPVU1zUlVGQmRVUkZMRTlCUVhaRUxFVkJRV2RGUXl4UFFVRm9SU3hGUVVGNVJVTXNWVUZCZWtVc1EwRkJVRHRCUVVOR08wRkJRMEU3UVVGRFFTeFRRVUZMTEZGQlFVdzdRVUZEUlN4aFFVRlBPMEZCUTB3eFFpeGpRVUZQTmtJc1UwRkJVek5DTEZWQlFWUXNRMEZCYjBKS0xFMUJRWEJDTEVOQlFUSkNSU3hKUVVFelFpeEhRVUZ0UXpaQ0xGTkJRVk16UWl4VlFVRlVMRU5CUVc5Q1JDeExRVUZ3UWl4SFFVRTBRaXhEUVVGb1JTeEhRVUYxUlRSQ0xGTkJRVk0xUWl4TFFVRlVMRWRCUVdsQ0xFTkJRWGhHTEVkQlFUWkdkMElzVDBGRU9VWTdRVUZGVERGQ0xHRkJRVTA0UWl4VFFVRlRNMElzVlVGQlZDeERRVUZ2UWtvc1RVRkJjRUlzUTBGQk1rSkRMRWRCUVROQ0xFZEJRV3RET0VJc1UwRkJVek5DTEZWQlFWUXNRMEZCYjBKTUxFMUJRWEJDTEVkQlFUWkNMRU5CUVdoRkxFbEJRWFZGWjBNc1UwRkJVMmhETEUxQlFWUXNSMEZCYTBJc1EwRkJiRUlzUjBGQmMwSXlRaXhQUVVFM1JqdEJRVVpCTEU5QlFWQTdRVUZKUml4VFFVRkxMRkZCUVV3N1FVRkRSU3hoUVVGUE8wRkJRMHg0UWl4alFVRk5MRU5CUVVNMlFpeFRRVUZUTTBJc1ZVRkJWQ3hEUVVGdlFrUXNTMEZCY0VJc1IwRkJORUkwUWl4VFFVRlROVUlzUzBGQmRFTXNTVUZCSzBNc1EwRkJMME1zUjBGQmJVUjNRaXhQUVVSd1JEdEJRVVZNTVVJc1lVRkJTemhDTEZOQlFWTXpRaXhWUVVGVUxFTkJRVzlDU2l4TlFVRndRaXhEUVVFeVFrTXNSMEZCTTBJc1IwRkJhVU41UWp0QlFVWnFReXhQUVVGUU8wRkJTVVlzVTBGQlN5eGhRVUZNTzBGQlEwVXNZVUZCVHp0QlFVTk1lRUlzWTBGQlRUWkNMRk5CUVZNelFpeFZRVUZVTEVOQlFXOUNTaXhOUVVGd1FpeERRVUV5UWtVc1NVRkVOVUk3UVVGRlRFUXNZVUZCU3poQ0xGTkJRVk16UWl4VlFVRlVMRU5CUVc5Q1NpeE5RVUZ3UWl4RFFVRXlRa003UVVGR00wSXNUMEZCVUR0QlFVbEJPMEZCUTBZN1FVRkRSU3hoUVVGUE8wRkJRMHhETEdOQlFVOHNOa0pCUVZFNFFpeFpRVUZaYUVNc1RVRkJXaXhEUVVGdFFrVXNTVUZCYmtJc1IwRkJNRUkyUWl4VFFVRlROVUlzUzBGQmJrTXNSMEZCTWtNMlFpeFpRVUZaTjBJc1MwRkJka1FzUjBGQkswUjNRaXhQUVVGMlJTeEhRVUZuUmtzc1dVRkJXV2hETEUxQlFWb3NRMEZCYlVKRkxFbEJRVzVDTEVkQlFUQkNlVUlzVDBGRU5VYzdRVUZGVERGQ0xHRkJRVXNyUWl4WlFVRlphRU1zVFVGQldpeERRVUZ0UWtNc1IwRkJia0lzUjBGQmVVSXJRaXhaUVVGWmFrTXNUVUZCY2tNc1IwRkJPRU15UWp0QlFVWTVReXhQUVVGUU96dEJRWGhEU2p0QlFTdERSRHM3UVVGRlJDeFRRVUZUZGtNc2EwSkJRVlFzUTBGQk5FSkRMRTlCUVRWQ0xFVkJRWEZEYjBNc1RVRkJja01zUlVGQk5rTkRMRkZCUVRkRExFVkJRWFZFVVN4VFFVRjJSQ3hGUVVGclJWQXNUMEZCYkVVc1JVRkJNa1ZETEU5QlFUTkZMRVZCUVc5R1F5eFZRVUZ3Uml4RlFVRm5SenRCUVVNNVJpeE5RVUZKUnl4WFFVRlhPVU1zWTBGQlkwY3NUMEZCWkN4RFFVRm1PMEZCUVVFc1RVRkRTVFJETEdOQlFXTlNMRk5CUVZOMlF5eGpRVUZqZFVNc1RVRkJaQ3hEUVVGVUxFZEJRV2xETEVsQlJHNUVPenRCUVVkSkxFMUJRVWxWTEUxQlFVb3NSVUZCV1VNc1QwRkJXanM3UVVGRlNqczdRVUZGUVN4VlFVRlJWaXhSUVVGU08wRkJRMFVzVTBGQlN5eExRVUZNTzBGQlEwVlRMR1ZCUVZOR0xGbEJRVmxvUXl4TlFVRmFMRU5CUVcxQ1F5eEhRVUZ1UWl4SlFVRXdRamhDTEZOQlFWTm9ReXhOUVVGVUxFZEJRV3RDTWtJc1QwRkJOVU1zUTBGQlZEdEJRVU5CTzBGQlEwWXNVMEZCU3l4UlFVRk1PMEZCUTBWUkxHVkJRVk5HTEZsQlFWbG9ReXhOUVVGYUxFTkJRVzFDUXl4SFFVRnVRaXhIUVVGNVFpdENMRmxCUVZscVF5eE5RVUZ5UXl4SFFVRTRRekpDTEU5QlFYWkVPMEZCUTBFN1FVRkRSaXhUUVVGTExFMUJRVXc3UVVGRFJWTXNaMEpCUVZWSUxGbEJRVmxvUXl4TlFVRmFMRU5CUVcxQ1JTeEpRVUZ1UWl4SlFVRXlRalpDTEZOQlFWTTFRaXhMUVVGVUxFZEJRV2xDZDBJc1QwRkJOVU1zUTBGQlZqdEJRVU5CTzBGQlEwWXNVMEZCU3l4UFFVRk1PMEZCUTBWUkxHZENRVUZWU0N4WlFVRlphRU1zVFVGQldpeERRVUZ0UWtVc1NVRkJia0lzUjBGQk1FSTRRaXhaUVVGWk4wSXNTMEZCZEVNc1IwRkJPRU4zUWl4UFFVRjRSRHRCUVVOQk8wRkJXa283TzBGQlowSkJPMEZCUTBFc1ZVRkJVVVlzVVVGQlVqdEJRVU5GTEZOQlFVc3NTMEZCVER0QlFVTkJMRk5CUVVzc1VVRkJURHRCUVVORkxHTkJRVkZSTEZOQlFWSTdRVUZEUlN4aFFVRkxMRTFCUVV3N1FVRkRSVVVzYjBKQlFWVklMRmxCUVZsb1F5eE5RVUZhTEVOQlFXMUNSU3hKUVVGdVFpeEhRVUV3UW5sQ0xFOUJRWEJETzBGQlEwRTdRVUZEUml4aFFVRkxMRTlCUVV3N1FVRkRSVkVzYjBKQlFWVklMRmxCUVZsb1F5eE5RVUZhTEVOQlFXMUNSU3hKUVVGdVFpeEhRVUV3UWpaQ0xGTkJRVk0xUWl4TFFVRnVReXhIUVVFeVF6WkNMRmxCUVZrM1FpeExRVUYyUkN4SFFVRXJSSGRDTEU5QlFYcEZPMEZCUTBFN1FVRkRSaXhoUVVGTExGRkJRVXc3UVVGRFJWRXNiMEpCUVZWUUxHRkJRV0ZFTEU5QlFXSXNSMEZCZVVKTExGbEJRVmxvUXl4TlFVRmFMRU5CUVcxQ1JTeEpRVUZ1UWl4SFFVRXlRamhDTEZsQlFWazNRaXhMUVVGYUxFZEJRVzlDTEVOQlFXaEVMRWRCUVhWRU5FSXNVMEZCVXpWQ0xFdEJRVlFzUjBGQmFVSXNRMEZCZWtVc1IwRkJLMFYzUWl4UFFVRm9TRHRCUVVOQk8wRkJWRW83UVVGWFFUdEJRVU5HTEZOQlFVc3NUMEZCVER0QlFVTkJMRk5CUVVzc1RVRkJURHRCUVVORkxHTkJRVkZOTEZOQlFWSTdRVUZEUlN4aFFVRkxMRkZCUVV3N1FVRkRSVU1zYlVKQlFWTkdMRmxCUVZsb1F5eE5RVUZhTEVOQlFXMUNReXhIUVVGdVFpeEhRVUY1UW5sQ0xFOUJRWHBDTEVkQlFXMURUU3haUVVGWmFrTXNUVUZCTDBNc1IwRkJkMFJuUXl4VFFVRlRhRU1zVFVGQk1VVTdRVUZEUVR0QlFVTkdMR0ZCUVVzc1MwRkJURHRCUVVORmJVTXNiVUpCUVZOR0xGbEJRVmxvUXl4TlFVRmFMRU5CUVcxQ1F5eEhRVUZ1UWl4SFFVRjVRbmxDTEU5QlFXeERPMEZCUTBFN1FVRkRSaXhoUVVGTExGRkJRVXc3UVVGRFJWRXNiVUpCUVZWR0xGbEJRVmxvUXl4TlFVRmFMRU5CUVcxQ1F5eEhRVUZ1UWl4SFFVRjVRbmxDTEU5QlFYcENMRWRCUVc5RFRTeFpRVUZaYWtNc1RVRkJXaXhIUVVGeFFpeERRVUV4UkN4SFFVRnBSV2RETEZOQlFWTm9ReXhOUVVGVUxFZEJRV3RDTEVOQlFUVkdPMEZCUTBFN1FVRlVTanRCUVZkQk8wRkJOVUpLTzBGQk9FSkJMRk5CUVU4c1JVRkJRMFVzUzBGQlMybERMRTFCUVU0c1JVRkJZMmhETEUxQlFVMXBReXhQUVVGd1FpeEZRVUZRTzBGQlEwUTdPMUZCUlU5eVJDeEhMRWRCUVVGQkxFY2lMQ0ptYVd4bElqb2labTkxYm1SaGRHbHZiaTUxZEdsc0xtSnZlQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dVhHNXBiWEJ2Y25RZ2V5QnlkR3dnWVhNZ1VuUnNJSDBnWm5KdmJTQmNJaTR2Wm05MWJtUmhkR2x2Ymk1MWRHbHNMbU52Y21WY0lqdGNibHh1ZG1GeUlFSnZlQ0E5SUh0Y2JpQWdTVzFPYjNSVWIzVmphR2x1WjFsdmRUb2dTVzFPYjNSVWIzVmphR2x1WjFsdmRTeGNiaUFnVDNabGNteGhjRUZ5WldFNklFOTJaWEpzWVhCQmNtVmhMRnh1SUNCSFpYUkVhVzFsYm5OcGIyNXpPaUJIWlhSRWFXMWxibk5wYjI1ekxGeHVJQ0JIWlhSUFptWnpaWFJ6T2lCSFpYUlBabVp6WlhSekxGeHVJQ0JIWlhSRmVIQnNhV05wZEU5bVpuTmxkSE02SUVkbGRFVjRjR3hwWTJsMFQyWm1jMlYwYzF4dWZWeHVYRzR2S2lwY2JpQXFJRU52YlhCaGNtVnpJSFJvWlNCa2FXMWxibk5wYjI1eklHOW1JR0Z1SUdWc1pXMWxiblFnZEc4Z1lTQmpiMjUwWVdsdVpYSWdZVzVrSUdSbGRHVnliV2x1WlhNZ1kyOXNiR2x6YVc5dUlHVjJaVzUwY3lCM2FYUm9JR052Ym5SaGFXNWxjaTVjYmlBcUlFQm1kVzVqZEdsdmJseHVJQ29nUUhCaGNtRnRJSHRxVVhWbGNubDlJR1ZzWlcxbGJuUWdMU0JxVVhWbGNua2diMkpxWldOMElIUnZJSFJsYzNRZ1ptOXlJR052Ykd4cGMybHZibk11WEc0Z0tpQkFjR0Z5WVcwZ2UycFJkV1Z5ZVgwZ2NHRnlaVzUwSUMwZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCMWMyVWdZWE1nWW05MWJtUnBibWNnWTI5dWRHRnBibVZ5TGx4dUlDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQnNjazl1YkhrZ0xTQnpaWFFnZEc4Z2RISjFaU0IwYnlCamFHVmpheUJzWldaMElHRnVaQ0J5YVdkb2RDQjJZV3gxWlhNZ2IyNXNlUzVjYmlBcUlFQndZWEpoYlNCN1FtOXZiR1ZoYm4wZ2RHSlBibXg1SUMwZ2MyVjBJSFJ2SUhSeWRXVWdkRzhnWTJobFkyc2dkRzl3SUdGdVpDQmliM1IwYjIwZ2RtRnNkV1Z6SUc5dWJIa3VYRzRnS2lCQVpHVm1ZWFZzZENCcFppQnVieUJ3WVhKbGJuUWdiMkpxWldOMElIQmhjM05sWkN3Z1pHVjBaV04wY3lCamIyeHNhWE5wYjI1eklIZHBkR2dnWUhkcGJtUnZkMkF1WEc0Z0tpQkFjbVYwZFhKdWN5QjdRbTl2YkdWaGJuMGdMU0IwY25WbElHbG1JR052Ykd4cGMybHZiaUJtY21WbExDQm1ZV3h6WlNCcFppQmhJR052Ykd4cGMybHZiaUJwYmlCaGJua2daR2x5WldOMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQkpiVTV2ZEZSdmRXTm9hVzVuV1c5MUtHVnNaVzFsYm5Rc0lIQmhjbVZ1ZEN3Z2JISlBibXg1TENCMFlrOXViSGtzSUdsbmJtOXlaVUp2ZEhSdmJTa2dlMXh1SUNCeVpYUjFjbTRnVDNabGNteGhjRUZ5WldFb1pXeGxiV1Z1ZEN3Z2NHRnlaVzUwTENCc2NrOXViSGtzSUhSaVQyNXNlU3dnYVdkdWIzSmxRbTkwZEc5dEtTQTlQVDBnTUR0Y2JuMDdYRzVjYm1aMWJtTjBhVzl1SUU5MlpYSnNZWEJCY21WaEtHVnNaVzFsYm5Rc0lIQmhjbVZ1ZEN3Z2JISlBibXg1TENCMFlrOXViSGtzSUdsbmJtOXlaVUp2ZEhSdmJTa2dlMXh1SUNCMllYSWdaV3hsUkdsdGN5QTlJRWRsZEVScGJXVnVjMmx2Ym5Nb1pXeGxiV1Z1ZENrc1hHNGdJSFJ2Y0U5MlpYSXNJR0p2ZEhSdmJVOTJaWElzSUd4bFpuUlBkbVZ5TENCeWFXZG9kRTkyWlhJN1hHNGdJR2xtSUNod1lYSmxiblFwSUh0Y2JpQWdJQ0IyWVhJZ2NHRnlSR2x0Y3lBOUlFZGxkRVJwYldWdWMybHZibk1vY0dGeVpXNTBLVHRjYmx4dUlDQWdJR0p2ZEhSdmJVOTJaWElnUFNBb2NHRnlSR2x0Y3k1b1pXbG5hSFFnS3lCd1lYSkVhVzF6TG05bVpuTmxkQzUwYjNBcElDMGdLR1ZzWlVScGJYTXViMlptYzJWMExuUnZjQ0FySUdWc1pVUnBiWE11YUdWcFoyaDBLVHRjYmlBZ0lDQjBiM0JQZG1WeUlDQWdJRDBnWld4bFJHbHRjeTV2Wm1aelpYUXVkRzl3SUMwZ2NHRnlSR2x0Y3k1dlptWnpaWFF1ZEc5d08xeHVJQ0FnSUd4bFpuUlBkbVZ5SUNBZ1BTQmxiR1ZFYVcxekxtOW1abk5sZEM1c1pXWjBJQzBnY0dGeVJHbHRjeTV2Wm1aelpYUXViR1ZtZER0Y2JpQWdJQ0J5YVdkb2RFOTJaWElnSUQwZ0tIQmhja1JwYlhNdWQybGtkR2dnS3lCd1lYSkVhVzF6TG05bVpuTmxkQzVzWldaMEtTQXRJQ2hsYkdWRWFXMXpMbTltWm5ObGRDNXNaV1owSUNzZ1pXeGxSR2x0Y3k1M2FXUjBhQ2s3WEc0Z0lIMWNiaUFnWld4elpTQjdYRzRnSUNBZ1ltOTBkRzl0VDNabGNpQTlJQ2hsYkdWRWFXMXpMbmRwYm1SdmQwUnBiWE11YUdWcFoyaDBJQ3NnWld4bFJHbHRjeTUzYVc1a2IzZEVhVzF6TG05bVpuTmxkQzUwYjNBcElDMGdLR1ZzWlVScGJYTXViMlptYzJWMExuUnZjQ0FySUdWc1pVUnBiWE11YUdWcFoyaDBLVHRjYmlBZ0lDQjBiM0JQZG1WeUlDQWdJRDBnWld4bFJHbHRjeTV2Wm1aelpYUXVkRzl3SUMwZ1pXeGxSR2x0Y3k1M2FXNWtiM2RFYVcxekxtOW1abk5sZEM1MGIzQTdYRzRnSUNBZ2JHVm1kRTkyWlhJZ0lDQTlJR1ZzWlVScGJYTXViMlptYzJWMExteGxablFnTFNCbGJHVkVhVzF6TG5kcGJtUnZkMFJwYlhNdWIyWm1jMlYwTG14bFpuUTdYRzRnSUNBZ2NtbG5hSFJQZG1WeUlDQTlJR1ZzWlVScGJYTXVkMmx1Wkc5M1JHbHRjeTUzYVdSMGFDQXRJQ2hsYkdWRWFXMXpMbTltWm5ObGRDNXNaV1owSUNzZ1pXeGxSR2x0Y3k1M2FXUjBhQ2s3WEc0Z0lIMWNibHh1SUNCaWIzUjBiMjFQZG1WeUlEMGdhV2R1YjNKbFFtOTBkRzl0SUQ4Z01DQTZJRTFoZEdndWJXbHVLR0p2ZEhSdmJVOTJaWElzSURBcE8xeHVJQ0IwYjNCUGRtVnlJQ0FnSUQwZ1RXRjBhQzV0YVc0b2RHOXdUM1psY2l3Z01DazdYRzRnSUd4bFpuUlBkbVZ5SUNBZ1BTQk5ZWFJvTG0xcGJpaHNaV1owVDNabGNpd2dNQ2s3WEc0Z0lISnBaMmgwVDNabGNpQWdQU0JOWVhSb0xtMXBiaWh5YVdkb2RFOTJaWElzSURBcE8xeHVYRzRnSUdsbUlDaHNjazl1YkhrcElIdGNiaUFnSUNCeVpYUjFjbTRnYkdWbWRFOTJaWElnS3lCeWFXZG9kRTkyWlhJN1hHNGdJSDFjYmlBZ2FXWWdLSFJpVDI1c2VTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGIzQlBkbVZ5SUNzZ1ltOTBkRzl0VDNabGNqdGNiaUFnZlZ4dVhHNGdJQzh2SUhWelpTQnpkVzBnYjJZZ2MzRjFZWEpsY3lCaUwyTWdkMlVnWTJGeVpTQmhZbTkxZENCdmRtVnliR0Z3SUdGeVpXRXVYRzRnSUhKbGRIVnliaUJOWVhSb0xuTnhjblFvS0hSdmNFOTJaWElnS2lCMGIzQlBkbVZ5S1NBcklDaGliM1IwYjIxUGRtVnlJQ29nWW05MGRHOXRUM1psY2lrZ0t5QW9iR1ZtZEU5MlpYSWdLaUJzWldaMFQzWmxjaWtnS3lBb2NtbG5hSFJQZG1WeUlDb2djbWxuYUhSUGRtVnlLU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dWWE5sY3lCdVlYUnBkbVVnYldWMGFHOWtjeUIwYnlCeVpYUjFjbTRnWVc0Z2IySnFaV04wSUc5bUlHUnBiV1Z1YzJsdmJpQjJZV3gxWlhNdVhHNGdLaUJBWm5WdVkzUnBiMjVjYmlBcUlFQndZWEpoYlNCN2FsRjFaWEo1SUh4OElFaFVUVXg5SUdWc1pXMWxiblFnTFNCcVVYVmxjbmtnYjJKcVpXTjBJRzl5SUVSUFRTQmxiR1Z0Wlc1MElHWnZjaUIzYUdsamFDQjBieUJuWlhRZ2RHaGxJR1JwYldWdWMybHZibk11SUVOaGJpQmlaU0JoYm5rZ1pXeGxiV1Z1ZENCdmRHaGxjaUIwYUdGMElHUnZZM1Z0Wlc1MElHOXlJSGRwYm1SdmR5NWNiaUFxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUMwZ2JtVnpkR1ZrSUc5aWFtVmpkQ0J2WmlCcGJuUmxaMlZ5SUhCcGVHVnNJSFpoYkhWbGMxeHVJQ29nVkU5RVR5QXRJR2xtSUdWc1pXMWxiblFnYVhNZ2QybHVaRzkzTENCeVpYUjFjbTRnYjI1c2VTQjBhRzl6WlNCMllXeDFaWE11WEc0Z0tpOWNibVoxYm1OMGFXOXVJRWRsZEVScGJXVnVjMmx2Ym5Nb1pXeGxiU2w3WEc0Z0lHVnNaVzBnUFNCbGJHVnRMbXhsYm1kMGFDQS9JR1ZzWlcxYk1GMGdPaUJsYkdWdE8xeHVYRzRnSUdsbUlDaGxiR1Z0SUQwOVBTQjNhVzVrYjNjZ2ZId2daV3hsYlNBOVBUMGdaRzlqZFcxbGJuUXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkpKMjBnYzI5eWNua3NJRVJoZG1VdUlFa25iU0JoWm5KaGFXUWdTU0JqWVc0bmRDQmtieUIwYUdGMExsd2lLVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQnlaV04wSUQwZ1pXeGxiUzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tTeGNiaUFnSUNBZ0lIQmhjbEpsWTNRZ1BTQmxiR1Z0TG5CaGNtVnVkRTV2WkdVdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2tzWEc0Z0lDQWdJQ0IzYVc1U1pXTjBJRDBnWkc5amRXMWxiblF1WW05a2VTNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1N4Y2JpQWdJQ0FnSUhkcGJsa2dQU0IzYVc1a2IzY3VjR0ZuWlZsUFptWnpaWFFzWEc0Z0lDQWdJQ0IzYVc1WUlEMGdkMmx1Wkc5M0xuQmhaMlZZVDJabWMyVjBPMXh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnZDJsa2RHZzZJSEpsWTNRdWQybGtkR2dzWEc0Z0lDQWdhR1ZwWjJoME9pQnlaV04wTG1obGFXZG9kQ3hjYmlBZ0lDQnZabVp6WlhRNklIdGNiaUFnSUNBZ0lIUnZjRG9nY21WamRDNTBiM0FnS3lCM2FXNVpMRnh1SUNBZ0lDQWdiR1ZtZERvZ2NtVmpkQzVzWldaMElDc2dkMmx1V0Z4dUlDQWdJSDBzWEc0Z0lDQWdjR0Z5Wlc1MFJHbHRjem9nZTF4dUlDQWdJQ0FnZDJsa2RHZzZJSEJoY2xKbFkzUXVkMmxrZEdnc1hHNGdJQ0FnSUNCb1pXbG5hSFE2SUhCaGNsSmxZM1F1YUdWcFoyaDBMRnh1SUNBZ0lDQWdiMlptYzJWME9pQjdYRzRnSUNBZ0lDQWdJSFJ2Y0RvZ2NHRnlVbVZqZEM1MGIzQWdLeUIzYVc1WkxGeHVJQ0FnSUNBZ0lDQnNaV1owT2lCd1lYSlNaV04wTG14bFpuUWdLeUIzYVc1WVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0IzYVc1a2IzZEVhVzF6T2lCN1hHNGdJQ0FnSUNCM2FXUjBhRG9nZDJsdVVtVmpkQzUzYVdSMGFDeGNiaUFnSUNBZ0lHaGxhV2RvZERvZ2QybHVVbVZqZEM1b1pXbG5hSFFzWEc0Z0lDQWdJQ0J2Wm1aelpYUTZJSHRjYmlBZ0lDQWdJQ0FnZEc5d09pQjNhVzVaTEZ4dUlDQWdJQ0FnSUNCc1pXWjBPaUIzYVc1WVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCaGJpQnZZbXBsWTNRZ2IyWWdkRzl3SUdGdVpDQnNaV1owSUdsdWRHVm5aWElnY0dsNFpXd2dkbUZzZFdWeklHWnZjaUJrZVc1aGJXbGpZV3hzZVNCeVpXNWtaWEpsWkNCbGJHVnRaVzUwY3l4Y2JpQXFJSE4xWTJnZ1lYTTZJRlJ2YjJ4MGFYQXNJRkpsZG1WaGJDd2dZVzVrSUVSeWIzQmtiM2R1TGlCTllXbHVkR0ZwYm1Wa0lHWnZjaUJpWVdOcmQyRnlaSE1nWTI5dGNHRjBhV0pwYkdsMGVTd2dZVzVrSUhkb1pYSmxYRzRnS2lCNWIzVWdaRzl1SjNRZ2EyNXZkeUJoYkdsbmJtMWxiblFzSUdKMWRDQm5aVzVsY21Gc2JIa2dabkp2YlZ4dUlDb2dOaTQwSUdadmNuZGhjbVFnZVc5MUlITm9iM1ZzWkNCMWMyVWdSMlYwUlhod2JHbGphWFJQWm1aelpYUnpMQ0JoY3lCSFpYUlBabVp6WlhSeklHTnZibVpzWVhSbGN5QndiM05wZEdsdmJpQmhibVFnWVd4cFoyNXRaVzUwTGx4dUlDb2dRR1oxYm1OMGFXOXVYRzRnS2lCQWNHRnlZVzBnZTJwUmRXVnllWDBnWld4bGJXVnVkQ0F0SUdwUmRXVnllU0J2WW1wbFkzUWdabTl5SUhSb1pTQmxiR1Z0Wlc1MElHSmxhVzVuSUhCdmMybDBhVzl1WldRdVhHNGdLaUJBY0dGeVlXMGdlMnBSZFdWeWVYMGdZVzVqYUc5eUlDMGdhbEYxWlhKNUlHOWlhbVZqZENCbWIzSWdkR2hsSUdWc1pXMWxiblFuY3lCaGJtTm9iM0lnY0c5cGJuUXVYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnY0c5emFYUnBiMjRnTFNCaElITjBjbWx1WnlCeVpXeGhkR2x1WnlCMGJ5QjBhR1VnWkdWemFYSmxaQ0J3YjNOcGRHbHZiaUJ2WmlCMGFHVWdaV3hsYldWdWRDd2djbVZzWVhScGRtVWdkRzhnYVhRbmN5QmhibU5vYjNKY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjJUMlptYzJWMElDMGdhVzUwWldkbGNpQndhWGhsYkNCMllXeDFaU0J2WmlCa1pYTnBjbVZrSUhabGNuUnBZMkZzSUhObGNHRnlZWFJwYjI0Z1ltVjBkMlZsYmlCaGJtTm9iM0lnWVc1a0lHVnNaVzFsYm5RdVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdhRTltWm5ObGRDQXRJR2x1ZEdWblpYSWdjR2w0Wld3Z2RtRnNkV1VnYjJZZ1pHVnphWEpsWkNCb2IzSnBlbTl1ZEdGc0lITmxjR0Z5WVhScGIyNGdZbVYwZDJWbGJpQmhibU5vYjNJZ1lXNWtJR1ZzWlcxbGJuUXVYRzRnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUdselQzWmxjbVpzYjNjZ0xTQnBaaUJoSUdOdmJHeHBjMmx2YmlCbGRtVnVkQ0JwY3lCa1pYUmxZM1JsWkN3Z2MyVjBjeUIwYnlCMGNuVmxJSFJ2SUdSbFptRjFiSFFnZEdobElHVnNaVzFsYm5RZ2RHOGdablZzYkNCM2FXUjBhQ0F0SUdGdWVTQmtaWE5wY21Wa0lHOW1abk5sZEM1Y2JpQXFJRlJQUkU4Z1lXeDBaWEl2Y21WM2NtbDBaU0IwYnlCM2IzSnJJSGRwZEdnZ1lHVnRZQ0IyWVd4MVpYTWdZWE1nZDJWc2JDOXBibk4wWldGa0lHOW1JSEJwZUdWc2MxeHVJQ292WEc1bWRXNWpkR2x2YmlCSFpYUlBabVp6WlhSektHVnNaVzFsYm5Rc0lHRnVZMmh2Y2l3Z2NHOXphWFJwYjI0c0lIWlBabVp6WlhRc0lHaFBabVp6WlhRc0lHbHpUM1psY21ac2IzY3BJSHRjYmlBZ1kyOXVjMjlzWlM1c2IyY29YQ0pPVDFSRk9pQkhaWFJQWm1aelpYUnpJR2x6SUdSbGNISmxZMkYwWldRZ2FXNGdabUYyYjNJZ2IyWWdSMlYwUlhod2JHbGphWFJQWm1aelpYUnpJR0Z1WkNCM2FXeHNJR0psSUhKbGJXOTJaV1FnYVc0Z05pNDFYQ0lwTzF4dUlDQnpkMmwwWTJnZ0tIQnZjMmwwYVc5dUtTQjdYRzRnSUNBZ1kyRnpaU0FuZEc5d0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCU2RHd29LU0EvWEc0Z0lDQWdJQ0FnSUVkbGRFVjRjR3hwWTJsMFQyWm1jMlYwY3lobGJHVnRaVzUwTENCaGJtTm9iM0lzSUNkMGIzQW5MQ0FuYkdWbWRDY3NJSFpQWm1aelpYUXNJR2hQWm1aelpYUXNJR2x6VDNabGNtWnNiM2NwSURwY2JpQWdJQ0FnSUNBZ1IyVjBSWGh3YkdsamFYUlBabVp6WlhSektHVnNaVzFsYm5Rc0lHRnVZMmh2Y2l3Z0ozUnZjQ2NzSUNkeWFXZG9kQ2NzSUhaUFptWnpaWFFzSUdoUFptWnpaWFFzSUdselQzWmxjbVpzYjNjcE8xeHVJQ0FnSUdOaGMyVWdKMkp2ZEhSdmJTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1VuUnNLQ2tnUDF4dUlDQWdJQ0FnSUNCSFpYUkZlSEJzYVdOcGRFOW1abk5sZEhNb1pXeGxiV1Z1ZEN3Z1lXNWphRzl5TENBblltOTBkRzl0Snl3Z0oyeGxablFuTENCMlQyWm1jMlYwTENCb1QyWm1jMlYwTENCcGMwOTJaWEptYkc5M0tTQTZYRzRnSUNBZ0lDQWdJRWRsZEVWNGNHeHBZMmwwVDJabWMyVjBjeWhsYkdWdFpXNTBMQ0JoYm1Ob2IzSXNJQ2RpYjNSMGIyMG5MQ0FuY21sbmFIUW5MQ0IyVDJabWMyVjBMQ0JvVDJabWMyVjBMQ0JwYzA5MlpYSm1iRzkzS1R0Y2JpQWdJQ0JqWVhObElDZGpaVzUwWlhJZ2RHOXdKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQkhaWFJGZUhCc2FXTnBkRTltWm5ObGRITW9aV3hsYldWdWRDd2dZVzVqYUc5eUxDQW5kRzl3Snl3Z0oyTmxiblJsY2ljc0lIWlBabVp6WlhRc0lHaFBabVp6WlhRc0lHbHpUM1psY21ac2IzY3BPMXh1SUNBZ0lHTmhjMlVnSjJObGJuUmxjaUJpYjNSMGIyMG5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFZGxkRVY0Y0d4cFkybDBUMlptYzJWMGN5aGxiR1Z0Wlc1MExDQmhibU5vYjNJc0lDZGliM1IwYjIwbkxDQW5ZMlZ1ZEdWeUp5d2dkazltWm5ObGRDd2dhRTltWm5ObGRDd2dhWE5QZG1WeVpteHZkeWs3WEc0Z0lDQWdZMkZ6WlNBblkyVnVkR1Z5SUd4bFpuUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFZGxkRVY0Y0d4cFkybDBUMlptYzJWMGN5aGxiR1Z0Wlc1MExDQmhibU5vYjNJc0lDZHNaV1owSnl3Z0oyTmxiblJsY2ljc0lIWlBabVp6WlhRc0lHaFBabVp6WlhRc0lHbHpUM1psY21ac2IzY3BPMXh1SUNBZ0lHTmhjMlVnSjJObGJuUmxjaUJ5YVdkb2RDYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1IyVjBSWGh3YkdsamFYUlBabVp6WlhSektHVnNaVzFsYm5Rc0lHRnVZMmh2Y2l3Z0ozSnBaMmgwSnl3Z0oyTmxiblJsY2ljc0lIWlBabVp6WlhRc0lHaFBabVp6WlhRc0lHbHpUM1psY21ac2IzY3BPMXh1SUNBZ0lHTmhjMlVnSjJ4bFpuUWdZbTkwZEc5dEp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCSFpYUkZlSEJzYVdOcGRFOW1abk5sZEhNb1pXeGxiV1Z1ZEN3Z1lXNWphRzl5TENBblltOTBkRzl0Snl3Z0oyeGxablFuTENCMlQyWm1jMlYwTENCb1QyWm1jMlYwTENCcGMwOTJaWEptYkc5M0tUdGNiaUFnSUNCallYTmxJQ2R5YVdkb2RDQmliM1IwYjIwbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVkbGRFVjRjR3hwWTJsMFQyWm1jMlYwY3lobGJHVnRaVzUwTENCaGJtTm9iM0lzSUNkaWIzUjBiMjBuTENBbmNtbG5hSFFuTENCMlQyWm1jMlYwTENCb1QyWm1jMlYwTENCcGMwOTJaWEptYkc5M0tUdGNiaUFnSUNBdkx5QkNZV05yZDJGeVpITWdZMjl0Y0dGMGFXSnBiR2wwZVM0dUxpQjBhR2x6SUdGc2IyNW5JSGRwZEdnZ2RHaGxJSEpsZG1WaGJDQmhibVFnY21WMlpXRnNJR1oxYkd4Y2JpQWdJQ0F2THlCamJHRnpjMlZ6SUdGeVpTQjBhR1VnYjI1c2VTQnZibVZ6SUhSb1lYUWdaR2xrYmlkMElISmxabVZ5Wlc1alpTQmhibU5vYjNKY2JpQWdJQ0JqWVhObElDZGpaVzUwWlhJbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ2JHVm1kRG9nS0NSbGJHVkVhVzF6TG5kcGJtUnZkMFJwYlhNdWIyWm1jMlYwTG14bFpuUWdLeUFvSkdWc1pVUnBiWE11ZDJsdVpHOTNSR2x0Y3k1M2FXUjBhQ0F2SURJcEtTQXRJQ2drWld4bFJHbHRjeTUzYVdSMGFDQXZJRElwSUNzZ2FFOW1abk5sZEN4Y2JpQWdJQ0FnSUNBZ2RHOXdPaUFvSkdWc1pVUnBiWE11ZDJsdVpHOTNSR2x0Y3k1dlptWnpaWFF1ZEc5d0lDc2dLQ1JsYkdWRWFXMXpMbmRwYm1SdmQwUnBiWE11YUdWcFoyaDBJQzhnTWlrcElDMGdLQ1JsYkdWRWFXMXpMbWhsYVdkb2RDQXZJRElnS3lCMlQyWm1jMlYwS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJR05oYzJVZ0ozSmxkbVZoYkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCc1pXWjBPaUFvSkdWc1pVUnBiWE11ZDJsdVpHOTNSR2x0Y3k1M2FXUjBhQ0F0SUNSbGJHVkVhVzF6TG5kcFpIUm9LU0F2SURJZ0t5Qm9UMlptYzJWMExGeHVJQ0FnSUNBZ0lDQjBiM0E2SUNSbGJHVkVhVzF6TG5kcGJtUnZkMFJwYlhNdWIyWm1jMlYwTG5SdmNDQXJJSFpQWm1aelpYUmNiaUFnSUNBZ0lIMWNiaUFnSUNCallYTmxJQ2R5WlhabFlXd2dablZzYkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCc1pXWjBPaUFrWld4bFJHbHRjeTUzYVc1a2IzZEVhVzF6TG05bVpuTmxkQzVzWldaMExGeHVJQ0FnSUNBZ0lDQjBiM0E2SUNSbGJHVkVhVzF6TG5kcGJtUnZkMFJwYlhNdWIyWm1jMlYwTG5SdmNGeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lHeGxablE2SUNoU2RHd29LU0EvSUNSaGJtTm9iM0pFYVcxekxtOW1abk5sZEM1c1pXWjBJQzBnSkdWc1pVUnBiWE11ZDJsa2RHZ2dLeUFrWVc1amFHOXlSR2x0Y3k1M2FXUjBhQ0F0SUdoUFptWnpaWFE2SUNSaGJtTm9iM0pFYVcxekxtOW1abk5sZEM1c1pXWjBJQ3NnYUU5bVpuTmxkQ2tzWEc0Z0lDQWdJQ0FnSUhSdmNEb2dKR0Z1WTJodmNrUnBiWE11YjJabWMyVjBMblJ2Y0NBcklDUmhibU5vYjNKRWFXMXpMbWhsYVdkb2RDQXJJSFpQWm1aelpYUmNiaUFnSUNBZ0lIMWNibHh1SUNCOVhHNWNibjFjYmx4dVpuVnVZM1JwYjI0Z1IyVjBSWGh3YkdsamFYUlBabVp6WlhSektHVnNaVzFsYm5Rc0lHRnVZMmh2Y2l3Z2NHOXphWFJwYjI0c0lHRnNhV2R1YldWdWRDd2dkazltWm5ObGRDd2dhRTltWm5ObGRDd2dhWE5QZG1WeVpteHZkeWtnZTF4dUlDQjJZWElnSkdWc1pVUnBiWE1nUFNCSFpYUkVhVzFsYm5OcGIyNXpLR1ZzWlcxbGJuUXBMRnh1SUNBZ0lDQWdKR0Z1WTJodmNrUnBiWE1nUFNCaGJtTm9iM0lnUHlCSFpYUkVhVzFsYm5OcGIyNXpLR0Z1WTJodmNpa2dPaUJ1ZFd4c08xeHVYRzRnSUNBZ0lDQjJZWElnZEc5d1ZtRnNMQ0JzWldaMFZtRnNPMXh1WEc0Z0lDOHZJSE5sZENCd2IzTnBkR2x2YmlCeVpXeGhkR1ZrSUdGMGRISnBZblYwWlZ4dVhHNGdJSE4zYVhSamFDQW9jRzl6YVhScGIyNHBJSHRjYmlBZ0lDQmpZWE5sSUNkMGIzQW5PbHh1SUNBZ0lDQWdkRzl3Vm1Gc0lEMGdKR0Z1WTJodmNrUnBiWE11YjJabWMyVjBMblJ2Y0NBdElDZ2taV3hsUkdsdGN5NW9aV2xuYUhRZ0t5QjJUMlptYzJWMEtUdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oySnZkSFJ2YlNjNlhHNGdJQ0FnSUNCMGIzQldZV3dnUFNBa1lXNWphRzl5UkdsdGN5NXZabVp6WlhRdWRHOXdJQ3NnSkdGdVkyaHZja1JwYlhNdWFHVnBaMmgwSUNzZ2RrOW1abk5sZER0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjJ4bFpuUW5PbHh1SUNBZ0lDQWdiR1ZtZEZaaGJDQTlJQ1JoYm1Ob2IzSkVhVzF6TG05bVpuTmxkQzVzWldaMElDMGdLQ1JsYkdWRWFXMXpMbmRwWkhSb0lDc2dhRTltWm5ObGRDazdYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JqWVhObElDZHlhV2RvZENjNlhHNGdJQ0FnSUNCc1pXWjBWbUZzSUQwZ0pHRnVZMmh2Y2tScGJYTXViMlptYzJWMExteGxablFnS3lBa1lXNWphRzl5UkdsdGN5NTNhV1IwYUNBcklHaFBabVp6WlhRN1hHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ2ZWeHVYRzVjYmlBZ0x5OGdjMlYwSUdGc2FXZHViV1Z1ZENCeVpXeGhkR1ZrSUdGMGRISnBZblYwWlZ4dUlDQnpkMmwwWTJnZ0tIQnZjMmwwYVc5dUtTQjdYRzRnSUNBZ1kyRnpaU0FuZEc5d0p6cGNiaUFnSUNCallYTmxJQ2RpYjNSMGIyMG5PbHh1SUNBZ0lDQWdjM2RwZEdOb0lDaGhiR2xuYm0xbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5iR1ZtZENjNlhHNGdJQ0FnSUNBZ0lDQWdiR1ZtZEZaaGJDQTlJQ1JoYm1Ob2IzSkVhVzF6TG05bVpuTmxkQzVzWldaMElDc2dhRTltWm5ObGREdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmNtbG5hSFFuT2x4dUlDQWdJQ0FnSUNBZ0lHeGxablJXWVd3Z1BTQWtZVzVqYUc5eVJHbHRjeTV2Wm1aelpYUXViR1ZtZENBdElDUmxiR1ZFYVcxekxuZHBaSFJvSUNzZ0pHRnVZMmh2Y2tScGJYTXVkMmxrZEdnZ0xTQm9UMlptYzJWME8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkalpXNTBaWEluT2x4dUlDQWdJQ0FnSUNBZ0lHeGxablJXWVd3Z1BTQnBjMDkyWlhKbWJHOTNJRDhnYUU5bVpuTmxkQ0E2SUNnb0pHRnVZMmh2Y2tScGJYTXViMlptYzJWMExteGxablFnS3lBb0pHRnVZMmh2Y2tScGJYTXVkMmxrZEdnZ0x5QXlLU2tnTFNBb0pHVnNaVVJwYlhNdWQybGtkR2dnTHlBeUtTa2dLeUJvVDJabWMyVjBPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQW5jbWxuYUhRbk9seHVJQ0FnSUdOaGMyVWdKMnhsWm5Rbk9seHVJQ0FnSUNBZ2MzZHBkR05vSUNoaGJHbG5ibTFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBblltOTBkRzl0SnpwY2JpQWdJQ0FnSUNBZ0lDQjBiM0JXWVd3Z1BTQWtZVzVqYUc5eVJHbHRjeTV2Wm1aelpYUXVkRzl3SUMwZ2RrOW1abk5sZENBcklDUmhibU5vYjNKRWFXMXpMbWhsYVdkb2RDQXRJQ1JsYkdWRWFXMXpMbWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmRHOXdKenBjYmlBZ0lDQWdJQ0FnSUNCMGIzQldZV3dnUFNBa1lXNWphRzl5UkdsdGN5NXZabVp6WlhRdWRHOXdJQ3NnZGs5bVpuTmxkRnh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZGpaVzUwWlhJbk9seHVJQ0FnSUNBZ0lDQWdJSFJ2Y0ZaaGJDQTlJQ2drWVc1amFHOXlSR2x0Y3k1dlptWnpaWFF1ZEc5d0lDc2dkazltWm5ObGRDQXJJQ2drWVc1amFHOXlSR2x0Y3k1b1pXbG5hSFFnTHlBeUtTa2dMU0FvSkdWc1pVUnBiWE11YUdWcFoyaDBJQzhnTWlsY2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQjdkRzl3T2lCMGIzQldZV3dzSUd4bFpuUTZJR3hsWm5SV1lXeDlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2UwSnZlSDA3WEc0aVhYMD1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLmJveC5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRyYW5zaXRpb25lbmQgPSBleHBvcnRzLkdldFlvRGlnaXRzID0gZXhwb3J0cy5ydGwgPSB1bmRlZmluZWQ7XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIENvcmUgRm91bmRhdGlvbiBVdGlsaXRpZXMsIHV0aWxpemVkIGluIGEgbnVtYmVyIG9mIHBsYWNlcy5cblxuLyoqXG4gKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAqL1xuZnVuY3Rpb24gcnRsKCkge1xuICByZXR1cm4gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdodG1sJykuYXR0cignZGlyJykgPT09ICdydGwnO1xufVxuXG4vKipcbiAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIC0gbnVtYmVyIG9mIHJhbmRvbSBiYXNlLTM2IGRpZ2l0cyBkZXNpcmVkLiBJbmNyZWFzZSBmb3IgbW9yZSByYW5kb20gc3RyaW5ncy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAqIEBkZWZhdWx0IHtTdHJpbmd9ICcnIC0gaWYgbm8gcGx1Z2luIG5hbWUgaXMgcHJvdmlkZWQsIG5vdGhpbmcgaXMgYXBwZW5kZWQgdG8gdGhlIHVpZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IC0gdW5pcXVlIGlkXG4gKi9cbmZ1bmN0aW9uIEdldFlvRGlnaXRzKGxlbmd0aCwgbmFtZXNwYWNlKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCB8fCA2O1xuICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnBvdygzNiwgbGVuZ3RoICsgMSkgLSBNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMzYsIGxlbmd0aCkpLnRvU3RyaW5nKDM2KS5zbGljZSgxKSArIChuYW1lc3BhY2UgPyAnLScgKyBuYW1lc3BhY2UgOiAnJyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25lbmQoJGVsZW0pIHtcbiAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgfTtcbiAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgIGVuZDtcblxuICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gdHJhbnNpdGlvbnNbdF07XG4gICAgfVxuICB9XG4gIGlmIChlbmQpIHtcbiAgICByZXR1cm4gZW5kO1xuICB9IGVsc2Uge1xuICAgIGVuZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgJGVsZW0udHJpZ2dlckhhbmRsZXIoJ3RyYW5zaXRpb25lbmQnLCBbJGVsZW1dKTtcbiAgICB9LCAxKTtcbiAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuICB9XG59XG5cbmV4cG9ydHMucnRsID0gcnRsO1xuZXhwb3J0cy5HZXRZb0RpZ2l0cyA9IEdldFlvRGlnaXRzO1xuZXhwb3J0cy50cmFuc2l0aW9uZW5kID0gdHJhbnNpdGlvbmVuZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVkWFJwYkM1amIzSmxMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSjBiQ0lzSW1GMGRISWlMQ0pIWlhSWmIwUnBaMmwwY3lJc0lteGxibWQwYUNJc0ltNWhiV1Z6Y0dGalpTSXNJazFoZEdnaUxDSnliM1Z1WkNJc0luQnZkeUlzSW5KaGJtUnZiU0lzSW5SdlUzUnlhVzVuSWl3aWMyeHBZMlVpTENKMGNtRnVjMmwwYVc5dVpXNWtJaXdpSkdWc1pXMGlMQ0owY21GdWMybDBhVzl1Y3lJc0ltVnNaVzBpTENKa2IyTjFiV1Z1ZENJc0ltTnlaV0YwWlVWc1pXMWxiblFpTENKbGJtUWlMQ0owSWl3aWMzUjViR1VpTENKelpYUlVhVzFsYjNWMElpd2lkSEpwWjJkbGNraGhibVJzWlhJaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdPenM3TzBGQlJVRTdPenM3T3p0QlFVVkJPenRCUVVWRk96czdRVUZIUml4VFFVRlRRU3hIUVVGVUxFZEJRV1U3UVVGRFlpeFRRVUZQTEhOQ1FVRkZMRTFCUVVZc1JVRkJWVU1zU1VGQlZpeERRVUZsTEV0QlFXWXNUVUZCTUVJc1MwRkJha003UVVGRFJEczdRVUZGUkRzN096czdPenM3UVVGUlFTeFRRVUZUUXl4WFFVRlVMRU5CUVhGQ1F5eE5RVUZ5UWl4RlFVRTJRa01zVTBGQk4wSXNSVUZCZFVNN1FVRkRja05FTEZkQlFWTkJMRlZCUVZVc1EwRkJia0k3UVVGRFFTeFRRVUZQUlN4TFFVRkxReXhMUVVGTUxFTkJRVmxFTEV0QlFVdEZMRWRCUVV3c1EwRkJVeXhGUVVGVUxFVkJRV0ZLTEZOQlFWTXNRMEZCZEVJc1NVRkJNa0pGTEV0QlFVdEhMRTFCUVV3c1MwRkJaMEpJTEV0QlFVdEZMRWRCUVV3c1EwRkJVeXhGUVVGVUxFVkJRV0ZLTEUxQlFXSXNRMEZCZGtRc1JVRkJPRVZOTEZGQlFUbEZMRU5CUVhWR0xFVkJRWFpHTEVWQlFUSkdReXhMUVVFelJpeERRVUZwUnl4RFFVRnFSeXhMUVVGMVIwNHNhMEpCUVdkQ1FTeFRRVUZvUWl4SFFVRTRRaXhGUVVGeVNTeERRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVMDhzWVVGQlZDeERRVUYxUWtNc1MwRkJka0lzUlVGQk5rSTdRVUZETTBJc1RVRkJTVU1zWTBGQll6dEJRVU5vUWl4clFrRkJZeXhsUVVSRk8wRkJSV2hDTEhkQ1FVRnZRaXh4UWtGR1NqdEJRVWRvUWl4eFFrRkJhVUlzWlVGSVJEdEJRVWxvUWl4dFFrRkJaVHRCUVVwRExFZEJRV3hDTzBGQlRVRXNUVUZCU1VNc1QwRkJUME1zVTBGQlUwTXNZVUZCVkN4RFFVRjFRaXhMUVVGMlFpeERRVUZZTzBGQlFVRXNUVUZEU1VNc1IwRkVTanM3UVVGSFFTeFBRVUZMTEVsQlFVbERMRU5CUVZRc1NVRkJZMHdzVjBGQlpDeEZRVUV3UWp0QlFVTjRRaXhSUVVGSkxFOUJRVTlETEV0QlFVdExMRXRCUVV3c1EwRkJWMFFzUTBGQldDeERRVUZRTEV0QlFYbENMRmRCUVRkQ0xFVkJRWGxETzBGQlEzWkRSQ3haUVVGTlNpeFpRVUZaU3l4RFFVRmFMRU5CUVU0N1FVRkRSRHRCUVVOR08wRkJRMFFzVFVGQlIwUXNSMEZCU0N4RlFVRlBPMEZCUTB3c1YwRkJUMEVzUjBGQlVEdEJRVU5FTEVkQlJrUXNUVUZGU3p0QlFVTklRU3hWUVVGTlJ5eFhRVUZYTEZsQlFWVTdRVUZEZWtKU0xGbEJRVTFUTEdOQlFVNHNRMEZCY1VJc1pVRkJja0lzUlVGQmMwTXNRMEZCUTFRc1MwRkJSQ3hEUVVGMFF6dEJRVU5FTEV0QlJrc3NSVUZGU0N4RFFVWkhMRU5CUVU0N1FVRkhRU3hYUVVGUExHVkJRVkE3UVVGRFJEdEJRVU5HT3p0UlFVVlBXaXhITEVkQlFVRkJMRWM3VVVGQlMwVXNWeXhIUVVGQlFTeFhPMUZCUVdGVExHRXNSMEZCUVVFc1lTSXNJbVpwYkdVaU9pSm1iM1Z1WkdGMGFXOXVMblYwYVd3dVkyOXlaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNXBiWEJ2Y25RZ0pDQm1jbTl0SUNkcWNYVmxjbmtuTzF4dVhHNHZMeUJEYjNKbElFWnZkVzVrWVhScGIyNGdWWFJwYkdsMGFXVnpMQ0IxZEdsc2FYcGxaQ0JwYmlCaElHNTFiV0psY2lCdlppQndiR0ZqWlhNdVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVNCaWIyOXNaV0Z1SUdadmNpQlNWRXdnYzNWd2NHOXlkRnh1SUNBZ0tpOWNibVoxYm1OMGFXOXVJSEowYkNncElIdGNiaUFnY21WMGRYSnVJQ1FvSjJoMGJXd25LUzVoZEhSeUtDZGthWEluS1NBOVBUMGdKM0owYkNjN1hHNTlYRzVjYmk4cUtseHVJQ29nY21WMGRYSnVjeUJoSUhKaGJtUnZiU0JpWVhObExUTTJJSFZwWkNCM2FYUm9JRzVoYldWemNHRmphVzVuWEc0Z0tpQkFablZ1WTNScGIyNWNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JzWlc1bmRHZ2dMU0J1ZFcxaVpYSWdiMllnY21GdVpHOXRJR0poYzJVdE16WWdaR2xuYVhSeklHUmxjMmx5WldRdUlFbHVZM0psWVhObElHWnZjaUJ0YjNKbElISmhibVJ2YlNCemRISnBibWR6TGx4dUlDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1Z6Y0dGalpTQXRJRzVoYldVZ2IyWWdjR3gxWjJsdUlIUnZJR0psSUdsdVkyOXljRzl5WVhSbFpDQnBiaUIxYVdRc0lHOXdkR2x2Ym1Gc0xseHVJQ29nUUdSbFptRjFiSFFnZTFOMGNtbHVaMzBnSnljZ0xTQnBaaUJ1YnlCd2JIVm5hVzRnYm1GdFpTQnBjeUJ3Y205MmFXUmxaQ3dnYm05MGFHbHVaeUJwY3lCaGNIQmxibVJsWkNCMGJ5QjBhR1VnZFdsa0xseHVJQ29nUUhKbGRIVnlibk1nZTFOMGNtbHVaMzBnTFNCMWJtbHhkV1VnYVdSY2JpQXFMMXh1Wm5WdVkzUnBiMjRnUjJWMFdXOUVhV2RwZEhNb2JHVnVaM1JvTENCdVlXMWxjM0JoWTJVcGUxeHVJQ0JzWlc1bmRHZ2dQU0JzWlc1bmRHZ2dmSHdnTmp0Y2JpQWdjbVYwZFhKdUlFMWhkR2d1Y205MWJtUW9LRTFoZEdndWNHOTNLRE0yTENCc1pXNW5kR2dnS3lBeEtTQXRJRTFoZEdndWNtRnVaRzl0S0NrZ0tpQk5ZWFJvTG5CdmR5Z3pOaXdnYkdWdVozUm9LU2twTG5SdlUzUnlhVzVuS0RNMktTNXpiR2xqWlNneEtTQXJJQ2h1WVcxbGMzQmhZMlVnUHlCZ0xTUjdibUZ0WlhOd1lXTmxmV0FnT2lBbkp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIUnlZVzV6YVhScGIyNWxibVFvSkdWc1pXMHBlMXh1SUNCMllYSWdkSEpoYm5OcGRHbHZibk1nUFNCN1hHNGdJQ0FnSjNSeVlXNXphWFJwYjI0bk9pQW5kSEpoYm5OcGRHbHZibVZ1WkNjc1hHNGdJQ0FnSjFkbFltdHBkRlJ5WVc1emFYUnBiMjRuT2lBbmQyVmlhMmwwVkhKaGJuTnBkR2x2YmtWdVpDY3NYRzRnSUNBZ0owMXZlbFJ5WVc1emFYUnBiMjRuT2lBbmRISmhibk5wZEdsdmJtVnVaQ2NzWEc0Z0lDQWdKMDlVY21GdWMybDBhVzl1SnpvZ0oyOTBjbUZ1YzJsMGFXOXVaVzVrSjF4dUlDQjlPMXh1SUNCMllYSWdaV3hsYlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJScGRpY3BMRnh1SUNBZ0lDQWdaVzVrTzF4dVhHNGdJR1p2Y2lBb2RtRnlJSFFnYVc0Z2RISmhibk5wZEdsdmJuTXBlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaV3hsYlM1emRIbHNaVnQwWFNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwZTF4dUlDQWdJQ0FnWlc1a0lEMGdkSEpoYm5OcGRHbHZibk5iZEYwN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsbUtHVnVaQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHVnVaRHRjYmlBZ2ZXVnNjMlY3WEc0Z0lDQWdaVzVrSUQwZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdKR1ZzWlcwdWRISnBaMmRsY2toaGJtUnNaWElvSjNSeVlXNXphWFJwYjI1bGJtUW5MQ0JiSkdWc1pXMWRLVHRjYmlBZ0lDQjlMQ0F4S1R0Y2JpQWdJQ0J5WlhSMWNtNGdKM1J5WVc1emFYUnBiMjVsYm1Rbk8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQjdjblJzTENCSFpYUlpiMFJwWjJsMGN5d2dkSEpoYm5OcGRHbHZibVZ1WkgwN1hHNGlYWDA9XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udXRpbC5jb3JlLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm9uSW1hZ2VzTG9hZGVkID0gdW5kZWZpbmVkO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlcyAtIEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5mdW5jdGlvbiBvbkltYWdlc0xvYWRlZChpbWFnZXMsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHVubG9hZGVkID0gaW1hZ2VzLmxlbmd0aDtcblxuICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgaW1hZ2VzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgIC8vIENoZWNrIGlmIGltYWdlIGlzIGxvYWRlZFxuICAgIGlmICh0aGlzLmNvbXBsZXRlICYmIHRoaXMubmF0dXJhbFdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBhYm92ZSBjaGVjayBmYWlsZWQsIHNpbXVsYXRlIGxvYWRpbmcgb24gZGV0YWNoZWQgZWxlbWVudC5cbiAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgLy8gU3RpbGwgY291bnQgaW1hZ2UgYXMgbG9hZGVkIGlmIGl0IGZpbmFsaXplcyB3aXRoIGFuIGVycm9yLlxuICAgICAgdmFyIGV2ZW50cyA9IFwibG9hZC56Zi5pbWFnZXMgZXJyb3IuemYuaW1hZ2VzXCI7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoaW1hZ2UpLm9uZShldmVudHMsIGZ1bmN0aW9uIG1lKGV2ZW50KSB7XG4gICAgICAgIC8vIFVuYmluZCB0aGUgZXZlbnQgbGlzdGVuZXJzLiBXZSdyZSB1c2luZyAnb25lJyBidXQgb25seSBvbmUgb2YgdGhlIHR3byBldmVudHMgd2lsbCBoYXZlIGZpcmVkLlxuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykub2ZmKGV2ZW50cywgbWUpO1xuICAgICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgICAgfSk7XG4gICAgICBpbWFnZS5zcmMgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuYXR0cignc3JjJyk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBzaW5nbGVJbWFnZUxvYWRlZCgpIHtcbiAgICB1bmxvYWRlZC0tO1xuICAgIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5vbkltYWdlc0xvYWRlZCA9IG9uSW1hZ2VzTG9hZGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWRYUnBiQzVwYldGblpVeHZZV1JsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUp2YmtsdFlXZGxjMHh2WVdSbFpDSXNJbWx0WVdkbGN5SXNJbU5oYkd4aVlXTnJJaXdpYzJWc1ppSXNJblZ1Ykc5aFpHVmtJaXdpYkdWdVozUm9JaXdpWldGamFDSXNJbU52YlhCc1pYUmxJaXdpYm1GMGRYSmhiRmRwWkhSb0lpd2lkVzVrWldacGJtVmtJaXdpYzJsdVoyeGxTVzFoWjJWTWIyRmtaV1FpTENKcGJXRm5aU0lzSWtsdFlXZGxJaXdpWlhabGJuUnpJaXdpYjI1bElpd2liV1VpTENKbGRtVnVkQ0lzSW05bVppSXNJbk55WXlJc0ltRjBkSElpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCT3pzN096czdPMEZCUlVFN096czdPenRCUVVWQk96czdPenRCUVV0QkxGTkJRVk5CTEdOQlFWUXNRMEZCZDBKRExFMUJRWGhDTEVWQlFXZERReXhSUVVGb1F5eEZRVUY1UXp0QlFVTjJReXhOUVVGSlF5eFBRVUZQTEVsQlFWZzdRVUZCUVN4TlFVTkpReXhYUVVGWFNDeFBRVUZQU1N4TlFVUjBRanM3UVVGSFFTeE5RVUZKUkN4aFFVRmhMRU5CUVdwQ0xFVkJRVzlDTzBGQlEyeENSanRCUVVORU96dEJRVVZFUkN4VFFVRlBTeXhKUVVGUUxFTkJRVmtzV1VGQlZUdEJRVU53UWp0QlFVTkJMRkZCUVVrc1MwRkJTME1zVVVGQlRDeEpRVUZwUWl4TFFVRkxReXhaUVVGTUxFdEJRWE5DUXl4VFFVRXpReXhGUVVGelJEdEJRVU53UkVNN1FVRkRSQ3hMUVVaRUxFMUJSMHM3UVVGRFNEdEJRVU5CTEZWQlFVbERMRkZCUVZFc1NVRkJTVU1zUzBGQlNpeEZRVUZhTzBGQlEwRTdRVUZEUVN4VlFVRkpReXhUUVVGVExHZERRVUZpTzBGQlEwRXNORUpCUVVWR0xFdEJRVVlzUlVGQlUwY3NSMEZCVkN4RFFVRmhSQ3hOUVVGaUxFVkJRWEZDTEZOQlFWTkZMRVZCUVZRc1EwRkJXVU1zUzBGQldpeEZRVUZyUWp0QlFVTnlRenRCUVVOQkxEaENRVUZGTEVsQlFVWXNSVUZCVVVNc1IwRkJVaXhEUVVGWlNpeE5RVUZhTEVWQlFXOUNSU3hGUVVGd1FqdEJRVU5CVER0QlFVTkVMRTlCU2tRN1FVRkxRVU1zV1VGQlRVOHNSMEZCVGl4SFFVRlpMSE5DUVVGRkxFbEJRVVlzUlVGQlVVTXNTVUZCVWl4RFFVRmhMRXRCUVdJc1EwRkJXanRCUVVORU8wRkJRMFlzUjBGcVFrUTdPMEZCYlVKQkxGZEJRVk5VTEdsQ1FVRlVMRWRCUVRaQ08wRkJRek5DVGp0QlFVTkJMRkZCUVVsQkxHRkJRV0VzUTBGQmFrSXNSVUZCYjBJN1FVRkRiRUpHTzBGQlEwUTdRVUZEUmp0QlFVTkdPenRSUVVWUlJpeGpMRWRCUVVGQkxHTWlMQ0ptYVd4bElqb2labTkxYm1SaGRHbHZiaTUxZEdsc0xtbHRZV2RsVEc5aFpHVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cGJYQnZjblFnSkNCbWNtOXRJQ2RxY1hWbGNua25PMXh1WEc0dktpcGNiaUFxSUZKMWJuTWdZU0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIzYUdWdUlHbHRZV2RsY3lCaGNtVWdablZzYkhrZ2JHOWhaR1ZrTGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHbHRZV2RsY3lBdElFbHRZV2RsS0hNcElIUnZJR05vWldOcklHbG1JR3h2WVdSbFpDNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzMGdZMkZzYkdKaFkyc2dMU0JHZFc1amRHbHZiaUIwYnlCbGVHVmpkWFJsSUhkb1pXNGdhVzFoWjJVZ2FYTWdablZzYkhrZ2JHOWhaR1ZrTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ2YmtsdFlXZGxjMHh2WVdSbFpDaHBiV0ZuWlhNc0lHTmhiR3hpWVdOcktYdGNiaUFnZG1GeUlITmxiR1lnUFNCMGFHbHpMRnh1SUNBZ0lDQWdkVzVzYjJGa1pXUWdQU0JwYldGblpYTXViR1Z1WjNSb08xeHVYRzRnSUdsbUlDaDFibXh2WVdSbFpDQTlQVDBnTUNrZ2UxeHVJQ0FnSUdOaGJHeGlZV05yS0NrN1hHNGdJSDFjYmx4dUlDQnBiV0ZuWlhNdVpXRmphQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJQzh2SUVOb1pXTnJJR2xtSUdsdFlXZGxJR2x6SUd4dllXUmxaRnh1SUNBZ0lHbG1JQ2gwYUdsekxtTnZiWEJzWlhSbElDWW1JSFJvYVhNdWJtRjBkWEpoYkZkcFpIUm9JQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lITnBibWRzWlVsdFlXZGxURzloWkdWa0tDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJR0ZpYjNabElHTm9aV05ySUdaaGFXeGxaQ3dnYzJsdGRXeGhkR1VnYkc5aFpHbHVaeUJ2YmlCa1pYUmhZMmhsWkNCbGJHVnRaVzUwTGx4dUlDQWdJQ0FnZG1GeUlHbHRZV2RsSUQwZ2JtVjNJRWx0WVdkbEtDazdYRzRnSUNBZ0lDQXZMeUJUZEdsc2JDQmpiM1Z1ZENCcGJXRm5aU0JoY3lCc2IyRmtaV1FnYVdZZ2FYUWdabWx1WVd4cGVtVnpJSGRwZEdnZ1lXNGdaWEp5YjNJdVhHNGdJQ0FnSUNCMllYSWdaWFpsYm5SeklEMGdYQ0pzYjJGa0xucG1MbWx0WVdkbGN5Qmxjbkp2Y2k1NlppNXBiV0ZuWlhOY0lqdGNiaUFnSUNBZ0lDUW9hVzFoWjJVcExtOXVaU2hsZG1WdWRITXNJR1oxYm1OMGFXOXVJRzFsS0dWMlpXNTBLWHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZXNWlhVzVrSUhSb1pTQmxkbVZ1ZENCc2FYTjBaVzVsY25NdUlGZGxKM0psSUhWemFXNW5JQ2R2Ym1VbklHSjFkQ0J2Ym14NUlHOXVaU0J2WmlCMGFHVWdkSGR2SUdWMlpXNTBjeUIzYVd4c0lHaGhkbVVnWm1seVpXUXVYRzRnSUNBZ0lDQWdJQ1FvZEdocGN5a3ViMlptS0dWMlpXNTBjeXdnYldVcE8xeHVJQ0FnSUNBZ0lDQnphVzVuYkdWSmJXRm5aVXh2WVdSbFpDZ3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0JwYldGblpTNXpjbU1nUFNBa0tIUm9hWE1wTG1GMGRISW9KM055WXljcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1Y2JpQWdablZ1WTNScGIyNGdjMmx1WjJ4bFNXMWhaMlZNYjJGa1pXUW9LU0I3WEc0Z0lDQWdkVzVzYjJGa1pXUXRMVHRjYmlBZ0lDQnBaaUFvZFc1c2IyRmtaV1FnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0I3SUc5dVNXMWhaMlZ6VEc5aFpHVmtJSDA3WEc0aVhYMD1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLmltYWdlTG9hZGVyLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFRoaXMgdXRpbCB3YXMgY3JlYXRlZCBieSBNYXJpdXMgT2xiZXJ0eiAqXG4gKiBQbGVhc2UgdGhhbmsgTWFyaXVzIG9uIEdpdEh1YiAvb3dsYmVydHogKlxuICogb3IgdGhlIHdlYiBodHRwOi8vd3d3Lm1hcml1c29sYmVydHouZGUvICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLktleWJvYXJkID0gdW5kZWZpbmVkO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIga2V5Q29kZXMgPSB7XG4gIDk6ICdUQUInLFxuICAxMzogJ0VOVEVSJyxcbiAgMjc6ICdFU0NBUEUnLFxuICAzMjogJ1NQQUNFJyxcbiAgMzU6ICdFTkQnLFxuICAzNjogJ0hPTUUnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn07XG5cbnZhciBjb21tYW5kcyA9IHt9O1xuXG4vLyBGdW5jdGlvbnMgcHVsbGVkIG91dCB0byBiZSByZWZlcmVuY2VhYmxlIGZyb20gaW50ZXJuYWxzXG5mdW5jdGlvbiBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gIGlmICghJGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgIGlmICghKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmlzKCc6dmlzaWJsZScpIHx8ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5hdHRyKCd0YWJpbmRleCcpIDwgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZUtleShldmVudCkge1xuICB2YXIga2V5ID0ga2V5Q29kZXNbZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZV0gfHwgU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC53aGljaCkudG9VcHBlckNhc2UoKTtcblxuICAvLyBSZW1vdmUgdW4tcHJpbnRhYmxlIGNoYXJhY3RlcnMsIGUuZy4gZm9yIGBmcm9tQ2hhckNvZGVgIGNhbGxzIGZvciBDVFJMIG9ubHkgZXZlbnRzXG4gIGtleSA9IGtleS5yZXBsYWNlKC9cXFcrLywgJycpO1xuXG4gIGlmIChldmVudC5zaGlmdEtleSkga2V5ID0gJ1NISUZUXycgKyBrZXk7XG4gIGlmIChldmVudC5jdHJsS2V5KSBrZXkgPSAnQ1RSTF8nICsga2V5O1xuICBpZiAoZXZlbnQuYWx0S2V5KSBrZXkgPSAnQUxUXycgKyBrZXk7XG5cbiAgLy8gUmVtb3ZlIHRyYWlsaW5nIHVuZGVyc2NvcmUsIGluIGNhc2Ugb25seSBtb2RpZmllcnMgd2VyZSB1c2VkIChlLmcuIG9ubHkgYENUUkxfQUxUYClcbiAga2V5ID0ga2V5LnJlcGxhY2UoL18kLywgJycpO1xuXG4gIHJldHVybiBrZXk7XG59XG5cbnZhciBLZXlib2FyZCA9IHtcbiAga2V5czogZ2V0S2V5Q29kZXMoa2V5Q29kZXMpLFxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIChrZXlib2FyZCkgZXZlbnQgYW5kIHJldHVybnMgYSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIGl0cyBrZXlcbiAgICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcmV0dXJuIFN0cmluZyBrZXkgLSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBrZXkgcHJlc3NlZFxuICAgKi9cbiAgcGFyc2VLZXk6IHBhcnNlS2V5LFxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBnaXZlbiAoa2V5Ym9hcmQpIGV2ZW50XG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQncyBuYW1lLCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHBhcmFtIHtPYmplY3RzfSBmdW5jdGlvbnMgLSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyB0aGF0IGFyZSB0byBiZSBleGVjdXRlZFxuICAgKi9cbiAgaGFuZGxlS2V5OiBmdW5jdGlvbiBoYW5kbGVLZXkoZXZlbnQsIGNvbXBvbmVudCwgZnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbW1hbmRMaXN0ID0gY29tbWFuZHNbY29tcG9uZW50XSxcbiAgICAgICAga2V5Q29kZSA9IHRoaXMucGFyc2VLZXkoZXZlbnQpLFxuICAgICAgICBjbWRzLFxuICAgICAgICBjb21tYW5kLFxuICAgICAgICBmbjtcblxuICAgIGlmICghY29tbWFuZExpc3QpIHJldHVybiBjb25zb2xlLndhcm4oJ0NvbXBvbmVudCBub3QgZGVmaW5lZCEnKTtcblxuICAgIGlmICh0eXBlb2YgY29tbWFuZExpc3QubHRyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICBjbWRzID0gY29tbWFuZExpc3Q7IC8vIHVzZSBwbGFpbiBsaXN0XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1lcmdlIGx0ciBhbmQgcnRsOiBpZiBkb2N1bWVudCBpcyBydGwsIHJ0bCBvdmVyd3JpdGVzIGx0ciBhbmQgdmljZSB2ZXJzYVxuICAgICAgaWYgKCgwLCBfZm91bmRhdGlvblV0aWwucnRsKSgpKSBjbWRzID0gX2pxdWVyeTIuZGVmYXVsdC5leHRlbmQoe30sIGNvbW1hbmRMaXN0Lmx0ciwgY29tbWFuZExpc3QucnRsKTtlbHNlIGNtZHMgPSBfanF1ZXJ5Mi5kZWZhdWx0LmV4dGVuZCh7fSwgY29tbWFuZExpc3QucnRsLCBjb21tYW5kTGlzdC5sdHIpO1xuICAgIH1cbiAgICBjb21tYW5kID0gY21kc1trZXlDb2RlXTtcblxuICAgIGZuID0gZnVuY3Rpb25zW2NvbW1hbmRdO1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGV4ZWN1dGUgZnVuY3Rpb24gIGlmIGV4aXN0c1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gZm4uYXBwbHkoKTtcbiAgICAgIGlmIChmdW5jdGlvbnMuaGFuZGxlZCB8fCB0eXBlb2YgZnVuY3Rpb25zLmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBoYW5kbGVkXG4gICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICBmdW5jdGlvbnMudW5oYW5kbGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuXG4gIGZpbmRGb2N1c2FibGU6IGZpbmRGb2N1c2FibGUsXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBuYW1lIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudCAtIEZvdW5kYXRpb24gY29tcG9uZW50LCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHJldHVybiBTdHJpbmcgY29tcG9uZW50TmFtZVxuICAgKi9cblxuICByZWdpc3RlcjogZnVuY3Rpb24gcmVnaXN0ZXIoY29tcG9uZW50TmFtZSwgY21kcykge1xuICAgIGNvbW1hbmRzW2NvbXBvbmVudE5hbWVdID0gY21kcztcbiAgfSxcblxuXG4gIC8vIFRPRE85NDM4OiBUaGVzZSByZWZlcmVuY2VzIHRvIEtleWJvYXJkIG5lZWQgdG8gbm90IHJlcXVpcmUgZ2xvYmFsLiBXaWxsICd0aGlzJyB3b3JrIGluIHRoaXMgY29udGV4dD9cbiAgLy9cbiAgLyoqXG4gICAqIFRyYXBzIHRoZSBmb2N1cyBpbiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtICB7alF1ZXJ5fSAkZWxlbWVudCAgalF1ZXJ5IG9iamVjdCB0byB0cmFwIHRoZSBmb3VjcyBpbnRvLlxuICAgKi9cbiAgdHJhcEZvY3VzOiBmdW5jdGlvbiB0cmFwRm9jdXMoJGVsZW1lbnQpIHtcbiAgICB2YXIgJGZvY3VzYWJsZSA9IGZpbmRGb2N1c2FibGUoJGVsZW1lbnQpLFxuICAgICAgICAkZmlyc3RGb2N1c2FibGUgPSAkZm9jdXNhYmxlLmVxKDApLFxuICAgICAgICAkbGFzdEZvY3VzYWJsZSA9ICRmb2N1c2FibGUuZXEoLTEpO1xuXG4gICAgJGVsZW1lbnQub24oJ2tleWRvd24uemYudHJhcGZvY3VzJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSAkbGFzdEZvY3VzYWJsZVswXSAmJiBwYXJzZUtleShldmVudCkgPT09ICdUQUInKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICRmaXJzdEZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQgPT09ICRmaXJzdEZvY3VzYWJsZVswXSAmJiBwYXJzZUtleShldmVudCkgPT09ICdTSElGVF9UQUInKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICRsYXN0Rm9jdXNhYmxlLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSB0cmFwcGVkIGZvY3VzIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqIEBwYXJhbSAge2pRdWVyeX0gJGVsZW1lbnQgIGpRdWVyeSBvYmplY3QgdG8gcmVsZWFzZSB0aGUgZm9jdXMgZm9yLlxuICAgKi9cbiAgcmVsZWFzZUZvY3VzOiBmdW5jdGlvbiByZWxlYXNlRm9jdXMoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudC5vZmYoJ2tleWRvd24uemYudHJhcGZvY3VzJyk7XG4gIH1cbn07XG5cbi8qXG4gKiBDb25zdGFudHMgZm9yIGVhc2llciBjb21wYXJpbmcuXG4gKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAqL1xuZnVuY3Rpb24gZ2V0S2V5Q29kZXMoa2NzKSB7XG4gIHZhciBrID0ge307XG4gIGZvciAodmFyIGtjIGluIGtjcykge1xuICAgIGtba2NzW2tjXV0gPSBrY3Nba2NdO1xuICB9cmV0dXJuIGs7XG59XG5cbmV4cG9ydHMuS2V5Ym9hcmQgPSBLZXlib2FyZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVkWFJwYkM1clpYbGliMkZ5WkM1cWN5SmRMQ0p1WVcxbGN5STZXeUpyWlhsRGIyUmxjeUlzSW1OdmJXMWhibVJ6SWl3aVptbHVaRVp2WTNWellXSnNaU0lzSWlSbGJHVnRaVzUwSWl3aVptbHVaQ0lzSW1acGJIUmxjaUlzSW1seklpd2lZWFIwY2lJc0luQmhjbk5sUzJWNUlpd2laWFpsYm5RaUxDSnJaWGtpTENKM2FHbGphQ0lzSW10bGVVTnZaR1VpTENKVGRISnBibWNpTENKbWNtOXRRMmhoY2tOdlpHVWlMQ0owYjFWd2NHVnlRMkZ6WlNJc0luSmxjR3hoWTJVaUxDSnphR2xtZEV0bGVTSXNJbU4wY214TFpYa2lMQ0poYkhSTFpYa2lMQ0pMWlhsaWIyRnlaQ0lzSW10bGVYTWlMQ0puWlhSTFpYbERiMlJsY3lJc0ltaGhibVJzWlV0bGVTSXNJbU52YlhCdmJtVnVkQ0lzSW1aMWJtTjBhVzl1Y3lJc0ltTnZiVzFoYm1STWFYTjBJaXdpWTIxa2N5SXNJbU52YlcxaGJtUWlMQ0ptYmlJc0ltTnZibk52YkdVaUxDSjNZWEp1SWl3aWJIUnlJaXdpSkNJc0ltVjRkR1Z1WkNJc0luSjBiQ0lzSW5KbGRIVnlibFpoYkhWbElpd2lZWEJ3YkhraUxDSm9ZVzVrYkdWa0lpd2lkVzVvWVc1a2JHVmtJaXdpY21WbmFYTjBaWElpTENKamIyMXdiMjVsYm5ST1lXMWxJaXdpZEhKaGNFWnZZM1Z6SWl3aUpHWnZZM1Z6WVdKc1pTSXNJaVJtYVhKemRFWnZZM1Z6WVdKc1pTSXNJbVZ4SWl3aUpHeGhjM1JHYjJOMWMyRmliR1VpTENKdmJpSXNJblJoY21kbGRDSXNJbkJ5WlhabGJuUkVaV1poZFd4MElpd2labTlqZFhNaUxDSnlaV3hsWVhObFJtOWpkWE1pTENKdlptWWlMQ0pyWTNNaUxDSnJJaXdpYTJNaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdPenM3T3p0QlFWRkJPenM3T3pzN08wRkJSVUU3T3pzN1FVRkRRVHM3T3p0QlFVVkJMRWxCUVUxQkxGZEJRVmM3UVVGRFppeExRVUZITEV0QlJGazdRVUZGWml4TlFVRkpMRTlCUmxjN1FVRkhaaXhOUVVGSkxGRkJTRmM3UVVGSlppeE5RVUZKTEU5QlNsYzdRVUZMWml4TlFVRkpMRXRCVEZjN1FVRk5aaXhOUVVGSkxFMUJUbGM3UVVGUFppeE5RVUZKTEZsQlVGYzdRVUZSWml4TlFVRkpMRlZCVWxjN1FVRlRaaXhOUVVGSkxHRkJWRmM3UVVGVlppeE5RVUZKTzBGQlZsY3NRMEZCYWtJN08wRkJZVUVzU1VGQlNVTXNWMEZCVnl4RlFVRm1PenRCUVVWQk8wRkJRMEVzVTBGQlUwTXNZVUZCVkN4RFFVRjFRa01zVVVGQmRrSXNSVUZCYVVNN1FVRkRMMElzVFVGQlJ5eERRVUZEUVN4UlFVRktMRVZCUVdNN1FVRkJReXhYUVVGUExFdEJRVkE3UVVGQlpUdEJRVU01UWl4VFFVRlBRU3hUUVVGVFF5eEpRVUZVTEVOQlFXTXNPRXRCUVdRc1JVRkJPRXhETEUxQlFUbE1MRU5CUVhGTkxGbEJRVmM3UVVGRGNrNHNVVUZCU1N4RFFVRkRMSE5DUVVGRkxFbEJRVVlzUlVGQlVVTXNSVUZCVWl4RFFVRlhMRlZCUVZnc1EwRkJSQ3hKUVVFeVFpeHpRa0ZCUlN4SlFVRkdMRVZCUVZGRExFbEJRVklzUTBGQllTeFZRVUZpTEVsQlFUSkNMRU5CUVRGRUxFVkJRVFpFTzBGQlFVVXNZVUZCVHl4TFFVRlFPMEZCUVdVc1MwRkVkVWtzUTBGRGRFazdRVUZETDBVc1YwRkJUeXhKUVVGUU8wRkJRMFFzUjBGSVRTeERRVUZRTzBGQlNVUTdPMEZCUlVRc1UwRkJVME1zVVVGQlZDeERRVUZyUWtNc1MwRkJiRUlzUlVGQmVVSTdRVUZEZGtJc1RVRkJTVU1zVFVGQlRWWXNVMEZCVTFNc1RVRkJUVVVzUzBGQlRpeEpRVUZsUml4TlFVRk5SeXhQUVVFNVFpeExRVUV3UTBNc1QwRkJUME1zV1VGQlVDeERRVUZ2UWt3c1RVRkJUVVVzUzBGQk1VSXNSVUZCYVVOSkxGZEJRV3BETEVWQlFYQkVPenRCUVVWQk8wRkJRMEZNTEZGQlFVMUJMRWxCUVVsTkxFOUJRVW9zUTBGQldTeExRVUZhTEVWQlFXMUNMRVZCUVc1Q0xFTkJRVTQ3TzBGQlJVRXNUVUZCU1ZBc1RVRkJUVkVzVVVGQlZpeEZRVUZ2UWxBc2FVSkJRV1ZCTEVkQlFXWTdRVUZEY0VJc1RVRkJTVVFzVFVGQlRWTXNUMEZCVml4RlFVRnRRbElzWjBKQlFXTkJMRWRCUVdRN1FVRkRia0lzVFVGQlNVUXNUVUZCVFZVc1RVRkJWaXhGUVVGclFsUXNaVUZCWVVFc1IwRkJZanM3UVVGRmJFSTdRVUZEUVVFc1VVRkJUVUVzU1VGQlNVMHNUMEZCU2l4RFFVRlpMRWxCUVZvc1JVRkJhMElzUlVGQmJFSXNRMEZCVGpzN1FVRkZRU3hUUVVGUFRpeEhRVUZRTzBGQlEwUTdPMEZCUlVRc1NVRkJTVlVzVjBGQlZ6dEJRVU5pUXl4UlFVRk5ReXhaUVVGWmRFSXNVVUZCV2l4RFFVUlBPenRCUVVkaU96czdPenM3UVVGTlFWRXNXVUZCVlVFc1VVRlVSenM3UVVGWFlqczdPenM3TzBGQlRVRmxMRmRCYWtKaExIRkNRV2xDU0dRc1MwRnFRa2NzUlVGcFFrbGxMRk5CYWtKS0xFVkJhVUpsUXl4VFFXcENaaXhGUVdsQ01FSTdRVUZEY2tNc1VVRkJTVU1zWTBGQlkzcENMRk5CUVZOMVFpeFRRVUZVTEVOQlFXeENPMEZCUVVFc1VVRkRSVm9zVlVGQlZTeExRVUZMU2l4UlFVRk1MRU5CUVdORExFdEJRV1FzUTBGRVdqdEJRVUZCTEZGQlJVVnJRaXhKUVVaR08wRkJRVUVzVVVGSFJVTXNUMEZJUmp0QlFVRkJMRkZCU1VWRExFVkJTa1k3TzBGQlRVRXNVVUZCU1N4RFFVRkRTQ3hYUVVGTUxFVkJRV3RDTEU5QlFVOUpMRkZCUVZGRExFbEJRVklzUTBGQllTeDNRa0ZCWWl4RFFVRlFPenRCUVVWc1FpeFJRVUZKTEU5QlFVOU1MRmxCUVZsTkxFZEJRVzVDTEV0QlFUSkNMRmRCUVM5Q0xFVkJRVFJETzBGQlFVVTdRVUZETVVOTUxHRkJRVTlFTEZkQlFWQXNRMEZFZDBNc1EwRkRjRUk3UVVGRGRrSXNTMEZHUkN4TlFVVlBPMEZCUVVVN1FVRkRUQ3hWUVVGSkxEQkNRVUZLTEVWQlFWZERMRTlCUVU5TkxHbENRVUZGUXl4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaFVpeFpRVUZaVFN4SFFVRjZRaXhGUVVFNFFrNHNXVUZCV1ZNc1IwRkJNVU1zUTBGQlVDeERRVUZZTEV0QlJVdFNMRTlCUVU5TkxHbENRVUZGUXl4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaFVpeFpRVUZaVXl4SFFVRjZRaXhGUVVFNFFsUXNXVUZCV1Uwc1IwRkJNVU1zUTBGQlVEdEJRVU5TTzBGQlEwUktMR05CUVZWRUxFdEJRVXRtTEU5QlFVd3NRMEZCVmpzN1FVRkZRV2xDTEZOQlFVdEtMRlZCUVZWSExFOUJRVllzUTBGQlREdEJRVU5CTEZGQlFVbERMRTFCUVUwc1QwRkJUMEVzUlVGQlVDeExRVUZqTEZWQlFYaENMRVZCUVc5RE8wRkJRVVU3UVVGRGNFTXNWVUZCU1U4c1kwRkJZMUFzUjBGQlIxRXNTMEZCU0N4RlFVRnNRanRCUVVOQkxGVkJRVWxhTEZWQlFWVmhMRTlCUVZZc1NVRkJjVUlzVDBGQlQySXNWVUZCVldFc1QwRkJha0lzUzBGQk5rSXNWVUZCZEVRc1JVRkJhMFU3UVVGQlJUdEJRVU5vUldJc2EwSkJRVlZoTEU5QlFWWXNRMEZCYTBKR0xGZEJRV3hDTzBGQlEwZzdRVUZEUml4TFFVeEVMRTFCUzA4N1FVRkRUQ3hWUVVGSldDeFZRVUZWWXl4VFFVRldMRWxCUVhWQ0xFOUJRVTlrTEZWQlFWVmpMRk5CUVdwQ0xFdEJRU3RDTEZWQlFURkVMRVZCUVhORk8wRkJRVVU3UVVGRGNFVmtMR3RDUVVGVll5eFRRVUZXTzBGQlEwZzdRVUZEUmp0QlFVTkdMRWRCT1VOWk96czdRVUZuUkdJN096czdPenRCUVUxQmNrTXNhVUpCUVdWQkxHRkJkRVJHT3p0QlFYZEVZanM3T3pzN08wRkJUVUZ6UXl4VlFUbEVZU3h2UWtFNFJFcERMR0ZCT1VSSkxFVkJPRVJYWkN4SlFUbEVXQ3hGUVRoRWFVSTdRVUZETlVJeFFpeGhRVUZUZDBNc1lVRkJWQ3hKUVVFd1FtUXNTVUZCTVVJN1FVRkRSQ3hIUVdoRldUczdPMEZCYlVWaU8wRkJRMEU3UVVGRFFUczdPenRCUVVsQlpTeFhRWHBGWVN4eFFrRjVSVWgyUXl4UlFYcEZSeXhGUVhsRlR6dEJRVU5zUWl4UlFVRkpkME1zWVVGQllYcERMR05CUVdORExGRkJRV1FzUTBGQmFrSTdRVUZCUVN4UlFVTkplVU1zYTBKQlFXdENSQ3hYUVVGWFJTeEZRVUZZTEVOQlFXTXNRMEZCWkN4RFFVUjBRanRCUVVGQkxGRkJSVWxETEdsQ1FVRnBRa2dzVjBGQlYwVXNSVUZCV0N4RFFVRmpMRU5CUVVNc1EwRkJaaXhEUVVaeVFqczdRVUZKUVRGRExHRkJRVk0wUXl4RlFVRlVMRU5CUVZrc2MwSkJRVm9zUlVGQmIwTXNWVUZCVTNSRExFdEJRVlFzUlVGQlowSTdRVUZEYkVRc1ZVRkJTVUVzVFVGQlRYVkRMRTFCUVU0c1MwRkJhVUpHTEdWQlFXVXNRMEZCWml4RFFVRnFRaXhKUVVGelEzUkRMRk5CUVZORExFdEJRVlFzVFVGQmIwSXNTMEZCT1VRc1JVRkJjVVU3UVVGRGJrVkJMR05CUVUxM1F5eGpRVUZPTzBGQlEwRk1MSGRDUVVGblFrMHNTMEZCYUVJN1FVRkRSQ3hQUVVoRUxFMUJTVXNzU1VGQlNYcERMRTFCUVUxMVF5eE5RVUZPTEV0QlFXbENTaXhuUWtGQlowSXNRMEZCYUVJc1EwRkJha0lzU1VGQmRVTndReXhUUVVGVFF5eExRVUZVTEUxQlFXOUNMRmRCUVM5RUxFVkJRVFJGTzBGQlF5OUZRU3hqUVVGTmQwTXNZMEZCVGp0QlFVTkJTQ3gxUWtGQlpVa3NTMEZCWmp0QlFVTkVPMEZCUTBZc1MwRlVSRHRCUVZWRUxFZEJlRVpaT3p0QlFYbEdZanM3T3p0QlFVbEJReXhqUVRkR1lTeDNRa0UyUmtGb1JDeFJRVGRHUVN4RlFUWkdWVHRCUVVOeVFrRXNZVUZCVTJsRUxFZEJRVlFzUTBGQllTeHpRa0ZCWWp0QlFVTkVPMEZCTDBaWkxFTkJRV1k3TzBGQmEwZEJPenM3TzBGQlNVRXNVMEZCVXpsQ0xGZEJRVlFzUTBGQmNVSXJRaXhIUVVGeVFpeEZRVUV3UWp0QlFVTjRRaXhOUVVGSlF5eEpRVUZKTEVWQlFWSTdRVUZEUVN4UFFVRkxMRWxCUVVsRExFVkJRVlFzU1VGQlpVWXNSMEZCWmp0QlFVRnZRa01zVFVGQlJVUXNTVUZCU1VVc1JVRkJTaXhEUVVGR0xFbEJRV0ZHTEVsQlFVbEZMRVZCUVVvc1EwRkJZanRCUVVGd1FpeEhRVU5CTEU5QlFVOUVMRU5CUVZBN1FVRkRSRHM3VVVGRlQyeERMRkVzUjBGQlFVRXNVU0lzSW1acGJHVWlPaUptYjNWdVpHRjBhVzl1TG5WMGFXd3VhMlY1WW05aGNtUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNwY2JpQXFJRlJvYVhNZ2RYUnBiQ0IzWVhNZ1kzSmxZWFJsWkNCaWVTQk5ZWEpwZFhNZ1QyeGlaWEowZWlBcVhHNGdLaUJRYkdWaGMyVWdkR2hoYm1zZ1RXRnlhWFZ6SUc5dUlFZHBkRWgxWWlBdmIzZHNZbVZ5ZEhvZ0tseHVJQ29nYjNJZ2RHaGxJSGRsWWlCb2RIUndPaTh2ZDNkM0xtMWhjbWwxYzI5c1ltVnlkSG91WkdVdklDcGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXFYRzRnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm1sdGNHOXlkQ0FrSUdaeWIyMGdKMnB4ZFdWeWVTYzdYRzVwYlhCdmNuUWdleUJ5ZEd3Z1lYTWdVblJzSUgwZ1puSnZiU0FuTGk5bWIzVnVaR0YwYVc5dUxuVjBhV3d1WTI5eVpTYzdYRzVjYm1OdmJuTjBJR3RsZVVOdlpHVnpJRDBnZTF4dUlDQTVPaUFuVkVGQ0p5eGNiaUFnTVRNNklDZEZUbFJGVWljc1hHNGdJREkzT2lBblJWTkRRVkJGSnl4Y2JpQWdNekk2SUNkVFVFRkRSU2NzWEc0Z0lETTFPaUFuUlU1RUp5eGNiaUFnTXpZNklDZElUMDFGSnl4Y2JpQWdNemM2SUNkQlVsSlBWMTlNUlVaVUp5eGNiaUFnTXpnNklDZEJVbEpQVjE5VlVDY3NYRzRnSURNNU9pQW5RVkpTVDFkZlVrbEhTRlFuTEZ4dUlDQTBNRG9nSjBGU1VrOVhYMFJQVjA0blhHNTlYRzVjYm5aaGNpQmpiMjF0WVc1a2N5QTlJSHQ5WEc1Y2JpOHZJRVoxYm1OMGFXOXVjeUJ3ZFd4c1pXUWdiM1YwSUhSdklHSmxJSEpsWm1WeVpXNWpaV0ZpYkdVZ1puSnZiU0JwYm5SbGNtNWhiSE5jYm1aMWJtTjBhVzl1SUdacGJtUkdiMk4xYzJGaWJHVW9KR1ZzWlcxbGJuUXBJSHRjYmlBZ2FXWW9JU1JsYkdWdFpXNTBLU0I3Y21WMGRYSnVJR1poYkhObE95QjlYRzRnSUhKbGRIVnliaUFrWld4bGJXVnVkQzVtYVc1a0tDZGhXMmh5WldaZExDQmhjbVZoVzJoeVpXWmRMQ0JwYm5CMWREcHViM1FvVzJScGMyRmliR1ZrWFNrc0lITmxiR1ZqZERwdWIzUW9XMlJwYzJGaWJHVmtYU2tzSUhSbGVIUmhjbVZoT201dmRDaGJaR2x6WVdKc1pXUmRLU3dnWW5WMGRHOXVPbTV2ZENoYlpHbHpZV0pzWldSZEtTd2dhV1p5WVcxbExDQnZZbXBsWTNRc0lHVnRZbVZrTENBcVczUmhZbWx1WkdWNFhTd2dLbHRqYjI1MFpXNTBaV1JwZEdGaWJHVmRKeWt1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJR2xtSUNnaEpDaDBhR2x6S1M1cGN5Z25PblpwYzJsaWJHVW5LU0I4ZkNBa0tIUm9hWE1wTG1GMGRISW9KM1JoWW1sdVpHVjRKeWtnUENBd0tTQjdJSEpsZEhWeWJpQm1ZV3h6WlRzZ2ZTQXZMMjl1YkhrZ2FHRjJaU0IyYVhOcFlteGxJR1ZzWlcxbGJuUnpJR0Z1WkNCMGFHOXpaU0IwYUdGMElHaGhkbVVnWVNCMFlXSnBibVJsZUNCbmNtVmhkR1Z5SUc5eUlHVnhkV0ZzSURCY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdmU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEJoY25ObFMyVjVLR1YyWlc1MEtTQjdYRzRnSUhaaGNpQnJaWGtnUFNCclpYbERiMlJsYzF0bGRtVnVkQzUzYUdsamFDQjhmQ0JsZG1WdWRDNXJaWGxEYjJSbFhTQjhmQ0JUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0dWMlpXNTBMbmRvYVdOb0tTNTBiMVZ3Y0dWeVEyRnpaU2dwTzF4dVhHNGdJQzh2SUZKbGJXOTJaU0IxYmkxd2NtbHVkR0ZpYkdVZ1kyaGhjbUZqZEdWeWN5d2daUzVuTGlCbWIzSWdZR1p5YjIxRGFHRnlRMjlrWldBZ1kyRnNiSE1nWm05eUlFTlVVa3dnYjI1c2VTQmxkbVZ1ZEhOY2JpQWdhMlY1SUQwZ2EyVjVMbkpsY0d4aFkyVW9MMXhjVnlzdkxDQW5KeWs3WEc1Y2JpQWdhV1lnS0dWMlpXNTBMbk5vYVdaMFMyVjVLU0JyWlhrZ1BTQmdVMGhKUmxSZkpIdHJaWGw5WUR0Y2JpQWdhV1lnS0dWMlpXNTBMbU4wY214TFpYa3BJR3RsZVNBOUlHQkRWRkpNWHlSN2EyVjVmV0E3WEc0Z0lHbG1JQ2hsZG1WdWRDNWhiSFJMWlhrcElHdGxlU0E5SUdCQlRGUmZKSHRyWlhsOVlEdGNibHh1SUNBdkx5QlNaVzF2ZG1VZ2RISmhhV3hwYm1jZ2RXNWtaWEp6WTI5eVpTd2dhVzRnWTJGelpTQnZibXg1SUcxdlpHbG1hV1Z5Y3lCM1pYSmxJSFZ6WldRZ0tHVXVaeTRnYjI1c2VTQmdRMVJTVEY5QlRGUmdLVnh1SUNCclpYa2dQU0JyWlhrdWNtVndiR0ZqWlNndlh5UXZMQ0FuSnlrN1hHNWNiaUFnY21WMGRYSnVJR3RsZVR0Y2JuMWNibHh1ZG1GeUlFdGxlV0p2WVhKa0lEMGdlMXh1SUNCclpYbHpPaUJuWlhSTFpYbERiMlJsY3loclpYbERiMlJsY3lrc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCaGNuTmxjeUIwYUdVZ0tHdGxlV0p2WVhKa0tTQmxkbVZ1ZENCaGJtUWdjbVYwZFhKdWN5QmhJRk4wY21sdVp5QjBhR0YwSUhKbGNISmxjMlZ1ZEhNZ2FYUnpJR3RsZVZ4dUlDQWdLaUJEWVc0Z1ltVWdkWE5sWkNCc2FXdGxJRVp2ZFc1a1lYUnBiMjR1Y0dGeWMyVkxaWGtvWlhabGJuUXBJRDA5UFNCR2IzVnVaR0YwYVc5dUxtdGxlWE11VTFCQlEwVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0RmRtVnVkSDBnWlhabGJuUWdMU0IwYUdVZ1pYWmxiblFnWjJWdVpYSmhkR1ZrSUdKNUlIUm9aU0JsZG1WdWRDQm9ZVzVrYkdWeVhHNGdJQ0FxSUVCeVpYUjFjbTRnVTNSeWFXNW5JR3RsZVNBdElGTjBjbWx1WnlCMGFHRjBJSEpsY0hKbGMyVnVkSE1nZEdobElHdGxlU0J3Y21WemMyVmtYRzRnSUNBcUwxeHVJQ0J3WVhKelpVdGxlVG9nY0dGeWMyVkxaWGtzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWhoYm1Sc1pYTWdkR2hsSUdkcGRtVnVJQ2hyWlhsaWIyRnlaQ2tnWlhabGJuUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0RmRtVnVkSDBnWlhabGJuUWdMU0IwYUdVZ1pYWmxiblFnWjJWdVpYSmhkR1ZrSUdKNUlIUm9aU0JsZG1WdWRDQm9ZVzVrYkdWeVhHNGdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JqYjIxd2IyNWxiblFnTFNCR2IzVnVaR0YwYVc5dUlHTnZiWEJ2Ym1WdWRDZHpJRzVoYldVc0lHVXVaeTRnVTJ4cFpHVnlJRzl5SUZKbGRtVmhiRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEhOOUlHWjFibU4wYVc5dWN5QXRJR052Ykd4bFkzUnBiMjRnYjJZZ1puVnVZM1JwYjI1eklIUm9ZWFFnWVhKbElIUnZJR0psSUdWNFpXTjFkR1ZrWEc0Z0lDQXFMMXh1SUNCb1lXNWtiR1ZMWlhrb1pYWmxiblFzSUdOdmJYQnZibVZ1ZEN3Z1puVnVZM1JwYjI1ektTQjdYRzRnSUNBZ2RtRnlJR052YlcxaGJtUk1hWE4wSUQwZ1kyOXRiV0Z1WkhOYlkyOXRjRzl1Wlc1MFhTeGNiaUFnSUNBZ0lHdGxlVU52WkdVZ1BTQjBhR2x6TG5CaGNuTmxTMlY1S0dWMlpXNTBLU3hjYmlBZ0lDQWdJR050WkhNc1hHNGdJQ0FnSUNCamIyMXRZVzVrTEZ4dUlDQWdJQ0FnWm00N1hHNWNiaUFnSUNCcFppQW9JV052YlcxaGJtUk1hWE4wS1NCeVpYUjFjbTRnWTI5dWMyOXNaUzUzWVhKdUtDZERiMjF3YjI1bGJuUWdibTkwSUdSbFptbHVaV1FoSnlrN1hHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHTnZiVzFoYm1STWFYTjBMbXgwY2lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUhzZ0x5OGdkR2hwY3lCamIyMXdiMjVsYm5RZ1pHOWxjeUJ1YjNRZ1pHbG1abVZ5Wlc1MGFXRjBaU0JpWlhSM1pXVnVJR3gwY2lCaGJtUWdjblJzWEc0Z0lDQWdJQ0FnSUdOdFpITWdQU0JqYjIxdFlXNWtUR2x6ZERzZ0x5OGdkWE5sSUhCc1lXbHVJR3hwYzNSY2JpQWdJQ0I5SUdWc2MyVWdleUF2THlCdFpYSm5aU0JzZEhJZ1lXNWtJSEowYkRvZ2FXWWdaRzlqZFcxbGJuUWdhWE1nY25Sc0xDQnlkR3dnYjNabGNuZHlhWFJsY3lCc2RISWdZVzVrSUhacFkyVWdkbVZ5YzJGY2JpQWdJQ0FnSUNBZ2FXWWdLRkowYkNncEtTQmpiV1J6SUQwZ0pDNWxlSFJsYm1Rb2UzMHNJR052YlcxaGJtUk1hWE4wTG14MGNpd2dZMjl0YldGdVpFeHBjM1F1Y25Sc0tUdGNibHh1SUNBZ0lDQWdJQ0JsYkhObElHTnRaSE1nUFNBa0xtVjRkR1Z1WkNoN2ZTd2dZMjl0YldGdVpFeHBjM1F1Y25Sc0xDQmpiMjF0WVc1a1RHbHpkQzVzZEhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjIxdFlXNWtJRDBnWTIxa2MxdHJaWGxEYjJSbFhUdGNibHh1SUNBZ0lHWnVJRDBnWm5WdVkzUnBiMjV6VzJOdmJXMWhibVJkTzF4dUlDQWdJR2xtSUNobWJpQW1KaUIwZVhCbGIyWWdabTRnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHNnTHk4Z1pYaGxZM1YwWlNCbWRXNWpkR2x2YmlBZ2FXWWdaWGhwYzNSelhHNGdJQ0FnSUNCMllYSWdjbVYwZFhKdVZtRnNkV1VnUFNCbWJpNWhjSEJzZVNncE8xeHVJQ0FnSUNBZ2FXWWdLR1oxYm1OMGFXOXVjeTVvWVc1a2JHVmtJSHg4SUhSNWNHVnZaaUJtZFc1amRHbHZibk11YUdGdVpHeGxaQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dleUF2THlCbGVHVmpkWFJsSUdaMWJtTjBhVzl1SUhkb1pXNGdaWFpsYm5RZ2QyRnpJR2hoYm1Sc1pXUmNiaUFnSUNBZ0lDQWdJQ0JtZFc1amRHbHZibk11YUdGdVpHeGxaQ2h5WlhSMWNtNVdZV3gxWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNobWRXNWpkR2x2Ym5NdWRXNW9ZVzVrYkdWa0lIeDhJSFI1Y0dWdlppQm1kVzVqZEdsdmJuTXVkVzVvWVc1a2JHVmtJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdJQzh2SUdWNFpXTjFkR1VnWm5WdVkzUnBiMjRnZDJobGJpQmxkbVZ1ZENCM1lYTWdibTkwSUdoaGJtUnNaV1JjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2Ym5NdWRXNW9ZVzVrYkdWa0tDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYVc1a2N5QmhiR3dnWm05amRYTmhZbXhsSUdWc1pXMWxiblJ6SUhkcGRHaHBiaUIwYUdVZ1oybDJaVzRnWUNSbGJHVnRaVzUwWUZ4dUlDQWdLaUJBY0dGeVlXMGdlMnBSZFdWeWVYMGdKR1ZzWlcxbGJuUWdMU0JxVVhWbGNua2diMkpxWldOMElIUnZJSE5sWVhKamFDQjNhWFJvYVc1Y2JpQWdJQ29nUUhKbGRIVnliaUI3YWxGMVpYSjVmU0FrWm05amRYTmhZbXhsSUMwZ1lXeHNJR1p2WTNWellXSnNaU0JsYkdWdFpXNTBjeUIzYVhSb2FXNGdZQ1JsYkdWdFpXNTBZRnh1SUNBZ0tpOWNibHh1SUNCbWFXNWtSbTlqZFhOaFlteGxPaUJtYVc1a1JtOWpkWE5oWW14bExGeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQmpiMjF3YjI1bGJuUWdibUZ0WlNCdVlXMWxYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCamIyMXdiMjVsYm5RZ0xTQkdiM1Z1WkdGMGFXOXVJR052YlhCdmJtVnVkQ3dnWlM1bkxpQlRiR2xrWlhJZ2IzSWdVbVYyWldGc1hHNGdJQ0FxSUVCeVpYUjFjbTRnVTNSeWFXNW5JR052YlhCdmJtVnVkRTVoYldWY2JpQWdJQ292WEc1Y2JpQWdjbVZuYVhOMFpYSW9ZMjl0Y0c5dVpXNTBUbUZ0WlN3Z1kyMWtjeWtnZTF4dUlDQWdJR052YlcxaGJtUnpXMk52YlhCdmJtVnVkRTVoYldWZElEMGdZMjFrY3p0Y2JpQWdmU3hjYmx4dVhHNGdJQzh2SUZSUFJFODVORE00T2lCVWFHVnpaU0J5WldabGNtVnVZMlZ6SUhSdklFdGxlV0p2WVhKa0lHNWxaV1FnZEc4Z2JtOTBJSEpsY1hWcGNtVWdaMnh2WW1Gc0xpQlhhV3hzSUNkMGFHbHpKeUIzYjNKcklHbHVJSFJvYVhNZ1kyOXVkR1Y0ZEQ5Y2JpQWdMeTljYmlBZ0x5b3FYRzRnSUNBcUlGUnlZWEJ6SUhSb1pTQm1iMk4xY3lCcGJpQjBhR1VnWjJsMlpXNGdaV3hsYldWdWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN2FsRjFaWEo1ZlNBa1pXeGxiV1Z1ZENBZ2FsRjFaWEo1SUc5aWFtVmpkQ0IwYnlCMGNtRndJSFJvWlNCbWIzVmpjeUJwYm5SdkxseHVJQ0FnS2k5Y2JpQWdkSEpoY0VadlkzVnpLQ1JsYkdWdFpXNTBLU0I3WEc0Z0lDQWdkbUZ5SUNSbWIyTjFjMkZpYkdVZ1BTQm1hVzVrUm05amRYTmhZbXhsS0NSbGJHVnRaVzUwS1N4Y2JpQWdJQ0FnSUNBZ0pHWnBjbk4wUm05amRYTmhZbXhsSUQwZ0pHWnZZM1Z6WVdKc1pTNWxjU2d3S1N4Y2JpQWdJQ0FnSUNBZ0pHeGhjM1JHYjJOMWMyRmliR1VnUFNBa1ptOWpkWE5oWW14bExtVnhLQzB4S1R0Y2JseHVJQ0FnSUNSbGJHVnRaVzUwTG05dUtDZHJaWGxrYjNkdUxucG1MblJ5WVhCbWIyTjFjeWNzSUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc0Z0lDQWdJQ0JwWmlBb1pYWmxiblF1ZEdGeVoyVjBJRDA5UFNBa2JHRnpkRVp2WTNWellXSnNaVnN3WFNBbUppQndZWEp6WlV0bGVTaGxkbVZ1ZENrZ1BUMDlJQ2RVUVVJbktTQjdYRzRnSUNBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lDUm1hWEp6ZEVadlkzVnpZV0pzWlM1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWld4elpTQnBaaUFvWlhabGJuUXVkR0Z5WjJWMElEMDlQU0FrWm1seWMzUkdiMk4xYzJGaWJHVmJNRjBnSmlZZ2NHRnljMlZMWlhrb1pYWmxiblFwSUQwOVBTQW5VMGhKUmxSZlZFRkNKeWtnZTF4dUlDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdJQ0FrYkdGemRFWnZZM1Z6WVdKc1pTNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5TEZ4dUlDQXZLaXBjYmlBZ0lDb2dVbVZzWldGelpYTWdkR2hsSUhSeVlYQndaV1FnWm05amRYTWdabkp2YlNCMGFHVWdaMmwyWlc0Z1pXeGxiV1Z1ZEM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3YWxGMVpYSjVmU0FrWld4bGJXVnVkQ0FnYWxGMVpYSjVJRzlpYW1WamRDQjBieUJ5Wld4bFlYTmxJSFJvWlNCbWIyTjFjeUJtYjNJdVhHNGdJQ0FxTDF4dUlDQnlaV3hsWVhObFJtOWpkWE1vSkdWc1pXMWxiblFwSUh0Y2JpQWdJQ0FrWld4bGJXVnVkQzV2Wm1Zb0oydGxlV1J2ZDI0dWVtWXVkSEpoY0dadlkzVnpKeWs3WEc0Z0lIMWNibjFjYmx4dUx5cGNiaUFxSUVOdmJuTjBZVzUwY3lCbWIzSWdaV0Z6YVdWeUlHTnZiWEJoY21sdVp5NWNiaUFxSUVOaGJpQmlaU0IxYzJWa0lHeHBhMlVnUm05MWJtUmhkR2x2Ymk1d1lYSnpaVXRsZVNobGRtVnVkQ2tnUFQwOUlFWnZkVzVrWVhScGIyNHVhMlY1Y3k1VFVFRkRSVnh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJMWlhsRGIyUmxjeWhyWTNNcElIdGNiaUFnZG1GeUlHc2dQU0I3ZlR0Y2JpQWdabTl5SUNoMllYSWdhMk1nYVc0Z2EyTnpLU0JyVzJ0amMxdHJZMTFkSUQwZ2EyTnpXMnRqWFR0Y2JpQWdjbVYwZFhKdUlHczdYRzU5WEc1Y2JtVjRjRzl5ZENCN1MyVjVZbTloY21SOU8xeHVJbDE5XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udXRpbC5rZXlib2FyZC5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5NZWRpYVF1ZXJ5ID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIERlZmF1bHQgc2V0IG9mIG1lZGlhIHF1ZXJpZXNcbnZhciBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnOiAnb25seSBzY3JlZW4nLFxuICBsYW5kc2NhcGU6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgcG9ydHJhaXQ6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmE6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArICdvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksJyArICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgKyAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICsgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCAtIFRlc3QgYSBDU1MgbWVkaWEgdHlwZS9xdWVyeSBpbiBKUy5cbi8vIEF1dGhvcnMgJiBjb3B5cmlnaHQgKGMpIDIwMTI6IFNjb3R0IEplaGwsIFBhdWwgSXJpc2gsIE5pY2hvbGFzIFpha2FzLCBEYXZpZCBLbmlnaHQuIER1YWwgTUlUL0JTRCBsaWNlbnNlXG52YXIgbWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhIHx8IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgbWF0Y2hNZWRpdW0gYXBpIHN1Y2ggYXMgSUUgOSBhbmQgd2Via2l0XG5cbiAgdmFyIHN0eWxlTWVkaWEgPSB3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWE7XG5cbiAgLy8gRm9yIHRob3NlIHRoYXQgZG9uJ3Qgc3VwcG9ydCBtYXRjaE1lZGl1bVxuICBpZiAoIXN0eWxlTWVkaWEpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgICAgICBzY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0sXG4gICAgICAgIGluZm8gPSBudWxsO1xuXG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUuaWQgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgc2NyaXB0ICYmIHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcblxuICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgaW5mbyA9ICdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc3R5bGUsIG51bGwpIHx8IHN0eWxlLmN1cnJlbnRTdHlsZTtcblxuICAgIHN0eWxlTWVkaWEgPSB7XG4gICAgICBtYXRjaE1lZGl1bTogZnVuY3Rpb24gbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSAnQG1lZGlhICcgKyBtZWRpYSArICd7ICNtYXRjaG1lZGlhanMtdGVzdCB7IHdpZHRoOiAxcHg7IH0gfSc7XG5cbiAgICAgICAgLy8gJ3N0eWxlLnN0eWxlU2hlZXQnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3N0eWxlLnRleHRDb250ZW50JyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgICAgICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZXN0IGlmIG1lZGlhIHF1ZXJ5IGlzIHRydWUgb3IgZmFsc2VcbiAgICAgICAgcmV0dXJuIGluZm8ud2lkdGggPT09ICcxcHgnO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG1lZGlhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hdGNoZXM6IHN0eWxlTWVkaWEubWF0Y2hNZWRpdW0obWVkaWEgfHwgJ2FsbCcpLFxuICAgICAgbWVkaWE6IG1lZGlhIHx8ICdhbGwnXG4gICAgfTtcbiAgfTtcbn0oKTtcblxudmFyIE1lZGlhUXVlcnkgPSB7XG4gIHF1ZXJpZXM6IFtdLFxuXG4gIGN1cnJlbnQ6ICcnLFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbWVkaWEgcXVlcnkgaGVscGVyLCBieSBleHRyYWN0aW5nIHRoZSBicmVha3BvaW50IGxpc3QgZnJvbSB0aGUgQ1NTIGFuZCBhY3RpdmF0aW5nIHRoZSBicmVha3BvaW50IHdhdGNoZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQ6IGZ1bmN0aW9uIF9pbml0KCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgJG1ldGEgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ21ldGEuZm91bmRhdGlvbi1tcScpO1xuICAgIGlmICghJG1ldGEubGVuZ3RoKSB7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJzxtZXRhIGNsYXNzPVwiZm91bmRhdGlvbi1tcVwiPicpLmFwcGVuZFRvKGRvY3VtZW50LmhlYWQpO1xuICAgIH1cblxuICAgIHZhciBleHRyYWN0ZWRTdHlsZXMgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJy5mb3VuZGF0aW9uLW1xJykuY3NzKCdmb250LWZhbWlseScpO1xuICAgIHZhciBuYW1lZFF1ZXJpZXM7XG5cbiAgICBuYW1lZFF1ZXJpZXMgPSBwYXJzZVN0eWxlVG9PYmplY3QoZXh0cmFjdGVkU3R5bGVzKTtcblxuICAgIGZvciAodmFyIGtleSBpbiBuYW1lZFF1ZXJpZXMpIHtcbiAgICAgIGlmIChuYW1lZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiAnb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICcgKyBuYW1lZFF1ZXJpZXNba2V5XSArICcpJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpO1xuXG4gICAgdGhpcy5fd2F0Y2hlcigpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2NyZWVuIGlzIGF0IGxlYXN0IGFzIHdpZGUgYXMgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQncyBzbWFsbGVyLlxuICAgKi9cbiAgYXRMZWFzdDogZnVuY3Rpb24gYXRMZWFzdChzaXplKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5nZXQoc2l6ZSk7XG5cbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIHJldHVybiBtYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNjcmVlbiBtYXRjaGVzIHRvIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBjaGVjaywgZWl0aGVyICdzbWFsbCBvbmx5JyBvciAnc21hbGwnLiBPbWl0dGluZyAnb25seScgZmFsbHMgYmFjayB0byB1c2luZyBhdExlYXN0KCkgbWV0aG9kLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQgZG9lcyBub3QuXG4gICAqL1xuICBpczogZnVuY3Rpb24gaXMoc2l6ZSkge1xuICAgIHNpemUgPSBzaXplLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgIGlmIChzaXplLmxlbmd0aCA+IDEgJiYgc2l6ZVsxXSA9PT0gJ29ubHknKSB7XG4gICAgICBpZiAoc2l6ZVswXSA9PT0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKSkgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmF0TGVhc3Qoc2l6ZVswXSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBtZWRpYSBxdWVyeSBvZiBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfG51bGx9IC0gVGhlIG1lZGlhIHF1ZXJ5IG9mIHRoZSBicmVha3BvaW50LCBvciBgbnVsbGAgaWYgdGhlIGJyZWFrcG9pbnQgZG9lc24ndCBleGlzdC5cbiAgICovXG4gIGdldDogZnVuY3Rpb24gZ2V0KHNpemUpIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMucXVlcmllcykge1xuICAgICAgaWYgKHRoaXMucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJpZXNbaV07XG4gICAgICAgIGlmIChzaXplID09PSBxdWVyeS5uYW1lKSByZXR1cm4gcXVlcnkudmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBicmVha3BvaW50IG5hbWUgYnkgdGVzdGluZyBldmVyeSBicmVha3BvaW50IGFuZCByZXR1cm5pbmcgdGhlIGxhc3Qgb25lIHRvIG1hdGNoICh0aGUgYmlnZ2VzdCBvbmUpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge1N0cmluZ30gTmFtZSBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgX2dldEN1cnJlbnRTaXplOiBmdW5jdGlvbiBfZ2V0Q3VycmVudFNpemUoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAobWF0Y2hNZWRpYShxdWVyeS52YWx1ZSkubWF0Y2hlcykge1xuICAgICAgICBtYXRjaGVkID0gcXVlcnk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCh0eXBlb2YgbWF0Y2hlZCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobWF0Y2hlZCkpID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIG1hdGNoZWQubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1hdGNoZWQ7XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLCB3aGljaCBmaXJlcyBhbiBldmVudCBvbiB0aGUgd2luZG93IHdoZW5ldmVyIHRoZSBicmVha3BvaW50IGNoYW5nZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dhdGNoZXI6IGZ1bmN0aW9uIF93YXRjaGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vZmYoJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5Jykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5ld1NpemUgPSBfdGhpcy5fZ2V0Q3VycmVudFNpemUoKSxcbiAgICAgICAgICBjdXJyZW50U2l6ZSA9IF90aGlzLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChuZXdTaXplICE9PSBjdXJyZW50U2l6ZSkge1xuICAgICAgICAvLyBDaGFuZ2UgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnlcbiAgICAgICAgX3RoaXMuY3VycmVudCA9IG5ld1NpemU7XG5cbiAgICAgICAgLy8gQnJvYWRjYXN0IHRoZSBtZWRpYSBxdWVyeSBjaGFuZ2Ugb24gdGhlIHdpbmRvd1xuICAgICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS50cmlnZ2VyKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBbbmV3U2l6ZSwgY3VycmVudFNpemVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLy8gVGhhbmsgeW91OiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZ1xuZnVuY3Rpb24gcGFyc2VTdHlsZVRvT2JqZWN0KHN0cikge1xuICB2YXIgc3R5bGVPYmplY3QgPSB7fTtcblxuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHIgPSBzdHIudHJpbSgpLnNsaWNlKDEsIC0xKTsgLy8gYnJvd3NlcnMgcmUtcXVvdGUgc3RyaW5nIHN0eWxlIHZhbHVlc1xuXG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHN0eWxlT2JqZWN0O1xuICB9XG5cbiAgc3R5bGVPYmplY3QgPSBzdHIuc3BsaXQoJyYnKS5yZWR1Y2UoZnVuY3Rpb24gKHJldCwgcGFyYW0pIHtcbiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuICAgIHZhciBrZXkgPSBwYXJ0c1swXTtcbiAgICB2YXIgdmFsID0gcGFydHNbMV07XG4gICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG5cbiAgICAvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuICAgIC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcbiAgICB2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQodmFsKTtcblxuICAgIGlmICghcmV0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldFtrZXldID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRba2V5XSkpIHtcbiAgICAgIHJldFtrZXldLnB1c2godmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0W2tleV0gPSBbcmV0W2tleV0sIHZhbF07XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gc3R5bGVPYmplY3Q7XG59XG5cbmV4cG9ydHMuTWVkaWFRdWVyeSA9IE1lZGlhUXVlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVp2ZFc1a1lYUnBiMjR1ZFhScGJDNXRaV1JwWVZGMVpYSjVMbXB6SWwwc0ltNWhiV1Z6SWpwYkltUmxabUYxYkhSUmRXVnlhV1Z6SWl3aWJHRnVaSE5qWVhCbElpd2ljRzl5ZEhKaGFYUWlMQ0p5WlhScGJtRWlMQ0p0WVhSamFFMWxaR2xoSWl3aWQybHVaRzkzSWl3aWMzUjViR1ZOWldScFlTSXNJbTFsWkdsaElpd2ljM1I1YkdVaUxDSmtiMk4xYldWdWRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnpZM0pwY0hRaUxDSm5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU0lzSW1sdVptOGlMQ0owZVhCbElpd2lhV1FpTENKd1lYSmxiblJPYjJSbElpd2lhVzV6WlhKMFFtVm1iM0psSWl3aVoyVjBRMjl0Y0hWMFpXUlRkSGxzWlNJc0ltTjFjbkpsYm5SVGRIbHNaU0lzSW0xaGRHTm9UV1ZrYVhWdElpd2lkR1Y0ZENJc0luTjBlV3hsVTJobFpYUWlMQ0pqYzNOVVpYaDBJaXdpZEdWNGRFTnZiblJsYm5RaUxDSjNhV1IwYUNJc0ltMWhkR05vWlhNaUxDSk5aV1JwWVZGMVpYSjVJaXdpY1hWbGNtbGxjeUlzSW1OMWNuSmxiblFpTENKZmFXNXBkQ0lzSW5ObGJHWWlMQ0lrYldWMFlTSXNJbXhsYm1kMGFDSXNJbUZ3Y0dWdVpGUnZJaXdpYUdWaFpDSXNJbVY0ZEhKaFkzUmxaRk4wZVd4bGN5SXNJbU56Y3lJc0ltNWhiV1ZrVVhWbGNtbGxjeUlzSW5CaGNuTmxVM1I1YkdWVWIwOWlhbVZqZENJc0ltdGxlU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpY0hWemFDSXNJbTVoYldVaUxDSjJZV3gxWlNJc0lsOW5aWFJEZFhKeVpXNTBVMmw2WlNJc0lsOTNZWFJqYUdWeUlpd2lZWFJNWldGemRDSXNJbk5wZW1VaUxDSnhkV1Z5ZVNJc0ltZGxkQ0lzSW1seklpd2lkSEpwYlNJc0luTndiR2wwSWl3aWFTSXNJbTFoZEdOb1pXUWlMQ0p2Wm1ZaUxDSnZiaUlzSW01bGQxTnBlbVVpTENKamRYSnlaVzUwVTJsNlpTSXNJblJ5YVdkblpYSWlMQ0p6ZEhJaUxDSnpkSGxzWlU5aWFtVmpkQ0lzSW5Oc2FXTmxJaXdpY21Wa2RXTmxJaXdpY21WMElpd2ljR0Z5WVcwaUxDSndZWEowY3lJc0luSmxjR3hoWTJVaUxDSjJZV3dpTENKa1pXTnZaR1ZWVWtsRGIyMXdiMjVsYm5RaUxDSjFibVJsWm1sdVpXUWlMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN096czdRVUZGUVRzN096czdPMEZCUlVFN1FVRkRRU3hKUVVGTlFTeHBRa0ZCYVVJN1FVRkRja0lzWVVGQldTeGhRVVJUTzBGQlJYSkNReXhoUVVGWkxEQkRRVVpUTzBGQlIzSkNReXhaUVVGWExIbERRVWhWTzBGQlNYSkNReXhWUVVGVExIbEVRVU5RTEcxRVFVUlBMRWRCUlZBc2JVUkJSazhzUjBGSFVDdzRRMEZJVHl4SFFVbFFMREpEUVVwUExFZEJTMUE3UVVGVWJVSXNRMEZCZGtJN08wRkJZVUU3UVVGRFFUdEJRVU5CTEVsQlFVbERMR0ZCUVdGRExFOUJRVTlFTEZWQlFWQXNTVUZCYzBJc1dVRkJWenRCUVVOb1JEczdRVUZGUVRzN1FVRkRRU3hOUVVGSlJTeGhRVUZqUkN4UFFVRlBReXhWUVVGUUxFbEJRWEZDUkN4UFFVRlBSU3hMUVVFNVF6czdRVUZGUVR0QlFVTkJMRTFCUVVrc1EwRkJRMFFzVlVGQlRDeEZRVUZwUWp0QlFVTm1MRkZCUVVsRkxGRkJRVlZETEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzVDBGQmRrSXNRMEZCWkR0QlFVRkJMRkZCUTBGRExGTkJRV05HTEZOQlFWTkhMRzlDUVVGVUxFTkJRVGhDTEZGQlFUbENMRVZCUVhkRExFTkJRWGhETEVOQlJHUTdRVUZCUVN4UlFVVkJReXhQUVVGakxFbEJSbVE3TzBGQlNVRk1MRlZCUVUxTkxFbEJRVTRzUjBGQll5eFZRVUZrTzBGQlEwRk9MRlZCUVUxUExFVkJRVTRzUjBGQll5eHRRa0ZCWkRzN1FVRkZRVW9zWTBGQlZVRXNUMEZCVDBzc1ZVRkJha0lzU1VGQkswSk1MRTlCUVU5TExGVkJRVkFzUTBGQmEwSkRMRmxCUVd4Q0xFTkJRU3RDVkN4TFFVRXZRaXhGUVVGelEwY3NUVUZCZEVNc1EwRkJMMEk3TzBGQlJVRTdRVUZEUVVVc1YwRkJVU3h6UWtGQmMwSlNMRTFCUVhaQ0xFbEJRV3REUVN4UFFVRlBZU3huUWtGQlVDeERRVUYzUWxZc1MwRkJlRUlzUlVGQkswSXNTVUZCTDBJc1EwRkJiRU1zU1VGQk1FVkJMRTFCUVUxWExGbEJRWFpHT3p0QlFVVkJZaXhwUWtGQllUdEJRVU5ZWXl4cFFrRkVWeXgxUWtGRFEySXNTMEZFUkN4RlFVTlJPMEZCUTJwQ0xGbEJRVWxqTEcxQ1FVRnBRbVFzUzBGQmFrSXNNa05CUVVvN08wRkJSVUU3UVVGRFFTeFpRVUZKUXl4TlFVRk5ZeXhWUVVGV0xFVkJRWE5DTzBGQlEzQkNaQ3huUWtGQlRXTXNWVUZCVGl4RFFVRnBRa01zVDBGQmFrSXNSMEZCTWtKR0xFbEJRVE5DTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB4aUxHZENRVUZOWjBJc1YwRkJUaXhIUVVGdlFrZ3NTVUZCY0VJN1FVRkRSRHM3UVVGRlJEdEJRVU5CTEdWQlFVOVNMRXRCUVV0WkxFdEJRVXdzUzBGQlpTeExRVUYwUWp0QlFVTkVPMEZCWWxVc1MwRkJZanRCUVdWRU96dEJRVVZFTEZOQlFVOHNWVUZCVTJ4Q0xFdEJRVlFzUlVGQlowSTdRVUZEY2tJc1YwRkJUenRCUVVOTWJVSXNaVUZCVTNCQ0xGZEJRVmRqTEZkQlFWZ3NRMEZCZFVKaUxGTkJRVk1zUzBGQmFFTXNRMEZFU2p0QlFVVk1RU3hoUVVGUFFTeFRRVUZUTzBGQlJsZ3NTMEZCVUR0QlFVbEVMRWRCVEVRN1FVRk5SQ3hEUVRORGNVTXNSVUZCZEVNN08wRkJOa05CTEVsQlFVbHZRaXhoUVVGaE8wRkJRMlpETEZkQlFWTXNSVUZFVFRzN1FVRkhaa01zVjBGQlV5eEZRVWhOT3p0QlFVdG1PenM3T3p0QlFVdEJReXhQUVZabExHMUNRVlZRTzBGQlEwNHNVVUZCU1VNc1QwRkJUeXhKUVVGWU8wRkJRMEVzVVVGQlNVTXNVVUZCVVN4elFrRkJSU3h2UWtGQlJpeERRVUZhTzBGQlEwRXNVVUZCUnl4RFFVRkRRU3hOUVVGTlF5eE5RVUZXTEVWQlFXbENPMEZCUTJZc05FSkJRVVVzT0VKQlFVWXNSVUZCYTBORExGRkJRV3hETEVOQlFUSkRla0lzVTBGQlV6QkNMRWxCUVhCRU8wRkJRMFE3TzBGQlJVUXNVVUZCU1VNc2EwSkJRV3RDTEhOQ1FVRkZMR2RDUVVGR0xFVkJRVzlDUXl4SFFVRndRaXhEUVVGM1FpeGhRVUY0UWl4RFFVRjBRanRCUVVOQkxGRkJRVWxETEZsQlFVbzdPMEZCUlVGQkxHMUNRVUZsUXl4dFFrRkJiVUpJTEdWQlFXNUNMRU5CUVdZN08wRkJSVUVzVTBGQlN5eEpRVUZKU1N4SFFVRlVMRWxCUVdkQ1JpeFpRVUZvUWl4RlFVRTRRanRCUVVNMVFpeFZRVUZIUVN4aFFVRmhSeXhqUVVGaUxFTkJRVFJDUkN4SFFVRTFRaXhEUVVGSUxFVkJRWEZETzBGQlEyNURWQ3hoUVVGTFNDeFBRVUZNTEVOQlFXRmpMRWxCUVdJc1EwRkJhMEk3UVVGRGFFSkRMR2RDUVVGTlNDeEhRVVJWTzBGQlJXaENTU3hyUkVGQmMwTk9MR0ZCUVdGRkxFZEJRV0lzUTBGQmRFTTdRVUZHWjBJc1UwRkJiRUk3UVVGSlJEdEJRVU5HT3p0QlFVVkVMRk5CUVV0WUxFOUJRVXdzUjBGQlpTeExRVUZMWjBJc1pVRkJUQ3hGUVVGbU96dEJRVVZCTEZOQlFVdERMRkZCUVV3N1FVRkRSQ3hIUVd4RFl6czdPMEZCYjBObU96czdPenM3UVVGTlFVTXNVMEV4UTJVc2JVSkJNRU5RUXl4SlFURkRUeXhGUVRCRFJEdEJRVU5hTEZGQlFVbERMRkZCUVZFc1MwRkJTME1zUjBGQlRDeERRVUZUUml4SlFVRlVMRU5CUVZvN08wRkJSVUVzVVVGQlNVTXNTMEZCU2l4RlFVRlhPMEZCUTFRc1lVRkJUemRETEZkQlFWYzJReXhMUVVGWUxFVkJRV3RDZGtJc1QwRkJla0k3UVVGRFJEczdRVUZGUkN4WFFVRlBMRXRCUVZBN1FVRkRSQ3hIUVd4RVl6czdPMEZCYjBSbU96czdPenM3UVVGTlFYbENMRWxCTVVSbExHTkJNRVJhU0N4SlFURkVXU3hGUVRCRVRqdEJRVU5RUVN4WFFVRlBRU3hMUVVGTFNTeEpRVUZNTEVkQlFWbERMRXRCUVZvc1EwRkJhMElzUjBGQmJFSXNRMEZCVUR0QlFVTkJMRkZCUVVkTUxFdEJRVXRtTEUxQlFVd3NSMEZCWXl4RFFVRmtMRWxCUVcxQ1pTeExRVUZMTEVOQlFVd3NUVUZCV1N4TlFVRnNReXhGUVVFd1F6dEJRVU40UXl4VlFVRkhRU3hMUVVGTExFTkJRVXdzVFVGQldTeExRVUZMU0N4bFFVRk1MRVZCUVdZc1JVRkJkVU1zVDBGQlR5eEpRVUZRTzBGQlEzaERMRXRCUmtRc1RVRkZUenRCUVVOTUxHRkJRVThzUzBGQlMwVXNUMEZCVEN4RFFVRmhReXhMUVVGTExFTkJRVXdzUTBGQllpeERRVUZRTzBGQlEwUTdRVUZEUkN4WFFVRlBMRXRCUVZBN1FVRkRSQ3hIUVd4Rll6czdPMEZCYjBWbU96czdPenM3UVVGTlFVVXNTMEV4UldVc1pVRXdSVmhHTEVsQk1VVlhMRVZCTUVWTU8wRkJRMUlzVTBGQlN5eEpRVUZKVFN4RFFVRlVMRWxCUVdNc1MwRkJTekZDTEU5QlFXNUNMRVZCUVRSQ08wRkJRekZDTEZWQlFVY3NTMEZCUzBFc1QwRkJUQ3hEUVVGaFlTeGpRVUZpTEVOQlFUUkNZU3hEUVVFMVFpeERRVUZJTEVWQlFXMURPMEZCUTJwRExGbEJRVWxNTEZGQlFWRXNTMEZCUzNKQ0xFOUJRVXdzUTBGQllUQkNMRU5CUVdJc1EwRkJXanRCUVVOQkxGbEJRVWxPTEZOQlFWTkRMRTFCUVUxT0xFbEJRVzVDTEVWQlFYbENMRTlCUVU5TkxFMUJRVTFNTEV0QlFXSTdRVUZETVVJN1FVRkRSanM3UVVGRlJDeFhRVUZQTEVsQlFWQTdRVUZEUkN4SFFXNUdZenM3TzBGQmNVWm1PenM3T3pzN1FVRk5RVU1zYVVKQk0wWmxMRFpDUVRKR1J6dEJRVU5vUWl4UlFVRkpWU3hQUVVGS096dEJRVVZCTEZOQlFVc3NTVUZCU1VRc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpMRXRCUVVzeFFpeFBRVUZNTEVOQlFXRkxMRTFCUVdwRExFVkJRWGxEY1VJc1IwRkJla01zUlVGQk9FTTdRVUZETlVNc1ZVRkJTVXdzVVVGQlVTeExRVUZMY2tJc1QwRkJUQ3hEUVVGaE1FSXNRMEZCWWl4RFFVRmFPenRCUVVWQkxGVkJRVWxzUkN4WFFVRlhOa01zVFVGQlRVd3NTMEZCYWtJc1JVRkJkMEpzUWl4UFFVRTFRaXhGUVVGeFF6dEJRVU51UXpaQ0xHdENRVUZWVGl4TFFVRldPMEZCUTBRN1FVRkRSanM3UVVGRlJDeFJRVUZKTEZGQlFVOU5MRTlCUVZBc2VVTkJRVTlCTEU5QlFWQXNUMEZCYlVJc1VVRkJka0lzUlVGQmFVTTdRVUZETDBJc1lVRkJUMEVzVVVGQlVWb3NTVUZCWmp0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTUxHRkJRVTlaTEU5QlFWQTdRVUZEUkR0QlFVTkdMRWRCTTBkak96czdRVUUyUjJZN096czdPMEZCUzBGVUxGVkJiRWhsTEhOQ1FXdElTanRCUVVGQk96dEJRVU5VTERCQ1FVRkZla01zVFVGQlJpeEZRVUZWYlVRc1IwRkJWaXhEUVVGakxITkNRVUZrTEVWQlFYTkRReXhGUVVGMFF5eERRVUY1UXl4elFrRkJla01zUlVGQmFVVXNXVUZCVFR0QlFVTnlSU3hWUVVGSlF5eFZRVUZWTEUxQlFVdGlMR1ZCUVV3c1JVRkJaRHRCUVVGQkxGVkJRWE5EWXl4alFVRmpMRTFCUVVzNVFpeFBRVUY2UkRzN1FVRkZRU3hWUVVGSk5rSXNXVUZCV1VNc1YwRkJhRUlzUlVGQk5rSTdRVUZETTBJN1FVRkRRU3hqUVVGTE9VSXNUMEZCVEN4SFFVRmxOa0lzVDBGQlpqczdRVUZGUVR0QlFVTkJMRGhDUVVGRmNrUXNUVUZCUml4RlFVRlZkVVFzVDBGQlZpeERRVUZyUWl4MVFrRkJiRUlzUlVGQk1rTXNRMEZCUTBZc1QwRkJSQ3hGUVVGVlF5eFhRVUZXTEVOQlFUTkRPMEZCUTBRN1FVRkRSaXhMUVZaRU8wRkJWMFE3UVVFNVNHTXNRMEZCYWtJN08wRkJiVWxCTzBGQlEwRXNVMEZCVTNCQ0xHdENRVUZVTEVOQlFUUkNjMElzUjBGQk5VSXNSVUZCYVVNN1FVRkRMMElzVFVGQlNVTXNZMEZCWXl4RlFVRnNRanM3UVVGRlFTeE5RVUZKTEU5QlFVOUVMRWRCUVZBc1MwRkJaU3hSUVVGdVFpeEZRVUUyUWp0QlFVTXpRaXhYUVVGUFF5eFhRVUZRTzBGQlEwUTdPMEZCUlVSRUxGRkJRVTFCTEVsQlFVbFVMRWxCUVVvc1IwRkJWMWNzUzBGQldDeERRVUZwUWl4RFFVRnFRaXhGUVVGdlFpeERRVUZETEVOQlFYSkNMRU5CUVU0c1EwRlFLMElzUTBGUFFUczdRVUZGTDBJc1RVRkJTU3hEUVVGRFJpeEhRVUZNTEVWQlFWVTdRVUZEVWl4WFFVRlBReXhYUVVGUU8wRkJRMFE3TzBGQlJVUkJMR2RDUVVGalJDeEpRVUZKVWl4TFFVRktMRU5CUVZVc1IwRkJWaXhGUVVGbFZ5eE5RVUZtTEVOQlFYTkNMRlZCUVZORExFZEJRVlFzUlVGQlkwTXNTMEZCWkN4RlFVRnhRanRCUVVOMlJDeFJRVUZKUXl4UlFVRlJSQ3hOUVVGTlJTeFBRVUZPTEVOQlFXTXNTMEZCWkN4RlFVRnhRaXhIUVVGeVFpeEZRVUV3UW1Zc1MwRkJNVUlzUTBGQlowTXNSMEZCYUVNc1EwRkJXanRCUVVOQkxGRkJRVWxpTEUxQlFVMHlRaXhOUVVGTkxFTkJRVTRzUTBGQlZqdEJRVU5CTEZGQlFVbEZMRTFCUVUxR0xFMUJRVTBzUTBGQlRpeERRVUZXTzBGQlEwRXpRaXhWUVVGTk9FSXNiVUpCUVcxQ09VSXNSMEZCYmtJc1EwRkJUanM3UVVGRlFUdEJRVU5CTzBGQlEwRTJRaXhWUVVGTlFTeFJRVUZSUlN4VFFVRlNMRWRCUVc5Q0xFbEJRWEJDTEVkQlFUSkNSQ3h0UWtGQmJVSkVMRWRCUVc1Q0xFTkJRV3BET3p0QlFVVkJMRkZCUVVrc1EwRkJRMG9zU1VGQlNYaENMR05CUVVvc1EwRkJiVUpFTEVkQlFXNUNMRU5CUVV3c1JVRkJPRUk3UVVGRE5VSjVRaXhWUVVGSmVrSXNSMEZCU2l4SlFVRlhOa0lzUjBGQldEdEJRVU5FTEV0QlJrUXNUVUZGVHl4SlFVRkpSeXhOUVVGTlF5eFBRVUZPTEVOQlFXTlNMRWxCUVVsNlFpeEhRVUZLTEVOQlFXUXNRMEZCU2l4RlFVRTJRanRCUVVOc1EzbENMRlZCUVVsNlFpeEhRVUZLTEVWQlFWTkZMRWxCUVZRc1EwRkJZekpDTEVkQlFXUTdRVUZEUkN4TFFVWk5MRTFCUlVFN1FVRkRURW9zVlVGQlNYcENMRWRCUVVvc1NVRkJWeXhEUVVGRGVVSXNTVUZCU1hwQ0xFZEJRVW9zUTBGQlJDeEZRVUZYTmtJc1IwRkJXQ3hEUVVGWU8wRkJRMFE3UVVGRFJDeFhRVUZQU2l4SFFVRlFPMEZCUTBRc1IwRnNRbUVzUlVGclFsZ3NSVUZzUWxjc1EwRkJaRHM3UVVGdlFrRXNVMEZCVDBnc1YwRkJVRHRCUVVORU96dFJRVVZQYmtNc1ZTeEhRVUZCUVN4Vklpd2labWxzWlNJNkltWnZkVzVrWVhScGIyNHVkWFJwYkM1dFpXUnBZVkYxWlhKNUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwYlhCdmNuUWdKQ0JtY205dElDZHFjWFZsY25rbk8xeHVYRzR2THlCRVpXWmhkV3gwSUhObGRDQnZaaUJ0WldScFlTQnhkV1Z5YVdWelhHNWpiMjV6ZENCa1pXWmhkV3gwVVhWbGNtbGxjeUE5SUh0Y2JpQWdKMlJsWm1GMWJIUW5JRG9nSjI5dWJIa2djMk55WldWdUp5eGNiaUFnYkdGdVpITmpZWEJsSURvZ0oyOXViSGtnYzJOeVpXVnVJR0Z1WkNBb2IzSnBaVzUwWVhScGIyNDZJR3hoYm1SelkyRndaU2tuTEZ4dUlDQndiM0owY21GcGRDQTZJQ2R2Ym14NUlITmpjbVZsYmlCaGJtUWdLRzl5YVdWdWRHRjBhVzl1T2lCd2IzSjBjbUZwZENrbkxGeHVJQ0J5WlhScGJtRWdPaUFuYjI1c2VTQnpZM0psWlc0Z1lXNWtJQ2d0ZDJWaWEybDBMVzFwYmkxa1pYWnBZMlV0Y0dsNFpXd3RjbUYwYVc4NklESXBMQ2NnSzF4dUlDQWdJQ2R2Ym14NUlITmpjbVZsYmlCaGJtUWdLRzFwYmkwdGJXOTZMV1JsZG1salpTMXdhWGhsYkMxeVlYUnBiem9nTWlrc0p5QXJYRzRnSUNBZ0oyOXViSGtnYzJOeVpXVnVJR0Z1WkNBb0xXOHRiV2x1TFdSbGRtbGpaUzF3YVhobGJDMXlZWFJwYnpvZ01pOHhLU3duSUN0Y2JpQWdJQ0FuYjI1c2VTQnpZM0psWlc0Z1lXNWtJQ2h0YVc0dFpHVjJhV05sTFhCcGVHVnNMWEpoZEdsdk9pQXlLU3duSUN0Y2JpQWdJQ0FuYjI1c2VTQnpZM0psWlc0Z1lXNWtJQ2h0YVc0dGNtVnpiMngxZEdsdmJqb2dNVGt5WkhCcEtTd25JQ3RjYmlBZ0lDQW5iMjVzZVNCelkzSmxaVzRnWVc1a0lDaHRhVzR0Y21WemIyeDFkR2x2YmpvZ01tUndjSGdwSjF4dUlDQjlPMXh1WEc1Y2JpOHZJRzFoZEdOb1RXVmthV0VvS1NCd2IyeDVabWxzYkNBdElGUmxjM1FnWVNCRFUxTWdiV1ZrYVdFZ2RIbHdaUzl4ZFdWeWVTQnBiaUJLVXk1Y2JpOHZJRUYxZEdodmNuTWdKaUJqYjNCNWNtbG5hSFFnS0dNcElESXdNVEk2SUZOamIzUjBJRXBsYUd3c0lGQmhkV3dnU1hKcGMyZ3NJRTVwWTJodmJHRnpJRnBoYTJGekxDQkVZWFpwWkNCTGJtbG5hSFF1SUVSMVlXd2dUVWxVTDBKVFJDQnNhV05sYm5ObFhHNXNaWFFnYldGMFkyaE5aV1JwWVNBOUlIZHBibVJ2ZHk1dFlYUmphRTFsWkdsaElIeDhJQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdKM1Z6WlNCemRISnBZM1FuTzF4dVhHNGdJQzh2SUVadmNpQmljbTkzYzJWeWN5QjBhR0YwSUhOMWNIQnZjblFnYldGMFkyaE5aV1JwZFcwZ1lYQnBJSE4xWTJnZ1lYTWdTVVVnT1NCaGJtUWdkMlZpYTJsMFhHNGdJSFpoY2lCemRIbHNaVTFsWkdsaElEMGdLSGRwYm1SdmR5NXpkSGxzWlUxbFpHbGhJSHg4SUhkcGJtUnZkeTV0WldScFlTazdYRzVjYmlBZ0x5OGdSbTl5SUhSb2IzTmxJSFJvWVhRZ1pHOXVKM1FnYzNWd2NHOXlkQ0J0WVhSamFFMWxaR2wxYlZ4dUlDQnBaaUFvSVhOMGVXeGxUV1ZrYVdFcElIdGNiaUFnSUNCMllYSWdjM1I1YkdVZ0lDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozTjBlV3hsSnlrc1hHNGdJQ0FnYzJOeWFYQjBJQ0FnSUNBZ1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU2duYzJOeWFYQjBKeWxiTUYwc1hHNGdJQ0FnYVc1bWJ5QWdJQ0FnSUNBZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnYzNSNWJHVXVkSGx3WlNBZ1BTQW5kR1Y0ZEM5amMzTW5PMXh1SUNBZ0lITjBlV3hsTG1sa0lDQWdJRDBnSjIxaGRHTm9iV1ZrYVdGcWN5MTBaWE4wSnp0Y2JseHVJQ0FnSUhOamNtbHdkQ0FtSmlCelkzSnBjSFF1Y0dGeVpXNTBUbTlrWlNBbUppQnpZM0pwY0hRdWNHRnlaVzUwVG05a1pTNXBibk5sY25SQ1pXWnZjbVVvYzNSNWJHVXNJSE5qY21sd2RDazdYRzVjYmlBZ0lDQXZMeUFuYzNSNWJHVXVZM1Z5Y21WdWRGTjBlV3hsSnlCcGN5QjFjMlZrSUdKNUlFbEZJRHc5SURnZ1lXNWtJQ2QzYVc1a2IzY3VaMlYwUTI5dGNIVjBaV1JUZEhsc1pTY2dabTl5SUdGc2JDQnZkR2hsY2lCaWNtOTNjMlZ5YzF4dUlDQWdJR2x1Wm04Z1BTQW9KMmRsZEVOdmJYQjFkR1ZrVTNSNWJHVW5JR2x1SUhkcGJtUnZkeWtnSmlZZ2QybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvYzNSNWJHVXNJRzUxYkd3cElIeDhJSE4wZVd4bExtTjFjbkpsYm5SVGRIbHNaVHRjYmx4dUlDQWdJSE4wZVd4bFRXVmthV0VnUFNCN1hHNGdJQ0FnSUNCdFlYUmphRTFsWkdsMWJTaHRaV1JwWVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZEdWNGRDQTlJR0JBYldWa2FXRWdKSHR0WldScFlYMTdJQ050WVhSamFHMWxaR2xoYW5NdGRHVnpkQ0I3SUhkcFpIUm9PaUF4Y0hnN0lIMGdmV0E3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdKM04wZVd4bExuTjBlV3hsVTJobFpYUW5JR2x6SUhWelpXUWdZbmtnU1VVZ1BEMGdPQ0JoYm1RZ0ozTjBlV3hsTG5SbGVIUkRiMjUwWlc1MEp5Qm1iM0lnWVd4c0lHOTBhR1Z5SUdKeWIzZHpaWEp6WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkSGxzWlM1emRIbHNaVk5vWldWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYzNSNWJHVXVjM1I1YkdWVGFHVmxkQzVqYzNOVVpYaDBJRDBnZEdWNGREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEhsc1pTNTBaWGgwUTI5dWRHVnVkQ0E5SUhSbGVIUTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlVaWE4wSUdsbUlHMWxaR2xoSUhGMVpYSjVJR2x6SUhSeWRXVWdiM0lnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVabTh1ZDJsa2RHZ2dQVDA5SUNjeGNIZ25PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaHRaV1JwWVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0J0WVhSamFHVnpPaUJ6ZEhsc1pVMWxaR2xoTG0xaGRHTm9UV1ZrYVhWdEtHMWxaR2xoSUh4OElDZGhiR3duS1N4Y2JpQWdJQ0FnSUcxbFpHbGhPaUJ0WldScFlTQjhmQ0FuWVd4c0oxeHVJQ0FnSUgwN1hHNGdJSDFjYm4wcEtDazdYRzVjYm5aaGNpQk5aV1JwWVZGMVpYSjVJRDBnZTF4dUlDQnhkV1Z5YVdWek9pQmJYU3hjYmx4dUlDQmpkWEp5Wlc1ME9pQW5KeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElHMWxaR2xoSUhGMVpYSjVJR2hsYkhCbGNpd2dZbmtnWlhoMGNtRmpkR2x1WnlCMGFHVWdZbkpsWVd0d2IybHVkQ0JzYVhOMElHWnliMjBnZEdobElFTlRVeUJoYm1RZ1lXTjBhWFpoZEdsdVp5QjBhR1VnWW5KbFlXdHdiMmx1ZENCM1lYUmphR1Z5TGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjlwYm1sMEtDa2dlMXh1SUNBZ0lIWmhjaUJ6Wld4bUlEMGdkR2hwY3p0Y2JpQWdJQ0IyWVhJZ0pHMWxkR0VnUFNBa0tDZHRaWFJoTG1admRXNWtZWFJwYjI0dGJYRW5LVHRjYmlBZ0lDQnBaaWdoSkcxbGRHRXViR1Z1WjNSb0tYdGNiaUFnSUNBZ0lDUW9Kenh0WlhSaElHTnNZWE56UFZ3aVptOTFibVJoZEdsdmJpMXRjVndpUGljcExtRndjR1Z1WkZSdktHUnZZM1Z0Wlc1MExtaGxZV1FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCbGVIUnlZV04wWldSVGRIbHNaWE1nUFNBa0tDY3VabTkxYm1SaGRHbHZiaTF0Y1NjcExtTnpjeWduWm05dWRDMW1ZVzFwYkhrbktUdGNiaUFnSUNCMllYSWdibUZ0WldSUmRXVnlhV1Z6TzF4dVhHNGdJQ0FnYm1GdFpXUlJkV1Z5YVdWeklEMGdjR0Z5YzJWVGRIbHNaVlJ2VDJKcVpXTjBLR1Y0ZEhKaFkzUmxaRk4wZVd4bGN5azdYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2JtRnRaV1JSZFdWeWFXVnpLU0I3WEc0Z0lDQWdJQ0JwWmlodVlXMWxaRkYxWlhKcFpYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCelpXeG1MbkYxWlhKcFpYTXVjSFZ6YUNoN1hHNGdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ2EyVjVMRnh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJnYjI1c2VTQnpZM0psWlc0Z1lXNWtJQ2h0YVc0dGQybGtkR2c2SUNSN2JtRnRaV1JSZFdWeWFXVnpXMnRsZVYxOUtXQmNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1amRYSnlaVzUwSUQwZ2RHaHBjeTVmWjJWMFEzVnljbVZ1ZEZOcGVtVW9LVHRjYmx4dUlDQWdJSFJvYVhNdVgzZGhkR05vWlhJb0tUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJobFkydHpJR2xtSUhSb1pTQnpZM0psWlc0Z2FYTWdZWFFnYkdWaGMzUWdZWE1nZDJsa1pTQmhjeUJoSUdKeVpXRnJjRzlwYm5RdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdjMmw2WlNBdElFNWhiV1VnYjJZZ2RHaGxJR0p5WldGcmNHOXBiblFnZEc4Z1kyaGxZMnN1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRDYjI5c1pXRnVmU0JnZEhKMVpXQWdhV1lnZEdobElHSnlaV0ZyY0c5cGJuUWdiV0YwWTJobGN5d2dZR1poYkhObFlDQnBaaUJwZENkeklITnRZV3hzWlhJdVhHNGdJQ0FxTDF4dUlDQmhkRXhsWVhOMEtITnBlbVVwSUh0Y2JpQWdJQ0IyWVhJZ2NYVmxjbmtnUFNCMGFHbHpMbWRsZENoemFYcGxLVHRjYmx4dUlDQWdJR2xtSUNoeGRXVnllU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzFoZEdOb1RXVmthV0VvY1hWbGNua3BMbTFoZEdOb1pYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGFHVmphM01nYVdZZ2RHaGxJSE5qY21WbGJpQnRZWFJqYUdWeklIUnZJR0VnWW5KbFlXdHdiMmx1ZEM1Y2JpQWdJQ29nUUdaMWJtTjBhVzl1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnphWHBsSUMwZ1RtRnRaU0J2WmlCMGFHVWdZbkpsWVd0d2IybHVkQ0IwYnlCamFHVmpheXdnWldsMGFHVnlJQ2R6YldGc2JDQnZibXg1SnlCdmNpQW5jMjFoYkd3bkxpQlBiV2wwZEdsdVp5QW5iMjVzZVNjZ1ptRnNiSE1nWW1GamF5QjBieUIxYzJsdVp5QmhkRXhsWVhOMEtDa2diV1YwYUc5a0xseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1FtOXZiR1ZoYm4wZ1lIUnlkV1ZnSUdsbUlIUm9aU0JpY21WaGEzQnZhVzUwSUcxaGRHTm9aWE1zSUdCbVlXeHpaV0FnYVdZZ2FYUWdaRzlsY3lCdWIzUXVYRzRnSUNBcUwxeHVJQ0JwY3loemFYcGxLU0I3WEc0Z0lDQWdjMmw2WlNBOUlITnBlbVV1ZEhKcGJTZ3BMbk53YkdsMEtDY2dKeWs3WEc0Z0lDQWdhV1lvYzJsNlpTNXNaVzVuZEdnZ1BpQXhJQ1ltSUhOcGVtVmJNVjBnUFQwOUlDZHZibXg1SnlrZ2UxeHVJQ0FnSUNBZ2FXWW9jMmw2WlZzd1hTQTlQVDBnZEdocGN5NWZaMlYwUTNWeWNtVnVkRk5wZW1Vb0tTa2djbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUYwVEdWaGMzUW9jMmw2WlZzd1hTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMGN5QjBhR1VnYldWa2FXRWdjWFZsY25rZ2IyWWdZU0JpY21WaGEzQnZhVzUwTGx4dUlDQWdLaUJBWm5WdVkzUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlITnBlbVVnTFNCT1lXMWxJRzltSUhSb1pTQmljbVZoYTNCdmFXNTBJSFJ2SUdkbGRDNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxTjBjbWx1WjN4dWRXeHNmU0F0SUZSb1pTQnRaV1JwWVNCeGRXVnllU0J2WmlCMGFHVWdZbkpsWVd0d2IybHVkQ3dnYjNJZ1lHNTFiR3hnSUdsbUlIUm9aU0JpY21WaGEzQnZhVzUwSUdSdlpYTnVKM1FnWlhocGMzUXVYRzRnSUNBcUwxeHVJQ0JuWlhRb2MybDZaU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnYVc0Z2RHaHBjeTV4ZFdWeWFXVnpLU0I3WEc0Z0lDQWdJQ0JwWmloMGFHbHpMbkYxWlhKcFpYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2FTa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIRjFaWEo1SUQwZ2RHaHBjeTV4ZFdWeWFXVnpXMmxkTzF4dUlDQWdJQ0FnSUNCcFppQW9jMmw2WlNBOVBUMGdjWFZsY25rdWJtRnRaU2tnY21WMGRYSnVJSEYxWlhKNUxuWmhiSFZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFJ6SUhSb1pTQmpkWEp5Wlc1MElHSnlaV0ZyY0c5cGJuUWdibUZ0WlNCaWVTQjBaWE4wYVc1bklHVjJaWEo1SUdKeVpXRnJjRzlwYm5RZ1lXNWtJSEpsZEhWeWJtbHVaeUIwYUdVZ2JHRnpkQ0J2Ym1VZ2RHOGdiV0YwWTJnZ0tIUm9aU0JpYVdkblpYTjBJRzl1WlNrdVhHNGdJQ0FxSUVCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVM1J5YVc1bmZTQk9ZVzFsSUc5bUlIUm9aU0JqZFhKeVpXNTBJR0p5WldGcmNHOXBiblF1WEc0Z0lDQXFMMXh1SUNCZloyVjBRM1Z5Y21WdWRGTnBlbVVvS1NCN1hHNGdJQ0FnZG1GeUlHMWhkR05vWldRN1hHNWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11Y1hWbGNtbGxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEYxWlhKNUlEMGdkR2hwY3k1eGRXVnlhV1Z6VzJsZE8xeHVYRzRnSUNBZ0lDQnBaaUFvYldGMFkyaE5aV1JwWVNoeGRXVnllUzUyWVd4MVpTa3ViV0YwWTJobGN5a2dlMXh1SUNBZ0lDQWdJQ0J0WVhSamFHVmtJRDBnY1hWbGNuazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnRZWFJqYUdWa0lEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzFoZEdOb1pXUXVibUZ0WlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHMWhkR05vWldRN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJZM1JwZG1GMFpYTWdkR2hsSUdKeVpXRnJjRzlwYm5RZ2QyRjBZMmhsY2l3Z2QyaHBZMmdnWm1seVpYTWdZVzRnWlhabGJuUWdiMjRnZEdobElIZHBibVJ2ZHlCM2FHVnVaWFpsY2lCMGFHVWdZbkpsWVd0d2IybHVkQ0JqYUdGdVoyVnpMbHh1SUNBZ0tpQkFablZ1WTNScGIyNWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOTNZWFJqYUdWeUtDa2dlMXh1SUNBZ0lDUW9kMmx1Wkc5M0tTNXZabVlvSjNKbGMybDZaUzU2Wmk1dFpXUnBZWEYxWlhKNUp5a3ViMjRvSjNKbGMybDZaUzU2Wmk1dFpXUnBZWEYxWlhKNUp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RtRnlJRzVsZDFOcGVtVWdQU0IwYUdsekxsOW5aWFJEZFhKeVpXNTBVMmw2WlNncExDQmpkWEp5Wlc1MFUybDZaU0E5SUhSb2FYTXVZM1Z5Y21WdWREdGNibHh1SUNBZ0lDQWdhV1lnS0c1bGQxTnBlbVVnSVQwOUlHTjFjbkpsYm5SVGFYcGxLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFTm9ZVzVuWlNCMGFHVWdZM1Z5Y21WdWRDQnRaV1JwWVNCeGRXVnllVnh1SUNBZ0lDQWdJQ0IwYUdsekxtTjFjbkpsYm5RZ1BTQnVaWGRUYVhwbE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVKeWIyRmtZMkZ6ZENCMGFHVWdiV1ZrYVdFZ2NYVmxjbmtnWTJoaGJtZGxJRzl1SUhSb1pTQjNhVzVrYjNkY2JpQWdJQ0FnSUNBZ0pDaDNhVzVrYjNjcExuUnlhV2RuWlhJb0oyTm9ZVzVuWldRdWVtWXViV1ZrYVdGeGRXVnllU2NzSUZ0dVpYZFRhWHBsTENCamRYSnlaVzUwVTJsNlpWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlPMXh1WEc1Y2JseHVMeThnVkdoaGJtc2dlVzkxT2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmMybHVaSEpsYzI5eWFIVnpMM0YxWlhKNUxYTjBjbWx1WjF4dVpuVnVZM1JwYjI0Z2NHRnljMlZUZEhsc1pWUnZUMkpxWldOMEtITjBjaWtnZTF4dUlDQjJZWElnYzNSNWJHVlBZbXBsWTNRZ1BTQjdmVHRjYmx4dUlDQnBaaUFvZEhsd1pXOW1JSE4wY2lBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQnlaWFIxY200Z2MzUjViR1ZQWW1wbFkzUTdYRzRnSUgxY2JseHVJQ0J6ZEhJZ1BTQnpkSEl1ZEhKcGJTZ3BMbk5zYVdObEtERXNJQzB4S1RzZ0x5OGdZbkp2ZDNObGNuTWdjbVV0Y1hWdmRHVWdjM1J5YVc1bklITjBlV3hsSUhaaGJIVmxjMXh1WEc0Z0lHbG1JQ2doYzNSeUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMGVXeGxUMkpxWldOME8xeHVJQ0I5WEc1Y2JpQWdjM1I1YkdWUFltcGxZM1FnUFNCemRISXVjM0JzYVhRb0p5WW5LUzV5WldSMVkyVW9ablZ1WTNScGIyNG9jbVYwTENCd1lYSmhiU2tnZTF4dUlDQWdJSFpoY2lCd1lYSjBjeUE5SUhCaGNtRnRMbkpsY0d4aFkyVW9MMXhjS3k5bkxDQW5JQ2NwTG5Od2JHbDBLQ2M5SnlrN1hHNGdJQ0FnZG1GeUlHdGxlU0E5SUhCaGNuUnpXekJkTzF4dUlDQWdJSFpoY2lCMllXd2dQU0J3WVhKMGMxc3hYVHRjYmlBZ0lDQnJaWGtnUFNCa1pXTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2EyVjVLVHRjYmx4dUlDQWdJQzh2SUcxcGMzTnBibWNnWUQxZ0lITm9iM1ZzWkNCaVpTQmdiblZzYkdBNlhHNGdJQ0FnTHk4Z2FIUjBjRG92TDNjekxtOXlaeTlVVWk4eU1ERXlMMWRFTFhWeWJDMHlNREV5TURVeU5DOGpZMjlzYkdWamRDMTFjbXd0Y0dGeVlXMWxkR1Z5YzF4dUlDQWdJSFpoYkNBOUlIWmhiQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdiblZzYkNBNklHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaDJZV3dwTzF4dVhHNGdJQ0FnYVdZZ0tDRnlaWFF1YUdGelQzZHVVSEp2Y0dWeWRIa29hMlY1S1NrZ2UxeHVJQ0FnSUNBZ2NtVjBXMnRsZVYwZ1BTQjJZV3c3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtISmxkRnRyWlhsZEtTa2dlMXh1SUNBZ0lDQWdjbVYwVzJ0bGVWMHVjSFZ6YUNoMllXd3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUmJhMlY1WFNBOUlGdHlaWFJiYTJWNVhTd2dkbUZzWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlISmxkRHRjYmlBZ2ZTd2dlMzBwTzF4dVhHNGdJSEpsZEhWeWJpQnpkSGxzWlU5aWFtVmpkRHRjYm4xY2JseHVaWGh3YjNKMElIdE5aV1JwWVZGMVpYSjVmVHRjYmlKZGZRPT1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnkuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTW90aW9uID0gZXhwb3J0cy5Nb3ZlID0gdW5kZWZpbmVkO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2ZvdW5kYXRpb25VdGlsID0gcmVxdWlyZSgnLi9mb3VuZGF0aW9uLnV0aWwuY29yZScpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIE1vdGlvbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubW90aW9uXG4gKi9cblxudmFyIGluaXRDbGFzc2VzID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG52YXIgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbnZhciBNb3Rpb24gPSB7XG4gIGFuaW1hdGVJbjogZnVuY3Rpb24gYW5pbWF0ZUluKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uIGFuaW1hdGVPdXQoZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICAgIGFuaW1hdGUoZmFsc2UsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbikge1xuICB2YXIgYW5pbSxcbiAgICAgIHByb2csXG4gICAgICBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICBmbi5hcHBseShlbGVtKTtcbiAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlKHRzKSB7XG4gICAgaWYgKCFzdGFydCkgc3RhcnQgPSB0cztcbiAgICAvLyBjb25zb2xlLmxvZyhzdGFydCwgdHMpO1xuICAgIHByb2cgPSB0cyAtIHN0YXJ0O1xuICAgIGZuLmFwcGx5KGVsZW0pO1xuXG4gICAgaWYgKHByb2cgPCBkdXJhdGlvbikge1xuICAgICAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSwgZWxlbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltKTtcbiAgICAgIGVsZW0udHJpZ2dlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSkudHJpZ2dlckhhbmRsZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pO1xuICAgIH1cbiAgfVxuICBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlKTtcbn1cblxuLyoqXG4gKiBBbmltYXRlcyBhbiBlbGVtZW50IGluIG9yIG91dCB1c2luZyBhIENTUyB0cmFuc2l0aW9uIGNsYXNzLlxuICogQGZ1bmN0aW9uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCb29sZWFufSBpc0luIC0gRGVmaW5lcyBpZiB0aGUgYW5pbWF0aW9uIGlzIGluIG9yIG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9yIEhUTUwgb2JqZWN0IHRvIGFuaW1hdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gYW5pbWF0aW9uIC0gQ1NTIGNsYXNzIHRvIHVzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQ2FsbGJhY2sgdG8gcnVuIHdoZW4gYW5pbWF0aW9uIGlzIGZpbmlzaGVkLlxuICovXG5mdW5jdGlvbiBhbmltYXRlKGlzSW4sIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgZWxlbWVudCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShlbGVtZW50KS5lcSgwKTtcblxuICBpZiAoIWVsZW1lbnQubGVuZ3RoKSByZXR1cm47XG5cbiAgdmFyIGluaXRDbGFzcyA9IGlzSW4gPyBpbml0Q2xhc3Nlc1swXSA6IGluaXRDbGFzc2VzWzFdO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0luID8gYWN0aXZlQ2xhc3Nlc1swXSA6IGFjdGl2ZUNsYXNzZXNbMV07XG5cbiAgLy8gU2V0IHVwIHRoZSBhbmltYXRpb25cbiAgcmVzZXQoKTtcblxuICBlbGVtZW50LmFkZENsYXNzKGFuaW1hdGlvbikuY3NzKCd0cmFuc2l0aW9uJywgJ25vbmUnKTtcblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIGVsZW1lbnQuYWRkQ2xhc3MoaW5pdENsYXNzKTtcbiAgICBpZiAoaXNJbikgZWxlbWVudC5zaG93KCk7XG4gIH0pO1xuXG4gIC8vIFN0YXJ0IHRoZSBhbmltYXRpb25cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICBlbGVtZW50WzBdLm9mZnNldFdpZHRoO1xuICAgIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgJycpLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKCgwLCBfZm91bmRhdGlvblV0aWwudHJhbnNpdGlvbmVuZCkoZWxlbWVudCksIGZpbmlzaCk7XG5cbiAgLy8gSGlkZXMgdGhlIGVsZW1lbnQgKGZvciBvdXQgYW5pbWF0aW9ucyksIHJlc2V0cyB0aGUgZWxlbWVudCwgYW5kIHJ1bnMgYSBjYWxsYmFja1xuICBmdW5jdGlvbiBmaW5pc2goKSB7XG4gICAgaWYgKCFpc0luKSBlbGVtZW50LmhpZGUoKTtcbiAgICByZXNldCgpO1xuICAgIGlmIChjYikgY2IuYXBwbHkoZWxlbWVudCk7XG4gIH1cblxuICAvLyBSZXNldHMgdHJhbnNpdGlvbnMgYW5kIHJlbW92ZXMgbW90aW9uLXNwZWNpZmljIGNsYXNzZXNcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgZWxlbWVudFswXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoaW5pdENsYXNzICsgJyAnICsgYWN0aXZlQ2xhc3MgKyAnICcgKyBhbmltYXRpb24pO1xuICB9XG59XG5cbmV4cG9ydHMuTW92ZSA9IE1vdmU7XG5leHBvcnRzLk1vdGlvbiA9IE1vdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltWnZkVzVrWVhScGIyNHVkWFJwYkM1dGIzUnBiMjR1YW5NaVhTd2libUZ0WlhNaU9sc2lhVzVwZEVOc1lYTnpaWE1pTENKaFkzUnBkbVZEYkdGemMyVnpJaXdpVFc5MGFXOXVJaXdpWVc1cGJXRjBaVWx1SWl3aVpXeGxiV1Z1ZENJc0ltRnVhVzFoZEdsdmJpSXNJbU5pSWl3aVlXNXBiV0YwWlNJc0ltRnVhVzFoZEdWUGRYUWlMQ0pOYjNabElpd2laSFZ5WVhScGIyNGlMQ0psYkdWdElpd2labTRpTENKaGJtbHRJaXdpY0hKdlp5SXNJbk4wWVhKMElpd2lZWEJ3YkhraUxDSjBjbWxuWjJWeUlpd2lkSEpwWjJkbGNraGhibVJzWlhJaUxDSnRiM1psSWl3aWRITWlMQ0ozYVc1a2IzY2lMQ0p5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVaUxDSmpZVzVqWld4QmJtbHRZWFJwYjI1R2NtRnRaU0lzSW1selNXNGlMQ0psY1NJc0lteGxibWQwYUNJc0ltbHVhWFJEYkdGemN5SXNJbUZqZEdsMlpVTnNZWE56SWl3aWNtVnpaWFFpTENKaFpHUkRiR0Z6Y3lJc0ltTnpjeUlzSW5Ob2IzY2lMQ0p2Wm1aelpYUlhhV1IwYUNJc0ltOXVaU0lzSW1acGJtbHphQ0lzSW1ocFpHVWlMQ0p6ZEhsc1pTSXNJblJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiaUlzSW5KbGJXOTJaVU5zWVhOeklsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdPenM3T3p0QlFVVkJPenM3TzBGQlEwRTdPenM3UVVGRlFUczdPenM3UVVGTFFTeEpRVUZOUVN4alFVRm5RaXhEUVVGRExGZEJRVVFzUlVGQll5eFhRVUZrTEVOQlFYUkNPMEZCUTBFc1NVRkJUVU1zWjBKQlFXZENMRU5CUVVNc2EwSkJRVVFzUlVGQmNVSXNhMEpCUVhKQ0xFTkJRWFJDT3p0QlFVVkJMRWxCUVUxRExGTkJRVk03UVVGRFlrTXNZVUZCVnl4dFFrRkJVME1zVDBGQlZDeEZRVUZyUWtNc1UwRkJiRUlzUlVGQk5rSkRMRVZCUVRkQ0xFVkJRV2xETzBGQlF6RkRReXhaUVVGUkxFbEJRVklzUlVGQlkwZ3NUMEZCWkN4RlFVRjFRa01zVTBGQmRrSXNSVUZCYTBORExFVkJRV3hETzBGQlEwUXNSMEZJV1RzN1FVRkxZa1VzWTBGQldTeHZRa0ZCVTBvc1QwRkJWQ3hGUVVGclFrTXNVMEZCYkVJc1JVRkJOa0pETEVWQlFUZENMRVZCUVdsRE8wRkJRek5EUXl4WlFVRlJMRXRCUVZJc1JVRkJaVWdzVDBGQlppeEZRVUYzUWtNc1UwRkJlRUlzUlVGQmJVTkRMRVZCUVc1RE8wRkJRMFE3UVVGUVdTeERRVUZtT3p0QlFWVkJMRk5CUVZOSExFbEJRVlFzUTBGQlkwTXNVVUZCWkN4RlFVRjNRa01zU1VGQmVFSXNSVUZCT0VKRExFVkJRVGxDTEVWQlFXbERPMEZCUXk5Q0xFMUJRVWxETEVsQlFVbzdRVUZCUVN4TlFVRlZReXhKUVVGV08wRkJRVUVzVFVGQlowSkRMRkZCUVZFc1NVRkJlRUk3UVVGRFFUczdRVUZGUVN4TlFVRkpUQ3hoUVVGaExFTkJRV3BDTEVWQlFXOUNPMEZCUTJ4Q1JTeFBRVUZIU1N4TFFVRklMRU5CUVZOTUxFbEJRVlE3UVVGRFFVRXNVMEZCUzAwc1QwRkJUQ3hEUVVGaExIRkNRVUZpTEVWQlFXOURMRU5CUVVOT0xFbEJRVVFzUTBGQmNFTXNSVUZCTkVOUExHTkJRVFZETEVOQlFUSkVMSEZDUVVFelJDeEZRVUZyUml4RFFVRkRVQ3hKUVVGRUxFTkJRV3hHTzBGQlEwRTdRVUZEUkRzN1FVRkZSQ3hYUVVGVFVTeEpRVUZVTEVOQlFXTkRMRVZCUVdRc1JVRkJhVUk3UVVGRFppeFJRVUZITEVOQlFVTk1MRXRCUVVvc1JVRkJWMEVzVVVGQlVVc3NSVUZCVWp0QlFVTllPMEZCUTBGT0xGZEJRVTlOTEV0QlFVdE1MRXRCUVZvN1FVRkRRVWdzVDBGQlIwa3NTMEZCU0N4RFFVRlRUQ3hKUVVGVU96dEJRVVZCTEZGQlFVZEhMRTlCUVU5S0xGRkJRVllzUlVGQmJVSTdRVUZCUlVjc1lVRkJUMUVzVDBGQlQwTXNjVUpCUVZBc1EwRkJOa0pJTEVsQlFUZENMRVZCUVcxRFVpeEpRVUZ1UXl4RFFVRlFPMEZCUVd0RUxFdEJRWFpGTEUxQlEwazdRVUZEUmxVc1lVRkJUMFVzYjBKQlFWQXNRMEZCTkVKV0xFbEJRVFZDTzBGQlEwRkdMRmRCUVV0TkxFOUJRVXdzUTBGQllTeHhRa0ZCWWl4RlFVRnZReXhEUVVGRFRpeEpRVUZFTEVOQlFYQkRMRVZCUVRSRFR5eGpRVUUxUXl4RFFVRXlSQ3h4UWtGQk0wUXNSVUZCYTBZc1EwRkJRMUFzU1VGQlJDeERRVUZzUmp0QlFVTkVPMEZCUTBZN1FVRkRSRVVzVTBGQlQxRXNUMEZCVDBNc2NVSkJRVkFzUTBGQk5rSklMRWxCUVRkQ0xFTkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3TzBGQlUwRXNVMEZCVTFvc1QwRkJWQ3hEUVVGcFFtbENMRWxCUVdwQ0xFVkJRWFZDY0VJc1QwRkJka0lzUlVGQlowTkRMRk5CUVdoRExFVkJRVEpEUXl4RlFVRXpReXhGUVVFclF6dEJRVU0zUTBZc1dVRkJWU3h6UWtGQlJVRXNUMEZCUml4RlFVRlhjVUlzUlVGQldDeERRVUZqTEVOQlFXUXNRMEZCVmpzN1FVRkZRU3hOUVVGSkxFTkJRVU55UWl4UlFVRlJjMElzVFVGQllpeEZRVUZ4UWpzN1FVRkZja0lzVFVGQlNVTXNXVUZCV1Vnc1QwRkJUM2hDTEZsQlFWa3NRMEZCV2l4RFFVRlFMRWRCUVhkQ1FTeFpRVUZaTEVOQlFWb3NRMEZCZUVNN1FVRkRRU3hOUVVGSk5FSXNZMEZCWTBvc1QwRkJUM1pDTEdOQlFXTXNRMEZCWkN4RFFVRlFMRWRCUVRCQ1FTeGpRVUZqTEVOQlFXUXNRMEZCTlVNN08wRkJSVUU3UVVGRFFUUkNPenRCUVVWQmVrSXNWVUZEUnpCQ0xGRkJSRWdzUTBGRFdYcENMRk5CUkZvc1JVRkZSekJDTEVkQlJrZ3NRMEZGVHl4WlFVWlFMRVZCUlhGQ0xFMUJSbkpDT3p0QlFVbEJWQ3gzUWtGQmMwSXNXVUZCVFR0QlFVTXhRbXhDTEZsQlFWRXdRaXhSUVVGU0xFTkJRV2xDU0N4VFFVRnFRanRCUVVOQkxGRkJRVWxJTEVsQlFVb3NSVUZCVlhCQ0xGRkJRVkUwUWl4SlFVRlNPMEZCUTFnc1IwRklSRHM3UVVGTFFUdEJRVU5CVml4M1FrRkJjMElzV1VGQlRUdEJRVU14UW14Q0xGbEJRVkVzUTBGQlVpeEZRVUZYTmtJc1YwRkJXRHRCUVVOQk4wSXNXVUZEUnpKQ0xFZEJSRWdzUTBGRFR5eFpRVVJRTEVWQlEzRkNMRVZCUkhKQ0xFVkJSVWRFTEZGQlJrZ3NRMEZGV1VZc1YwRkdXanRCUVVkRUxFZEJURVE3TzBGQlQwRTdRVUZEUVhoQ0xGVkJRVkU0UWl4SFFVRlNMRU5CUVZrc2JVTkJRV001UWl4UFFVRmtMRU5CUVZvc1JVRkJiME1yUWl4TlFVRndRenM3UVVGRlFUdEJRVU5CTEZkQlFWTkJMRTFCUVZRc1IwRkJhMEk3UVVGRGFFSXNVVUZCU1N4RFFVRkRXQ3hKUVVGTUxFVkJRVmR3UWl4UlFVRlJaME1zU1VGQlVqdEJRVU5ZVUR0QlFVTkJMRkZCUVVsMlFpeEZRVUZLTEVWQlFWRkJMRWRCUVVkVkxFdEJRVWdzUTBGQlUxb3NUMEZCVkR0QlFVTlVPenRCUVVWRU8wRkJRMEVzVjBGQlUzbENMRXRCUVZRc1IwRkJhVUk3UVVGRFpucENMRmxCUVZFc1EwRkJVaXhGUVVGWGFVTXNTMEZCV0N4RFFVRnBRa01zYTBKQlFXcENMRWRCUVhORExFTkJRWFJETzBGQlEwRnNReXhaUVVGUmJVTXNWMEZCVWl4RFFVRjFRbG9zVTBGQmRrSXNVMEZCYjBORExGZEJRWEJETEZOQlFXMUVka0lzVTBGQmJrUTdRVUZEUkR0QlFVTkdPenRSUVVWUFNTeEpMRWRCUVVGQkxFazdVVUZCVFZBc1RTeEhRVUZCUVN4Tklpd2labWxzWlNJNkltWnZkVzVrWVhScGIyNHVkWFJwYkM1dGIzUnBiMjR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbHRjRzl5ZENBa0lHWnliMjBnSjJweGRXVnllU2M3WEc1cGJYQnZjblFnZXlCMGNtRnVjMmwwYVc5dVpXNWtJSDBnWm5KdmJTQW5MaTltYjNWdVpHRjBhVzl1TG5WMGFXd3VZMjl5WlNjN1hHNWNiaThxS2x4dUlDb2dUVzkwYVc5dUlHMXZaSFZzWlM1Y2JpQXFJRUJ0YjJSMWJHVWdabTkxYm1SaGRHbHZiaTV0YjNScGIyNWNiaUFxTDF4dVhHNWpiMjV6ZENCcGJtbDBRMnhoYzNObGN5QWdJRDBnV3lkdGRXa3RaVzUwWlhJbkxDQW5iWFZwTFd4bFlYWmxKMTA3WEc1amIyNXpkQ0JoWTNScGRtVkRiR0Z6YzJWeklEMGdXeWR0ZFdrdFpXNTBaWEl0WVdOMGFYWmxKeXdnSjIxMWFTMXNaV0YyWlMxaFkzUnBkbVVuWFR0Y2JseHVZMjl1YzNRZ1RXOTBhVzl1SUQwZ2UxeHVJQ0JoYm1sdFlYUmxTVzQ2SUdaMWJtTjBhVzl1S0dWc1pXMWxiblFzSUdGdWFXMWhkR2x2Yml3Z1kySXBJSHRjYmlBZ0lDQmhibWx0WVhSbEtIUnlkV1VzSUdWc1pXMWxiblFzSUdGdWFXMWhkR2x2Yml3Z1kySXBPMXh1SUNCOUxGeHVYRzRnSUdGdWFXMWhkR1ZQZFhRNklHWjFibU4wYVc5dUtHVnNaVzFsYm5Rc0lHRnVhVzFoZEdsdmJpd2dZMklwSUh0Y2JpQWdJQ0JoYm1sdFlYUmxLR1poYkhObExDQmxiR1Z0Wlc1MExDQmhibWx0WVhScGIyNHNJR05pS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQk5iM1psS0dSMWNtRjBhVzl1TENCbGJHVnRMQ0JtYmlsN1hHNGdJSFpoY2lCaGJtbHRMQ0J3Y205bkxDQnpkR0Z5ZENBOUlHNTFiR3c3WEc0Z0lDOHZJR052Ym5OdmJHVXViRzluS0NkallXeHNaV1FuS1R0Y2JseHVJQ0JwWmlBb1pIVnlZWFJwYjI0Z1BUMDlJREFwSUh0Y2JpQWdJQ0JtYmk1aGNIQnNlU2hsYkdWdEtUdGNiaUFnSUNCbGJHVnRMblJ5YVdkblpYSW9KMlpwYm1semFHVmtMbnBtTG1GdWFXMWhkR1VuTENCYlpXeGxiVjBwTG5SeWFXZG5aWEpJWVc1a2JHVnlLQ2RtYVc1cGMyaGxaQzU2Wmk1aGJtbHRZWFJsSnl3Z1cyVnNaVzFkS1R0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJ0YjNabEtIUnpLWHRjYmlBZ0lDQnBaaWdoYzNSaGNuUXBJSE4wWVhKMElEMGdkSE03WEc0Z0lDQWdMeThnWTI5dWMyOXNaUzVzYjJjb2MzUmhjblFzSUhSektUdGNiaUFnSUNCd2NtOW5JRDBnZEhNZ0xTQnpkR0Z5ZER0Y2JpQWdJQ0JtYmk1aGNIQnNlU2hsYkdWdEtUdGNibHh1SUNBZ0lHbG1LSEJ5YjJjZ1BDQmtkWEpoZEdsdmJpbDdJR0Z1YVcwZ1BTQjNhVzVrYjNjdWNtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLRzF2ZG1Vc0lHVnNaVzBwT3lCOVhHNGdJQ0FnWld4elpYdGNiaUFnSUNBZ0lIZHBibVJ2ZHk1allXNWpaV3hCYm1sdFlYUnBiMjVHY21GdFpTaGhibWx0S1R0Y2JpQWdJQ0FnSUdWc1pXMHVkSEpwWjJkbGNpZ25abWx1YVhOb1pXUXVlbVl1WVc1cGJXRjBaU2NzSUZ0bGJHVnRYU2t1ZEhKcFoyZGxja2hoYm1Sc1pYSW9KMlpwYm1semFHVmtMbnBtTG1GdWFXMWhkR1VuTENCYlpXeGxiVjBwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JoYm1sdElEMGdkMmx1Wkc5M0xuSmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2h0YjNabEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCQmJtbHRZWFJsY3lCaGJpQmxiR1Z0Wlc1MElHbHVJRzl5SUc5MWRDQjFjMmx1WnlCaElFTlRVeUIwY21GdWMybDBhVzl1SUdOc1lYTnpMbHh1SUNvZ1FHWjFibU4wYVc5dVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZlNCcGMwbHVJQzBnUkdWbWFXNWxjeUJwWmlCMGFHVWdZVzVwYldGMGFXOXVJR2x6SUdsdUlHOXlJRzkxZEM1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmxiR1Z0Wlc1MElDMGdhbEYxWlhKNUlHOXlJRWhVVFV3Z2IySnFaV04wSUhSdklHRnVhVzFoZEdVdVhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZVzVwYldGMGFXOXVJQzBnUTFOVElHTnNZWE56SUhSdklIVnpaUzVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmlJQzBnUTJGc2JHSmhZMnNnZEc4Z2NuVnVJSGRvWlc0Z1lXNXBiV0YwYVc5dUlHbHpJR1pwYm1semFHVmtMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmhibWx0WVhSbEtHbHpTVzRzSUdWc1pXMWxiblFzSUdGdWFXMWhkR2x2Yml3Z1kySXBJSHRjYmlBZ1pXeGxiV1Z1ZENBOUlDUW9aV3hsYldWdWRDa3VaWEVvTUNrN1hHNWNiaUFnYVdZZ0tDRmxiR1Z0Wlc1MExteGxibWQwYUNrZ2NtVjBkWEp1TzF4dVhHNGdJSFpoY2lCcGJtbDBRMnhoYzNNZ1BTQnBjMGx1SUQ4Z2FXNXBkRU5zWVhOelpYTmJNRjBnT2lCcGJtbDBRMnhoYzNObGMxc3hYVHRjYmlBZ2RtRnlJR0ZqZEdsMlpVTnNZWE56SUQwZ2FYTkpiaUEvSUdGamRHbDJaVU5zWVhOelpYTmJNRjBnT2lCaFkzUnBkbVZEYkdGemMyVnpXekZkTzF4dVhHNGdJQzh2SUZObGRDQjFjQ0IwYUdVZ1lXNXBiV0YwYVc5dVhHNGdJSEpsYzJWMEtDazdYRzVjYmlBZ1pXeGxiV1Z1ZEZ4dUlDQWdJQzVoWkdSRGJHRnpjeWhoYm1sdFlYUnBiMjRwWEc0Z0lDQWdMbU56Y3lnbmRISmhibk5wZEdsdmJpY3NJQ2R1YjI1bEp5azdYRzVjYmlBZ2NtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLQ2dwSUQwK0lIdGNiaUFnSUNCbGJHVnRaVzUwTG1Ga1pFTnNZWE56S0dsdWFYUkRiR0Z6Y3lrN1hHNGdJQ0FnYVdZZ0tHbHpTVzRwSUdWc1pXMWxiblF1YzJodmR5Z3BPMXh1SUNCOUtUdGNibHh1SUNBdkx5QlRkR0Z5ZENCMGFHVWdZVzVwYldGMGFXOXVYRzRnSUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTZ29LU0E5UGlCN1hHNGdJQ0FnWld4bGJXVnVkRnN3WFM1dlptWnpaWFJYYVdSMGFEdGNiaUFnSUNCbGJHVnRaVzUwWEc0Z0lDQWdJQ0F1WTNOektDZDBjbUZ1YzJsMGFXOXVKeXdnSnljcFhHNGdJQ0FnSUNBdVlXUmtRMnhoYzNNb1lXTjBhWFpsUTJ4aGMzTXBPMXh1SUNCOUtUdGNibHh1SUNBdkx5QkRiR1ZoYmlCMWNDQjBhR1VnWVc1cGJXRjBhVzl1SUhkb1pXNGdhWFFnWm1sdWFYTm9aWE5jYmlBZ1pXeGxiV1Z1ZEM1dmJtVW9kSEpoYm5OcGRHbHZibVZ1WkNobGJHVnRaVzUwS1N3Z1ptbHVhWE5vS1R0Y2JseHVJQ0F2THlCSWFXUmxjeUIwYUdVZ1pXeGxiV1Z1ZENBb1ptOXlJRzkxZENCaGJtbHRZWFJwYjI1ektTd2djbVZ6WlhSeklIUm9aU0JsYkdWdFpXNTBMQ0JoYm1RZ2NuVnVjeUJoSUdOaGJHeGlZV05yWEc0Z0lHWjFibU4wYVc5dUlHWnBibWx6YUNncElIdGNiaUFnSUNCcFppQW9JV2x6U1c0cElHVnNaVzFsYm5RdWFHbGtaU2dwTzF4dUlDQWdJSEpsYzJWMEtDazdYRzRnSUNBZ2FXWWdLR05pS1NCallpNWhjSEJzZVNobGJHVnRaVzUwS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRkpsYzJWMGN5QjBjbUZ1YzJsMGFXOXVjeUJoYm1RZ2NtVnRiM1psY3lCdGIzUnBiMjR0YzNCbFkybG1hV01nWTJ4aGMzTmxjMXh1SUNCbWRXNWpkR2x2YmlCeVpYTmxkQ2dwSUh0Y2JpQWdJQ0JsYkdWdFpXNTBXekJkTG5OMGVXeGxMblJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiaUE5SURBN1hHNGdJQ0FnWld4bGJXVnVkQzV5WlcxdmRtVkRiR0Z6Y3loZ0pIdHBibWwwUTJ4aGMzTjlJQ1I3WVdOMGFYWmxRMnhoYzNOOUlDUjdZVzVwYldGMGFXOXVmV0FwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCN1RXOTJaU3dnVFc5MGFXOXVmVHRjYmx4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLm1vdGlvbi5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5OZXN0ID0gdW5kZWZpbmVkO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTmVzdCA9IHtcbiAgRmVhdGhlcjogZnVuY3Rpb24gRmVhdGhlcihtZW51KSB7XG4gICAgdmFyIHR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd6Zic7XG5cbiAgICBtZW51LmF0dHIoJ3JvbGUnLCAnbWVudWJhcicpO1xuXG4gICAgdmFyIGl0ZW1zID0gbWVudS5maW5kKCdsaScpLmF0dHIoeyAncm9sZSc6ICdtZW51aXRlbScgfSksXG4gICAgICAgIHN1Yk1lbnVDbGFzcyA9ICdpcy0nICsgdHlwZSArICctc3VibWVudScsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IHN1Yk1lbnVDbGFzcyArICctaXRlbScsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gJ2lzLScgKyB0eXBlICsgJy1zdWJtZW51LXBhcmVudCcsXG4gICAgICAgIGFwcGx5QXJpYSA9IHR5cGUgIT09ICdhY2NvcmRpb24nOyAvLyBBY2NvcmRpb25zIGhhbmRsZSB0aGVpciBvd24gQVJJQSBhdHRyaXV0ZXMuXG5cbiAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkaXRlbSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGl0ZW0uY2hpbGRyZW4oJ3VsJyk7XG5cbiAgICAgIGlmICgkc3ViLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhoYXNTdWJDbGFzcyk7XG4gICAgICAgICRzdWIuYWRkQ2xhc3MoJ3N1Ym1lbnUgJyArIHN1Yk1lbnVDbGFzcykuYXR0cih7ICdkYXRhLXN1Ym1lbnUnOiAnJyB9KTtcbiAgICAgICAgaWYgKGFwcGx5QXJpYSkge1xuICAgICAgICAgICRpdGVtLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAkaXRlbS5jaGlsZHJlbignYTpmaXJzdCcpLnRleHQoKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIE5vdGU6ICBEcmlsbGRvd25zIGJlaGF2ZSBkaWZmZXJlbnRseSBpbiBob3cgdGhleSBoaWRlLCBhbmQgc28gbmVlZFxuICAgICAgICAgIC8vIGFkZGl0aW9uYWwgYXR0cmlidXRlcy4gIFdlIHNob3VsZCBsb29rIGlmIHRoaXMgcG9zc2libHkgb3Zlci1nZW5lcmFsaXplZFxuICAgICAgICAgIC8vIHV0aWxpdHkgKE5lc3QpIGlzIGFwcHJvcHJpYXRlIHdoZW4gd2UgcmV3b3JrIG1lbnVzIGluIDYuNFxuICAgICAgICAgIGlmICh0eXBlID09PSAnZHJpbGxkb3duJykge1xuICAgICAgICAgICAgJGl0ZW0uYXR0cih7ICdhcmlhLWV4cGFuZGVkJzogZmFsc2UgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICRzdWIuYWRkQ2xhc3MoJ3N1Ym1lbnUgJyArIHN1Yk1lbnVDbGFzcykuYXR0cih7XG4gICAgICAgICAgJ2RhdGEtc3VibWVudSc6ICcnLFxuICAgICAgICAgICdyb2xlJzogJ21lbnUnXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2RyaWxsZG93bicpIHtcbiAgICAgICAgICAkc3ViLmF0dHIoeyAnYXJpYS1oaWRkZW4nOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgkaXRlbS5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICRpdGVtLmFkZENsYXNzKCdpcy1zdWJtZW51LWl0ZW0gJyArIHN1Ykl0ZW1DbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH0sXG4gIEJ1cm46IGZ1bmN0aW9uIEJ1cm4obWVudSwgdHlwZSkge1xuICAgIHZhciAvL2l0ZW1zID0gbWVudS5maW5kKCdsaScpLFxuICAgIHN1Yk1lbnVDbGFzcyA9ICdpcy0nICsgdHlwZSArICctc3VibWVudScsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IHN1Yk1lbnVDbGFzcyArICctaXRlbScsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gJ2lzLScgKyB0eXBlICsgJy1zdWJtZW51LXBhcmVudCc7XG5cbiAgICBtZW51LmZpbmQoJz5saSwgLm1lbnUsIC5tZW51ID4gbGknKS5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnICcgKyBoYXNTdWJDbGFzcyArICcgaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlJykucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51JykuY3NzKCdkaXNwbGF5JywgJycpO1xuICB9XG59O1xuXG5leHBvcnRzLk5lc3QgPSBOZXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWRYUnBiQzV1WlhOMExtcHpJbDBzSW01aGJXVnpJanBiSWs1bGMzUWlMQ0pHWldGMGFHVnlJaXdpYldWdWRTSXNJblI1Y0dVaUxDSmhkSFJ5SWl3aWFYUmxiWE1pTENKbWFXNWtJaXdpYzNWaVRXVnVkVU5zWVhOeklpd2ljM1ZpU1hSbGJVTnNZWE56SWl3aWFHRnpVM1ZpUTJ4aGMzTWlMQ0poY0hCc2VVRnlhV0VpTENKbFlXTm9JaXdpSkdsMFpXMGlMQ0lrYzNWaUlpd2lZMmhwYkdSeVpXNGlMQ0pzWlc1bmRHZ2lMQ0poWkdSRGJHRnpjeUlzSW5SbGVIUWlMQ0p3WVhKbGJuUWlMQ0pDZFhKdUlpd2ljbVZ0YjNabFEyeGhjM01pTENKeVpXMXZkbVZCZEhSeUlpd2lZM056SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN096czdPenRCUVVWQk96czdPenM3UVVGRlFTeEpRVUZOUVN4UFFVRlBPMEZCUTFoRExGTkJSRmNzYlVKQlEwaERMRWxCUkVjc1JVRkRaMEk3UVVGQlFTeFJRVUZpUXl4SlFVRmhMSFZGUVVGT0xFbEJRVTA3TzBGQlEzcENSQ3hUUVVGTFJTeEpRVUZNTEVOQlFWVXNUVUZCVml4RlFVRnJRaXhUUVVGc1FqczdRVUZGUVN4UlFVRkpReXhSUVVGUlNDeExRVUZMU1N4SlFVRk1MRU5CUVZVc1NVRkJWaXhGUVVGblFrWXNTVUZCYUVJc1EwRkJjVUlzUlVGQlF5eFJRVUZSTEZWQlFWUXNSVUZCY2tJc1EwRkJXanRCUVVGQkxGRkJRMGxITEhWQ1FVRnhRa29zU1VGQmNrSXNZVUZFU2p0QlFVRkJMRkZCUlVsTExHVkJRV3RDUkN4WlFVRnNRaXhWUVVaS08wRkJRVUVzVVVGSFNVVXNjMEpCUVc5Q1RpeEpRVUZ3UWl4dlFrRklTanRCUVVGQkxGRkJTVWxQTEZsQlFXRlFMRk5CUVZNc1YwRktNVUlzUTBGSWVVSXNRMEZQWlRzN1FVRkZlRU5GTEZWQlFVMU5MRWxCUVU0c1EwRkJWeXhaUVVGWE8wRkJRM0JDTEZWQlFVbERMRkZCUVZFc2MwSkJRVVVzU1VGQlJpeERRVUZhTzBGQlFVRXNWVUZEU1VNc1QwRkJUMFFzVFVGQlRVVXNVVUZCVGl4RFFVRmxMRWxCUVdZc1EwRkVXRHM3UVVGSFFTeFZRVUZKUkN4TFFVRkxSU3hOUVVGVUxFVkJRV2xDTzBGQlEyWklMR05CUVUxSkxGRkJRVTRzUTBGQlpWQXNWMEZCWmp0QlFVTkJTU3hoUVVGTFJ5eFJRVUZNTEdOQlFYbENWQ3haUVVGNlFpeEZRVUY1UTBnc1NVRkJla01zUTBGQk9FTXNSVUZCUXl4blFrRkJaMElzUlVGQmFrSXNSVUZCT1VNN1FVRkRRU3haUVVGSFRTeFRRVUZJTEVWQlFXTTdRVUZEV2tVc1owSkJRVTFTTEVsQlFVNHNRMEZCVnp0QlFVTlVMRFpDUVVGcFFpeEpRVVJTTzBGQlJWUXNNRUpCUVdOUkxFMUJRVTFGTEZGQlFVNHNRMEZCWlN4VFFVRm1MRVZCUVRCQ1J5eEpRVUV4UWp0QlFVWk1MRmRCUVZnN1FVRkpRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGpRVUZIWkN4VFFVRlRMRmRCUVZvc1JVRkJlVUk3UVVGRGRrSlRMR3RDUVVGTlVpeEpRVUZPTEVOQlFWY3NSVUZCUXl4cFFrRkJhVUlzUzBGQmJFSXNSVUZCV0R0QlFVTkVPMEZCUTBZN1FVRkRSRk1zWVVGRFIwY3NVVUZFU0N4alFVTjFRbFFzV1VGRWRrSXNSVUZGUjBnc1NVRkdTQ3hEUVVWUk8wRkJRMG9zTUVKQlFXZENMRVZCUkZvN1FVRkZTaXhyUWtGQlVUdEJRVVpLTEZOQlJsSTdRVUZOUVN4WlFVRkhSQ3hUUVVGVExGZEJRVm9zUlVGQmVVSTdRVUZEZGtKVkxHVkJRVXRVTEVsQlFVd3NRMEZCVlN4RlFVRkRMR1ZCUVdVc1NVRkJhRUlzUlVGQlZqdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1ZVRkJTVkVzVFVGQlRVMHNUVUZCVGl4RFFVRmhMR2RDUVVGaUxFVkJRU3RDU0N4TlFVRnVReXhGUVVFeVF6dEJRVU42UTBnc1kwRkJUVWtzVVVGQlRpeHpRa0ZCYTBOU0xGbEJRV3hETzBGQlEwUTdRVUZEUml4TFFXcERSRHM3UVVGdFEwRTdRVUZEUkN4SFFUbERWVHRCUVdkRVdGY3NUVUZvUkZjc1owSkJaMFJPYWtJc1NVRm9SRTBzUlVGblJFRkRMRWxCYUVSQkxFVkJaMFJOTzBGQlEyWXNVVUZCU1R0QlFVTkJTU3d5UWtGQmNVSktMRWxCUVhKQ0xHRkJSRW83UVVGQlFTeFJRVVZKU3l4bFFVRnJRa1FzV1VGQmJFSXNWVUZHU2p0QlFVRkJMRkZCUjBsRkxITkNRVUZ2UWs0c1NVRkJjRUlzYjBKQlNFbzdPMEZCUzBGRUxGTkJRMGRKTEVsQlJFZ3NRMEZEVVN4M1FrRkVVaXhGUVVWSFl5eFhRVVpJTEVOQlJXdENZaXhaUVVac1FpeFRRVVZyUTBNc1dVRkdiRU1zVTBGRmEwUkRMRmRCUm14RUxIbERRVWRIV1N4VlFVaElMRU5CUjJNc1kwRklaQ3hGUVVjNFFrTXNSMEZJT1VJc1EwRkhhME1zVTBGSWJFTXNSVUZITmtNc1JVRklOME03UVVGTFJEdEJRVE5FVlN4RFFVRmlPenRSUVRoRVVYUkNMRWtzUjBGQlFVRXNTU0lzSW1acGJHVWlPaUptYjNWdVpHRjBhVzl1TG5WMGFXd3VibVZ6ZEM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhVzF3YjNKMElDUWdabkp2YlNBbmFuRjFaWEo1Snp0Y2JseHVZMjl1YzNRZ1RtVnpkQ0E5SUh0Y2JpQWdSbVZoZEdobGNpaHRaVzUxTENCMGVYQmxJRDBnSjNwbUp5a2dlMXh1SUNBZ0lHMWxiblV1WVhSMGNpZ25jbTlzWlNjc0lDZHRaVzUxWW1GeUp5azdYRzVjYmlBZ0lDQjJZWElnYVhSbGJYTWdQU0J0Wlc1MUxtWnBibVFvSjJ4cEp5a3VZWFIwY2loN0ozSnZiR1VuT2lBbmJXVnVkV2wwWlcwbmZTa3NYRzRnSUNBZ0lDQWdJSE4xWWsxbGJuVkRiR0Z6Y3lBOUlHQnBjeTBrZTNSNWNHVjlMWE4xWW0xbGJuVmdMRnh1SUNBZ0lDQWdJQ0J6ZFdKSmRHVnRRMnhoYzNNZ1BTQmdKSHR6ZFdKTlpXNTFRMnhoYzNOOUxXbDBaVzFnTEZ4dUlDQWdJQ0FnSUNCb1lYTlRkV0pEYkdGemN5QTlJR0JwY3kwa2UzUjVjR1Y5TFhOMVltMWxiblV0Y0dGeVpXNTBZQ3hjYmlBZ0lDQWdJQ0FnWVhCd2JIbEJjbWxoSUQwZ0tIUjVjR1VnSVQwOUlDZGhZMk52Y21ScGIyNG5LVHNnTHk4Z1FXTmpiM0prYVc5dWN5Qm9ZVzVrYkdVZ2RHaGxhWElnYjNkdUlFRlNTVUVnWVhSMGNtbDFkR1Z6TGx4dVhHNGdJQ0FnYVhSbGJYTXVaV0ZqYUNobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lIWmhjaUFrYVhSbGJTQTlJQ1FvZEdocGN5a3NYRzRnSUNBZ0lDQWdJQ0FnSkhOMVlpQTlJQ1JwZEdWdExtTm9hV3hrY21WdUtDZDFiQ2NwTzF4dVhHNGdJQ0FnSUNCcFppQW9KSE4xWWk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0pHbDBaVzB1WVdSa1EyeGhjM01vYUdGelUzVmlRMnhoYzNNcE8xeHVJQ0FnSUNBZ0lDQWtjM1ZpTG1Ga1pFTnNZWE56S0dCemRXSnRaVzUxSUNSN2MzVmlUV1Z1ZFVOc1lYTnpmV0FwTG1GMGRISW9leWRrWVhSaExYTjFZbTFsYm5Vbk9pQW5KMzBwTzF4dUlDQWdJQ0FnSUNCcFppaGhjSEJzZVVGeWFXRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBa2FYUmxiUzVoZEhSeUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNkaGNtbGhMV2hoYzNCdmNIVndKem9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkaGNtbGhMV3hoWW1Wc0p6b2dKR2wwWlcwdVkyaHBiR1J5Wlc0b0oyRTZabWx5YzNRbktTNTBaWGgwS0NsY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBdkx5Qk9iM1JsT2lBZ1JISnBiR3hrYjNkdWN5QmlaV2hoZG1VZ1pHbG1abVZ5Wlc1MGJIa2dhVzRnYUc5M0lIUm9aWGtnYUdsa1pTd2dZVzVrSUhOdklHNWxaV1JjYmlBZ0lDQWdJQ0FnSUNBdkx5QmhaR1JwZEdsdmJtRnNJR0YwZEhKcFluVjBaWE11SUNCWFpTQnphRzkxYkdRZ2JHOXZheUJwWmlCMGFHbHpJSEJ2YzNOcFlteDVJRzkyWlhJdFoyVnVaWEpoYkdsNlpXUmNiaUFnSUNBZ0lDQWdJQ0F2THlCMWRHbHNhWFI1SUNoT1pYTjBLU0JwY3lCaGNIQnliM0J5YVdGMFpTQjNhR1Z1SUhkbElISmxkMjl5YXlCdFpXNTFjeUJwYmlBMkxqUmNiaUFnSUNBZ0lDQWdJQ0JwWmloMGVYQmxJRDA5UFNBblpISnBiR3hrYjNkdUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pHbDBaVzB1WVhSMGNpaDdKMkZ5YVdFdFpYaHdZVzVrWldRbk9pQm1ZV3h6WlgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBa2MzVmlYRzRnSUNBZ0lDQWdJQ0FnTG1Ga1pFTnNZWE56S0dCemRXSnRaVzUxSUNSN2MzVmlUV1Z1ZFVOc1lYTnpmV0FwWEc0Z0lDQWdJQ0FnSUNBZ0xtRjBkSElvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKMlJoZEdFdGMzVmliV1Z1ZFNjNklDY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0ozSnZiR1VuT2lBbmJXVnVkU2RjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdhV1lvZEhsd1pTQTlQVDBnSjJSeWFXeHNaRzkzYmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FrYzNWaUxtRjBkSElvZXlkaGNtbGhMV2hwWkdSbGJpYzZJSFJ5ZFdWOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0pHbDBaVzB1Y0dGeVpXNTBLQ2RiWkdGMFlTMXpkV0p0Wlc1MVhTY3BMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FrYVhSbGJTNWhaR1JEYkdGemN5aGdhWE10YzNWaWJXVnVkUzFwZEdWdElDUjdjM1ZpU1hSbGJVTnNZWE56ZldBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlMRnh1WEc0Z0lFSjFjbTRvYldWdWRTd2dkSGx3WlNrZ2UxeHVJQ0FnSUhaaGNpQXZMMmwwWlcxeklEMGdiV1Z1ZFM1bWFXNWtLQ2RzYVNjcExGeHVJQ0FnSUNBZ0lDQnpkV0pOWlc1MVEyeGhjM01nUFNCZ2FYTXRKSHQwZVhCbGZTMXpkV0p0Wlc1MVlDeGNiaUFnSUNBZ0lDQWdjM1ZpU1hSbGJVTnNZWE56SUQwZ1lDUjdjM1ZpVFdWdWRVTnNZWE56ZlMxcGRHVnRZQ3hjYmlBZ0lDQWdJQ0FnYUdGelUzVmlRMnhoYzNNZ1BTQmdhWE10Skh0MGVYQmxmUzF6ZFdKdFpXNTFMWEJoY21WdWRHQTdYRzVjYmlBZ0lDQnRaVzUxWEc0Z0lDQWdJQ0F1Wm1sdVpDZ25QbXhwTENBdWJXVnVkU3dnTG0xbGJuVWdQaUJzYVNjcFhHNGdJQ0FnSUNBdWNtVnRiM1psUTJ4aGMzTW9ZQ1I3YzNWaVRXVnVkVU5zWVhOemZTQWtlM04xWWtsMFpXMURiR0Z6YzMwZ0pIdG9ZWE5UZFdKRGJHRnpjMzBnYVhNdGMzVmliV1Z1ZFMxcGRHVnRJSE4xWW0xbGJuVWdhWE10WVdOMGFYWmxZQ2xjYmlBZ0lDQWdJQzV5WlcxdmRtVkJkSFJ5S0Nka1lYUmhMWE4xWW0xbGJuVW5LUzVqYzNNb0oyUnBjM0JzWVhrbkxDQW5KeWs3WEc1Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ2UwNWxjM1I5TzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLm5lc3QuanNcIixcIi8uLi8uLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVGltZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAvL29wdGlvbnMgaXMgYW4gb2JqZWN0IGZvciBlYXNpbHkgYWRkaW5nIGZlYXR1cmVzIGxhdGVyLlxuICBuYW1lU3BhY2UgPSBPYmplY3Qua2V5cyhlbGVtLmRhdGEoKSlbMF0gfHwgJ3RpbWVyJyxcbiAgICAgIHJlbWFpbiA9IC0xLFxuICAgICAgc3RhcnQsXG4gICAgICB0aW1lcjtcblxuICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cbiAgdGhpcy5yZXN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJlbWFpbiA9IC0xO1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9O1xuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIC8vIGlmKCFlbGVtLmRhdGEoJ3BhdXNlZCcpKXsgcmV0dXJuIGZhbHNlOyB9Ly9tYXliZSBpbXBsZW1lbnQgdGhpcyBzYW5pdHkgY2hlY2sgaWYgdXNlZCBmb3Igb3RoZXIgdGhpbmdzLlxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgcmVtYWluID0gcmVtYWluIDw9IDAgPyBkdXJhdGlvbiA6IHJlbWFpbjtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIGZhbHNlKTtcbiAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZmluaXRlKSB7XG4gICAgICAgIF90aGlzLnJlc3RhcnQoKTsgLy9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSwgcmVtYWluKTtcbiAgICBlbGVtLnRyaWdnZXIoJ3RpbWVyc3RhcnQuemYuJyArIG5hbWVTcGFjZSk7XG4gIH07XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKCd0aW1lcnBhdXNlZC56Zi4nICsgbmFtZVNwYWNlKTtcbiAgfTtcbn1cblxuZXhwb3J0cy5UaW1lciA9IFRpbWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWRYUnBiQzUwYVcxbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKVWFXMWxjaUlzSW1Wc1pXMGlMQ0p2Y0hScGIyNXpJaXdpWTJJaUxDSmZkR2hwY3lJc0ltUjFjbUYwYVc5dUlpd2libUZ0WlZOd1lXTmxJaXdpVDJKcVpXTjBJaXdpYTJWNWN5SXNJbVJoZEdFaUxDSnlaVzFoYVc0aUxDSnpkR0Z5ZENJc0luUnBiV1Z5SWl3aWFYTlFZWFZ6WldRaUxDSnlaWE4wWVhKMElpd2lZMnhsWVhKVWFXMWxiM1YwSWl3aVJHRjBaU0lzSW01dmR5SXNJbk5sZEZScGJXVnZkWFFpTENKcGJtWnBibWwwWlNJc0luUnlhV2RuWlhJaUxDSndZWFZ6WlNJc0ltVnVaQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdRVUZGUVRzN096czdPMEZCUlVFc1UwRkJVMEVzUzBGQlZDeERRVUZsUXl4SlFVRm1MRVZCUVhGQ1F5eFBRVUZ5UWl4RlFVRTRRa01zUlVGQk9VSXNSVUZCYTBNN1FVRkRhRU1zVFVGQlNVTXNVVUZCVVN4SlFVRmFPMEZCUVVFc1RVRkRTVU1zVjBGQlYwZ3NVVUZCVVVjc1VVRkVka0k3UVVGQlFTeE5RVU5uUXp0QlFVTTFRa01zWTBGQldVTXNUMEZCVDBNc1NVRkJVQ3hEUVVGWlVDeExRVUZMVVN4SlFVRk1MRVZCUVZvc1JVRkJlVUlzUTBGQmVrSXNTMEZCSzBJc1QwRkdMME03UVVGQlFTeE5RVWRKUXl4VFFVRlRMRU5CUVVNc1EwRklaRHRCUVVGQkxFMUJTVWxETEV0QlNrbzdRVUZCUVN4TlFVdEpReXhMUVV4S096dEJRVTlCTEU5QlFVdERMRkZCUVV3c1IwRkJaMElzUzBGQmFFSTdPMEZCUlVFc1QwRkJTME1zVDBGQlRDeEhRVUZsTEZsQlFWYzdRVUZEZUVKS0xHRkJRVk1zUTBGQlF5eERRVUZXTzBGQlEwRkxMR2xDUVVGaFNDeExRVUZpTzBGQlEwRXNVMEZCUzBRc1MwRkJURHRCUVVORUxFZEJTa1E3TzBGQlRVRXNUMEZCUzBFc1MwRkJUQ3hIUVVGaExGbEJRVmM3UVVGRGRFSXNVMEZCUzBVc1VVRkJUQ3hIUVVGblFpeExRVUZvUWp0QlFVTkJPMEZCUTBGRkxHbENRVUZoU0N4TFFVRmlPMEZCUTBGR0xHRkJRVk5CTEZWQlFWVXNRMEZCVml4SFFVRmpUQ3hSUVVGa0xFZEJRWGxDU3l4TlFVRnNRenRCUVVOQlZDeFRRVUZMVVN4SlFVRk1MRU5CUVZVc1VVRkJWaXhGUVVGdlFpeExRVUZ3UWp0QlFVTkJSU3haUVVGUlN5eExRVUZMUXl4SFFVRk1MRVZCUVZJN1FVRkRRVXdzV1VGQlVVMHNWMEZCVnl4WlFVRlZPMEZCUXpOQ0xGVkJRVWRvUWl4UlFVRlJhVUlzVVVGQldDeEZRVUZ2UWp0QlFVTnNRbVlzWTBGQlRWVXNUMEZCVGl4SFFVUnJRaXhEUVVOR08wRkJRMnBDTzBGQlEwUXNWVUZCU1Znc1RVRkJUU3hQUVVGUFFTeEZRVUZRTEV0QlFXTXNWVUZCZUVJc1JVRkJiME03UVVGQlJVRTdRVUZCVHp0QlFVTTVReXhMUVV4UExFVkJTMHhQTEUxQlRFc3NRMEZCVWp0QlFVMUJWQ3hUUVVGTGJVSXNUMEZCVEN4dlFrRkJPRUprTEZOQlFUbENPMEZCUTBRc1IwRmtSRHM3UVVGblFrRXNUMEZCUzJVc1MwRkJUQ3hIUVVGaExGbEJRVmM3UVVGRGRFSXNVMEZCUzFJc1VVRkJUQ3hIUVVGblFpeEpRVUZvUWp0QlFVTkJPMEZCUTBGRkxHbENRVUZoU0N4TFFVRmlPMEZCUTBGWUxGTkJRVXRSTEVsQlFVd3NRMEZCVlN4UlFVRldMRVZCUVc5Q0xFbEJRWEJDTzBGQlEwRXNVVUZCU1dFc1RVRkJUVTRzUzBGQlMwTXNSMEZCVEN4RlFVRldPMEZCUTBGUUxHRkJRVk5CTEZWQlFWVlpMRTFCUVUxWUxFdEJRV2hDTEVOQlFWUTdRVUZEUVZZc1UwRkJTMjFDTEU5QlFVd3NjVUpCUVN0Q1pDeFRRVUV2UWp0QlFVTkVMRWRCVWtRN1FVRlRSRHM3VVVGRlQwNHNTeXhIUVVGQlFTeExJaXdpWm1sc1pTSTZJbVp2ZFc1a1lYUnBiMjR1ZFhScGJDNTBhVzFsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhVzF3YjNKMElDUWdabkp2YlNBbmFuRjFaWEo1Snp0Y2JseHVablZ1WTNScGIyNGdWR2x0WlhJb1pXeGxiU3dnYjNCMGFXOXVjeXdnWTJJcElIdGNiaUFnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjeXhjYmlBZ0lDQWdJR1IxY21GMGFXOXVJRDBnYjNCMGFXOXVjeTVrZFhKaGRHbHZiaXd2TDI5d2RHbHZibk1nYVhNZ1lXNGdiMkpxWldOMElHWnZjaUJsWVhOcGJIa2dZV1JrYVc1bklHWmxZWFIxY21WeklHeGhkR1Z5TGx4dUlDQWdJQ0FnYm1GdFpWTndZV05sSUQwZ1QySnFaV04wTG10bGVYTW9aV3hsYlM1a1lYUmhLQ2twV3pCZElIeDhJQ2QwYVcxbGNpY3NYRzRnSUNBZ0lDQnlaVzFoYVc0Z1BTQXRNU3hjYmlBZ0lDQWdJSE4wWVhKMExGeHVJQ0FnSUNBZ2RHbHRaWEk3WEc1Y2JpQWdkR2hwY3k1cGMxQmhkWE5sWkNBOUlHWmhiSE5sTzF4dVhHNGdJSFJvYVhNdWNtVnpkR0Z5ZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxiV0ZwYmlBOUlDMHhPMXh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGNpazdYRzRnSUNBZ2RHaHBjeTV6ZEdGeWRDZ3BPMXh1SUNCOVhHNWNiaUFnZEdocGN5NXpkR0Z5ZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIUm9hWE11YVhOUVlYVnpaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQXZMeUJwWmlnaFpXeGxiUzVrWVhSaEtDZHdZWFZ6WldRbktTbDdJSEpsZEhWeWJpQm1ZV3h6WlRzZ2ZTOHZiV0Y1WW1VZ2FXMXdiR1Z0Wlc1MElIUm9hWE1nYzJGdWFYUjVJR05vWldOcklHbG1JSFZ6WldRZ1ptOXlJRzkwYUdWeUlIUm9hVzVuY3k1Y2JpQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2RHbHRaWElwTzF4dUlDQWdJSEpsYldGcGJpQTlJSEpsYldGcGJpQThQU0F3SUQ4Z1pIVnlZWFJwYjI0Z09pQnlaVzFoYVc0N1hHNGdJQ0FnWld4bGJTNWtZWFJoS0Nkd1lYVnpaV1FuTENCbVlXeHpaU2s3WEc0Z0lDQWdjM1JoY25RZ1BTQkVZWFJsTG01dmR5Z3BPMXh1SUNBZ0lIUnBiV1Z5SUQwZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdhV1lvYjNCMGFXOXVjeTVwYm1acGJtbDBaU2w3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkpsYzNSaGNuUW9LVHN2TDNKbGNuVnVJSFJvWlNCMGFXMWxjaTVjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoallpQW1KaUIwZVhCbGIyWWdZMklnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHNnWTJJb0tUc2dmVnh1SUNBZ0lIMHNJSEpsYldGcGJpazdYRzRnSUNBZ1pXeGxiUzUwY21sbloyVnlLR0IwYVcxbGNuTjBZWEowTG5wbUxpUjdibUZ0WlZOd1lXTmxmV0FwTzF4dUlDQjlYRzVjYmlBZ2RHaHBjeTV3WVhWelpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFJvYVhNdWFYTlFZWFZ6WldRZ1BTQjBjblZsTzF4dUlDQWdJQzh2YVdZb1pXeGxiUzVrWVhSaEtDZHdZWFZ6WldRbktTbDdJSEpsZEhWeWJpQm1ZV3h6WlRzZ2ZTOHZiV0Y1WW1VZ2FXMXdiR1Z0Wlc1MElIUm9hWE1nYzJGdWFYUjVJR05vWldOcklHbG1JSFZ6WldRZ1ptOXlJRzkwYUdWeUlIUm9hVzVuY3k1Y2JpQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2RHbHRaWElwTzF4dUlDQWdJR1ZzWlcwdVpHRjBZU2duY0dGMWMyVmtKeXdnZEhKMVpTazdYRzRnSUNBZ2RtRnlJR1Z1WkNBOUlFUmhkR1V1Ym05M0tDazdYRzRnSUNBZ2NtVnRZV2x1SUQwZ2NtVnRZV2x1SUMwZ0tHVnVaQ0F0SUhOMFlYSjBLVHRjYmlBZ0lDQmxiR1Z0TG5SeWFXZG5aWElvWUhScGJXVnljR0YxYzJWa0xucG1MaVI3Ym1GdFpWTndZV05sZldBcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQjdWR2x0WlhKOU8xeHVJbDE5XG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24udXRpbC50aW1lci5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Ub3VjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKldvcmsgaW5zcGlyZWQgYnkgbXVsdGlwbGUganF1ZXJ5IHN3aXBlIHBsdWdpbnMqKlxuLy8qKkRvbmUgYnkgWW9oYWkgQXJhcmF0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVG91Y2ggPSB7fTtcblxudmFyIHN0YXJ0UG9zWCxcbiAgICBzdGFydFBvc1ksXG4gICAgc3RhcnRUaW1lLFxuICAgIGVsYXBzZWRUaW1lLFxuICAgIGlzTW92aW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gIC8vICBhbGVydCh0aGlzKTtcbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSk7XG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kKTtcbiAgaXNNb3ZpbmcgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICBpZiAoX2pxdWVyeTIuZGVmYXVsdC5zcG90U3dpcGUucHJldmVudERlZmF1bHQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKGlzTW92aW5nKSB7XG4gICAgdmFyIHggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgdmFyIHkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgdmFyIGR4ID0gc3RhcnRQb3NYIC0geDtcbiAgICB2YXIgZHkgPSBzdGFydFBvc1kgLSB5O1xuICAgIHZhciBkaXI7XG4gICAgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgICBpZiAoTWF0aC5hYnMoZHgpID49IF9qcXVlcnkyLmRlZmF1bHQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gX2pxdWVyeTIuZGVmYXVsdC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gICAgLy8gZWxzZSBpZihNYXRoLmFicyhkeSkgPj0gJC5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSAkLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgIC8vIH1cbiAgICBpZiAoZGlyKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBvblRvdWNoRW5kLmNhbGwodGhpcyk7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykudHJpZ2dlcignc3dpcGUnLCBkaXIpLnRyaWdnZXIoJ3N3aXBlJyArIGRpcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gIGlmIChlLnRvdWNoZXMubGVuZ3RoID09IDEpIHtcbiAgICBzdGFydFBvc1ggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIGlzTW92aW5nID0gdHJ1ZTtcbiAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgJiYgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHRlYXJkb3duKCkge1xuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xufVxuXG52YXIgU3BvdFN3aXBlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTcG90U3dpcGUoJCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcG90U3dpcGUpO1xuXG4gICAgdGhpcy52ZXJzaW9uID0gJzEuMC4wJztcbiAgICB0aGlzLmVuYWJsZWQgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIHRoaXMubW92ZVRocmVzaG9sZCA9IDc1O1xuICAgIHRoaXMudGltZVRocmVzaG9sZCA9IDIwMDtcbiAgICB0aGlzLiQgPSAkO1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTcG90U3dpcGUsIFt7XG4gICAga2V5OiAnX2luaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgIHZhciAkID0gdGhpcy4kO1xuICAgICAgJC5ldmVudC5zcGVjaWFsLnN3aXBlID0geyBzZXR1cDogaW5pdCB9O1xuXG4gICAgICAkLmVhY2goWydsZWZ0JywgJ3VwJywgJ2Rvd24nLCAncmlnaHQnXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAkLmV2ZW50LnNwZWNpYWxbJ3N3aXBlJyArIHRoaXNdID0geyBzZXR1cDogZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9uKCdzd2lwZScsICQubm9vcCk7XG4gICAgICAgICAgfSB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNwb3RTd2lwZTtcbn0oKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIEFzIGZhciBhcyBJIGNhbiB0ZWxsLCBib3RoIHNldHVwU3BvdFN3aXBlIGFuZCAgICAqXG4gKiBzZXR1cFRvdWNoSGFuZGxlciBzaG91bGQgYmUgaWRlbXBvdGVudCwgICAgICAgICAgKlxuICogYmVjYXVzZSB0aGV5IGRpcmVjdGx5IHJlcGxhY2UgZnVuY3Rpb25zICYgICAgICAgICpcbiAqIHZhbHVlcywgYW5kIGRvIG5vdCBhZGQgZXZlbnQgaGFuZGxlcnMgZGlyZWN0bHkuICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuVG91Y2guc2V0dXBTcG90U3dpcGUgPSBmdW5jdGlvbiAoJCkge1xuICAkLnNwb3RTd2lwZSA9IG5ldyBTcG90U3dpcGUoJCk7XG59O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogTWV0aG9kIGZvciBhZGRpbmcgcHNldWRvIGRyYWcgZXZlbnRzIHRvIGVsZW1lbnRzICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5Ub3VjaC5zZXR1cFRvdWNoSGFuZGxlciA9IGZ1bmN0aW9uICgkKSB7XG4gICQuZm4uYWRkVG91Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkge1xuICAgICAgJChlbCkuYmluZCgndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbiBoYW5kbGVUb3VjaChldmVudCkge1xuICAgICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBmaXJzdCA9IHRvdWNoZXNbMF0sXG4gICAgICAgICAgZXZlbnRUeXBlcyA9IHtcbiAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gICAgICAgIHRvdWNoZW5kOiAnbW91c2V1cCdcbiAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnQ7XG5cbiAgICAgIGlmICgnTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAgLypsZWZ0Ki8sIG51bGwpO1xuICAgICAgfVxuICAgICAgZmlyc3QudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc2ltdWxhdGVkRXZlbnQpO1xuICAgIH07XG4gIH07XG59O1xuXG5Ub3VjaC5pbml0ID0gZnVuY3Rpb24gKCQpIHtcbiAgaWYgKHR5cGVvZiAkLnNwb3RTd2lwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBUb3VjaC5zZXR1cFNwb3RTd2lwZSgkKTtcbiAgICBUb3VjaC5zZXR1cFRvdWNoSGFuZGxlcigkKTtcbiAgfVxufTtcblxuZXhwb3J0cy5Ub3VjaCA9IFRvdWNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWRYUnBiQzUwYjNWamFDNXFjeUpkTENKdVlXMWxjeUk2V3lKVWIzVmphQ0lzSW5OMFlYSjBVRzl6V0NJc0luTjBZWEowVUc5eldTSXNJbk4wWVhKMFZHbHRaU0lzSW1Wc1lYQnpaV1JVYVcxbElpd2lhWE5OYjNacGJtY2lMQ0p2YmxSdmRXTm9SVzVrSWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpSXNJbTl1Vkc5MVkyaE5iM1psSWl3aVpTSXNJaVFpTENKemNHOTBVM2RwY0dVaUxDSndjbVYyWlc1MFJHVm1ZWFZzZENJc0luZ2lMQ0owYjNWamFHVnpJaXdpY0dGblpWZ2lMQ0o1SWl3aWNHRm5aVmtpTENKa2VDSXNJbVI1SWl3aVpHbHlJaXdpUkdGMFpTSXNJbWRsZEZScGJXVWlMQ0pOWVhSb0lpd2lZV0p6SWl3aWJXOTJaVlJvY21WemFHOXNaQ0lzSW5ScGJXVlVhSEpsYzJodmJHUWlMQ0pqWVd4c0lpd2lkSEpwWjJkbGNpSXNJbTl1Vkc5MVkyaFRkR0Z5ZENJc0lteGxibWQwYUNJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSnBibWwwSWl3aWRHVmhjbVJ2ZDI0aUxDSlRjRzkwVTNkcGNHVWlMQ0oyWlhKemFXOXVJaXdpWlc1aFlteGxaQ0lzSW1SdlkzVnRaVzUwSWl3aVpHOWpkVzFsYm5SRmJHVnRaVzUwSWl3aVgybHVhWFFpTENKbGRtVnVkQ0lzSW5Od1pXTnBZV3dpTENKemQybHdaU0lzSW5ObGRIVndJaXdpWldGamFDSXNJbTl1SWl3aWJtOXZjQ0lzSW5ObGRIVndVM0J2ZEZOM2FYQmxJaXdpYzJWMGRYQlViM1ZqYUVoaGJtUnNaWElpTENKbWJpSXNJbUZrWkZSdmRXTm9JaXdpYVNJc0ltVnNJaXdpWW1sdVpDSXNJbWhoYm1Sc1pWUnZkV05vSWl3aVkyaGhibWRsWkZSdmRXTm9aWE1pTENKbWFYSnpkQ0lzSW1WMlpXNTBWSGx3WlhNaUxDSjBiM1ZqYUhOMFlYSjBJaXdpZEc5MVkyaHRiM1psSWl3aWRHOTFZMmhsYm1RaUxDSjBlWEJsSWl3aWMybHRkV3hoZEdWa1JYWmxiblFpTENKM2FXNWtiM2NpTENKTmIzVnpaVVYyWlc1MElpd2ljMk55WldWdVdDSXNJbk5qY21WbGJsa2lMQ0pqYkdsbGJuUllJaXdpWTJ4cFpXNTBXU0lzSW1OeVpXRjBaVVYyWlc1MElpd2lhVzVwZEUxdmRYTmxSWFpsYm5RaUxDSjBZWEpuWlhRaUxDSmthWE53WVhSamFFVjJaVzUwSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08zRnFRa0ZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdPenM3T3pzN1FVRkZRU3hKUVVGSlFTeFJRVUZSTEVWQlFWbzdPMEZCUlVFc1NVRkJTVU1zVTBGQlNqdEJRVUZCTEVsQlEwbERMRk5CUkVvN1FVRkJRU3hKUVVWSlF5eFRRVVpLTzBGQlFVRXNTVUZIU1VNc1YwRklTanRCUVVGQkxFbEJTVWxETEZkQlFWY3NTMEZLWmpzN1FVRk5RU3hUUVVGVFF5eFZRVUZVTEVkQlFYTkNPMEZCUTNCQ08wRkJRMEVzVDBGQlMwTXNiVUpCUVV3c1EwRkJlVUlzVjBGQmVrSXNSVUZCYzBORExGZEJRWFJETzBGQlEwRXNUMEZCUzBRc2JVSkJRVXdzUTBGQmVVSXNWVUZCZWtJc1JVRkJjVU5FTEZWQlFYSkRPMEZCUTBGRUxHRkJRVmNzUzBGQldEdEJRVU5FT3p0QlFVVkVMRk5CUVZOSExGZEJRVlFzUTBGQmNVSkRMRU5CUVhKQ0xFVkJRWGRDTzBGQlEzUkNMRTFCUVVsRExHbENRVUZGUXl4VFFVRkdMRU5CUVZsRExHTkJRV2hDTEVWQlFXZERPMEZCUVVWSUxFMUJRVVZITEdOQlFVWTdRVUZCY1VJN1FVRkRka1FzVFVGQlIxQXNVVUZCU0N4RlFVRmhPMEZCUTFnc1VVRkJTVkVzU1VGQlNVb3NSVUZCUlVzc1QwRkJSaXhEUVVGVkxFTkJRVllzUlVGQllVTXNTMEZCY2tJN1FVRkRRU3hSUVVGSlF5eEpRVUZKVUN4RlFVRkZTeXhQUVVGR0xFTkJRVlVzUTBGQlZpeEZRVUZoUnl4TFFVRnlRanRCUVVOQkxGRkJRVWxETEV0QlFVdHFRaXhaUVVGWldTeERRVUZ5UWp0QlFVTkJMRkZCUVVsTkxFdEJRVXRxUWl4WlFVRlpZeXhEUVVGeVFqdEJRVU5CTEZGQlFVbEpMRWRCUVVvN1FVRkRRV2hDTEd0Q1FVRmpMRWxCUVVscFFpeEpRVUZLTEVkQlFWZERMRTlCUVZnc1MwRkJkVUp1UWl4VFFVRnlRenRCUVVOQkxGRkJRVWR2UWl4TFFVRkxReXhIUVVGTUxFTkJRVk5PTEVWQlFWUXNTMEZCWjBKU0xHbENRVUZGUXl4VFFVRkdMRU5CUVZsakxHRkJRVFZDTEVsQlFUWkRja0lzWlVGQlpVMHNhVUpCUVVWRExGTkJRVVlzUTBGQldXVXNZVUZCTTBVc1JVRkJNRVk3UVVGRGVFWk9MRmxCUVUxR0xFdEJRVXNzUTBGQlRDeEhRVUZUTEUxQlFWUXNSMEZCYTBJc1QwRkJlRUk3UVVGRFJEdEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJMRkZCUVVkRkxFZEJRVWdzUlVGQlVUdEJRVU5PV0N4UlFVRkZSeXhqUVVGR08wRkJRMEZPTEdsQ1FVRlhjVUlzU1VGQldDeERRVUZuUWl4SlFVRm9RanRCUVVOQkxEUkNRVUZGTEVsQlFVWXNSVUZCVVVNc1QwRkJVaXhEUVVGblFpeFBRVUZvUWl4RlFVRjVRbElzUjBGQmVrSXNSVUZCT0VKUkxFOUJRVGxDTEZkQlFUaERVaXhIUVVFNVF6dEJRVU5FTzBGQlEwWTdRVUZEUmpzN1FVRkZSQ3hUUVVGVFV5eFpRVUZVTEVOQlFYTkNjRUlzUTBGQmRFSXNSVUZCZVVJN1FVRkRka0lzVFVGQlNVRXNSVUZCUlVzc1QwRkJSaXhEUVVGVlowSXNUVUZCVml4SlFVRnZRaXhEUVVGNFFpeEZRVUV5UWp0QlFVTjZRamRDTEdkQ1FVRlpVU3hGUVVGRlN5eFBRVUZHTEVOQlFWVXNRMEZCVml4RlFVRmhReXhMUVVGNlFqdEJRVU5CWWl4blFrRkJXVThzUlVGQlJVc3NUMEZCUml4RFFVRlZMRU5CUVZZc1JVRkJZVWNzUzBGQmVrSTdRVUZEUVZvc1pVRkJWeXhKUVVGWU8wRkJRMEZHTEdkQ1FVRlpMRWxCUVVsclFpeEpRVUZLTEVkQlFWZERMRTlCUVZnc1JVRkJXanRCUVVOQkxGTkJRVXRUTEdkQ1FVRk1MRU5CUVhOQ0xGZEJRWFJDTEVWQlFXMURka0lzVjBGQmJrTXNSVUZCWjBRc1MwRkJhRVE3UVVGRFFTeFRRVUZMZFVJc1owSkJRVXdzUTBGQmMwSXNWVUZCZEVJc1JVRkJhME42UWl4VlFVRnNReXhGUVVFNFF5eExRVUU1UXp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVTBGQlV6QkNMRWxCUVZRc1IwRkJaMEk3UVVGRFpDeFBRVUZMUkN4blFrRkJUQ3hKUVVGNVFpeExRVUZMUVN4blFrRkJUQ3hEUVVGelFpeFpRVUYwUWl4RlFVRnZRMFlzV1VGQmNFTXNSVUZCYTBRc1MwRkJiRVFzUTBGQmVrSTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFNTeFJRVUZVTEVkQlFXOUNPMEZCUTJ4Q0xFOUJRVXN4UWl4dFFrRkJUQ3hEUVVGNVFpeFpRVUY2UWl4RlFVRjFRM05DTEZsQlFYWkRPMEZCUTBRN08wbEJSVXRMTEZNN1FVRkRTaXh4UWtGQldYaENMRU5CUVZvc1JVRkJaVHRCUVVGQk96dEJRVU5pTEZOQlFVdDVRaXhQUVVGTUxFZEJRV1VzVDBGQlpqdEJRVU5CTEZOQlFVdERMRTlCUVV3c1IwRkJaU3hyUWtGQmEwSkRMRk5CUVZORExHVkJRVEZETzBGQlEwRXNVMEZCU3pGQ0xHTkJRVXdzUjBGQmMwSXNTMEZCZEVJN1FVRkRRU3hUUVVGTFlTeGhRVUZNTEVkQlFYRkNMRVZCUVhKQ08wRkJRMEVzVTBGQlMwTXNZVUZCVEN4SFFVRnhRaXhIUVVGeVFqdEJRVU5CTEZOQlFVdG9RaXhEUVVGTUxFZEJRVk5CTEVOQlFWUTdRVUZEUVN4VFFVRkxOa0lzUzBGQlREdEJRVU5FT3pzN096UkNRVVZQTzBGQlEwNHNWVUZCU1RkQ0xFbEJRVWtzUzBGQlMwRXNRMEZCWWp0QlFVTkJRU3hSUVVGRk9FSXNTMEZCUml4RFFVRlJReXhQUVVGU0xFTkJRV2RDUXl4TFFVRm9RaXhIUVVGM1FpeEZRVUZGUXl4UFFVRlBXQ3hKUVVGVUxFVkJRWGhDT3p0QlFVVkJkRUlzVVVGQlJXdERMRWxCUVVZc1EwRkJUeXhEUVVGRExFMUJRVVFzUlVGQlV5eEpRVUZVTEVWQlFXVXNUVUZCWml4RlFVRjFRaXhQUVVGMlFpeERRVUZRTEVWQlFYZERMRmxCUVZrN1FVRkRiRVJzUXl4VlFVRkZPRUlzUzBGQlJpeERRVUZSUXl4UFFVRlNMRmRCUVhkQ0xFbEJRWGhDTEVsQlFXdERMRVZCUVVWRkxFOUJRVThzYVVKQlFWVTdRVUZEYmtScVF5eGpRVUZGTEVsQlFVWXNSVUZCVVcxRExFVkJRVklzUTBGQlZ5eFBRVUZZTEVWQlFXOUNia01zUlVGQlJXOURMRWxCUVhSQ08wRkJRMFFzVjBGR2FVTXNSVUZCYkVNN1FVRkhSQ3hQUVVwRU8wRkJTMFE3T3pzN096dEJRVWRJT3pzN096czdPMEZCVDBFNVF5eE5RVUZOSzBNc1kwRkJUaXhIUVVGMVFpeFZRVUZUY2tNc1EwRkJWQ3hGUVVGWk8wRkJRMnBEUVN4SlFVRkZReXhUUVVGR0xFZEJRV01zU1VGQlNYVkNMRk5CUVVvc1EwRkJZM2hDTEVOQlFXUXNRMEZCWkR0QlFVTkVMRU5CUmtRN08wRkJTVUU3T3p0QlFVZEJWaXhOUVVGTlowUXNhVUpCUVU0c1IwRkJNRUlzVlVGQlUzUkRMRU5CUVZRc1JVRkJXVHRCUVVOd1EwRXNTVUZCUlhWRExFVkJRVVlzUTBGQlMwTXNVVUZCVEN4SFFVRm5RaXhaUVVGVk8wRkJRM2hDTEZOQlFVdE9MRWxCUVV3c1EwRkJWU3hWUVVGVFR5eERRVUZVTEVWQlFWZERMRVZCUVZnc1JVRkJZenRCUVVOMFFqRkRMRkZCUVVVd1F5eEZRVUZHTEVWQlFVMURMRWxCUVU0c1EwRkJWeXd5UTBGQldDeEZRVUYzUkN4VlFVRlRZaXhMUVVGVUxFVkJRV2xDTzBGQlEzWkZPMEZCUTBFN1FVRkRRV01zYjBKQlFWbGtMRXRCUVZvN1FVRkRSQ3hQUVVwRU8wRkJTMFFzUzBGT1JEczdRVUZSUVN4UlFVRkpZeXhqUVVGakxGTkJRV1JCTEZkQlFXTXNRMEZCVTJRc1MwRkJWQ3hGUVVGbE8wRkJReTlDTEZWQlFVa3hRaXhWUVVGVk1FSXNUVUZCVFdVc1kwRkJjRUk3UVVGQlFTeFZRVU5KUXl4UlFVRlJNVU1zVVVGQlVTeERRVUZTTEVOQlJGbzdRVUZCUVN4VlFVVkpNa01zWVVGQllUdEJRVU5ZUXl4dlFrRkJXU3hYUVVSRU8wRkJSVmhETEcxQ1FVRlhMRmRCUmtFN1FVRkhXRU1zYTBKQlFWVTdRVUZJUXl4UFFVWnFRanRCUVVGQkxGVkJUMGxETEU5QlFVOUtMRmRCUVZkcVFpeE5RVUZOY1VJc1NVRkJha0lzUTBGUVdEdEJRVUZCTEZWQlVVbERMR05CVWtvN08wRkJWMEVzVlVGQlJ5eG5Ra0ZCWjBKRExFMUJRV2hDTEVsQlFUQkNMRTlCUVU5QkxFOUJRVTlETEZWQlFXUXNTMEZCTmtJc1ZVRkJNVVFzUlVGQmMwVTdRVUZEY0VWR0xIbENRVUZwUWl4SlFVRkpReXhQUVVGUFF5eFZRVUZZTEVOQlFYTkNTQ3hKUVVGMFFpeEZRVUUwUWp0QlFVTXpReXh4UWtGQlZ5eEpRVVJuUXp0QlFVVXpReXgzUWtGQll5eEpRVVkyUWp0QlFVY3pReXh4UWtGQlYwd3NUVUZCVFZNc1QwRklNRUk3UVVGSk0wTXNjVUpCUVZkVUxFMUJRVTFWTEU5QlNqQkNPMEZCU3pORExIRkNRVUZYVml4TlFVRk5WeXhQUVV3d1FqdEJRVTB6UXl4eFFrRkJWMWdzVFVGQlRWazdRVUZPTUVJc1UwRkJOVUlzUTBGQmFrSTdRVUZSUkN4UFFWUkVMRTFCVTA4N1FVRkRURTRzZVVKQlFXbENla0lzVTBGQlUyZERMRmRCUVZRc1EwRkJjVUlzV1VGQmNrSXNRMEZCYWtJN1FVRkRRVkFzZFVKQlFXVlJMR05CUVdZc1EwRkJPRUpVTEVsQlFUbENMRVZCUVc5RExFbEJRWEJETEVWQlFUQkRMRWxCUVRGRExFVkJRV2RFUlN4TlFVRm9SQ3hGUVVGM1JDeERRVUY0UkN4RlFVRXlSRkFzVFVGQlRWTXNUMEZCYWtVc1JVRkJNRVZVTEUxQlFVMVZMRTlCUVdoR0xFVkJRWGxHVml4TlFVRk5WeXhQUVVFdlJpeEZRVUYzUjFnc1RVRkJUVmtzVDBGQk9VY3NSVUZCZFVnc1MwRkJka2dzUlVGQk9FZ3NTMEZCT1Vnc1JVRkJjVWtzUzBGQmNra3NSVUZCTkVrc1MwRkJOVWtzUlVGQmJVb3NRMEZCYmtvc1EwRkJiMG9zVVVGQmNFb3NSVUZCT0Vvc1NVRkJPVW83UVVGRFJEdEJRVU5FV2l4WlFVRk5aU3hOUVVGT0xFTkJRV0ZETEdGQlFXSXNRMEZCTWtKV0xHTkJRVE5DTzBGQlEwUXNTMEV4UWtRN1FVRXlRa1FzUjBGd1EwUTdRVUZ4UTBRc1EwRjBRMFE3TzBGQmQwTkJPVVFzVFVGQlRXZERMRWxCUVU0c1IwRkJZU3hWUVVGVGRFSXNRMEZCVkN4RlFVRlpPMEZCUTNaQ0xFMUJRVWNzVDBGQlQwRXNSVUZCUlVNc1UwRkJWQ3hMUVVGM1FpeFhRVUV6UWl4RlFVRjNRenRCUVVOMFExZ3NWVUZCVFN0RExHTkJRVTRzUTBGQmNVSnlReXhEUVVGeVFqdEJRVU5CVml4VlFVRk5aMFFzYVVKQlFVNHNRMEZCZDBKMFF5eERRVUY0UWp0QlFVTkVPMEZCUTBZc1EwRk1SRHM3VVVGUFVWWXNTeXhIUVVGQlFTeExJaXdpWm1sc1pTSTZJbVp2ZFc1a1lYUnBiMjR1ZFhScGJDNTBiM1ZqYUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaTh2S2lwWGIzSnJJR2x1YzNCcGNtVmtJR0o1SUcxMWJIUnBjR3hsSUdweGRXVnllU0J6ZDJsd1pTQndiSFZuYVc1ektpcGNiaTh2S2lwRWIyNWxJR0o1SUZsdmFHRnBJRUZ5WVhKaGRDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaTh2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHh1YVcxd2IzSjBJQ1FnWm5KdmJTQW5hbkYxWlhKNUp6dGNibHh1ZG1GeUlGUnZkV05vSUQwZ2UzMDdYRzVjYm5aaGNpQnpkR0Z5ZEZCdmMxZ3NYRzRnSUNBZ2MzUmhjblJRYjNOWkxGeHVJQ0FnSUhOMFlYSjBWR2x0WlN4Y2JpQWdJQ0JsYkdGd2MyVmtWR2x0WlN4Y2JpQWdJQ0JwYzAxdmRtbHVaeUE5SUdaaGJITmxPMXh1WEc1bWRXNWpkR2x2YmlCdmJsUnZkV05vUlc1a0tDa2dlMXh1SUNBdkx5QWdZV3hsY25Rb2RHaHBjeWs3WEc0Z0lIUm9hWE11Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmRHOTFZMmh0YjNabEp5d2diMjVVYjNWamFFMXZkbVVwTzF4dUlDQjBhR2x6TG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vWlc1a0p5d2diMjVVYjNWamFFVnVaQ2s3WEc0Z0lHbHpUVzkyYVc1bklEMGdabUZzYzJVN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUc5dVZHOTFZMmhOYjNabEtHVXBJSHRjYmlBZ2FXWWdLQ1F1YzNCdmRGTjNhWEJsTG5CeVpYWmxiblJFWldaaGRXeDBLU0I3SUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1RzZ2ZWeHVJQ0JwWmlocGMwMXZkbWx1WnlrZ2UxeHVJQ0FnSUhaaGNpQjRJRDBnWlM1MGIzVmphR1Z6V3pCZExuQmhaMlZZTzF4dUlDQWdJSFpoY2lCNUlEMGdaUzUwYjNWamFHVnpXekJkTG5CaFoyVlpPMXh1SUNBZ0lIWmhjaUJrZUNBOUlITjBZWEowVUc5eldDQXRJSGc3WEc0Z0lDQWdkbUZ5SUdSNUlEMGdjM1JoY25SUWIzTlpJQzBnZVR0Y2JpQWdJQ0IyWVhJZ1pHbHlPMXh1SUNBZ0lHVnNZWEJ6WldSVWFXMWxJRDBnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NrZ0xTQnpkR0Z5ZEZScGJXVTdYRzRnSUNBZ2FXWW9UV0YwYUM1aFluTW9aSGdwSUQ0OUlDUXVjM0J2ZEZOM2FYQmxMbTF2ZG1WVWFISmxjMmh2YkdRZ0ppWWdaV3hoY0hObFpGUnBiV1VnUEQwZ0pDNXpjRzkwVTNkcGNHVXVkR2x0WlZSb2NtVnphRzlzWkNrZ2UxeHVJQ0FnSUNBZ1pHbHlJRDBnWkhnZ1BpQXdJRDhnSjJ4bFpuUW5JRG9nSjNKcFoyaDBKenRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdaV3h6WlNCcFppaE5ZWFJvTG1GaWN5aGtlU2tnUGowZ0pDNXpjRzkwVTNkcGNHVXViVzkyWlZSb2NtVnphRzlzWkNBbUppQmxiR0Z3YzJWa1ZHbHRaU0E4UFNBa0xuTndiM1JUZDJsd1pTNTBhVzFsVkdoeVpYTm9iMnhrS1NCN1hHNGdJQ0FnTHk4Z0lDQmthWElnUFNCa2VTQStJREFnUHlBblpHOTNiaWNnT2lBbmRYQW5PMXh1SUNBZ0lDOHZJSDFjYmlBZ0lDQnBaaWhrYVhJcElIdGNiaUFnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lHOXVWRzkxWTJoRmJtUXVZMkZzYkNoMGFHbHpLVHRjYmlBZ0lDQWdJQ1FvZEdocGN5a3VkSEpwWjJkbGNpZ25jM2RwY0dVbkxDQmthWElwTG5SeWFXZG5aWElvWUhOM2FYQmxKSHRrYVhKOVlDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJRzl1Vkc5MVkyaFRkR0Z5ZENobEtTQjdYRzRnSUdsbUlDaGxMblJ2ZFdOb1pYTXViR1Z1WjNSb0lEMDlJREVwSUh0Y2JpQWdJQ0J6ZEdGeWRGQnZjMWdnUFNCbExuUnZkV05vWlhOYk1GMHVjR0ZuWlZnN1hHNGdJQ0FnYzNSaGNuUlFiM05aSUQwZ1pTNTBiM1ZqYUdWeld6QmRMbkJoWjJWWk8xeHVJQ0FnSUdselRXOTJhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQnpkR0Z5ZEZScGJXVWdQU0J1WlhjZ1JHRjBaU2dwTG1kbGRGUnBiV1VvS1R0Y2JpQWdJQ0IwYUdsekxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vYlc5MlpTY3NJRzl1Vkc5MVkyaE5iM1psTENCbVlXeHpaU2s3WEc0Z0lDQWdkR2hwY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphR1Z1WkNjc0lHOXVWRzkxWTJoRmJtUXNJR1poYkhObEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMEtDa2dlMXh1SUNCMGFHbHpMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWdKaVlnZEdocGN5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUhOMFlYSjBKeXdnYjI1VWIzVmphRk4wWVhKMExDQm1ZV3h6WlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhSbFlYSmtiM2R1S0NrZ2UxeHVJQ0IwYUdsekxuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb2MzUmhjblFuTENCdmJsUnZkV05vVTNSaGNuUXBPMXh1ZlZ4dVhHNWpiR0Z6Y3lCVGNHOTBVM2RwY0dVZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lna0tTQjdYRzRnSUNBZ2RHaHBjeTUyWlhKemFXOXVJRDBnSnpFdU1DNHdKenRjYmlBZ0lDQjBhR2x6TG1WdVlXSnNaV1FnUFNBbmIyNTBiM1ZqYUhOMFlYSjBKeUJwYmlCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblE3WEc0Z0lDQWdkR2hwY3k1d2NtVjJaVzUwUkdWbVlYVnNkQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11Ylc5MlpWUm9jbVZ6YUc5c1pDQTlJRGMxTzF4dUlDQWdJSFJvYVhNdWRHbHRaVlJvY21WemFHOXNaQ0E5SURJd01EdGNiaUFnSUNCMGFHbHpMaVFnUFNBa08xeHVJQ0FnSUhSb2FYTXVYMmx1YVhRb0tUdGNiaUFnZlZ4dVhHNGdJRjlwYm1sMEtDa2dlMXh1SUNBZ0lIWmhjaUFrSUQwZ2RHaHBjeTRrTzF4dUlDQWdJQ1F1WlhabGJuUXVjM0JsWTJsaGJDNXpkMmx3WlNBOUlIc2djMlYwZFhBNklHbHVhWFFnZlR0Y2JseHVJQ0FnSUNRdVpXRmphQ2hiSjJ4bFpuUW5MQ0FuZFhBbkxDQW5aRzkzYmljc0lDZHlhV2RvZENkZExDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FrTG1WMlpXNTBMbk53WldOcFlXeGJZSE4zYVhCbEpIdDBhR2x6ZldCZElEMGdleUJ6WlhSMWNEb2dablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnSkNoMGFHbHpLUzV2YmlnbmMzZHBjR1VuTENBa0xtNXZiM0FwTzF4dUlDQWdJQ0FnZlNCOU8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lCQmN5Qm1ZWElnWVhNZ1NTQmpZVzRnZEdWc2JDd2dZbTkwYUNCelpYUjFjRk53YjNSVGQybHdaU0JoYm1RZ0lDQWdLbHh1SUNvZ2MyVjBkWEJVYjNWamFFaGhibVJzWlhJZ2MyaHZkV3hrSUdKbElHbGtaVzF3YjNSbGJuUXNJQ0FnSUNBZ0lDQWdJQ3BjYmlBcUlHSmxZMkYxYzJVZ2RHaGxlU0JrYVhKbFkzUnNlU0J5WlhCc1lXTmxJR1oxYm1OMGFXOXVjeUFtSUNBZ0lDQWdJQ0FxWEc0Z0tpQjJZV3gxWlhNc0lHRnVaQ0JrYnlCdWIzUWdZV1JrSUdWMlpXNTBJR2hoYm1Sc1pYSnpJR1JwY21WamRHeDVMaUFnS2x4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibFJ2ZFdOb0xuTmxkSFZ3VTNCdmRGTjNhWEJsSUQwZ1puVnVZM1JwYjI0b0pDa2dlMXh1SUNBa0xuTndiM1JUZDJsd1pTQTlJRzVsZHlCVGNHOTBVM2RwY0dVb0pDazdYRzU5TzF4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29nVFdWMGFHOWtJR1p2Y2lCaFpHUnBibWNnY0hObGRXUnZJR1J5WVdjZ1pYWmxiblJ6SUhSdklHVnNaVzFsYm5SeklDcGNiaUFxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVVYjNWamFDNXpaWFIxY0ZSdmRXTm9TR0Z1Wkd4bGNpQTlJR1oxYm1OMGFXOXVLQ1FwSUh0Y2JpQWdKQzVtYmk1aFpHUlViM1ZqYUNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUtHa3NaV3dwZTF4dUlDQWdJQ0FnSkNobGJDa3VZbWx1WkNnbmRHOTFZMmh6ZEdGeWRDQjBiM1ZqYUcxdmRtVWdkRzkxWTJobGJtUWdkRzkxWTJoallXNWpaV3duTENCbWRXNWpkR2x2YmlobGRtVnVkQ2tnSUh0Y2JpQWdJQ0FnSUNBZ0x5OTNaU0J3WVhOeklIUm9aU0J2Y21sbmFXNWhiQ0JsZG1WdWRDQnZZbXBsWTNRZ1ltVmpZWFZ6WlNCMGFHVWdhbEYxWlhKNUlHVjJaVzUwWEc0Z0lDQWdJQ0FnSUM4dmIySnFaV04wSUdseklHNXZjbTFoYkdsNlpXUWdkRzhnZHpOaklITndaV056SUdGdVpDQmtiMlZ6SUc1dmRDQndjbTkyYVdSbElIUm9aU0JVYjNWamFFeHBjM1JjYmlBZ0lDQWdJQ0FnYUdGdVpHeGxWRzkxWTJnb1pYWmxiblFwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCMllYSWdhR0Z1Wkd4bFZHOTFZMmdnUFNCbWRXNWpkR2x2YmlobGRtVnVkQ2w3WEc0Z0lDQWdJQ0IyWVhJZ2RHOTFZMmhsY3lBOUlHVjJaVzUwTG1Ob1lXNW5aV1JVYjNWamFHVnpMRnh1SUNBZ0lDQWdJQ0FnSUdacGNuTjBJRDBnZEc5MVkyaGxjMXN3WFN4Y2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEZSNWNHVnpJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkRzkxWTJoemRHRnlkRG9nSjIxdmRYTmxaRzkzYmljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjNWamFHMXZkbVU2SUNkdGIzVnpaVzF2ZG1VbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5MVkyaGxibVE2SUNkdGIzVnpaWFZ3SjF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pTQTlJR1YyWlc1MFZIbHdaWE5iWlhabGJuUXVkSGx3WlYwc1hHNGdJQ0FnSUNBZ0lDQWdjMmx0ZFd4aGRHVmtSWFpsYm5SY2JpQWdJQ0FnSUNBZ08xeHVYRzRnSUNBZ0lDQnBaaWduVFc5MWMyVkZkbVZ1ZENjZ2FXNGdkMmx1Wkc5M0lDWW1JSFI1Y0dWdlppQjNhVzVrYjNjdVRXOTFjMlZGZG1WdWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQnphVzExYkdGMFpXUkZkbVZ1ZENBOUlHNWxkeUIzYVc1a2IzY3VUVzkxYzJWRmRtVnVkQ2gwZVhCbExDQjdYRzRnSUNBZ0lDQWdJQ0FnSjJKMVltSnNaWE1uT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNkallXNWpaV3hoWW14bEp6b2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQW5jMk55WldWdVdDYzZJR1pwY25OMExuTmpjbVZsYmxnc1hHNGdJQ0FnSUNBZ0lDQWdKM05qY21WbGJsa25PaUJtYVhKemRDNXpZM0psWlc1WkxGeHVJQ0FnSUNBZ0lDQWdJQ2RqYkdsbGJuUllKem9nWm1seWMzUXVZMnhwWlc1MFdDeGNiaUFnSUNBZ0lDQWdJQ0FuWTJ4cFpXNTBXU2M2SUdacGNuTjBMbU5zYVdWdWRGbGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J6YVcxMWJHRjBaV1JGZG1WdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVjJaVzUwS0NkTmIzVnpaVVYyWlc1MEp5azdYRzRnSUNBZ0lDQWdJSE5wYlhWc1lYUmxaRVYyWlc1MExtbHVhWFJOYjNWelpVVjJaVzUwS0hSNWNHVXNJSFJ5ZFdVc0lIUnlkV1VzSUhkcGJtUnZkeXdnTVN3Z1ptbHljM1F1YzJOeVpXVnVXQ3dnWm1seWMzUXVjMk55WldWdVdTd2dabWx5YzNRdVkyeHBaVzUwV0N3Z1ptbHljM1F1WTJ4cFpXNTBXU3dnWm1Gc2MyVXNJR1poYkhObExDQm1ZV3h6WlN3Z1ptRnNjMlVzSURBdktteGxablFxTHl3Z2JuVnNiQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JtYVhKemRDNTBZWEpuWlhRdVpHbHpjR0YwWTJoRmRtVnVkQ2h6YVcxMWJHRjBaV1JGZG1WdWRDazdYRzRnSUNBZ2ZUdGNiaUFnZlR0Y2JuMDdYRzVjYmxSdmRXTm9MbWx1YVhRZ1BTQm1kVzVqZEdsdmJpZ2tLU0I3WEc0Z0lHbG1LSFI1Y0dWdlppZ2tMbk53YjNSVGQybHdaU2tnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdWRzkxWTJndWMyVjBkWEJUY0c5MFUzZHBjR1VvSkNrN1hHNGdJQ0FnVkc5MVkyZ3VjMlYwZFhCVWIzVmphRWhoYm1Sc1pYSW9KQ2s3WEc0Z0lIMWNibjA3WEc1Y2JtVjRjRzl5ZENCN1ZHOTFZMmg5TzF4dUlsMTlcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLnRvdWNoLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRyaWdnZXJzID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfanF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbnZhciBfanF1ZXJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2pxdWVyeSk7XG5cbnZhciBfZm91bmRhdGlvblV0aWwgPSByZXF1aXJlKCcuL2ZvdW5kYXRpb24udXRpbC5tb3Rpb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmaXhlcyA9IFsnV2ViS2l0JywgJ01veicsICdPJywgJ01zJywgJyddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgcmV0dXJuIHdpbmRvd1twcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJ107XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0oKTtcblxudmFyIHRyaWdnZXJzID0gZnVuY3Rpb24gdHJpZ2dlcnMoZWwsIHR5cGUpIHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArIGlkKVt0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10odHlwZSArICcuemYudHJpZ2dlcicsIFtlbF0pO1xuICB9KTtcbn07XG5cbnZhciBUcmlnZ2VycyA9IHtcbiAgTGlzdGVuZXJzOiB7XG4gICAgQmFzaWM6IHt9LFxuICAgIEdsb2JhbDoge31cbiAgfSxcbiAgSW5pdGlhbGl6ZXJzOiB7fVxufTtcblxuVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljID0ge1xuICBvcGVuTGlzdGVuZXI6IGZ1bmN0aW9uIG9wZW5MaXN0ZW5lcigpIHtcbiAgICB0cmlnZ2VycygoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksICdvcGVuJyk7XG4gIH0sXG4gIGNsb3NlTGlzdGVuZXI6IGZ1bmN0aW9uIGNsb3NlTGlzdGVuZXIoKSB7XG4gICAgdmFyIGlkID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICB0cmlnZ2VycygoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyksICdjbG9zZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlTGlzdGVuZXI6IGZ1bmN0aW9uIHRvZ2dsZUxpc3RlbmVyKCkge1xuICAgIHZhciBpZCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5kYXRhKCd0b2dnbGUnKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIHRyaWdnZXJzKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSwgJ3RvZ2dsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykudHJpZ2dlcigndG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICB9XG4gIH0sXG4gIGNsb3NlYWJsZUxpc3RlbmVyOiBmdW5jdGlvbiBjbG9zZWFibGVMaXN0ZW5lcihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgYW5pbWF0aW9uID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgICBpZiAoYW5pbWF0aW9uICE9PSAnJykge1xuICAgICAgX2ZvdW5kYXRpb25VdGlsLk1vdGlvbi5hbmltYXRlT3V0KCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKSwgYW5pbWF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuZmFkZU91dCgpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgIH1cbiAgfSxcbiAgdG9nZ2xlRm9jdXNMaXN0ZW5lcjogZnVuY3Rpb24gdG9nZ2xlRm9jdXNMaXN0ZW5lcigpIHtcbiAgICB2YXIgaWQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcykuZGF0YSgndG9nZ2xlLWZvY3VzJyk7XG4gICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjJyArIGlkKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpXSk7XG4gIH1cbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtb3Blbl0gd2lsbCByZXZlYWwgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkT3Blbkxpc3RlbmVyID0gZnVuY3Rpb24gKCRlbGVtKSB7XG4gICRlbGVtLm9mZignY2xpY2suemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1vcGVuXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5vcGVuTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zZV0gd2lsbCBjbG9zZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbi8vIElmIHVzZWQgd2l0aG91dCBhIHZhbHVlIG9uIFtkYXRhLWNsb3NlXSwgdGhlIGV2ZW50IHdpbGwgYnViYmxlLCBhbGxvd2luZyBpdCB0byBjbG9zZSBhIHBhcmVudCBjb21wb25lbnQuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkQ2xvc2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VMaXN0ZW5lcik7XG4gICRlbGVtLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy5jbG9zZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlXSB3aWxsIHRvZ2dsZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRUb2dnbGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2NsaWNrLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGVdJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkJhc2ljLnRvZ2dsZUxpc3RlbmVyKTtcbn07XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2FibGVdIHdpbGwgcmVzcG9uZCB0byBjbG9zZS56Zi50cmlnZ2VyIGV2ZW50cy5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lciA9IGZ1bmN0aW9uICgkZWxlbSkge1xuICAkZWxlbS5vZmYoJ2Nsb3NlLnpmLnRyaWdnZXInLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xuICAkZWxlbS5vbignY2xvc2UuemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZWFibGVdLCBbZGF0YS1jbG9zYWJsZV0nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMuY2xvc2VhYmxlTGlzdGVuZXIpO1xufTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGUtZm9jdXNdIHdpbGwgcmVzcG9uZCB0byBjb21pbmcgaW4gYW5kIG91dCBvZiBmb2N1c1xuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUZvY3VzTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgJGVsZW0ub2ZmKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5CYXNpYy50b2dnbGVGb2N1c0xpc3RlbmVyKTtcbiAgJGVsZW0ub24oJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZS1mb2N1c10nLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuQmFzaWMudG9nZ2xlRm9jdXNMaXN0ZW5lcik7XG59O1xuXG4vLyBNb3JlIEdsb2JhbC9jb21wbGV4IGxpc3RlbmVycyBhbmQgdHJpZ2dlcnNcblRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwgPSB7XG4gIHJlc2l6ZUxpc3RlbmVyOiBmdW5jdGlvbiByZXNpemVMaXN0ZW5lcigkbm9kZXMpIHtcbiAgICBpZiAoIU11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIC8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwicmVzaXplXCIpO1xuICB9LFxuICBzY3JvbGxMaXN0ZW5lcjogZnVuY3Rpb24gc2Nyb2xsTGlzdGVuZXIoJG5vZGVzKSB7XG4gICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBzY3JvbGwgZXZlbnRcbiAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInNjcm9sbFwiKTtcbiAgfSxcbiAgY2xvc2VNZUxpc3RlbmVyOiBmdW5jdGlvbiBjbG9zZU1lTGlzdGVuZXIoZSwgcGx1Z2luSWQpIHtcbiAgICB2YXIgcGx1Z2luID0gZS5uYW1lc3BhY2Uuc3BsaXQoJy4nKVswXTtcbiAgICB2YXIgcGx1Z2lucyA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtJyArIHBsdWdpbiArICddJykubm90KCdbZGF0YS15ZXRpLWJveD1cIicgKyBwbHVnaW5JZCArICdcIl0nKTtcblxuICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkodGhpcyk7XG4gICAgICBfdGhpcy50cmlnZ2VySGFuZGxlcignY2xvc2UuemYudHJpZ2dlcicsIFtfdGhpc10pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gR2xvYmFsLCBwYXJzZXMgd2hvbGUgZG9jdW1lbnQuXG59O1RyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZW1lTGlzdGVuZXIgPSBmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICB2YXIgeWV0aUJveGVzID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZiAocGx1Z2luTmFtZSkge1xuICAgIGlmICh0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdOYW1lcy5wdXNoKHBsdWdpbk5hbWUpO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBwbHVnaW5OYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwbHVnaW5OYW1lKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z05hbWVzLmNvbmNhdChwbHVnaW5OYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZiAoeWV0aUJveGVzLmxlbmd0aCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBwbHVnTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ2Nsb3NlbWUuemYuJyArIG5hbWU7XG4gICAgfSkuam9pbignICcpO1xuXG4gICAgKDAsIF9qcXVlcnkyLmRlZmF1bHQpKHdpbmRvdykub2ZmKGxpc3RlbmVycykub24obGlzdGVuZXJzLCBUcmlnZ2Vycy5MaXN0ZW5lcnMuR2xvYmFsLmNsb3NlTWVMaXN0ZW5lcik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsIHRyaWdnZXIsIGxpc3RlbmVyKSB7XG4gIHZhciB0aW1lciA9IHZvaWQgMCxcbiAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkod2luZG93KS5vZmYodHJpZ2dlcikub24odHJpZ2dlciwgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgfVxuICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCBkZWJvdW5jZSB8fCAxMCk7IC8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gIH0pO1xufVxuXG5UcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoZGVib3VuY2UpIHtcbiAgdmFyICRub2RlcyA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnW2RhdGEtcmVzaXplXScpO1xuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIGRlYm91bmNlR2xvYmFsTGlzdGVuZXIoZGVib3VuY2UsICdyZXNpemUuemYudHJpZ2dlcicsIFRyaWdnZXJzLkxpc3RlbmVycy5HbG9iYWwucmVzaXplTGlzdGVuZXIsICRub2Rlcyk7XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTY3JvbGxMaXN0ZW5lciA9IGZ1bmN0aW9uIChkZWJvdW5jZSkge1xuICB2YXIgJG5vZGVzID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdbZGF0YS1zY3JvbGxdJyk7XG4gIGlmICgkbm9kZXMubGVuZ3RoKSB7XG4gICAgZGVib3VuY2VHbG9iYWxMaXN0ZW5lcihkZWJvdW5jZSwgJ3Njcm9sbC56Zi50cmlnZ2VyJywgVHJpZ2dlcnMuTGlzdGVuZXJzLkdsb2JhbC5zY3JvbGxMaXN0ZW5lciwgJG5vZGVzKTtcbiAgfVxufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZE11dGF0aW9uRXZlbnRzTGlzdGVuZXIgPSBmdW5jdGlvbiAoJGVsZW0pIHtcbiAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciAkbm9kZXMgPSAkZWxlbS5maW5kKCdbZGF0YS1yZXNpemVdLCBbZGF0YS1zY3JvbGxdLCBbZGF0YS1tdXRhdGVdJyk7XG5cbiAgLy9lbGVtZW50IGNhbGxiYWNrXG4gIHZhciBsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uID0gZnVuY3Rpb24gbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbihtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkobXV0YXRpb25SZWNvcmRzTGlzdFswXS50YXJnZXQpO1xuXG4gICAgLy90cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgZWxlbWVudCBkZXBlbmRpbmcgb24gdHlwZVxuICAgIHN3aXRjaCAobXV0YXRpb25SZWNvcmRzTGlzdFswXS50eXBlKSB7XG4gICAgICBjYXNlIFwiYXR0cmlidXRlc1wiOlxuICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwic2Nyb2xsXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcbiAgICAgICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQsIHdpbmRvdy5wYWdlWU9mZnNldF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJyZXNpemVcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuICAgICAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwic3R5bGVcIikge1xuICAgICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsIFwibXV0YXRlXCIpO1xuICAgICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiY2hpbGRMaXN0XCI6XG4gICAgICAgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsIFwibXV0YXRlXCIpO1xuICAgICAgICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vbm90aGluZ1xuICAgIH1cbiAgfTtcblxuICBpZiAoJG5vZGVzLmxlbmd0aCkge1xuICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgb3IgbXV0YXRpb24gYWRkIGEgc2luZ2xlIG9ic2VydmVyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gJG5vZGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgdmFyIGVsZW1lbnRPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24pO1xuICAgICAgZWxlbWVudE9ic2VydmVyLm9ic2VydmUoJG5vZGVzW2ldLCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6IHRydWUsIGF0dHJpYnV0ZUZpbHRlcjogW1wiZGF0YS1ldmVudHNcIiwgXCJzdHlsZVwiXSB9KTtcbiAgICB9XG4gIH1cbn07XG5cblRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciAkZG9jdW1lbnQgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZG9jdW1lbnQpO1xuXG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRPcGVuTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlTGlzdGVuZXIoJGRvY3VtZW50KTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZFRvZ2dsZUxpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRDbG9zZWFibGVMaXN0ZW5lcigkZG9jdW1lbnQpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkVG9nZ2xlRm9jdXNMaXN0ZW5lcigkZG9jdW1lbnQpO1xufTtcblxuVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyICRkb2N1bWVudCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRNdXRhdGlvbkV2ZW50c0xpc3RlbmVyKCRkb2N1bWVudCk7XG4gIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRSZXNpemVMaXN0ZW5lcigpO1xuICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2Nyb2xsTGlzdGVuZXIoKTtcbiAgVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZENsb3NlbWVMaXN0ZW5lcigpO1xufTtcblxuVHJpZ2dlcnMuaW5pdCA9IGZ1bmN0aW9uICgkLCBGb3VuZGF0aW9uKSB7XG4gIGlmICh0eXBlb2YgJC50cmlnZ2Vyc0luaXRpYWxpemVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRTaW1wbGVMaXN0ZW5lcnMoKTtcbiAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBUcmlnZ2Vycy5Jbml0aWFsaXplcnMuYWRkU2ltcGxlTGlzdGVuZXJzKCk7XG4gICAgICAgIFRyaWdnZXJzLkluaXRpYWxpemVycy5hZGRHbG9iYWxMaXN0ZW5lcnMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICQudHJpZ2dlcnNJbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBpZiAoRm91bmRhdGlvbikge1xuICAgIEZvdW5kYXRpb24uVHJpZ2dlcnMgPSBUcmlnZ2VycztcbiAgICAvLyBMZWdhY3kgaW5jbHVkZWQgdG8gYmUgYmFja3dhcmRzIGNvbXBhdGlibGUgZm9yIG5vdy5cbiAgICBGb3VuZGF0aW9uLklIZWFyWW91ID0gVHJpZ2dlcnMuSW5pdGlhbGl6ZXJzLmFkZEdsb2JhbExpc3RlbmVycztcbiAgfVxufTtcblxuZXhwb3J0cy5UcmlnZ2VycyA9IFRyaWdnZXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1admRXNWtZWFJwYjI0dWRYUnBiQzUwY21sbloyVnljeTVxY3lKZExDSnVZVzFsY3lJNld5Sk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUlpd2ljSEpsWm1sNFpYTWlMQ0pwSWl3aWJHVnVaM1JvSWl3aWQybHVaRzkzSWl3aWRISnBaMmRsY25NaUxDSmxiQ0lzSW5SNWNHVWlMQ0prWVhSaElpd2ljM0JzYVhRaUxDSm1iM0pGWVdOb0lpd2lhV1FpTENKVWNtbG5aMlZ5Y3lJc0lreHBjM1JsYm1WeWN5SXNJa0poYzJsaklpd2lSMnh2WW1Gc0lpd2lTVzVwZEdsaGJHbDZaWEp6SWl3aWIzQmxia3hwYzNSbGJtVnlJaXdpWTJ4dmMyVk1hWE4wWlc1bGNpSXNJblJ5YVdkblpYSWlMQ0owYjJkbmJHVk1hWE4wWlc1bGNpSXNJbU5zYjNObFlXSnNaVXhwYzNSbGJtVnlJaXdpWlNJc0luTjBiM0JRY205d1lXZGhkR2x2YmlJc0ltRnVhVzFoZEdsdmJpSXNJazF2ZEdsdmJpSXNJbUZ1YVcxaGRHVlBkWFFpTENKbVlXUmxUM1YwSWl3aWRHOW5aMnhsUm05amRYTk1hWE4wWlc1bGNpSXNJblJ5YVdkblpYSklZVzVrYkdWeUlpd2lZV1JrVDNCbGJreHBjM1JsYm1WeUlpd2lKR1ZzWlcwaUxDSnZabVlpTENKdmJpSXNJbUZrWkVOc2IzTmxUR2x6ZEdWdVpYSWlMQ0poWkdSVWIyZG5iR1ZNYVhOMFpXNWxjaUlzSW1Ga1pFTnNiM05sWVdKc1pVeHBjM1JsYm1WeUlpd2lZV1JrVkc5bloyeGxSbTlqZFhOTWFYTjBaVzVsY2lJc0luSmxjMmw2WlV4cGMzUmxibVZ5SWl3aUpHNXZaR1Z6SWl3aVpXRmphQ0lzSW1GMGRISWlMQ0p6WTNKdmJHeE1hWE4wWlc1bGNpSXNJbU5zYjNObFRXVk1hWE4wWlc1bGNpSXNJbkJzZFdkcGJrbGtJaXdpY0d4MVoybHVJaXdpYm1GdFpYTndZV05sSWl3aWNHeDFaMmx1Y3lJc0ltNXZkQ0lzSWw5MGFHbHpJaXdpWVdSa1EyeHZjMlZ0WlV4cGMzUmxibVZ5SWl3aWNHeDFaMmx1VG1GdFpTSXNJbmxsZEdsQ2IzaGxjeUlzSW5Cc2RXZE9ZVzFsY3lJc0luQjFjMmdpTENKamIyNWpZWFFpTENKamIyNXpiMnhsSWl3aVpYSnliM0lpTENKc2FYTjBaVzVsY25NaUxDSnRZWEFpTENKdVlXMWxJaXdpYW05cGJpSXNJbVJsWW05MWJtTmxSMnh2WW1Gc1RHbHpkR1Z1WlhJaUxDSmtaV0p2ZFc1alpTSXNJbXhwYzNSbGJtVnlJaXdpZEdsdFpYSWlMQ0poY21keklpd2lRWEp5WVhraUxDSndjbTkwYjNSNWNHVWlMQ0p6YkdsalpTSXNJbU5oYkd3aUxDSmhjbWQxYldWdWRITWlMQ0pqYkdWaGNsUnBiV1Z2ZFhRaUxDSnpaWFJVYVcxbGIzVjBJaXdpWVhCd2JIa2lMQ0poWkdSU1pYTnBlbVZNYVhOMFpXNWxjaUlzSW1Ga1pGTmpjbTlzYkV4cGMzUmxibVZ5SWl3aVlXUmtUWFYwWVhScGIyNUZkbVZ1ZEhOTWFYTjBaVzVsY2lJc0ltWnBibVFpTENKc2FYTjBaVzVwYm1kRmJHVnRaVzUwYzAxMWRHRjBhVzl1SWl3aWJYVjBZWFJwYjI1U1pXTnZjbVJ6VEdsemRDSXNJaVIwWVhKblpYUWlMQ0owWVhKblpYUWlMQ0poZEhSeWFXSjFkR1ZPWVcxbElpd2ljR0ZuWlZsUFptWnpaWFFpTENKamJHOXpaWE4wSWl3aVpXeGxiV1Z1ZEU5aWMyVnlkbVZ5SWl3aWIySnpaWEoyWlNJc0ltRjBkSEpwWW5WMFpYTWlMQ0pqYUdsc1pFeHBjM1FpTENKamFHRnlZV04wWlhKRVlYUmhJaXdpYzNWaWRISmxaU0lzSW1GMGRISnBZblYwWlVacGJIUmxjaUlzSW1Ga1pGTnBiWEJzWlV4cGMzUmxibVZ5Y3lJc0lpUmtiMk4xYldWdWRDSXNJbVJ2WTNWdFpXNTBJaXdpWVdSa1IyeHZZbUZzVEdsemRHVnVaWEp6SWl3aWFXNXBkQ0lzSWlRaUxDSkdiM1Z1WkdGMGFXOXVJaXdpZEhKcFoyZGxjbk5KYm1sMGFXRnNhWHBsWkNJc0luSmxZV1I1VTNSaGRHVWlMQ0pKU0dWaGNsbHZkU0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdPenRCUVVWQk96czdPMEZCUTBFN096czdRVUZGUVN4SlFVRk5RU3h0UWtGQmIwSXNXVUZCV1R0QlFVTndReXhOUVVGSlF5eFhRVUZYTEVOQlFVTXNVVUZCUkN4RlFVRlhMRXRCUVZnc1JVRkJhMElzUjBGQmJFSXNSVUZCZFVJc1NVRkJka0lzUlVGQk5rSXNSVUZCTjBJc1EwRkJaanRCUVVOQkxFOUJRVXNzU1VGQlNVTXNTVUZCUlN4RFFVRllMRVZCUVdOQkxFbEJRVWxFTEZOQlFWTkZMRTFCUVROQ0xFVkJRVzFEUkN4SFFVRnVReXhGUVVGM1F6dEJRVU4wUXl4UlFVRlBSQ3hUUVVGVFF5eERRVUZVTEVOQlFVZ3NlVUpCUVc5RFJTeE5RVUY0UXl4RlFVRm5SRHRCUVVNNVF5eGhRVUZQUVN4UFFVRlZTQ3hUUVVGVFF5eERRVUZVTEVOQlFWWXNjMEpCUVZBN1FVRkRSRHRCUVVOR08wRkJRMFFzVTBGQlR5eExRVUZRTzBGQlEwUXNRMEZTZVVJc1JVRkJNVUk3TzBGQlZVRXNTVUZCVFVjc1YwRkJWeXhUUVVGWVFTeFJRVUZYTEVOQlFVTkRMRVZCUVVRc1JVRkJTME1zU1VGQlRDeEZRVUZqTzBGQlF6ZENSQ3hMUVVGSFJTeEpRVUZJTEVOQlFWRkVMRWxCUVZJc1JVRkJZMFVzUzBGQlpDeERRVUZ2UWl4SFFVRndRaXhGUVVGNVFrTXNUMEZCZWtJc1EwRkJhVU1zWTBGQlRUdEJRVU55UXl4blEwRkJUVU1zUlVGQlRpeEZRVUZoU2l4VFFVRlRMRTlCUVZRc1IwRkJiVUlzVTBGQmJrSXNSMEZCSzBJc1owSkJRVFZETEVWQlFXbEZRU3hKUVVGcVJTeHJRa0ZCYjBZc1EwRkJRMFFzUlVGQlJDeERRVUZ3Ump0QlFVTkVMRWRCUmtRN1FVRkhSQ3hEUVVwRU96dEJRVTFCTEVsQlFVbE5MRmRCUVZjN1FVRkRZa01zWVVGQlZ6dEJRVU5VUXl4WFFVRlBMRVZCUkVVN1FVRkZWRU1zV1VGQlVUdEJRVVpETEVkQlJFVTdRVUZMWWtNc1owSkJRV003UVVGTVJDeERRVUZtT3p0QlFWRkJTaXhUUVVGVFF5eFRRVUZVTEVOQlFXMUNReXhMUVVGdVFpeEhRVUUwUWp0QlFVTXhRa2NzWjBKQlFXTXNkMEpCUVZjN1FVRkRka0phTEdGQlFWTXNjMEpCUVVVc1NVRkJSaXhEUVVGVUxFVkJRV3RDTEUxQlFXeENPMEZCUTBRc1IwRkllVUk3UVVGSk1VSmhMR2xDUVVGbExIbENRVUZYTzBGQlEzaENMRkZCUVVsUUxFdEJRVXNzYzBKQlFVVXNTVUZCUml4RlFVRlJTQ3hKUVVGU0xFTkJRV0VzVDBGQllpeERRVUZVTzBGQlEwRXNVVUZCU1Vjc1JVRkJTaXhGUVVGUk8wRkJRMDVPTEdWQlFWTXNjMEpCUVVVc1NVRkJSaXhEUVVGVUxFVkJRV3RDTEU5QlFXeENPMEZCUTBRc1MwRkdSQ3hOUVVkTE8wRkJRMGdzTkVKQlFVVXNTVUZCUml4RlFVRlJZeXhQUVVGU0xFTkJRV2RDTEd0Q1FVRm9RanRCUVVORU8wRkJRMFlzUjBGYWVVSTdRVUZoTVVKRExHdENRVUZuUWl3d1FrRkJWenRCUVVONlFpeFJRVUZKVkN4TFFVRkxMSE5DUVVGRkxFbEJRVVlzUlVGQlVVZ3NTVUZCVWl4RFFVRmhMRkZCUVdJc1EwRkJWRHRCUVVOQkxGRkJRVWxITEVWQlFVb3NSVUZCVVR0QlFVTk9UaXhsUVVGVExITkNRVUZGTEVsQlFVWXNRMEZCVkN4RlFVRnJRaXhSUVVGc1FqdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1MRFJDUVVGRkxFbEJRVVlzUlVGQlVXTXNUMEZCVWl4RFFVRm5RaXh0UWtGQmFFSTdRVUZEUkR0QlFVTkdMRWRCY0VKNVFqdEJRWEZDTVVKRkxIRkNRVUZ0UWl3eVFrRkJVME1zUTBGQlZDeEZRVUZaTzBGQlF6ZENRU3hOUVVGRlF5eGxRVUZHTzBGQlEwRXNVVUZCU1VNc1dVRkJXU3h6UWtGQlJTeEpRVUZHTEVWQlFWRm9RaXhKUVVGU0xFTkJRV0VzVlVGQllpeERRVUZvUWpzN1FVRkZRU3hSUVVGSFowSXNZMEZCWXl4RlFVRnFRaXhGUVVGdlFqdEJRVU5zUWtNc05rSkJRVTlETEZWQlFWQXNRMEZCYTBJc2MwSkJRVVVzU1VGQlJpeERRVUZzUWl4RlFVRXlRa1lzVTBGQk0wSXNSVUZCYzBNc1dVRkJWenRCUVVNdlF5dzRRa0ZCUlN4SlFVRkdMRVZCUVZGTUxFOUJRVklzUTBGQlowSXNWMEZCYUVJN1FVRkRSQ3hQUVVaRU8wRkJSMFFzUzBGS1JDeE5RVWxMTzBGQlEwZ3NORUpCUVVVc1NVRkJSaXhGUVVGUlVTeFBRVUZTTEVkQlFXdENVaXhQUVVGc1FpeERRVUV3UWl4WFFVRXhRanRCUVVORU8wRkJRMFlzUjBGb1EzbENPMEZCYVVNeFFsTXNkVUpCUVhGQ0xDdENRVUZYTzBGQlF6bENMRkZCUVVscVFpeExRVUZMTEhOQ1FVRkZMRWxCUVVZc1JVRkJVVWdzU1VGQlVpeERRVUZoTEdOQlFXSXNRMEZCVkR0QlFVTkJMR2REUVVGTlJ5eEZRVUZPTEVWQlFWbHJRaXhqUVVGYUxFTkJRVEpDTEcxQ1FVRXpRaXhGUVVGblJDeERRVUZETEhOQ1FVRkZMRWxCUVVZc1EwRkJSQ3hEUVVGb1JEdEJRVU5FTzBGQmNFTjVRaXhEUVVFMVFqczdRVUYxUTBFN1FVRkRRV3BDTEZOQlFWTkpMRmxCUVZRc1EwRkJjMEpqTEdWQlFYUkNMRWRCUVhkRExGVkJRVU5ETEV0QlFVUXNSVUZCVnp0QlFVTnFSRUVzVVVGQlRVTXNSMEZCVGl4RFFVRlZMR3RDUVVGV0xFVkJRVGhDY0VJc1UwRkJVME1zVTBGQlZDeERRVUZ0UWtNc1MwRkJia0lzUTBGQmVVSkhMRmxCUVhaRU8wRkJRMEZqTEZGQlFVMUZMRVZCUVU0c1EwRkJVeXhyUWtGQlZDeEZRVUUyUWl4aFFVRTNRaXhGUVVFMFEzSkNMRk5CUVZORExGTkJRVlFzUTBGQmJVSkRMRXRCUVc1Q0xFTkJRWGxDUnl4WlFVRnlSVHRCUVVORUxFTkJTRVE3TzBGQlMwRTdRVUZEUVR0QlFVTkJUQ3hUUVVGVFNTeFpRVUZVTEVOQlFYTkNhMElzWjBKQlFYUkNMRWRCUVhsRExGVkJRVU5JTEV0QlFVUXNSVUZCVnp0QlFVTnNSRUVzVVVGQlRVTXNSMEZCVGl4RFFVRlZMR3RDUVVGV0xFVkJRVGhDY0VJc1UwRkJVME1zVTBGQlZDeERRVUZ0UWtNc1MwRkJia0lzUTBGQmVVSkpMR0ZCUVhaRU8wRkJRMEZoTEZGQlFVMUZMRVZCUVU0c1EwRkJVeXhyUWtGQlZDeEZRVUUyUWl4alFVRTNRaXhGUVVFMlEzSkNMRk5CUVZORExGTkJRVlFzUTBGQmJVSkRMRXRCUVc1Q0xFTkJRWGxDU1N4aFFVRjBSVHRCUVVORUxFTkJTRVE3TzBGQlMwRTdRVUZEUVU0c1UwRkJVMGtzV1VGQlZDeERRVUZ6UW0xQ0xHbENRVUYwUWl4SFFVRXdReXhWUVVGRFNpeExRVUZFTEVWQlFWYzdRVUZEYmtSQkxGRkJRVTFETEVkQlFVNHNRMEZCVlN4clFrRkJWaXhGUVVFNFFuQkNMRk5CUVZORExGTkJRVlFzUTBGQmJVSkRMRXRCUVc1Q0xFTkJRWGxDVFN4alFVRjJSRHRCUVVOQlZ5eFJRVUZOUlN4RlFVRk9MRU5CUVZNc2EwSkJRVlFzUlVGQk5rSXNaVUZCTjBJc1JVRkJPRU55UWl4VFFVRlRReXhUUVVGVUxFTkJRVzFDUXl4TFFVRnVRaXhEUVVGNVFrMHNZMEZCZGtVN1FVRkRSQ3hEUVVoRU96dEJRVXRCTzBGQlEwRlNMRk5CUVZOSkxGbEJRVlFzUTBGQmMwSnZRaXh2UWtGQmRFSXNSMEZCTmtNc1ZVRkJRMHdzUzBGQlJDeEZRVUZYTzBGQlEzUkVRU3hSUVVGTlF5eEhRVUZPTEVOQlFWVXNhMEpCUVZZc1JVRkJPRUp3UWl4VFFVRlRReXhUUVVGVUxFTkJRVzFDUXl4TFFVRnVRaXhEUVVGNVFrOHNhVUpCUVhaRU8wRkJRMEZWTEZGQlFVMUZMRVZCUVU0c1EwRkJVeXhyUWtGQlZDeEZRVUUyUWl4dFEwRkJOMElzUlVGQmEwVnlRaXhUUVVGVFF5eFRRVUZVTEVOQlFXMUNReXhMUVVGdVFpeERRVUY1UWs4c2FVSkJRVE5HTzBGQlEwUXNRMEZJUkRzN1FVRkxRVHRCUVVOQlZDeFRRVUZUU1N4WlFVRlVMRU5CUVhOQ2NVSXNjMEpCUVhSQ0xFZEJRU3RETEZWQlFVTk9MRXRCUVVRc1JVRkJWenRCUVVONFJFRXNVVUZCVFVNc1IwRkJUaXhEUVVGVkxHdERRVUZXTEVWQlFUaERjRUlzVTBGQlUwTXNVMEZCVkN4RFFVRnRRa01zUzBGQmJrSXNRMEZCZVVKakxHMUNRVUYyUlR0QlFVTkJSeXhSUVVGTlJTeEZRVUZPTEVOQlFWTXNhME5CUVZRc1JVRkJOa01zY1VKQlFUZERMRVZCUVc5RmNrSXNVMEZCVTBNc1UwRkJWQ3hEUVVGdFFrTXNTMEZCYmtJc1EwRkJlVUpqTEcxQ1FVRTNSanRCUVVORUxFTkJTRVE3TzBGQlQwRTdRVUZEUVdoQ0xGTkJRVk5ETEZOQlFWUXNRMEZCYlVKRkxFMUJRVzVDTEVkQlFUWkNPMEZCUXpOQ2RVSXNhMEpCUVdkQ0xIZENRVUZUUXl4TlFVRlVMRVZCUVdsQ08wRkJReTlDTEZGQlFVY3NRMEZCUTNaRExHZENRVUZLTEVWQlFYRkNPMEZCUVVNN1FVRkRjRUoxUXl4aFFVRlBReXhKUVVGUUxFTkJRVmtzV1VGQlZUdEJRVU53UWl3NFFrRkJSU3hKUVVGR0xFVkJRVkZZTEdOQlFWSXNRMEZCZFVJc2NVSkJRWFpDTzBGQlEwUXNUMEZHUkR0QlFVZEVPMEZCUTBRN1FVRkRRVlVzVjBGQlQwVXNTVUZCVUN4RFFVRlpMR0ZCUVZvc1JVRkJNa0lzVVVGQk0wSTdRVUZEUkN4SFFWUXdRanRCUVZVelFrTXNhMEpCUVdkQ0xIZENRVUZUU0N4TlFVRlVMRVZCUVdsQ08wRkJReTlDTEZGQlFVY3NRMEZCUTNaRExHZENRVUZLTEVWQlFYRkNPMEZCUVVNN1FVRkRjRUoxUXl4aFFVRlBReXhKUVVGUUxFTkJRVmtzV1VGQlZUdEJRVU53UWl3NFFrRkJSU3hKUVVGR0xFVkJRVkZZTEdOQlFWSXNRMEZCZFVJc2NVSkJRWFpDTzBGQlEwUXNUMEZHUkR0QlFVZEVPMEZCUTBRN1FVRkRRVlVzVjBGQlQwVXNTVUZCVUN4RFFVRlpMR0ZCUVZvc1JVRkJNa0lzVVVGQk0wSTdRVUZEUkN4SFFXeENNRUk3UVVGdFFqTkNSU3h0UWtGQmFVSXNlVUpCUVZOeVFpeERRVUZVTEVWQlFWbHpRaXhSUVVGYUxFVkJRWEZDTzBGQlEzQkRMRkZCUVVsRExGTkJRVk4yUWl4RlFVRkZkMElzVTBGQlJpeERRVUZaY2tNc1MwRkJXaXhEUVVGclFpeEhRVUZzUWl4RlFVRjFRaXhEUVVGMlFpeERRVUZpTzBGQlEwRXNVVUZCU1hORExGVkJRVlVzYVVOQlFWZEdMRTFCUVZnc1VVRkJjMEpITEVkQlFYUkNMSE5DUVVFMlEwb3NVVUZCTjBNc1VVRkJaRHM3UVVGRlFVY3NXVUZCVVZBc1NVRkJVaXhEUVVGaExGbEJRVlU3UVVGRGNrSXNWVUZCU1ZNc1VVRkJVU3h6UWtGQlJTeEpRVUZHTEVOQlFWbzdRVUZEUVVFc1dVRkJUWEJDTEdOQlFVNHNRMEZCY1VJc2EwSkJRWEpDTEVWQlFYbERMRU5CUVVOdlFpeExRVUZFTEVOQlFYcERPMEZCUTBRc1MwRklSRHRCUVVsRU96dEJRVWRJTzBGQk9VSTJRaXhEUVVFM1FpeERRU3RDUVhKRExGTkJRVk5KTEZsQlFWUXNRMEZCYzBKclF5eHJRa0ZCZEVJc1IwRkJNa01zVlVGQlUwTXNWVUZCVkN4RlFVRnhRanRCUVVNNVJDeE5RVUZKUXl4WlFVRlpMSE5DUVVGRkxHbENRVUZHTEVOQlFXaENPMEZCUVVFc1RVRkRTVU1zV1VGQldTeERRVUZETEZWQlFVUXNSVUZCWVN4VFFVRmlMRVZCUVhkQ0xGRkJRWGhDTEVOQlJHaENPenRCUVVkQkxFMUJRVWRHTEZWQlFVZ3NSVUZCWXp0QlFVTmFMRkZCUVVjc1QwRkJUMEVzVlVGQlVDeExRVUZ6UWl4UlFVRjZRaXhGUVVGclF6dEJRVU5vUTBVc1owSkJRVlZETEVsQlFWWXNRMEZCWlVnc1ZVRkJaanRCUVVORUxFdEJSa1FzVFVGRlRTeEpRVUZITEZGQlFVOUJMRlZCUVZBc2VVTkJRVTlCTEZWQlFWQXNUMEZCYzBJc1VVRkJkRUlzU1VGQmEwTXNUMEZCVDBFc1YwRkJWeXhEUVVGWUxFTkJRVkFzUzBGQmVVSXNVVUZCT1VRc1JVRkJkVVU3UVVGRE0wVkZMR2RDUVVGVlJTeE5RVUZXTEVOQlFXbENTaXhWUVVGcVFqdEJRVU5FTEV0QlJrc3NUVUZGUkR0QlFVTklTeXhqUVVGUlF5eExRVUZTTEVOQlFXTXNPRUpCUVdRN1FVRkRSRHRCUVVOR08wRkJRMFFzVFVGQlIwd3NWVUZCVldwRUxFMUJRV0lzUlVGQmIwSTdRVUZEYkVJc1VVRkJTWFZFTEZsQlFWbE1MRlZCUVZWTkxFZEJRVllzUTBGQll5eFZRVUZEUXl4SlFVRkVMRVZCUVZVN1FVRkRkRU1zTmtKQlFYRkNRU3hKUVVGeVFqdEJRVU5FTEV0QlJtVXNSVUZGWWtNc1NVRkdZU3hEUVVWU0xFZEJSbEVzUTBGQmFFSTdPMEZCU1VFc01FSkJRVVY2UkN4TlFVRkdMRVZCUVZVMFFpeEhRVUZXTEVOQlFXTXdRaXhUUVVGa0xFVkJRWGxDZWtJc1JVRkJla0lzUTBGQk5FSjVRaXhUUVVFMVFpeEZRVUYxUXpsRExGTkJRVk5ETEZOQlFWUXNRMEZCYlVKRkxFMUJRVzVDTEVOQlFUQkNORUlzWlVGQmFrVTdRVUZEUkR0QlFVTkdMRU5CY0VKRU96dEJRWE5DUVN4VFFVRlRiVUlzYzBKQlFWUXNRMEZCWjBORExGRkJRV2hETEVWQlFUQkROVU1zVDBGQk1VTXNSVUZCYlVRMlF5eFJRVUZ1UkN4RlFVRTJSRHRCUVVNelJDeE5RVUZKUXl4alFVRktPMEZCUVVFc1RVRkJWME1zVDBGQlQwTXNUVUZCVFVNc1UwRkJUaXhEUVVGblFrTXNTMEZCYUVJc1EwRkJjMEpETEVsQlFYUkNMRU5CUVRKQ1F5eFRRVUV6UWl4RlFVRnpReXhEUVVGMFF5eERRVUZzUWp0QlFVTkJMSGRDUVVGRmJrVXNUVUZCUml4RlFVRlZORUlzUjBGQlZpeERRVUZqWWl4UFFVRmtMRVZCUVhWQ1l5eEZRVUYyUWl4RFFVRXdRbVFzVDBGQk1VSXNSVUZCYlVNc1ZVRkJVMGNzUTBGQlZDeEZRVUZaTzBGQlF6ZERMRkZCUVVreVF5eExRVUZLTEVWQlFWYzdRVUZCUlU4c2JVSkJRV0ZRTEV0QlFXSTdRVUZCYzBJN1FVRkRia05CTEZsQlFWRlJMRmRCUVZjc1dVRkJWVHRCUVVNelFsUXNaVUZCVTFVc1MwRkJWQ3hEUVVGbExFbEJRV1lzUlVGQmNVSlNMRWxCUVhKQ08wRkJRMFFzUzBGR1R5eEZRVVZNU0N4WlFVRlpMRVZCUmxBc1EwRkJVaXhEUVVZMlF5eERRVWt4UWp0QlFVTndRaXhIUVV4RU8wRkJUVVE3TzBGQlJVUnVSQ3hUUVVGVFNTeFpRVUZVTEVOQlFYTkNNa1FzYVVKQlFYUkNMRWRCUVRCRExGVkJRVk5hTEZGQlFWUXNSVUZCYTBJN1FVRkRNVVFzVFVGQlNYaENMRk5CUVZNc2MwSkJRVVVzWlVGQlJpeERRVUZpTzBGQlEwRXNUVUZCUjBFc1QwRkJUM0JETEUxQlFWWXNSVUZCYVVJN1FVRkRaakpFTERKQ1FVRjFRa01zVVVGQmRrSXNSVUZCYVVNc2JVSkJRV3BETEVWQlFYTkVia1FzVTBGQlUwTXNVMEZCVkN4RFFVRnRRa1VzVFVGQmJrSXNRMEZCTUVKMVFpeGpRVUZvUml4RlFVRm5SME1zVFVGQmFFYzdRVUZEUkR0QlFVTkdMRU5CVEVRN08wRkJUMEV6UWl4VFFVRlRTU3haUVVGVUxFTkJRWE5DTkVRc2FVSkJRWFJDTEVkQlFUQkRMRlZCUVZOaUxGRkJRVlFzUlVGQmEwSTdRVUZETVVRc1RVRkJTWGhDTEZOQlFWTXNjMEpCUVVVc1pVRkJSaXhEUVVGaU8wRkJRMEVzVFVGQlIwRXNUMEZCVDNCRExFMUJRVllzUlVGQmFVSTdRVUZEWmpKRUxESkNRVUYxUWtNc1VVRkJka0lzUlVGQmFVTXNiVUpCUVdwRExFVkJRWE5FYmtRc1UwRkJVME1zVTBGQlZDeERRVUZ0UWtVc1RVRkJia0lzUTBGQk1FSXlRaXhqUVVGb1JpeEZRVUZuUjBnc1RVRkJhRWM3UVVGRFJEdEJRVU5HTEVOQlRFUTdPMEZCVDBFelFpeFRRVUZUU1N4WlFVRlVMRU5CUVhOQ05rUXNlVUpCUVhSQ0xFZEJRV3RFTEZWQlFWTTVReXhMUVVGVUxFVkJRV2RDTzBGQlEyaEZMRTFCUVVjc1EwRkJReTlDTEdkQ1FVRktMRVZCUVhGQ08wRkJRVVVzVjBGQlR5eExRVUZRTzBGQlFXVTdRVUZEZEVNc1RVRkJTWFZETEZOQlFWTlNMRTFCUVUwclF5eEpRVUZPTEVOQlFWY3NOa05CUVZnc1EwRkJZanM3UVVGRlFUdEJRVU5CTEUxQlFVbERMRFJDUVVFMFFpeFRRVUUxUWtFc2VVSkJRVFJDTEVOQlFWVkRMRzFDUVVGV0xFVkJRU3RDTzBGQlF6ZEVMRkZCUVVsRExGVkJRVlVzYzBKQlFVVkVMRzlDUVVGdlFpeERRVUZ3UWl4RlFVRjFRa1VzVFVGQmVrSXNRMEZCWkRzN1FVRkZRVHRCUVVOQkxGbEJRVkZHTEc5Q1FVRnZRaXhEUVVGd1FpeEZRVUYxUW5wRkxFbEJRUzlDTzBGQlEwVXNWMEZCU3l4WlFVRk1PMEZCUTBVc1dVRkJTVEJGTEZGQlFWRjRReXhKUVVGU0xFTkJRV0VzWVVGQllpeE5RVUZuUXl4UlFVRm9ReXhKUVVFMFEzVkRMRzlDUVVGdlFpeERRVUZ3UWl4RlFVRjFRa2NzWVVGQmRrSXNTMEZCZVVNc1lVRkJla1lzUlVGQmQwYzdRVUZEZEVkR0xHdENRVUZSY0VRc1kwRkJVaXhEUVVGMVFpeHhRa0ZCZGtJc1JVRkJPRU1zUTBGQlEyOUVMRTlCUVVRc1JVRkJWVGRGTEU5QlFVOW5SaXhYUVVGcVFpeERRVUU1UXp0QlFVTkVPMEZCUTBRc1dVRkJTVWdzVVVGQlVYaERMRWxCUVZJc1EwRkJZU3hoUVVGaUxFMUJRV2RETEZGQlFXaERMRWxCUVRSRGRVTXNiMEpCUVc5Q0xFTkJRWEJDTEVWQlFYVkNSeXhoUVVGMlFpeExRVUY1UXl4aFFVRjZSaXhGUVVGM1J6dEJRVU4wUjBZc2EwSkJRVkZ3UkN4alFVRlNMRU5CUVhWQ0xIRkNRVUYyUWl4RlFVRTRReXhEUVVGRGIwUXNUMEZCUkN4RFFVRTVRenRCUVVOQk8wRkJRMFlzV1VGQlNVUXNiMEpCUVc5Q0xFTkJRWEJDTEVWQlFYVkNSeXhoUVVGMlFpeExRVUY1UXl4UFFVRTNReXhGUVVGelJEdEJRVU53UkVZc2EwSkJRVkZKTEU5QlFWSXNRMEZCWjBJc1pVRkJhRUlzUlVGQmFVTTFReXhKUVVGcVF5eERRVUZ6UXl4aFFVRjBReXhGUVVGdlJDeFJRVUZ3UkR0QlFVTkJkME1zYTBKQlFWRkpMRTlCUVZJc1EwRkJaMElzWlVGQmFFSXNSVUZCYVVONFJDeGpRVUZxUXl4RFFVRm5SQ3h4UWtGQmFFUXNSVUZCZFVVc1EwRkJRMjlFTEZGQlFWRkpMRTlCUVZJc1EwRkJaMElzWlVGQmFFSXNRMEZCUkN4RFFVRjJSVHRCUVVORU8wRkJRMFE3TzBGQlJVWXNWMEZCU3l4WFFVRk1PMEZCUTBWS0xHZENRVUZSU1N4UFFVRlNMRU5CUVdkQ0xHVkJRV2hDTEVWQlFXbEROVU1zU1VGQmFrTXNRMEZCYzBNc1lVRkJkRU1zUlVGQmIwUXNVVUZCY0VRN1FVRkRRWGRETEdkQ1FVRlJTU3hQUVVGU0xFTkJRV2RDTEdWQlFXaENMRVZCUVdsRGVFUXNZMEZCYWtNc1EwRkJaMFFzY1VKQlFXaEVMRVZCUVhWRkxFTkJRVU52UkN4UlFVRlJTU3hQUVVGU0xFTkJRV2RDTEdWQlFXaENMRU5CUVVRc1EwRkJka1U3UVVGRFFUczdRVUZGUmp0QlFVTkZMR1ZCUVU4c1MwRkJVRHRCUVVOR08wRkJja0pHTzBGQmRVSkVMRWRCTTBKRU96dEJRVFpDUVN4TlFVRkpPVU1zVDBGQlQzQkRMRTFCUVZnc1JVRkJiVUk3UVVGRGFrSTdRVUZEUVN4VFFVRkxMRWxCUVVsRUxFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1MwRkJTM0ZETEU5QlFVOXdReXhOUVVGUUxFZEJRV2RDTEVOQlFYSkRMRVZCUVhkRFJDeEhRVUY0UXl4RlFVRTJRenRCUVVNelF5eFZRVUZKYjBZc2EwSkJRV3RDTEVsQlFVbDBSaXhuUWtGQlNpeERRVUZ4UWl0RkxIbENRVUZ5UWl4RFFVRjBRanRCUVVOQlR5eHpRa0ZCWjBKRExFOUJRV2hDTEVOQlFYZENhRVFzVDBGQlQzSkRMRU5CUVZBc1EwRkJlRUlzUlVGQmJVTXNSVUZCUlhOR0xGbEJRVmtzU1VGQlpDeEZRVUZ2UWtNc1YwRkJWeXhKUVVFdlFpeEZRVUZ4UTBNc1pVRkJaU3hMUVVGd1JDeEZRVUV5UkVNc1UwRkJVeXhKUVVGd1JTeEZRVUV3UlVNc2FVSkJRV2xDTEVOQlFVTXNZVUZCUkN4RlFVRm5RaXhQUVVGb1FpeERRVUV6Uml4RlFVRnVRenRCUVVORU8wRkJRMFk3UVVGRFJpeERRWHBEUkRzN1FVRXlRMEZvUml4VFFVRlRTU3haUVVGVUxFTkJRWE5DTmtVc2EwSkJRWFJDTEVkQlFUSkRMRmxCUVZjN1FVRkRjRVFzVFVGQlNVTXNXVUZCV1N4elFrRkJSVU1zVVVGQlJpeERRVUZvUWpzN1FVRkZRVzVHTEZkQlFWTkpMRmxCUVZRc1EwRkJjMEpqTEdWQlFYUkNMRU5CUVhORFowVXNVMEZCZEVNN1FVRkRRV3hHTEZkQlFWTkpMRmxCUVZRc1EwRkJjMEpyUWl4blFrRkJkRUlzUTBGQmRVTTBSQ3hUUVVGMlF6dEJRVU5CYkVZc1YwRkJVMGtzV1VGQlZDeERRVUZ6UW0xQ0xHbENRVUYwUWl4RFFVRjNRekpFTEZOQlFYaERPMEZCUTBGc1JpeFhRVUZUU1N4WlFVRlVMRU5CUVhOQ2IwSXNiMEpCUVhSQ0xFTkJRVEpETUVRc1UwRkJNME03UVVGRFFXeEdMRmRCUVZOSkxGbEJRVlFzUTBGQmMwSnhRaXh6UWtGQmRFSXNRMEZCTmtONVJDeFRRVUUzUXp0QlFVVkVMRU5CVkVRN08wRkJWMEZzUml4VFFVRlRTU3haUVVGVUxFTkJRWE5DWjBZc2EwSkJRWFJDTEVkQlFUSkRMRmxCUVZjN1FVRkRjRVFzVFVGQlNVWXNXVUZCV1N4elFrRkJSVU1zVVVGQlJpeERRVUZvUWp0QlFVTkJia1lzVjBGQlUwa3NXVUZCVkN4RFFVRnpRalpFTEhsQ1FVRjBRaXhEUVVGblJHbENMRk5CUVdoRU8wRkJRMEZzUml4WFFVRlRTU3haUVVGVUxFTkJRWE5DTWtRc2FVSkJRWFJDTzBGQlEwRXZSQ3hYUVVGVFNTeFpRVUZVTEVOQlFYTkNORVFzYVVKQlFYUkNPMEZCUTBGb1JTeFhRVUZUU1N4WlFVRlVMRU5CUVhOQ2EwTXNhMEpCUVhSQ08wRkJRMFFzUTBGT1JEczdRVUZUUVhSRExGTkJRVk54Uml4SlFVRlVMRWRCUVdkQ0xGVkJRVk5ETEVOQlFWUXNSVUZCV1VNc1ZVRkJXaXhGUVVGM1FqdEJRVU4wUXl4TlFVRkpMRTlCUVU5RUxFVkJRVVZGTEcxQ1FVRlVMRXRCUVd0RExGZEJRWFJETEVWQlFXMUVPMEZCUTJwRUxGRkJRVWxPTEZsQlFWbEpMRVZCUVVWSUxGRkJRVVlzUTBGQmFFSTdPMEZCUlVFc1VVRkJSMEVzVTBGQlUwMHNWVUZCVkN4TFFVRjNRaXhWUVVFelFpeEZRVUYxUXp0QlFVTnlRM3BHTEdWQlFWTkpMRmxCUVZRc1EwRkJjMEkyUlN4clFrRkJkRUk3UVVGRFFXcEdMR1ZCUVZOSkxGbEJRVlFzUTBGQmMwSm5SaXhyUWtGQmRFSTdRVUZEUkN4TFFVaEVMRTFCUjA4N1FVRkRURVVzVVVGQlJUbEdMRTFCUVVZc1JVRkJWVFpDTEVWQlFWWXNRMEZCWVN4TlFVRmlMRVZCUVhGQ0xGbEJRVTA3UVVGRGVrSnlRaXhwUWtGQlUwa3NXVUZCVkN4RFFVRnpRalpGTEd0Q1FVRjBRanRCUVVOQmFrWXNhVUpCUVZOSkxGbEJRVlFzUTBGQmMwSm5SaXhyUWtGQmRFSTdRVUZEUkN4UFFVaEVPMEZCU1VRN08wRkJSMFJGTEUxQlFVVkZMRzFDUVVGR0xFZEJRWGRDTEVsQlFYaENPMEZCUTBRN08wRkJSVVFzVFVGQlIwUXNWVUZCU0N4RlFVRmxPMEZCUTJKQkxHVkJRVmQyUml4UlFVRllMRWRCUVhOQ1FTeFJRVUYwUWp0QlFVTkJPMEZCUTBGMVJpeGxRVUZYUnl4UlFVRllMRWRCUVhOQ01VWXNVMEZCVTBrc1dVRkJWQ3hEUVVGelFtZEdMR3RDUVVFMVF6dEJRVU5FTzBGQlEwWXNRMEYyUWtRN08xRkJlVUpSY0VZc1VTeEhRVUZCUVN4Uklpd2labWxzWlNJNkltWnZkVzVrWVhScGIyNHVkWFJwYkM1MGNtbG5aMlZ5Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhVzF3YjNKMElDUWdabkp2YlNBbmFuRjFaWEo1Snp0Y2JtbHRjRzl5ZENCN0lFMXZkR2x2YmlCOUlHWnliMjBnSnk0dlptOTFibVJoZEdsdmJpNTFkR2xzTG0xdmRHbHZiaWM3WEc1Y2JtTnZibk4wSUUxMWRHRjBhVzl1VDJKelpYSjJaWElnUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMllYSWdjSEpsWm1sNFpYTWdQU0JiSjFkbFlrdHBkQ2NzSUNkTmIzb25MQ0FuVHljc0lDZE5jeWNzSUNjblhUdGNiaUFnWm05eUlDaDJZWElnYVQwd095QnBJRHdnY0hKbFptbDRaWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCcFppQW9ZQ1I3Y0hKbFptbDRaWE5iYVYxOVRYVjBZWFJwYjI1UFluTmxjblpsY21BZ2FXNGdkMmx1Wkc5M0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2QybHVaRzkzVzJBa2UzQnlaV1pwZUdWelcybGRmVTExZEdGMGFXOXVUMkp6WlhKMlpYSmdYVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWmhiSE5sTzF4dWZTZ3BLVHRjYmx4dVkyOXVjM1FnZEhKcFoyZGxjbk1nUFNBb1pXd3NJSFI1Y0dVcElEMCtJSHRjYmlBZ1pXd3VaR0YwWVNoMGVYQmxLUzV6Y0d4cGRDZ25JQ2NwTG1admNrVmhZMmdvYVdRZ1BUNGdlMXh1SUNBZ0lDUW9ZQ01rZTJsa2ZXQXBXeUIwZVhCbElEMDlQU0FuWTJ4dmMyVW5JRDhnSjNSeWFXZG5aWEluSURvZ0ozUnlhV2RuWlhKSVlXNWtiR1Z5SjEwb1lDUjdkSGx3WlgwdWVtWXVkSEpwWjJkbGNtQXNJRnRsYkYwcE8xeHVJQ0I5S1R0Y2JuMDdYRzVjYm5aaGNpQlVjbWxuWjJWeWN5QTlJSHRjYmlBZ1RHbHpkR1Z1WlhKek9pQjdYRzRnSUNBZ1FtRnphV002SUh0OUxGeHVJQ0FnSUVkc2IySmhiRG9nZTMxY2JpQWdmU3hjYmlBZ1NXNXBkR2xoYkdsNlpYSnpPaUI3ZlZ4dWZWeHVYRzVVY21sbloyVnljeTVNYVhOMFpXNWxjbk11UW1GemFXTWdJRDBnZTF4dUlDQnZjR1Z1VEdsemRHVnVaWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhSeWFXZG5aWEp6S0NRb2RHaHBjeWtzSUNkdmNHVnVKeWs3WEc0Z0lIMHNYRzRnSUdOc2IzTmxUR2x6ZEdWdVpYSTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJR3hsZENCcFpDQTlJQ1FvZEdocGN5a3VaR0YwWVNnblkyeHZjMlVuS1R0Y2JpQWdJQ0JwWmlBb2FXUXBJSHRjYmlBZ0lDQWdJSFJ5YVdkblpYSnpLQ1FvZEdocGN5a3NJQ2RqYkc5elpTY3BPMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ1FvZEdocGN5a3VkSEpwWjJkbGNpZ25ZMnh2YzJVdWVtWXVkSEpwWjJkbGNpY3BPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdkRzluWjJ4bFRHbHpkR1Z1WlhJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHeGxkQ0JwWkNBOUlDUW9kR2hwY3lrdVpHRjBZU2duZEc5bloyeGxKeWs3WEc0Z0lDQWdhV1lnS0dsa0tTQjdYRzRnSUNBZ0lDQjBjbWxuWjJWeWN5Z2tLSFJvYVhNcExDQW5kRzluWjJ4bEp5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNRb2RHaHBjeWt1ZEhKcFoyZGxjaWduZEc5bloyeGxMbnBtTG5SeWFXZG5aWEluS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUdOc2IzTmxZV0pzWlV4cGMzUmxibVZ5T2lCbWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ1pTNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNiaUFnSUNCc1pYUWdZVzVwYldGMGFXOXVJRDBnSkNoMGFHbHpLUzVrWVhSaEtDZGpiRzl6WVdKc1pTY3BPMXh1WEc0Z0lDQWdhV1lvWVc1cGJXRjBhVzl1SUNFOVBTQW5KeWw3WEc0Z0lDQWdJQ0JOYjNScGIyNHVZVzVwYldGMFpVOTFkQ2drS0hSb2FYTXBMQ0JoYm1sdFlYUnBiMjRzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWtLSFJvYVhNcExuUnlhV2RuWlhJb0oyTnNiM05sWkM1NlppY3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmV1ZzYzJWN1hHNGdJQ0FnSUNBa0tIUm9hWE1wTG1aaFpHVlBkWFFvS1M1MGNtbG5aMlZ5S0NkamJHOXpaV1F1ZW1ZbktUdGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lIUnZaMmRzWlVadlkzVnpUR2x6ZEdWdVpYSTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJR3hsZENCcFpDQTlJQ1FvZEdocGN5a3VaR0YwWVNnbmRHOW5aMnhsTFdadlkzVnpKeWs3WEc0Z0lDQWdKQ2hnSXlSN2FXUjlZQ2t1ZEhKcFoyZGxja2hoYm1Sc1pYSW9KM1J2WjJkc1pTNTZaaTUwY21sbloyVnlKeXdnV3lRb2RHaHBjeWxkS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeThnUld4bGJXVnVkSE1nZDJsMGFDQmJaR0YwWVMxdmNHVnVYU0IzYVd4c0lISmxkbVZoYkNCaElIQnNkV2RwYmlCMGFHRjBJSE4xY0hCdmNuUnpJR2wwSUhkb1pXNGdZMnhwWTJ0bFpDNWNibFJ5YVdkblpYSnpMa2x1YVhScFlXeHBlbVZ5Y3k1aFpHUlBjR1Z1VEdsemRHVnVaWElnUFNBb0pHVnNaVzBwSUQwK0lIdGNiaUFnSkdWc1pXMHViMlptS0NkamJHbGpheTU2Wmk1MGNtbG5aMlZ5Snl3Z1ZISnBaMmRsY25NdVRHbHpkR1Z1WlhKekxrSmhjMmxqTG05d1pXNU1hWE4wWlc1bGNpazdYRzRnSUNSbGJHVnRMbTl1S0NkamJHbGpheTU2Wmk1MGNtbG5aMlZ5Snl3Z0oxdGtZWFJoTFc5d1pXNWRKeXdnVkhKcFoyZGxjbk11VEdsemRHVnVaWEp6TGtKaGMybGpMbTl3Wlc1TWFYTjBaVzVsY2lrN1hHNTlYRzVjYmk4dklFVnNaVzFsYm5SeklIZHBkR2dnVzJSaGRHRXRZMnh2YzJWZElIZHBiR3dnWTJ4dmMyVWdZU0J3YkhWbmFXNGdkR2hoZENCemRYQndiM0owY3lCcGRDQjNhR1Z1SUdOc2FXTnJaV1F1WEc0dkx5QkpaaUIxYzJWa0lIZHBkR2h2ZFhRZ1lTQjJZV3gxWlNCdmJpQmJaR0YwWVMxamJHOXpaVjBzSUhSb1pTQmxkbVZ1ZENCM2FXeHNJR0oxWW1Kc1pTd2dZV3hzYjNkcGJtY2dhWFFnZEc4Z1kyeHZjMlVnWVNCd1lYSmxiblFnWTI5dGNHOXVaVzUwTGx4dVZISnBaMmRsY25NdVNXNXBkR2xoYkdsNlpYSnpMbUZrWkVOc2IzTmxUR2x6ZEdWdVpYSWdQU0FvSkdWc1pXMHBJRDArSUh0Y2JpQWdKR1ZzWlcwdWIyWm1LQ2RqYkdsamF5NTZaaTUwY21sbloyVnlKeXdnVkhKcFoyZGxjbk11VEdsemRHVnVaWEp6TGtKaGMybGpMbU5zYjNObFRHbHpkR1Z1WlhJcE8xeHVJQ0FrWld4bGJTNXZiaWduWTJ4cFkyc3VlbVl1ZEhKcFoyZGxjaWNzSUNkYlpHRjBZUzFqYkc5elpWMG5MQ0JVY21sbloyVnljeTVNYVhOMFpXNWxjbk11UW1GemFXTXVZMnh2YzJWTWFYTjBaVzVsY2lrN1hHNTlYRzVjYmk4dklFVnNaVzFsYm5SeklIZHBkR2dnVzJSaGRHRXRkRzluWjJ4bFhTQjNhV3hzSUhSdloyZHNaU0JoSUhCc2RXZHBiaUIwYUdGMElITjFjSEJ2Y25SeklHbDBJSGRvWlc0Z1kyeHBZMnRsWkM1Y2JsUnlhV2RuWlhKekxrbHVhWFJwWVd4cGVtVnljeTVoWkdSVWIyZG5iR1ZNYVhOMFpXNWxjaUE5SUNna1pXeGxiU2tnUFQ0Z2UxeHVJQ0FrWld4bGJTNXZabVlvSjJOc2FXTnJMbnBtTG5SeWFXZG5aWEluTENCVWNtbG5aMlZ5Y3k1TWFYTjBaVzVsY25NdVFtRnphV011ZEc5bloyeGxUR2x6ZEdWdVpYSXBPMXh1SUNBa1pXeGxiUzV2YmlnblkyeHBZMnN1ZW1ZdWRISnBaMmRsY2ljc0lDZGJaR0YwWVMxMGIyZG5iR1ZkSnl3Z1ZISnBaMmRsY25NdVRHbHpkR1Z1WlhKekxrSmhjMmxqTG5SdloyZHNaVXhwYzNSbGJtVnlLVHRjYm4xY2JseHVMeThnUld4bGJXVnVkSE1nZDJsMGFDQmJaR0YwWVMxamJHOXpZV0pzWlYwZ2QybHNiQ0J5WlhOd2IyNWtJSFJ2SUdOc2IzTmxMbnBtTG5SeWFXZG5aWElnWlhabGJuUnpMbHh1VkhKcFoyZGxjbk11U1c1cGRHbGhiR2w2WlhKekxtRmtaRU5zYjNObFlXSnNaVXhwYzNSbGJtVnlJRDBnS0NSbGJHVnRLU0E5UGlCN1hHNGdJQ1JsYkdWdExtOW1aaWduWTJ4dmMyVXVlbVl1ZEhKcFoyZGxjaWNzSUZSeWFXZG5aWEp6TGt4cGMzUmxibVZ5Y3k1Q1lYTnBZeTVqYkc5elpXRmliR1ZNYVhOMFpXNWxjaWs3WEc0Z0lDUmxiR1Z0TG05dUtDZGpiRzl6WlM1NlppNTBjbWxuWjJWeUp5d2dKMXRrWVhSaExXTnNiM05sWVdKc1pWMHNJRnRrWVhSaExXTnNiM05oWW14bFhTY3NJRlJ5YVdkblpYSnpMa3hwYzNSbGJtVnljeTVDWVhOcFl5NWpiRzl6WldGaWJHVk1hWE4wWlc1bGNpazdYRzU5WEc1Y2JpOHZJRVZzWlcxbGJuUnpJSGRwZEdnZ1cyUmhkR0V0ZEc5bloyeGxMV1p2WTNWelhTQjNhV3hzSUhKbGMzQnZibVFnZEc4Z1kyOXRhVzVuSUdsdUlHRnVaQ0J2ZFhRZ2IyWWdabTlqZFhOY2JsUnlhV2RuWlhKekxrbHVhWFJwWVd4cGVtVnljeTVoWkdSVWIyZG5iR1ZHYjJOMWMweHBjM1JsYm1WeUlEMGdLQ1JsYkdWdEtTQTlQaUI3WEc0Z0lDUmxiR1Z0TG05bVppZ25abTlqZFhNdWVtWXVkSEpwWjJkbGNpQmliSFZ5TG5wbUxuUnlhV2RuWlhJbkxDQlVjbWxuWjJWeWN5NU1hWE4wWlc1bGNuTXVRbUZ6YVdNdWRHOW5aMnhsUm05amRYTk1hWE4wWlc1bGNpazdYRzRnSUNSbGJHVnRMbTl1S0NkbWIyTjFjeTU2Wmk1MGNtbG5aMlZ5SUdKc2RYSXVlbVl1ZEhKcFoyZGxjaWNzSUNkYlpHRjBZUzEwYjJkbmJHVXRabTlqZFhOZEp5d2dWSEpwWjJkbGNuTXVUR2x6ZEdWdVpYSnpMa0poYzJsakxuUnZaMmRzWlVadlkzVnpUR2x6ZEdWdVpYSXBPMXh1ZlZ4dVhHNWNibHh1THk4Z1RXOXlaU0JIYkc5aVlXd3ZZMjl0Y0d4bGVDQnNhWE4wWlc1bGNuTWdZVzVrSUhSeWFXZG5aWEp6WEc1VWNtbG5aMlZ5Y3k1TWFYTjBaVzVsY25NdVIyeHZZbUZzSUNBOUlIdGNiaUFnY21WemFYcGxUR2x6ZEdWdVpYSTZJR1oxYm1OMGFXOXVLQ1J1YjJSbGN5a2dlMXh1SUNBZ0lHbG1LQ0ZOZFhSaGRHbHZiazlpYzJWeWRtVnlLWHN2TDJaaGJHeGlZV05ySUdadmNpQkpSU0E1WEc0Z0lDQWdJQ0FrYm05a1pYTXVaV0ZqYUNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQWtLSFJvYVhNcExuUnlhV2RuWlhKSVlXNWtiR1Z5S0NkeVpYTnBlbVZ0WlM1NlppNTBjbWxuWjJWeUp5azdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OTBjbWxuWjJWeUlHRnNiQ0JzYVhOMFpXNXBibWNnWld4bGJXVnVkSE1nWVc1a0lITnBaMjVoYkNCaElISmxjMmw2WlNCbGRtVnVkRnh1SUNBZ0lDUnViMlJsY3k1aGRIUnlLQ2RrWVhSaExXVjJaVzUwY3ljc0lGd2ljbVZ6YVhwbFhDSXBPMXh1SUNCOUxGeHVJQ0J6WTNKdmJHeE1hWE4wWlc1bGNqb2dablZ1WTNScGIyNG9KRzV2WkdWektTQjdYRzRnSUNBZ2FXWW9JVTExZEdGMGFXOXVUMkp6WlhKMlpYSXBleTh2Wm1Gc2JHSmhZMnNnWm05eUlFbEZJRGxjYmlBZ0lDQWdJQ1J1YjJSbGN5NWxZV05vS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDUW9kR2hwY3lrdWRISnBaMmRsY2toaGJtUnNaWElvSjNOamNtOXNiRzFsTG5wbUxuUnlhV2RuWlhJbktUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNBdkwzUnlhV2RuWlhJZ1lXeHNJR3hwYzNSbGJtbHVaeUJsYkdWdFpXNTBjeUJoYm1RZ2MybG5ibUZzSUdFZ2MyTnliMnhzSUdWMlpXNTBYRzRnSUNBZ0pHNXZaR1Z6TG1GMGRISW9KMlJoZEdFdFpYWmxiblJ6Snl3Z1hDSnpZM0p2Ykd4Y0lpazdYRzRnSUgwc1hHNGdJR05zYjNObFRXVk1hWE4wWlc1bGNqb2dablZ1WTNScGIyNG9aU3dnY0d4MVoybHVTV1FwZTF4dUlDQWdJR3hsZENCd2JIVm5hVzRnUFNCbExtNWhiV1Z6Y0dGalpTNXpjR3hwZENnbkxpY3BXekJkTzF4dUlDQWdJR3hsZENCd2JIVm5hVzV6SUQwZ0pDaGdXMlJoZEdFdEpIdHdiSFZuYVc1OVhXQXBMbTV2ZENoZ1cyUmhkR0V0ZVdWMGFTMWliM2c5WENJa2UzQnNkV2RwYmtsa2ZWd2lYV0FwTzF4dVhHNGdJQ0FnY0d4MVoybHVjeTVsWVdOb0tHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnNaWFFnWDNSb2FYTWdQU0FrS0hSb2FYTXBPMXh1SUNBZ0lDQWdYM1JvYVhNdWRISnBaMmRsY2toaGJtUnNaWElvSjJOc2IzTmxMbnBtTG5SeWFXZG5aWEluTENCYlgzUm9hWE5kS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUJIYkc5aVlXd3NJSEJoY25ObGN5QjNhRzlzWlNCa2IyTjFiV1Z1ZEM1Y2JsUnlhV2RuWlhKekxrbHVhWFJwWVd4cGVtVnljeTVoWkdSRGJHOXpaVzFsVEdsemRHVnVaWElnUFNCbWRXNWpkR2x2Ymlod2JIVm5hVzVPWVcxbEtTQjdYRzRnSUhaaGNpQjVaWFJwUW05NFpYTWdQU0FrS0NkYlpHRjBZUzE1WlhScExXSnZlRjBuS1N4Y2JpQWdJQ0FnSUhCc2RXZE9ZVzFsY3lBOUlGc25aSEp2Y0dSdmQyNG5MQ0FuZEc5dmJIUnBjQ2NzSUNkeVpYWmxZV3duWFR0Y2JseHVJQ0JwWmlod2JIVm5hVzVPWVcxbEtYdGNiaUFnSUNCcFppaDBlWEJsYjJZZ2NHeDFaMmx1VG1GdFpTQTlQVDBnSjNOMGNtbHVaeWNwZTF4dUlDQWdJQ0FnY0d4MVowNWhiV1Z6TG5CMWMyZ29jR3gxWjJsdVRtRnRaU2s3WEc0Z0lDQWdmV1ZzYzJVZ2FXWW9kSGx3Wlc5bUlIQnNkV2RwYms1aGJXVWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCd2JIVm5hVzVPWVcxbFd6QmRJRDA5UFNBbmMzUnlhVzVuSnlsN1hHNGdJQ0FnSUNCd2JIVm5UbUZ0WlhNdVkyOXVZMkYwS0hCc2RXZHBiazVoYldVcE8xeHVJQ0FnSUgxbGJITmxlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblVHeDFaMmx1SUc1aGJXVnpJRzExYzNRZ1ltVWdjM1J5YVc1bmN5Y3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBaaWg1WlhScFFtOTRaWE11YkdWdVozUm9LWHRjYmlBZ0lDQnNaWFFnYkdsemRHVnVaWEp6SUQwZ2NHeDFaMDVoYldWekxtMWhjQ2dvYm1GdFpTa2dQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0JqYkc5elpXMWxMbnBtTGlSN2JtRnRaWDFnTzF4dUlDQWdJSDBwTG1wdmFXNG9KeUFuS1R0Y2JseHVJQ0FnSUNRb2QybHVaRzkzS1M1dlptWW9iR2x6ZEdWdVpYSnpLUzV2Ymloc2FYTjBaVzVsY25Nc0lGUnlhV2RuWlhKekxreHBjM1JsYm1WeWN5NUhiRzlpWVd3dVkyeHZjMlZOWlV4cGMzUmxibVZ5S1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtaV0p2ZFc1alpVZHNiMkpoYkV4cGMzUmxibVZ5S0dSbFltOTFibU5sTENCMGNtbG5aMlZ5TENCc2FYTjBaVzVsY2lrZ2UxeHVJQ0JzWlhRZ2RHbHRaWElzSUdGeVozTWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURNcE8xeHVJQ0FrS0hkcGJtUnZkeWt1YjJabUtIUnlhV2RuWlhJcExtOXVLSFJ5YVdkblpYSXNJR1oxYm1OMGFXOXVLR1VwSUh0Y2JpQWdJQ0JwWmlBb2RHbHRaWElwSUhzZ1kyeGxZWEpVYVcxbGIzVjBLSFJwYldWeUtUc2dmVnh1SUNBZ0lIUnBiV1Z5SUQwZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdiR2x6ZEdWdVpYSXVZWEJ3Ykhrb2JuVnNiQ3dnWVhKbmN5azdYRzRnSUNBZ2ZTd2daR1ZpYjNWdVkyVWdmSHdnTVRBcE95OHZaR1ZtWVhWc2RDQjBhVzFsSUhSdklHVnRhWFFnYzJOeWIyeHNJR1YyWlc1MFhHNGdJSDBwTzF4dWZWeHVYRzVVY21sbloyVnljeTVKYm1sMGFXRnNhWHBsY25NdVlXUmtVbVZ6YVhwbFRHbHpkR1Z1WlhJZ1BTQm1kVzVqZEdsdmJpaGtaV0p2ZFc1alpTbDdYRzRnSUd4bGRDQWtibTlrWlhNZ1BTQWtLQ2RiWkdGMFlTMXlaWE5wZW1WZEp5azdYRzRnSUdsbUtDUnViMlJsY3k1c1pXNW5kR2dwZTF4dUlDQWdJR1JsWW05MWJtTmxSMnh2WW1Gc1RHbHpkR1Z1WlhJb1pHVmliM1Z1WTJVc0lDZHlaWE5wZW1VdWVtWXVkSEpwWjJkbGNpY3NJRlJ5YVdkblpYSnpMa3hwYzNSbGJtVnljeTVIYkc5aVlXd3VjbVZ6YVhwbFRHbHpkR1Z1WlhJc0lDUnViMlJsY3lrN1hHNGdJSDFjYm4xY2JseHVWSEpwWjJkbGNuTXVTVzVwZEdsaGJHbDZaWEp6TG1Ga1pGTmpjbTlzYkV4cGMzUmxibVZ5SUQwZ1puVnVZM1JwYjI0b1pHVmliM1Z1WTJVcGUxeHVJQ0JzWlhRZ0pHNXZaR1Z6SUQwZ0pDZ25XMlJoZEdFdGMyTnliMnhzWFNjcE8xeHVJQ0JwWmlna2JtOWtaWE11YkdWdVozUm9LWHRjYmlBZ0lDQmtaV0p2ZFc1alpVZHNiMkpoYkV4cGMzUmxibVZ5S0dSbFltOTFibU5sTENBbmMyTnliMnhzTG5wbUxuUnlhV2RuWlhJbkxDQlVjbWxuWjJWeWN5NU1hWE4wWlc1bGNuTXVSMnh2WW1Gc0xuTmpjbTlzYkV4cGMzUmxibVZ5TENBa2JtOWtaWE1wTzF4dUlDQjlYRzU5WEc1Y2JsUnlhV2RuWlhKekxrbHVhWFJwWVd4cGVtVnljeTVoWkdSTmRYUmhkR2x2YmtWMlpXNTBjMHhwYzNSbGJtVnlJRDBnWm5WdVkzUnBiMjRvSkdWc1pXMHBJSHRjYmlBZ2FXWW9JVTExZEdGMGFXOXVUMkp6WlhKMlpYSXBleUJ5WlhSMWNtNGdabUZzYzJVN0lIMWNiaUFnYkdWMElDUnViMlJsY3lBOUlDUmxiR1Z0TG1acGJtUW9KMXRrWVhSaExYSmxjMmw2WlYwc0lGdGtZWFJoTFhOamNtOXNiRjBzSUZ0a1lYUmhMVzExZEdGMFpWMG5LVHRjYmx4dUlDQXZMMlZzWlcxbGJuUWdZMkZzYkdKaFkydGNiaUFnZG1GeUlHeHBjM1JsYm1sdVowVnNaVzFsYm5SelRYVjBZWFJwYjI0Z1BTQm1kVzVqZEdsdmJpQW9iWFYwWVhScGIyNVNaV052Y21SelRHbHpkQ2tnZTF4dUlDQWdJSFpoY2lBa2RHRnlaMlYwSUQwZ0pDaHRkWFJoZEdsdmJsSmxZMjl5WkhOTWFYTjBXekJkTG5SaGNtZGxkQ2s3WEc1Y2JpQWdJQ0F2TDNSeWFXZG5aWElnZEdobElHVjJaVzUwSUdoaGJtUnNaWElnWm05eUlIUm9aU0JsYkdWdFpXNTBJR1JsY0dWdVpHbHVaeUJ2YmlCMGVYQmxYRzRnSUNBZ2MzZHBkR05vSUNodGRYUmhkR2x2YmxKbFkyOXlaSE5NYVhOMFd6QmRMblI1Y0dVcElIdGNiaUFnSUNBZ0lHTmhjMlVnWENKaGRIUnlhV0oxZEdWelhDSTZYRzRnSUNBZ0lDQWdJR2xtSUNna2RHRnlaMlYwTG1GMGRISW9YQ0prWVhSaExXVjJaVzUwYzF3aUtTQTlQVDBnWENKelkzSnZiR3hjSWlBbUppQnRkWFJoZEdsdmJsSmxZMjl5WkhOTWFYTjBXekJkTG1GMGRISnBZblYwWlU1aGJXVWdQVDA5SUZ3aVpHRjBZUzFsZG1WdWRITmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDUjBZWEpuWlhRdWRISnBaMmRsY2toaGJtUnNaWElvSjNOamNtOXNiRzFsTG5wbUxuUnlhV2RuWlhJbkxDQmJKSFJoY21kbGRDd2dkMmx1Wkc5M0xuQmhaMlZaVDJabWMyVjBYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLQ1IwWVhKblpYUXVZWFIwY2loY0ltUmhkR0V0WlhabGJuUnpYQ0lwSUQwOVBTQmNJbkpsYzJsNlpWd2lJQ1ltSUcxMWRHRjBhVzl1VW1WamIzSmtjMHhwYzNSYk1GMHVZWFIwY21saWRYUmxUbUZ0WlNBOVBUMGdYQ0prWVhSaExXVjJaVzUwYzF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSkhSaGNtZGxkQzUwY21sbloyVnlTR0Z1Wkd4bGNpZ25jbVZ6YVhwbGJXVXVlbVl1ZEhKcFoyZGxjaWNzSUZza2RHRnlaMlYwWFNrN1hHNGdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNodGRYUmhkR2x2YmxKbFkyOXlaSE5NYVhOMFd6QmRMbUYwZEhKcFluVjBaVTVoYldVZ1BUMDlJRndpYzNSNWJHVmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDUjBZWEpuWlhRdVkyeHZjMlZ6ZENoY0lsdGtZWFJoTFcxMWRHRjBaVjFjSWlrdVlYUjBjaWhjSW1SaGRHRXRaWFpsYm5SelhDSXNYQ0p0ZFhSaGRHVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0pIUmhjbWRsZEM1amJHOXpaWE4wS0Z3aVcyUmhkR0V0YlhWMFlYUmxYVndpS1M1MGNtbG5aMlZ5U0dGdVpHeGxjaWduYlhWMFlYUmxiV1V1ZW1ZdWRISnBaMmRsY2ljc0lGc2tkR0Z5WjJWMExtTnNiM05sYzNRb1hDSmJaR0YwWVMxdGRYUmhkR1ZkWENJcFhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJR05oYzJVZ1hDSmphR2xzWkV4cGMzUmNJanBjYmlBZ0lDQWdJQ0FnSkhSaGNtZGxkQzVqYkc5elpYTjBLRndpVzJSaGRHRXRiWFYwWVhSbFhWd2lLUzVoZEhSeUtGd2laR0YwWVMxbGRtVnVkSE5jSWl4Y0ltMTFkR0YwWlZ3aUtUdGNiaUFnSUNBZ0lDQWdKSFJoY21kbGRDNWpiRzl6WlhOMEtGd2lXMlJoZEdFdGJYVjBZWFJsWFZ3aUtTNTBjbWxuWjJWeVNHRnVaR3hsY2lnbmJYVjBZWFJsYldVdWVtWXVkSEpwWjJkbGNpY3NJRnNrZEdGeVoyVjBMbU5zYjNObGMzUW9YQ0piWkdGMFlTMXRkWFJoZEdWZFhDSXBYU2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBdkwyNXZkR2hwYm1kY2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2FXWWdLQ1J1YjJSbGN5NXNaVzVuZEdncElIdGNiaUFnSUNBdkwyWnZjaUJsWVdOb0lHVnNaVzFsYm5RZ2RHaGhkQ0J1WldWa2N5QjBieUJzYVhOMFpXNGdabTl5SUhKbGMybDZhVzVuTENCelkzSnZiR3hwYm1jc0lHOXlJRzExZEdGMGFXOXVJR0ZrWkNCaElITnBibWRzWlNCdlluTmxjblpsY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHc5SUNSdWIyUmxjeTVzWlc1bmRHZ2dMU0F4T3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwVDJKelpYSjJaWElnUFNCdVpYY2dUWFYwWVhScGIyNVBZbk5sY25abGNpaHNhWE4wWlc1cGJtZEZiR1Z0Wlc1MGMwMTFkR0YwYVc5dUtUdGNiaUFnSUNBZ0lHVnNaVzFsYm5SUFluTmxjblpsY2k1dlluTmxjblpsS0NSdWIyUmxjMXRwWFN3Z2V5QmhkSFJ5YVdKMWRHVnpPaUIwY25WbExDQmphR2xzWkV4cGMzUTZJSFJ5ZFdVc0lHTm9ZWEpoWTNSbGNrUmhkR0U2SUdaaGJITmxMQ0J6ZFdKMGNtVmxPaUIwY25WbExDQmhkSFJ5YVdKMWRHVkdhV3gwWlhJNklGdGNJbVJoZEdFdFpYWmxiblJ6WENJc0lGd2ljM1I1YkdWY0lsMGdmU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmxSeWFXZG5aWEp6TGtsdWFYUnBZV3hwZW1WeWN5NWhaR1JUYVcxd2JHVk1hWE4wWlc1bGNuTWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdiR1YwSUNSa2IyTjFiV1Z1ZENBOUlDUW9aRzlqZFcxbGJuUXBPMXh1WEc0Z0lGUnlhV2RuWlhKekxrbHVhWFJwWVd4cGVtVnljeTVoWkdSUGNHVnVUR2x6ZEdWdVpYSW9KR1J2WTNWdFpXNTBLVHRjYmlBZ1ZISnBaMmRsY25NdVNXNXBkR2xoYkdsNlpYSnpMbUZrWkVOc2IzTmxUR2x6ZEdWdVpYSW9KR1J2WTNWdFpXNTBLVHRjYmlBZ1ZISnBaMmRsY25NdVNXNXBkR2xoYkdsNlpYSnpMbUZrWkZSdloyZHNaVXhwYzNSbGJtVnlLQ1JrYjJOMWJXVnVkQ2s3WEc0Z0lGUnlhV2RuWlhKekxrbHVhWFJwWVd4cGVtVnljeTVoWkdSRGJHOXpaV0ZpYkdWTWFYTjBaVzVsY2lna1pHOWpkVzFsYm5RcE8xeHVJQ0JVY21sbloyVnljeTVKYm1sMGFXRnNhWHBsY25NdVlXUmtWRzluWjJ4bFJtOWpkWE5NYVhOMFpXNWxjaWdrWkc5amRXMWxiblFwTzF4dVhHNTlYRzVjYmxSeWFXZG5aWEp6TGtsdWFYUnBZV3hwZW1WeWN5NWhaR1JIYkc5aVlXeE1hWE4wWlc1bGNuTWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdiR1YwSUNSa2IyTjFiV1Z1ZENBOUlDUW9aRzlqZFcxbGJuUXBPMXh1SUNCVWNtbG5aMlZ5Y3k1SmJtbDBhV0ZzYVhwbGNuTXVZV1JrVFhWMFlYUnBiMjVGZG1WdWRITk1hWE4wWlc1bGNpZ2taRzlqZFcxbGJuUXBPMXh1SUNCVWNtbG5aMlZ5Y3k1SmJtbDBhV0ZzYVhwbGNuTXVZV1JrVW1WemFYcGxUR2x6ZEdWdVpYSW9LVHRjYmlBZ1ZISnBaMmRsY25NdVNXNXBkR2xoYkdsNlpYSnpMbUZrWkZOamNtOXNiRXhwYzNSbGJtVnlLQ2s3WEc0Z0lGUnlhV2RuWlhKekxrbHVhWFJwWVd4cGVtVnljeTVoWkdSRGJHOXpaVzFsVEdsemRHVnVaWElvS1R0Y2JuMWNibHh1WEc1VWNtbG5aMlZ5Y3k1cGJtbDBJRDBnWm5WdVkzUnBiMjRvSkN3Z1JtOTFibVJoZEdsdmJpa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUtDUXVkSEpwWjJkbGNuTkpibWwwYVdGc2FYcGxaQ2tnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdiR1YwSUNSa2IyTjFiV1Z1ZENBOUlDUW9aRzlqZFcxbGJuUXBPMXh1WEc0Z0lDQWdhV1lvWkc5amRXMWxiblF1Y21WaFpIbFRkR0YwWlNBOVBUMGdYQ0pqYjIxd2JHVjBaVndpS1NCN1hHNGdJQ0FnSUNCVWNtbG5aMlZ5Y3k1SmJtbDBhV0ZzYVhwbGNuTXVZV1JrVTJsdGNHeGxUR2x6ZEdWdVpYSnpLQ2s3WEc0Z0lDQWdJQ0JVY21sbloyVnljeTVKYm1sMGFXRnNhWHBsY25NdVlXUmtSMnh2WW1Gc1RHbHpkR1Z1WlhKektDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNRb2QybHVaRzkzS1M1dmJpZ25iRzloWkNjc0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ1ZISnBaMmRsY25NdVNXNXBkR2xoYkdsNlpYSnpMbUZrWkZOcGJYQnNaVXhwYzNSbGJtVnljeWdwTzF4dUlDQWdJQ0FnSUNCVWNtbG5aMlZ5Y3k1SmJtbDBhV0ZzYVhwbGNuTXVZV1JrUjJ4dlltRnNUR2x6ZEdWdVpYSnpLQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUNRdWRISnBaMmRsY25OSmJtbDBhV0ZzYVhwbFpDQTlJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQnBaaWhHYjNWdVpHRjBhVzl1S1NCN1hHNGdJQ0FnUm05MWJtUmhkR2x2Ymk1VWNtbG5aMlZ5Y3lBOUlGUnlhV2RuWlhKek8xeHVJQ0FnSUM4dklFeGxaMkZqZVNCcGJtTnNkV1JsWkNCMGJ5QmlaU0JpWVdOcmQyRnlaSE1nWTI5dGNHRjBhV0pzWlNCbWIzSWdibTkzTGx4dUlDQWdJRVp2ZFc1a1lYUnBiMjR1U1VobFlYSlpiM1VnUFNCVWNtbG5aMlZ5Y3k1SmJtbDBhV0ZzYVhwbGNuTXVZV1JrUjJ4dlltRnNUR2x6ZEdWdVpYSnpYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJSHRVY21sbloyVnljMzA3WEc0aVhYMD1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4vKiFcbiAqIEZ1c2UuanMgdjMuMi4wIC0gTGlnaHR3ZWlnaHQgZnV6enktc2VhcmNoIChodHRwOi8vZnVzZWpzLmlvKVxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBLaXJvbGxvcyBSaXNrIChodHRwOi8va2lyby5tZSlcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuIEFwYWNoZSBTb2Z0d2FyZSBMaWNlbnNlIDIuMFxuICogXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJGdXNlXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkZ1c2VcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiRnVzZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBiaXRhcFJlZ2V4U2VhcmNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbnZhciBiaXRhcFNlYXJjaCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG52YXIgcGF0dGVybkFscGhhYmV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIEJpdGFwID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCaXRhcChwYXR0ZXJuLCBfcmVmKSB7XG4gICAgdmFyIF9yZWYkbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYkbG9jYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJGxvY2F0aW9uLFxuICAgICAgICBfcmVmJGRpc3RhbmNlID0gX3JlZi5kaXN0YW5jZSxcbiAgICAgICAgZGlzdGFuY2UgPSBfcmVmJGRpc3RhbmNlID09PSB1bmRlZmluZWQgPyAxMDAgOiBfcmVmJGRpc3RhbmNlLFxuICAgICAgICBfcmVmJHRocmVzaG9sZCA9IF9yZWYudGhyZXNob2xkLFxuICAgICAgICB0aHJlc2hvbGQgPSBfcmVmJHRocmVzaG9sZCA9PT0gdW5kZWZpbmVkID8gMC42IDogX3JlZiR0aHJlc2hvbGQsXG4gICAgICAgIF9yZWYkbWF4UGF0dGVybkxlbmd0aCA9IF9yZWYubWF4UGF0dGVybkxlbmd0aCxcbiAgICAgICAgbWF4UGF0dGVybkxlbmd0aCA9IF9yZWYkbWF4UGF0dGVybkxlbmd0aCA9PT0gdW5kZWZpbmVkID8gMzIgOiBfcmVmJG1heFBhdHRlcm5MZW5ndGgsXG4gICAgICAgIF9yZWYkaXNDYXNlU2Vuc2l0aXZlID0gX3JlZi5pc0Nhc2VTZW5zaXRpdmUsXG4gICAgICAgIGlzQ2FzZVNlbnNpdGl2ZSA9IF9yZWYkaXNDYXNlU2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkaXNDYXNlU2Vuc2l0aXZlLFxuICAgICAgICBfcmVmJHRva2VuU2VwYXJhdG9yID0gX3JlZi50b2tlblNlcGFyYXRvcixcbiAgICAgICAgdG9rZW5TZXBhcmF0b3IgPSBfcmVmJHRva2VuU2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAvICsvZyA6IF9yZWYkdG9rZW5TZXBhcmF0b3IsXG4gICAgICAgIF9yZWYkZmluZEFsbE1hdGNoZXMgPSBfcmVmLmZpbmRBbGxNYXRjaGVzLFxuICAgICAgICBmaW5kQWxsTWF0Y2hlcyA9IF9yZWYkZmluZEFsbE1hdGNoZXMgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRmaW5kQWxsTWF0Y2hlcyxcbiAgICAgICAgX3JlZiRtaW5NYXRjaENoYXJMZW5nID0gX3JlZi5taW5NYXRjaENoYXJMZW5ndGgsXG4gICAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCA9IF9yZWYkbWluTWF0Y2hDaGFyTGVuZyA9PT0gdW5kZWZpbmVkID8gMSA6IF9yZWYkbWluTWF0Y2hDaGFyTGVuZztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCaXRhcCk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2UsXG4gICAgICB0aHJlc2hvbGQ6IHRocmVzaG9sZCxcbiAgICAgIG1heFBhdHRlcm5MZW5ndGg6IG1heFBhdHRlcm5MZW5ndGgsXG4gICAgICBpc0Nhc2VTZW5zaXRpdmU6IGlzQ2FzZVNlbnNpdGl2ZSxcbiAgICAgIHRva2VuU2VwYXJhdG9yOiB0b2tlblNlcGFyYXRvcixcbiAgICAgIGZpbmRBbGxNYXRjaGVzOiBmaW5kQWxsTWF0Y2hlcyxcbiAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aDogbWluTWF0Y2hDaGFyTGVuZ3RoXG4gICAgfTtcblxuICAgIHRoaXMucGF0dGVybiA9IHRoaXMub3B0aW9ucy5pc0Nhc2VTZW5zaXRpdmUgPyBwYXR0ZXJuIDogcGF0dGVybi50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKHRoaXMucGF0dGVybi5sZW5ndGggPD0gbWF4UGF0dGVybkxlbmd0aCkge1xuICAgICAgdGhpcy5wYXR0ZXJuQWxwaGFiZXQgPSBwYXR0ZXJuQWxwaGFiZXQodGhpcy5wYXR0ZXJuKTtcbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQml0YXAsIFt7XG4gICAga2V5OiAnc2VhcmNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoKHRleHQpIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmlzQ2FzZVNlbnNpdGl2ZSkge1xuICAgICAgICB0ZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBFeGFjdCBtYXRjaFxuICAgICAgaWYgKHRoaXMucGF0dGVybiA9PT0gdGV4dCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzTWF0Y2g6IHRydWUsXG4gICAgICAgICAgc2NvcmU6IDAsXG4gICAgICAgICAgbWF0Y2hlZEluZGljZXM6IFtbMCwgdGV4dC5sZW5ndGggLSAxXV1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gV2hlbiBwYXR0ZXJuIGxlbmd0aCBpcyBncmVhdGVyIHRoYW4gdGhlIG1hY2hpbmUgd29yZCBsZW5ndGgsIGp1c3QgZG8gYSBhIHJlZ2V4IGNvbXBhcmlzb25cbiAgICAgIHZhciBfb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBtYXhQYXR0ZXJuTGVuZ3RoID0gX29wdGlvbnMubWF4UGF0dGVybkxlbmd0aCxcbiAgICAgICAgICB0b2tlblNlcGFyYXRvciA9IF9vcHRpb25zLnRva2VuU2VwYXJhdG9yO1xuXG4gICAgICBpZiAodGhpcy5wYXR0ZXJuLmxlbmd0aCA+IG1heFBhdHRlcm5MZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGJpdGFwUmVnZXhTZWFyY2godGV4dCwgdGhpcy5wYXR0ZXJuLCB0b2tlblNlcGFyYXRvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgdXNlIEJpdGFwIGFsZ29yaXRobVxuICAgICAgdmFyIF9vcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBsb2NhdGlvbiA9IF9vcHRpb25zMi5sb2NhdGlvbixcbiAgICAgICAgICBkaXN0YW5jZSA9IF9vcHRpb25zMi5kaXN0YW5jZSxcbiAgICAgICAgICB0aHJlc2hvbGQgPSBfb3B0aW9uczIudGhyZXNob2xkLFxuICAgICAgICAgIGZpbmRBbGxNYXRjaGVzID0gX29wdGlvbnMyLmZpbmRBbGxNYXRjaGVzLFxuICAgICAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCA9IF9vcHRpb25zMi5taW5NYXRjaENoYXJMZW5ndGg7XG5cbiAgICAgIHJldHVybiBiaXRhcFNlYXJjaCh0ZXh0LCB0aGlzLnBhdHRlcm4sIHRoaXMucGF0dGVybkFscGhhYmV0LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLFxuICAgICAgICB0aHJlc2hvbGQ6IHRocmVzaG9sZCxcbiAgICAgICAgZmluZEFsbE1hdGNoZXM6IGZpbmRBbGxNYXRjaGVzLFxuICAgICAgICBtaW5NYXRjaENoYXJMZW5ndGg6IG1pbk1hdGNoQ2hhckxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJpdGFwO1xufSgpO1xuXG4vLyBsZXQgeCA9IG5ldyBCaXRhcChcIm9kIG1uIHdhclwiLCB7fSlcbi8vIGxldCByZXN1bHQgPSB4LnNlYXJjaChcIk9sZCBNYW4ncyBXYXJcIilcbi8vIGNvbnNvbGUubG9nKHJlc3VsdClcblxubW9kdWxlLmV4cG9ydHMgPSBCaXRhcDtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIGRlZXBWYWx1ZSA9IGZ1bmN0aW9uIGRlZXBWYWx1ZShvYmosIHBhdGgsIGxpc3QpIHtcbiAgaWYgKCFwYXRoKSB7XG4gICAgLy8gSWYgdGhlcmUncyBubyBwYXRoIGxlZnQsIHdlJ3ZlIGdvdHRlbiB0byB0aGUgb2JqZWN0IHdlIGNhcmUgYWJvdXQuXG4gICAgbGlzdC5wdXNoKG9iaik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRvdEluZGV4ID0gcGF0aC5pbmRleE9mKCcuJyk7XG4gICAgdmFyIGZpcnN0U2VnbWVudCA9IHBhdGg7XG4gICAgdmFyIHJlbWFpbmluZyA9IG51bGw7XG5cbiAgICBpZiAoZG90SW5kZXggIT09IC0xKSB7XG4gICAgICBmaXJzdFNlZ21lbnQgPSBwYXRoLnNsaWNlKDAsIGRvdEluZGV4KTtcbiAgICAgIHJlbWFpbmluZyA9IHBhdGguc2xpY2UoZG90SW5kZXggKyAxKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBvYmpbZmlyc3RTZWdtZW50XTtcblxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXJlbWFpbmluZyAmJiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSkge1xuICAgICAgICBsaXN0LnB1c2godmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFNlYXJjaCBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LlxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBkZWVwVmFsdWUodmFsdWVbaV0sIHJlbWFpbmluZywgbGlzdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVtYWluaW5nKSB7XG4gICAgICAgIC8vIEFuIG9iamVjdC4gUmVjdXJzZSBmdXJ0aGVyLlxuICAgICAgICBkZWVwVmFsdWUodmFsdWUsIHJlbWFpbmluZywgbGlzdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmosIHBhdGgpIHtcbiAgcmV0dXJuIGRlZXBWYWx1ZShvYmosIHBhdGgsIFtdKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG1hdGNobWFzayA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIHZhciBtaW5NYXRjaENoYXJMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG5cbiAgdmFyIG1hdGNoZWRJbmRpY2VzID0gW107XG4gIHZhciBzdGFydCA9IC0xO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBpID0gMDtcblxuICBmb3IgKHZhciBsZW4gPSBtYXRjaG1hc2subGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICB2YXIgbWF0Y2ggPSBtYXRjaG1hc2tbaV07XG4gICAgaWYgKG1hdGNoICYmIHN0YXJ0ID09PSAtMSkge1xuICAgICAgc3RhcnQgPSBpO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoICYmIHN0YXJ0ICE9PSAtMSkge1xuICAgICAgZW5kID0gaSAtIDE7XG4gICAgICBpZiAoZW5kIC0gc3RhcnQgKyAxID49IG1pbk1hdGNoQ2hhckxlbmd0aCkge1xuICAgICAgICBtYXRjaGVkSW5kaWNlcy5wdXNoKFtzdGFydCwgZW5kXSk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIC8vIChpLTEgLSBzdGFydCkgKyAxID0+IGkgLSBzdGFydFxuICBpZiAobWF0Y2htYXNrW2kgLSAxXSAmJiBpIC0gc3RhcnQgPj0gbWluTWF0Y2hDaGFyTGVuZ3RoKSB7XG4gICAgbWF0Y2hlZEluZGljZXMucHVzaChbc3RhcnQsIGkgLSAxXSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZEluZGljZXM7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGF0dGVybikge1xuICB2YXIgbWFzayA9IHt9O1xuICB2YXIgbGVuID0gcGF0dGVybi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIG1hc2tbcGF0dGVybi5jaGFyQXQoaSldID0gMDtcbiAgfVxuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBsZW47IF9pICs9IDEpIHtcbiAgICBtYXNrW3BhdHRlcm4uY2hhckF0KF9pKV0gfD0gMSA8PCBsZW4gLSBfaSAtIDE7XG4gIH1cblxuICByZXR1cm4gbWFzaztcbn07XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgU1BFQ0lBTF9DSEFSU19SRUdFWCA9IC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGV4dCwgcGF0dGVybikge1xuICB2YXIgdG9rZW5TZXBhcmF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IC8gKy9nO1xuXG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybi5yZXBsYWNlKFNQRUNJQUxfQ0hBUlNfUkVHRVgsICdcXFxcJCYnKS5yZXBsYWNlKHRva2VuU2VwYXJhdG9yLCAnfCcpKTtcbiAgdmFyIG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKHJlZ2V4KTtcbiAgdmFyIGlzTWF0Y2ggPSAhIW1hdGNoZXM7XG4gIHZhciBtYXRjaGVkSW5kaWNlcyA9IFtdO1xuXG4gIGlmIChpc01hdGNoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG1hdGNoZXNMZW4gPSBtYXRjaGVzLmxlbmd0aDsgaSA8IG1hdGNoZXNMZW47IGkgKz0gMSkge1xuICAgICAgdmFyIG1hdGNoID0gbWF0Y2hlc1tpXTtcbiAgICAgIG1hdGNoZWRJbmRpY2VzLnB1c2goW3RleHQuaW5kZXhPZihtYXRjaCksIG1hdGNoLmxlbmd0aCAtIDFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC8vIFRPRE86IHJldmlzaXQgdGhpcyBzY29yZVxuICAgIHNjb3JlOiBpc01hdGNoID8gMC41IDogMSxcbiAgICBpc01hdGNoOiBpc01hdGNoLFxuICAgIG1hdGNoZWRJbmRpY2VzOiBtYXRjaGVkSW5kaWNlc1xuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhdHRlcm4sIF9yZWYpIHtcbiAgdmFyIF9yZWYkZXJyb3JzID0gX3JlZi5lcnJvcnMsXG4gICAgICBlcnJvcnMgPSBfcmVmJGVycm9ycyA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkZXJyb3JzLFxuICAgICAgX3JlZiRjdXJyZW50TG9jYXRpb24gPSBfcmVmLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgIGN1cnJlbnRMb2NhdGlvbiA9IF9yZWYkY3VycmVudExvY2F0aW9uID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiRjdXJyZW50TG9jYXRpb24sXG4gICAgICBfcmVmJGV4cGVjdGVkTG9jYXRpb24gPSBfcmVmLmV4cGVjdGVkTG9jYXRpb24sXG4gICAgICBleHBlY3RlZExvY2F0aW9uID0gX3JlZiRleHBlY3RlZExvY2F0aW9uID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiRleHBlY3RlZExvY2F0aW9uLFxuICAgICAgX3JlZiRkaXN0YW5jZSA9IF9yZWYuZGlzdGFuY2UsXG4gICAgICBkaXN0YW5jZSA9IF9yZWYkZGlzdGFuY2UgPT09IHVuZGVmaW5lZCA/IDEwMCA6IF9yZWYkZGlzdGFuY2U7XG5cbiAgdmFyIGFjY3VyYWN5ID0gZXJyb3JzIC8gcGF0dGVybi5sZW5ndGg7XG4gIHZhciBwcm94aW1pdHkgPSBNYXRoLmFicyhleHBlY3RlZExvY2F0aW9uIC0gY3VycmVudExvY2F0aW9uKTtcblxuICBpZiAoIWRpc3RhbmNlKSB7XG4gICAgLy8gRG9kZ2UgZGl2aWRlIGJ5IHplcm8gZXJyb3IuXG4gICAgcmV0dXJuIHByb3hpbWl0eSA/IDEuMCA6IGFjY3VyYWN5O1xuICB9XG5cbiAgcmV0dXJuIGFjY3VyYWN5ICsgcHJveGltaXR5IC8gZGlzdGFuY2U7XG59O1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGJpdGFwU2NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIG1hdGNoZWRJbmRpY2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGV4dCwgcGF0dGVybiwgcGF0dGVybkFscGhhYmV0LCBfcmVmKSB7XG4gIHZhciBfcmVmJGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGxvY2F0aW9uID0gX3JlZiRsb2NhdGlvbiA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWYkbG9jYXRpb24sXG4gICAgICBfcmVmJGRpc3RhbmNlID0gX3JlZi5kaXN0YW5jZSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZiRkaXN0YW5jZSA9PT0gdW5kZWZpbmVkID8gMTAwIDogX3JlZiRkaXN0YW5jZSxcbiAgICAgIF9yZWYkdGhyZXNob2xkID0gX3JlZi50aHJlc2hvbGQsXG4gICAgICB0aHJlc2hvbGQgPSBfcmVmJHRocmVzaG9sZCA9PT0gdW5kZWZpbmVkID8gMC42IDogX3JlZiR0aHJlc2hvbGQsXG4gICAgICBfcmVmJGZpbmRBbGxNYXRjaGVzID0gX3JlZi5maW5kQWxsTWF0Y2hlcyxcbiAgICAgIGZpbmRBbGxNYXRjaGVzID0gX3JlZiRmaW5kQWxsTWF0Y2hlcyA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJGZpbmRBbGxNYXRjaGVzLFxuICAgICAgX3JlZiRtaW5NYXRjaENoYXJMZW5nID0gX3JlZi5taW5NYXRjaENoYXJMZW5ndGgsXG4gICAgICBtaW5NYXRjaENoYXJMZW5ndGggPSBfcmVmJG1pbk1hdGNoQ2hhckxlbmcgPT09IHVuZGVmaW5lZCA/IDEgOiBfcmVmJG1pbk1hdGNoQ2hhckxlbmc7XG5cbiAgdmFyIGV4cGVjdGVkTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgLy8gU2V0IHN0YXJ0aW5nIGxvY2F0aW9uIGF0IGJlZ2lubmluZyB0ZXh0IGFuZCBpbml0aWFsaXplIHRoZSBhbHBoYWJldC5cbiAgdmFyIHRleHRMZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgLy8gSGlnaGVzdCBzY29yZSBiZXlvbmQgd2hpY2ggd2UgZ2l2ZSB1cC5cbiAgdmFyIGN1cnJlbnRUaHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG4gIC8vIElzIHRoZXJlIGEgbmVhcmJ5IGV4YWN0IG1hdGNoPyAoc3BlZWR1cClcbiAgdmFyIGJlc3RMb2NhdGlvbiA9IHRleHQuaW5kZXhPZihwYXR0ZXJuLCBleHBlY3RlZExvY2F0aW9uKTtcblxuICB2YXIgcGF0dGVybkxlbiA9IHBhdHRlcm4ubGVuZ3RoO1xuXG4gIC8vIGEgbWFzayBvZiB0aGUgbWF0Y2hlc1xuICB2YXIgbWF0Y2hNYXNrID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dExlbjsgaSArPSAxKSB7XG4gICAgbWF0Y2hNYXNrW2ldID0gMDtcbiAgfVxuXG4gIGlmIChiZXN0TG9jYXRpb24gIT09IC0xKSB7XG4gICAgdmFyIHNjb3JlID0gYml0YXBTY29yZShwYXR0ZXJuLCB7XG4gICAgICBlcnJvcnM6IDAsXG4gICAgICBjdXJyZW50TG9jYXRpb246IGJlc3RMb2NhdGlvbixcbiAgICAgIGV4cGVjdGVkTG9jYXRpb246IGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICB9KTtcbiAgICBjdXJyZW50VGhyZXNob2xkID0gTWF0aC5taW4oc2NvcmUsIGN1cnJlbnRUaHJlc2hvbGQpO1xuXG4gICAgLy8gV2hhdCBhYm91dCBpbiB0aGUgb3RoZXIgZGlyZWN0aW9uPyAoc3BlZWQgdXApXG4gICAgYmVzdExvY2F0aW9uID0gdGV4dC5sYXN0SW5kZXhPZihwYXR0ZXJuLCBleHBlY3RlZExvY2F0aW9uICsgcGF0dGVybkxlbik7XG5cbiAgICBpZiAoYmVzdExvY2F0aW9uICE9PSAtMSkge1xuICAgICAgdmFyIF9zY29yZSA9IGJpdGFwU2NvcmUocGF0dGVybiwge1xuICAgICAgICBlcnJvcnM6IDAsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogYmVzdExvY2F0aW9uLFxuICAgICAgICBleHBlY3RlZExvY2F0aW9uOiBleHBlY3RlZExvY2F0aW9uLFxuICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICAgIH0pO1xuICAgICAgY3VycmVudFRocmVzaG9sZCA9IE1hdGgubWluKF9zY29yZSwgY3VycmVudFRocmVzaG9sZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzZXQgdGhlIGJlc3QgbG9jYXRpb25cbiAgYmVzdExvY2F0aW9uID0gLTE7XG5cbiAgdmFyIGxhc3RCaXRBcnIgPSBbXTtcbiAgdmFyIGZpbmFsU2NvcmUgPSAxO1xuICB2YXIgYmluTWF4ID0gcGF0dGVybkxlbiArIHRleHRMZW47XG5cbiAgdmFyIG1hc2sgPSAxIDw8IHBhdHRlcm5MZW4gLSAxO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBwYXR0ZXJuTGVuOyBfaSArPSAxKSB7XG4gICAgLy8gU2NhbiBmb3IgdGhlIGJlc3QgbWF0Y2g7IGVhY2ggaXRlcmF0aW9uIGFsbG93cyBmb3Igb25lIG1vcmUgZXJyb3IuXG4gICAgLy8gUnVuIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgaG93IGZhciBmcm9tIHRoZSBtYXRjaCBsb2NhdGlvbiB3ZSBjYW4gc3RyYXlcbiAgICAvLyBhdCB0aGlzIGVycm9yIGxldmVsLlxuICAgIHZhciBiaW5NaW4gPSAwO1xuICAgIHZhciBiaW5NaWQgPSBiaW5NYXg7XG5cbiAgICB3aGlsZSAoYmluTWluIDwgYmluTWlkKSB7XG4gICAgICB2YXIgX3Njb3JlMyA9IGJpdGFwU2NvcmUocGF0dGVybiwge1xuICAgICAgICBlcnJvcnM6IF9pLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IGV4cGVjdGVkTG9jYXRpb24gKyBiaW5NaWQsXG4gICAgICAgIGV4cGVjdGVkTG9jYXRpb246IGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChfc2NvcmUzIDw9IGN1cnJlbnRUaHJlc2hvbGQpIHtcbiAgICAgICAgYmluTWluID0gYmluTWlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluTWF4ID0gYmluTWlkO1xuICAgICAgfVxuXG4gICAgICBiaW5NaWQgPSBNYXRoLmZsb29yKChiaW5NYXggLSBiaW5NaW4pIC8gMiArIGJpbk1pbik7XG4gICAgfVxuXG4gICAgLy8gVXNlIHRoZSByZXN1bHQgZnJvbSB0aGlzIGl0ZXJhdGlvbiBhcyB0aGUgbWF4aW11bSBmb3IgdGhlIG5leHQuXG4gICAgYmluTWF4ID0gYmluTWlkO1xuXG4gICAgdmFyIHN0YXJ0ID0gTWF0aC5tYXgoMSwgZXhwZWN0ZWRMb2NhdGlvbiAtIGJpbk1pZCArIDEpO1xuICAgIHZhciBmaW5pc2ggPSBmaW5kQWxsTWF0Y2hlcyA/IHRleHRMZW4gOiBNYXRoLm1pbihleHBlY3RlZExvY2F0aW9uICsgYmluTWlkLCB0ZXh0TGVuKSArIHBhdHRlcm5MZW47XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBiaXQgYXJyYXlcbiAgICB2YXIgYml0QXJyID0gQXJyYXkoZmluaXNoICsgMik7XG5cbiAgICBiaXRBcnJbZmluaXNoICsgMV0gPSAoMSA8PCBfaSkgLSAxO1xuXG4gICAgZm9yICh2YXIgaiA9IGZpbmlzaDsgaiA+PSBzdGFydDsgaiAtPSAxKSB7XG4gICAgICB2YXIgY3VycmVudExvY2F0aW9uID0gaiAtIDE7XG4gICAgICB2YXIgY2hhck1hdGNoID0gcGF0dGVybkFscGhhYmV0W3RleHQuY2hhckF0KGN1cnJlbnRMb2NhdGlvbildO1xuXG4gICAgICBpZiAoY2hhck1hdGNoKSB7XG4gICAgICAgIG1hdGNoTWFza1tjdXJyZW50TG9jYXRpb25dID0gMTtcbiAgICAgIH1cblxuICAgICAgLy8gRmlyc3QgcGFzczogZXhhY3QgbWF0Y2hcbiAgICAgIGJpdEFycltqXSA9IChiaXRBcnJbaiArIDFdIDw8IDEgfCAxKSAmIGNoYXJNYXRjaDtcblxuICAgICAgLy8gU3Vic2VxdWVudCBwYXNzZXM6IGZ1enp5IG1hdGNoXG4gICAgICBpZiAoX2kgIT09IDApIHtcbiAgICAgICAgYml0QXJyW2pdIHw9IChsYXN0Qml0QXJyW2ogKyAxXSB8IGxhc3RCaXRBcnJbal0pIDw8IDEgfCAxIHwgbGFzdEJpdEFycltqICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChiaXRBcnJbal0gJiBtYXNrKSB7XG4gICAgICAgIGZpbmFsU2NvcmUgPSBiaXRhcFNjb3JlKHBhdHRlcm4sIHtcbiAgICAgICAgICBlcnJvcnM6IF9pLFxuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIGV4cGVjdGVkTG9jYXRpb246IGV4cGVjdGVkTG9jYXRpb24sXG4gICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRoaXMgbWF0Y2ggd2lsbCBhbG1vc3QgY2VydGFpbmx5IGJlIGJldHRlciB0aGFuIGFueSBleGlzdGluZyBtYXRjaC5cbiAgICAgICAgLy8gQnV0IGNoZWNrIGFueXdheS5cbiAgICAgICAgaWYgKGZpbmFsU2NvcmUgPD0gY3VycmVudFRocmVzaG9sZCkge1xuICAgICAgICAgIC8vIEluZGVlZCBpdCBpc1xuICAgICAgICAgIGN1cnJlbnRUaHJlc2hvbGQgPSBmaW5hbFNjb3JlO1xuICAgICAgICAgIGJlc3RMb2NhdGlvbiA9IGN1cnJlbnRMb2NhdGlvbjtcblxuICAgICAgICAgIC8vIEFscmVhZHkgcGFzc2VkIGBsb2NgLCBkb3duaGlsbCBmcm9tIGhlcmUgb24gaW4uXG4gICAgICAgICAgaWYgKGJlc3RMb2NhdGlvbiA8PSBleHBlY3RlZExvY2F0aW9uKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXaGVuIHBhc3NpbmcgYGJlc3RMb2NhdGlvbmAsIGRvbid0IGV4Y2VlZCBvdXIgY3VycmVudCBkaXN0YW5jZSBmcm9tIGBleHBlY3RlZExvY2F0aW9uYC5cbiAgICAgICAgICBzdGFydCA9IE1hdGgubWF4KDEsIDIgKiBleHBlY3RlZExvY2F0aW9uIC0gYmVzdExvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vIGhvcGUgZm9yIGEgKGJldHRlcikgbWF0Y2ggYXQgZ3JlYXRlciBlcnJvciBsZXZlbHMuXG4gICAgdmFyIF9zY29yZTIgPSBiaXRhcFNjb3JlKHBhdHRlcm4sIHtcbiAgICAgIGVycm9yczogX2kgKyAxLFxuICAgICAgY3VycmVudExvY2F0aW9uOiBleHBlY3RlZExvY2F0aW9uLFxuICAgICAgZXhwZWN0ZWRMb2NhdGlvbjogZXhwZWN0ZWRMb2NhdGlvbixcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgIH0pO1xuXG4gICAgaWYgKF9zY29yZTIgPiBjdXJyZW50VGhyZXNob2xkKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBsYXN0Qml0QXJyID0gYml0QXJyO1xuICB9XG5cbiAgLy8gQ291bnQgZXhhY3QgbWF0Y2hlcyAodGhvc2Ugd2l0aCBhIHNjb3JlIG9mIDApIHRvIGJlIFwiYWxtb3N0XCIgZXhhY3RcbiAgcmV0dXJuIHtcbiAgICBpc01hdGNoOiBiZXN0TG9jYXRpb24gPj0gMCxcbiAgICBzY29yZTogZmluYWxTY29yZSA9PT0gMCA/IDAuMDAxIDogZmluYWxTY29yZSxcbiAgICBtYXRjaGVkSW5kaWNlczogbWF0Y2hlZEluZGljZXMobWF0Y2hNYXNrLCBtaW5NYXRjaENoYXJMZW5ndGgpXG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJpdGFwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBkZWVwVmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgRnVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRnVzZShsaXN0LCBfcmVmKSB7XG4gICAgdmFyIF9yZWYkbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYkbG9jYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJGxvY2F0aW9uLFxuICAgICAgICBfcmVmJGRpc3RhbmNlID0gX3JlZi5kaXN0YW5jZSxcbiAgICAgICAgZGlzdGFuY2UgPSBfcmVmJGRpc3RhbmNlID09PSB1bmRlZmluZWQgPyAxMDAgOiBfcmVmJGRpc3RhbmNlLFxuICAgICAgICBfcmVmJHRocmVzaG9sZCA9IF9yZWYudGhyZXNob2xkLFxuICAgICAgICB0aHJlc2hvbGQgPSBfcmVmJHRocmVzaG9sZCA9PT0gdW5kZWZpbmVkID8gMC42IDogX3JlZiR0aHJlc2hvbGQsXG4gICAgICAgIF9yZWYkbWF4UGF0dGVybkxlbmd0aCA9IF9yZWYubWF4UGF0dGVybkxlbmd0aCxcbiAgICAgICAgbWF4UGF0dGVybkxlbmd0aCA9IF9yZWYkbWF4UGF0dGVybkxlbmd0aCA9PT0gdW5kZWZpbmVkID8gMzIgOiBfcmVmJG1heFBhdHRlcm5MZW5ndGgsXG4gICAgICAgIF9yZWYkY2FzZVNlbnNpdGl2ZSA9IF9yZWYuY2FzZVNlbnNpdGl2ZSxcbiAgICAgICAgY2FzZVNlbnNpdGl2ZSA9IF9yZWYkY2FzZVNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJGNhc2VTZW5zaXRpdmUsXG4gICAgICAgIF9yZWYkdG9rZW5TZXBhcmF0b3IgPSBfcmVmLnRva2VuU2VwYXJhdG9yLFxuICAgICAgICB0b2tlblNlcGFyYXRvciA9IF9yZWYkdG9rZW5TZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/IC8gKy9nIDogX3JlZiR0b2tlblNlcGFyYXRvcixcbiAgICAgICAgX3JlZiRmaW5kQWxsTWF0Y2hlcyA9IF9yZWYuZmluZEFsbE1hdGNoZXMsXG4gICAgICAgIGZpbmRBbGxNYXRjaGVzID0gX3JlZiRmaW5kQWxsTWF0Y2hlcyA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJGZpbmRBbGxNYXRjaGVzLFxuICAgICAgICBfcmVmJG1pbk1hdGNoQ2hhckxlbmcgPSBfcmVmLm1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoID0gX3JlZiRtaW5NYXRjaENoYXJMZW5nID09PSB1bmRlZmluZWQgPyAxIDogX3JlZiRtaW5NYXRjaENoYXJMZW5nLFxuICAgICAgICBfcmVmJGlkID0gX3JlZi5pZCxcbiAgICAgICAgaWQgPSBfcmVmJGlkID09PSB1bmRlZmluZWQgPyBudWxsIDogX3JlZiRpZCxcbiAgICAgICAgX3JlZiRrZXlzID0gX3JlZi5rZXlzLFxuICAgICAgICBrZXlzID0gX3JlZiRrZXlzID09PSB1bmRlZmluZWQgPyBbXSA6IF9yZWYka2V5cyxcbiAgICAgICAgX3JlZiRzaG91bGRTb3J0ID0gX3JlZi5zaG91bGRTb3J0LFxuICAgICAgICBzaG91bGRTb3J0ID0gX3JlZiRzaG91bGRTb3J0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRzaG91bGRTb3J0LFxuICAgICAgICBfcmVmJGdldEZuID0gX3JlZi5nZXRGbixcbiAgICAgICAgZ2V0Rm4gPSBfcmVmJGdldEZuID09PSB1bmRlZmluZWQgPyBkZWVwVmFsdWUgOiBfcmVmJGdldEZuLFxuICAgICAgICBfcmVmJHNvcnRGbiA9IF9yZWYuc29ydEZuLFxuICAgICAgICBzb3J0Rm4gPSBfcmVmJHNvcnRGbiA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnNjb3JlIC0gYi5zY29yZTtcbiAgICB9IDogX3JlZiRzb3J0Rm4sXG4gICAgICAgIF9yZWYkdG9rZW5pemUgPSBfcmVmLnRva2VuaXplLFxuICAgICAgICB0b2tlbml6ZSA9IF9yZWYkdG9rZW5pemUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR0b2tlbml6ZSxcbiAgICAgICAgX3JlZiRtYXRjaEFsbFRva2VucyA9IF9yZWYubWF0Y2hBbGxUb2tlbnMsXG4gICAgICAgIG1hdGNoQWxsVG9rZW5zID0gX3JlZiRtYXRjaEFsbFRva2VucyA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJG1hdGNoQWxsVG9rZW5zLFxuICAgICAgICBfcmVmJGluY2x1ZGVNYXRjaGVzID0gX3JlZi5pbmNsdWRlTWF0Y2hlcyxcbiAgICAgICAgaW5jbHVkZU1hdGNoZXMgPSBfcmVmJGluY2x1ZGVNYXRjaGVzID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkaW5jbHVkZU1hdGNoZXMsXG4gICAgICAgIF9yZWYkaW5jbHVkZVNjb3JlID0gX3JlZi5pbmNsdWRlU2NvcmUsXG4gICAgICAgIGluY2x1ZGVTY29yZSA9IF9yZWYkaW5jbHVkZVNjb3JlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkaW5jbHVkZVNjb3JlLFxuICAgICAgICBfcmVmJHZlcmJvc2UgPSBfcmVmLnZlcmJvc2UsXG4gICAgICAgIHZlcmJvc2UgPSBfcmVmJHZlcmJvc2UgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR2ZXJib3NlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZ1c2UpO1xuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLFxuICAgICAgdGhyZXNob2xkOiB0aHJlc2hvbGQsXG4gICAgICBtYXhQYXR0ZXJuTGVuZ3RoOiBtYXhQYXR0ZXJuTGVuZ3RoLFxuICAgICAgaXNDYXNlU2Vuc2l0aXZlOiBjYXNlU2Vuc2l0aXZlLFxuICAgICAgdG9rZW5TZXBhcmF0b3I6IHRva2VuU2VwYXJhdG9yLFxuICAgICAgZmluZEFsbE1hdGNoZXM6IGZpbmRBbGxNYXRjaGVzLFxuICAgICAgbWluTWF0Y2hDaGFyTGVuZ3RoOiBtaW5NYXRjaENoYXJMZW5ndGgsXG4gICAgICBpZDogaWQsXG4gICAgICBrZXlzOiBrZXlzLFxuICAgICAgaW5jbHVkZU1hdGNoZXM6IGluY2x1ZGVNYXRjaGVzLFxuICAgICAgaW5jbHVkZVNjb3JlOiBpbmNsdWRlU2NvcmUsXG4gICAgICBzaG91bGRTb3J0OiBzaG91bGRTb3J0LFxuICAgICAgZ2V0Rm46IGdldEZuLFxuICAgICAgc29ydEZuOiBzb3J0Rm4sXG4gICAgICB2ZXJib3NlOiB2ZXJib3NlLFxuICAgICAgdG9rZW5pemU6IHRva2VuaXplLFxuICAgICAgbWF0Y2hBbGxUb2tlbnM6IG1hdGNoQWxsVG9rZW5zXG4gICAgfTtcblxuICAgIHRoaXMuc2V0Q29sbGVjdGlvbihsaXN0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGdXNlLCBbe1xuICAgIGtleTogJ3NldENvbGxlY3Rpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb2xsZWN0aW9uKGxpc3QpIHtcbiAgICAgIHRoaXMubGlzdCA9IGxpc3Q7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWFyY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2gocGF0dGVybikge1xuICAgICAgdGhpcy5fbG9nKCctLS0tLS0tLS1cXG5TZWFyY2ggcGF0dGVybjogXCInICsgcGF0dGVybiArICdcIicpO1xuXG4gICAgICB2YXIgX3ByZXBhcmVTZWFyY2hlcnMyID0gdGhpcy5fcHJlcGFyZVNlYXJjaGVycyhwYXR0ZXJuKSxcbiAgICAgICAgICB0b2tlblNlYXJjaGVycyA9IF9wcmVwYXJlU2VhcmNoZXJzMi50b2tlblNlYXJjaGVycyxcbiAgICAgICAgICBmdWxsU2VhcmNoZXIgPSBfcHJlcGFyZVNlYXJjaGVyczIuZnVsbFNlYXJjaGVyO1xuXG4gICAgICB2YXIgX3NlYXJjaDIgPSB0aGlzLl9zZWFyY2godG9rZW5TZWFyY2hlcnMsIGZ1bGxTZWFyY2hlciksXG4gICAgICAgICAgd2VpZ2h0cyA9IF9zZWFyY2gyLndlaWdodHMsXG4gICAgICAgICAgcmVzdWx0cyA9IF9zZWFyY2gyLnJlc3VsdHM7XG5cbiAgICAgIHRoaXMuX2NvbXB1dGVTY29yZSh3ZWlnaHRzLCByZXN1bHRzKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG91bGRTb3J0KSB7XG4gICAgICAgIHRoaXMuX3NvcnQocmVzdWx0cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9mb3JtYXQocmVzdWx0cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3ByZXBhcmVTZWFyY2hlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJlcGFyZVNlYXJjaGVycygpIHtcbiAgICAgIHZhciBwYXR0ZXJuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcblxuICAgICAgdmFyIHRva2VuU2VhcmNoZXJzID0gW107XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudG9rZW5pemUpIHtcbiAgICAgICAgLy8gVG9rZW5pemUgb24gdGhlIHNlcGFyYXRvclxuICAgICAgICB2YXIgdG9rZW5zID0gcGF0dGVybi5zcGxpdCh0aGlzLm9wdGlvbnMudG9rZW5TZXBhcmF0b3IpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9rZW5zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdG9rZW5TZWFyY2hlcnMucHVzaChuZXcgQml0YXAodG9rZW5zW2ldLCB0aGlzLm9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZnVsbFNlYXJjaGVyID0gbmV3IEJpdGFwKHBhdHRlcm4sIHRoaXMub3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiB7IHRva2VuU2VhcmNoZXJzOiB0b2tlblNlYXJjaGVycywgZnVsbFNlYXJjaGVyOiBmdWxsU2VhcmNoZXIgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2VhcmNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlYXJjaCgpIHtcbiAgICAgIHZhciB0b2tlblNlYXJjaGVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgICB2YXIgZnVsbFNlYXJjaGVyID0gYXJndW1lbnRzWzFdO1xuXG4gICAgICB2YXIgbGlzdCA9IHRoaXMubGlzdDtcbiAgICAgIHZhciByZXN1bHRNYXAgPSB7fTtcbiAgICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICAgIC8vIENoZWNrIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0LCBpZiBpdCdzIGEgc3RyaW5nLCB0aGVuIHdlIGFzc3VtZVxuICAgICAgLy8gdGhhdCBldmVyeSBpdGVtIGluIHRoZSBsaXN0IGlzIGFsc28gYSBzdHJpbmcsIGFuZCB0aHVzIGl0J3MgYSBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICBpZiAodHlwZW9mIGxpc3RbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBldmVyeSBpdGVtXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5fYW5hbHl6ZSh7XG4gICAgICAgICAgICBrZXk6ICcnLFxuICAgICAgICAgICAgdmFsdWU6IGxpc3RbaV0sXG4gICAgICAgICAgICByZWNvcmQ6IGksXG4gICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHJlc3VsdE1hcDogcmVzdWx0TWFwLFxuICAgICAgICAgICAgcmVzdWx0czogcmVzdWx0cyxcbiAgICAgICAgICAgIHRva2VuU2VhcmNoZXJzOiB0b2tlblNlYXJjaGVycyxcbiAgICAgICAgICAgIGZ1bGxTZWFyY2hlcjogZnVsbFNlYXJjaGVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyB3ZWlnaHRzOiBudWxsLCByZXN1bHRzOiByZXN1bHRzIH07XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgdGhlIGZpcnN0IGl0ZW0gaXMgYW4gT2JqZWN0IChob3BlZnVsbHkpLCBhbmQgdGh1cyB0aGUgc2VhcmNoaW5nXG4gICAgICAvLyBpcyBkb25lIG9uIHRoZSB2YWx1ZXMgb2YgdGhlIGtleXMgb2YgZWFjaCBpdGVtLlxuICAgICAgdmFyIHdlaWdodHMgPSB7fTtcbiAgICAgIGZvciAodmFyIF9pID0gMCwgX2xlbiA9IGxpc3QubGVuZ3RoOyBfaSA8IF9sZW47IF9pICs9IDEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBsaXN0W19pXTtcbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGV2ZXJ5IGtleVxuICAgICAgICBmb3IgKHZhciBqID0gMCwga2V5c0xlbiA9IHRoaXMub3B0aW9ucy5rZXlzLmxlbmd0aDsgaiA8IGtleXNMZW47IGogKz0gMSkge1xuICAgICAgICAgIHZhciBrZXkgPSB0aGlzLm9wdGlvbnMua2V5c1tqXTtcbiAgICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHdlaWdodHNba2V5Lm5hbWVdID0ge1xuICAgICAgICAgICAgICB3ZWlnaHQ6IDEgLSBrZXkud2VpZ2h0IHx8IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoa2V5LndlaWdodCA8PSAwIHx8IGtleS53ZWlnaHQgPiAxKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignS2V5IHdlaWdodCBoYXMgdG8gYmUgPiAwIGFuZCA8PSAxJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBrZXkubmFtZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2VpZ2h0c1trZXldID0ge1xuICAgICAgICAgICAgICB3ZWlnaHQ6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fYW5hbHl6ZSh7XG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLm9wdGlvbnMuZ2V0Rm4oaXRlbSwga2V5KSxcbiAgICAgICAgICAgIHJlY29yZDogaXRlbSxcbiAgICAgICAgICAgIGluZGV4OiBfaVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHJlc3VsdE1hcDogcmVzdWx0TWFwLFxuICAgICAgICAgICAgcmVzdWx0czogcmVzdWx0cyxcbiAgICAgICAgICAgIHRva2VuU2VhcmNoZXJzOiB0b2tlblNlYXJjaGVycyxcbiAgICAgICAgICAgIGZ1bGxTZWFyY2hlcjogZnVsbFNlYXJjaGVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgd2VpZ2h0czogd2VpZ2h0cywgcmVzdWx0czogcmVzdWx0cyB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19hbmFseXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2FuYWx5emUoX3JlZjIsIF9yZWYzKSB7XG4gICAgICB2YXIga2V5ID0gX3JlZjIua2V5LFxuICAgICAgICAgIF9yZWYyJGFycmF5SW5kZXggPSBfcmVmMi5hcnJheUluZGV4LFxuICAgICAgICAgIGFycmF5SW5kZXggPSBfcmVmMiRhcnJheUluZGV4ID09PSB1bmRlZmluZWQgPyAtMSA6IF9yZWYyJGFycmF5SW5kZXgsXG4gICAgICAgICAgdmFsdWUgPSBfcmVmMi52YWx1ZSxcbiAgICAgICAgICByZWNvcmQgPSBfcmVmMi5yZWNvcmQsXG4gICAgICAgICAgaW5kZXggPSBfcmVmMi5pbmRleDtcbiAgICAgIHZhciBfcmVmMyR0b2tlblNlYXJjaGVycyA9IF9yZWYzLnRva2VuU2VhcmNoZXJzLFxuICAgICAgICAgIHRva2VuU2VhcmNoZXJzID0gX3JlZjMkdG9rZW5TZWFyY2hlcnMgPT09IHVuZGVmaW5lZCA/IFtdIDogX3JlZjMkdG9rZW5TZWFyY2hlcnMsXG4gICAgICAgICAgX3JlZjMkZnVsbFNlYXJjaGVyID0gX3JlZjMuZnVsbFNlYXJjaGVyLFxuICAgICAgICAgIGZ1bGxTZWFyY2hlciA9IF9yZWYzJGZ1bGxTZWFyY2hlciA9PT0gdW5kZWZpbmVkID8gW10gOiBfcmVmMyRmdWxsU2VhcmNoZXIsXG4gICAgICAgICAgX3JlZjMkcmVzdWx0TWFwID0gX3JlZjMucmVzdWx0TWFwLFxuICAgICAgICAgIHJlc3VsdE1hcCA9IF9yZWYzJHJlc3VsdE1hcCA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmMyRyZXN1bHRNYXAsXG4gICAgICAgICAgX3JlZjMkcmVzdWx0cyA9IF9yZWYzLnJlc3VsdHMsXG4gICAgICAgICAgcmVzdWx0cyA9IF9yZWYzJHJlc3VsdHMgPT09IHVuZGVmaW5lZCA/IFtdIDogX3JlZjMkcmVzdWx0cztcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRleHZhbHVldCBjYW4gYmUgc2VhcmNoZWRcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlO1xuICAgICAgdmFyIGF2ZXJhZ2VTY29yZSA9IC0xO1xuICAgICAgdmFyIG51bVRleHRNYXRjaGVzID0gMDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fbG9nKCdcXG5LZXk6ICcgKyAoa2V5ID09PSAnJyA/ICctJyA6IGtleSkpO1xuXG4gICAgICAgIHZhciBtYWluU2VhcmNoUmVzdWx0ID0gZnVsbFNlYXJjaGVyLnNlYXJjaCh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX2xvZygnRnVsbCB0ZXh0OiBcIicgKyB2YWx1ZSArICdcIiwgc2NvcmU6ICcgKyBtYWluU2VhcmNoUmVzdWx0LnNjb3JlKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRva2VuaXplKSB7XG4gICAgICAgICAgdmFyIHdvcmRzID0gdmFsdWUuc3BsaXQodGhpcy5vcHRpb25zLnRva2VuU2VwYXJhdG9yKTtcbiAgICAgICAgICB2YXIgc2NvcmVzID0gW107XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuU2VhcmNoZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5TZWFyY2hlciA9IHRva2VuU2VhcmNoZXJzW2ldO1xuXG4gICAgICAgICAgICB0aGlzLl9sb2coJ1xcblBhdHRlcm46IFwiJyArIHRva2VuU2VhcmNoZXIucGF0dGVybiArICdcIicpO1xuXG4gICAgICAgICAgICAvLyBsZXQgdG9rZW5TY29yZXMgPSBbXVxuICAgICAgICAgICAgdmFyIGhhc01hdGNoSW5UZXh0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgd29yZHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgdmFyIHdvcmQgPSB3b3Jkc1tqXTtcbiAgICAgICAgICAgICAgdmFyIHRva2VuU2VhcmNoUmVzdWx0ID0gdG9rZW5TZWFyY2hlci5zZWFyY2god29yZCk7XG4gICAgICAgICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgICAgICAgaWYgKHRva2VuU2VhcmNoUmVzdWx0LmlzTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBvYmpbd29yZF0gPSB0b2tlblNlYXJjaFJlc3VsdC5zY29yZTtcbiAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhhc01hdGNoSW5UZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzY29yZXMucHVzaCh0b2tlblNlYXJjaFJlc3VsdC5zY29yZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW3dvcmRdID0gMTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXRjaEFsbFRva2Vucykge1xuICAgICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuX2xvZygnVG9rZW46IFwiJyArIHdvcmQgKyAnXCIsIHNjb3JlOiAnICsgb2JqW3dvcmRdKTtcbiAgICAgICAgICAgICAgLy8gdG9rZW5TY29yZXMucHVzaChvYmopXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNNYXRjaEluVGV4dCkge1xuICAgICAgICAgICAgICBudW1UZXh0TWF0Y2hlcyArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGF2ZXJhZ2VTY29yZSA9IHNjb3Jlc1swXTtcbiAgICAgICAgICB2YXIgc2NvcmVzTGVuID0gc2NvcmVzLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKHZhciBfaTIgPSAxOyBfaTIgPCBzY29yZXNMZW47IF9pMiArPSAxKSB7XG4gICAgICAgICAgICBhdmVyYWdlU2NvcmUgKz0gc2NvcmVzW19pMl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGF2ZXJhZ2VTY29yZSA9IGF2ZXJhZ2VTY29yZSAvIHNjb3Jlc0xlbjtcblxuICAgICAgICAgIHRoaXMuX2xvZygnVG9rZW4gc2NvcmUgYXZlcmFnZTonLCBhdmVyYWdlU2NvcmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpbmFsU2NvcmUgPSBtYWluU2VhcmNoUmVzdWx0LnNjb3JlO1xuICAgICAgICBpZiAoYXZlcmFnZVNjb3JlID4gLTEpIHtcbiAgICAgICAgICBmaW5hbFNjb3JlID0gKGZpbmFsU2NvcmUgKyBhdmVyYWdlU2NvcmUpIC8gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvZygnU2NvcmUgYXZlcmFnZTonLCBmaW5hbFNjb3JlKTtcblxuICAgICAgICB2YXIgY2hlY2tUZXh0TWF0Y2hlcyA9IHRoaXMub3B0aW9ucy50b2tlbml6ZSAmJiB0aGlzLm9wdGlvbnMubWF0Y2hBbGxUb2tlbnMgPyBudW1UZXh0TWF0Y2hlcyA+PSB0b2tlblNlYXJjaGVycy5sZW5ndGggOiB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2xvZygnXFxuQ2hlY2sgTWF0Y2hlczogJyArIGNoZWNrVGV4dE1hdGNoZXMpO1xuXG4gICAgICAgIC8vIElmIGEgbWF0Y2ggaXMgZm91bmQsIGFkZCB0aGUgaXRlbSB0byA8cmF3UmVzdWx0cz4sIGluY2x1ZGluZyBpdHMgc2NvcmVcbiAgICAgICAgaWYgKChleGlzdHMgfHwgbWFpblNlYXJjaFJlc3VsdC5pc01hdGNoKSAmJiBjaGVja1RleHRNYXRjaGVzKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGl0ZW0gYWxyZWFkeSBleGlzdHMgaW4gb3VyIHJlc3VsdHNcbiAgICAgICAgICB2YXIgZXhpc3RpbmdSZXN1bHQgPSByZXN1bHRNYXBbaW5kZXhdO1xuICAgICAgICAgIGlmIChleGlzdGluZ1Jlc3VsdCkge1xuICAgICAgICAgICAgLy8gVXNlIHRoZSBsb3dlc3Qgc2NvcmVcbiAgICAgICAgICAgIC8vIGV4aXN0aW5nUmVzdWx0LnNjb3JlLCBiaXRhcFJlc3VsdC5zY29yZVxuICAgICAgICAgICAgZXhpc3RpbmdSZXN1bHQub3V0cHV0LnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgYXJyYXlJbmRleDogYXJyYXlJbmRleCxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICBzY29yZTogZmluYWxTY29yZSxcbiAgICAgICAgICAgICAgbWF0Y2hlZEluZGljZXM6IG1haW5TZWFyY2hSZXN1bHQubWF0Y2hlZEluZGljZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBZGQgaXQgdG8gdGhlIHJhdyByZXN1bHQgbGlzdFxuICAgICAgICAgICAgcmVzdWx0TWFwW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgaXRlbTogcmVjb3JkLFxuICAgICAgICAgICAgICBvdXRwdXQ6IFt7XG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgYXJyYXlJbmRleDogYXJyYXlJbmRleCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgc2NvcmU6IGZpbmFsU2NvcmUsXG4gICAgICAgICAgICAgICAgbWF0Y2hlZEluZGljZXM6IG1haW5TZWFyY2hSZXN1bHQubWF0Y2hlZEluZGljZXNcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHRNYXBbaW5kZXhdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yICh2YXIgX2kzID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoOyBfaTMgPCBsZW47IF9pMyArPSAxKSB7XG4gICAgICAgICAgdGhpcy5fYW5hbHl6ZSh7XG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIGFycmF5SW5kZXg6IF9pMyxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVtfaTNdLFxuICAgICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICByZXN1bHRNYXA6IHJlc3VsdE1hcCxcbiAgICAgICAgICAgIHJlc3VsdHM6IHJlc3VsdHMsXG4gICAgICAgICAgICB0b2tlblNlYXJjaGVyczogdG9rZW5TZWFyY2hlcnMsXG4gICAgICAgICAgICBmdWxsU2VhcmNoZXI6IGZ1bGxTZWFyY2hlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2NvbXB1dGVTY29yZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jb21wdXRlU2NvcmUod2VpZ2h0cywgcmVzdWx0cykge1xuICAgICAgdGhpcy5fbG9nKCdcXG5cXG5Db21wdXRpbmcgc2NvcmU6XFxuJyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZXN1bHRzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSByZXN1bHRzW2ldLm91dHB1dDtcbiAgICAgICAgdmFyIHNjb3JlTGVuID0gb3V0cHV0Lmxlbmd0aDtcblxuICAgICAgICB2YXIgdG90YWxTY29yZSA9IDA7XG4gICAgICAgIHZhciBiZXN0U2NvcmUgPSAxO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2NvcmVMZW47IGogKz0gMSkge1xuICAgICAgICAgIHZhciB3ZWlnaHQgPSB3ZWlnaHRzID8gd2VpZ2h0c1tvdXRwdXRbal0ua2V5XS53ZWlnaHQgOiAxO1xuICAgICAgICAgIHZhciBzY29yZSA9IHdlaWdodCA9PT0gMSA/IG91dHB1dFtqXS5zY29yZSA6IG91dHB1dFtqXS5zY29yZSB8fCAwLjAwMTtcbiAgICAgICAgICB2YXIgblNjb3JlID0gc2NvcmUgKiB3ZWlnaHQ7XG5cbiAgICAgICAgICBpZiAod2VpZ2h0ICE9PSAxKSB7XG4gICAgICAgICAgICBiZXN0U2NvcmUgPSBNYXRoLm1pbihiZXN0U2NvcmUsIG5TY29yZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dFtqXS5uU2NvcmUgPSBuU2NvcmU7XG4gICAgICAgICAgICB0b3RhbFNjb3JlICs9IG5TY29yZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRzW2ldLnNjb3JlID0gYmVzdFNjb3JlID09PSAxID8gdG90YWxTY29yZSAvIHNjb3JlTGVuIDogYmVzdFNjb3JlO1xuXG4gICAgICAgIHRoaXMuX2xvZyhyZXN1bHRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc29ydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zb3J0KHJlc3VsdHMpIHtcbiAgICAgIHRoaXMuX2xvZygnXFxuXFxuU29ydGluZy4uLi4nKTtcbiAgICAgIHJlc3VsdHMuc29ydCh0aGlzLm9wdGlvbnMuc29ydEZuKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfZm9ybWF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Zvcm1hdChyZXN1bHRzKSB7XG4gICAgICB2YXIgZmluYWxPdXRwdXQgPSBbXTtcblxuICAgICAgdGhpcy5fbG9nKCdcXG5cXG5PdXRwdXQ6XFxuXFxuJywgSlNPTi5zdHJpbmdpZnkocmVzdWx0cykpO1xuXG4gICAgICB2YXIgdHJhbnNmb3JtZXJzID0gW107XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5jbHVkZU1hdGNoZXMpIHtcbiAgICAgICAgdHJhbnNmb3JtZXJzLnB1c2goZnVuY3Rpb24gKHJlc3VsdCwgZGF0YSkge1xuICAgICAgICAgIHZhciBvdXRwdXQgPSByZXN1bHQub3V0cHV0O1xuICAgICAgICAgIGRhdGEubWF0Y2hlcyA9IFtdO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG91dHB1dC5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBvdXRwdXRbaV07XG5cbiAgICAgICAgICAgIGlmIChpdGVtLm1hdGNoZWRJbmRpY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG9iaiA9IHtcbiAgICAgICAgICAgICAgaW5kaWNlczogaXRlbS5tYXRjaGVkSW5kaWNlcyxcbiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaXRlbS5rZXkpIHtcbiAgICAgICAgICAgICAgb2JqLmtleSA9IGl0ZW0ua2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2FycmF5SW5kZXgnKSAmJiBpdGVtLmFycmF5SW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICBvYmouYXJyYXlJbmRleCA9IGl0ZW0uYXJyYXlJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEubWF0Y2hlcy5wdXNoKG9iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbmNsdWRlU2NvcmUpIHtcbiAgICAgICAgdHJhbnNmb3JtZXJzLnB1c2goZnVuY3Rpb24gKHJlc3VsdCwgZGF0YSkge1xuICAgICAgICAgIGRhdGEuc2NvcmUgPSByZXN1bHQuc2NvcmU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlkKSB7XG4gICAgICAgICAgcmVzdWx0Lml0ZW0gPSB0aGlzLm9wdGlvbnMuZ2V0Rm4ocmVzdWx0Lml0ZW0sIHRoaXMub3B0aW9ucy5pZClbMF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRyYW5zZm9ybWVycy5sZW5ndGgpIHtcbiAgICAgICAgICBmaW5hbE91dHB1dC5wdXNoKHJlc3VsdC5pdGVtKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgIGl0ZW06IHJlc3VsdC5pdGVtXG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIF9sZW4yID0gdHJhbnNmb3JtZXJzLmxlbmd0aDsgaiA8IF9sZW4yOyBqICs9IDEpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1lcnNbal0ocmVzdWx0LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbmFsT3V0cHV0LnB1c2goZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaW5hbE91dHB1dDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfbG9nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2xvZygpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudmVyYm9zZSkge1xuICAgICAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICAgICAgKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGdXNlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1c2U7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVzZS5qcy5tYXBcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2Z1c2UuanMvZGlzdC9mdXNlLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2Z1c2UuanMvZGlzdFwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbnZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTX1VSTF9TQUZFID0gJy0nLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIX1VSTF9TQUZFID0gJ18nLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdCAgICBjb2RlID09PSBQTFVTX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYyIC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdCAgICBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdHJldHVybiAtMSAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMClcblx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gVVBQRVJcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIExPV0VSICsgMjZcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5IChiNjQpIHtcblx0XHR2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jylcblx0XHR9XG5cblx0XHQvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHQvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0XHQvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0dmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0XHRwbGFjZUhvbGRlcnMgPSAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMikgPyAyIDogJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDEpID8gMSA6IDBcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoXG5cblx0XHR2YXIgTCA9IDBcblxuXHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdGFycltMKytdID0gdlxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTgpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPDwgNikgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDApID4+IDgpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0aWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0cHVzaCgodG1wID4+IDgpICYgMHhGRilcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyXG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0ICh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdFx0ZXh0cmFCeXRlcyA9IHVpbnQ4Lmxlbmd0aCAlIDMsIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG5cdFx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdFx0dGVtcCwgbGVuZ3RoXG5cblx0XHRmdW5jdGlvbiBlbmNvZGUgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKG51bSA+PiAxOCAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiAxMiAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiA2ICYgMHgzRikgKyBlbmNvZGUobnVtICYgMHgzRilcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0b3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCh0ZW1wKVxuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAyKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9PSdcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArICh1aW50OFt1aW50OC5sZW5ndGggLSAxXSlcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDEwKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCAyKSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPSdcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cblxuXHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0ZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5iYXNlNjRqcyA9IHt9KSA6IGV4cG9ydHMpKVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9saWIvYjY0LmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2xpYlwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTJcblxuLyoqXG4gKiBJZiBgQnVmZmVyLl91c2VUeXBlZEFycmF5c2A6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChjb21wYXRpYmxlIGRvd24gdG8gSUU2KVxuICovXG5CdWZmZXIuX3VzZVR5cGVkQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gRGV0ZWN0IGlmIGJyb3dzZXIgc3VwcG9ydHMgVHlwZWQgQXJyYXlzLiBTdXBwb3J0ZWQgYnJvd3NlcnMgYXJlIElFIDEwKywgRmlyZWZveCA0KyxcbiAgLy8gQ2hyb21lIDcrLCBTYWZhcmkgNS4xKywgT3BlcmEgMTEuNissIGlPUyA0LjIrLiBJZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGFkZGluZ1xuICAvLyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsIHRoZW4gdGhhdCdzIHRoZSBzYW1lIGFzIG5vIGBVaW50OEFycmF5YCBzdXBwb3J0XG4gIC8vIGJlY2F1c2Ugd2UgbmVlZCB0byBiZSBhYmxlIHRvIGFkZCBhbGwgdGhlIG5vZGUgQnVmZmVyIEFQSSBtZXRob2RzLiBUaGlzIGlzIGFuIGlzc3VlXG4gIC8vIGluIEZpcmVmb3ggNC0yOS4gTm93IGZpeGVkOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzhcbiAgdHJ5IHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKDApXG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICBhcnIuZm9vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAgIHJldHVybiA0MiA9PT0gYXJyLmZvbygpICYmXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgLy8gQ2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufSkoKVxuXG4vKipcbiAqIENsYXNzOiBCdWZmZXJcbiAqID09PT09PT09PT09PT1cbiAqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGFyZSBhdWdtZW50ZWRcbiAqIHdpdGggZnVuY3Rpb24gcHJvcGVydGllcyBmb3IgYWxsIHRoZSBub2RlIGBCdWZmZXJgIEFQSSBmdW5jdGlvbnMuIFdlIHVzZVxuICogYFVpbnQ4QXJyYXlgIHNvIHRoYXQgc3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXQgcmV0dXJuc1xuICogYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogQnkgYXVnbWVudGluZyB0aGUgaW5zdGFuY2VzLCB3ZSBjYW4gYXZvaWQgbW9kaWZ5aW5nIHRoZSBgVWludDhBcnJheWBcbiAqIHByb3RvdHlwZS5cbiAqL1xuZnVuY3Rpb24gQnVmZmVyIChzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKVxuICAgIHJldHVybiBuZXcgQnVmZmVyKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pXG5cbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc3ViamVjdFxuXG4gIC8vIFdvcmthcm91bmQ6IG5vZGUncyBiYXNlNjQgaW1wbGVtZW50YXRpb24gYWxsb3dzIGZvciBub24tcGFkZGVkIHN0cmluZ3NcbiAgLy8gd2hpbGUgYmFzZTY0LWpzIGRvZXMgbm90LlxuICBpZiAoZW5jb2RpbmcgPT09ICdiYXNlNjQnICYmIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3ViamVjdCA9IHN0cmluZ3RyaW0oc3ViamVjdClcbiAgICB3aGlsZSAoc3ViamVjdC5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgICBzdWJqZWN0ID0gc3ViamVjdCArICc9J1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGxlbmd0aFxuICB2YXIgbGVuZ3RoXG4gIGlmICh0eXBlID09PSAnbnVtYmVyJylcbiAgICBsZW5ndGggPSBjb2VyY2Uoc3ViamVjdClcbiAgZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpXG4gICAgbGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3ViamVjdCwgZW5jb2RpbmcpXG4gIGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKVxuICAgIGxlbmd0aCA9IGNvZXJjZShzdWJqZWN0Lmxlbmd0aCkgLy8gYXNzdW1lIHRoYXQgb2JqZWN0IGlzIGFycmF5LWxpa2VcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgbmVlZHMgdG8gYmUgYSBudW1iZXIsIGFycmF5IG9yIHN0cmluZy4nKVxuXG4gIHZhciBidWZcbiAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICAvLyBQcmVmZXJyZWQ6IFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgYnVmID0gQnVmZmVyLl9hdWdtZW50KG5ldyBVaW50OEFycmF5KGxlbmd0aCkpXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBUSElTIGluc3RhbmNlIG9mIEJ1ZmZlciAoY3JlYXRlZCBieSBgbmV3YClcbiAgICBidWYgPSB0aGlzXG4gICAgYnVmLmxlbmd0aCA9IGxlbmd0aFxuICAgIGJ1Zi5faXNCdWZmZXIgPSB0cnVlXG4gIH1cblxuICB2YXIgaVxuICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cyAmJiB0eXBlb2Ygc3ViamVjdC5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIFNwZWVkIG9wdGltaXphdGlvbiAtLSB1c2Ugc2V0IGlmIHdlJ3JlIGNvcHlpbmcgZnJvbSBhIHR5cGVkIGFycmF5XG4gICAgYnVmLl9zZXQoc3ViamVjdClcbiAgfSBlbHNlIGlmIChpc0FycmF5aXNoKHN1YmplY3QpKSB7XG4gICAgLy8gVHJlYXQgYXJyYXktaXNoIG9iamVjdHMgYXMgYSBieXRlIGFycmF5XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpKVxuICAgICAgICBidWZbaV0gPSBzdWJqZWN0LnJlYWRVSW50OChpKVxuICAgICAgZWxzZVxuICAgICAgICBidWZbaV0gPSBzdWJqZWN0W2ldXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmLndyaXRlKHN1YmplY3QsIDAsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmICFCdWZmZXIuX3VzZVR5cGVkQXJyYXlzICYmICFub1plcm8pIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1ZltpXSA9IDBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbi8vIFNUQVRJQyBNRVRIT0RTXG4vLyA9PT09PT09PT09PT09PVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAncmF3JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gKGIpIHtcbiAgcmV0dXJuICEhKGIgIT09IG51bGwgJiYgYiAhPT0gdW5kZWZpbmVkICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIChzdHIsIGVuY29kaW5nKSB7XG4gIHZhciByZXRcbiAgc3RyID0gc3RyICsgJydcbiAgc3dpdGNoIChlbmNvZGluZyB8fCAndXRmOCcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aCAvIDJcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0ID0gdXRmOFRvQnl0ZXMoc3RyKS5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAncmF3JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IGJhc2U2NFRvQnl0ZXMoc3RyKS5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggKiAyXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBhc3NlcnQoaXNBcnJheShsaXN0KSwgJ1VzYWdlOiBCdWZmZXIuY29uY2F0KGxpc3QsIFt0b3RhbExlbmd0aF0pXFxuJyArXG4gICAgICAnbGlzdCBzaG91bGQgYmUgYW4gQXJyYXkuJylcblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuICB9IGVsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGxpc3RbMF1cbiAgfVxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdG90YWxMZW5ndGggIT09ICdudW1iZXInKSB7XG4gICAgdG90YWxMZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIodG90YWxMZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgaXRlbS5jb3B5KGJ1ZiwgcG9zKVxuICAgIHBvcyArPSBpdGVtLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZcbn1cblxuLy8gQlVGRkVSIElOU1RBTkNFIE1FVEhPRFNcbi8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIF9oZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGFzc2VydChzdHJMZW4gJSAyID09PSAwLCAnSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGJ5dGUgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgYXNzZXJ0KCFpc05hTihieXRlKSwgJ0ludmFsaWQgaGV4IHN0cmluZycpXG4gICAgYnVmW29mZnNldCArIGldID0gYnl0ZVxuICB9XG4gIEJ1ZmZlci5fY2hhcnNXcml0dGVuID0gaSAqIDJcbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gX3V0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9XG4gICAgYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIF9hc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIF9iaW5hcnlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBfYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIF9iYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9XG4gICAgYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX3V0ZjE2bGVXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9XG4gICAgYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gU3VwcG9ydCBib3RoIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZylcbiAgLy8gYW5kIHRoZSBsZWdhY3kgKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIGlmICghaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHsgIC8vIGxlZ2FjeVxuICAgIHZhciBzd2FwID0gZW5jb2RpbmdcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIG9mZnNldCA9IGxlbmd0aFxuICAgIGxlbmd0aCA9IHN3YXBcbiAgfVxuXG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cbiAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIHJldFxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IF9oZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSBfdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIHJldCA9IF9hc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXQgPSBfYmluYXJ5V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IF9iYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gX3V0ZjE2bGVXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nJylcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpXG4gIHN0YXJ0ID0gTnVtYmVyKHN0YXJ0KSB8fCAwXG4gIGVuZCA9IChlbmQgIT09IHVuZGVmaW5lZClcbiAgICA/IE51bWJlcihlbmQpXG4gICAgOiBlbmQgPSBzZWxmLmxlbmd0aFxuXG4gIC8vIEZhc3RwYXRoIGVtcHR5IHN0cmluZ3NcbiAgaWYgKGVuZCA9PT0gc3RhcnQpXG4gICAgcmV0dXJuICcnXG5cbiAgdmFyIHJldFxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IF9oZXhTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSBfdXRmOFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIHJldCA9IF9hc2NpaVNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXQgPSBfYmluYXJ5U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IF9iYXNlNjRTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gX3V0ZjE2bGVTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nJylcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldF9zdGFydCwgc3RhcnQsIGVuZCkge1xuICB2YXIgc291cmNlID0gdGhpc1xuXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICghdGFyZ2V0X3N0YXJ0KSB0YXJnZXRfc3RhcnQgPSAwXG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm5cbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgc291cmNlLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBhc3NlcnQoZW5kID49IHN0YXJ0LCAnc291cmNlRW5kIDwgc291cmNlU3RhcnQnKVxuICBhc3NlcnQodGFyZ2V0X3N0YXJ0ID49IDAgJiYgdGFyZ2V0X3N0YXJ0IDwgdGFyZ2V0Lmxlbmd0aCxcbiAgICAgICd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KHN0YXJ0ID49IDAgJiYgc3RhcnQgPCBzb3VyY2UubGVuZ3RoLCAnc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGFzc2VydChlbmQgPj0gMCAmJiBlbmQgPD0gc291cmNlLmxlbmd0aCwgJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpXG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgPCBlbmQgLSBzdGFydClcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0ICsgc3RhcnRcblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAobGVuIDwgMTAwIHx8ICFCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0X3N0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICB9IGVsc2Uge1xuICAgIHRhcmdldC5fc2V0KHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwgdGFyZ2V0X3N0YXJ0KVxuICB9XG59XG5cbmZ1bmN0aW9uIF9iYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gX3V0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXMgPSAnJ1xuICB2YXIgdG1wID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGJ1ZltpXSA8PSAweDdGKSB7XG4gICAgICByZXMgKz0gZGVjb2RlVXRmOENoYXIodG1wKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICAgICAgdG1wID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgdG1wICs9ICclJyArIGJ1ZltpXS50b1N0cmluZygxNilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzICsgZGVjb2RlVXRmOENoYXIodG1wKVxufVxuXG5mdW5jdGlvbiBfYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspXG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIF9iaW5hcnlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBfYXNjaWlTbGljZShidWYsIHN0YXJ0LCBlbmQpXG59XG5cbmZ1bmN0aW9uIF9oZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIF91dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2krMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gY2xhbXAoc3RhcnQsIGxlbiwgMClcbiAgZW5kID0gY2xhbXAoZW5kLCBsZW4sIGxlbilcblxuICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cykge1xuICAgIHJldHVybiBCdWZmZXIuX2F1Z21lbnQodGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIHZhciBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQsIHRydWUpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgaSsrKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gICAgcmV0dXJuIG5ld0J1ZlxuICB9XG59XG5cbi8vIGBnZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5nZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLnJlYWRVSW50OChvZmZzZXQpXG59XG5cbi8vIGBzZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2LCBvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5zZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLndyaXRlVUludDgodiwgb2Zmc2V0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuXG5cbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5mdW5jdGlvbiBfcmVhZFVJbnQxNiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWxcbiAgaWYgKGxpdHRsZUVuZGlhbikge1xuICAgIHZhbCA9IGJ1ZltvZmZzZXRdXG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDFdIDw8IDhcbiAgfSBlbHNlIHtcbiAgICB2YWwgPSBidWZbb2Zmc2V0XSA8PCA4XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDFdXG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQxNih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQxNih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3JlYWRVSW50MzIgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsXG4gIGlmIChsaXR0bGVFbmRpYW4pIHtcbiAgICBpZiAob2Zmc2V0ICsgMiA8IGxlbilcbiAgICAgIHZhbCA9IGJ1ZltvZmZzZXQgKyAyXSA8PCAxNlxuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAxXSA8PCA4XG4gICAgdmFsIHw9IGJ1ZltvZmZzZXRdXG4gICAgaWYgKG9mZnNldCArIDMgPCBsZW4pXG4gICAgICB2YWwgPSB2YWwgKyAoYnVmW29mZnNldCArIDNdIDw8IDI0ID4+PiAwKVxuICB9IGVsc2Uge1xuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKVxuICAgICAgdmFsID0gYnVmW29mZnNldCArIDFdIDw8IDE2XG4gICAgaWYgKG9mZnNldCArIDIgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDJdIDw8IDhcbiAgICBpZiAob2Zmc2V0ICsgMyA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgM11cbiAgICB2YWwgPSB2YWwgKyAoYnVmW29mZnNldF0gPDwgMjQgPj4+IDApXG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQzMih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQzMih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuXG5cbiAgdmFyIG5lZyA9IHRoaXNbb2Zmc2V0XSAmIDB4ODBcbiAgaWYgKG5lZylcbiAgICByZXR1cm4gKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbmZ1bmN0aW9uIF9yZWFkSW50MTYgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsID0gX3JlYWRVSW50MTYoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgdHJ1ZSlcbiAgdmFyIG5lZyA9IHZhbCAmIDB4ODAwMFxuICBpZiAobmVnKVxuICAgIHJldHVybiAoMHhmZmZmIC0gdmFsICsgMSkgKiAtMVxuICBlbHNlXG4gICAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MTYodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDE2KHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZEludDMyIChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgdmFyIHZhbCA9IF9yZWFkVUludDMyKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIHRydWUpXG4gIHZhciBuZWcgPSB2YWwgJiAweDgwMDAwMDAwXG4gIGlmIChuZWcpXG4gICAgcmV0dXJuICgweGZmZmZmZmZmIC0gdmFsICsgMSkgKiAtMVxuICBlbHNlXG4gICAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MzIodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDMyKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZEZsb2F0IChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHJldHVybiBpZWVlNzU0LnJlYWQoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRGbG9hdCh0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRmxvYXQodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkRG91YmxlIChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgKyA3IDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHJldHVybiBpZWVlNzU0LnJlYWQoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRG91YmxlKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRG91YmxlKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0IDwgdGhpcy5sZW5ndGgsICd0cnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmdWludCh2YWx1ZSwgMHhmZilcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpIHJldHVyblxuXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG59XG5cbmZ1bmN0aW9uIF93cml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmZmYpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGxlbiAtIG9mZnNldCwgMik7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPVxuICAgICAgICAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmZmZmZmZmKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihsZW4gLSBvZmZzZXQsIDQpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID1cbiAgICAgICAgKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmLCAtMHg4MClcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuXG5cbiAgaWYgKHZhbHVlID49IDApXG4gICAgdGhpcy53cml0ZVVJbnQ4KHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KVxuICBlbHNlXG4gICAgdGhpcy53cml0ZVVJbnQ4KDB4ZmYgKyB2YWx1ZSArIDEsIG9mZnNldCwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2ZmZiwgLTB4ODAwMClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGlmICh2YWx1ZSA+PSAwKVxuICAgIF93cml0ZVVJbnQxNihidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICBfd3JpdGVVSW50MTYoYnVmLCAweGZmZmYgKyB2YWx1ZSArIDEsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBpZiAodmFsdWUgPj0gMClcbiAgICBfd3JpdGVVSW50MzIoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxuICBlbHNlXG4gICAgX3dyaXRlVUludDMyKGJ1ZiwgMHhmZmZmZmZmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZJRUVFNzU0KHZhbHVlLCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgNyA8IGJ1Zi5sZW5ndGgsXG4gICAgICAgICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmSUVFRTc1NCh2YWx1ZSwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gZmlsbCh2YWx1ZSwgc3RhcnQ9MCwgZW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCF2YWx1ZSkgdmFsdWUgPSAwXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCkgZW5kID0gdGhpcy5sZW5ndGhcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gdmFsdWUuY2hhckNvZGVBdCgwKVxuICB9XG5cbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKSwgJ3ZhbHVlIGlzIG5vdCBhIG51bWJlcicpXG4gIGFzc2VydChlbmQgPj0gc3RhcnQsICdlbmQgPCBzdGFydCcpXG5cbiAgLy8gRmlsbCAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICBhc3NlcnQoc3RhcnQgPj0gMCAmJiBzdGFydCA8IHRoaXMubGVuZ3RoLCAnc3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGFzc2VydChlbmQgPj0gMCAmJiBlbmQgPD0gdGhpcy5sZW5ndGgsICdlbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICB0aGlzW2ldID0gdmFsdWVcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvdXQgPSBbXVxuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dFtpXSA9IHRvSGV4KHRoaXNbaV0pXG4gICAgaWYgKGkgPT09IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMpIHtcbiAgICAgIG91dFtpICsgMV0gPSAnLi4uJ1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBvdXQuam9pbignICcpICsgJz4nXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgQXJyYXlCdWZmZXJgIHdpdGggdGhlICpjb3BpZWQqIG1lbW9yeSBvZiB0aGUgYnVmZmVyIGluc3RhbmNlLlxuICogQWRkZWQgaW4gTm9kZSAwLjEyLiBPbmx5IGF2YWlsYWJsZSBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgQXJyYXlCdWZmZXIuXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUudG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgICByZXR1cm4gKG5ldyBCdWZmZXIodGhpcykpLmJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5sZW5ndGgpXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKVxuICAgICAgICBidWZbaV0gPSB0aGlzW2ldXG4gICAgICByZXR1cm4gYnVmLmJ1ZmZlclxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0J1ZmZlci50b0FycmF5QnVmZmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJylcbiAgfVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbnZhciBCUCA9IEJ1ZmZlci5wcm90b3R5cGVcblxuLyoqXG4gKiBBdWdtZW50IGEgVWludDhBcnJheSAqaW5zdGFuY2UqIChub3QgdGhlIFVpbnQ4QXJyYXkgY2xhc3MhKSB3aXRoIEJ1ZmZlciBtZXRob2RzXG4gKi9cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9pc0J1ZmZlciA9IHRydWVcblxuICAvLyBzYXZlIHJlZmVyZW5jZSB0byBvcmlnaW5hbCBVaW50OEFycmF5IGdldC9zZXQgbWV0aG9kcyBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgYXJyLl9nZXQgPSBhcnIuZ2V0XG4gIGFyci5fc2V0ID0gYXJyLnNldFxuXG4gIC8vIGRlcHJlY2F0ZWQsIHdpbGwgYmUgcmVtb3ZlZCBpbiBub2RlIDAuMTMrXG4gIGFyci5nZXQgPSBCUC5nZXRcbiAgYXJyLnNldCA9IEJQLnNldFxuXG4gIGFyci53cml0ZSA9IEJQLndyaXRlXG4gIGFyci50b1N0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0xvY2FsZVN0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0pTT04gPSBCUC50b0pTT05cbiAgYXJyLmNvcHkgPSBCUC5jb3B5XG4gIGFyci5zbGljZSA9IEJQLnNsaWNlXG4gIGFyci5yZWFkVUludDggPSBCUC5yZWFkVUludDhcbiAgYXJyLnJlYWRVSW50MTZMRSA9IEJQLnJlYWRVSW50MTZMRVxuICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFXG4gIGFyci5yZWFkVUludDMyTEUgPSBCUC5yZWFkVUludDMyTEVcbiAgYXJyLnJlYWRVSW50MzJCRSA9IEJQLnJlYWRVSW50MzJCRVxuICBhcnIucmVhZEludDggPSBCUC5yZWFkSW50OFxuICBhcnIucmVhZEludDE2TEUgPSBCUC5yZWFkSW50MTZMRVxuICBhcnIucmVhZEludDE2QkUgPSBCUC5yZWFkSW50MTZCRVxuICBhcnIucmVhZEludDMyTEUgPSBCUC5yZWFkSW50MzJMRVxuICBhcnIucmVhZEludDMyQkUgPSBCUC5yZWFkSW50MzJCRVxuICBhcnIucmVhZEZsb2F0TEUgPSBCUC5yZWFkRmxvYXRMRVxuICBhcnIucmVhZEZsb2F0QkUgPSBCUC5yZWFkRmxvYXRCRVxuICBhcnIucmVhZERvdWJsZUxFID0gQlAucmVhZERvdWJsZUxFXG4gIGFyci5yZWFkRG91YmxlQkUgPSBCUC5yZWFkRG91YmxlQkVcbiAgYXJyLndyaXRlVUludDggPSBCUC53cml0ZVVJbnQ4XG4gIGFyci53cml0ZVVJbnQxNkxFID0gQlAud3JpdGVVSW50MTZMRVxuICBhcnIud3JpdGVVSW50MTZCRSA9IEJQLndyaXRlVUludDE2QkVcbiAgYXJyLndyaXRlVUludDMyTEUgPSBCUC53cml0ZVVJbnQzMkxFXG4gIGFyci53cml0ZVVJbnQzMkJFID0gQlAud3JpdGVVSW50MzJCRVxuICBhcnIud3JpdGVJbnQ4ID0gQlAud3JpdGVJbnQ4XG4gIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEVcbiAgYXJyLndyaXRlSW50MTZCRSA9IEJQLndyaXRlSW50MTZCRVxuICBhcnIud3JpdGVJbnQzMkxFID0gQlAud3JpdGVJbnQzMkxFXG4gIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkVcbiAgYXJyLndyaXRlRmxvYXRMRSA9IEJQLndyaXRlRmxvYXRMRVxuICBhcnIud3JpdGVGbG9hdEJFID0gQlAud3JpdGVGbG9hdEJFXG4gIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRVxuICBhcnIud3JpdGVEb3VibGVCRSA9IEJQLndyaXRlRG91YmxlQkVcbiAgYXJyLmZpbGwgPSBCUC5maWxsXG4gIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdFxuICBhcnIudG9BcnJheUJ1ZmZlciA9IEJQLnRvQXJyYXlCdWZmZXJcblxuICByZXR1cm4gYXJyXG59XG5cbi8vIHNsaWNlKHN0YXJ0LCBlbmQpXG5mdW5jdGlvbiBjbGFtcCAoaW5kZXgsIGxlbiwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSByZXR1cm4gZGVmYXVsdFZhbHVlXG4gIGluZGV4ID0gfn5pbmRleDsgIC8vIENvZXJjZSB0byBpbnRlZ2VyLlxuICBpZiAoaW5kZXggPj0gbGVuKSByZXR1cm4gbGVuXG4gIGlmIChpbmRleCA+PSAwKSByZXR1cm4gaW5kZXhcbiAgaW5kZXggKz0gbGVuXG4gIGlmIChpbmRleCA+PSAwKSByZXR1cm4gaW5kZXhcbiAgcmV0dXJuIDBcbn1cblxuZnVuY3Rpb24gY29lcmNlIChsZW5ndGgpIHtcbiAgLy8gQ29lcmNlIGxlbmd0aCB0byBhIG51bWJlciAocG9zc2libHkgTmFOKSwgcm91bmQgdXBcbiAgLy8gaW4gY2FzZSBpdCdzIGZyYWN0aW9uYWwgKGUuZy4gMTIzLjQ1NikgdGhlbiBkbyBhXG4gIC8vIGRvdWJsZSBuZWdhdGUgdG8gY29lcmNlIGEgTmFOIHRvIDAuIEVhc3ksIHJpZ2h0P1xuICBsZW5ndGggPSB+fk1hdGguY2VpbCgrbGVuZ3RoKVxuICByZXR1cm4gbGVuZ3RoIDwgMCA/IDAgOiBsZW5ndGhcbn1cblxuZnVuY3Rpb24gaXNBcnJheSAoc3ViamVjdCkge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN1YmplY3QpID09PSAnW29iamVjdCBBcnJheV0nXG4gIH0pKHN1YmplY3QpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlpc2ggKHN1YmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXkoc3ViamVjdCkgfHwgQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpIHx8XG4gICAgICBzdWJqZWN0ICYmIHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHN1YmplY3QubGVuZ3RoID09PSAnbnVtYmVyJ1xufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGIgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGlmIChiIDw9IDB4N0YpXG4gICAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSlcbiAgICBlbHNlIHtcbiAgICAgIHZhciBzdGFydCA9IGlcbiAgICAgIGlmIChiID49IDB4RDgwMCAmJiBiIDw9IDB4REZGRikgaSsrXG4gICAgICB2YXIgaCA9IGVuY29kZVVSSUNvbXBvbmVudChzdHIuc2xpY2Uoc3RhcnQsIGkrMSkpLnN1YnN0cigxKS5zcGxpdCgnJScpXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGgubGVuZ3RoOyBqKyspXG4gICAgICAgIGJ5dGVBcnJheS5wdXNoKHBhcnNlSW50KGhbal0sIDE2KSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoc3RyKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIHBvc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKVxuICAgICAgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBkZWNvZGVVdGY4Q2hhciAoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkgLy8gVVRGIDggaW52YWxpZCBjaGFyXG4gIH1cbn1cblxuLypcbiAqIFdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgdmFsaWQgaW50ZWdlci4gVGhpcyBtZWFucyB0aGF0IGl0XG4gKiBpcyBub24tbmVnYXRpdmUuIEl0IGhhcyBubyBmcmFjdGlvbmFsIGNvbXBvbmVudCBhbmQgdGhhdCBpdCBkb2VzIG5vdFxuICogZXhjZWVkIHRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHZlcmlmdWludCAodmFsdWUsIG1heCkge1xuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJywgJ2Nhbm5vdCB3cml0ZSBhIG5vbi1udW1iZXIgYXMgYSBudW1iZXInKVxuICBhc3NlcnQodmFsdWUgPj0gMCwgJ3NwZWNpZmllZCBhIG5lZ2F0aXZlIHZhbHVlIGZvciB3cml0aW5nIGFuIHVuc2lnbmVkIHZhbHVlJylcbiAgYXNzZXJ0KHZhbHVlIDw9IG1heCwgJ3ZhbHVlIGlzIGxhcmdlciB0aGFuIG1heGltdW0gdmFsdWUgZm9yIHR5cGUnKVxuICBhc3NlcnQoTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlLCAndmFsdWUgaGFzIGEgZnJhY3Rpb25hbCBjb21wb25lbnQnKVxufVxuXG5mdW5jdGlvbiB2ZXJpZnNpbnQgKHZhbHVlLCBtYXgsIG1pbikge1xuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJywgJ2Nhbm5vdCB3cml0ZSBhIG5vbi1udW1iZXIgYXMgYSBudW1iZXInKVxuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgbGFyZ2VyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlJylcbiAgYXNzZXJ0KHZhbHVlID49IG1pbiwgJ3ZhbHVlIHNtYWxsZXIgdGhhbiBtaW5pbXVtIGFsbG93ZWQgdmFsdWUnKVxuICBhc3NlcnQoTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlLCAndmFsdWUgaGFzIGEgZnJhY3Rpb25hbCBjb21wb25lbnQnKVxufVxuXG5mdW5jdGlvbiB2ZXJpZklFRUU3NTQgKHZhbHVlLCBtYXgsIG1pbikge1xuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJywgJ2Nhbm5vdCB3cml0ZSBhIG5vbi1udW1iZXIgYXMgYSBudW1iZXInKVxuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgbGFyZ2VyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlJylcbiAgYXNzZXJ0KHZhbHVlID49IG1pbiwgJ3ZhbHVlIHNtYWxsZXIgdGhhbiBtaW5pbXVtIGFsbG93ZWQgdmFsdWUnKVxufVxuXG5mdW5jdGlvbiBhc3NlcnQgKHRlc3QsIG1lc3NhZ2UpIHtcbiAgaWYgKCF0ZXN0KSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSB8fCAnRmFpbGVkIGFzc2VydGlvbicpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyXCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIsXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2d1bHAtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzc1wiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJiNTVtV0VcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLi8uLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9pZWVlNzU0XCIpIiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjMuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTgtMDEtMjBUMTc6MjRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYywgbm9kZSApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXHRcdFx0XHRpZiAoIG5vZGVbIGkgXSApIHtcblx0XHRcdFx0XHRzY3JpcHRbIGkgXSA9IG5vZGVbIGkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMy4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MsIG5vZGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzNiB8fCBcImFic29sdXRlXCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXHRcdCkgKTtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveDtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSB2YWx1ZUlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApIHtcblxuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXTtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBwcm92aWRlIGJvcmRlci1ib3ggdmFsdWVzXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWU7XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzdXBwb3J0LnNjcm9sbGJveFNpemUoKSA9PT0gc3R5bGVzLnBvc2l0aW9uICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiYjU1bVdFXCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi4vLi4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdFwiKSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbi8qIVxuICogbXVzdGFjaGUuanMgLSBMb2dpYy1sZXNzIHt7bXVzdGFjaGV9fSB0ZW1wbGF0ZXMgd2l0aCBKYXZhU2NyaXB0XG4gKiBodHRwOi8vZ2l0aHViLmNvbS9qYW5sL211c3RhY2hlLmpzXG4gKi9cblxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSBNdXN0YWNoZTogdHJ1ZSovXG5cbihmdW5jdGlvbiBkZWZpbmVNdXN0YWNoZSAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiB0eXBlb2YgZXhwb3J0cy5ub2RlTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMpOyAvLyBDb21tb25KU1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSk7IC8vIEFNRFxuICB9IGVsc2Uge1xuICAgIGdsb2JhbC5NdXN0YWNoZSA9IHt9O1xuICAgIGZhY3RvcnkoZ2xvYmFsLk11c3RhY2hlKTsgLy8gc2NyaXB0LCB3c2gsIGFzcFxuICB9XG59KHRoaXMsIGZ1bmN0aW9uIG11c3RhY2hlRmFjdG9yeSAobXVzdGFjaGUpIHtcblxuICB2YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheVBvbHlmaWxsIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGlzRnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vcmUgY29ycmVjdCB0eXBlb2Ygc3RyaW5nIGhhbmRsaW5nIGFycmF5XG4gICAqIHdoaWNoIG5vcm1hbGx5IHJldHVybnMgdHlwZW9mICdvYmplY3QnXG4gICAqL1xuICBmdW5jdGlvbiB0eXBlU3RyIChvYmopIHtcbiAgICByZXR1cm4gaXNBcnJheShvYmopID8gJ2FycmF5JyA6IHR5cGVvZiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOdWxsIHNhZmUgd2F5IG9mIGNoZWNraW5nIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdCxcbiAgICogaW5jbHVkaW5nIGl0cyBwcm90b3R5cGUsIGhhcyBhIGdpdmVuIHByb3BlcnR5XG4gICAqL1xuICBmdW5jdGlvbiBoYXNQcm9wZXJ0eSAob2JqLCBwcm9wTmFtZSkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAocHJvcE5hbWUgaW4gb2JqKTtcbiAgfVxuXG4gIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9icm93c2UvQ09VQ0hEQi01NzdcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYW5sL211c3RhY2hlLmpzL2lzc3Vlcy8xODlcbiAgdmFyIHJlZ0V4cFRlc3QgPSBSZWdFeHAucHJvdG90eXBlLnRlc3Q7XG4gIGZ1bmN0aW9uIHRlc3RSZWdFeHAgKHJlLCBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVnRXhwVGVzdC5jYWxsKHJlLCBzdHJpbmcpO1xuICB9XG5cbiAgdmFyIG5vblNwYWNlUmUgPSAvXFxTLztcbiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChzdHJpbmcpIHtcbiAgICByZXR1cm4gIXRlc3RSZWdFeHAobm9uU3BhY2VSZSwgc3RyaW5nKTtcbiAgfVxuXG4gIHZhciBlbnRpdHlNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICcvJzogJyYjeDJGOycsXG4gICAgJ2AnOiAnJiN4NjA7JyxcbiAgICAnPSc6ICcmI3gzRDsnXG4gIH07XG5cbiAgZnVuY3Rpb24gZXNjYXBlSHRtbCAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UoL1smPD5cIidgPVxcL10vZywgZnVuY3Rpb24gZnJvbUVudGl0eU1hcCAocykge1xuICAgICAgcmV0dXJuIGVudGl0eU1hcFtzXTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciB3aGl0ZVJlID0gL1xccyovO1xuICB2YXIgc3BhY2VSZSA9IC9cXHMrLztcbiAgdmFyIGVxdWFsc1JlID0gL1xccyo9LztcbiAgdmFyIGN1cmx5UmUgPSAvXFxzKlxcfS87XG4gIHZhciB0YWdSZSA9IC8jfFxcXnxcXC98PnxcXHt8Jnw9fCEvO1xuXG4gIC8qKlxuICAgKiBCcmVha3MgdXAgdGhlIGdpdmVuIGB0ZW1wbGF0ZWAgc3RyaW5nIGludG8gYSB0cmVlIG9mIHRva2Vucy4gSWYgdGhlIGB0YWdzYFxuICAgKiBhcmd1bWVudCBpcyBnaXZlbiBoZXJlIGl0IG11c3QgYmUgYW4gYXJyYXkgd2l0aCB0d28gc3RyaW5nIHZhbHVlczogdGhlXG4gICAqIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncyB1c2VkIGluIHRoZSB0ZW1wbGF0ZSAoZS5nLiBbIFwiPCVcIiwgXCIlPlwiIF0pLiBPZlxuICAgKiBjb3Vyc2UsIHRoZSBkZWZhdWx0IGlzIHRvIHVzZSBtdXN0YWNoZXMgKGkuZS4gbXVzdGFjaGUudGFncykuXG4gICAqXG4gICAqIEEgdG9rZW4gaXMgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCA0IGVsZW1lbnRzLiBUaGUgZmlyc3QgZWxlbWVudCBpcyB0aGVcbiAgICogbXVzdGFjaGUgc3ltYm9sIHRoYXQgd2FzIHVzZWQgaW5zaWRlIHRoZSB0YWcsIGUuZy4gXCIjXCIgb3IgXCImXCIuIElmIHRoZSB0YWdcbiAgICogZGlkIG5vdCBjb250YWluIGEgc3ltYm9sIChpLmUuIHt7bXlWYWx1ZX19KSB0aGlzIGVsZW1lbnQgaXMgXCJuYW1lXCIuIEZvclxuICAgKiBhbGwgdGV4dCB0aGF0IGFwcGVhcnMgb3V0c2lkZSBhIHN5bWJvbCB0aGlzIGVsZW1lbnQgaXMgXCJ0ZXh0XCIuXG4gICAqXG4gICAqIFRoZSBzZWNvbmQgZWxlbWVudCBvZiBhIHRva2VuIGlzIGl0cyBcInZhbHVlXCIuIEZvciBtdXN0YWNoZSB0YWdzIHRoaXMgaXNcbiAgICogd2hhdGV2ZXIgZWxzZSB3YXMgaW5zaWRlIHRoZSB0YWcgYmVzaWRlcyB0aGUgb3BlbmluZyBzeW1ib2wuIEZvciB0ZXh0IHRva2Vuc1xuICAgKiB0aGlzIGlzIHRoZSB0ZXh0IGl0c2VsZi5cbiAgICpcbiAgICogVGhlIHRoaXJkIGFuZCBmb3VydGggZWxlbWVudHMgb2YgdGhlIHRva2VuIGFyZSB0aGUgc3RhcnQgYW5kIGVuZCBpbmRpY2VzLFxuICAgKiByZXNwZWN0aXZlbHksIG9mIHRoZSB0b2tlbiBpbiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUuXG4gICAqXG4gICAqIFRva2VucyB0aGF0IGFyZSB0aGUgcm9vdCBub2RlIG9mIGEgc3VidHJlZSBjb250YWluIHR3byBtb3JlIGVsZW1lbnRzOiAxKSBhblxuICAgKiBhcnJheSBvZiB0b2tlbnMgaW4gdGhlIHN1YnRyZWUgYW5kIDIpIHRoZSBpbmRleCBpbiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgYXRcbiAgICogd2hpY2ggdGhlIGNsb3NpbmcgdGFnIGZvciB0aGF0IHNlY3Rpb24gYmVnaW5zLlxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZSAodGVtcGxhdGUsIHRhZ3MpIHtcbiAgICBpZiAoIXRlbXBsYXRlKVxuICAgICAgcmV0dXJuIFtdO1xuXG4gICAgdmFyIHNlY3Rpb25zID0gW107ICAgICAvLyBTdGFjayB0byBob2xkIHNlY3Rpb24gdG9rZW5zXG4gICAgdmFyIHRva2VucyA9IFtdOyAgICAgICAvLyBCdWZmZXIgdG8gaG9sZCB0aGUgdG9rZW5zXG4gICAgdmFyIHNwYWNlcyA9IFtdOyAgICAgICAvLyBJbmRpY2VzIG9mIHdoaXRlc3BhY2UgdG9rZW5zIG9uIHRoZSBjdXJyZW50IGxpbmVcbiAgICB2YXIgaGFzVGFnID0gZmFsc2U7ICAgIC8vIElzIHRoZXJlIGEge3t0YWd9fSBvbiB0aGUgY3VycmVudCBsaW5lP1xuICAgIHZhciBub25TcGFjZSA9IGZhbHNlOyAgLy8gSXMgdGhlcmUgYSBub24tc3BhY2UgY2hhciBvbiB0aGUgY3VycmVudCBsaW5lP1xuXG4gICAgLy8gU3RyaXBzIGFsbCB3aGl0ZXNwYWNlIHRva2VucyBhcnJheSBmb3IgdGhlIGN1cnJlbnQgbGluZVxuICAgIC8vIGlmIHRoZXJlIHdhcyBhIHt7I3RhZ319IG9uIGl0IGFuZCBvdGhlcndpc2Ugb25seSBzcGFjZS5cbiAgICBmdW5jdGlvbiBzdHJpcFNwYWNlICgpIHtcbiAgICAgIGlmIChoYXNUYWcgJiYgIW5vblNwYWNlKSB7XG4gICAgICAgIHdoaWxlIChzcGFjZXMubGVuZ3RoKVxuICAgICAgICAgIGRlbGV0ZSB0b2tlbnNbc3BhY2VzLnBvcCgpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwYWNlcyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBoYXNUYWcgPSBmYWxzZTtcbiAgICAgIG5vblNwYWNlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIG9wZW5pbmdUYWdSZSwgY2xvc2luZ1RhZ1JlLCBjbG9zaW5nQ3VybHlSZTtcbiAgICBmdW5jdGlvbiBjb21waWxlVGFncyAodGFnc1RvQ29tcGlsZSkge1xuICAgICAgaWYgKHR5cGVvZiB0YWdzVG9Db21waWxlID09PSAnc3RyaW5nJylcbiAgICAgICAgdGFnc1RvQ29tcGlsZSA9IHRhZ3NUb0NvbXBpbGUuc3BsaXQoc3BhY2VSZSwgMik7XG5cbiAgICAgIGlmICghaXNBcnJheSh0YWdzVG9Db21waWxlKSB8fCB0YWdzVG9Db21waWxlLmxlbmd0aCAhPT0gMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRhZ3M6ICcgKyB0YWdzVG9Db21waWxlKTtcblxuICAgICAgb3BlbmluZ1RhZ1JlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodGFnc1RvQ29tcGlsZVswXSkgKyAnXFxcXHMqJyk7XG4gICAgICBjbG9zaW5nVGFnUmUgPSBuZXcgUmVnRXhwKCdcXFxccyonICsgZXNjYXBlUmVnRXhwKHRhZ3NUb0NvbXBpbGVbMV0pKTtcbiAgICAgIGNsb3NpbmdDdXJseVJlID0gbmV3IFJlZ0V4cCgnXFxcXHMqJyArIGVzY2FwZVJlZ0V4cCgnfScgKyB0YWdzVG9Db21waWxlWzFdKSk7XG4gICAgfVxuXG4gICAgY29tcGlsZVRhZ3ModGFncyB8fCBtdXN0YWNoZS50YWdzKTtcblxuICAgIHZhciBzY2FubmVyID0gbmV3IFNjYW5uZXIodGVtcGxhdGUpO1xuXG4gICAgdmFyIHN0YXJ0LCB0eXBlLCB2YWx1ZSwgY2hyLCB0b2tlbiwgb3BlblNlY3Rpb247XG4gICAgd2hpbGUgKCFzY2FubmVyLmVvcygpKSB7XG4gICAgICBzdGFydCA9IHNjYW5uZXIucG9zO1xuXG4gICAgICAvLyBNYXRjaCBhbnkgdGV4dCBiZXR3ZWVuIHRhZ3MuXG4gICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKG9wZW5pbmdUYWdSZSk7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCB2YWx1ZUxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2hyID0gdmFsdWUuY2hhckF0KGkpO1xuXG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjaHIpKSB7XG4gICAgICAgICAgICBzcGFjZXMucHVzaCh0b2tlbnMubGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9uU3BhY2UgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRva2Vucy5wdXNoKFsgJ3RleHQnLCBjaHIsIHN0YXJ0LCBzdGFydCArIDEgXSk7XG4gICAgICAgICAgc3RhcnQgKz0gMTtcblxuICAgICAgICAgIC8vIENoZWNrIGZvciB3aGl0ZXNwYWNlIG9uIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgICAgICAgaWYgKGNociA9PT0gJ1xcbicpXG4gICAgICAgICAgICBzdHJpcFNwYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTWF0Y2ggdGhlIG9wZW5pbmcgdGFnLlxuICAgICAgaWYgKCFzY2FubmVyLnNjYW4ob3BlbmluZ1RhZ1JlKSlcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGhhc1RhZyA9IHRydWU7XG5cbiAgICAgIC8vIEdldCB0aGUgdGFnIHR5cGUuXG4gICAgICB0eXBlID0gc2Nhbm5lci5zY2FuKHRhZ1JlKSB8fCAnbmFtZSc7XG4gICAgICBzY2FubmVyLnNjYW4od2hpdGVSZSk7XG5cbiAgICAgIC8vIEdldCB0aGUgdGFnIHZhbHVlLlxuICAgICAgaWYgKHR5cGUgPT09ICc9Jykge1xuICAgICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKGVxdWFsc1JlKTtcbiAgICAgICAgc2Nhbm5lci5zY2FuKGVxdWFsc1JlKTtcbiAgICAgICAgc2Nhbm5lci5zY2FuVW50aWwoY2xvc2luZ1RhZ1JlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3snKSB7XG4gICAgICAgIHZhbHVlID0gc2Nhbm5lci5zY2FuVW50aWwoY2xvc2luZ0N1cmx5UmUpO1xuICAgICAgICBzY2FubmVyLnNjYW4oY3VybHlSZSk7XG4gICAgICAgIHNjYW5uZXIuc2NhblVudGlsKGNsb3NpbmdUYWdSZSk7XG4gICAgICAgIHR5cGUgPSAnJic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKGNsb3NpbmdUYWdSZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1hdGNoIHRoZSBjbG9zaW5nIHRhZy5cbiAgICAgIGlmICghc2Nhbm5lci5zY2FuKGNsb3NpbmdUYWdSZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5jbG9zZWQgdGFnIGF0ICcgKyBzY2FubmVyLnBvcyk7XG5cbiAgICAgIHRva2VuID0gWyB0eXBlLCB2YWx1ZSwgc3RhcnQsIHNjYW5uZXIucG9zIF07XG4gICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG5cbiAgICAgIGlmICh0eXBlID09PSAnIycgfHwgdHlwZSA9PT0gJ14nKSB7XG4gICAgICAgIHNlY3Rpb25zLnB1c2godG9rZW4pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnLycpIHtcbiAgICAgICAgLy8gQ2hlY2sgc2VjdGlvbiBuZXN0aW5nLlxuICAgICAgICBvcGVuU2VjdGlvbiA9IHNlY3Rpb25zLnBvcCgpO1xuXG4gICAgICAgIGlmICghb3BlblNlY3Rpb24pXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbm9wZW5lZCBzZWN0aW9uIFwiJyArIHZhbHVlICsgJ1wiIGF0ICcgKyBzdGFydCk7XG5cbiAgICAgICAgaWYgKG9wZW5TZWN0aW9uWzFdICE9PSB2YWx1ZSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuY2xvc2VkIHNlY3Rpb24gXCInICsgb3BlblNlY3Rpb25bMV0gKyAnXCIgYXQgJyArIHN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ25hbWUnIHx8IHR5cGUgPT09ICd7JyB8fCB0eXBlID09PSAnJicpIHtcbiAgICAgICAgbm9uU3BhY2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnPScpIHtcbiAgICAgICAgLy8gU2V0IHRoZSB0YWdzIGZvciB0aGUgbmV4dCB0aW1lIGFyb3VuZC5cbiAgICAgICAgY29tcGlsZVRhZ3ModmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gb3BlbiBzZWN0aW9ucyB3aGVuIHdlJ3JlIGRvbmUuXG4gICAgb3BlblNlY3Rpb24gPSBzZWN0aW9ucy5wb3AoKTtcblxuICAgIGlmIChvcGVuU2VjdGlvbilcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5jbG9zZWQgc2VjdGlvbiBcIicgKyBvcGVuU2VjdGlvblsxXSArICdcIiBhdCAnICsgc2Nhbm5lci5wb3MpO1xuXG4gICAgcmV0dXJuIG5lc3RUb2tlbnMoc3F1YXNoVG9rZW5zKHRva2VucykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbWJpbmVzIHRoZSB2YWx1ZXMgb2YgY29uc2VjdXRpdmUgdGV4dCB0b2tlbnMgaW4gdGhlIGdpdmVuIGB0b2tlbnNgIGFycmF5XG4gICAqIHRvIGEgc2luZ2xlIHRva2VuLlxuICAgKi9cbiAgZnVuY3Rpb24gc3F1YXNoVG9rZW5zICh0b2tlbnMpIHtcbiAgICB2YXIgc3F1YXNoZWRUb2tlbnMgPSBbXTtcblxuICAgIHZhciB0b2tlbiwgbGFzdFRva2VuO1xuICAgIGZvciAodmFyIGkgPSAwLCBudW1Ub2tlbnMgPSB0b2tlbnMubGVuZ3RoOyBpIDwgbnVtVG9rZW5zOyArK2kpIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuWzBdID09PSAndGV4dCcgJiYgbGFzdFRva2VuICYmIGxhc3RUb2tlblswXSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgbGFzdFRva2VuWzFdICs9IHRva2VuWzFdO1xuICAgICAgICAgIGxhc3RUb2tlblszXSA9IHRva2VuWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNxdWFzaGVkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2VuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNxdWFzaGVkVG9rZW5zO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1zIHRoZSBnaXZlbiBhcnJheSBvZiBgdG9rZW5zYCBpbnRvIGEgbmVzdGVkIHRyZWUgc3RydWN0dXJlIHdoZXJlXG4gICAqIHRva2VucyB0aGF0IHJlcHJlc2VudCBhIHNlY3Rpb24gaGF2ZSB0d28gYWRkaXRpb25hbCBpdGVtczogMSkgYW4gYXJyYXkgb2ZcbiAgICogYWxsIHRva2VucyB0aGF0IGFwcGVhciBpbiB0aGF0IHNlY3Rpb24gYW5kIDIpIHRoZSBpbmRleCBpbiB0aGUgb3JpZ2luYWxcbiAgICogdGVtcGxhdGUgdGhhdCByZXByZXNlbnRzIHRoZSBlbmQgb2YgdGhhdCBzZWN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gbmVzdFRva2VucyAodG9rZW5zKSB7XG4gICAgdmFyIG5lc3RlZFRva2VucyA9IFtdO1xuICAgIHZhciBjb2xsZWN0b3IgPSBuZXN0ZWRUb2tlbnM7XG4gICAgdmFyIHNlY3Rpb25zID0gW107XG5cbiAgICB2YXIgdG9rZW4sIHNlY3Rpb247XG4gICAgZm9yICh2YXIgaSA9IDAsIG51bVRva2VucyA9IHRva2Vucy5sZW5ndGg7IGkgPCBudW1Ub2tlbnM7ICsraSkge1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIHN3aXRjaCAodG9rZW5bMF0pIHtcbiAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgIGNhc2UgJ14nOlxuICAgICAgICAgIGNvbGxlY3Rvci5wdXNoKHRva2VuKTtcbiAgICAgICAgICBzZWN0aW9ucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb2xsZWN0b3IgPSB0b2tlbls0XSA9IFtdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICBzZWN0aW9uID0gc2VjdGlvbnMucG9wKCk7XG4gICAgICAgICAgc2VjdGlvbls1XSA9IHRva2VuWzJdO1xuICAgICAgICAgIGNvbGxlY3RvciA9IHNlY3Rpb25zLmxlbmd0aCA+IDAgPyBzZWN0aW9uc1tzZWN0aW9ucy5sZW5ndGggLSAxXVs0XSA6IG5lc3RlZFRva2VucztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb2xsZWN0b3IucHVzaCh0b2tlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5lc3RlZFRva2VucztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNpbXBsZSBzdHJpbmcgc2Nhbm5lciB0aGF0IGlzIHVzZWQgYnkgdGhlIHRlbXBsYXRlIHBhcnNlciB0byBmaW5kXG4gICAqIHRva2VucyBpbiB0ZW1wbGF0ZSBzdHJpbmdzLlxuICAgKi9cbiAgZnVuY3Rpb24gU2Nhbm5lciAoc3RyaW5nKSB7XG4gICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgdGhpcy50YWlsID0gc3RyaW5nO1xuICAgIHRoaXMucG9zID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFpbCBpcyBlbXB0eSAoZW5kIG9mIHN0cmluZykuXG4gICAqL1xuICBTY2FubmVyLnByb3RvdHlwZS5lb3MgPSBmdW5jdGlvbiBlb3MgKCkge1xuICAgIHJldHVybiB0aGlzLnRhaWwgPT09ICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUcmllcyB0byBtYXRjaCB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgKiBSZXR1cm5zIHRoZSBtYXRjaGVkIHRleHQgaWYgaXQgY2FuIG1hdGNoLCB0aGUgZW1wdHkgc3RyaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIFNjYW5uZXIucHJvdG90eXBlLnNjYW4gPSBmdW5jdGlvbiBzY2FuIChyZSkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMudGFpbC5tYXRjaChyZSk7XG5cbiAgICBpZiAoIW1hdGNoIHx8IG1hdGNoLmluZGV4ICE9PSAwKVxuICAgICAgcmV0dXJuICcnO1xuXG4gICAgdmFyIHN0cmluZyA9IG1hdGNoWzBdO1xuXG4gICAgdGhpcy50YWlsID0gdGhpcy50YWlsLnN1YnN0cmluZyhzdHJpbmcubGVuZ3RoKTtcbiAgICB0aGlzLnBvcyArPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogU2tpcHMgYWxsIHRleHQgdW50aWwgdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiBjYW4gYmUgbWF0Y2hlZC4gUmV0dXJuc1xuICAgKiB0aGUgc2tpcHBlZCBzdHJpbmcsIHdoaWNoIGlzIHRoZSBlbnRpcmUgdGFpbCBpZiBubyBtYXRjaCBjYW4gYmUgbWFkZS5cbiAgICovXG4gIFNjYW5uZXIucHJvdG90eXBlLnNjYW5VbnRpbCA9IGZ1bmN0aW9uIHNjYW5VbnRpbCAocmUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnRhaWwuc2VhcmNoKHJlKSwgbWF0Y2g7XG5cbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICBjYXNlIC0xOlxuICAgICAgICBtYXRjaCA9IHRoaXMudGFpbDtcbiAgICAgICAgdGhpcy50YWlsID0gJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAwOlxuICAgICAgICBtYXRjaCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1hdGNoID0gdGhpcy50YWlsLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgIHRoaXMudGFpbCA9IHRoaXMudGFpbC5zdWJzdHJpbmcoaW5kZXgpO1xuICAgIH1cblxuICAgIHRoaXMucG9zICs9IG1hdGNoLmxlbmd0aDtcblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyBhIHJlbmRlcmluZyBjb250ZXh0IGJ5IHdyYXBwaW5nIGEgdmlldyBvYmplY3QgYW5kXG4gICAqIG1haW50YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgY29udGV4dC5cbiAgICovXG4gIGZ1bmN0aW9uIENvbnRleHQgKHZpZXcsIHBhcmVudENvbnRleHQpIHtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgIHRoaXMuY2FjaGUgPSB7ICcuJzogdGhpcy52aWV3IH07XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRDb250ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY29udGV4dCB1c2luZyB0aGUgZ2l2ZW4gdmlldyB3aXRoIHRoaXMgY29udGV4dFxuICAgKiBhcyB0aGUgcGFyZW50LlxuICAgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKHZpZXcpIHtcbiAgICByZXR1cm4gbmV3IENvbnRleHQodmlldywgdGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBuYW1lIGluIHRoaXMgY29udGV4dCwgdHJhdmVyc2luZ1xuICAgKiB1cCB0aGUgY29udGV4dCBoaWVyYXJjaHkgaWYgdGhlIHZhbHVlIGlzIGFic2VudCBpbiB0aGlzIGNvbnRleHQncyB2aWV3LlxuICAgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUubG9va3VwID0gZnVuY3Rpb24gbG9va3VwIChuYW1lKSB7XG4gICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuICAgIHZhciB2YWx1ZTtcbiAgICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHZhbHVlID0gY2FjaGVbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgbmFtZXMsIGluZGV4LCBsb29rdXBIaXQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAgIHZhbHVlID0gY29udGV4dC52aWV3O1xuICAgICAgICAgIG5hbWVzID0gbmFtZS5zcGxpdCgnLicpO1xuICAgICAgICAgIGluZGV4ID0gMDtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFVzaW5nIHRoZSBkb3Qgbm90aW9uIHBhdGggaW4gYG5hbWVgLCB3ZSBkZXNjZW5kIHRocm91Z2ggdGhlXG4gICAgICAgICAgICogbmVzdGVkIG9iamVjdHMuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUbyBiZSBjZXJ0YWluIHRoYXQgdGhlIGxvb2t1cCBoYXMgYmVlbiBzdWNjZXNzZnVsLCB3ZSBoYXZlIHRvXG4gICAgICAgICAgICogY2hlY2sgaWYgdGhlIGxhc3Qgb2JqZWN0IGluIHRoZSBwYXRoIGFjdHVhbGx5IGhhcyB0aGUgcHJvcGVydHlcbiAgICAgICAgICAgKiB3ZSBhcmUgbG9va2luZyBmb3IuIFdlIHN0b3JlIHRoZSByZXN1bHQgaW4gYGxvb2t1cEhpdGAuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUaGlzIGlzIHNwZWNpYWxseSBuZWNlc3NhcnkgZm9yIHdoZW4gdGhlIHZhbHVlIGhhcyBiZWVuIHNldCB0b1xuICAgICAgICAgICAqIGB1bmRlZmluZWRgIGFuZCB3ZSB3YW50IHRvIGF2b2lkIGxvb2tpbmcgdXAgcGFyZW50IGNvbnRleHRzLlxuICAgICAgICAgICAqKi9cbiAgICAgICAgICB3aGlsZSAodmFsdWUgIT0gbnVsbCAmJiBpbmRleCA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSBuYW1lcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICBsb29rdXBIaXQgPSBoYXNQcm9wZXJ0eSh2YWx1ZSwgbmFtZXNbaW5kZXhdKTtcblxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVtuYW1lc1tpbmRleCsrXV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gY29udGV4dC52aWV3W25hbWVdO1xuICAgICAgICAgIGxvb2t1cEhpdCA9IGhhc1Byb3BlcnR5KGNvbnRleHQudmlldywgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9va3VwSGl0KVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgY2FjaGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpXG4gICAgICB2YWx1ZSA9IHZhbHVlLmNhbGwodGhpcy52aWV3KTtcblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQSBXcml0ZXIga25vd3MgaG93IHRvIHRha2UgYSBzdHJlYW0gb2YgdG9rZW5zIGFuZCByZW5kZXIgdGhlbSB0byBhXG4gICAqIHN0cmluZywgZ2l2ZW4gYSBjb250ZXh0LiBJdCBhbHNvIG1haW50YWlucyBhIGNhY2hlIG9mIHRlbXBsYXRlcyB0b1xuICAgKiBhdm9pZCB0aGUgbmVlZCB0byBwYXJzZSB0aGUgc2FtZSB0ZW1wbGF0ZSB0d2ljZS5cbiAgICovXG4gIGZ1bmN0aW9uIFdyaXRlciAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgY2FjaGVkIHRlbXBsYXRlcyBpbiB0aGlzIHdyaXRlci5cbiAgICovXG4gIFdyaXRlci5wcm90b3R5cGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uIGNsZWFyQ2FjaGUgKCkge1xuICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgfTtcblxuICAvKipcbiAgICogUGFyc2VzIGFuZCBjYWNoZXMgdGhlIGdpdmVuIGB0ZW1wbGF0ZWAgYW5kIHJldHVybnMgdGhlIGFycmF5IG9mIHRva2Vuc1xuICAgKiB0aGF0IGlzIGdlbmVyYXRlZCBmcm9tIHRoZSBwYXJzZS5cbiAgICovXG4gIFdyaXRlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAodGVtcGxhdGUsIHRhZ3MpIHtcbiAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuICAgIHZhciB0b2tlbnMgPSBjYWNoZVt0ZW1wbGF0ZV07XG5cbiAgICBpZiAodG9rZW5zID09IG51bGwpXG4gICAgICB0b2tlbnMgPSBjYWNoZVt0ZW1wbGF0ZV0gPSBwYXJzZVRlbXBsYXRlKHRlbXBsYXRlLCB0YWdzKTtcblxuICAgIHJldHVybiB0b2tlbnM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZ2gtbGV2ZWwgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byByZW5kZXIgdGhlIGdpdmVuIGB0ZW1wbGF0ZWAgd2l0aFxuICAgKiB0aGUgZ2l2ZW4gYHZpZXdgLlxuICAgKlxuICAgKiBUaGUgb3B0aW9uYWwgYHBhcnRpYWxzYCBhcmd1bWVudCBtYXkgYmUgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlXG4gICAqIG5hbWVzIGFuZCB0ZW1wbGF0ZXMgb2YgcGFydGlhbHMgdGhhdCBhcmUgdXNlZCBpbiB0aGUgdGVtcGxhdGUuIEl0IG1heVxuICAgKiBhbHNvIGJlIGEgZnVuY3Rpb24gdGhhdCBpcyB1c2VkIHRvIGxvYWQgcGFydGlhbCB0ZW1wbGF0ZXMgb24gdGhlIGZseVxuICAgKiB0aGF0IHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50OiB0aGUgbmFtZSBvZiB0aGUgcGFydGlhbC5cbiAgICovXG4gIFdyaXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyICh0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMpIHtcbiAgICB2YXIgdG9rZW5zID0gdGhpcy5wYXJzZSh0ZW1wbGF0ZSk7XG4gICAgdmFyIGNvbnRleHQgPSAodmlldyBpbnN0YW5jZW9mIENvbnRleHQpID8gdmlldyA6IG5ldyBDb250ZXh0KHZpZXcpO1xuICAgIHJldHVybiB0aGlzLnJlbmRlclRva2Vucyh0b2tlbnMsIGNvbnRleHQsIHBhcnRpYWxzLCB0ZW1wbGF0ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIExvdy1sZXZlbCBtZXRob2QgdGhhdCByZW5kZXJzIHRoZSBnaXZlbiBhcnJheSBvZiBgdG9rZW5zYCB1c2luZ1xuICAgKiB0aGUgZ2l2ZW4gYGNvbnRleHRgIGFuZCBgcGFydGlhbHNgLlxuICAgKlxuICAgKiBOb3RlOiBUaGUgYG9yaWdpbmFsVGVtcGxhdGVgIGlzIG9ubHkgZXZlciB1c2VkIHRvIGV4dHJhY3QgdGhlIHBvcnRpb25cbiAgICogb2YgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIHRoYXQgd2FzIGNvbnRhaW5lZCBpbiBhIGhpZ2hlci1vcmRlciBzZWN0aW9uLlxuICAgKiBJZiB0aGUgdGVtcGxhdGUgZG9lc24ndCB1c2UgaGlnaGVyLW9yZGVyIHNlY3Rpb25zLCB0aGlzIGFyZ3VtZW50IG1heVxuICAgKiBiZSBvbWl0dGVkLlxuICAgKi9cbiAgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJUb2tlbnMgPSBmdW5jdGlvbiByZW5kZXJUb2tlbnMgKHRva2VucywgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpIHtcbiAgICB2YXIgYnVmZmVyID0gJyc7XG5cbiAgICB2YXIgdG9rZW4sIHN5bWJvbCwgdmFsdWU7XG4gICAgZm9yICh2YXIgaSA9IDAsIG51bVRva2VucyA9IHRva2Vucy5sZW5ndGg7IGkgPCBudW1Ub2tlbnM7ICsraSkge1xuICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgIHN5bWJvbCA9IHRva2VuWzBdO1xuXG4gICAgICBpZiAoc3ltYm9sID09PSAnIycpIHZhbHVlID0gdGhpcy5yZW5kZXJTZWN0aW9uKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7XG4gICAgICBlbHNlIGlmIChzeW1ib2wgPT09ICdeJykgdmFsdWUgPSB0aGlzLnJlbmRlckludmVydGVkKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7XG4gICAgICBlbHNlIGlmIChzeW1ib2wgPT09ICc+JykgdmFsdWUgPSB0aGlzLnJlbmRlclBhcnRpYWwodG9rZW4sIGNvbnRleHQsIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlKTtcbiAgICAgIGVsc2UgaWYgKHN5bWJvbCA9PT0gJyYnKSB2YWx1ZSA9IHRoaXMudW5lc2NhcGVkVmFsdWUodG9rZW4sIGNvbnRleHQpO1xuICAgICAgZWxzZSBpZiAoc3ltYm9sID09PSAnbmFtZScpIHZhbHVlID0gdGhpcy5lc2NhcGVkVmFsdWUodG9rZW4sIGNvbnRleHQpO1xuICAgICAgZWxzZSBpZiAoc3ltYm9sID09PSAndGV4dCcpIHZhbHVlID0gdGhpcy5yYXdWYWx1ZSh0b2tlbik7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBidWZmZXIgKz0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfTtcblxuICBXcml0ZXIucHJvdG90eXBlLnJlbmRlclNlY3Rpb24gPSBmdW5jdGlvbiByZW5kZXJTZWN0aW9uICh0b2tlbiwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGJ1ZmZlciA9ICcnO1xuICAgIHZhciB2YWx1ZSA9IGNvbnRleHQubG9va3VwKHRva2VuWzFdKTtcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZW5kZXIgYW4gYXJiaXRyYXJ5IHRlbXBsYXRlXG4gICAgLy8gaW4gdGhlIGN1cnJlbnQgY29udGV4dCBieSBoaWdoZXItb3JkZXIgc2VjdGlvbnMuXG4gICAgZnVuY3Rpb24gc3ViUmVuZGVyICh0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHNlbGYucmVuZGVyKHRlbXBsYXRlLCBjb250ZXh0LCBwYXJ0aWFscyk7XG4gICAgfVxuXG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3IgKHZhciBqID0gMCwgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGogPCB2YWx1ZUxlbmd0aDsgKytqKSB7XG4gICAgICAgIGJ1ZmZlciArPSB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dC5wdXNoKHZhbHVlW2pdKSwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGJ1ZmZlciArPSB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dC5wdXNoKHZhbHVlKSwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxUZW1wbGF0ZSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBoaWdoZXItb3JkZXIgc2VjdGlvbnMgd2l0aG91dCB0aGUgb3JpZ2luYWwgdGVtcGxhdGUnKTtcblxuICAgICAgLy8gRXh0cmFjdCB0aGUgcG9ydGlvbiBvZiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB0aGUgc2VjdGlvbiBjb250YWlucy5cbiAgICAgIHZhbHVlID0gdmFsdWUuY2FsbChjb250ZXh0LnZpZXcsIG9yaWdpbmFsVGVtcGxhdGUuc2xpY2UodG9rZW5bM10sIHRva2VuWzVdKSwgc3ViUmVuZGVyKTtcblxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpXG4gICAgICAgIGJ1ZmZlciArPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyICs9IHRoaXMucmVuZGVyVG9rZW5zKHRva2VuWzRdLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXI7XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJJbnZlcnRlZCA9IGZ1bmN0aW9uIHJlbmRlckludmVydGVkICh0b2tlbiwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7XG5cbiAgICAvLyBVc2UgSmF2YVNjcmlwdCdzIGRlZmluaXRpb24gb2YgZmFsc3kuIEluY2x1ZGUgZW1wdHkgYXJyYXlzLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFubC9tdXN0YWNoZS5qcy9pc3N1ZXMvMTg2XG4gICAgaWYgKCF2YWx1ZSB8fCAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSlcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICB9O1xuXG4gIFdyaXRlci5wcm90b3R5cGUucmVuZGVyUGFydGlhbCA9IGZ1bmN0aW9uIHJlbmRlclBhcnRpYWwgKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscykge1xuICAgIGlmICghcGFydGlhbHMpIHJldHVybjtcblxuICAgIHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24ocGFydGlhbHMpID8gcGFydGlhbHModG9rZW5bMV0pIDogcGFydGlhbHNbdG9rZW5bMV1dO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVG9rZW5zKHRoaXMucGFyc2UodmFsdWUpLCBjb250ZXh0LCBwYXJ0aWFscywgdmFsdWUpO1xuICB9O1xuXG4gIFdyaXRlci5wcm90b3R5cGUudW5lc2NhcGVkVmFsdWUgPSBmdW5jdGlvbiB1bmVzY2FwZWRWYWx1ZSAodG9rZW4sIGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpXG4gICAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS5lc2NhcGVkVmFsdWUgPSBmdW5jdGlvbiBlc2NhcGVkVmFsdWUgKHRva2VuLCBjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlID0gY29udGV4dC5sb29rdXAodG9rZW5bMV0pO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKVxuICAgICAgcmV0dXJuIG11c3RhY2hlLmVzY2FwZSh2YWx1ZSk7XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS5yYXdWYWx1ZSA9IGZ1bmN0aW9uIHJhd1ZhbHVlICh0b2tlbikge1xuICAgIHJldHVybiB0b2tlblsxXTtcbiAgfTtcblxuICBtdXN0YWNoZS5uYW1lID0gJ211c3RhY2hlLmpzJztcbiAgbXVzdGFjaGUudmVyc2lvbiA9ICcyLjMuMCc7XG4gIG11c3RhY2hlLnRhZ3MgPSBbICd7eycsICd9fScgXTtcblxuICAvLyBBbGwgaGlnaC1sZXZlbCBtdXN0YWNoZS4qIGZ1bmN0aW9ucyB1c2UgdGhpcyB3cml0ZXIuXG4gIHZhciBkZWZhdWx0V3JpdGVyID0gbmV3IFdyaXRlcigpO1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGNhY2hlZCB0ZW1wbGF0ZXMgaW4gdGhlIGRlZmF1bHQgd3JpdGVyLlxuICAgKi9cbiAgbXVzdGFjaGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uIGNsZWFyQ2FjaGUgKCkge1xuICAgIHJldHVybiBkZWZhdWx0V3JpdGVyLmNsZWFyQ2FjaGUoKTtcbiAgfTtcblxuICAvKipcbiAgICogUGFyc2VzIGFuZCBjYWNoZXMgdGhlIGdpdmVuIHRlbXBsYXRlIGluIHRoZSBkZWZhdWx0IHdyaXRlciBhbmQgcmV0dXJucyB0aGVcbiAgICogYXJyYXkgb2YgdG9rZW5zIGl0IGNvbnRhaW5zLiBEb2luZyB0aGlzIGFoZWFkIG9mIHRpbWUgYXZvaWRzIHRoZSBuZWVkIHRvXG4gICAqIHBhcnNlIHRlbXBsYXRlcyBvbiB0aGUgZmx5IGFzIHRoZXkgYXJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVzdGFjaGUucGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAodGVtcGxhdGUsIHRhZ3MpIHtcbiAgICByZXR1cm4gZGVmYXVsdFdyaXRlci5wYXJzZSh0ZW1wbGF0ZSwgdGFncyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGB0ZW1wbGF0ZWAgd2l0aCB0aGUgZ2l2ZW4gYHZpZXdgIGFuZCBgcGFydGlhbHNgIHVzaW5nIHRoZVxuICAgKiBkZWZhdWx0IHdyaXRlci5cbiAgICovXG4gIG11c3RhY2hlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzKSB7XG4gICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGVtcGxhdGUhIFRlbXBsYXRlIHNob3VsZCBiZSBhIFwic3RyaW5nXCIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdidXQgXCInICsgdHlwZVN0cih0ZW1wbGF0ZSkgKyAnXCIgd2FzIGdpdmVuIGFzIHRoZSBmaXJzdCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyZ3VtZW50IGZvciBtdXN0YWNoZSNyZW5kZXIodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzKScpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0V3JpdGVyLnJlbmRlcih0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMpO1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCAwLjQueC4sXG4gIC8qZXNsaW50LWRpc2FibGUgKi8gLy8gZXNsaW50IHdhbnRzIGNhbWVsIGNhc2VkIGZ1bmN0aW9uIG5hbWVcbiAgbXVzdGFjaGUudG9faHRtbCA9IGZ1bmN0aW9uIHRvX2h0bWwgKHRlbXBsYXRlLCB2aWV3LCBwYXJ0aWFscywgc2VuZCkge1xuICAgIC8qZXNsaW50LWVuYWJsZSovXG5cbiAgICB2YXIgcmVzdWx0ID0gbXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlLCB2aWV3LCBwYXJ0aWFscyk7XG5cbiAgICBpZiAoaXNGdW5jdGlvbihzZW5kKSkge1xuICAgICAgc2VuZChyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcblxuICAvLyBFeHBvcnQgdGhlIGVzY2FwaW5nIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIHVzZXIgbWF5IG92ZXJyaWRlIGl0LlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phbmwvbXVzdGFjaGUuanMvaXNzdWVzLzI0NFxuICBtdXN0YWNoZS5lc2NhcGUgPSBlc2NhcGVIdG1sO1xuXG4gIC8vIEV4cG9ydCB0aGVzZSBtYWlubHkgZm9yIHRlc3RpbmcsIGJ1dCBhbHNvIGZvciBhZHZhbmNlZCB1c2FnZS5cbiAgbXVzdGFjaGUuU2Nhbm5lciA9IFNjYW5uZXI7XG4gIG11c3RhY2hlLkNvbnRleHQgPSBDb250ZXh0O1xuICBtdXN0YWNoZS5Xcml0ZXIgPSBXcml0ZXI7XG5cbiAgcmV0dXJuIG11c3RhY2hlO1xufSkpO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImI1NW1XRVwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9tdXN0YWNoZS9tdXN0YWNoZS5qc1wiLFwiLy4uLy4uL25vZGVfbW9kdWxlcy9tdXN0YWNoZVwiKSJdfQ==
